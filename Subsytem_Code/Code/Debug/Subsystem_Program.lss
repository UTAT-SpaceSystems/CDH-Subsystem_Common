
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000052  00800100  00800100  0000131c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001a0  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000190e  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000009e4  00000000  00000000  00002dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000bfa  00000000  00000000  000037de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000318  00000000  00000000  000043d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005b3  00000000  00000000  000046f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000012d4  00000000  00000000  00004ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  00005f77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	76 01       	movw	r14, r12
      7e:	08 02       	muls	r16, r24
      80:	92 02       	muls	r25, r18
      82:	06 03       	mulsu	r16, r22
      84:	46 03       	mulsu	r20, r22
      86:	c2 03       	fmuls	r20, r18
      88:	3f 04       	cpc	r3, r15
      8a:	dc 04       	cpc	r13, r12
      8c:	82 05       	cpc	r24, r2
      8e:	70 01       	movw	r14, r0
      90:	8b 06       	cpc	r8, r27

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 35       	cpi	r26, 0x52	; 82
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 4d 08 	call	0x109a	; 0x109a <main>
      b2:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      ba:	82 ee       	ldi	r24, 0xE2	; 226
      bc:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c0:	80 ea       	ldi	r24, 0xA0	; 160
      c2:	80 93 7b 00 	sts	0x007B, r24
      c6:	08 95       	ret

000000c8 <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      c8:	e8 e7       	ldi	r30, 0x78	; 120
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	20 81       	ld	r18, Z
      ce:	dc 01       	movw	r26, r24
      d0:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
      d2:	21 81       	ldd	r18, Z+1	; 0x01
      d4:	11 96       	adiw	r26, 0x01	; 1
      d6:	2c 93       	st	X, r18
      d8:	08 95       	ret

000000da <can_send_message>:
				delay_ms(500);
				LED_Reg_Write(0x00);
				send_now = 1;
			}
			
			if ((receive_arr[0] == 0x55) && (receive_arr[1] == 0x55) && (receive_arr[2] == 0x55) && (receive_arr[3] == 0x55)
      da:	28 e1       	ldi	r18, 0x18	; 24
      dc:	31 e0       	ldi	r19, 0x01	; 1
      de:	30 93 28 01 	sts	0x0128, r19
      e2:	20 93 27 01 	sts	0x0127, r18
      e6:	10 92 2b 01 	sts	0x012B, r1
      ea:	2a e0       	ldi	r18, 0x0A	; 10
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	30 93 23 01 	sts	0x0123, r19
      f2:	20 93 22 01 	sts	0x0122, r18
      f6:	22 e0       	ldi	r18, 0x02	; 2
			&& (receive_arr[4] == 0x55) && (receive_arr[5] == 0x55) && (receive_arr[6] == 0x55) && (receive_arr[7] == 0x55))
      f8:	20 93 21 01 	sts	0x0121, r18
      fc:	28 e0       	ldi	r18, 0x08	; 8
      fe:	20 93 26 01 	sts	0x0126, r18
     102:	24 e0       	ldi	r18, 0x04	; 4
     104:	20 93 4f 01 	sts	0x014F, r18
     108:	dc 01       	movw	r26, r24
     10a:	e8 e1       	ldi	r30, 0x18	; 24
     10c:	f1 e0       	ldi	r31, 0x01	; 1
     10e:	80 e2       	ldi	r24, 0x20	; 32
     110:	91 e0       	ldi	r25, 0x01	; 1
     112:	2d 91       	ld	r18, X+
     114:	21 93       	st	Z+, r18
     116:	e8 17       	cp	r30, r24
     118:	f9 07       	cpc	r31, r25
			{
				LED_Reg_Write(0x80);	//Toggle LED7 when the appropriate message is received.
     11a:	d9 f7       	brne	.-10     	; 0x112 <can_send_message+0x38>
     11c:	60 91 4f 01 	lds	r22, 0x014F
     120:	80 e2       	ldi	r24, 0x20	; 32
				delay_ms(500);
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 2c 01 	call	0x258	; 0x258 <can_cmd>
     128:	81 11       	cpse	r24, r1
				LED_Reg_Write(0x00);
     12a:	f8 cf       	rjmp	.-16     	; 0x11c <can_send_message+0x42>
     12c:	60 91 4f 01 	lds	r22, 0x014F
     130:	80 e2       	ldi	r24, 0x20	; 32
				send_data = 1;
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 58 07 	call	0xeb0	; 0xeb0 <can_get_status>
     138:	81 30       	cpi	r24, 0x01	; 1
			}
			
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     13a:	c1 f3       	breq	.-16     	; 0x12c <can_send_message+0x52>
				delay_ms(500);
				LED_Reg_Write(0x00);
				send_data = 1;
			}
			
			for (i = 0; i < 8; i ++)
     13c:	08 95       	ret

0000013e <can_init_mobs>:
     13e:	8d e2       	ldi	r24, 0x2D	; 45
     140:	91 e0       	ldi	r25, 0x01	; 1
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     142:	90 93 28 01 	sts	0x0128, r25
     146:	80 93 27 01 	sts	0x0127, r24
     14a:	10 92 2b 01 	sts	0x012B, r1
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     14e:	84 e1       	ldi	r24, 0x14	; 20
     150:	90 e0       	ldi	r25, 0x00	; 0
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     152:	90 93 23 01 	sts	0x0123, r25
     156:	80 93 22 01 	sts	0x0122, r24
     15a:	85 e0       	ldi	r24, 0x05	; 5
     15c:	80 93 21 01 	sts	0x0121, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     160:	88 e0       	ldi	r24, 0x08	; 8
     162:	80 93 26 01 	sts	0x0126, r24
		message.dlc = 8;			 // Max length of a CAN message.
     166:	10 92 4f 01 	sts	0x014F, r1
		mob_number = 0;
     16a:	60 91 4f 01 	lds	r22, 0x014F
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     16e:	80 e2       	ldi	r24, 0x20	; 32
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 2c 01 	call	0x258	; 0x258 <can_cmd>
     176:	81 11       	cpse	r24, r1
     178:	f8 cf       	rjmp	.-16     	; 0x16a <can_init_mobs+0x2c>
     17a:	87 e4       	ldi	r24, 0x47	; 71
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	90 93 28 01 	sts	0x0128, r25
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     182:	80 93 27 01 	sts	0x0127, r24
		mob_number = 0;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     186:	10 92 2b 01 	sts	0x012B, r1
     18a:	89 e1       	ldi	r24, 0x19	; 25
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	90 93 23 01 	sts	0x0123, r25
     192:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     196:	85 e0       	ldi	r24, 0x05	; 5
     198:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;				// Max length of a CAN message.
     19c:	98 e0       	ldi	r25, 0x08	; 8
     19e:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     1a2:	80 93 4f 01 	sts	0x014F, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     1a6:	60 91 4f 01 	lds	r22, 0x014F
     1aa:	80 e2       	ldi	r24, 0x20	; 32
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	0e 94 2c 01 	call	0x258	; 0x258 <can_cmd>
     1b2:	81 11       	cpse	r24, r1
     1b4:	f8 cf       	rjmp	.-16     	; 0x1a6 <can_init_mobs+0x68>
}
     1b6:	08 95       	ret

000001b8 <can_clear_all_mob>:
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	ad ee       	ldi	r26, 0xED	; 237
     1bc:	b0 e0       	ldi	r27, 0x00	; 0
     1be:	3e ee       	ldi	r19, 0xEE	; 238
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	98 2f       	mov	r25, r24
     1c4:	92 95       	swap	r25
     1c6:	90 7f       	andi	r25, 0xF0	; 240
     1c8:	9c 93       	st	X, r25
     1ca:	e3 2f       	mov	r30, r19
     1cc:	f2 2f       	mov	r31, r18
     1ce:	11 92       	st	Z+, r1
     1d0:	e8 3f       	cpi	r30, 0xF8	; 248
     1d2:	f1 05       	cpc	r31, r1
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <can_clear_all_mob+0x16>
     1d6:	8f 5f       	subi	r24, 0xFF	; 255
     1d8:	86 30       	cpi	r24, 0x06	; 6
     1da:	99 f7       	brne	.-26     	; 0x1c2 <can_clear_all_mob+0xa>
     1dc:	08 95       	ret

000001de <can_get_mob_status>:

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (uint8_t)(conf_index >> 3);
     1de:	80 91 ef 00 	lds	r24, 0x00EF
     1e2:	80 7c       	andi	r24, 0xC0	; 192
     1e4:	61 f0       	breq	.+24     	; 0x1fe <can_get_mob_status+0x20>
     1e6:	80 91 ee 00 	lds	r24, 0x00EE
     1ea:	98 2f       	mov	r25, r24
     1ec:	90 7e       	andi	r25, 0xE0	; 224
     1ee:	28 2f       	mov	r18, r24
     1f0:	20 76       	andi	r18, 0x60	; 96
     1f2:	20 32       	cpi	r18, 0x20	; 32

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
     1f4:	31 f0       	breq	.+12     	; 0x202 <can_get_mob_status+0x24>
     1f6:	90 34       	cpi	r25, 0x40	; 64
     1f8:	31 f0       	breq	.+12     	; 0x206 <can_get_mob_status+0x28>
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
     1fa:	8f 71       	andi	r24, 0x1F	; 31
     1fc:	08 95       	ret
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
     200:	08 95       	ret
     202:	89 2f       	mov	r24, r25
     204:	08 95       	ret
     206:	89 2f       	mov	r24, r25

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
     208:	08 95       	ret

0000020a <can_get_data>:
     20a:	fc 01       	movw	r30, r24
     20c:	80 e0       	ldi	r24, 0x00	; 0
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     20e:	aa ef       	ldi	r26, 0xFA	; 250
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	9c 91       	ld	r25, X
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     214:	91 93       	st	Z+, r25
     216:	8f 5f       	subi	r24, 0xFF	; 255
     218:	88 30       	cpi	r24, 0x08	; 8
    {
        if (try_conf == 1)
        {
            Can_reset();
            conf_index++;
            ovrtim_flag=0;
     21a:	d9 f7       	brne	.-10     	; 0x212 <can_get_data+0x8>
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     21c:	08 95       	ret

0000021e <can_fixed_baudrate>:
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 d8 00 	sts	0x00D8, r24
        {
            u8_temp0 = CANSTMOB;
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	80 93 e2 00 	sts	0x00E2, r24
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
     22a:	8c e0       	ldi	r24, 0x0C	; 12
     22c:	80 93 e3 00 	sts	0x00E3, r24
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
                DISABLE_MOB;        //! Disable MOb-0
     230:	87 e3       	ldi	r24, 0x37	; 55
     232:	80 93 e4 00 	sts	0x00E4, r24
     236:	81 e0       	ldi	r24, 0x01	; 1
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     238:	08 95       	ret

0000023a <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     23a:	0e 94 0f 01 	call	0x21e	; 0x21e <can_fixed_baudrate>
     23e:	88 23       	and	r24, r24
     240:	49 f0       	breq	.+18     	; 0x254 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     242:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     246:	e8 ed       	ldi	r30, 0xD8	; 216
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	82 60       	ori	r24, 0x02	; 2
     24e:	80 83       	st	Z, r24
    return (1);
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     254:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     256:	08 95       	ret

00000258 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	1f 92       	push	r1
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     264:	11 96       	adiw	r26, 0x01	; 1
     266:	8c 91       	ld	r24, X
     268:	11 97       	sbiw	r26, 0x01	; 1
     26a:	8c 30       	cpi	r24, 0x0C	; 12
     26c:	b1 f4       	brne	.+44     	; 0x29a <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     26e:	19 96       	adiw	r26, 0x09	; 9
     270:	8c 91       	ld	r24, X
     272:	19 97       	sbiw	r26, 0x09	; 9
     274:	80 36       	cpi	r24, 0x60	; 96
     276:	69 f4       	brne	.+26     	; 0x292 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     278:	86 2f       	mov	r24, r22
     27a:	82 95       	swap	r24
     27c:	80 7f       	andi	r24, 0xF0	; 240
     27e:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     282:	ef ee       	ldi	r30, 0xEF	; 239
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	8f 73       	andi	r24, 0x3F	; 63
     28a:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     28c:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     290:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     292:	19 96       	adiw	r26, 0x09	; 9
     294:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	07 c6       	rjmp	.+3086   	; 0xea8 <__stack+0x5a9>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     29a:	86 2f       	mov	r24, r22
     29c:	82 95       	swap	r24
     29e:	80 7f       	andi	r24, 0xF0	; 240
     2a0:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     2a4:	80 91 ef 00 	lds	r24, 0x00EF
     2a8:	80 7c       	andi	r24, 0xC0	; 192
     2aa:	09 f0       	breq	.+2      	; 0x2ae <can_cmd+0x56>
     2ac:	f9 c5       	rjmp	.+3058   	; 0xea0 <__stack+0x5a1>
    {
      cmd->status = MOB_PENDING; 
     2ae:	80 e6       	ldi	r24, 0x60	; 96
     2b0:	19 96       	adiw	r26, 0x09	; 9
     2b2:	8c 93       	st	X, r24
     2b4:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     2b6:	6c 93       	st	X, r22
      Can_clear_mob();
     2b8:	ee ee       	ldi	r30, 0xEE	; 238
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	11 92       	st	Z+, r1
     2be:	e8 3f       	cpi	r30, 0xF8	; 248
     2c0:	f1 05       	cpc	r31, r1
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <can_cmd+0x64>
          
      switch (cmd->cmd)
     2c4:	11 96       	adiw	r26, 0x01	; 1
     2c6:	4c 91       	ld	r20, X
     2c8:	11 97       	sbiw	r26, 0x01	; 1
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	fa 01       	movw	r30, r20
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	eb 30       	cpi	r30, 0x0B	; 11
     2d2:	f1 05       	cpc	r31, r1
     2d4:	08 f0       	brcs	.+2      	; 0x2d8 <can_cmd+0x80>
     2d6:	e0 c5       	rjmp	.+3008   	; 0xe98 <__stack+0x599>
     2d8:	e2 5c       	subi	r30, 0xC2	; 194
     2da:	ff 4f       	sbci	r31, 0xFF	; 255
     2dc:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     2e0:	16 96       	adiw	r26, 0x06	; 6
     2e2:	8c 91       	ld	r24, X
     2e4:	16 97       	sbiw	r26, 0x06	; 6
     2e6:	81 11       	cpse	r24, r1
     2e8:	b7 c4       	rjmp	.+2414   	; 0xc58 <__stack+0x359>
     2ea:	c8 c4       	rjmp	.+2448   	; 0xc7c <__stack+0x37d>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     2ec:	1b 96       	adiw	r26, 0x0b	; 11
     2ee:	8c 91       	ld	r24, X
     2f0:	1b 97       	sbiw	r26, 0x0b	; 11
     2f2:	88 23       	and	r24, r24
     2f4:	d9 f1       	breq	.+118    	; 0x36c <can_cmd+0x114>
     2f6:	14 96       	adiw	r26, 0x04	; 4
     2f8:	9c 91       	ld	r25, X
     2fa:	14 97       	sbiw	r26, 0x04	; 4
     2fc:	92 95       	swap	r25
     2fe:	96 95       	lsr	r25
     300:	97 70       	andi	r25, 0x07	; 7
     302:	15 96       	adiw	r26, 0x05	; 5
     304:	8c 91       	ld	r24, X
     306:	15 97       	sbiw	r26, 0x05	; 5
     308:	88 0f       	add	r24, r24
     30a:	88 0f       	add	r24, r24
     30c:	88 0f       	add	r24, r24
     30e:	89 0f       	add	r24, r25
     310:	80 93 f3 00 	sts	0x00F3, r24
     314:	13 96       	adiw	r26, 0x03	; 3
     316:	9c 91       	ld	r25, X
     318:	13 97       	sbiw	r26, 0x03	; 3
     31a:	92 95       	swap	r25
     31c:	96 95       	lsr	r25
     31e:	97 70       	andi	r25, 0x07	; 7
     320:	14 96       	adiw	r26, 0x04	; 4
     322:	8c 91       	ld	r24, X
     324:	14 97       	sbiw	r26, 0x04	; 4
     326:	88 0f       	add	r24, r24
     328:	88 0f       	add	r24, r24
     32a:	88 0f       	add	r24, r24
     32c:	89 0f       	add	r24, r25
     32e:	80 93 f2 00 	sts	0x00F2, r24
     332:	12 96       	adiw	r26, 0x02	; 2
     334:	9c 91       	ld	r25, X
     336:	12 97       	sbiw	r26, 0x02	; 2
     338:	92 95       	swap	r25
     33a:	96 95       	lsr	r25
     33c:	97 70       	andi	r25, 0x07	; 7
     33e:	13 96       	adiw	r26, 0x03	; 3
     340:	8c 91       	ld	r24, X
     342:	13 97       	sbiw	r26, 0x03	; 3
     344:	88 0f       	add	r24, r24
     346:	88 0f       	add	r24, r24
     348:	88 0f       	add	r24, r24
     34a:	89 0f       	add	r24, r25
     34c:	80 93 f1 00 	sts	0x00F1, r24
     350:	12 96       	adiw	r26, 0x02	; 2
     352:	8c 91       	ld	r24, X
     354:	12 97       	sbiw	r26, 0x02	; 2
     356:	88 0f       	add	r24, r24
     358:	88 0f       	add	r24, r24
     35a:	88 0f       	add	r24, r24
     35c:	80 93 f0 00 	sts	0x00F0, r24
     360:	ef ee       	ldi	r30, 0xEF	; 239
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	80 61       	ori	r24, 0x10	; 16
     368:	80 83       	st	Z, r24
     36a:	1c c0       	rjmp	.+56     	; 0x3a4 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     36c:	12 96       	adiw	r26, 0x02	; 2
     36e:	8c 91       	ld	r24, X
     370:	12 97       	sbiw	r26, 0x02	; 2
     372:	86 95       	lsr	r24
     374:	86 95       	lsr	r24
     376:	86 95       	lsr	r24
     378:	13 96       	adiw	r26, 0x03	; 3
     37a:	9c 91       	ld	r25, X
     37c:	13 97       	sbiw	r26, 0x03	; 3
     37e:	20 e2       	ldi	r18, 0x20	; 32
     380:	92 9f       	mul	r25, r18
     382:	80 0d       	add	r24, r0
     384:	11 24       	eor	r1, r1
     386:	80 93 f3 00 	sts	0x00F3, r24
     38a:	12 96       	adiw	r26, 0x02	; 2
     38c:	8c 91       	ld	r24, X
     38e:	12 97       	sbiw	r26, 0x02	; 2
     390:	82 95       	swap	r24
     392:	88 0f       	add	r24, r24
     394:	80 7e       	andi	r24, 0xE0	; 224
     396:	80 93 f2 00 	sts	0x00F2, r24
     39a:	ef ee       	ldi	r30, 0xEF	; 239
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	8f 7e       	andi	r24, 0xEF	; 239
     3a2:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     3a4:	16 96       	adiw	r26, 0x06	; 6
     3a6:	8c 91       	ld	r24, X
     3a8:	16 97       	sbiw	r26, 0x06	; 6
     3aa:	88 23       	and	r24, r24
     3ac:	91 f0       	breq	.+36     	; 0x3d2 <can_cmd+0x17a>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	8a ef       	ldi	r24, 0xFA	; 250
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	17 96       	adiw	r26, 0x07	; 7
     3b6:	ed 91       	ld	r30, X+
     3b8:	fc 91       	ld	r31, X
     3ba:	18 97       	sbiw	r26, 0x08	; 8
     3bc:	e2 0f       	add	r30, r18
     3be:	f1 1d       	adc	r31, r1
     3c0:	30 81       	ld	r19, Z
     3c2:	fc 01       	movw	r30, r24
     3c4:	30 83       	st	Z, r19
     3c6:	2f 5f       	subi	r18, 0xFF	; 255
     3c8:	16 96       	adiw	r26, 0x06	; 6
     3ca:	3c 91       	ld	r19, X
     3cc:	16 97       	sbiw	r26, 0x06	; 6
     3ce:	23 17       	cp	r18, r19
     3d0:	88 f3       	brcs	.-30     	; 0x3b4 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     3d2:	1a 96       	adiw	r26, 0x0a	; 10
     3d4:	8c 91       	ld	r24, X
     3d6:	1a 97       	sbiw	r26, 0x0a	; 10
     3d8:	88 23       	and	r24, r24
     3da:	31 f0       	breq	.+12     	; 0x3e8 <can_cmd+0x190>
     3dc:	e0 ef       	ldi	r30, 0xF0	; 240
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	84 60       	ori	r24, 0x04	; 4
     3e4:	80 83       	st	Z, r24
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <can_cmd+0x19a>
            else Can_clear_rtr();    
     3e8:	e0 ef       	ldi	r30, 0xF0	; 240
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	8b 7f       	andi	r24, 0xFB	; 251
     3f0:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     3f2:	ef ee       	ldi	r30, 0xEF	; 239
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	90 81       	ld	r25, Z
     3f8:	16 96       	adiw	r26, 0x06	; 6
     3fa:	8c 91       	ld	r24, X
     3fc:	89 2b       	or	r24, r25
     3fe:	80 83       	st	Z, r24
          Can_config_tx();
     400:	80 81       	ld	r24, Z
     402:	8f 73       	andi	r24, 0x3F	; 63
     404:	80 83       	st	Z, r24
     406:	80 81       	ld	r24, Z
     408:	80 64       	ori	r24, 0x40	; 64
     40a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     40c:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     40e:	4c c5       	rjmp	.+2712   	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     410:	1b 96       	adiw	r26, 0x0b	; 11
     412:	8c 91       	ld	r24, X
     414:	1b 97       	sbiw	r26, 0x0b	; 11
     416:	88 23       	and	r24, r24
     418:	d9 f1       	breq	.+118    	; 0x490 <can_cmd+0x238>
     41a:	14 96       	adiw	r26, 0x04	; 4
     41c:	9c 91       	ld	r25, X
     41e:	14 97       	sbiw	r26, 0x04	; 4
     420:	92 95       	swap	r25
     422:	96 95       	lsr	r25
     424:	97 70       	andi	r25, 0x07	; 7
     426:	15 96       	adiw	r26, 0x05	; 5
     428:	8c 91       	ld	r24, X
     42a:	15 97       	sbiw	r26, 0x05	; 5
     42c:	88 0f       	add	r24, r24
     42e:	88 0f       	add	r24, r24
     430:	88 0f       	add	r24, r24
     432:	89 0f       	add	r24, r25
     434:	80 93 f3 00 	sts	0x00F3, r24
     438:	13 96       	adiw	r26, 0x03	; 3
     43a:	9c 91       	ld	r25, X
     43c:	13 97       	sbiw	r26, 0x03	; 3
     43e:	92 95       	swap	r25
     440:	96 95       	lsr	r25
     442:	97 70       	andi	r25, 0x07	; 7
     444:	14 96       	adiw	r26, 0x04	; 4
     446:	8c 91       	ld	r24, X
     448:	14 97       	sbiw	r26, 0x04	; 4
     44a:	88 0f       	add	r24, r24
     44c:	88 0f       	add	r24, r24
     44e:	88 0f       	add	r24, r24
     450:	89 0f       	add	r24, r25
     452:	80 93 f2 00 	sts	0x00F2, r24
     456:	12 96       	adiw	r26, 0x02	; 2
     458:	9c 91       	ld	r25, X
     45a:	12 97       	sbiw	r26, 0x02	; 2
     45c:	92 95       	swap	r25
     45e:	96 95       	lsr	r25
     460:	97 70       	andi	r25, 0x07	; 7
     462:	13 96       	adiw	r26, 0x03	; 3
     464:	8c 91       	ld	r24, X
     466:	13 97       	sbiw	r26, 0x03	; 3
     468:	88 0f       	add	r24, r24
     46a:	88 0f       	add	r24, r24
     46c:	88 0f       	add	r24, r24
     46e:	89 0f       	add	r24, r25
     470:	80 93 f1 00 	sts	0x00F1, r24
     474:	12 96       	adiw	r26, 0x02	; 2
     476:	8c 91       	ld	r24, X
     478:	12 97       	sbiw	r26, 0x02	; 2
     47a:	88 0f       	add	r24, r24
     47c:	88 0f       	add	r24, r24
     47e:	88 0f       	add	r24, r24
     480:	80 93 f0 00 	sts	0x00F0, r24
     484:	ef ee       	ldi	r30, 0xEF	; 239
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	80 61       	ori	r24, 0x10	; 16
     48c:	80 83       	st	Z, r24
     48e:	1c c0       	rjmp	.+56     	; 0x4c8 <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	8c 91       	ld	r24, X
     494:	12 97       	sbiw	r26, 0x02	; 2
     496:	86 95       	lsr	r24
     498:	86 95       	lsr	r24
     49a:	86 95       	lsr	r24
     49c:	13 96       	adiw	r26, 0x03	; 3
     49e:	9c 91       	ld	r25, X
     4a0:	13 97       	sbiw	r26, 0x03	; 3
     4a2:	f0 e2       	ldi	r31, 0x20	; 32
     4a4:	9f 9f       	mul	r25, r31
     4a6:	80 0d       	add	r24, r0
     4a8:	11 24       	eor	r1, r1
     4aa:	80 93 f3 00 	sts	0x00F3, r24
     4ae:	12 96       	adiw	r26, 0x02	; 2
     4b0:	8c 91       	ld	r24, X
     4b2:	12 97       	sbiw	r26, 0x02	; 2
     4b4:	82 95       	swap	r24
     4b6:	88 0f       	add	r24, r24
     4b8:	80 7e       	andi	r24, 0xE0	; 224
     4ba:	80 93 f2 00 	sts	0x00F2, r24
     4be:	ef ee       	ldi	r30, 0xEF	; 239
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	8f 7e       	andi	r24, 0xEF	; 239
     4c6:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     4c8:	16 96       	adiw	r26, 0x06	; 6
     4ca:	8c 91       	ld	r24, X
     4cc:	16 97       	sbiw	r26, 0x06	; 6
     4ce:	88 23       	and	r24, r24
     4d0:	91 f0       	breq	.+36     	; 0x4f6 <can_cmd+0x29e>
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	8a ef       	ldi	r24, 0xFA	; 250
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	17 96       	adiw	r26, 0x07	; 7
     4da:	ed 91       	ld	r30, X+
     4dc:	fc 91       	ld	r31, X
     4de:	18 97       	sbiw	r26, 0x08	; 8
     4e0:	e2 0f       	add	r30, r18
     4e2:	f1 1d       	adc	r31, r1
     4e4:	30 81       	ld	r19, Z
     4e6:	fc 01       	movw	r30, r24
     4e8:	30 83       	st	Z, r19
     4ea:	2f 5f       	subi	r18, 0xFF	; 255
     4ec:	16 96       	adiw	r26, 0x06	; 6
     4ee:	3c 91       	ld	r19, X
     4f0:	16 97       	sbiw	r26, 0x06	; 6
     4f2:	23 17       	cp	r18, r19
     4f4:	88 f3       	brcs	.-30     	; 0x4d8 <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     4f6:	1a 96       	adiw	r26, 0x0a	; 10
     4f8:	1c 92       	st	X, r1
     4fa:	1a 97       	sbiw	r26, 0x0a	; 10
     4fc:	e0 ef       	ldi	r30, 0xF0	; 240
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	8b 7f       	andi	r24, 0xFB	; 251
     504:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     506:	ef ee       	ldi	r30, 0xEF	; 239
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	90 81       	ld	r25, Z
     50c:	16 96       	adiw	r26, 0x06	; 6
     50e:	8c 91       	ld	r24, X
     510:	89 2b       	or	r24, r25
     512:	80 83       	st	Z, r24
          Can_config_tx();
     514:	80 81       	ld	r24, Z
     516:	8f 73       	andi	r24, 0x3F	; 63
     518:	80 83       	st	Z, r24
     51a:	80 81       	ld	r24, Z
     51c:	80 64       	ori	r24, 0x40	; 64
     51e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     520:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     522:	c2 c4       	rjmp	.+2436   	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     524:	1b 96       	adiw	r26, 0x0b	; 11
     526:	8c 91       	ld	r24, X
     528:	1b 97       	sbiw	r26, 0x0b	; 11
     52a:	88 23       	and	r24, r24
     52c:	d9 f1       	breq	.+118    	; 0x5a4 <can_cmd+0x34c>
     52e:	14 96       	adiw	r26, 0x04	; 4
     530:	9c 91       	ld	r25, X
     532:	14 97       	sbiw	r26, 0x04	; 4
     534:	92 95       	swap	r25
     536:	96 95       	lsr	r25
     538:	97 70       	andi	r25, 0x07	; 7
     53a:	15 96       	adiw	r26, 0x05	; 5
     53c:	8c 91       	ld	r24, X
     53e:	15 97       	sbiw	r26, 0x05	; 5
     540:	88 0f       	add	r24, r24
     542:	88 0f       	add	r24, r24
     544:	88 0f       	add	r24, r24
     546:	89 0f       	add	r24, r25
     548:	80 93 f3 00 	sts	0x00F3, r24
     54c:	13 96       	adiw	r26, 0x03	; 3
     54e:	9c 91       	ld	r25, X
     550:	13 97       	sbiw	r26, 0x03	; 3
     552:	92 95       	swap	r25
     554:	96 95       	lsr	r25
     556:	97 70       	andi	r25, 0x07	; 7
     558:	14 96       	adiw	r26, 0x04	; 4
     55a:	8c 91       	ld	r24, X
     55c:	14 97       	sbiw	r26, 0x04	; 4
     55e:	88 0f       	add	r24, r24
     560:	88 0f       	add	r24, r24
     562:	88 0f       	add	r24, r24
     564:	89 0f       	add	r24, r25
     566:	80 93 f2 00 	sts	0x00F2, r24
     56a:	12 96       	adiw	r26, 0x02	; 2
     56c:	9c 91       	ld	r25, X
     56e:	12 97       	sbiw	r26, 0x02	; 2
     570:	92 95       	swap	r25
     572:	96 95       	lsr	r25
     574:	97 70       	andi	r25, 0x07	; 7
     576:	13 96       	adiw	r26, 0x03	; 3
     578:	8c 91       	ld	r24, X
     57a:	13 97       	sbiw	r26, 0x03	; 3
     57c:	88 0f       	add	r24, r24
     57e:	88 0f       	add	r24, r24
     580:	88 0f       	add	r24, r24
     582:	89 0f       	add	r24, r25
     584:	80 93 f1 00 	sts	0x00F1, r24
     588:	12 96       	adiw	r26, 0x02	; 2
     58a:	8c 91       	ld	r24, X
     58c:	12 97       	sbiw	r26, 0x02	; 2
     58e:	88 0f       	add	r24, r24
     590:	88 0f       	add	r24, r24
     592:	88 0f       	add	r24, r24
     594:	80 93 f0 00 	sts	0x00F0, r24
     598:	ef ee       	ldi	r30, 0xEF	; 239
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	80 61       	ori	r24, 0x10	; 16
     5a0:	80 83       	st	Z, r24
     5a2:	1c c0       	rjmp	.+56     	; 0x5dc <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     5a4:	12 96       	adiw	r26, 0x02	; 2
     5a6:	8c 91       	ld	r24, X
     5a8:	12 97       	sbiw	r26, 0x02	; 2
     5aa:	86 95       	lsr	r24
     5ac:	86 95       	lsr	r24
     5ae:	86 95       	lsr	r24
     5b0:	13 96       	adiw	r26, 0x03	; 3
     5b2:	9c 91       	ld	r25, X
     5b4:	13 97       	sbiw	r26, 0x03	; 3
     5b6:	f0 e2       	ldi	r31, 0x20	; 32
     5b8:	9f 9f       	mul	r25, r31
     5ba:	80 0d       	add	r24, r0
     5bc:	11 24       	eor	r1, r1
     5be:	80 93 f3 00 	sts	0x00F3, r24
     5c2:	12 96       	adiw	r26, 0x02	; 2
     5c4:	8c 91       	ld	r24, X
     5c6:	12 97       	sbiw	r26, 0x02	; 2
     5c8:	82 95       	swap	r24
     5ca:	88 0f       	add	r24, r24
     5cc:	80 7e       	andi	r24, 0xE0	; 224
     5ce:	80 93 f2 00 	sts	0x00F2, r24
     5d2:	ef ee       	ldi	r30, 0xEF	; 239
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	8f 7e       	andi	r24, 0xEF	; 239
     5da:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	1a 96       	adiw	r26, 0x0a	; 10
     5e0:	8c 93       	st	X, r24
     5e2:	1a 97       	sbiw	r26, 0x0a	; 10
     5e4:	e0 ef       	ldi	r30, 0xF0	; 240
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	84 60       	ori	r24, 0x04	; 4
     5ec:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     5ee:	ef ee       	ldi	r30, 0xEF	; 239
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	90 81       	ld	r25, Z
     5f4:	16 96       	adiw	r26, 0x06	; 6
     5f6:	8c 91       	ld	r24, X
     5f8:	89 2b       	or	r24, r25
     5fa:	80 83       	st	Z, r24
          Can_config_tx();
     5fc:	80 81       	ld	r24, Z
     5fe:	8f 73       	andi	r24, 0x3F	; 63
     600:	80 83       	st	Z, r24
     602:	80 81       	ld	r24, Z
     604:	80 64       	ori	r24, 0x40	; 64
     606:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     608:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     60a:	4e c4       	rjmp	.+2204   	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     60c:	19 82       	std	Y+1, r1	; 0x01
     60e:	9b 81       	ldd	r25, Y+3	; 0x03
     610:	92 95       	swap	r25
     612:	96 95       	lsr	r25
     614:	97 70       	andi	r25, 0x07	; 7
     616:	8c 81       	ldd	r24, Y+4	; 0x04
     618:	88 0f       	add	r24, r24
     61a:	88 0f       	add	r24, r24
     61c:	88 0f       	add	r24, r24
     61e:	89 0f       	add	r24, r25
     620:	80 93 f7 00 	sts	0x00F7, r24
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	92 95       	swap	r25
     628:	96 95       	lsr	r25
     62a:	97 70       	andi	r25, 0x07	; 7
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	88 0f       	add	r24, r24
     630:	88 0f       	add	r24, r24
     632:	88 0f       	add	r24, r24
     634:	89 0f       	add	r24, r25
     636:	80 93 f6 00 	sts	0x00F6, r24
     63a:	99 81       	ldd	r25, Y+1	; 0x01
     63c:	92 95       	swap	r25
     63e:	96 95       	lsr	r25
     640:	97 70       	andi	r25, 0x07	; 7
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	88 0f       	add	r24, r24
     646:	88 0f       	add	r24, r24
     648:	88 0f       	add	r24, r24
     64a:	89 0f       	add	r24, r25
     64c:	80 93 f5 00 	sts	0x00F5, r24
     650:	29 81       	ldd	r18, Y+1	; 0x01
     652:	22 0f       	add	r18, r18
     654:	22 0f       	add	r18, r18
     656:	22 0f       	add	r18, r18
     658:	84 ef       	ldi	r24, 0xF4	; 244
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     660:	ef ee       	ldi	r30, 0xEF	; 239
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	30 81       	ld	r19, Z
     666:	16 96       	adiw	r26, 0x06	; 6
     668:	2c 91       	ld	r18, X
     66a:	23 2b       	or	r18, r19
     66c:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     66e:	dc 01       	movw	r26, r24
     670:	2c 91       	ld	r18, X
     672:	2b 7f       	andi	r18, 0xFB	; 251
     674:	2c 93       	st	X, r18
          Can_clear_idemsk();
     676:	2c 91       	ld	r18, X
     678:	2e 7f       	andi	r18, 0xFE	; 254
     67a:	2c 93       	st	X, r18
          Can_config_rx();       
     67c:	80 81       	ld	r24, Z
     67e:	8f 73       	andi	r24, 0x3F	; 63
     680:	80 83       	st	Z, r24
     682:	80 81       	ld	r24, Z
     684:	80 68       	ori	r24, 0x80	; 128
     686:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     688:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     68a:	0e c4       	rjmp	.+2076   	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     690:	8a 81       	ldd	r24, Y+2	; 0x02
     692:	82 95       	swap	r24
     694:	88 0f       	add	r24, r24
     696:	80 7e       	andi	r24, 0xE0	; 224
     698:	81 5e       	subi	r24, 0xE1	; 225
     69a:	27 ef       	ldi	r18, 0xF7	; 247
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	f9 01       	movw	r30, r18
     6a0:	80 83       	st	Z, r24
     6a2:	49 81       	ldd	r20, Y+1	; 0x01
     6a4:	42 95       	swap	r20
     6a6:	44 0f       	add	r20, r20
     6a8:	40 7e       	andi	r20, 0xE0	; 224
     6aa:	86 ef       	ldi	r24, 0xF6	; 246
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	fc 01       	movw	r30, r24
     6b0:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     6b2:	12 96       	adiw	r26, 0x02	; 2
     6b4:	4c 91       	ld	r20, X
     6b6:	12 97       	sbiw	r26, 0x02	; 2
     6b8:	46 95       	lsr	r20
     6ba:	46 95       	lsr	r20
     6bc:	46 95       	lsr	r20
     6be:	13 96       	adiw	r26, 0x03	; 3
     6c0:	5c 91       	ld	r21, X
     6c2:	13 97       	sbiw	r26, 0x03	; 3
     6c4:	f0 e2       	ldi	r31, 0x20	; 32
     6c6:	5f 9f       	mul	r21, r31
     6c8:	40 0d       	add	r20, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	40 93 f3 00 	sts	0x00F3, r20
     6d0:	12 96       	adiw	r26, 0x02	; 2
     6d2:	4c 91       	ld	r20, X
     6d4:	12 97       	sbiw	r26, 0x02	; 2
     6d6:	42 95       	swap	r20
     6d8:	44 0f       	add	r20, r20
     6da:	40 7e       	andi	r20, 0xE0	; 224
     6dc:	40 93 f2 00 	sts	0x00F2, r20
     6e0:	6f ee       	ldi	r22, 0xEF	; 239
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	fb 01       	movw	r30, r22
     6e6:	40 81       	ld	r20, Z
     6e8:	4f 7e       	andi	r20, 0xEF	; 239
     6ea:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     6ec:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     6ee:	5b 81       	ldd	r21, Y+3	; 0x03
     6f0:	52 95       	swap	r21
     6f2:	56 95       	lsr	r21
     6f4:	57 70       	andi	r21, 0x07	; 7
     6f6:	4c 81       	ldd	r20, Y+4	; 0x04
     6f8:	44 0f       	add	r20, r20
     6fa:	44 0f       	add	r20, r20
     6fc:	44 0f       	add	r20, r20
     6fe:	45 0f       	add	r20, r21
     700:	f9 01       	movw	r30, r18
     702:	40 83       	st	Z, r20
     704:	3a 81       	ldd	r19, Y+2	; 0x02
     706:	32 95       	swap	r19
     708:	36 95       	lsr	r19
     70a:	37 70       	andi	r19, 0x07	; 7
     70c:	2b 81       	ldd	r18, Y+3	; 0x03
     70e:	22 0f       	add	r18, r18
     710:	22 0f       	add	r18, r18
     712:	22 0f       	add	r18, r18
     714:	23 0f       	add	r18, r19
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
     71a:	99 81       	ldd	r25, Y+1	; 0x01
     71c:	92 95       	swap	r25
     71e:	96 95       	lsr	r25
     720:	97 70       	andi	r25, 0x07	; 7
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	88 0f       	add	r24, r24
     726:	88 0f       	add	r24, r24
     728:	88 0f       	add	r24, r24
     72a:	89 0f       	add	r24, r25
     72c:	80 93 f5 00 	sts	0x00F5, r24
     730:	29 81       	ldd	r18, Y+1	; 0x01
     732:	22 0f       	add	r18, r18
     734:	22 0f       	add	r18, r18
     736:	22 0f       	add	r18, r18
     738:	84 ef       	ldi	r24, 0xF4	; 244
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	fc 01       	movw	r30, r24
     73e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     740:	fb 01       	movw	r30, r22
     742:	30 81       	ld	r19, Z
     744:	16 96       	adiw	r26, 0x06	; 6
     746:	2c 91       	ld	r18, X
     748:	16 97       	sbiw	r26, 0x06	; 6
     74a:	23 2b       	or	r18, r19
     74c:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     74e:	1a 96       	adiw	r26, 0x0a	; 10
     750:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     752:	dc 01       	movw	r26, r24
     754:	2c 91       	ld	r18, X
     756:	24 60       	ori	r18, 0x04	; 4
     758:	2c 93       	st	X, r18
		  Can_clear_rtr();
     75a:	a0 ef       	ldi	r26, 0xF0	; 240
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	2c 91       	ld	r18, X
     760:	2b 7f       	andi	r18, 0xFB	; 251
     762:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     764:	20 81       	ld	r18, Z
     766:	2f 7e       	andi	r18, 0xEF	; 239
     768:	20 83       	st	Z, r18
          Can_clear_idemsk();
     76a:	fc 01       	movw	r30, r24
     76c:	20 81       	ld	r18, Z
     76e:	2e 7f       	andi	r18, 0xFE	; 254
     770:	20 83       	st	Z, r18
          Can_config_rx();       
     772:	db 01       	movw	r26, r22
     774:	8c 91       	ld	r24, X
     776:	8f 73       	andi	r24, 0x3F	; 63
     778:	8c 93       	st	X, r24
     77a:	8c 91       	ld	r24, X
     77c:	80 68       	ori	r24, 0x80	; 128
     77e:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     780:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     782:	92 c3       	rjmp	.+1828   	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	82 95       	swap	r24
     78c:	88 0f       	add	r24, r24
     78e:	80 7e       	andi	r24, 0xE0	; 224
     790:	81 5e       	subi	r24, 0xE1	; 225
     792:	27 ef       	ldi	r18, 0xF7	; 247
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	80 83       	st	Z, r24
     79a:	49 81       	ldd	r20, Y+1	; 0x01
     79c:	42 95       	swap	r20
     79e:	44 0f       	add	r20, r20
     7a0:	40 7e       	andi	r20, 0xE0	; 224
     7a2:	86 ef       	ldi	r24, 0xF6	; 246
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	fc 01       	movw	r30, r24
     7a8:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     7aa:	12 96       	adiw	r26, 0x02	; 2
     7ac:	4c 91       	ld	r20, X
     7ae:	12 97       	sbiw	r26, 0x02	; 2
     7b0:	46 95       	lsr	r20
     7b2:	46 95       	lsr	r20
     7b4:	46 95       	lsr	r20
     7b6:	13 96       	adiw	r26, 0x03	; 3
     7b8:	5c 91       	ld	r21, X
     7ba:	13 97       	sbiw	r26, 0x03	; 3
     7bc:	f0 e2       	ldi	r31, 0x20	; 32
     7be:	5f 9f       	mul	r21, r31
     7c0:	40 0d       	add	r20, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	40 93 f3 00 	sts	0x00F3, r20
     7c8:	12 96       	adiw	r26, 0x02	; 2
     7ca:	4c 91       	ld	r20, X
     7cc:	12 97       	sbiw	r26, 0x02	; 2
     7ce:	42 95       	swap	r20
     7d0:	44 0f       	add	r20, r20
     7d2:	40 7e       	andi	r20, 0xE0	; 224
     7d4:	40 93 f2 00 	sts	0x00F2, r20
     7d8:	6f ee       	ldi	r22, 0xEF	; 239
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	fb 01       	movw	r30, r22
     7de:	40 81       	ld	r20, Z
     7e0:	4f 7e       	andi	r20, 0xEF	; 239
     7e2:	40 83       	st	Z, r20
		
          u8_temp=0; 
     7e4:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     7e6:	5b 81       	ldd	r21, Y+3	; 0x03
     7e8:	52 95       	swap	r21
     7ea:	56 95       	lsr	r21
     7ec:	57 70       	andi	r21, 0x07	; 7
     7ee:	4c 81       	ldd	r20, Y+4	; 0x04
     7f0:	44 0f       	add	r20, r20
     7f2:	44 0f       	add	r20, r20
     7f4:	44 0f       	add	r20, r20
     7f6:	45 0f       	add	r20, r21
     7f8:	f9 01       	movw	r30, r18
     7fa:	40 83       	st	Z, r20
     7fc:	3a 81       	ldd	r19, Y+2	; 0x02
     7fe:	32 95       	swap	r19
     800:	36 95       	lsr	r19
     802:	37 70       	andi	r19, 0x07	; 7
     804:	2b 81       	ldd	r18, Y+3	; 0x03
     806:	22 0f       	add	r18, r18
     808:	22 0f       	add	r18, r18
     80a:	22 0f       	add	r18, r18
     80c:	23 0f       	add	r18, r19
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18
     812:	99 81       	ldd	r25, Y+1	; 0x01
     814:	92 95       	swap	r25
     816:	96 95       	lsr	r25
     818:	97 70       	andi	r25, 0x07	; 7
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	88 0f       	add	r24, r24
     81e:	88 0f       	add	r24, r24
     820:	88 0f       	add	r24, r24
     822:	89 0f       	add	r24, r25
     824:	80 93 f5 00 	sts	0x00F5, r24
     828:	29 81       	ldd	r18, Y+1	; 0x01
     82a:	22 0f       	add	r18, r18
     82c:	22 0f       	add	r18, r18
     82e:	22 0f       	add	r18, r18
     830:	84 ef       	ldi	r24, 0xF4	; 244
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     838:	fb 01       	movw	r30, r22
     83a:	30 81       	ld	r19, Z
     83c:	16 96       	adiw	r26, 0x06	; 6
     83e:	2c 91       	ld	r18, X
     840:	16 97       	sbiw	r26, 0x06	; 6
     842:	23 2b       	or	r18, r19
     844:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     846:	21 e0       	ldi	r18, 0x01	; 1
     848:	1a 96       	adiw	r26, 0x0a	; 10
     84a:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     84c:	dc 01       	movw	r26, r24
     84e:	2c 91       	ld	r18, X
     850:	24 60       	ori	r18, 0x04	; 4
     852:	2c 93       	st	X, r18
		  Can_set_rtr();
     854:	a0 ef       	ldi	r26, 0xF0	; 240
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	2c 91       	ld	r18, X
     85a:	24 60       	ori	r18, 0x04	; 4
     85c:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     85e:	20 81       	ld	r18, Z
     860:	2f 7d       	andi	r18, 0xDF	; 223
     862:	20 83       	st	Z, r18
          Can_clear_idemsk();
     864:	fc 01       	movw	r30, r24
     866:	20 81       	ld	r18, Z
     868:	2e 7f       	andi	r18, 0xFE	; 254
     86a:	20 83       	st	Z, r18
          Can_config_rx();       
     86c:	db 01       	movw	r26, r22
     86e:	8c 91       	ld	r24, X
     870:	8f 73       	andi	r24, 0x3F	; 63
     872:	8c 93       	st	X, r24
     874:	8c 91       	ld	r24, X
     876:	80 68       	ori	r24, 0x80	; 128
     878:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     87a:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     87c:	15 c3       	rjmp	.+1578   	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     87e:	1b 96       	adiw	r26, 0x0b	; 11
     880:	8c 91       	ld	r24, X
     882:	1b 97       	sbiw	r26, 0x0b	; 11
     884:	88 23       	and	r24, r24
     886:	d9 f1       	breq	.+118    	; 0x8fe <can_cmd+0x6a6>
     888:	14 96       	adiw	r26, 0x04	; 4
     88a:	9c 91       	ld	r25, X
     88c:	14 97       	sbiw	r26, 0x04	; 4
     88e:	92 95       	swap	r25
     890:	96 95       	lsr	r25
     892:	97 70       	andi	r25, 0x07	; 7
     894:	15 96       	adiw	r26, 0x05	; 5
     896:	8c 91       	ld	r24, X
     898:	15 97       	sbiw	r26, 0x05	; 5
     89a:	88 0f       	add	r24, r24
     89c:	88 0f       	add	r24, r24
     89e:	88 0f       	add	r24, r24
     8a0:	89 0f       	add	r24, r25
     8a2:	80 93 f3 00 	sts	0x00F3, r24
     8a6:	13 96       	adiw	r26, 0x03	; 3
     8a8:	9c 91       	ld	r25, X
     8aa:	13 97       	sbiw	r26, 0x03	; 3
     8ac:	92 95       	swap	r25
     8ae:	96 95       	lsr	r25
     8b0:	97 70       	andi	r25, 0x07	; 7
     8b2:	14 96       	adiw	r26, 0x04	; 4
     8b4:	8c 91       	ld	r24, X
     8b6:	14 97       	sbiw	r26, 0x04	; 4
     8b8:	88 0f       	add	r24, r24
     8ba:	88 0f       	add	r24, r24
     8bc:	88 0f       	add	r24, r24
     8be:	89 0f       	add	r24, r25
     8c0:	80 93 f2 00 	sts	0x00F2, r24
     8c4:	12 96       	adiw	r26, 0x02	; 2
     8c6:	9c 91       	ld	r25, X
     8c8:	12 97       	sbiw	r26, 0x02	; 2
     8ca:	92 95       	swap	r25
     8cc:	96 95       	lsr	r25
     8ce:	97 70       	andi	r25, 0x07	; 7
     8d0:	13 96       	adiw	r26, 0x03	; 3
     8d2:	8c 91       	ld	r24, X
     8d4:	13 97       	sbiw	r26, 0x03	; 3
     8d6:	88 0f       	add	r24, r24
     8d8:	88 0f       	add	r24, r24
     8da:	88 0f       	add	r24, r24
     8dc:	89 0f       	add	r24, r25
     8de:	80 93 f1 00 	sts	0x00F1, r24
     8e2:	12 96       	adiw	r26, 0x02	; 2
     8e4:	8c 91       	ld	r24, X
     8e6:	12 97       	sbiw	r26, 0x02	; 2
     8e8:	88 0f       	add	r24, r24
     8ea:	88 0f       	add	r24, r24
     8ec:	88 0f       	add	r24, r24
     8ee:	80 93 f0 00 	sts	0x00F0, r24
     8f2:	ef ee       	ldi	r30, 0xEF	; 239
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	80 61       	ori	r24, 0x10	; 16
     8fa:	80 83       	st	Z, r24
     8fc:	1c c0       	rjmp	.+56     	; 0x936 <__stack+0x37>
          else              { Can_set_std_id(cmd->id.std);}
     8fe:	12 96       	adiw	r26, 0x02	; 2
     900:	8c 91       	ld	r24, X
     902:	12 97       	sbiw	r26, 0x02	; 2
     904:	86 95       	lsr	r24
     906:	86 95       	lsr	r24
     908:	86 95       	lsr	r24
     90a:	13 96       	adiw	r26, 0x03	; 3
     90c:	9c 91       	ld	r25, X
     90e:	13 97       	sbiw	r26, 0x03	; 3
     910:	e0 e2       	ldi	r30, 0x20	; 32
     912:	9e 9f       	mul	r25, r30
     914:	80 0d       	add	r24, r0
     916:	11 24       	eor	r1, r1
     918:	80 93 f3 00 	sts	0x00F3, r24
     91c:	12 96       	adiw	r26, 0x02	; 2
     91e:	8c 91       	ld	r24, X
     920:	12 97       	sbiw	r26, 0x02	; 2
     922:	82 95       	swap	r24
     924:	88 0f       	add	r24, r24
     926:	80 7e       	andi	r24, 0xE0	; 224
     928:	80 93 f2 00 	sts	0x00F2, r24
     92c:	ef ee       	ldi	r30, 0xEF	; 239
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	8f 7e       	andi	r24, 0xEF	; 239
     934:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     936:	8f ef       	ldi	r24, 0xFF	; 255
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	9b 81       	ldd	r25, Y+3	; 0x03
     93c:	92 95       	swap	r25
     93e:	96 95       	lsr	r25
     940:	97 70       	andi	r25, 0x07	; 7
     942:	8c 81       	ldd	r24, Y+4	; 0x04
     944:	88 0f       	add	r24, r24
     946:	88 0f       	add	r24, r24
     948:	88 0f       	add	r24, r24
     94a:	89 0f       	add	r24, r25
     94c:	80 93 f7 00 	sts	0x00F7, r24
     950:	9a 81       	ldd	r25, Y+2	; 0x02
     952:	92 95       	swap	r25
     954:	96 95       	lsr	r25
     956:	97 70       	andi	r25, 0x07	; 7
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	88 0f       	add	r24, r24
     95c:	88 0f       	add	r24, r24
     95e:	88 0f       	add	r24, r24
     960:	89 0f       	add	r24, r25
     962:	80 93 f6 00 	sts	0x00F6, r24
     966:	99 81       	ldd	r25, Y+1	; 0x01
     968:	92 95       	swap	r25
     96a:	96 95       	lsr	r25
     96c:	97 70       	andi	r25, 0x07	; 7
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	88 0f       	add	r24, r24
     972:	88 0f       	add	r24, r24
     974:	88 0f       	add	r24, r24
     976:	89 0f       	add	r24, r25
     978:	80 93 f5 00 	sts	0x00F5, r24
     97c:	29 81       	ldd	r18, Y+1	; 0x01
     97e:	22 0f       	add	r18, r18
     980:	22 0f       	add	r18, r18
     982:	22 0f       	add	r18, r18
     984:	84 ef       	ldi	r24, 0xF4	; 244
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	fc 01       	movw	r30, r24
     98a:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     98c:	ef ee       	ldi	r30, 0xEF	; 239
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	30 81       	ld	r19, Z
     992:	16 96       	adiw	r26, 0x06	; 6
     994:	2c 91       	ld	r18, X
     996:	23 2b       	or	r18, r19
     998:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     99a:	dc 01       	movw	r26, r24
     99c:	2c 91       	ld	r18, X
     99e:	2b 7f       	andi	r18, 0xFB	; 251
     9a0:	2c 93       	st	X, r18
          Can_set_idemsk();
     9a2:	2c 91       	ld	r18, X
     9a4:	21 60       	ori	r18, 0x01	; 1
     9a6:	2c 93       	st	X, r18
          Can_config_rx();       
     9a8:	80 81       	ld	r24, Z
     9aa:	8f 73       	andi	r24, 0x3F	; 63
     9ac:	80 83       	st	Z, r24
     9ae:	80 81       	ld	r24, Z
     9b0:	80 68       	ori	r24, 0x80	; 128
     9b2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     9b6:	78 c2       	rjmp	.+1264   	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     9b8:	1b 96       	adiw	r26, 0x0b	; 11
     9ba:	8c 91       	ld	r24, X
     9bc:	1b 97       	sbiw	r26, 0x0b	; 11
     9be:	88 23       	and	r24, r24
     9c0:	d9 f1       	breq	.+118    	; 0xa38 <__stack+0x139>
     9c2:	14 96       	adiw	r26, 0x04	; 4
     9c4:	9c 91       	ld	r25, X
     9c6:	14 97       	sbiw	r26, 0x04	; 4
     9c8:	92 95       	swap	r25
     9ca:	96 95       	lsr	r25
     9cc:	97 70       	andi	r25, 0x07	; 7
     9ce:	15 96       	adiw	r26, 0x05	; 5
     9d0:	8c 91       	ld	r24, X
     9d2:	15 97       	sbiw	r26, 0x05	; 5
     9d4:	88 0f       	add	r24, r24
     9d6:	88 0f       	add	r24, r24
     9d8:	88 0f       	add	r24, r24
     9da:	89 0f       	add	r24, r25
     9dc:	80 93 f3 00 	sts	0x00F3, r24
     9e0:	13 96       	adiw	r26, 0x03	; 3
     9e2:	9c 91       	ld	r25, X
     9e4:	13 97       	sbiw	r26, 0x03	; 3
     9e6:	92 95       	swap	r25
     9e8:	96 95       	lsr	r25
     9ea:	97 70       	andi	r25, 0x07	; 7
     9ec:	14 96       	adiw	r26, 0x04	; 4
     9ee:	8c 91       	ld	r24, X
     9f0:	14 97       	sbiw	r26, 0x04	; 4
     9f2:	88 0f       	add	r24, r24
     9f4:	88 0f       	add	r24, r24
     9f6:	88 0f       	add	r24, r24
     9f8:	89 0f       	add	r24, r25
     9fa:	80 93 f2 00 	sts	0x00F2, r24
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	9c 91       	ld	r25, X
     a02:	12 97       	sbiw	r26, 0x02	; 2
     a04:	92 95       	swap	r25
     a06:	96 95       	lsr	r25
     a08:	97 70       	andi	r25, 0x07	; 7
     a0a:	13 96       	adiw	r26, 0x03	; 3
     a0c:	8c 91       	ld	r24, X
     a0e:	13 97       	sbiw	r26, 0x03	; 3
     a10:	88 0f       	add	r24, r24
     a12:	88 0f       	add	r24, r24
     a14:	88 0f       	add	r24, r24
     a16:	89 0f       	add	r24, r25
     a18:	80 93 f1 00 	sts	0x00F1, r24
     a1c:	12 96       	adiw	r26, 0x02	; 2
     a1e:	8c 91       	ld	r24, X
     a20:	12 97       	sbiw	r26, 0x02	; 2
     a22:	88 0f       	add	r24, r24
     a24:	88 0f       	add	r24, r24
     a26:	88 0f       	add	r24, r24
     a28:	80 93 f0 00 	sts	0x00F0, r24
     a2c:	ef ee       	ldi	r30, 0xEF	; 239
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	80 61       	ori	r24, 0x10	; 16
     a34:	80 83       	st	Z, r24
     a36:	1c c0       	rjmp	.+56     	; 0xa70 <__stack+0x171>
          else              { Can_set_std_id(cmd->id.std);}
     a38:	12 96       	adiw	r26, 0x02	; 2
     a3a:	8c 91       	ld	r24, X
     a3c:	12 97       	sbiw	r26, 0x02	; 2
     a3e:	86 95       	lsr	r24
     a40:	86 95       	lsr	r24
     a42:	86 95       	lsr	r24
     a44:	13 96       	adiw	r26, 0x03	; 3
     a46:	9c 91       	ld	r25, X
     a48:	13 97       	sbiw	r26, 0x03	; 3
     a4a:	e0 e2       	ldi	r30, 0x20	; 32
     a4c:	9e 9f       	mul	r25, r30
     a4e:	80 0d       	add	r24, r0
     a50:	11 24       	eor	r1, r1
     a52:	80 93 f3 00 	sts	0x00F3, r24
     a56:	12 96       	adiw	r26, 0x02	; 2
     a58:	8c 91       	ld	r24, X
     a5a:	12 97       	sbiw	r26, 0x02	; 2
     a5c:	82 95       	swap	r24
     a5e:	88 0f       	add	r24, r24
     a60:	80 7e       	andi	r24, 0xE0	; 224
     a62:	80 93 f2 00 	sts	0x00F2, r24
     a66:	ef ee       	ldi	r30, 0xEF	; 239
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8f 7e       	andi	r24, 0xEF	; 239
     a6e:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	89 83       	std	Y+1, r24	; 0x01
     a74:	9b 81       	ldd	r25, Y+3	; 0x03
     a76:	92 95       	swap	r25
     a78:	96 95       	lsr	r25
     a7a:	97 70       	andi	r25, 0x07	; 7
     a7c:	8c 81       	ldd	r24, Y+4	; 0x04
     a7e:	88 0f       	add	r24, r24
     a80:	88 0f       	add	r24, r24
     a82:	88 0f       	add	r24, r24
     a84:	89 0f       	add	r24, r25
     a86:	80 93 f7 00 	sts	0x00F7, r24
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	92 95       	swap	r25
     a8e:	96 95       	lsr	r25
     a90:	97 70       	andi	r25, 0x07	; 7
     a92:	8b 81       	ldd	r24, Y+3	; 0x03
     a94:	88 0f       	add	r24, r24
     a96:	88 0f       	add	r24, r24
     a98:	88 0f       	add	r24, r24
     a9a:	89 0f       	add	r24, r25
     a9c:	80 93 f6 00 	sts	0x00F6, r24
     aa0:	99 81       	ldd	r25, Y+1	; 0x01
     aa2:	92 95       	swap	r25
     aa4:	96 95       	lsr	r25
     aa6:	97 70       	andi	r25, 0x07	; 7
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	88 0f       	add	r24, r24
     aac:	88 0f       	add	r24, r24
     aae:	88 0f       	add	r24, r24
     ab0:	89 0f       	add	r24, r25
     ab2:	80 93 f5 00 	sts	0x00F5, r24
     ab6:	29 81       	ldd	r18, Y+1	; 0x01
     ab8:	22 0f       	add	r18, r18
     aba:	22 0f       	add	r18, r18
     abc:	22 0f       	add	r18, r18
     abe:	84 ef       	ldi	r24, 0xF4	; 244
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	fc 01       	movw	r30, r24
     ac4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ac6:	ef ee       	ldi	r30, 0xEF	; 239
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	30 81       	ld	r19, Z
     acc:	16 96       	adiw	r26, 0x06	; 6
     ace:	2c 91       	ld	r18, X
     ad0:	16 97       	sbiw	r26, 0x06	; 6
     ad2:	23 2b       	or	r18, r19
     ad4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     ad6:	1a 96       	adiw	r26, 0x0a	; 10
     ad8:	1c 92       	st	X, r1
     ada:	dc 01       	movw	r26, r24
     adc:	2c 91       	ld	r18, X
     ade:	24 60       	ori	r18, 0x04	; 4
     ae0:	2c 93       	st	X, r18
     ae2:	a0 ef       	ldi	r26, 0xF0	; 240
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	2c 91       	ld	r18, X
     ae8:	2b 7f       	andi	r18, 0xFB	; 251
     aea:	2c 93       	st	X, r18
          Can_set_idemsk();
     aec:	dc 01       	movw	r26, r24
     aee:	2c 91       	ld	r18, X
     af0:	21 60       	ori	r18, 0x01	; 1
     af2:	2c 93       	st	X, r18
          Can_config_rx();       
     af4:	80 81       	ld	r24, Z
     af6:	8f 73       	andi	r24, 0x3F	; 63
     af8:	80 83       	st	Z, r24
     afa:	80 81       	ld	r24, Z
     afc:	80 68       	ori	r24, 0x80	; 128
     afe:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b00:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     b02:	d2 c1       	rjmp	.+932    	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b04:	1b 96       	adiw	r26, 0x0b	; 11
     b06:	8c 91       	ld	r24, X
     b08:	1b 97       	sbiw	r26, 0x0b	; 11
     b0a:	88 23       	and	r24, r24
     b0c:	d9 f1       	breq	.+118    	; 0xb84 <__stack+0x285>
     b0e:	14 96       	adiw	r26, 0x04	; 4
     b10:	9c 91       	ld	r25, X
     b12:	14 97       	sbiw	r26, 0x04	; 4
     b14:	92 95       	swap	r25
     b16:	96 95       	lsr	r25
     b18:	97 70       	andi	r25, 0x07	; 7
     b1a:	15 96       	adiw	r26, 0x05	; 5
     b1c:	8c 91       	ld	r24, X
     b1e:	15 97       	sbiw	r26, 0x05	; 5
     b20:	88 0f       	add	r24, r24
     b22:	88 0f       	add	r24, r24
     b24:	88 0f       	add	r24, r24
     b26:	89 0f       	add	r24, r25
     b28:	80 93 f3 00 	sts	0x00F3, r24
     b2c:	13 96       	adiw	r26, 0x03	; 3
     b2e:	9c 91       	ld	r25, X
     b30:	13 97       	sbiw	r26, 0x03	; 3
     b32:	92 95       	swap	r25
     b34:	96 95       	lsr	r25
     b36:	97 70       	andi	r25, 0x07	; 7
     b38:	14 96       	adiw	r26, 0x04	; 4
     b3a:	8c 91       	ld	r24, X
     b3c:	14 97       	sbiw	r26, 0x04	; 4
     b3e:	88 0f       	add	r24, r24
     b40:	88 0f       	add	r24, r24
     b42:	88 0f       	add	r24, r24
     b44:	89 0f       	add	r24, r25
     b46:	80 93 f2 00 	sts	0x00F2, r24
     b4a:	12 96       	adiw	r26, 0x02	; 2
     b4c:	9c 91       	ld	r25, X
     b4e:	12 97       	sbiw	r26, 0x02	; 2
     b50:	92 95       	swap	r25
     b52:	96 95       	lsr	r25
     b54:	97 70       	andi	r25, 0x07	; 7
     b56:	13 96       	adiw	r26, 0x03	; 3
     b58:	8c 91       	ld	r24, X
     b5a:	13 97       	sbiw	r26, 0x03	; 3
     b5c:	88 0f       	add	r24, r24
     b5e:	88 0f       	add	r24, r24
     b60:	88 0f       	add	r24, r24
     b62:	89 0f       	add	r24, r25
     b64:	80 93 f1 00 	sts	0x00F1, r24
     b68:	12 96       	adiw	r26, 0x02	; 2
     b6a:	8c 91       	ld	r24, X
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	88 0f       	add	r24, r24
     b70:	88 0f       	add	r24, r24
     b72:	88 0f       	add	r24, r24
     b74:	80 93 f0 00 	sts	0x00F0, r24
     b78:	ef ee       	ldi	r30, 0xEF	; 239
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 61       	ori	r24, 0x10	; 16
     b80:	80 83       	st	Z, r24
     b82:	1c c0       	rjmp	.+56     	; 0xbbc <__stack+0x2bd>
          else              { Can_set_std_id(cmd->id.std);}
     b84:	12 96       	adiw	r26, 0x02	; 2
     b86:	8c 91       	ld	r24, X
     b88:	12 97       	sbiw	r26, 0x02	; 2
     b8a:	86 95       	lsr	r24
     b8c:	86 95       	lsr	r24
     b8e:	86 95       	lsr	r24
     b90:	13 96       	adiw	r26, 0x03	; 3
     b92:	9c 91       	ld	r25, X
     b94:	13 97       	sbiw	r26, 0x03	; 3
     b96:	e0 e2       	ldi	r30, 0x20	; 32
     b98:	9e 9f       	mul	r25, r30
     b9a:	80 0d       	add	r24, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	80 93 f3 00 	sts	0x00F3, r24
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8c 91       	ld	r24, X
     ba6:	12 97       	sbiw	r26, 0x02	; 2
     ba8:	82 95       	swap	r24
     baa:	88 0f       	add	r24, r24
     bac:	80 7e       	andi	r24, 0xE0	; 224
     bae:	80 93 f2 00 	sts	0x00F2, r24
     bb2:	ef ee       	ldi	r30, 0xEF	; 239
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	8f 7e       	andi	r24, 0xEF	; 239
     bba:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	9b 81       	ldd	r25, Y+3	; 0x03
     bc2:	92 95       	swap	r25
     bc4:	96 95       	lsr	r25
     bc6:	97 70       	andi	r25, 0x07	; 7
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	88 0f       	add	r24, r24
     bcc:	88 0f       	add	r24, r24
     bce:	88 0f       	add	r24, r24
     bd0:	89 0f       	add	r24, r25
     bd2:	80 93 f7 00 	sts	0x00F7, r24
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	92 95       	swap	r25
     bda:	96 95       	lsr	r25
     bdc:	97 70       	andi	r25, 0x07	; 7
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	88 0f       	add	r24, r24
     be2:	88 0f       	add	r24, r24
     be4:	88 0f       	add	r24, r24
     be6:	89 0f       	add	r24, r25
     be8:	80 93 f6 00 	sts	0x00F6, r24
     bec:	99 81       	ldd	r25, Y+1	; 0x01
     bee:	92 95       	swap	r25
     bf0:	96 95       	lsr	r25
     bf2:	97 70       	andi	r25, 0x07	; 7
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	88 0f       	add	r24, r24
     bf8:	88 0f       	add	r24, r24
     bfa:	88 0f       	add	r24, r24
     bfc:	89 0f       	add	r24, r25
     bfe:	80 93 f5 00 	sts	0x00F5, r24
     c02:	29 81       	ldd	r18, Y+1	; 0x01
     c04:	22 0f       	add	r18, r18
     c06:	22 0f       	add	r18, r18
     c08:	22 0f       	add	r18, r18
     c0a:	84 ef       	ldi	r24, 0xF4	; 244
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fc 01       	movw	r30, r24
     c10:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c12:	ef ee       	ldi	r30, 0xEF	; 239
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	30 81       	ld	r19, Z
     c18:	16 96       	adiw	r26, 0x06	; 6
     c1a:	2c 91       	ld	r18, X
     c1c:	16 97       	sbiw	r26, 0x06	; 6
     c1e:	23 2b       	or	r18, r19
     c20:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c22:	21 e0       	ldi	r18, 0x01	; 1
     c24:	1a 96       	adiw	r26, 0x0a	; 10
     c26:	2c 93       	st	X, r18
     c28:	dc 01       	movw	r26, r24
     c2a:	2c 91       	ld	r18, X
     c2c:	24 60       	ori	r18, 0x04	; 4
     c2e:	2c 93       	st	X, r18
     c30:	a0 ef       	ldi	r26, 0xF0	; 240
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	2c 91       	ld	r18, X
     c36:	24 60       	ori	r18, 0x04	; 4
     c38:	2c 93       	st	X, r18
          Can_clear_rplv();
     c3a:	20 81       	ld	r18, Z
     c3c:	2f 7d       	andi	r18, 0xDF	; 223
     c3e:	20 83       	st	Z, r18
          Can_set_idemsk();
     c40:	dc 01       	movw	r26, r24
     c42:	2c 91       	ld	r18, X
     c44:	21 60       	ori	r18, 0x01	; 1
     c46:	2c 93       	st	X, r18
          Can_config_rx();       
     c48:	80 81       	ld	r24, Z
     c4a:	8f 73       	andi	r24, 0x3F	; 63
     c4c:	80 83       	st	Z, r24
     c4e:	80 81       	ld	r24, Z
     c50:	80 68       	ori	r24, 0x80	; 128
     c52:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c54:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     c56:	28 c1       	rjmp	.+592    	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	8a ef       	ldi	r24, 0xFA	; 250
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	17 96       	adiw	r26, 0x07	; 7
     c60:	ed 91       	ld	r30, X+
     c62:	fc 91       	ld	r31, X
     c64:	18 97       	sbiw	r26, 0x08	; 8
     c66:	e2 0f       	add	r30, r18
     c68:	f1 1d       	adc	r31, r1
     c6a:	30 81       	ld	r19, Z
     c6c:	fc 01       	movw	r30, r24
     c6e:	30 83       	st	Z, r19
     c70:	2f 5f       	subi	r18, 0xFF	; 255
     c72:	16 96       	adiw	r26, 0x06	; 6
     c74:	3c 91       	ld	r19, X
     c76:	16 97       	sbiw	r26, 0x06	; 6
     c78:	23 17       	cp	r18, r19
     c7a:	88 f3       	brcs	.-30     	; 0xc5e <__stack+0x35f>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     c7c:	19 82       	std	Y+1, r1	; 0x01
     c7e:	9b 81       	ldd	r25, Y+3	; 0x03
     c80:	92 95       	swap	r25
     c82:	96 95       	lsr	r25
     c84:	97 70       	andi	r25, 0x07	; 7
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	88 0f       	add	r24, r24
     c8a:	88 0f       	add	r24, r24
     c8c:	88 0f       	add	r24, r24
     c8e:	89 0f       	add	r24, r25
     c90:	80 93 f7 00 	sts	0x00F7, r24
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	92 95       	swap	r25
     c98:	96 95       	lsr	r25
     c9a:	97 70       	andi	r25, 0x07	; 7
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	88 0f       	add	r24, r24
     ca0:	88 0f       	add	r24, r24
     ca2:	88 0f       	add	r24, r24
     ca4:	89 0f       	add	r24, r25
     ca6:	80 93 f6 00 	sts	0x00F6, r24
     caa:	99 81       	ldd	r25, Y+1	; 0x01
     cac:	92 95       	swap	r25
     cae:	96 95       	lsr	r25
     cb0:	97 70       	andi	r25, 0x07	; 7
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	88 0f       	add	r24, r24
     cb6:	88 0f       	add	r24, r24
     cb8:	88 0f       	add	r24, r24
     cba:	89 0f       	add	r24, r25
     cbc:	80 93 f5 00 	sts	0x00F5, r24
     cc0:	29 81       	ldd	r18, Y+1	; 0x01
     cc2:	22 0f       	add	r18, r18
     cc4:	22 0f       	add	r18, r18
     cc6:	22 0f       	add	r18, r18
     cc8:	84 ef       	ldi	r24, 0xF4	; 244
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	fc 01       	movw	r30, r24
     cce:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     cd0:	ef ee       	ldi	r30, 0xEF	; 239
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	30 81       	ld	r19, Z
     cd6:	16 96       	adiw	r26, 0x06	; 6
     cd8:	2c 91       	ld	r18, X
     cda:	16 97       	sbiw	r26, 0x06	; 6
     cdc:	23 2b       	or	r18, r19
     cde:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	1a 96       	adiw	r26, 0x0a	; 10
     ce4:	2c 93       	st	X, r18
     ce6:	dc 01       	movw	r26, r24
     ce8:	2c 91       	ld	r18, X
     cea:	24 60       	ori	r18, 0x04	; 4
     cec:	2c 93       	st	X, r18
     cee:	a0 ef       	ldi	r26, 0xF0	; 240
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	2c 91       	ld	r18, X
     cf4:	24 60       	ori	r18, 0x04	; 4
     cf6:	2c 93       	st	X, r18
          Can_set_rplv();
     cf8:	20 81       	ld	r18, Z
     cfa:	20 62       	ori	r18, 0x20	; 32
     cfc:	20 83       	st	Z, r18
          Can_clear_idemsk();
     cfe:	dc 01       	movw	r26, r24
     d00:	2c 91       	ld	r18, X
     d02:	2e 7f       	andi	r18, 0xFE	; 254
     d04:	2c 93       	st	X, r18
          Can_config_rx();       
     d06:	80 81       	ld	r24, Z
     d08:	8f 73       	andi	r24, 0x3F	; 63
     d0a:	80 83       	st	Z, r24
     d0c:	80 81       	ld	r24, Z
     d0e:	80 68       	ori	r24, 0x80	; 128
     d10:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d12:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     d14:	c9 c0       	rjmp	.+402    	; 0xea8 <__stack+0x5a9>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d16:	1b 96       	adiw	r26, 0x0b	; 11
     d18:	8c 91       	ld	r24, X
     d1a:	1b 97       	sbiw	r26, 0x0b	; 11
     d1c:	88 23       	and	r24, r24
     d1e:	d9 f1       	breq	.+118    	; 0xd96 <__stack+0x497>
     d20:	14 96       	adiw	r26, 0x04	; 4
     d22:	9c 91       	ld	r25, X
     d24:	14 97       	sbiw	r26, 0x04	; 4
     d26:	92 95       	swap	r25
     d28:	96 95       	lsr	r25
     d2a:	97 70       	andi	r25, 0x07	; 7
     d2c:	15 96       	adiw	r26, 0x05	; 5
     d2e:	8c 91       	ld	r24, X
     d30:	15 97       	sbiw	r26, 0x05	; 5
     d32:	88 0f       	add	r24, r24
     d34:	88 0f       	add	r24, r24
     d36:	88 0f       	add	r24, r24
     d38:	89 0f       	add	r24, r25
     d3a:	80 93 f3 00 	sts	0x00F3, r24
     d3e:	13 96       	adiw	r26, 0x03	; 3
     d40:	9c 91       	ld	r25, X
     d42:	13 97       	sbiw	r26, 0x03	; 3
     d44:	92 95       	swap	r25
     d46:	96 95       	lsr	r25
     d48:	97 70       	andi	r25, 0x07	; 7
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8c 91       	ld	r24, X
     d4e:	14 97       	sbiw	r26, 0x04	; 4
     d50:	88 0f       	add	r24, r24
     d52:	88 0f       	add	r24, r24
     d54:	88 0f       	add	r24, r24
     d56:	89 0f       	add	r24, r25
     d58:	80 93 f2 00 	sts	0x00F2, r24
     d5c:	12 96       	adiw	r26, 0x02	; 2
     d5e:	9c 91       	ld	r25, X
     d60:	12 97       	sbiw	r26, 0x02	; 2
     d62:	92 95       	swap	r25
     d64:	96 95       	lsr	r25
     d66:	97 70       	andi	r25, 0x07	; 7
     d68:	13 96       	adiw	r26, 0x03	; 3
     d6a:	8c 91       	ld	r24, X
     d6c:	13 97       	sbiw	r26, 0x03	; 3
     d6e:	88 0f       	add	r24, r24
     d70:	88 0f       	add	r24, r24
     d72:	88 0f       	add	r24, r24
     d74:	89 0f       	add	r24, r25
     d76:	80 93 f1 00 	sts	0x00F1, r24
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	8c 91       	ld	r24, X
     d7e:	12 97       	sbiw	r26, 0x02	; 2
     d80:	88 0f       	add	r24, r24
     d82:	88 0f       	add	r24, r24
     d84:	88 0f       	add	r24, r24
     d86:	80 93 f0 00 	sts	0x00F0, r24
     d8a:	ef ee       	ldi	r30, 0xEF	; 239
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	80 61       	ori	r24, 0x10	; 16
     d92:	80 83       	st	Z, r24
     d94:	1c c0       	rjmp	.+56     	; 0xdce <__stack+0x4cf>
          else              { Can_set_std_id(cmd->id.std);}
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	8c 91       	ld	r24, X
     d9a:	12 97       	sbiw	r26, 0x02	; 2
     d9c:	86 95       	lsr	r24
     d9e:	86 95       	lsr	r24
     da0:	86 95       	lsr	r24
     da2:	13 96       	adiw	r26, 0x03	; 3
     da4:	9c 91       	ld	r25, X
     da6:	13 97       	sbiw	r26, 0x03	; 3
     da8:	e0 e2       	ldi	r30, 0x20	; 32
     daa:	9e 9f       	mul	r25, r30
     dac:	80 0d       	add	r24, r0
     dae:	11 24       	eor	r1, r1
     db0:	80 93 f3 00 	sts	0x00F3, r24
     db4:	12 96       	adiw	r26, 0x02	; 2
     db6:	8c 91       	ld	r24, X
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	82 95       	swap	r24
     dbc:	88 0f       	add	r24, r24
     dbe:	80 7e       	andi	r24, 0xE0	; 224
     dc0:	80 93 f2 00 	sts	0x00F2, r24
     dc4:	ef ee       	ldi	r30, 0xEF	; 239
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	8f 7e       	andi	r24, 0xEF	; 239
     dcc:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     dce:	16 96       	adiw	r26, 0x06	; 6
     dd0:	8c 91       	ld	r24, X
     dd2:	16 97       	sbiw	r26, 0x06	; 6
     dd4:	88 23       	and	r24, r24
     dd6:	91 f0       	breq	.+36     	; 0xdfc <__stack+0x4fd>
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	8a ef       	ldi	r24, 0xFA	; 250
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	17 96       	adiw	r26, 0x07	; 7
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	18 97       	sbiw	r26, 0x08	; 8
     de6:	e2 0f       	add	r30, r18
     de8:	f1 1d       	adc	r31, r1
     dea:	30 81       	ld	r19, Z
     dec:	fc 01       	movw	r30, r24
     dee:	30 83       	st	Z, r19
     df0:	2f 5f       	subi	r18, 0xFF	; 255
     df2:	16 96       	adiw	r26, 0x06	; 6
     df4:	3c 91       	ld	r19, X
     df6:	16 97       	sbiw	r26, 0x06	; 6
     df8:	23 17       	cp	r18, r19
     dfa:	88 f3       	brcs	.-30     	; 0xdde <__stack+0x4df>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	92 95       	swap	r25
     e04:	96 95       	lsr	r25
     e06:	97 70       	andi	r25, 0x07	; 7
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	88 0f       	add	r24, r24
     e0c:	88 0f       	add	r24, r24
     e0e:	88 0f       	add	r24, r24
     e10:	89 0f       	add	r24, r25
     e12:	80 93 f7 00 	sts	0x00F7, r24
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	92 95       	swap	r25
     e1a:	96 95       	lsr	r25
     e1c:	97 70       	andi	r25, 0x07	; 7
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	88 0f       	add	r24, r24
     e22:	88 0f       	add	r24, r24
     e24:	88 0f       	add	r24, r24
     e26:	89 0f       	add	r24, r25
     e28:	80 93 f6 00 	sts	0x00F6, r24
     e2c:	99 81       	ldd	r25, Y+1	; 0x01
     e2e:	92 95       	swap	r25
     e30:	96 95       	lsr	r25
     e32:	97 70       	andi	r25, 0x07	; 7
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	88 0f       	add	r24, r24
     e38:	88 0f       	add	r24, r24
     e3a:	88 0f       	add	r24, r24
     e3c:	89 0f       	add	r24, r25
     e3e:	80 93 f5 00 	sts	0x00F5, r24
     e42:	29 81       	ldd	r18, Y+1	; 0x01
     e44:	22 0f       	add	r18, r18
     e46:	22 0f       	add	r18, r18
     e48:	22 0f       	add	r18, r18
     e4a:	84 ef       	ldi	r24, 0xF4	; 244
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e52:	ef ee       	ldi	r30, 0xEF	; 239
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	30 81       	ld	r19, Z
     e58:	16 96       	adiw	r26, 0x06	; 6
     e5a:	2c 91       	ld	r18, X
     e5c:	16 97       	sbiw	r26, 0x06	; 6
     e5e:	23 2b       	or	r18, r19
     e60:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     e62:	21 e0       	ldi	r18, 0x01	; 1
     e64:	1a 96       	adiw	r26, 0x0a	; 10
     e66:	2c 93       	st	X, r18
     e68:	dc 01       	movw	r26, r24
     e6a:	2c 91       	ld	r18, X
     e6c:	24 60       	ori	r18, 0x04	; 4
     e6e:	2c 93       	st	X, r18
     e70:	a0 ef       	ldi	r26, 0xF0	; 240
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	2c 91       	ld	r18, X
     e76:	24 60       	ori	r18, 0x04	; 4
     e78:	2c 93       	st	X, r18
          Can_set_rplv();
     e7a:	20 81       	ld	r18, Z
     e7c:	20 62       	ori	r18, 0x20	; 32
     e7e:	20 83       	st	Z, r18
          Can_set_idemsk();
     e80:	dc 01       	movw	r26, r24
     e82:	2c 91       	ld	r18, X
     e84:	21 60       	ori	r18, 0x01	; 1
     e86:	2c 93       	st	X, r18
          Can_config_rx();       
     e88:	80 81       	ld	r24, Z
     e8a:	8f 73       	andi	r24, 0x3F	; 63
     e8c:	80 83       	st	Z, r24
     e8e:	80 81       	ld	r24, Z
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e94:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     e96:	08 c0       	rjmp	.+16     	; 0xea8 <__stack+0x5a9>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
     e98:	19 96       	adiw	r26, 0x09	; 9
     e9a:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e9c:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <__stack+0x5a9>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
     ea0:	8f e1       	ldi	r24, 0x1F	; 31
     ea2:	19 96       	adiw	r26, 0x09	; 9
     ea4:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
     ea8:	0f 90       	pop	r0
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
     eb6:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
     eb8:	88 23       	and	r24, r24
     eba:	09 f4       	brne	.+2      	; 0xebe <can_get_status+0xe>
     ebc:	e1 c0       	rjmp	.+450    	; 0x1080 <can_get_status+0x1d0>
     ebe:	8f 31       	cpi	r24, 0x1F	; 31
     ec0:	09 f4       	brne	.+2      	; 0xec4 <can_get_status+0x14>
     ec2:	e0 c0       	rjmp	.+448    	; 0x1084 <can_get_status+0x1d4>
     ec4:	8f 3f       	cpi	r24, 0xFF	; 255
     ec6:	09 f4       	brne	.+2      	; 0xeca <can_get_status+0x1a>
     ec8:	df c0       	rjmp	.+446    	; 0x1088 <can_get_status+0x1d8>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
     eca:	62 95       	swap	r22
     ecc:	60 7f       	andi	r22, 0xF0	; 240
     ece:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
     ed2:	0e 94 ef 00 	call	0x1de	; 0x1de <can_get_mob_status>
    
    switch (a_status)
     ed6:	80 32       	cpi	r24, 0x20	; 32
     ed8:	61 f0       	breq	.+24     	; 0xef2 <can_get_status+0x42>
     eda:	20 f4       	brcc	.+8      	; 0xee4 <can_get_status+0x34>
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <can_get_status+0x32>
     ee0:	d5 c0       	rjmp	.+426    	; 0x108c <can_get_status+0x1dc>
     ee2:	c4 c0       	rjmp	.+392    	; 0x106c <can_get_status+0x1bc>
     ee4:	80 34       	cpi	r24, 0x40	; 64
     ee6:	09 f4       	brne	.+2      	; 0xeea <can_get_status+0x3a>
     ee8:	b6 c0       	rjmp	.+364    	; 0x1056 <can_get_status+0x1a6>
     eea:	80 3a       	cpi	r24, 0xA0	; 160
     eec:	09 f4       	brne	.+2      	; 0xef0 <can_get_status+0x40>
     eee:	5a c0       	rjmp	.+180    	; 0xfa4 <can_get_status+0xf4>
     ef0:	bd c0       	rjmp	.+378    	; 0x106c <can_get_status+0x1bc>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
			delay_ms(500);
     efa:	84 ef       	ldi	r24, 0xF4	; 244
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 36 09 	call	0x126c	; 0x126c <delay_ms>
			LED_Reg_Write(0x00);
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
	    
            cmd->ctrl.rtr = Can_get_rtr();
     f0a:	80 91 f0 00 	lds	r24, 0x00F0
     f0e:	82 fb       	bst	r24, 2
     f10:	88 27       	eor	r24, r24
     f12:	80 f9       	bld	r24, 0
     f14:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     f16:	80 91 ef 00 	lds	r24, 0x00EF
     f1a:	84 ff       	sbrs	r24, 4
     f1c:	2d c0       	rjmp	.+90     	; 0xf78 <can_get_status+0xc8>
            {
	            cmd->ctrl.ide = 1; // extended frame
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
     f22:	e3 ef       	ldi	r30, 0xF3	; 243
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	86 95       	lsr	r24
     f2a:	86 95       	lsr	r24
     f2c:	86 95       	lsr	r24
     f2e:	8d 83       	std	Y+5, r24	; 0x05
     f30:	a2 ef       	ldi	r26, 0xF2	; 242
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	8c 91       	ld	r24, X
     f36:	90 81       	ld	r25, Z
     f38:	86 95       	lsr	r24
     f3a:	86 95       	lsr	r24
     f3c:	86 95       	lsr	r24
     f3e:	20 e2       	ldi	r18, 0x20	; 32
     f40:	92 9f       	mul	r25, r18
     f42:	80 0d       	add	r24, r0
     f44:	11 24       	eor	r1, r1
     f46:	8c 83       	std	Y+4, r24	; 0x04
     f48:	e1 ef       	ldi	r30, 0xF1	; 241
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	9c 91       	ld	r25, X
     f50:	86 95       	lsr	r24
     f52:	86 95       	lsr	r24
     f54:	86 95       	lsr	r24
     f56:	20 e2       	ldi	r18, 0x20	; 32
     f58:	92 9f       	mul	r25, r18
     f5a:	80 0d       	add	r24, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	80 91 f0 00 	lds	r24, 0x00F0
     f64:	90 81       	ld	r25, Z
     f66:	86 95       	lsr	r24
     f68:	86 95       	lsr	r24
     f6a:	86 95       	lsr	r24
     f6c:	20 e2       	ldi	r18, 0x20	; 32
     f6e:	92 9f       	mul	r25, r18
     f70:	80 0d       	add	r24, r0
     f72:	11 24       	eor	r1, r1
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	07 c0       	rjmp	.+14     	; 0xf86 <can_get_status+0xd6>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
     f78:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
     f7a:	e3 ef       	ldi	r30, 0xF3	; 243
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 91 f2 00 	lds	r24, 0x00F2
     f84:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
     f86:	80 e2       	ldi	r24, 0x20	; 32
     f88:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
     f8a:	8f 81       	ldd	r24, Y+7	; 0x07
     f8c:	98 85       	ldd	r25, Y+8	; 0x08
     f8e:	0e 94 05 01 	call	0x20a	; 0x20a <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
     f92:	ef ee       	ldi	r30, 0xEF	; 239
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8f 73       	andi	r24, 0x3F	; 63
     f9a:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
     f9c:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
     fa0:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
     fa2:	75 c0       	rjmp	.+234    	; 0x108e <can_get_status+0x1de>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
     fa4:	80 91 f0 00 	lds	r24, 0x00F0
     fa8:	82 fb       	bst	r24, 2
     faa:	88 27       	eor	r24, r24
     fac:	80 f9       	bld	r24, 0
     fae:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     fb0:	80 91 ef 00 	lds	r24, 0x00EF
     fb4:	84 ff       	sbrs	r24, 4
     fb6:	2d c0       	rjmp	.+90     	; 0x1012 <can_get_status+0x162>
            {
                cmd->ctrl.ide = 1; // extended frame
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
     fbc:	e3 ef       	ldi	r30, 0xF3	; 243
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	86 95       	lsr	r24
     fc4:	86 95       	lsr	r24
     fc6:	86 95       	lsr	r24
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	a2 ef       	ldi	r26, 0xF2	; 242
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	8c 91       	ld	r24, X
     fd0:	90 81       	ld	r25, Z
     fd2:	86 95       	lsr	r24
     fd4:	86 95       	lsr	r24
     fd6:	86 95       	lsr	r24
     fd8:	20 e2       	ldi	r18, 0x20	; 32
     fda:	92 9f       	mul	r25, r18
     fdc:	80 0d       	add	r24, r0
     fde:	11 24       	eor	r1, r1
     fe0:	8c 83       	std	Y+4, r24	; 0x04
     fe2:	e1 ef       	ldi	r30, 0xF1	; 241
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	9c 91       	ld	r25, X
     fea:	86 95       	lsr	r24
     fec:	86 95       	lsr	r24
     fee:	86 95       	lsr	r24
     ff0:	20 e2       	ldi	r18, 0x20	; 32
     ff2:	92 9f       	mul	r25, r18
     ff4:	80 0d       	add	r24, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	8b 83       	std	Y+3, r24	; 0x03
     ffa:	80 91 f0 00 	lds	r24, 0x00F0
     ffe:	90 81       	ld	r25, Z
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	86 95       	lsr	r24
    1006:	20 e2       	ldi	r18, 0x20	; 32
    1008:	92 9f       	mul	r25, r18
    100a:	80 0d       	add	r24, r0
    100c:	11 24       	eor	r1, r1
    100e:	8a 83       	std	Y+2, r24	; 0x02
    1010:	13 c0       	rjmp	.+38     	; 0x1038 <can_get_status+0x188>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1012:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1014:	e3 ef       	ldi	r30, 0xF3	; 243
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	82 95       	swap	r24
    101c:	86 95       	lsr	r24
    101e:	87 70       	andi	r24, 0x07	; 7
    1020:	8b 83       	std	Y+3, r24	; 0x03
    1022:	80 91 f2 00 	lds	r24, 0x00F2
    1026:	90 81       	ld	r25, Z
    1028:	99 0f       	add	r25, r25
    102a:	99 0f       	add	r25, r25
    102c:	99 0f       	add	r25, r25
    102e:	82 95       	swap	r24
    1030:	86 95       	lsr	r24
    1032:	87 70       	andi	r24, 0x07	; 7
    1034:	89 0f       	add	r24, r25
    1036:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1038:	80 ea       	ldi	r24, 0xA0	; 160
    103a:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    103c:	8f 81       	ldd	r24, Y+7	; 0x07
    103e:	98 85       	ldd	r25, Y+8	; 0x08
    1040:	0e 94 05 01 	call	0x20a	; 0x20a <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1044:	ef ee       	ldi	r30, 0xEF	; 239
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8f 73       	andi	r24, 0x3F	; 63
    104c:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    104e:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    1052:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1054:	1c c0       	rjmp	.+56     	; 0x108e <can_get_status+0x1de>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1056:	80 e4       	ldi	r24, 0x40	; 64
    1058:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    105a:	ef ee       	ldi	r30, 0xEF	; 239
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8f 73       	andi	r24, 0x3F	; 63
    1062:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1064:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1068:	80 e4       	ldi	r24, 0x40	; 64
            break;
    106a:	11 c0       	rjmp	.+34     	; 0x108e <can_get_status+0x1de>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    106c:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    106e:	ef ee       	ldi	r30, 0xEF	; 239
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8f 73       	andi	r24, 0x3F	; 63
    1076:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1078:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    107c:	82 e0       	ldi	r24, 0x02	; 2
            break;
    107e:	07 c0       	rjmp	.+14     	; 0x108e <can_get_status+0x1de>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	05 c0       	rjmp	.+10     	; 0x108e <can_get_status+0x1de>
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	03 c0       	rjmp	.+6      	; 0x108e <can_get_status+0x1de>
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	01 c0       	rjmp	.+2      	; 0x108e <can_get_status+0x1de>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    108c:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <LED_Reg_Write>:
*/
#include <avr/io.h>
#include "LED.h"

void LED_Reg_Write(uint8_t val) {
	LEDPORT = ~val;
    1094:	80 95       	com	r24
    1096:	85 b9       	out	0x05, r24	; 5
    1098:	08 95       	ret

0000109a <main>:
	}
}

void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    109a:	e1 e6       	ldi	r30, 0x61	; 97
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 e8       	ldi	r24, 0x80	; 128
    10a0:	80 83       	st	Z, r24
	CLKPR = 0x00;
    10a2:	10 82       	st	Z, r1
}

void io_init(void) {
	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFF;
    10a4:	8f ef       	ldi	r24, 0xFF	; 255
    10a6:	84 b9       	out	0x04, r24	; 4
	LED_Reg_Write(0x00); // clear all LEDs
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x00;
    10ae:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
    10b0:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x00;
    10b2:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
    10b4:	1b b8       	out	0x0b, r1	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    10b6:	1d b8       	out	0x0d, r1	; 13
	PORTD = 0x00;
    10b8:	1b b8       	out	0x0b, r1	; 11
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    10ba:	0e 94 1c 09 	call	0x1238	; 0x1238 <timer_init>
	can_init(0);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	0e 94 1d 01 	call	0x23a	; 0x23a <can_init>
	adc_initialize();
    10c4:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	uint8_t	i = 0;
	uint8_t check = 0;
	uint8_t* receive_char;
	
	receive_char = SPDR_BASE;
	*receive_char = 0x41;
    10c8:	81 e4       	ldi	r24, 0x41	; 65
    10ca:	8e b9       	out	0x0e, r24	; 14
	
	// Enable global interrupts for Timer execution
	sei();
    10cc:	78 94       	sei
	
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
	delay_ms(250);
    10d4:	8a ef       	ldi	r24, 0xFA	; 250
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 36 09 	call	0x126c	; 0x126c <delay_ms>
	LED_Reg_Write(0x00);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
    10e2:	e6 e3       	ldi	r30, 0x36	; 54
    10e4:	f1 e0       	ldi	r31, 0x01	; 1
    10e6:	8e e3       	ldi	r24, 0x3E	; 62
    10e8:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
    10ea:	11 92       	st	Z+, r1
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
	delay_ms(250);
	LED_Reg_Write(0x00);
	
	for (i = 0; i < 8; i ++)
    10ec:	e8 17       	cp	r30, r24
    10ee:	f9 07       	cpc	r31, r25
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <main+0x50>
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
	}
			
	send_now = 0;
    10f2:	10 92 2c 01 	sts	0x012C, r1
	send_hk = 0;
    10f6:	10 92 35 01 	sts	0x0135, r1
	send_data = 0;	
    10fa:	10 92 46 01 	sts	0x0146, r1
	
	/*		Initialize CAN Message Objects			*/
	can_init_mobs();
    10fe:	0e 94 9f 00 	call	0x13e	; 0x13e <can_init_mobs>
	
	/*		Initialize SPI communications			*/
	spi_initialize();
    1102:	0e 94 de 08 	call	0x11bc	; 0x11bc <spi_initialize>
    1106:	00 e1       	ldi	r16, 0x10	; 16
    1108:	11 e0       	ldi	r17, 0x01	; 1
    110a:	c8 e1       	ldi	r28, 0x18	; 24
    110c:	d1 e0       	ldi	r29, 0x01	; 1
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    110e:	0f 2e       	mov	r0, r31
    1110:	fb ea       	ldi	r31, 0xAB	; 171
    1112:	cf 2e       	mov	r12, r31
    1114:	f0 2d       	mov	r31, r0
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    1116:	0f 2e       	mov	r0, r31
    1118:	f0 ef       	ldi	r31, 0xF0	; 240
    111a:	df 2e       	mov	r13, r31
    111c:	f0 2d       	mov	r31, r0
    111e:	a0 2e       	mov	r10, r16
    1120:	b1 2e       	mov	r11, r17
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
			send_arr[3] = 0x55;
    1122:	0f 2e       	mov	r0, r31
    1124:	f3 e1       	ldi	r31, 0x13	; 19
    1126:	ef 2e       	mov	r14, r31
    1128:	f1 e0       	ldi	r31, 0x01	; 1
    112a:	ff 2e       	mov	r15, r31
    112c:	f0 2d       	mov	r31, r0
    112e:	0f 2e       	mov	r0, r31
    1130:	f5 e5       	ldi	r31, 0x55	; 85
    1132:	9f 2e       	mov	r9, r31
    1134:	f0 2d       	mov	r31, r0
		//can_check_housekeep();
		
		/* CHECK FOR AN INCOMING SPI BYTE AND ECHO IT */
		//spi_check();
		
		check = spi_transfer(*receive_char);		// Echo the character back to the master.
    1136:	8e b1       	in	r24, 0x0e	; 14
    1138:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <spi_transfer>
		
		if(check)
    113c:	88 23       	and	r24, r24
    113e:	51 f0       	breq	.+20     	; 0x1154 <main+0xba>
		{
			LED_Reg_Write(0x40);					// Toggle LED1 when a character was sent.
    1140:	80 e4       	ldi	r24, 0x40	; 64
    1142:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
			delay_ms(500);
    1146:	84 ef       	ldi	r24, 0xF4	; 244
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 36 09 	call	0x126c	; 0x126c <delay_ms>
			LED_Reg_Write(0x00);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
		}
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    1154:	80 91 2c 01 	lds	r24, 0x012C
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	61 f4       	brne	.+24     	; 0x1174 <main+0xda>
    115c:	ea 2d       	mov	r30, r10
    115e:	fb 2d       	mov	r31, r11
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    1160:	c1 92       	st	Z+, r12
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
    1162:	ec 17       	cp	r30, r28
    1164:	fd 07       	cpc	r31, r29
    1166:	e1 f7       	brne	.-8      	; 0x1160 <main+0xc6>
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]));
    1168:	8a 2d       	mov	r24, r10
    116a:	9b 2d       	mov	r25, r11
    116c:	0e 94 6d 00 	call	0xda	; 0xda <can_send_message>
			send_now = 0;
    1170:	10 92 2c 01 	sts	0x012C, r1
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
    1174:	80 91 35 01 	lds	r24, 0x0135
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	61 f4       	brne	.+24     	; 0x1194 <main+0xfa>
    117c:	ea 2d       	mov	r30, r10
    117e:	fb 2d       	mov	r31, r11
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    1180:	d1 92       	st	Z+, r13
			send_now = 0;
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    1182:	ec 17       	cp	r30, r28
    1184:	fd 07       	cpc	r31, r29
    1186:	e1 f7       	brne	.-8      	; 0x1180 <main+0xe6>
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]));
    1188:	8a 2d       	mov	r24, r10
    118a:	9b 2d       	mov	r25, r11
    118c:	0e 94 6d 00 	call	0xda	; 0xda <can_send_message>
			send_hk = 0;
    1190:	10 92 35 01 	sts	0x0135, r1
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
    1194:	20 91 46 01 	lds	r18, 0x0146
    1198:	21 30       	cpi	r18, 0x01	; 1
    119a:	69 f6       	brne	.-102    	; 0x1136 <main+0x9c>
    119c:	f8 01       	movw	r30, r16
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    119e:	11 92       	st	Z+, r1
			send_hk = 0;
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    11a0:	ec 17       	cp	r30, r28
    11a2:	fd 07       	cpc	r31, r29
    11a4:	e1 f7       	brne	.-8      	; 0x119e <main+0x104>
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
    11a6:	c8 01       	movw	r24, r16
    11a8:	0e 94 64 00 	call	0xc8	; 0xc8 <adc_read>
			send_arr[3] = 0x55;
    11ac:	f7 01       	movw	r30, r14
    11ae:	90 82       	st	Z, r9
			
			can_send_message(&(send_arr[0]));
    11b0:	c8 01       	movw	r24, r16
    11b2:	0e 94 6d 00 	call	0xda	; 0xda <can_send_message>
			send_data = 0;
    11b6:	10 92 46 01 	sts	0x0146, r1
    11ba:	bd cf       	rjmp	.-134    	; 0x1136 <main+0x9c>

000011bc <spi_initialize>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b10000000;
	*reg_ptr = *reg_ptr | (temp);	// We set SPIPS to 1 (select MISO_A, MOSI_A...)
    11bc:	af 9a       	sbi	0x15, 7	; 21
	
	reg_ptr = SPCR_BASE;
	temp = 0b01110000;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first.
	temp = 0b01111100;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, set as slave, spiclk = fioclk/4
    11be:	8c b1       	in	r24, 0x0c	; 12
    11c0:	8c 77       	andi	r24, 0x7C	; 124
    11c2:	80 67       	ori	r24, 0x70	; 112
    11c4:	8c b9       	out	0x0c, r24	; 12
    11c6:	08 95       	ret

000011c8 <spi_transfer>:
{
	uint8_t* reg_ptr;
	uint8_t timeout = SPI_TIMEOUT;
	
	reg_ptr = SPDR_BASE;
	*reg_ptr = message;
    11c8:	8e b9       	out	0x0e, r24	; 14
	
	reg_ptr = SPSR_BASE;
	
	LED_Reg_Write(0x80);					// Toggle LED2 when a character was sent.
    11ca:	80 e8       	ldi	r24, 0x80	; 128
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
	delay_ms(100);
    11d2:	84 e6       	ldi	r24, 0x64	; 100
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 36 09 	call	0x126c	; 0x126c <delay_ms>
	LED_Reg_Write(0x00);
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
	delay_ms(25);
    11e2:	89 e1       	ldi	r24, 0x19	; 25
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 36 09 	call	0x126c	; 0x126c <delay_ms>
	LED_Reg_Write(0x01);
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
	delay_ms(100);
    11f2:	84 e6       	ldi	r24, 0x64	; 100
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 36 09 	call	0x126c	; 0x126c <delay_ms>
	LED_Reg_Write(0x00);
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 4a 08 	call	0x1094	; 0x1094 <LED_Reg_Write>
	delay_ms(25);
    1202:	89 e1       	ldi	r24, 0x19	; 25
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 36 09 	call	0x126c	; 0x126c <delay_ms>

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    120a:	6f 99       	sbic	0x0d, 7	; 13
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <spi_transfer+0x4e>
    120e:	89 ee       	ldi	r24, 0xE9	; 233
    1210:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    1212:	f1 f7       	brne	.-4      	; 0x1210 <spi_transfer+0x48>
    1214:	08 95       	ret
			return 0;						// Something went wrong, so the function times out.
	}
	
	return 1;								// Transmission was successful.
    1216:	81 e0       	ldi	r24, 0x01	; 1
}
    1218:	08 95       	ret

0000121a <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	8f 93       	push	r24
	CTC_flag = 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	80 93 51 01 	sts	0x0151, r24
}
    122c:	8f 91       	pop	r24
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	0f 90       	pop	r0
    1234:	1f 90       	pop	r1
    1236:	18 95       	reti

00001238 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    1238:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    123c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    1240:	8a e0       	ldi	r24, 0x0A	; 10
    1242:	80 93 81 00 	sts	0x0081, r24
    1246:	08 95       	ret

00001248 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    1248:	10 92 51 01 	sts	0x0151, r1
	TCNT1 = 0x0000; //Clear timer
    124c:	10 92 85 00 	sts	0x0085, r1
    1250:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    1254:	90 93 89 00 	sts	0x0089, r25
    1258:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    1262:	80 91 51 01 	lds	r24, 0x0151
    1266:	88 23       	and	r24, r24
    1268:	e1 f3       	breq	.-8      	; 0x1262 <delay_us+0x1a>
}
    126a:	08 95       	ret

0000126c <delay_ms>:

void delay_ms(uint16_t ms) {
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	51 f0       	breq	.+20     	; 0x128e <delay_ms+0x22>
    127a:	c0 e0       	ldi	r28, 0x00	; 0
    127c:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    127e:	88 ee       	ldi	r24, 0xE8	; 232
    1280:	93 e0       	ldi	r25, 0x03	; 3
    1282:	0e 94 24 09 	call	0x1248	; 0x1248 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    1286:	21 96       	adiw	r28, 0x01	; 1
    1288:	c0 17       	cp	r28, r16
    128a:	d1 07       	cpc	r29, r17
    128c:	c1 f7       	brne	.-16     	; 0x127e <delay_ms+0x12>
		delay_us(1000);
	}
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <__tablejump2__>:
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31

0000129c <__tablejump__>:
    129c:	05 90       	lpm	r0, Z+
    129e:	f4 91       	lpm	r31, Z
    12a0:	e0 2d       	mov	r30, r0
    12a2:	09 94       	ijmp

000012a4 <_exit>:
    12a4:	f8 94       	cli

000012a6 <__stop_program>:
    12a6:	ff cf       	rjmp	.-2      	; 0x12a6 <__stop_program>
