
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000029a  00800100  00800100  000021c6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000021c6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000002b0  00000000  00000000  000021f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003495  00000000  00000000  000024a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000f60  00000000  00000000  0000593b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000122a  00000000  00000000  0000689b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000060c  00000000  00000000  00007ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000af0  00000000  00000000  000080d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002178  00000000  00000000  00008bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000258  00000000  00000000  0000ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__vector_12>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      7c:	c7 00       	.word	0x00c7	; ????
      7e:	ca 00       	.word	0x00ca	; ????
      80:	d7 00       	.word	0x00d7	; ????
      82:	4e 01       	movw	r8, r28
      84:	da 00       	.word	0x00da	; ????
      86:	4e 01       	movw	r8, r28
      88:	e7 00       	.word	0x00e7	; ????
      8a:	4e 01       	movw	r8, r28
      8c:	f4 00       	.word	0x00f4	; ????
      8e:	01 01       	movw	r0, r2
      90:	0e 01       	movw	r0, r28
      92:	1b 01       	movw	r2, r22
      94:	1e 01       	movw	r2, r28
      96:	4e 01       	movw	r8, r28
      98:	2b 01       	movw	r4, r22
      9a:	4e 01       	movw	r8, r28
      9c:	4e 01       	movw	r8, r28
      9e:	4b 01       	movw	r8, r22
      a0:	4e 01       	movw	r8, r28
      a2:	48 01       	movw	r8, r16
      a4:	ab 04       	cpc	r10, r11
      a6:	3d 05       	cpc	r19, r13
      a8:	c7 05       	cpc	r28, r7
      aa:	3b 06       	cpc	r3, r27
      ac:	7b 06       	cpc	r7, r27
      ae:	f7 06       	cpc	r15, r23
      b0:	74 07       	cpc	r23, r20
      b2:	11 08       	sbc	r1, r1
      b4:	b7 08       	sbc	r11, r7
      b6:	a5 04       	cpc	r10, r5
      b8:	c0 09       	sbc	r28, r0

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
      c6:	23 e0       	ldi	r18, 0x03	; 3
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	aa 39       	cpi	r26, 0x9A	; 154
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <main>
      da:	0c 94 a7 10 	jmp	0x214e	; 0x214e <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      e8:	82 ee       	ldi	r24, 0xE2	; 226
      ea:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      ee:	80 ea       	ldi	r24, 0xA0	; 160
      f0:	80 93 7b 00 	sts	0x007B, r24
      f4:	08 95       	ret

000000f6 <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      f6:	e8 e7       	ldi	r30, 0x78	; 120
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	20 81       	ld	r18, Z
      fc:	dc 01       	movw	r26, r24
      fe:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
     100:	21 81       	ldd	r18, Z+1	; 0x01
     102:	11 96       	adiw	r26, 0x01	; 1
     104:	2c 93       	st	X, r18
     106:	08 95       	ret

00000108 <adc_set_pin>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = ADC_num;
	*ptr = x;
     108:	80 93 7c 00 	sts	0x007C, r24
     10c:	08 95       	ret

0000010e <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     10e:	21 ec       	ldi	r18, 0xC1	; 193
     110:	31 e0       	ldi	r19, 0x01	; 1
     112:	30 93 ee 01 	sts	0x01EE, r19
     116:	20 93 ed 01 	sts	0x01ED, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     11a:	10 92 f1 01 	sts	0x01F1, r1
	message.id.std = id;  // populate ID field with ID Tag
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	70 93 e9 01 	sts	0x01E9, r23
     124:	60 93 e8 01 	sts	0x01E8, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     128:	22 e0       	ldi	r18, 0x02	; 2
     12a:	20 93 e7 01 	sts	0x01E7, r18
	message.dlc = 8;			 // Max length of a CAN message.
     12e:	28 e0       	ldi	r18, 0x08	; 8
     130:	20 93 ec 01 	sts	0x01EC, r18
	mob_number = 4;
     134:	24 e0       	ldi	r18, 0x04	; 4
     136:	20 93 e3 02 	sts	0x02E3, r18
     13a:	dc 01       	movw	r26, r24
     13c:	e1 ec       	ldi	r30, 0xC1	; 193
     13e:	f1 e0       	ldi	r31, 0x01	; 1
     140:	89 ec       	ldi	r24, 0xC9	; 201
     142:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     144:	2d 91       	ld	r18, X+
     146:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     148:	e8 17       	cp	r30, r24
     14a:	f9 07       	cpc	r31, r25
     14c:	d9 f7       	brne	.-10     	; 0x144 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     14e:	60 91 e3 02 	lds	r22, 0x02E3
     152:	86 ee       	ldi	r24, 0xE6	; 230
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     15a:	81 11       	cpse	r24, r1
     15c:	f8 cf       	rjmp	.-16     	; 0x14e <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     15e:	60 91 e3 02 	lds	r22, 0x02E3
     162:	86 ee       	ldi	r24, 0xE6	; 230
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 8d 0a 	call	0x151a	; 0x151a <can_get_status>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	c1 f3       	breq	.-16     	; 0x15e <can_send_message+0x50>

	return;
}
     16e:	08 95       	ret

00000170 <decode_command>:

void decode_command(uint8_t* command_array)
{		
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	ec 01       	movw	r28, r24
	uint8_t i, command  = *(command_array + 5);
	uint8_t req_by = (*(command_array + 7)) >> 4;

	switch(command)
     176:	4d 81       	ldd	r20, Y+5	; 0x05
     178:	50 e0       	ldi	r21, 0x00	; 0
     17a:	fa 01       	movw	r30, r20
     17c:	31 97       	sbiw	r30, 0x01	; 1
     17e:	e4 31       	cpi	r30, 0x14	; 20
     180:	f1 05       	cpc	r31, r1
     182:	08 f0       	brcs	.+2      	; 0x186 <decode_command+0x16>
     184:	8b c0       	rjmp	.+278    	; 0x29c <decode_command+0x12c>
     186:	e2 5c       	subi	r30, 0xC2	; 194
     188:	ff 4f       	sbci	r31, 0xFF	; 255
     18a:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__tablejump2__>
		case REQ_RESPONSE :
			if(SELF_ID != 1)
			{
				LED_toggle(LED3);
			}
			send_now = 1;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 03 02 	sts	0x0203, r24
		case REQ_DATA :
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
			send_data = 1;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 c8 02 	sts	0x02C8, r24
     19a:	de 01       	movw	r26, r28
     19c:	e2 ef       	ldi	r30, 0xF2	; 242
     19e:	f1 e0       	ldi	r31, 0x01	; 1
     1a0:	8a ef       	ldi	r24, 0xFA	; 250
     1a2:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     1a4:	2d 91       	ld	r18, X+
     1a6:	21 93       	st	Z+, r18
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
			send_data = 1;
			for (i = 0; i < 8; i ++)
     1a8:	e8 17       	cp	r30, r24
     1aa:	f9 07       	cpc	r31, r25
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <decode_command+0x34>
		case REQ_HK :
			if(SELF_ID != 1)
			{
				LED_toggle(LED2);
			}
			send_hk = 1;
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	80 93 a6 02 	sts	0x02A6, r24
		case REQ_READ:
			read_response = 1;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 0d 02 	sts	0x020D, r24
     1ba:	de 01       	movw	r26, r28
     1bc:	e1 e9       	ldi	r30, 0x91	; 145
     1be:	f3 e0       	ldi	r31, 0x03	; 3
     1c0:	89 e9       	ldi	r24, 0x99	; 153
     1c2:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     1c4:	2d 91       	ld	r18, X+
     1c6:	21 93       	st	Z+, r18
				LED_toggle(LED2);
			}
			send_hk = 1;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1c8:	e8 17       	cp	r30, r24
     1ca:	f9 07       	cpc	r31, r25
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <decode_command+0x54>
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 d7 01 	sts	0x01D7, r24
     1d4:	de 01       	movw	r26, r28
     1d6:	e1 e0       	ldi	r30, 0x01	; 1
     1d8:	f1 e0       	ldi	r31, 0x01	; 1
     1da:	89 e0       	ldi	r24, 0x09	; 9
     1dc:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     1de:	2d 91       	ld	r18, X+
     1e0:	21 93       	st	Z+, r18
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     1e2:	e8 17       	cp	r30, r24
     1e4:	f9 07       	cpc	r31, r25
     1e6:	d9 f7       	brne	.-10     	; 0x1de <decode_command+0x6e>
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	80 93 c5 02 	sts	0x02C5, r24
     1ee:	de 01       	movw	r26, r28
     1f0:	e8 ed       	ldi	r30, 0xD8	; 216
     1f2:	f1 e0       	ldi	r31, 0x01	; 1
     1f4:	80 ee       	ldi	r24, 0xE0	; 224
     1f6:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				sensh_arr[i] = *(command_array + i);
     1f8:	2d 91       	ld	r18, X+
     1fa:	21 93       	st	Z+, r18
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
			for (i = 0; i < 8; i ++)
     1fc:	e8 17       	cp	r30, r24
     1fe:	f9 07       	cpc	r31, r25
     200:	d9 f7       	brne	.-10     	; 0x1f8 <decode_command+0x88>
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	80 93 ca 02 	sts	0x02CA, r24
     208:	de 01       	movw	r26, r28
     20a:	e4 ef       	ldi	r30, 0xF4	; 244
     20c:	f2 e0       	ldi	r31, 0x02	; 2
     20e:	8c ef       	ldi	r24, 0xFC	; 252
     210:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				sensl_arr[i] = *(command_array + i);
     212:	2d 91       	ld	r18, X+
     214:	21 93       	st	Z+, r18
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
			for (i = 0; i < 8; i ++)
     216:	e8 17       	cp	r30, r24
     218:	f9 07       	cpc	r31, r25
     21a:	d9 f7       	brne	.-10     	; 0x212 <decode_command+0xa2>
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 c9 02 	sts	0x02C9, r24
     222:	de 01       	movw	r26, r28
     224:	eb ec       	ldi	r30, 0xCB	; 203
     226:	f1 e0       	ldi	r31, 0x01	; 1
     228:	83 ed       	ldi	r24, 0xD3	; 211
     22a:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				setv_arr[i] = *(command_array + i);
     22c:	2d 91       	ld	r18, X+
     22e:	21 93       	st	Z+, r18
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
			for (i = 0; i < 8; i ++)
     230:	e8 17       	cp	r30, r24
     232:	f9 07       	cpc	r31, r25
     234:	d9 f7       	brne	.-10     	; 0x22c <decode_command+0xbc>
			{
				setv_arr[i] = *(command_array + i);
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
     236:	88 81       	ld	r24, Y
     238:	80 93 00 02 	sts	0x0200, r24
		case SEND_TM:
			new_tm_msgf = 1;
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	80 93 04 02 	sts	0x0204, r24
     242:	de 01       	movw	r26, r28
     244:	eb ec       	ldi	r30, 0xCB	; 203
     246:	f2 e0       	ldi	r31, 0x02	; 2
     248:	83 ed       	ldi	r24, 0xD3	; 211
     24a:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				new_tm_msg[i] = *(command_array + i);
     24c:	2d 91       	ld	r18, X+
     24e:	21 93       	st	Z+, r18
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
		case SEND_TM:
			new_tm_msgf = 1;
			for (i = 0; i < 8; i ++)
     250:	e8 17       	cp	r30, r24
     252:	f9 07       	cpc	r31, r25
     254:	d9 f7       	brne	.-10     	; 0x24c <decode_command+0xdc>
			{
				new_tm_msg[i] = *(command_array + i);
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
     256:	80 91 c7 02 	lds	r24, 0x02C7
     25a:	81 11       	cpse	r24, r1
     25c:	19 c0       	rjmp	.+50     	; 0x290 <decode_command+0x120>
     25e:	80 91 e9 02 	lds	r24, 0x02E9
     262:	81 11       	cpse	r24, r1
     264:	15 c0       	rjmp	.+42     	; 0x290 <decode_command+0x120>
}

// Let the OBC know that you are ready to receive TM packet.
static void start_tm_packet(void)
{
	send_arr[7] = (SELF_ID << 4)|COMS_TASK_ID;
     266:	87 e1       	ldi	r24, 0x17	; 23
     268:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_COM;
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[5] = OK_START_TM_PACKET;
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
     278:	80 91 00 02 	lds	r24, 0x0200
     27c:	80 93 b9 01 	sts	0x01B9, r24
	receiving_tmf = 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 e9 02 	sts	0x02E9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
     286:	61 e1       	ldi	r22, 0x11	; 17
     288:	85 eb       	ldi	r24, 0xB5	; 181
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
				start_tm_packet();
		case TC_TRANSACTION_RESP:
			tc_transfer_completef = *command_array;
     290:	88 81       	ld	r24, Y
     292:	80 93 e3 01 	sts	0x01E3, r24
		case OK_START_TC_PACKET:
			start_tc_transferf = 1;
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	80 93 e2 01 	sts	0x01E2, r24
		default:
			return;
	}
	return;
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	08 95       	ret

000002a2 <set_up_msg>:

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2a2:	10 92 f1 01 	sts	0x01F1, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2a6:	95 e0       	ldi	r25, 0x05	; 5
     2a8:	90 93 e7 01 	sts	0x01E7, r25
	message.dlc = 8;			 // Max length of a CAN message.
     2ac:	98 e0       	ldi	r25, 0x08	; 8
     2ae:	90 93 ec 01 	sts	0x01EC, r25
	mob_number = mailbox;
     2b2:	80 93 e3 02 	sts	0x02E3, r24
	
	if(mailbox == 0)
     2b6:	81 11       	cpse	r24, r1
     2b8:	0e c0       	rjmp	.+28     	; 0x2d6 <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     2ba:	8e e9       	ldi	r24, 0x9E	; 158
     2bc:	92 e0       	ldi	r25, 0x02	; 2
     2be:	90 93 ee 01 	sts	0x01EE, r25
     2c2:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     2c6:	80 91 b5 02 	lds	r24, 0x02B5
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	90 93 e9 01 	sts	0x01E9, r25
     2d0:	80 93 e8 01 	sts	0x01E8, r24
		return;
     2d4:	08 95       	ret
	}
	if(mailbox == 1)
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	71 f4       	brne	.+28     	; 0x2f6 <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     2da:	84 ea       	ldi	r24, 0xA4	; 164
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	90 93 ee 01 	sts	0x01EE, r25
     2e2:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = id_array[1];
     2e6:	80 91 b6 02 	lds	r24, 0x02B6
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	90 93 e9 01 	sts	0x01E9, r25
     2f0:	80 93 e8 01 	sts	0x01E8, r24
		return;
     2f4:	08 95       	ret
	}
	if(mailbox == 2)
     2f6:	82 30       	cpi	r24, 0x02	; 2
     2f8:	71 f4       	brne	.+28     	; 0x316 <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     2fa:	8c ea       	ldi	r24, 0xAC	; 172
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	90 93 ee 01 	sts	0x01EE, r25
     302:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = id_array[2];
     306:	80 91 b7 02 	lds	r24, 0x02B7
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	90 93 e9 01 	sts	0x01E9, r25
     310:	80 93 e8 01 	sts	0x01E8, r24
		return;
     314:	08 95       	ret
	}
	if(mailbox == 3)
     316:	83 30       	cpi	r24, 0x03	; 3
     318:	71 f4       	brne	.+28     	; 0x336 <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     31a:	8d eb       	ldi	r24, 0xBD	; 189
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	90 93 ee 01 	sts	0x01EE, r25
     322:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = id_array[3];
     326:	80 91 b8 02 	lds	r24, 0x02B8
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	90 93 e9 01 	sts	0x01E9, r25
     330:	80 93 e8 01 	sts	0x01E8, r24
		return;
     334:	08 95       	ret
	}
	if(mailbox == 5)
     336:	85 30       	cpi	r24, 0x05	; 5
     338:	69 f4       	brne	.+26     	; 0x354 <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     33a:	87 ed       	ldi	r24, 0xD7	; 215
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	90 93 ee 01 	sts	0x01EE, r25
     342:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = id_array[5];
     346:	80 91 ba 02 	lds	r24, 0x02BA
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	90 93 e9 01 	sts	0x01E9, r25
     350:	80 93 e8 01 	sts	0x01E8, r24
     354:	08 95       	ret

00000356 <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     356:	81 11       	cpse	r24, r1
     358:	20 c0       	rjmp	.+64     	; 0x39a <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     35a:	10 92 f1 01 	sts	0x01F1, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     35e:	85 e0       	ldi	r24, 0x05	; 5
     360:	80 93 e7 01 	sts	0x01E7, r24
		message.dlc = 8;			 // Max length of a CAN message.
     364:	88 e0       	ldi	r24, 0x08	; 8
     366:	80 93 ec 01 	sts	0x01EC, r24
		mob_number = mailbox;
     36a:	10 92 e3 02 	sts	0x02E3, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     36e:	8e e9       	ldi	r24, 0x9E	; 158
     370:	92 e0       	ldi	r25, 0x02	; 2
     372:	90 93 ee 01 	sts	0x01EE, r25
     376:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     37a:	80 91 b5 02 	lds	r24, 0x02B5
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	90 93 e9 01 	sts	0x01E9, r25
     384:	80 93 e8 01 	sts	0x01E8, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     388:	60 91 e3 02 	lds	r22, 0x02E3
     38c:	86 ee       	ldi	r24, 0xE6	; 230
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     394:	81 11       	cpse	r24, r1
     396:	f8 cf       	rjmp	.-16     	; 0x388 <clean_up_msg+0x32>
     398:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     39a:	81 30       	cpi	r24, 0x01	; 1
     39c:	01 f5       	brne	.+64     	; 0x3de <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     39e:	10 92 f1 01 	sts	0x01F1, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	80 93 e7 01 	sts	0x01E7, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3a8:	88 e0       	ldi	r24, 0x08	; 8
     3aa:	80 93 ec 01 	sts	0x01EC, r24
		mob_number = mailbox;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 e3 02 	sts	0x02E3, r24
		message.pt_data = &data1[0];
     3b4:	84 ea       	ldi	r24, 0xA4	; 164
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	90 93 ee 01 	sts	0x01EE, r25
     3bc:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = SUB0_ID1;
     3c0:	85 e1       	ldi	r24, 0x15	; 21
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	90 93 e9 01 	sts	0x01E9, r25
     3c8:	80 93 e8 01 	sts	0x01E8, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3cc:	60 91 e3 02 	lds	r22, 0x02E3
     3d0:	86 ee       	ldi	r24, 0xE6	; 230
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     3d8:	81 11       	cpse	r24, r1
     3da:	f8 cf       	rjmp	.-16     	; 0x3cc <clean_up_msg+0x76>
     3dc:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     3de:	82 30       	cpi	r24, 0x02	; 2
     3e0:	09 f5       	brne	.+66     	; 0x424 <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3e2:	10 92 f1 01 	sts	0x01F1, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3e6:	85 e0       	ldi	r24, 0x05	; 5
     3e8:	80 93 e7 01 	sts	0x01E7, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3ec:	88 e0       	ldi	r24, 0x08	; 8
     3ee:	80 93 ec 01 	sts	0x01EC, r24
		mob_number = mailbox;
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	80 93 e3 02 	sts	0x02E3, r24
		message.pt_data = &data2[0];
     3f8:	8c ea       	ldi	r24, 0xAC	; 172
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	90 93 ee 01 	sts	0x01EE, r25
     400:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = id_array[2];
     404:	80 91 b7 02 	lds	r24, 0x02B7
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	90 93 e9 01 	sts	0x01E9, r25
     40e:	80 93 e8 01 	sts	0x01E8, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     412:	60 91 e3 02 	lds	r22, 0x02E3
     416:	86 ee       	ldi	r24, 0xE6	; 230
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     41e:	81 11       	cpse	r24, r1
     420:	f8 cf       	rjmp	.-16     	; 0x412 <clean_up_msg+0xbc>
     422:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     424:	83 30       	cpi	r24, 0x03	; 3
     426:	09 f5       	brne	.+66     	; 0x46a <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     428:	10 92 f1 01 	sts	0x01F1, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     42c:	85 e0       	ldi	r24, 0x05	; 5
     42e:	80 93 e7 01 	sts	0x01E7, r24
		message.dlc = 8;			 // Max length of a CAN message.
     432:	88 e0       	ldi	r24, 0x08	; 8
     434:	80 93 ec 01 	sts	0x01EC, r24
		mob_number = mailbox;
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	80 93 e3 02 	sts	0x02E3, r24
		message.pt_data = &data3[0];
     43e:	8d eb       	ldi	r24, 0xBD	; 189
     440:	92 e0       	ldi	r25, 0x02	; 2
     442:	90 93 ee 01 	sts	0x01EE, r25
     446:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = id_array[3];
     44a:	80 91 b8 02 	lds	r24, 0x02B8
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	90 93 e9 01 	sts	0x01E9, r25
     454:	80 93 e8 01 	sts	0x01E8, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     458:	60 91 e3 02 	lds	r22, 0x02E3
     45c:	86 ee       	ldi	r24, 0xE6	; 230
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     464:	81 11       	cpse	r24, r1
     466:	f8 cf       	rjmp	.-16     	; 0x458 <clean_up_msg+0x102>
     468:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     46a:	85 30       	cpi	r24, 0x05	; 5
     46c:	f1 f4       	brne	.+60     	; 0x4aa <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     46e:	10 92 f1 01 	sts	0x01F1, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     472:	80 93 e7 01 	sts	0x01E7, r24
		message.dlc = 8;			 // Max length of a CAN message.
     476:	98 e0       	ldi	r25, 0x08	; 8
     478:	90 93 ec 01 	sts	0x01EC, r25
		mob_number = mailbox;
     47c:	80 93 e3 02 	sts	0x02E3, r24
		message.pt_data = &data5[0];
     480:	87 ed       	ldi	r24, 0xD7	; 215
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	90 93 ee 01 	sts	0x01EE, r25
     488:	80 93 ed 01 	sts	0x01ED, r24
		message.id.std = id_array[5];
     48c:	80 91 ba 02 	lds	r24, 0x02BA
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	90 93 e9 01 	sts	0x01E9, r25
     496:	80 93 e8 01 	sts	0x01E8, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     49a:	60 91 e3 02 	lds	r22, 0x02E3
     49e:	86 ee       	ldi	r24, 0xE6	; 230
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     4a6:	81 11       	cpse	r24, r1
     4a8:	f8 cf       	rjmp	.-16     	; 0x49a <clean_up_msg+0x144>
     4aa:	08 95       	ret

000004ac <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     4b0:	85 e0       	ldi	r24, 0x05	; 5
     4b2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     4b6:	60 91 e3 02 	lds	r22, 0x02E3
     4ba:	86 ee       	ldi	r24, 0xE6	; 230
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 8d 0a 	call	0x151a	; 0x151a <can_get_status>
     4c2:	81 30       	cpi	r24, 0x01	; 1
     4c4:	11 f1       	breq	.+68     	; 0x50a <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     4c6:	80 91 ef 01 	lds	r24, 0x01EF
     4ca:	80 32       	cpi	r24, 0x20	; 32
     4cc:	d9 f4       	brne	.+54     	; 0x504 <can_check_housekeep+0x58>
     4ce:	a0 91 ed 01 	lds	r26, 0x01ED
     4d2:	b0 91 ee 01 	lds	r27, 0x01EE
     4d6:	c5 eb       	ldi	r28, 0xB5	; 181
     4d8:	d2 e0       	ldi	r29, 0x02	; 2
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     4da:	ed ea       	ldi	r30, 0xAD	; 173
     4dc:	f2 e0       	ldi	r31, 0x02	; 2
     4de:	8d 91       	ld	r24, X+
     4e0:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     4e2:	ec 17       	cp	r30, r28
     4e4:	fd 07       	cpc	r31, r29
     4e6:	d9 f7       	brne	.-10     	; 0x4de <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     4e8:	80 91 b3 02 	lds	r24, 0x02B3
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	21 f4       	brne	.+8      	; 0x4f8 <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     4f0:	8d ea       	ldi	r24, 0xAD	; 173
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	0e 94 b8 00 	call	0x170	; 0x170 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     4f8:	ed ea       	ldi	r30, 0xAD	; 173
     4fa:	f2 e0       	ldi	r31, 0x02	; 2
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     4fc:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     4fe:	ec 17       	cp	r30, r28
     500:	fd 07       	cpc	r31, r29
     502:	e1 f7       	brne	.-8      	; 0x4fc <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	0e 94 ab 01 	call	0x356	; 0x356 <clean_up_msg>
	}	
	return;
}
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <can_check_general>:
#include "can_api.h"

static void start_tm_packet(void);

void can_check_general(void)
{
     510:	9f 92       	push	r9
     512:	af 92       	push	r10
     514:	bf 92       	push	r11
     516:	cf 92       	push	r12
     518:	df 92       	push	r13
     51a:	ef 92       	push	r14
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     526:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     528:	0f ee       	ldi	r16, 0xEF	; 239
     52a:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     52c:	0f 2e       	mov	r0, r31
     52e:	fd ee       	ldi	r31, 0xED	; 237
     530:	af 2e       	mov	r10, r31
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	bf 2e       	mov	r11, r31
     536:	f0 2d       	mov	r31, r0
     538:	c5 eb       	ldi	r28, 0xB5	; 181
     53a:	d2 e0       	ldi	r29, 0x02	; 2
     53c:	0f 2e       	mov	r0, r31
     53e:	fd ea       	ldi	r31, 0xAD	; 173
     540:	ef 2e       	mov	r14, r31
     542:	f2 e0       	ldi	r31, 0x02	; 2
     544:	ff 2e       	mov	r15, r31
     546:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     548:	0f 2e       	mov	r0, r31
     54a:	f3 eb       	ldi	r31, 0xB3	; 179
     54c:	cf 2e       	mov	r12, r31
     54e:	f2 e0       	ldi	r31, 0x02	; 2
     550:	df 2e       	mov	r13, r31
     552:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     554:	89 2d       	mov	r24, r9
     556:	0e 94 51 01 	call	0x2a2	; 0x2a2 <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     55a:	60 91 e3 02 	lds	r22, 0x02E3
     55e:	86 ee       	ldi	r24, 0xE6	; 230
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 8d 0a 	call	0x151a	; 0x151a <can_get_status>
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	e1 f0       	breq	.+56     	; 0x5a2 <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     56a:	f8 01       	movw	r30, r16
     56c:	80 81       	ld	r24, Z
     56e:	80 32       	cpi	r24, 0x20	; 32
     570:	a9 f4       	brne	.+42     	; 0x59c <can_check_general+0x8c>
     572:	f5 01       	movw	r30, r10
     574:	a0 81       	ld	r26, Z
     576:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     578:	f7 01       	movw	r30, r14
     57a:	8d 91       	ld	r24, X+
     57c:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     57e:	ec 17       	cp	r30, r28
     580:	fd 07       	cpc	r31, r29
     582:	d9 f7       	brne	.-10     	; 0x57a <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     584:	f6 01       	movw	r30, r12
     586:	80 81       	ld	r24, Z
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	19 f4       	brne	.+6      	; 0x592 <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     58c:	c7 01       	movw	r24, r14
     58e:	0e 94 b8 00 	call	0x170	; 0x170 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     592:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     594:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     596:	ec 17       	cp	r30, r28
     598:	fd 07       	cpc	r31, r29
     59a:	e1 f7       	brne	.-8      	; 0x594 <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     59c:	89 2d       	mov	r24, r9
     59e:	0e 94 ab 01 	call	0x356	; 0x356 <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     5a2:	93 94       	inc	r9
     5a4:	f4 e0       	ldi	r31, 0x04	; 4
     5a6:	9f 12       	cpse	r9, r31
     5a8:	d5 cf       	rjmp	.-86     	; 0x554 <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     5aa:	0e 94 56 02 	call	0x4ac	; 0x4ac <can_check_housekeep>
	
	return;
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	1f 91       	pop	r17
     5b4:	0f 91       	pop	r16
     5b6:	ff 90       	pop	r15
     5b8:	ef 90       	pop	r14
     5ba:	df 90       	pop	r13
     5bc:	cf 90       	pop	r12
     5be:	bf 90       	pop	r11
     5c0:	af 90       	pop	r10
     5c2:	9f 90       	pop	r9
     5c4:	08 95       	ret

000005c6 <can_init_mobs>:
/*		This function initializes our can message objects with their ID	*/
/*		and sets whether or not they are in transmit mode or receive.	*/
/************************************************************************/

void can_init_mobs(void)
{
     5c6:	8f 92       	push	r8
     5c8:	9f 92       	push	r9
     5ca:	bf 92       	push	r11
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
		id_array[5] = SUB0_ID5;
	}
	
	if(SELF_ID == 1)
	{
		id_array[0] = SUB1_ID0;
     5dc:	8a e1       	ldi	r24, 0x1A	; 26
     5de:	80 93 b5 02 	sts	0x02B5, r24
		id_array[1] = SUB1_ID1;
     5e2:	8b e1       	ldi	r24, 0x1B	; 27
     5e4:	80 93 b6 02 	sts	0x02B6, r24
		id_array[2] = SUB1_ID2;
     5e8:	8c e1       	ldi	r24, 0x1C	; 28
     5ea:	80 93 b7 02 	sts	0x02B7, r24
		id_array[3] = SUB1_ID3;
     5ee:	8d e1       	ldi	r24, 0x1D	; 29
     5f0:	80 93 b8 02 	sts	0x02B8, r24
		id_array[4] = SUB1_ID4;
     5f4:	8e e1       	ldi	r24, 0x1E	; 30
     5f6:	80 93 b9 02 	sts	0x02B9, r24
		id_array[5] = SUB1_ID5;
     5fa:	8f e1       	ldi	r24, 0x1F	; 31
     5fc:	80 93 ba 02 	sts	0x02BA, r24
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     600:	8e e9       	ldi	r24, 0x9E	; 158
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	90 93 ee 01 	sts	0x01EE, r25
     608:	80 93 ed 01 	sts	0x01ED, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     60c:	10 92 f1 01 	sts	0x01F1, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     610:	8a e1       	ldi	r24, 0x1A	; 26
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	90 93 e9 01 	sts	0x01E9, r25
     618:	80 93 e8 01 	sts	0x01E8, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     61c:	85 e0       	ldi	r24, 0x05	; 5
     61e:	80 93 e7 01 	sts	0x01E7, r24
	message.dlc = 8;			 // Max length of a CAN message.
     622:	88 e0       	ldi	r24, 0x08	; 8
     624:	80 93 ec 01 	sts	0x01EC, r24
	mob_number = 0;
     628:	10 92 e3 02 	sts	0x02E3, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     62c:	60 91 e3 02 	lds	r22, 0x02E3
     630:	86 ee       	ldi	r24, 0xE6	; 230
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     638:	81 11       	cpse	r24, r1
     63a:	f8 cf       	rjmp	.-16     	; 0x62c <can_init_mobs+0x66>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     63c:	84 ea       	ldi	r24, 0xA4	; 164
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	90 93 ee 01 	sts	0x01EE, r25
     644:	80 93 ed 01 	sts	0x01ED, r24
	message.ctrl.ide = 0;
     648:	10 92 f1 01 	sts	0x01F1, r1
	message.id.std = id_array[1];
     64c:	80 91 b6 02 	lds	r24, 0x02B6
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	90 93 e9 01 	sts	0x01E9, r25
     656:	80 93 e8 01 	sts	0x01E8, r24
	message.cmd = CMD_RX_DATA;
     65a:	85 e0       	ldi	r24, 0x05	; 5
     65c:	80 93 e7 01 	sts	0x01E7, r24
	message.dlc = 8;
     660:	88 e0       	ldi	r24, 0x08	; 8
     662:	80 93 ec 01 	sts	0x01EC, r24
	mob_number = 1;
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	80 93 e3 02 	sts	0x02E3, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     66c:	60 91 e3 02 	lds	r22, 0x02E3
     670:	86 ee       	ldi	r24, 0xE6	; 230
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     678:	81 11       	cpse	r24, r1
     67a:	f8 cf       	rjmp	.-16     	; 0x66c <can_init_mobs+0xa6>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     67c:	8c ea       	ldi	r24, 0xAC	; 172
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	90 93 ee 01 	sts	0x01EE, r25
     684:	80 93 ed 01 	sts	0x01ED, r24
	message.ctrl.ide = 0;
     688:	10 92 f1 01 	sts	0x01F1, r1
	message.id.std = id_array[2];
     68c:	80 91 b7 02 	lds	r24, 0x02B7
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	90 93 e9 01 	sts	0x01E9, r25
     696:	80 93 e8 01 	sts	0x01E8, r24
	message.cmd = CMD_RX_DATA;
     69a:	85 e0       	ldi	r24, 0x05	; 5
     69c:	80 93 e7 01 	sts	0x01E7, r24
	message.dlc = 8;
     6a0:	88 e0       	ldi	r24, 0x08	; 8
     6a2:	80 93 ec 01 	sts	0x01EC, r24
	mob_number = 2;
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	80 93 e3 02 	sts	0x02E3, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     6ac:	60 91 e3 02 	lds	r22, 0x02E3
     6b0:	86 ee       	ldi	r24, 0xE6	; 230
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     6b8:	81 11       	cpse	r24, r1
     6ba:	f8 cf       	rjmp	.-16     	; 0x6ac <can_init_mobs+0xe6>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     6bc:	8d eb       	ldi	r24, 0xBD	; 189
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	90 93 ee 01 	sts	0x01EE, r25
     6c4:	80 93 ed 01 	sts	0x01ED, r24
	message.ctrl.ide = 0;
     6c8:	10 92 f1 01 	sts	0x01F1, r1
	message.id.std = id_array[3];
     6cc:	80 91 b8 02 	lds	r24, 0x02B8
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	90 93 e9 01 	sts	0x01E9, r25
     6d6:	80 93 e8 01 	sts	0x01E8, r24
	message.cmd = CMD_RX_DATA;
     6da:	85 e0       	ldi	r24, 0x05	; 5
     6dc:	80 93 e7 01 	sts	0x01E7, r24
	message.dlc = 8;
     6e0:	88 e0       	ldi	r24, 0x08	; 8
     6e2:	80 93 ec 01 	sts	0x01EC, r24
	mob_number = 3;
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	80 93 e3 02 	sts	0x02E3, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     6ec:	60 91 e3 02 	lds	r22, 0x02E3
     6f0:	86 ee       	ldi	r24, 0xE6	; 230
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     6f8:	81 11       	cpse	r24, r1
     6fa:	f8 cf       	rjmp	.-16     	; 0x6ec <can_init_mobs+0x126>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     6fc:	87 ed       	ldi	r24, 0xD7	; 215
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	90 93 ee 01 	sts	0x01EE, r25
     704:	80 93 ed 01 	sts	0x01ED, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     708:	10 92 f1 01 	sts	0x01F1, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     70c:	80 91 ba 02 	lds	r24, 0x02BA
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	90 93 e9 01 	sts	0x01E9, r25
     716:	80 93 e8 01 	sts	0x01E8, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     71a:	85 e0       	ldi	r24, 0x05	; 5
     71c:	80 93 e7 01 	sts	0x01E7, r24
	message.dlc = 8;				// Max length of a CAN message.
     720:	98 e0       	ldi	r25, 0x08	; 8
     722:	90 93 ec 01 	sts	0x01EC, r25
	mob_number = 5;
     726:	80 93 e3 02 	sts	0x02E3, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     72a:	60 91 e3 02 	lds	r22, 0x02E3
     72e:	86 ee       	ldi	r24, 0xE6	; 230
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 61 04 	call	0x8c2	; 0x8c2 <can_cmd>
     736:	81 11       	cpse	r24, r1
     738:	f8 cf       	rjmp	.-16     	; 0x72a <can_init_mobs+0x164>
     73a:	0f 2e       	mov	r0, r31
     73c:	fd ea       	ldi	r31, 0xAD	; 173
     73e:	cf 2e       	mov	r12, r31
     740:	f2 e0       	ldi	r31, 0x02	; 2
     742:	df 2e       	mov	r13, r31
     744:	f0 2d       	mov	r31, r0
     746:	0f 2e       	mov	r0, r31
     748:	f5 eb       	ldi	r31, 0xB5	; 181
     74a:	ef 2e       	mov	r14, r31
     74c:	f1 e0       	ldi	r31, 0x01	; 1
     74e:	ff 2e       	mov	r15, r31
     750:	f0 2d       	mov	r31, r0
     752:	01 e9       	ldi	r16, 0x91	; 145
     754:	13 e0       	ldi	r17, 0x03	; 3
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	71 e0       	ldi	r23, 0x01	; 1
     75a:	42 ef       	ldi	r20, 0xF2	; 242
     75c:	51 e0       	ldi	r21, 0x01	; 1
     75e:	28 ed       	ldi	r18, 0xD8	; 216
     760:	31 e0       	ldi	r19, 0x01	; 1
     762:	84 ef       	ldi	r24, 0xF4	; 244
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	cb ec       	ldi	r28, 0xCB	; 203
     768:	d1 e0       	ldi	r29, 0x01	; 1
     76a:	ab ec       	ldi	r26, 0xCB	; 203
     76c:	b2 e0       	ldi	r27, 0x02	; 2
     76e:	0f 2e       	mov	r0, r31
     770:	fa ee       	ldi	r31, 0xEA	; 234
     772:	8f 2e       	mov	r8, r31
     774:	f2 e0       	ldi	r31, 0x02	; 2
     776:	9f 2e       	mov	r9, r31
     778:	f0 2d       	mov	r31, r0
     77a:	68 94       	set
     77c:	bb 24       	eor	r11, r11
     77e:	b3 f8       	bld	r11, 3
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     780:	f6 01       	movw	r30, r12
     782:	11 92       	st	Z+, r1
     784:	6f 01       	movw	r12, r30
		send_arr[i] = 0;
     786:	f7 01       	movw	r30, r14
     788:	11 92       	st	Z+, r1
     78a:	7f 01       	movw	r14, r30
		read_arr[i] = 0;
     78c:	f8 01       	movw	r30, r16
     78e:	11 92       	st	Z+, r1
     790:	8f 01       	movw	r16, r30
		write_arr[i] = 0;
     792:	fb 01       	movw	r30, r22
     794:	11 92       	st	Z+, r1
     796:	bf 01       	movw	r22, r30
		data_req_arr[i] = 0;
     798:	fa 01       	movw	r30, r20
     79a:	11 92       	st	Z+, r1
     79c:	af 01       	movw	r20, r30
		sensh_arr[i] = 0;
     79e:	f9 01       	movw	r30, r18
     7a0:	11 92       	st	Z+, r1
     7a2:	9f 01       	movw	r18, r30
		sensl_arr[i] = 0;
     7a4:	fc 01       	movw	r30, r24
     7a6:	11 92       	st	Z+, r1
     7a8:	cf 01       	movw	r24, r30
		setv_arr[i] = 0;
     7aa:	19 92       	st	Y+, r1
		new_tm_msg[i] = 0;
     7ac:	1d 92       	st	X+, r1
		new_tc_msg[i] = 0;
     7ae:	f4 01       	movw	r30, r8
     7b0:	11 92       	st	Z+, r1
     7b2:	4f 01       	movw	r8, r30
     7b4:	ba 94       	dec	r11
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     7b6:	21 f7       	brne	.-56     	; 0x780 <can_init_mobs+0x1ba>
     7b8:	ee e0       	ldi	r30, 0x0E	; 14
     7ba:	f2 e0       	ldi	r31, 0x02	; 2
     7bc:	af ef       	ldi	r26, 0xFF	; 255
     7be:	b2 e0       	ldi	r27, 0x02	; 2
     7c0:	8d e9       	ldi	r24, 0x9D	; 157
     7c2:	92 e0       	ldi	r25, 0x02	; 2
		new_tc_msg[i] = 0;
	}
	
	for (i = 0; i < 143; i++)		// Initialize the TM/TC Packet arrays.
	{
		current_tm[i] = 0;
     7c4:	11 92       	st	Z+, r1
		current_tc[i] = 0;
     7c6:	1d 92       	st	X+, r1
		setv_arr[i] = 0;
		new_tm_msg[i] = 0;
		new_tc_msg[i] = 0;
	}
	
	for (i = 0; i < 143; i++)		// Initialize the TM/TC Packet arrays.
     7c8:	e8 17       	cp	r30, r24
     7ca:	f9 07       	cpc	r31, r25
     7cc:	d9 f7       	brne	.-10     	; 0x7c4 <can_init_mobs+0x1fe>
		current_tm[i] = 0;
		current_tc[i] = 0;
	}
	
	/* Initialize Global Command Flags to zero */
	send_now = 0;
     7ce:	10 92 03 02 	sts	0x0203, r1
	send_hk = 0;
     7d2:	10 92 a6 02 	sts	0x02A6, r1
	send_data = 0;
     7d6:	10 92 c8 02 	sts	0x02C8, r1
	read_response = 0;
     7da:	10 92 0d 02 	sts	0x020D, r1
	write_response = 0;
     7de:	10 92 d7 01 	sts	0x01D7, r1
	set_sens_h = 0;
     7e2:	10 92 c5 02 	sts	0x02C5, r1
	set_sens_l = 0;
     7e6:	10 92 ca 02 	sts	0x02CA, r1
	set_varf = 0;
     7ea:	10 92 c9 02 	sts	0x02C9, r1
	new_tm_msgf = 0;
     7ee:	10 92 04 02 	sts	0x0204, r1
	tm_sequence_count = 0;
     7f2:	10 92 00 01 	sts	0x0100, r1
	current_tm_fullf = 0;
     7f6:	10 92 c7 02 	sts	0x02C7, r1
	tc_packet_readyf = 0;
     7fa:	10 92 c6 02 	sts	0x02C6, r1
	tc_transfer_completef = 0;
     7fe:	10 92 e3 01 	sts	0x01E3, r1
	start_tc_transferf = 0;
     802:	10 92 e2 01 	sts	0x01E2, r1
	receiving_tmf = 0;
     806:	10 92 e9 02 	sts	0x02E9, r1
	
	return;
}
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	df 90       	pop	r13
     818:	cf 90       	pop	r12
     81a:	bf 90       	pop	r11
     81c:	9f 90       	pop	r9
     81e:	8f 90       	pop	r8
     820:	08 95       	ret

00000822 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     822:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     824:	ad ee       	ldi	r26, 0xED	; 237
     826:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     828:	3e ee       	ldi	r19, 0xEE	; 238
     82a:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     82c:	98 2f       	mov	r25, r24
     82e:	92 95       	swap	r25
     830:	90 7f       	andi	r25, 0xF0	; 240
     832:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     834:	e3 2f       	mov	r30, r19
     836:	f2 2f       	mov	r31, r18
     838:	11 92       	st	Z+, r1
     83a:	e8 3f       	cpi	r30, 0xF8	; 248
     83c:	f1 05       	cpc	r31, r1
     83e:	e1 f7       	brne	.-8      	; 0x838 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     840:	8f 5f       	subi	r24, 0xFF	; 255
     842:	86 30       	cpi	r24, 0x06	; 6
     844:	99 f7       	brne	.-26     	; 0x82c <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     846:	08 95       	ret

00000848 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     848:	80 91 ef 00 	lds	r24, 0x00EF
     84c:	80 7c       	andi	r24, 0xC0	; 192
     84e:	61 f0       	breq	.+24     	; 0x868 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     850:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     854:	98 2f       	mov	r25, r24
     856:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     858:	28 2f       	mov	r18, r24
     85a:	20 76       	andi	r18, 0x60	; 96
     85c:	20 32       	cpi	r18, 0x20	; 32
     85e:	31 f0       	breq	.+12     	; 0x86c <can_get_mob_status+0x24>
     860:	90 34       	cpi	r25, 0x40	; 64
     862:	31 f0       	breq	.+12     	; 0x870 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     864:	8f 71       	andi	r24, 0x1F	; 31
     866:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     868:	8f ef       	ldi	r24, 0xFF	; 255
     86a:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     86c:	89 2f       	mov	r24, r25
     86e:	08 95       	ret
     870:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     872:	08 95       	ret

00000874 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     874:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     876:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     878:	aa ef       	ldi	r26, 0xFA	; 250
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	9c 91       	ld	r25, X
     87e:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     880:	8f 5f       	subi	r24, 0xFF	; 255
     882:	88 30       	cpi	r24, 0x08	; 8
     884:	d9 f7       	brne	.-10     	; 0x87c <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     886:	08 95       	ret

00000888 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	80 93 e2 00 	sts	0x00E2, r24
     894:	8c e0       	ldi	r24, 0x0C	; 12
     896:	80 93 e3 00 	sts	0x00E3, r24
     89a:	87 e3       	ldi	r24, 0x37	; 55
     89c:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	08 95       	ret

000008a4 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     8a4:	0e 94 44 04 	call	0x888	; 0x888 <can_fixed_baudrate>
     8a8:	88 23       	and	r24, r24
     8aa:	49 f0       	breq	.+18     	; 0x8be <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     8ac:	0e 94 11 04 	call	0x822	; 0x822 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     8b0:	e8 ed       	ldi	r30, 0xD8	; 216
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	82 60       	ori	r24, 0x02	; 2
     8b8:	80 83       	st	Z, r24
    return (1);
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     8be:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     8c0:	08 95       	ret

000008c2 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	1f 92       	push	r1
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
     8cc:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     8ce:	11 96       	adiw	r26, 0x01	; 1
     8d0:	8c 91       	ld	r24, X
     8d2:	11 97       	sbiw	r26, 0x01	; 1
     8d4:	8c 30       	cpi	r24, 0x0C	; 12
     8d6:	b1 f4       	brne	.+44     	; 0x904 <__stack+0x5>
  {
    if (cmd->status == MOB_PENDING)
     8d8:	19 96       	adiw	r26, 0x09	; 9
     8da:	8c 91       	ld	r24, X
     8dc:	19 97       	sbiw	r26, 0x09	; 9
     8de:	80 36       	cpi	r24, 0x60	; 96
     8e0:	69 f4       	brne	.+26     	; 0x8fc <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     8e2:	86 2f       	mov	r24, r22
     8e4:	82 95       	swap	r24
     8e6:	80 7f       	andi	r24, 0xF0	; 240
     8e8:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     8ec:	ef ee       	ldi	r30, 0xEF	; 239
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	8f 73       	andi	r24, 0x3F	; 63
     8f4:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     8f6:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     8fa:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     8fc:	19 96       	adiw	r26, 0x09	; 9
     8fe:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	07 c6       	rjmp	.+3086   	; 0x1512 <__stack+0xc13>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     904:	86 2f       	mov	r24, r22
     906:	82 95       	swap	r24
     908:	80 7f       	andi	r24, 0xF0	; 240
     90a:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     90e:	80 91 ef 00 	lds	r24, 0x00EF
     912:	80 7c       	andi	r24, 0xC0	; 192
     914:	09 f0       	breq	.+2      	; 0x918 <__stack+0x19>
     916:	f9 c5       	rjmp	.+3058   	; 0x150a <__stack+0xc0b>
    {
      cmd->status = MOB_PENDING; 
     918:	80 e6       	ldi	r24, 0x60	; 96
     91a:	19 96       	adiw	r26, 0x09	; 9
     91c:	8c 93       	st	X, r24
     91e:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     920:	6c 93       	st	X, r22
      Can_clear_mob();
     922:	ee ee       	ldi	r30, 0xEE	; 238
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	11 92       	st	Z+, r1
     928:	e8 3f       	cpi	r30, 0xF8	; 248
     92a:	f1 05       	cpc	r31, r1
     92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0x27>
          
      switch (cmd->cmd)
     92e:	11 96       	adiw	r26, 0x01	; 1
     930:	4c 91       	ld	r20, X
     932:	11 97       	sbiw	r26, 0x01	; 1
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	fa 01       	movw	r30, r20
     938:	31 97       	sbiw	r30, 0x01	; 1
     93a:	eb 30       	cpi	r30, 0x0B	; 11
     93c:	f1 05       	cpc	r31, r1
     93e:	08 f0       	brcs	.+2      	; 0x942 <__stack+0x43>
     940:	e0 c5       	rjmp	.+3008   	; 0x1502 <__stack+0xc03>
     942:	ee 5a       	subi	r30, 0xAE	; 174
     944:	ff 4f       	sbci	r31, 0xFF	; 255
     946:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     94a:	16 96       	adiw	r26, 0x06	; 6
     94c:	8c 91       	ld	r24, X
     94e:	16 97       	sbiw	r26, 0x06	; 6
     950:	81 11       	cpse	r24, r1
     952:	b7 c4       	rjmp	.+2414   	; 0x12c2 <__stack+0x9c3>
     954:	c8 c4       	rjmp	.+2448   	; 0x12e6 <__stack+0x9e7>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     956:	1b 96       	adiw	r26, 0x0b	; 11
     958:	8c 91       	ld	r24, X
     95a:	1b 97       	sbiw	r26, 0x0b	; 11
     95c:	88 23       	and	r24, r24
     95e:	d9 f1       	breq	.+118    	; 0x9d6 <__stack+0xd7>
     960:	14 96       	adiw	r26, 0x04	; 4
     962:	9c 91       	ld	r25, X
     964:	14 97       	sbiw	r26, 0x04	; 4
     966:	92 95       	swap	r25
     968:	96 95       	lsr	r25
     96a:	97 70       	andi	r25, 0x07	; 7
     96c:	15 96       	adiw	r26, 0x05	; 5
     96e:	8c 91       	ld	r24, X
     970:	15 97       	sbiw	r26, 0x05	; 5
     972:	88 0f       	add	r24, r24
     974:	88 0f       	add	r24, r24
     976:	88 0f       	add	r24, r24
     978:	89 0f       	add	r24, r25
     97a:	80 93 f3 00 	sts	0x00F3, r24
     97e:	13 96       	adiw	r26, 0x03	; 3
     980:	9c 91       	ld	r25, X
     982:	13 97       	sbiw	r26, 0x03	; 3
     984:	92 95       	swap	r25
     986:	96 95       	lsr	r25
     988:	97 70       	andi	r25, 0x07	; 7
     98a:	14 96       	adiw	r26, 0x04	; 4
     98c:	8c 91       	ld	r24, X
     98e:	14 97       	sbiw	r26, 0x04	; 4
     990:	88 0f       	add	r24, r24
     992:	88 0f       	add	r24, r24
     994:	88 0f       	add	r24, r24
     996:	89 0f       	add	r24, r25
     998:	80 93 f2 00 	sts	0x00F2, r24
     99c:	12 96       	adiw	r26, 0x02	; 2
     99e:	9c 91       	ld	r25, X
     9a0:	12 97       	sbiw	r26, 0x02	; 2
     9a2:	92 95       	swap	r25
     9a4:	96 95       	lsr	r25
     9a6:	97 70       	andi	r25, 0x07	; 7
     9a8:	13 96       	adiw	r26, 0x03	; 3
     9aa:	8c 91       	ld	r24, X
     9ac:	13 97       	sbiw	r26, 0x03	; 3
     9ae:	88 0f       	add	r24, r24
     9b0:	88 0f       	add	r24, r24
     9b2:	88 0f       	add	r24, r24
     9b4:	89 0f       	add	r24, r25
     9b6:	80 93 f1 00 	sts	0x00F1, r24
     9ba:	12 96       	adiw	r26, 0x02	; 2
     9bc:	8c 91       	ld	r24, X
     9be:	12 97       	sbiw	r26, 0x02	; 2
     9c0:	88 0f       	add	r24, r24
     9c2:	88 0f       	add	r24, r24
     9c4:	88 0f       	add	r24, r24
     9c6:	80 93 f0 00 	sts	0x00F0, r24
     9ca:	ef ee       	ldi	r30, 0xEF	; 239
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	80 61       	ori	r24, 0x10	; 16
     9d2:	80 83       	st	Z, r24
     9d4:	1c c0       	rjmp	.+56     	; 0xa0e <__stack+0x10f>
          else              { Can_set_std_id(cmd->id.std);}
     9d6:	12 96       	adiw	r26, 0x02	; 2
     9d8:	8c 91       	ld	r24, X
     9da:	12 97       	sbiw	r26, 0x02	; 2
     9dc:	86 95       	lsr	r24
     9de:	86 95       	lsr	r24
     9e0:	86 95       	lsr	r24
     9e2:	13 96       	adiw	r26, 0x03	; 3
     9e4:	9c 91       	ld	r25, X
     9e6:	13 97       	sbiw	r26, 0x03	; 3
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	92 9f       	mul	r25, r18
     9ec:	80 0d       	add	r24, r0
     9ee:	11 24       	eor	r1, r1
     9f0:	80 93 f3 00 	sts	0x00F3, r24
     9f4:	12 96       	adiw	r26, 0x02	; 2
     9f6:	8c 91       	ld	r24, X
     9f8:	12 97       	sbiw	r26, 0x02	; 2
     9fa:	82 95       	swap	r24
     9fc:	88 0f       	add	r24, r24
     9fe:	80 7e       	andi	r24, 0xE0	; 224
     a00:	80 93 f2 00 	sts	0x00F2, r24
     a04:	ef ee       	ldi	r30, 0xEF	; 239
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	8f 7e       	andi	r24, 0xEF	; 239
     a0c:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     a0e:	16 96       	adiw	r26, 0x06	; 6
     a10:	8c 91       	ld	r24, X
     a12:	16 97       	sbiw	r26, 0x06	; 6
     a14:	88 23       	and	r24, r24
     a16:	91 f0       	breq	.+36     	; 0xa3c <__stack+0x13d>
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	8a ef       	ldi	r24, 0xFA	; 250
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	17 96       	adiw	r26, 0x07	; 7
     a20:	ed 91       	ld	r30, X+
     a22:	fc 91       	ld	r31, X
     a24:	18 97       	sbiw	r26, 0x08	; 8
     a26:	e2 0f       	add	r30, r18
     a28:	f1 1d       	adc	r31, r1
     a2a:	30 81       	ld	r19, Z
     a2c:	fc 01       	movw	r30, r24
     a2e:	30 83       	st	Z, r19
     a30:	2f 5f       	subi	r18, 0xFF	; 255
     a32:	16 96       	adiw	r26, 0x06	; 6
     a34:	3c 91       	ld	r19, X
     a36:	16 97       	sbiw	r26, 0x06	; 6
     a38:	23 17       	cp	r18, r19
     a3a:	88 f3       	brcs	.-30     	; 0xa1e <__stack+0x11f>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     a3c:	1a 96       	adiw	r26, 0x0a	; 10
     a3e:	8c 91       	ld	r24, X
     a40:	1a 97       	sbiw	r26, 0x0a	; 10
     a42:	88 23       	and	r24, r24
     a44:	31 f0       	breq	.+12     	; 0xa52 <__stack+0x153>
     a46:	e0 ef       	ldi	r30, 0xF0	; 240
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	84 60       	ori	r24, 0x04	; 4
     a4e:	80 83       	st	Z, r24
     a50:	05 c0       	rjmp	.+10     	; 0xa5c <__stack+0x15d>
            else Can_clear_rtr();    
     a52:	e0 ef       	ldi	r30, 0xF0	; 240
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	8b 7f       	andi	r24, 0xFB	; 251
     a5a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     a5c:	ef ee       	ldi	r30, 0xEF	; 239
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	90 81       	ld	r25, Z
     a62:	16 96       	adiw	r26, 0x06	; 6
     a64:	8c 91       	ld	r24, X
     a66:	89 2b       	or	r24, r25
     a68:	80 83       	st	Z, r24
          Can_config_tx();
     a6a:	80 81       	ld	r24, Z
     a6c:	8f 73       	andi	r24, 0x3F	; 63
     a6e:	80 83       	st	Z, r24
     a70:	80 81       	ld	r24, Z
     a72:	80 64       	ori	r24, 0x40	; 64
     a74:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a76:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a78:	4c c5       	rjmp	.+2712   	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a7a:	1b 96       	adiw	r26, 0x0b	; 11
     a7c:	8c 91       	ld	r24, X
     a7e:	1b 97       	sbiw	r26, 0x0b	; 11
     a80:	88 23       	and	r24, r24
     a82:	d9 f1       	breq	.+118    	; 0xafa <__stack+0x1fb>
     a84:	14 96       	adiw	r26, 0x04	; 4
     a86:	9c 91       	ld	r25, X
     a88:	14 97       	sbiw	r26, 0x04	; 4
     a8a:	92 95       	swap	r25
     a8c:	96 95       	lsr	r25
     a8e:	97 70       	andi	r25, 0x07	; 7
     a90:	15 96       	adiw	r26, 0x05	; 5
     a92:	8c 91       	ld	r24, X
     a94:	15 97       	sbiw	r26, 0x05	; 5
     a96:	88 0f       	add	r24, r24
     a98:	88 0f       	add	r24, r24
     a9a:	88 0f       	add	r24, r24
     a9c:	89 0f       	add	r24, r25
     a9e:	80 93 f3 00 	sts	0x00F3, r24
     aa2:	13 96       	adiw	r26, 0x03	; 3
     aa4:	9c 91       	ld	r25, X
     aa6:	13 97       	sbiw	r26, 0x03	; 3
     aa8:	92 95       	swap	r25
     aaa:	96 95       	lsr	r25
     aac:	97 70       	andi	r25, 0x07	; 7
     aae:	14 96       	adiw	r26, 0x04	; 4
     ab0:	8c 91       	ld	r24, X
     ab2:	14 97       	sbiw	r26, 0x04	; 4
     ab4:	88 0f       	add	r24, r24
     ab6:	88 0f       	add	r24, r24
     ab8:	88 0f       	add	r24, r24
     aba:	89 0f       	add	r24, r25
     abc:	80 93 f2 00 	sts	0x00F2, r24
     ac0:	12 96       	adiw	r26, 0x02	; 2
     ac2:	9c 91       	ld	r25, X
     ac4:	12 97       	sbiw	r26, 0x02	; 2
     ac6:	92 95       	swap	r25
     ac8:	96 95       	lsr	r25
     aca:	97 70       	andi	r25, 0x07	; 7
     acc:	13 96       	adiw	r26, 0x03	; 3
     ace:	8c 91       	ld	r24, X
     ad0:	13 97       	sbiw	r26, 0x03	; 3
     ad2:	88 0f       	add	r24, r24
     ad4:	88 0f       	add	r24, r24
     ad6:	88 0f       	add	r24, r24
     ad8:	89 0f       	add	r24, r25
     ada:	80 93 f1 00 	sts	0x00F1, r24
     ade:	12 96       	adiw	r26, 0x02	; 2
     ae0:	8c 91       	ld	r24, X
     ae2:	12 97       	sbiw	r26, 0x02	; 2
     ae4:	88 0f       	add	r24, r24
     ae6:	88 0f       	add	r24, r24
     ae8:	88 0f       	add	r24, r24
     aea:	80 93 f0 00 	sts	0x00F0, r24
     aee:	ef ee       	ldi	r30, 0xEF	; 239
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	80 61       	ori	r24, 0x10	; 16
     af6:	80 83       	st	Z, r24
     af8:	1c c0       	rjmp	.+56     	; 0xb32 <__stack+0x233>
          else              { Can_set_std_id(cmd->id.std);}
     afa:	12 96       	adiw	r26, 0x02	; 2
     afc:	8c 91       	ld	r24, X
     afe:	12 97       	sbiw	r26, 0x02	; 2
     b00:	86 95       	lsr	r24
     b02:	86 95       	lsr	r24
     b04:	86 95       	lsr	r24
     b06:	13 96       	adiw	r26, 0x03	; 3
     b08:	9c 91       	ld	r25, X
     b0a:	13 97       	sbiw	r26, 0x03	; 3
     b0c:	f0 e2       	ldi	r31, 0x20	; 32
     b0e:	9f 9f       	mul	r25, r31
     b10:	80 0d       	add	r24, r0
     b12:	11 24       	eor	r1, r1
     b14:	80 93 f3 00 	sts	0x00F3, r24
     b18:	12 96       	adiw	r26, 0x02	; 2
     b1a:	8c 91       	ld	r24, X
     b1c:	12 97       	sbiw	r26, 0x02	; 2
     b1e:	82 95       	swap	r24
     b20:	88 0f       	add	r24, r24
     b22:	80 7e       	andi	r24, 0xE0	; 224
     b24:	80 93 f2 00 	sts	0x00F2, r24
     b28:	ef ee       	ldi	r30, 0xEF	; 239
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	8f 7e       	andi	r24, 0xEF	; 239
     b30:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     b32:	16 96       	adiw	r26, 0x06	; 6
     b34:	8c 91       	ld	r24, X
     b36:	16 97       	sbiw	r26, 0x06	; 6
     b38:	88 23       	and	r24, r24
     b3a:	91 f0       	breq	.+36     	; 0xb60 <__stack+0x261>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	8a ef       	ldi	r24, 0xFA	; 250
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	17 96       	adiw	r26, 0x07	; 7
     b44:	ed 91       	ld	r30, X+
     b46:	fc 91       	ld	r31, X
     b48:	18 97       	sbiw	r26, 0x08	; 8
     b4a:	e2 0f       	add	r30, r18
     b4c:	f1 1d       	adc	r31, r1
     b4e:	30 81       	ld	r19, Z
     b50:	fc 01       	movw	r30, r24
     b52:	30 83       	st	Z, r19
     b54:	2f 5f       	subi	r18, 0xFF	; 255
     b56:	16 96       	adiw	r26, 0x06	; 6
     b58:	3c 91       	ld	r19, X
     b5a:	16 97       	sbiw	r26, 0x06	; 6
     b5c:	23 17       	cp	r18, r19
     b5e:	88 f3       	brcs	.-30     	; 0xb42 <__stack+0x243>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     b60:	1a 96       	adiw	r26, 0x0a	; 10
     b62:	1c 92       	st	X, r1
     b64:	1a 97       	sbiw	r26, 0x0a	; 10
     b66:	e0 ef       	ldi	r30, 0xF0	; 240
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8b 7f       	andi	r24, 0xFB	; 251
     b6e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     b70:	ef ee       	ldi	r30, 0xEF	; 239
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	90 81       	ld	r25, Z
     b76:	16 96       	adiw	r26, 0x06	; 6
     b78:	8c 91       	ld	r24, X
     b7a:	89 2b       	or	r24, r25
     b7c:	80 83       	st	Z, r24
          Can_config_tx();
     b7e:	80 81       	ld	r24, Z
     b80:	8f 73       	andi	r24, 0x3F	; 63
     b82:	80 83       	st	Z, r24
     b84:	80 81       	ld	r24, Z
     b86:	80 64       	ori	r24, 0x40	; 64
     b88:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b8a:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     b8c:	c2 c4       	rjmp	.+2436   	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b8e:	1b 96       	adiw	r26, 0x0b	; 11
     b90:	8c 91       	ld	r24, X
     b92:	1b 97       	sbiw	r26, 0x0b	; 11
     b94:	88 23       	and	r24, r24
     b96:	d9 f1       	breq	.+118    	; 0xc0e <__stack+0x30f>
     b98:	14 96       	adiw	r26, 0x04	; 4
     b9a:	9c 91       	ld	r25, X
     b9c:	14 97       	sbiw	r26, 0x04	; 4
     b9e:	92 95       	swap	r25
     ba0:	96 95       	lsr	r25
     ba2:	97 70       	andi	r25, 0x07	; 7
     ba4:	15 96       	adiw	r26, 0x05	; 5
     ba6:	8c 91       	ld	r24, X
     ba8:	15 97       	sbiw	r26, 0x05	; 5
     baa:	88 0f       	add	r24, r24
     bac:	88 0f       	add	r24, r24
     bae:	88 0f       	add	r24, r24
     bb0:	89 0f       	add	r24, r25
     bb2:	80 93 f3 00 	sts	0x00F3, r24
     bb6:	13 96       	adiw	r26, 0x03	; 3
     bb8:	9c 91       	ld	r25, X
     bba:	13 97       	sbiw	r26, 0x03	; 3
     bbc:	92 95       	swap	r25
     bbe:	96 95       	lsr	r25
     bc0:	97 70       	andi	r25, 0x07	; 7
     bc2:	14 96       	adiw	r26, 0x04	; 4
     bc4:	8c 91       	ld	r24, X
     bc6:	14 97       	sbiw	r26, 0x04	; 4
     bc8:	88 0f       	add	r24, r24
     bca:	88 0f       	add	r24, r24
     bcc:	88 0f       	add	r24, r24
     bce:	89 0f       	add	r24, r25
     bd0:	80 93 f2 00 	sts	0x00F2, r24
     bd4:	12 96       	adiw	r26, 0x02	; 2
     bd6:	9c 91       	ld	r25, X
     bd8:	12 97       	sbiw	r26, 0x02	; 2
     bda:	92 95       	swap	r25
     bdc:	96 95       	lsr	r25
     bde:	97 70       	andi	r25, 0x07	; 7
     be0:	13 96       	adiw	r26, 0x03	; 3
     be2:	8c 91       	ld	r24, X
     be4:	13 97       	sbiw	r26, 0x03	; 3
     be6:	88 0f       	add	r24, r24
     be8:	88 0f       	add	r24, r24
     bea:	88 0f       	add	r24, r24
     bec:	89 0f       	add	r24, r25
     bee:	80 93 f1 00 	sts	0x00F1, r24
     bf2:	12 96       	adiw	r26, 0x02	; 2
     bf4:	8c 91       	ld	r24, X
     bf6:	12 97       	sbiw	r26, 0x02	; 2
     bf8:	88 0f       	add	r24, r24
     bfa:	88 0f       	add	r24, r24
     bfc:	88 0f       	add	r24, r24
     bfe:	80 93 f0 00 	sts	0x00F0, r24
     c02:	ef ee       	ldi	r30, 0xEF	; 239
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 61       	ori	r24, 0x10	; 16
     c0a:	80 83       	st	Z, r24
     c0c:	1c c0       	rjmp	.+56     	; 0xc46 <__stack+0x347>
          else              { Can_set_std_id(cmd->id.std);}
     c0e:	12 96       	adiw	r26, 0x02	; 2
     c10:	8c 91       	ld	r24, X
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	86 95       	lsr	r24
     c16:	86 95       	lsr	r24
     c18:	86 95       	lsr	r24
     c1a:	13 96       	adiw	r26, 0x03	; 3
     c1c:	9c 91       	ld	r25, X
     c1e:	13 97       	sbiw	r26, 0x03	; 3
     c20:	f0 e2       	ldi	r31, 0x20	; 32
     c22:	9f 9f       	mul	r25, r31
     c24:	80 0d       	add	r24, r0
     c26:	11 24       	eor	r1, r1
     c28:	80 93 f3 00 	sts	0x00F3, r24
     c2c:	12 96       	adiw	r26, 0x02	; 2
     c2e:	8c 91       	ld	r24, X
     c30:	12 97       	sbiw	r26, 0x02	; 2
     c32:	82 95       	swap	r24
     c34:	88 0f       	add	r24, r24
     c36:	80 7e       	andi	r24, 0xE0	; 224
     c38:	80 93 f2 00 	sts	0x00F2, r24
     c3c:	ef ee       	ldi	r30, 0xEF	; 239
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	8f 7e       	andi	r24, 0xEF	; 239
     c44:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	1a 96       	adiw	r26, 0x0a	; 10
     c4a:	8c 93       	st	X, r24
     c4c:	1a 97       	sbiw	r26, 0x0a	; 10
     c4e:	e0 ef       	ldi	r30, 0xF0	; 240
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	84 60       	ori	r24, 0x04	; 4
     c56:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     c58:	ef ee       	ldi	r30, 0xEF	; 239
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	90 81       	ld	r25, Z
     c5e:	16 96       	adiw	r26, 0x06	; 6
     c60:	8c 91       	ld	r24, X
     c62:	89 2b       	or	r24, r25
     c64:	80 83       	st	Z, r24
          Can_config_tx();
     c66:	80 81       	ld	r24, Z
     c68:	8f 73       	andi	r24, 0x3F	; 63
     c6a:	80 83       	st	Z, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	80 64       	ori	r24, 0x40	; 64
     c70:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c72:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     c74:	4e c4       	rjmp	.+2204   	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     c76:	19 82       	std	Y+1, r1	; 0x01
     c78:	9b 81       	ldd	r25, Y+3	; 0x03
     c7a:	92 95       	swap	r25
     c7c:	96 95       	lsr	r25
     c7e:	97 70       	andi	r25, 0x07	; 7
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
     c82:	88 0f       	add	r24, r24
     c84:	88 0f       	add	r24, r24
     c86:	88 0f       	add	r24, r24
     c88:	89 0f       	add	r24, r25
     c8a:	80 93 f7 00 	sts	0x00F7, r24
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	92 95       	swap	r25
     c92:	96 95       	lsr	r25
     c94:	97 70       	andi	r25, 0x07	; 7
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	88 0f       	add	r24, r24
     c9a:	88 0f       	add	r24, r24
     c9c:	88 0f       	add	r24, r24
     c9e:	89 0f       	add	r24, r25
     ca0:	80 93 f6 00 	sts	0x00F6, r24
     ca4:	99 81       	ldd	r25, Y+1	; 0x01
     ca6:	92 95       	swap	r25
     ca8:	96 95       	lsr	r25
     caa:	97 70       	andi	r25, 0x07	; 7
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	88 0f       	add	r24, r24
     cb0:	88 0f       	add	r24, r24
     cb2:	88 0f       	add	r24, r24
     cb4:	89 0f       	add	r24, r25
     cb6:	80 93 f5 00 	sts	0x00F5, r24
     cba:	29 81       	ldd	r18, Y+1	; 0x01
     cbc:	22 0f       	add	r18, r18
     cbe:	22 0f       	add	r18, r18
     cc0:	22 0f       	add	r18, r18
     cc2:	84 ef       	ldi	r24, 0xF4	; 244
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     cca:	ef ee       	ldi	r30, 0xEF	; 239
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	30 81       	ld	r19, Z
     cd0:	16 96       	adiw	r26, 0x06	; 6
     cd2:	2c 91       	ld	r18, X
     cd4:	23 2b       	or	r18, r19
     cd6:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     cd8:	dc 01       	movw	r26, r24
     cda:	2c 91       	ld	r18, X
     cdc:	2b 7f       	andi	r18, 0xFB	; 251
     cde:	2c 93       	st	X, r18
          Can_clear_idemsk();
     ce0:	2c 91       	ld	r18, X
     ce2:	2e 7f       	andi	r18, 0xFE	; 254
     ce4:	2c 93       	st	X, r18
          Can_config_rx();       
     ce6:	80 81       	ld	r24, Z
     ce8:	8f 73       	andi	r24, 0x3F	; 63
     cea:	80 83       	st	Z, r24
     cec:	80 81       	ld	r24, Z
     cee:	80 68       	ori	r24, 0x80	; 128
     cf0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     cf4:	0e c4       	rjmp	.+2076   	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	82 95       	swap	r24
     cfe:	88 0f       	add	r24, r24
     d00:	80 7e       	andi	r24, 0xE0	; 224
     d02:	81 5e       	subi	r24, 0xE1	; 225
     d04:	27 ef       	ldi	r18, 0xF7	; 247
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	f9 01       	movw	r30, r18
     d0a:	80 83       	st	Z, r24
     d0c:	49 81       	ldd	r20, Y+1	; 0x01
     d0e:	42 95       	swap	r20
     d10:	44 0f       	add	r20, r20
     d12:	40 7e       	andi	r20, 0xE0	; 224
     d14:	86 ef       	ldi	r24, 0xF6	; 246
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	fc 01       	movw	r30, r24
     d1a:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     d1c:	12 96       	adiw	r26, 0x02	; 2
     d1e:	4c 91       	ld	r20, X
     d20:	12 97       	sbiw	r26, 0x02	; 2
     d22:	46 95       	lsr	r20
     d24:	46 95       	lsr	r20
     d26:	46 95       	lsr	r20
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	f0 e2       	ldi	r31, 0x20	; 32
     d30:	5f 9f       	mul	r21, r31
     d32:	40 0d       	add	r20, r0
     d34:	11 24       	eor	r1, r1
     d36:	40 93 f3 00 	sts	0x00F3, r20
     d3a:	12 96       	adiw	r26, 0x02	; 2
     d3c:	4c 91       	ld	r20, X
     d3e:	12 97       	sbiw	r26, 0x02	; 2
     d40:	42 95       	swap	r20
     d42:	44 0f       	add	r20, r20
     d44:	40 7e       	andi	r20, 0xE0	; 224
     d46:	40 93 f2 00 	sts	0x00F2, r20
     d4a:	6f ee       	ldi	r22, 0xEF	; 239
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	fb 01       	movw	r30, r22
     d50:	40 81       	ld	r20, Z
     d52:	4f 7e       	andi	r20, 0xEF	; 239
     d54:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     d56:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     d58:	5b 81       	ldd	r21, Y+3	; 0x03
     d5a:	52 95       	swap	r21
     d5c:	56 95       	lsr	r21
     d5e:	57 70       	andi	r21, 0x07	; 7
     d60:	4c 81       	ldd	r20, Y+4	; 0x04
     d62:	44 0f       	add	r20, r20
     d64:	44 0f       	add	r20, r20
     d66:	44 0f       	add	r20, r20
     d68:	45 0f       	add	r20, r21
     d6a:	f9 01       	movw	r30, r18
     d6c:	40 83       	st	Z, r20
     d6e:	3a 81       	ldd	r19, Y+2	; 0x02
     d70:	32 95       	swap	r19
     d72:	36 95       	lsr	r19
     d74:	37 70       	andi	r19, 0x07	; 7
     d76:	2b 81       	ldd	r18, Y+3	; 0x03
     d78:	22 0f       	add	r18, r18
     d7a:	22 0f       	add	r18, r18
     d7c:	22 0f       	add	r18, r18
     d7e:	23 0f       	add	r18, r19
     d80:	fc 01       	movw	r30, r24
     d82:	20 83       	st	Z, r18
     d84:	99 81       	ldd	r25, Y+1	; 0x01
     d86:	92 95       	swap	r25
     d88:	96 95       	lsr	r25
     d8a:	97 70       	andi	r25, 0x07	; 7
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	88 0f       	add	r24, r24
     d90:	88 0f       	add	r24, r24
     d92:	88 0f       	add	r24, r24
     d94:	89 0f       	add	r24, r25
     d96:	80 93 f5 00 	sts	0x00F5, r24
     d9a:	29 81       	ldd	r18, Y+1	; 0x01
     d9c:	22 0f       	add	r18, r18
     d9e:	22 0f       	add	r18, r18
     da0:	22 0f       	add	r18, r18
     da2:	84 ef       	ldi	r24, 0xF4	; 244
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	fc 01       	movw	r30, r24
     da8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     daa:	fb 01       	movw	r30, r22
     dac:	30 81       	ld	r19, Z
     dae:	16 96       	adiw	r26, 0x06	; 6
     db0:	2c 91       	ld	r18, X
     db2:	16 97       	sbiw	r26, 0x06	; 6
     db4:	23 2b       	or	r18, r19
     db6:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     db8:	1a 96       	adiw	r26, 0x0a	; 10
     dba:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     dbc:	dc 01       	movw	r26, r24
     dbe:	2c 91       	ld	r18, X
     dc0:	24 60       	ori	r18, 0x04	; 4
     dc2:	2c 93       	st	X, r18
		  Can_clear_rtr();
     dc4:	a0 ef       	ldi	r26, 0xF0	; 240
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	2c 91       	ld	r18, X
     dca:	2b 7f       	andi	r18, 0xFB	; 251
     dcc:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     dce:	20 81       	ld	r18, Z
     dd0:	2f 7e       	andi	r18, 0xEF	; 239
     dd2:	20 83       	st	Z, r18
          Can_clear_idemsk();
     dd4:	fc 01       	movw	r30, r24
     dd6:	20 81       	ld	r18, Z
     dd8:	2e 7f       	andi	r18, 0xFE	; 254
     dda:	20 83       	st	Z, r18
          Can_config_rx();       
     ddc:	db 01       	movw	r26, r22
     dde:	8c 91       	ld	r24, X
     de0:	8f 73       	andi	r24, 0x3F	; 63
     de2:	8c 93       	st	X, r24
     de4:	8c 91       	ld	r24, X
     de6:	80 68       	ori	r24, 0x80	; 128
     de8:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dea:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     dec:	92 c3       	rjmp	.+1828   	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	82 95       	swap	r24
     df6:	88 0f       	add	r24, r24
     df8:	80 7e       	andi	r24, 0xE0	; 224
     dfa:	81 5e       	subi	r24, 0xE1	; 225
     dfc:	27 ef       	ldi	r18, 0xF7	; 247
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	f9 01       	movw	r30, r18
     e02:	80 83       	st	Z, r24
     e04:	49 81       	ldd	r20, Y+1	; 0x01
     e06:	42 95       	swap	r20
     e08:	44 0f       	add	r20, r20
     e0a:	40 7e       	andi	r20, 0xE0	; 224
     e0c:	86 ef       	ldi	r24, 0xF6	; 246
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	fc 01       	movw	r30, r24
     e12:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	4c 91       	ld	r20, X
     e18:	12 97       	sbiw	r26, 0x02	; 2
     e1a:	46 95       	lsr	r20
     e1c:	46 95       	lsr	r20
     e1e:	46 95       	lsr	r20
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	5c 91       	ld	r21, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	f0 e2       	ldi	r31, 0x20	; 32
     e28:	5f 9f       	mul	r21, r31
     e2a:	40 0d       	add	r20, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	40 93 f3 00 	sts	0x00F3, r20
     e32:	12 96       	adiw	r26, 0x02	; 2
     e34:	4c 91       	ld	r20, X
     e36:	12 97       	sbiw	r26, 0x02	; 2
     e38:	42 95       	swap	r20
     e3a:	44 0f       	add	r20, r20
     e3c:	40 7e       	andi	r20, 0xE0	; 224
     e3e:	40 93 f2 00 	sts	0x00F2, r20
     e42:	6f ee       	ldi	r22, 0xEF	; 239
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	fb 01       	movw	r30, r22
     e48:	40 81       	ld	r20, Z
     e4a:	4f 7e       	andi	r20, 0xEF	; 239
     e4c:	40 83       	st	Z, r20
		
          u8_temp=0; 
     e4e:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     e50:	5b 81       	ldd	r21, Y+3	; 0x03
     e52:	52 95       	swap	r21
     e54:	56 95       	lsr	r21
     e56:	57 70       	andi	r21, 0x07	; 7
     e58:	4c 81       	ldd	r20, Y+4	; 0x04
     e5a:	44 0f       	add	r20, r20
     e5c:	44 0f       	add	r20, r20
     e5e:	44 0f       	add	r20, r20
     e60:	45 0f       	add	r20, r21
     e62:	f9 01       	movw	r30, r18
     e64:	40 83       	st	Z, r20
     e66:	3a 81       	ldd	r19, Y+2	; 0x02
     e68:	32 95       	swap	r19
     e6a:	36 95       	lsr	r19
     e6c:	37 70       	andi	r19, 0x07	; 7
     e6e:	2b 81       	ldd	r18, Y+3	; 0x03
     e70:	22 0f       	add	r18, r18
     e72:	22 0f       	add	r18, r18
     e74:	22 0f       	add	r18, r18
     e76:	23 0f       	add	r18, r19
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
     e7c:	99 81       	ldd	r25, Y+1	; 0x01
     e7e:	92 95       	swap	r25
     e80:	96 95       	lsr	r25
     e82:	97 70       	andi	r25, 0x07	; 7
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	88 0f       	add	r24, r24
     e88:	88 0f       	add	r24, r24
     e8a:	88 0f       	add	r24, r24
     e8c:	89 0f       	add	r24, r25
     e8e:	80 93 f5 00 	sts	0x00F5, r24
     e92:	29 81       	ldd	r18, Y+1	; 0x01
     e94:	22 0f       	add	r18, r18
     e96:	22 0f       	add	r18, r18
     e98:	22 0f       	add	r18, r18
     e9a:	84 ef       	ldi	r24, 0xF4	; 244
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	fc 01       	movw	r30, r24
     ea0:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ea2:	fb 01       	movw	r30, r22
     ea4:	30 81       	ld	r19, Z
     ea6:	16 96       	adiw	r26, 0x06	; 6
     ea8:	2c 91       	ld	r18, X
     eaa:	16 97       	sbiw	r26, 0x06	; 6
     eac:	23 2b       	or	r18, r19
     eae:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     eb0:	21 e0       	ldi	r18, 0x01	; 1
     eb2:	1a 96       	adiw	r26, 0x0a	; 10
     eb4:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     eb6:	dc 01       	movw	r26, r24
     eb8:	2c 91       	ld	r18, X
     eba:	24 60       	ori	r18, 0x04	; 4
     ebc:	2c 93       	st	X, r18
		  Can_set_rtr();
     ebe:	a0 ef       	ldi	r26, 0xF0	; 240
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	2c 91       	ld	r18, X
     ec4:	24 60       	ori	r18, 0x04	; 4
     ec6:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     ec8:	20 81       	ld	r18, Z
     eca:	2f 7d       	andi	r18, 0xDF	; 223
     ecc:	20 83       	st	Z, r18
          Can_clear_idemsk();
     ece:	fc 01       	movw	r30, r24
     ed0:	20 81       	ld	r18, Z
     ed2:	2e 7f       	andi	r18, 0xFE	; 254
     ed4:	20 83       	st	Z, r18
          Can_config_rx();       
     ed6:	db 01       	movw	r26, r22
     ed8:	8c 91       	ld	r24, X
     eda:	8f 73       	andi	r24, 0x3F	; 63
     edc:	8c 93       	st	X, r24
     ede:	8c 91       	ld	r24, X
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ee4:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     ee6:	15 c3       	rjmp	.+1578   	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ee8:	1b 96       	adiw	r26, 0x0b	; 11
     eea:	8c 91       	ld	r24, X
     eec:	1b 97       	sbiw	r26, 0x0b	; 11
     eee:	88 23       	and	r24, r24
     ef0:	d9 f1       	breq	.+118    	; 0xf68 <__stack+0x669>
     ef2:	14 96       	adiw	r26, 0x04	; 4
     ef4:	9c 91       	ld	r25, X
     ef6:	14 97       	sbiw	r26, 0x04	; 4
     ef8:	92 95       	swap	r25
     efa:	96 95       	lsr	r25
     efc:	97 70       	andi	r25, 0x07	; 7
     efe:	15 96       	adiw	r26, 0x05	; 5
     f00:	8c 91       	ld	r24, X
     f02:	15 97       	sbiw	r26, 0x05	; 5
     f04:	88 0f       	add	r24, r24
     f06:	88 0f       	add	r24, r24
     f08:	88 0f       	add	r24, r24
     f0a:	89 0f       	add	r24, r25
     f0c:	80 93 f3 00 	sts	0x00F3, r24
     f10:	13 96       	adiw	r26, 0x03	; 3
     f12:	9c 91       	ld	r25, X
     f14:	13 97       	sbiw	r26, 0x03	; 3
     f16:	92 95       	swap	r25
     f18:	96 95       	lsr	r25
     f1a:	97 70       	andi	r25, 0x07	; 7
     f1c:	14 96       	adiw	r26, 0x04	; 4
     f1e:	8c 91       	ld	r24, X
     f20:	14 97       	sbiw	r26, 0x04	; 4
     f22:	88 0f       	add	r24, r24
     f24:	88 0f       	add	r24, r24
     f26:	88 0f       	add	r24, r24
     f28:	89 0f       	add	r24, r25
     f2a:	80 93 f2 00 	sts	0x00F2, r24
     f2e:	12 96       	adiw	r26, 0x02	; 2
     f30:	9c 91       	ld	r25, X
     f32:	12 97       	sbiw	r26, 0x02	; 2
     f34:	92 95       	swap	r25
     f36:	96 95       	lsr	r25
     f38:	97 70       	andi	r25, 0x07	; 7
     f3a:	13 96       	adiw	r26, 0x03	; 3
     f3c:	8c 91       	ld	r24, X
     f3e:	13 97       	sbiw	r26, 0x03	; 3
     f40:	88 0f       	add	r24, r24
     f42:	88 0f       	add	r24, r24
     f44:	88 0f       	add	r24, r24
     f46:	89 0f       	add	r24, r25
     f48:	80 93 f1 00 	sts	0x00F1, r24
     f4c:	12 96       	adiw	r26, 0x02	; 2
     f4e:	8c 91       	ld	r24, X
     f50:	12 97       	sbiw	r26, 0x02	; 2
     f52:	88 0f       	add	r24, r24
     f54:	88 0f       	add	r24, r24
     f56:	88 0f       	add	r24, r24
     f58:	80 93 f0 00 	sts	0x00F0, r24
     f5c:	ef ee       	ldi	r30, 0xEF	; 239
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	80 61       	ori	r24, 0x10	; 16
     f64:	80 83       	st	Z, r24
     f66:	1c c0       	rjmp	.+56     	; 0xfa0 <__stack+0x6a1>
          else              { Can_set_std_id(cmd->id.std);}
     f68:	12 96       	adiw	r26, 0x02	; 2
     f6a:	8c 91       	ld	r24, X
     f6c:	12 97       	sbiw	r26, 0x02	; 2
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	86 95       	lsr	r24
     f74:	13 96       	adiw	r26, 0x03	; 3
     f76:	9c 91       	ld	r25, X
     f78:	13 97       	sbiw	r26, 0x03	; 3
     f7a:	e0 e2       	ldi	r30, 0x20	; 32
     f7c:	9e 9f       	mul	r25, r30
     f7e:	80 0d       	add	r24, r0
     f80:	11 24       	eor	r1, r1
     f82:	80 93 f3 00 	sts	0x00F3, r24
     f86:	12 96       	adiw	r26, 0x02	; 2
     f88:	8c 91       	ld	r24, X
     f8a:	12 97       	sbiw	r26, 0x02	; 2
     f8c:	82 95       	swap	r24
     f8e:	88 0f       	add	r24, r24
     f90:	80 7e       	andi	r24, 0xE0	; 224
     f92:	80 93 f2 00 	sts	0x00F2, r24
     f96:	ef ee       	ldi	r30, 0xEF	; 239
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 7e       	andi	r24, 0xEF	; 239
     f9e:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     fa0:	8f ef       	ldi	r24, 0xFF	; 255
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	92 95       	swap	r25
     fa8:	96 95       	lsr	r25
     faa:	97 70       	andi	r25, 0x07	; 7
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	88 0f       	add	r24, r24
     fb0:	88 0f       	add	r24, r24
     fb2:	88 0f       	add	r24, r24
     fb4:	89 0f       	add	r24, r25
     fb6:	80 93 f7 00 	sts	0x00F7, r24
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	92 95       	swap	r25
     fbe:	96 95       	lsr	r25
     fc0:	97 70       	andi	r25, 0x07	; 7
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 0f       	add	r24, r24
     fc6:	88 0f       	add	r24, r24
     fc8:	88 0f       	add	r24, r24
     fca:	89 0f       	add	r24, r25
     fcc:	80 93 f6 00 	sts	0x00F6, r24
     fd0:	99 81       	ldd	r25, Y+1	; 0x01
     fd2:	92 95       	swap	r25
     fd4:	96 95       	lsr	r25
     fd6:	97 70       	andi	r25, 0x07	; 7
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	88 0f       	add	r24, r24
     fdc:	88 0f       	add	r24, r24
     fde:	88 0f       	add	r24, r24
     fe0:	89 0f       	add	r24, r25
     fe2:	80 93 f5 00 	sts	0x00F5, r24
     fe6:	29 81       	ldd	r18, Y+1	; 0x01
     fe8:	22 0f       	add	r18, r18
     fea:	22 0f       	add	r18, r18
     fec:	22 0f       	add	r18, r18
     fee:	84 ef       	ldi	r24, 0xF4	; 244
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	fc 01       	movw	r30, r24
     ff4:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     ff6:	ef ee       	ldi	r30, 0xEF	; 239
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	30 81       	ld	r19, Z
     ffc:	16 96       	adiw	r26, 0x06	; 6
     ffe:	2c 91       	ld	r18, X
    1000:	23 2b       	or	r18, r19
    1002:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
    1004:	dc 01       	movw	r26, r24
    1006:	2c 91       	ld	r18, X
    1008:	2b 7f       	andi	r18, 0xFB	; 251
    100a:	2c 93       	st	X, r18
          Can_set_idemsk();
    100c:	2c 91       	ld	r18, X
    100e:	21 60       	ori	r18, 0x01	; 1
    1010:	2c 93       	st	X, r18
          Can_config_rx();       
    1012:	80 81       	ld	r24, Z
    1014:	8f 73       	andi	r24, 0x3F	; 63
    1016:	80 83       	st	Z, r24
    1018:	80 81       	ld	r24, Z
    101a:	80 68       	ori	r24, 0x80	; 128
    101c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    101e:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1020:	78 c2       	rjmp	.+1264   	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1022:	1b 96       	adiw	r26, 0x0b	; 11
    1024:	8c 91       	ld	r24, X
    1026:	1b 97       	sbiw	r26, 0x0b	; 11
    1028:	88 23       	and	r24, r24
    102a:	d9 f1       	breq	.+118    	; 0x10a2 <__stack+0x7a3>
    102c:	14 96       	adiw	r26, 0x04	; 4
    102e:	9c 91       	ld	r25, X
    1030:	14 97       	sbiw	r26, 0x04	; 4
    1032:	92 95       	swap	r25
    1034:	96 95       	lsr	r25
    1036:	97 70       	andi	r25, 0x07	; 7
    1038:	15 96       	adiw	r26, 0x05	; 5
    103a:	8c 91       	ld	r24, X
    103c:	15 97       	sbiw	r26, 0x05	; 5
    103e:	88 0f       	add	r24, r24
    1040:	88 0f       	add	r24, r24
    1042:	88 0f       	add	r24, r24
    1044:	89 0f       	add	r24, r25
    1046:	80 93 f3 00 	sts	0x00F3, r24
    104a:	13 96       	adiw	r26, 0x03	; 3
    104c:	9c 91       	ld	r25, X
    104e:	13 97       	sbiw	r26, 0x03	; 3
    1050:	92 95       	swap	r25
    1052:	96 95       	lsr	r25
    1054:	97 70       	andi	r25, 0x07	; 7
    1056:	14 96       	adiw	r26, 0x04	; 4
    1058:	8c 91       	ld	r24, X
    105a:	14 97       	sbiw	r26, 0x04	; 4
    105c:	88 0f       	add	r24, r24
    105e:	88 0f       	add	r24, r24
    1060:	88 0f       	add	r24, r24
    1062:	89 0f       	add	r24, r25
    1064:	80 93 f2 00 	sts	0x00F2, r24
    1068:	12 96       	adiw	r26, 0x02	; 2
    106a:	9c 91       	ld	r25, X
    106c:	12 97       	sbiw	r26, 0x02	; 2
    106e:	92 95       	swap	r25
    1070:	96 95       	lsr	r25
    1072:	97 70       	andi	r25, 0x07	; 7
    1074:	13 96       	adiw	r26, 0x03	; 3
    1076:	8c 91       	ld	r24, X
    1078:	13 97       	sbiw	r26, 0x03	; 3
    107a:	88 0f       	add	r24, r24
    107c:	88 0f       	add	r24, r24
    107e:	88 0f       	add	r24, r24
    1080:	89 0f       	add	r24, r25
    1082:	80 93 f1 00 	sts	0x00F1, r24
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	8c 91       	ld	r24, X
    108a:	12 97       	sbiw	r26, 0x02	; 2
    108c:	88 0f       	add	r24, r24
    108e:	88 0f       	add	r24, r24
    1090:	88 0f       	add	r24, r24
    1092:	80 93 f0 00 	sts	0x00F0, r24
    1096:	ef ee       	ldi	r30, 0xEF	; 239
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	80 61       	ori	r24, 0x10	; 16
    109e:	80 83       	st	Z, r24
    10a0:	1c c0       	rjmp	.+56     	; 0x10da <__stack+0x7db>
          else              { Can_set_std_id(cmd->id.std);}
    10a2:	12 96       	adiw	r26, 0x02	; 2
    10a4:	8c 91       	ld	r24, X
    10a6:	12 97       	sbiw	r26, 0x02	; 2
    10a8:	86 95       	lsr	r24
    10aa:	86 95       	lsr	r24
    10ac:	86 95       	lsr	r24
    10ae:	13 96       	adiw	r26, 0x03	; 3
    10b0:	9c 91       	ld	r25, X
    10b2:	13 97       	sbiw	r26, 0x03	; 3
    10b4:	e0 e2       	ldi	r30, 0x20	; 32
    10b6:	9e 9f       	mul	r25, r30
    10b8:	80 0d       	add	r24, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	80 93 f3 00 	sts	0x00F3, r24
    10c0:	12 96       	adiw	r26, 0x02	; 2
    10c2:	8c 91       	ld	r24, X
    10c4:	12 97       	sbiw	r26, 0x02	; 2
    10c6:	82 95       	swap	r24
    10c8:	88 0f       	add	r24, r24
    10ca:	80 7e       	andi	r24, 0xE0	; 224
    10cc:	80 93 f2 00 	sts	0x00F2, r24
    10d0:	ef ee       	ldi	r30, 0xEF	; 239
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	8f 7e       	andi	r24, 0xEF	; 239
    10d8:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	9b 81       	ldd	r25, Y+3	; 0x03
    10e0:	92 95       	swap	r25
    10e2:	96 95       	lsr	r25
    10e4:	97 70       	andi	r25, 0x07	; 7
    10e6:	8c 81       	ldd	r24, Y+4	; 0x04
    10e8:	88 0f       	add	r24, r24
    10ea:	88 0f       	add	r24, r24
    10ec:	88 0f       	add	r24, r24
    10ee:	89 0f       	add	r24, r25
    10f0:	80 93 f7 00 	sts	0x00F7, r24
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	92 95       	swap	r25
    10f8:	96 95       	lsr	r25
    10fa:	97 70       	andi	r25, 0x07	; 7
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 0f       	add	r24, r24
    1100:	88 0f       	add	r24, r24
    1102:	88 0f       	add	r24, r24
    1104:	89 0f       	add	r24, r25
    1106:	80 93 f6 00 	sts	0x00F6, r24
    110a:	99 81       	ldd	r25, Y+1	; 0x01
    110c:	92 95       	swap	r25
    110e:	96 95       	lsr	r25
    1110:	97 70       	andi	r25, 0x07	; 7
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	88 0f       	add	r24, r24
    1116:	88 0f       	add	r24, r24
    1118:	88 0f       	add	r24, r24
    111a:	89 0f       	add	r24, r25
    111c:	80 93 f5 00 	sts	0x00F5, r24
    1120:	29 81       	ldd	r18, Y+1	; 0x01
    1122:	22 0f       	add	r18, r18
    1124:	22 0f       	add	r18, r18
    1126:	22 0f       	add	r18, r18
    1128:	84 ef       	ldi	r24, 0xF4	; 244
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	fc 01       	movw	r30, r24
    112e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1130:	ef ee       	ldi	r30, 0xEF	; 239
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	30 81       	ld	r19, Z
    1136:	16 96       	adiw	r26, 0x06	; 6
    1138:	2c 91       	ld	r18, X
    113a:	16 97       	sbiw	r26, 0x06	; 6
    113c:	23 2b       	or	r18, r19
    113e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1140:	1a 96       	adiw	r26, 0x0a	; 10
    1142:	1c 92       	st	X, r1
    1144:	dc 01       	movw	r26, r24
    1146:	2c 91       	ld	r18, X
    1148:	24 60       	ori	r18, 0x04	; 4
    114a:	2c 93       	st	X, r18
    114c:	a0 ef       	ldi	r26, 0xF0	; 240
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	2c 91       	ld	r18, X
    1152:	2b 7f       	andi	r18, 0xFB	; 251
    1154:	2c 93       	st	X, r18
          Can_set_idemsk();
    1156:	dc 01       	movw	r26, r24
    1158:	2c 91       	ld	r18, X
    115a:	21 60       	ori	r18, 0x01	; 1
    115c:	2c 93       	st	X, r18
          Can_config_rx();       
    115e:	80 81       	ld	r24, Z
    1160:	8f 73       	andi	r24, 0x3F	; 63
    1162:	80 83       	st	Z, r24
    1164:	80 81       	ld	r24, Z
    1166:	80 68       	ori	r24, 0x80	; 128
    1168:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    116a:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    116c:	d2 c1       	rjmp	.+932    	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    116e:	1b 96       	adiw	r26, 0x0b	; 11
    1170:	8c 91       	ld	r24, X
    1172:	1b 97       	sbiw	r26, 0x0b	; 11
    1174:	88 23       	and	r24, r24
    1176:	d9 f1       	breq	.+118    	; 0x11ee <__stack+0x8ef>
    1178:	14 96       	adiw	r26, 0x04	; 4
    117a:	9c 91       	ld	r25, X
    117c:	14 97       	sbiw	r26, 0x04	; 4
    117e:	92 95       	swap	r25
    1180:	96 95       	lsr	r25
    1182:	97 70       	andi	r25, 0x07	; 7
    1184:	15 96       	adiw	r26, 0x05	; 5
    1186:	8c 91       	ld	r24, X
    1188:	15 97       	sbiw	r26, 0x05	; 5
    118a:	88 0f       	add	r24, r24
    118c:	88 0f       	add	r24, r24
    118e:	88 0f       	add	r24, r24
    1190:	89 0f       	add	r24, r25
    1192:	80 93 f3 00 	sts	0x00F3, r24
    1196:	13 96       	adiw	r26, 0x03	; 3
    1198:	9c 91       	ld	r25, X
    119a:	13 97       	sbiw	r26, 0x03	; 3
    119c:	92 95       	swap	r25
    119e:	96 95       	lsr	r25
    11a0:	97 70       	andi	r25, 0x07	; 7
    11a2:	14 96       	adiw	r26, 0x04	; 4
    11a4:	8c 91       	ld	r24, X
    11a6:	14 97       	sbiw	r26, 0x04	; 4
    11a8:	88 0f       	add	r24, r24
    11aa:	88 0f       	add	r24, r24
    11ac:	88 0f       	add	r24, r24
    11ae:	89 0f       	add	r24, r25
    11b0:	80 93 f2 00 	sts	0x00F2, r24
    11b4:	12 96       	adiw	r26, 0x02	; 2
    11b6:	9c 91       	ld	r25, X
    11b8:	12 97       	sbiw	r26, 0x02	; 2
    11ba:	92 95       	swap	r25
    11bc:	96 95       	lsr	r25
    11be:	97 70       	andi	r25, 0x07	; 7
    11c0:	13 96       	adiw	r26, 0x03	; 3
    11c2:	8c 91       	ld	r24, X
    11c4:	13 97       	sbiw	r26, 0x03	; 3
    11c6:	88 0f       	add	r24, r24
    11c8:	88 0f       	add	r24, r24
    11ca:	88 0f       	add	r24, r24
    11cc:	89 0f       	add	r24, r25
    11ce:	80 93 f1 00 	sts	0x00F1, r24
    11d2:	12 96       	adiw	r26, 0x02	; 2
    11d4:	8c 91       	ld	r24, X
    11d6:	12 97       	sbiw	r26, 0x02	; 2
    11d8:	88 0f       	add	r24, r24
    11da:	88 0f       	add	r24, r24
    11dc:	88 0f       	add	r24, r24
    11de:	80 93 f0 00 	sts	0x00F0, r24
    11e2:	ef ee       	ldi	r30, 0xEF	; 239
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 61       	ori	r24, 0x10	; 16
    11ea:	80 83       	st	Z, r24
    11ec:	1c c0       	rjmp	.+56     	; 0x1226 <__stack+0x927>
          else              { Can_set_std_id(cmd->id.std);}
    11ee:	12 96       	adiw	r26, 0x02	; 2
    11f0:	8c 91       	ld	r24, X
    11f2:	12 97       	sbiw	r26, 0x02	; 2
    11f4:	86 95       	lsr	r24
    11f6:	86 95       	lsr	r24
    11f8:	86 95       	lsr	r24
    11fa:	13 96       	adiw	r26, 0x03	; 3
    11fc:	9c 91       	ld	r25, X
    11fe:	13 97       	sbiw	r26, 0x03	; 3
    1200:	e0 e2       	ldi	r30, 0x20	; 32
    1202:	9e 9f       	mul	r25, r30
    1204:	80 0d       	add	r24, r0
    1206:	11 24       	eor	r1, r1
    1208:	80 93 f3 00 	sts	0x00F3, r24
    120c:	12 96       	adiw	r26, 0x02	; 2
    120e:	8c 91       	ld	r24, X
    1210:	12 97       	sbiw	r26, 0x02	; 2
    1212:	82 95       	swap	r24
    1214:	88 0f       	add	r24, r24
    1216:	80 7e       	andi	r24, 0xE0	; 224
    1218:	80 93 f2 00 	sts	0x00F2, r24
    121c:	ef ee       	ldi	r30, 0xEF	; 239
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8f 7e       	andi	r24, 0xEF	; 239
    1224:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	9b 81       	ldd	r25, Y+3	; 0x03
    122c:	92 95       	swap	r25
    122e:	96 95       	lsr	r25
    1230:	97 70       	andi	r25, 0x07	; 7
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	88 0f       	add	r24, r24
    1236:	88 0f       	add	r24, r24
    1238:	88 0f       	add	r24, r24
    123a:	89 0f       	add	r24, r25
    123c:	80 93 f7 00 	sts	0x00F7, r24
    1240:	9a 81       	ldd	r25, Y+2	; 0x02
    1242:	92 95       	swap	r25
    1244:	96 95       	lsr	r25
    1246:	97 70       	andi	r25, 0x07	; 7
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	88 0f       	add	r24, r24
    124c:	88 0f       	add	r24, r24
    124e:	88 0f       	add	r24, r24
    1250:	89 0f       	add	r24, r25
    1252:	80 93 f6 00 	sts	0x00F6, r24
    1256:	99 81       	ldd	r25, Y+1	; 0x01
    1258:	92 95       	swap	r25
    125a:	96 95       	lsr	r25
    125c:	97 70       	andi	r25, 0x07	; 7
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	88 0f       	add	r24, r24
    1262:	88 0f       	add	r24, r24
    1264:	88 0f       	add	r24, r24
    1266:	89 0f       	add	r24, r25
    1268:	80 93 f5 00 	sts	0x00F5, r24
    126c:	29 81       	ldd	r18, Y+1	; 0x01
    126e:	22 0f       	add	r18, r18
    1270:	22 0f       	add	r18, r18
    1272:	22 0f       	add	r18, r18
    1274:	84 ef       	ldi	r24, 0xF4	; 244
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    127c:	ef ee       	ldi	r30, 0xEF	; 239
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	30 81       	ld	r19, Z
    1282:	16 96       	adiw	r26, 0x06	; 6
    1284:	2c 91       	ld	r18, X
    1286:	16 97       	sbiw	r26, 0x06	; 6
    1288:	23 2b       	or	r18, r19
    128a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	1a 96       	adiw	r26, 0x0a	; 10
    1290:	2c 93       	st	X, r18
    1292:	dc 01       	movw	r26, r24
    1294:	2c 91       	ld	r18, X
    1296:	24 60       	ori	r18, 0x04	; 4
    1298:	2c 93       	st	X, r18
    129a:	a0 ef       	ldi	r26, 0xF0	; 240
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	2c 91       	ld	r18, X
    12a0:	24 60       	ori	r18, 0x04	; 4
    12a2:	2c 93       	st	X, r18
          Can_clear_rplv();
    12a4:	20 81       	ld	r18, Z
    12a6:	2f 7d       	andi	r18, 0xDF	; 223
    12a8:	20 83       	st	Z, r18
          Can_set_idemsk();
    12aa:	dc 01       	movw	r26, r24
    12ac:	2c 91       	ld	r18, X
    12ae:	21 60       	ori	r18, 0x01	; 1
    12b0:	2c 93       	st	X, r18
          Can_config_rx();       
    12b2:	80 81       	ld	r24, Z
    12b4:	8f 73       	andi	r24, 0x3F	; 63
    12b6:	80 83       	st	Z, r24
    12b8:	80 81       	ld	r24, Z
    12ba:	80 68       	ori	r24, 0x80	; 128
    12bc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    12be:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    12c0:	28 c1       	rjmp	.+592    	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	8a ef       	ldi	r24, 0xFA	; 250
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	17 96       	adiw	r26, 0x07	; 7
    12ca:	ed 91       	ld	r30, X+
    12cc:	fc 91       	ld	r31, X
    12ce:	18 97       	sbiw	r26, 0x08	; 8
    12d0:	e2 0f       	add	r30, r18
    12d2:	f1 1d       	adc	r31, r1
    12d4:	30 81       	ld	r19, Z
    12d6:	fc 01       	movw	r30, r24
    12d8:	30 83       	st	Z, r19
    12da:	2f 5f       	subi	r18, 0xFF	; 255
    12dc:	16 96       	adiw	r26, 0x06	; 6
    12de:	3c 91       	ld	r19, X
    12e0:	16 97       	sbiw	r26, 0x06	; 6
    12e2:	23 17       	cp	r18, r19
    12e4:	88 f3       	brcs	.-30     	; 0x12c8 <__stack+0x9c9>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    12e6:	19 82       	std	Y+1, r1	; 0x01
    12e8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ea:	92 95       	swap	r25
    12ec:	96 95       	lsr	r25
    12ee:	97 70       	andi	r25, 0x07	; 7
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	88 0f       	add	r24, r24
    12f4:	88 0f       	add	r24, r24
    12f6:	88 0f       	add	r24, r24
    12f8:	89 0f       	add	r24, r25
    12fa:	80 93 f7 00 	sts	0x00F7, r24
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	92 95       	swap	r25
    1302:	96 95       	lsr	r25
    1304:	97 70       	andi	r25, 0x07	; 7
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	88 0f       	add	r24, r24
    130a:	88 0f       	add	r24, r24
    130c:	88 0f       	add	r24, r24
    130e:	89 0f       	add	r24, r25
    1310:	80 93 f6 00 	sts	0x00F6, r24
    1314:	99 81       	ldd	r25, Y+1	; 0x01
    1316:	92 95       	swap	r25
    1318:	96 95       	lsr	r25
    131a:	97 70       	andi	r25, 0x07	; 7
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	88 0f       	add	r24, r24
    1320:	88 0f       	add	r24, r24
    1322:	88 0f       	add	r24, r24
    1324:	89 0f       	add	r24, r25
    1326:	80 93 f5 00 	sts	0x00F5, r24
    132a:	29 81       	ldd	r18, Y+1	; 0x01
    132c:	22 0f       	add	r18, r18
    132e:	22 0f       	add	r18, r18
    1330:	22 0f       	add	r18, r18
    1332:	84 ef       	ldi	r24, 0xF4	; 244
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	fc 01       	movw	r30, r24
    1338:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    133a:	ef ee       	ldi	r30, 0xEF	; 239
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	30 81       	ld	r19, Z
    1340:	16 96       	adiw	r26, 0x06	; 6
    1342:	2c 91       	ld	r18, X
    1344:	16 97       	sbiw	r26, 0x06	; 6
    1346:	23 2b       	or	r18, r19
    1348:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    134a:	21 e0       	ldi	r18, 0x01	; 1
    134c:	1a 96       	adiw	r26, 0x0a	; 10
    134e:	2c 93       	st	X, r18
    1350:	dc 01       	movw	r26, r24
    1352:	2c 91       	ld	r18, X
    1354:	24 60       	ori	r18, 0x04	; 4
    1356:	2c 93       	st	X, r18
    1358:	a0 ef       	ldi	r26, 0xF0	; 240
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	2c 91       	ld	r18, X
    135e:	24 60       	ori	r18, 0x04	; 4
    1360:	2c 93       	st	X, r18
          Can_set_rplv();
    1362:	20 81       	ld	r18, Z
    1364:	20 62       	ori	r18, 0x20	; 32
    1366:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1368:	dc 01       	movw	r26, r24
    136a:	2c 91       	ld	r18, X
    136c:	2e 7f       	andi	r18, 0xFE	; 254
    136e:	2c 93       	st	X, r18
          Can_config_rx();       
    1370:	80 81       	ld	r24, Z
    1372:	8f 73       	andi	r24, 0x3F	; 63
    1374:	80 83       	st	Z, r24
    1376:	80 81       	ld	r24, Z
    1378:	80 68       	ori	r24, 0x80	; 128
    137a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    137c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    137e:	c9 c0       	rjmp	.+402    	; 0x1512 <__stack+0xc13>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1380:	1b 96       	adiw	r26, 0x0b	; 11
    1382:	8c 91       	ld	r24, X
    1384:	1b 97       	sbiw	r26, 0x0b	; 11
    1386:	88 23       	and	r24, r24
    1388:	d9 f1       	breq	.+118    	; 0x1400 <__stack+0xb01>
    138a:	14 96       	adiw	r26, 0x04	; 4
    138c:	9c 91       	ld	r25, X
    138e:	14 97       	sbiw	r26, 0x04	; 4
    1390:	92 95       	swap	r25
    1392:	96 95       	lsr	r25
    1394:	97 70       	andi	r25, 0x07	; 7
    1396:	15 96       	adiw	r26, 0x05	; 5
    1398:	8c 91       	ld	r24, X
    139a:	15 97       	sbiw	r26, 0x05	; 5
    139c:	88 0f       	add	r24, r24
    139e:	88 0f       	add	r24, r24
    13a0:	88 0f       	add	r24, r24
    13a2:	89 0f       	add	r24, r25
    13a4:	80 93 f3 00 	sts	0x00F3, r24
    13a8:	13 96       	adiw	r26, 0x03	; 3
    13aa:	9c 91       	ld	r25, X
    13ac:	13 97       	sbiw	r26, 0x03	; 3
    13ae:	92 95       	swap	r25
    13b0:	96 95       	lsr	r25
    13b2:	97 70       	andi	r25, 0x07	; 7
    13b4:	14 96       	adiw	r26, 0x04	; 4
    13b6:	8c 91       	ld	r24, X
    13b8:	14 97       	sbiw	r26, 0x04	; 4
    13ba:	88 0f       	add	r24, r24
    13bc:	88 0f       	add	r24, r24
    13be:	88 0f       	add	r24, r24
    13c0:	89 0f       	add	r24, r25
    13c2:	80 93 f2 00 	sts	0x00F2, r24
    13c6:	12 96       	adiw	r26, 0x02	; 2
    13c8:	9c 91       	ld	r25, X
    13ca:	12 97       	sbiw	r26, 0x02	; 2
    13cc:	92 95       	swap	r25
    13ce:	96 95       	lsr	r25
    13d0:	97 70       	andi	r25, 0x07	; 7
    13d2:	13 96       	adiw	r26, 0x03	; 3
    13d4:	8c 91       	ld	r24, X
    13d6:	13 97       	sbiw	r26, 0x03	; 3
    13d8:	88 0f       	add	r24, r24
    13da:	88 0f       	add	r24, r24
    13dc:	88 0f       	add	r24, r24
    13de:	89 0f       	add	r24, r25
    13e0:	80 93 f1 00 	sts	0x00F1, r24
    13e4:	12 96       	adiw	r26, 0x02	; 2
    13e6:	8c 91       	ld	r24, X
    13e8:	12 97       	sbiw	r26, 0x02	; 2
    13ea:	88 0f       	add	r24, r24
    13ec:	88 0f       	add	r24, r24
    13ee:	88 0f       	add	r24, r24
    13f0:	80 93 f0 00 	sts	0x00F0, r24
    13f4:	ef ee       	ldi	r30, 0xEF	; 239
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 61       	ori	r24, 0x10	; 16
    13fc:	80 83       	st	Z, r24
    13fe:	1c c0       	rjmp	.+56     	; 0x1438 <__stack+0xb39>
          else              { Can_set_std_id(cmd->id.std);}
    1400:	12 96       	adiw	r26, 0x02	; 2
    1402:	8c 91       	ld	r24, X
    1404:	12 97       	sbiw	r26, 0x02	; 2
    1406:	86 95       	lsr	r24
    1408:	86 95       	lsr	r24
    140a:	86 95       	lsr	r24
    140c:	13 96       	adiw	r26, 0x03	; 3
    140e:	9c 91       	ld	r25, X
    1410:	13 97       	sbiw	r26, 0x03	; 3
    1412:	e0 e2       	ldi	r30, 0x20	; 32
    1414:	9e 9f       	mul	r25, r30
    1416:	80 0d       	add	r24, r0
    1418:	11 24       	eor	r1, r1
    141a:	80 93 f3 00 	sts	0x00F3, r24
    141e:	12 96       	adiw	r26, 0x02	; 2
    1420:	8c 91       	ld	r24, X
    1422:	12 97       	sbiw	r26, 0x02	; 2
    1424:	82 95       	swap	r24
    1426:	88 0f       	add	r24, r24
    1428:	80 7e       	andi	r24, 0xE0	; 224
    142a:	80 93 f2 00 	sts	0x00F2, r24
    142e:	ef ee       	ldi	r30, 0xEF	; 239
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8f 7e       	andi	r24, 0xEF	; 239
    1436:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1438:	16 96       	adiw	r26, 0x06	; 6
    143a:	8c 91       	ld	r24, X
    143c:	16 97       	sbiw	r26, 0x06	; 6
    143e:	88 23       	and	r24, r24
    1440:	91 f0       	breq	.+36     	; 0x1466 <__stack+0xb67>
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	8a ef       	ldi	r24, 0xFA	; 250
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	17 96       	adiw	r26, 0x07	; 7
    144a:	ed 91       	ld	r30, X+
    144c:	fc 91       	ld	r31, X
    144e:	18 97       	sbiw	r26, 0x08	; 8
    1450:	e2 0f       	add	r30, r18
    1452:	f1 1d       	adc	r31, r1
    1454:	30 81       	ld	r19, Z
    1456:	fc 01       	movw	r30, r24
    1458:	30 83       	st	Z, r19
    145a:	2f 5f       	subi	r18, 0xFF	; 255
    145c:	16 96       	adiw	r26, 0x06	; 6
    145e:	3c 91       	ld	r19, X
    1460:	16 97       	sbiw	r26, 0x06	; 6
    1462:	23 17       	cp	r18, r19
    1464:	88 f3       	brcs	.-30     	; 0x1448 <__stack+0xb49>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	9b 81       	ldd	r25, Y+3	; 0x03
    146c:	92 95       	swap	r25
    146e:	96 95       	lsr	r25
    1470:	97 70       	andi	r25, 0x07	; 7
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	88 0f       	add	r24, r24
    1476:	88 0f       	add	r24, r24
    1478:	88 0f       	add	r24, r24
    147a:	89 0f       	add	r24, r25
    147c:	80 93 f7 00 	sts	0x00F7, r24
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	92 95       	swap	r25
    1484:	96 95       	lsr	r25
    1486:	97 70       	andi	r25, 0x07	; 7
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	88 0f       	add	r24, r24
    148c:	88 0f       	add	r24, r24
    148e:	88 0f       	add	r24, r24
    1490:	89 0f       	add	r24, r25
    1492:	80 93 f6 00 	sts	0x00F6, r24
    1496:	99 81       	ldd	r25, Y+1	; 0x01
    1498:	92 95       	swap	r25
    149a:	96 95       	lsr	r25
    149c:	97 70       	andi	r25, 0x07	; 7
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	88 0f       	add	r24, r24
    14a2:	88 0f       	add	r24, r24
    14a4:	88 0f       	add	r24, r24
    14a6:	89 0f       	add	r24, r25
    14a8:	80 93 f5 00 	sts	0x00F5, r24
    14ac:	29 81       	ldd	r18, Y+1	; 0x01
    14ae:	22 0f       	add	r18, r18
    14b0:	22 0f       	add	r18, r18
    14b2:	22 0f       	add	r18, r18
    14b4:	84 ef       	ldi	r24, 0xF4	; 244
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	fc 01       	movw	r30, r24
    14ba:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    14bc:	ef ee       	ldi	r30, 0xEF	; 239
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	30 81       	ld	r19, Z
    14c2:	16 96       	adiw	r26, 0x06	; 6
    14c4:	2c 91       	ld	r18, X
    14c6:	16 97       	sbiw	r26, 0x06	; 6
    14c8:	23 2b       	or	r18, r19
    14ca:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	1a 96       	adiw	r26, 0x0a	; 10
    14d0:	2c 93       	st	X, r18
    14d2:	dc 01       	movw	r26, r24
    14d4:	2c 91       	ld	r18, X
    14d6:	24 60       	ori	r18, 0x04	; 4
    14d8:	2c 93       	st	X, r18
    14da:	a0 ef       	ldi	r26, 0xF0	; 240
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	2c 91       	ld	r18, X
    14e0:	24 60       	ori	r18, 0x04	; 4
    14e2:	2c 93       	st	X, r18
          Can_set_rplv();
    14e4:	20 81       	ld	r18, Z
    14e6:	20 62       	ori	r18, 0x20	; 32
    14e8:	20 83       	st	Z, r18
          Can_set_idemsk();
    14ea:	dc 01       	movw	r26, r24
    14ec:	2c 91       	ld	r18, X
    14ee:	21 60       	ori	r18, 0x01	; 1
    14f0:	2c 93       	st	X, r18
          Can_config_rx();       
    14f2:	80 81       	ld	r24, Z
    14f4:	8f 73       	andi	r24, 0x3F	; 63
    14f6:	80 83       	st	Z, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	80 68       	ori	r24, 0x80	; 128
    14fc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1500:	08 c0       	rjmp	.+16     	; 0x1512 <__stack+0xc13>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1502:	19 96       	adiw	r26, 0x09	; 9
    1504:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1506:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <__stack+0xc13>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    150a:	8f e1       	ldi	r24, 0x1F	; 31
    150c:	19 96       	adiw	r26, 0x09	; 9
    150e:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    1512:	0f 90       	pop	r0
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	08 95       	ret

0000151a <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    1520:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1522:	88 23       	and	r24, r24
    1524:	09 f4       	brne	.+2      	; 0x1528 <can_get_status+0xe>
    1526:	d5 c0       	rjmp	.+426    	; 0x16d2 <can_get_status+0x1b8>
    1528:	8f 31       	cpi	r24, 0x1F	; 31
    152a:	09 f4       	brne	.+2      	; 0x152e <can_get_status+0x14>
    152c:	d4 c0       	rjmp	.+424    	; 0x16d6 <can_get_status+0x1bc>
    152e:	8f 3f       	cpi	r24, 0xFF	; 255
    1530:	09 f4       	brne	.+2      	; 0x1534 <can_get_status+0x1a>
    1532:	d3 c0       	rjmp	.+422    	; 0x16da <can_get_status+0x1c0>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    1534:	62 95       	swap	r22
    1536:	60 7f       	andi	r22, 0xF0	; 240
    1538:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    153c:	0e 94 24 04 	call	0x848	; 0x848 <can_get_mob_status>
    
    switch (a_status)
    1540:	80 32       	cpi	r24, 0x20	; 32
    1542:	61 f0       	breq	.+24     	; 0x155c <can_get_status+0x42>
    1544:	20 f4       	brcc	.+8      	; 0x154e <can_get_status+0x34>
    1546:	88 23       	and	r24, r24
    1548:	09 f4       	brne	.+2      	; 0x154c <can_get_status+0x32>
    154a:	c9 c0       	rjmp	.+402    	; 0x16de <can_get_status+0x1c4>
    154c:	b8 c0       	rjmp	.+368    	; 0x16be <can_get_status+0x1a4>
    154e:	80 34       	cpi	r24, 0x40	; 64
    1550:	09 f4       	brne	.+2      	; 0x1554 <can_get_status+0x3a>
    1552:	aa c0       	rjmp	.+340    	; 0x16a8 <can_get_status+0x18e>
    1554:	80 3a       	cpi	r24, 0xA0	; 160
    1556:	09 f4       	brne	.+2      	; 0x155a <can_get_status+0x40>
    1558:	4e c0       	rjmp	.+156    	; 0x15f6 <can_get_status+0xdc>
    155a:	b1 c0       	rjmp	.+354    	; 0x16be <can_get_status+0x1a4>
        case MOB_RX_COMPLETED:
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
            cmd->ctrl.rtr = Can_get_rtr();
    155c:	80 91 f0 00 	lds	r24, 0x00F0
    1560:	82 fb       	bst	r24, 2
    1562:	88 27       	eor	r24, r24
    1564:	80 f9       	bld	r24, 0
    1566:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1568:	80 91 ef 00 	lds	r24, 0x00EF
    156c:	84 ff       	sbrs	r24, 4
    156e:	2d c0       	rjmp	.+90     	; 0x15ca <can_get_status+0xb0>
            {
	            cmd->ctrl.ide = 1; // extended frame
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    1574:	e3 ef       	ldi	r30, 0xF3	; 243
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	86 95       	lsr	r24
    157c:	86 95       	lsr	r24
    157e:	86 95       	lsr	r24
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	a2 ef       	ldi	r26, 0xF2	; 242
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	8c 91       	ld	r24, X
    1588:	90 81       	ld	r25, Z
    158a:	86 95       	lsr	r24
    158c:	86 95       	lsr	r24
    158e:	86 95       	lsr	r24
    1590:	20 e2       	ldi	r18, 0x20	; 32
    1592:	92 9f       	mul	r25, r18
    1594:	80 0d       	add	r24, r0
    1596:	11 24       	eor	r1, r1
    1598:	8c 83       	std	Y+4, r24	; 0x04
    159a:	e1 ef       	ldi	r30, 0xF1	; 241
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	9c 91       	ld	r25, X
    15a2:	86 95       	lsr	r24
    15a4:	86 95       	lsr	r24
    15a6:	86 95       	lsr	r24
    15a8:	20 e2       	ldi	r18, 0x20	; 32
    15aa:	92 9f       	mul	r25, r18
    15ac:	80 0d       	add	r24, r0
    15ae:	11 24       	eor	r1, r1
    15b0:	8b 83       	std	Y+3, r24	; 0x03
    15b2:	80 91 f0 00 	lds	r24, 0x00F0
    15b6:	90 81       	ld	r25, Z
    15b8:	86 95       	lsr	r24
    15ba:	86 95       	lsr	r24
    15bc:	86 95       	lsr	r24
    15be:	20 e2       	ldi	r18, 0x20	; 32
    15c0:	92 9f       	mul	r25, r18
    15c2:	80 0d       	add	r24, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <can_get_status+0xbe>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    15ca:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    15cc:	e3 ef       	ldi	r30, 0xF3	; 243
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 91 f2 00 	lds	r24, 0x00F2
    15d6:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    15d8:	80 e2       	ldi	r24, 0x20	; 32
    15da:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    15dc:	8f 81       	ldd	r24, Y+7	; 0x07
    15de:	98 85       	ldd	r25, Y+8	; 0x08
    15e0:	0e 94 3a 04 	call	0x874	; 0x874 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    15e4:	ef ee       	ldi	r30, 0xEF	; 239
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8f 73       	andi	r24, 0x3F	; 63
    15ec:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    15ee:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    15f2:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    15f4:	75 c0       	rjmp	.+234    	; 0x16e0 <can_get_status+0x1c6>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    15f6:	80 91 f0 00 	lds	r24, 0x00F0
    15fa:	82 fb       	bst	r24, 2
    15fc:	88 27       	eor	r24, r24
    15fe:	80 f9       	bld	r24, 0
    1600:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1602:	80 91 ef 00 	lds	r24, 0x00EF
    1606:	84 ff       	sbrs	r24, 4
    1608:	2d c0       	rjmp	.+90     	; 0x1664 <can_get_status+0x14a>
            {
                cmd->ctrl.ide = 1; // extended frame
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    160e:	e3 ef       	ldi	r30, 0xF3	; 243
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	86 95       	lsr	r24
    1616:	86 95       	lsr	r24
    1618:	86 95       	lsr	r24
    161a:	8d 83       	std	Y+5, r24	; 0x05
    161c:	a2 ef       	ldi	r26, 0xF2	; 242
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	8c 91       	ld	r24, X
    1622:	90 81       	ld	r25, Z
    1624:	86 95       	lsr	r24
    1626:	86 95       	lsr	r24
    1628:	86 95       	lsr	r24
    162a:	20 e2       	ldi	r18, 0x20	; 32
    162c:	92 9f       	mul	r25, r18
    162e:	80 0d       	add	r24, r0
    1630:	11 24       	eor	r1, r1
    1632:	8c 83       	std	Y+4, r24	; 0x04
    1634:	e1 ef       	ldi	r30, 0xF1	; 241
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	9c 91       	ld	r25, X
    163c:	86 95       	lsr	r24
    163e:	86 95       	lsr	r24
    1640:	86 95       	lsr	r24
    1642:	20 e2       	ldi	r18, 0x20	; 32
    1644:	92 9f       	mul	r25, r18
    1646:	80 0d       	add	r24, r0
    1648:	11 24       	eor	r1, r1
    164a:	8b 83       	std	Y+3, r24	; 0x03
    164c:	80 91 f0 00 	lds	r24, 0x00F0
    1650:	90 81       	ld	r25, Z
    1652:	86 95       	lsr	r24
    1654:	86 95       	lsr	r24
    1656:	86 95       	lsr	r24
    1658:	20 e2       	ldi	r18, 0x20	; 32
    165a:	92 9f       	mul	r25, r18
    165c:	80 0d       	add	r24, r0
    165e:	11 24       	eor	r1, r1
    1660:	8a 83       	std	Y+2, r24	; 0x02
    1662:	13 c0       	rjmp	.+38     	; 0x168a <can_get_status+0x170>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1664:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1666:	e3 ef       	ldi	r30, 0xF3	; 243
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	82 95       	swap	r24
    166e:	86 95       	lsr	r24
    1670:	87 70       	andi	r24, 0x07	; 7
    1672:	8b 83       	std	Y+3, r24	; 0x03
    1674:	80 91 f2 00 	lds	r24, 0x00F2
    1678:	90 81       	ld	r25, Z
    167a:	99 0f       	add	r25, r25
    167c:	99 0f       	add	r25, r25
    167e:	99 0f       	add	r25, r25
    1680:	82 95       	swap	r24
    1682:	86 95       	lsr	r24
    1684:	87 70       	andi	r24, 0x07	; 7
    1686:	89 0f       	add	r24, r25
    1688:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    168a:	80 ea       	ldi	r24, 0xA0	; 160
    168c:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    168e:	8f 81       	ldd	r24, Y+7	; 0x07
    1690:	98 85       	ldd	r25, Y+8	; 0x08
    1692:	0e 94 3a 04 	call	0x874	; 0x874 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1696:	ef ee       	ldi	r30, 0xEF	; 239
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8f 73       	andi	r24, 0x3F	; 63
    169e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    16a0:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    16a4:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    16a6:	1c c0       	rjmp	.+56     	; 0x16e0 <can_get_status+0x1c6>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    16a8:	80 e4       	ldi	r24, 0x40	; 64
    16aa:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    16ac:	ef ee       	ldi	r30, 0xEF	; 239
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	8f 73       	andi	r24, 0x3F	; 63
    16b4:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    16b6:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    16ba:	80 e4       	ldi	r24, 0x40	; 64
            break;
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <can_get_status+0x1c6>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    16be:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    16c0:	ef ee       	ldi	r30, 0xEF	; 239
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 73       	andi	r24, 0x3F	; 63
    16c8:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    16ca:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    16ce:	82 e0       	ldi	r24, 0x02	; 2
            break;
    16d0:	07 c0       	rjmp	.+14     	; 0x16e0 <can_get_status+0x1c6>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <can_get_status+0x1c6>
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <can_get_status+0x1c6>
    16da:	82 e0       	ldi	r24, 0x02	; 2
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <can_get_status+0x1c6>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    16de:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <send_tm_transaction_response>:
}

// Helper
static void send_tm_transaction_response(uint8_t req_by, uint8_t code)
{			
	send_arr[7] = (SELF_ID << 4)|req_by;
    16e6:	80 61       	ori	r24, 0x10	; 16
    16e8:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_COM;
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[5] = TM_TRANSACTION_RESP;
    16f2:	83 e1       	ldi	r24, 0x13	; 19
    16f4:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
    16f8:	80 91 00 02 	lds	r24, 0x0200
    16fc:	80 93 b9 01 	sts	0x01B9, r24
	send_arr[3] = 0;
    1700:	10 92 b8 01 	sts	0x01B8, r1
	send_arr[2] = 0;
    1704:	10 92 b7 01 	sts	0x01B7, r1
	send_arr[1] = 0;
    1708:	10 92 b6 01 	sts	0x01B6, r1
	send_arr[0] = code;
    170c:	60 93 b5 01 	sts	0x01B5, r22
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1710:	61 e1       	ldi	r22, 0x11	; 17
    1712:	85 eb       	ldi	r24, 0xB5	; 181
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
    171a:	08 95       	ret

0000171c <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    171c:	83 e1       	ldi	r24, 0x13	; 19
    171e:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_COM;
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[5] = RESPONSE;
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
    172e:	80 91 00 02 	lds	r24, 0x0200
    1732:	80 93 b9 01 	sts	0x01B9, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1736:	61 e1       	ldi	r22, 0x11	; 17
    1738:	85 eb       	ldi	r24, 0xB5	; 181
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
	send_now = 0;
    1740:	10 92 03 02 	sts	0x0203, r1
    1744:	08 95       	ret

00001746 <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|HK_TASK_ID;
    1746:	84 e1       	ldi	r24, 0x14	; 20
    1748:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[4] = CURRENT_MINUTE;
    1752:	80 91 00 02 	lds	r24, 0x0200
    1756:	80 93 b9 01 	sts	0x01B9, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    175a:	60 e1       	ldi	r22, 0x10	; 16
    175c:	85 eb       	ldi	r24, 0xB5	; 181
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
	send_hk = 0;
    1764:	10 92 a6 02 	sts	0x02A6, r1
    1768:	08 95       	ret

0000176a <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    176a:	0f 93       	push	r16
    176c:	1f 93       	push	r17
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	00 d0       	rcall	.+0      	; 0x1774 <send_sensor_data+0xa>
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[3];
    1778:	10 91 f5 01 	lds	r17, 0x01F5
	req_by = data_req_arr[7] >> 4;
    177c:	00 91 f9 01 	lds	r16, 0x01F9
    1780:	02 95       	swap	r16
    1782:	0f 70       	andi	r16, 0x0F	; 15
	
	if(sensor_name == EPS_TEMP)
    1784:	1a 30       	cpi	r17, 0x0A	; 10
    1786:	69 f4       	brne	.+26     	; 0x17a2 <send_sensor_data+0x38>
	{
		spi_retrieve_temp(&high, &low);
    1788:	be 01       	movw	r22, r28
    178a:	6e 5f       	subi	r22, 0xFE	; 254
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	ce 01       	movw	r24, r28
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	0e 94 45 10 	call	0x208a	; 0x208a <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	80 93 b6 01 	sts	0x01B6, r24
		send_arr[0] = low;
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	80 93 b5 01 	sts	0x01B5, r24
	//}
	//if(sensor_name == OBC_I)
	//{
	//}

	send_arr[7] = (SELF_ID << 4)|req_by;
    17a2:	00 61       	ori	r16, 0x10	; 16
    17a4:	00 93 bc 01 	sts	0x01BC, r16
	send_arr[6] = MT_DATA;
    17a8:	10 92 bb 01 	sts	0x01BB, r1
	send_arr[5] = sensor_name;
    17ac:	10 93 ba 01 	sts	0x01BA, r17
	send_arr[4] = CURRENT_MINUTE;			
    17b0:	80 91 00 02 	lds	r24, 0x0200
    17b4:	80 93 b9 01 	sts	0x01B9, r24
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    17b8:	6a e0       	ldi	r22, 0x0A	; 10
    17ba:	85 eb       	ldi	r24, 0xB5	; 181
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
	send_data = 0;
    17c2:	10 92 c8 02 	sts	0x02C8, r1
	
	return;
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	08 95       	ret

000017d4 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    17d4:	83 e1       	ldi	r24, 0x13	; 19
    17d6:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_DATA;
    17da:	10 92 bb 01 	sts	0x01BB, r1
	send_arr[5] = COMS_PACKET;
    17de:	82 e0       	ldi	r24, 0x02	; 2
    17e0:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
    17e4:	80 91 00 02 	lds	r24, 0x0200
    17e8:	80 93 b9 01 	sts	0x01B9, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    17ec:	80 91 07 02 	lds	r24, 0x0207
    17f0:	80 93 b5 01 	sts	0x01B5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    17f4:	6a e0       	ldi	r22, 0x0A	; 10
    17f6:	85 eb       	ldi	r24, 0xB5	; 181
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
	msg_received = 0;
    17fe:	10 92 0d 01 	sts	0x010D, r1
    1802:	08 95       	ret

00001804 <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    1804:	90 91 94 03 	lds	r25, 0x0394
	read_ptr = read_arr[0];
    1808:	e0 91 91 03 	lds	r30, 0x0391
    180c:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    180e:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    1810:	20 91 98 03 	lds	r18, 0x0398
    1814:	20 61       	ori	r18, 0x10	; 16
    1816:	20 93 bc 01 	sts	0x01BC, r18
	send_arr[6] = MT_COM;
    181a:	22 e0       	ldi	r18, 0x02	; 2
    181c:	20 93 bb 01 	sts	0x01BB, r18
	send_arr[5] = ACK_READ;
    1820:	26 e0       	ldi	r18, 0x06	; 6
    1822:	20 93 ba 01 	sts	0x01BA, r18
	send_arr[4] = CURRENT_MINUTE;
    1826:	20 91 00 02 	lds	r18, 0x0200
    182a:	20 93 b9 01 	sts	0x01B9, r18
	send_arr[3] = passkey;
    182e:	90 93 b8 01 	sts	0x01B8, r25
	send_arr[0] = read_val;
    1832:	80 93 b5 01 	sts	0x01B5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1836:	61 e1       	ldi	r22, 0x11	; 17
    1838:	85 eb       	ldi	r24, 0xB5	; 181
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
	read_response = 0;
    1840:	10 92 0d 02 	sts	0x020D, r1
    1844:	08 95       	ret

00001846 <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    1846:	80 91 04 01 	lds	r24, 0x0104
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    184a:	20 91 01 01 	lds	r18, 0x0101
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    184e:	90 91 98 03 	lds	r25, 0x0398
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    1852:	e0 91 02 01 	lds	r30, 0x0102
    1856:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    1858:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    185a:	90 61       	ori	r25, 0x10	; 16
    185c:	90 93 bc 01 	sts	0x01BC, r25
	send_arr[6] = MT_COM;
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	90 93 bb 01 	sts	0x01BB, r25
	send_arr[5] = ACK_WRITE;
    1866:	98 e0       	ldi	r25, 0x08	; 8
    1868:	90 93 ba 01 	sts	0x01BA, r25
	send_arr[4] = CURRENT_MINUTE;
    186c:	90 91 00 02 	lds	r25, 0x0200
    1870:	90 93 b9 01 	sts	0x01B9, r25
	send_arr[3] = passkey;
    1874:	80 93 b8 01 	sts	0x01B8, r24
	send_arr[0] = ret_val;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	80 93 b5 01 	sts	0x01B5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    187e:	61 e1       	ldi	r22, 0x11	; 17
    1880:	85 eb       	ldi	r24, 0xB5	; 181
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
	write_response = 0;
    1888:	10 92 d7 01 	sts	0x01D7, r1
    188c:	08 95       	ret

0000188e <set_sensor_high>:

void set_sensor_high(void)
{
	uint8_t sensor_name, req_by;
	uint16_t high = 0;
	sensor_name = sensh_arr[3];
    188e:	20 91 db 01 	lds	r18, 0x01DB
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    1892:	2a 30       	cpi	r18, 0x0A	; 10
    1894:	69 f4       	brne	.+26     	; 0x18b0 <set_sensor_high+0x22>
	{
		epstemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1896:	80 91 d9 01 	lds	r24, 0x01D9
    189a:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_high |= (high << 8);
    189c:	98 2f       	mov	r25, r24
    189e:	88 27       	eor	r24, r24
	sensor_name = sensh_arr[3];
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_high = sensh_arr[0];
    18a0:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		epstemp_high |= (high << 8);
    18a4:	83 2b       	or	r24, r19
    18a6:	90 93 be 01 	sts	0x01BE, r25
    18aa:	80 93 bd 01 	sts	0x01BD, r24
    18ae:	1e c0       	rjmp	.+60     	; 0x18ec <set_sensor_high+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    18b0:	21 30       	cpi	r18, 0x01	; 1
    18b2:	69 f4       	brne	.+26     	; 0x18ce <set_sensor_high+0x40>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18b4:	80 91 d9 01 	lds	r24, 0x01D9
    18b8:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);		
    18ba:	98 2f       	mov	r25, r24
    18bc:	88 27       	eor	r24, r24
		epstemp_high |= (high << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_high = sensh_arr[0];
    18be:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);		
    18c2:	83 2b       	or	r24, r19
    18c4:	90 93 02 02 	sts	0x0202, r25
    18c8:	80 93 01 02 	sts	0x0201, r24
    18cc:	1e c0       	rjmp	.+60     	; 0x190a <set_sensor_high+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	69 f4       	brne	.+26     	; 0x18ec <set_sensor_high+0x5e>
	{
		pxi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18d2:	80 91 d9 01 	lds	r24, 0x01D9
    18d6:	90 e0       	ldi	r25, 0x00	; 0
		pxi_high |= (high << 8);
    18d8:	98 2f       	mov	r25, r24
    18da:	88 27       	eor	r24, r24
		pxv_high |= (high << 8);		
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_high = sensh_arr[0];
    18dc:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
    18e0:	83 2b       	or	r24, r19
    18e2:	90 93 fe 02 	sts	0x02FE, r25
    18e6:	80 93 fd 02 	sts	0x02FD, r24
    18ea:	1e c0       	rjmp	.+60     	; 0x1928 <set_sensor_high+0x9a>
	}
	if(sensor_name == PANELY_V)
    18ec:	23 30       	cpi	r18, 0x03	; 3
    18ee:	69 f4       	brne	.+26     	; 0x190a <set_sensor_high+0x7c>
	{
		pyv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18f0:	80 91 d9 01 	lds	r24, 0x01D9
    18f4:	90 e0       	ldi	r25, 0x00	; 0
		pyv_high |= (high << 8);
    18f6:	98 2f       	mov	r25, r24
    18f8:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_high = sensh_arr[0];
    18fa:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
    18fe:	83 2b       	or	r24, r19
    1900:	90 93 a1 01 	sts	0x01A1, r25
    1904:	80 93 a0 01 	sts	0x01A0, r24
    1908:	1e c0       	rjmp	.+60     	; 0x1946 <set_sensor_high+0xb8>
	}
	if(sensor_name == PANELY_I)
    190a:	24 30       	cpi	r18, 0x04	; 4
    190c:	69 f4       	brne	.+26     	; 0x1928 <set_sensor_high+0x9a>
	{
		pyi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    190e:	80 91 d9 01 	lds	r24, 0x01D9
    1912:	90 e0       	ldi	r25, 0x00	; 0
		pyi_high |= (high << 8);
    1914:	98 2f       	mov	r25, r24
    1916:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_high = sensh_arr[0];
    1918:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
    191c:	83 2b       	or	r24, r19
    191e:	90 93 90 03 	sts	0x0390, r25
    1922:	80 93 8f 03 	sts	0x038F, r24
    1926:	1e c0       	rjmp	.+60     	; 0x1964 <set_sensor_high+0xd6>
	}
	if(sensor_name == BATTM_V)
    1928:	25 30       	cpi	r18, 0x05	; 5
    192a:	69 f4       	brne	.+26     	; 0x1946 <set_sensor_high+0xb8>
	{
		battmv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    192c:	80 91 d9 01 	lds	r24, 0x01D9
    1930:	90 e0       	ldi	r25, 0x00	; 0
		battmv_high |= (high << 8);
    1932:	98 2f       	mov	r25, r24
    1934:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_high = sensh_arr[0];
    1936:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
    193a:	83 2b       	or	r24, r19
    193c:	90 93 ff 01 	sts	0x01FF, r25
    1940:	80 93 fe 01 	sts	0x01FE, r24
    1944:	1e c0       	rjmp	.+60     	; 0x1982 <set_sensor_high+0xf4>
	}
	if(sensor_name == BATT_V)
    1946:	26 30       	cpi	r18, 0x06	; 6
    1948:	69 f4       	brne	.+26     	; 0x1964 <set_sensor_high+0xd6>
	{
		battv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    194a:	80 91 d9 01 	lds	r24, 0x01D9
    194e:	90 e0       	ldi	r25, 0x00	; 0
		battv_high |= (high << 8);
    1950:	98 2f       	mov	r25, r24
    1952:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_high = sensh_arr[0];
    1954:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
    1958:	83 2b       	or	r24, r19
    195a:	90 93 d4 02 	sts	0x02D4, r25
    195e:	80 93 d3 02 	sts	0x02D3, r24
    1962:	1e c0       	rjmp	.+60     	; 0x19a0 <set_sensor_high+0x112>
	}
	if(sensor_name == BATT_I)
    1964:	21 31       	cpi	r18, 0x11	; 17
    1966:	69 f4       	brne	.+26     	; 0x1982 <set_sensor_high+0xf4>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1968:	80 91 d9 01 	lds	r24, 0x01D9
    196c:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);
    196e:	98 2f       	mov	r25, r24
    1970:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_high = sensh_arr[0];
    1972:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
    1976:	83 2b       	or	r24, r19
    1978:	90 93 02 02 	sts	0x0202, r25
    197c:	80 93 01 02 	sts	0x0201, r24
    1980:	1e c0       	rjmp	.+60     	; 0x19be <set_sensor_high+0x130>
	}
	if(sensor_name == BATT_TEMP)
    1982:	29 30       	cpi	r18, 0x09	; 9
    1984:	69 f4       	brne	.+26     	; 0x19a0 <set_sensor_high+0x112>
	{
		battemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1986:	80 91 d9 01 	lds	r24, 0x01D9
    198a:	90 e0       	ldi	r25, 0x00	; 0
		battemp_high |= (high << 8);
    198c:	98 2f       	mov	r25, r24
    198e:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_high = sensh_arr[0];
    1990:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
    1994:	83 2b       	or	r24, r19
    1996:	90 93 a3 01 	sts	0x01A3, r25
    199a:	80 93 a2 01 	sts	0x01A2, r24
    199e:	1e c0       	rjmp	.+60     	; 0x19dc <set_sensor_high+0x14e>
	}
	if(sensor_name == COMS_V)
    19a0:	2b 30       	cpi	r18, 0x0B	; 11
    19a2:	69 f4       	brne	.+26     	; 0x19be <set_sensor_high+0x130>
	{
		comsv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19a4:	80 91 d9 01 	lds	r24, 0x01D9
    19a8:	90 e0       	ldi	r25, 0x00	; 0
		comsv_high |= (high << 8);
    19aa:	98 2f       	mov	r25, r24
    19ac:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_high = sensh_arr[0];
    19ae:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
    19b2:	83 2b       	or	r24, r19
    19b4:	90 93 e5 01 	sts	0x01E5, r25
    19b8:	80 93 e4 01 	sts	0x01E4, r24
    19bc:	1e c0       	rjmp	.+60     	; 0x19fa <set_sensor_high+0x16c>
	}
	if(sensor_name == COMS_I)
    19be:	2c 30       	cpi	r18, 0x0C	; 12
    19c0:	69 f4       	brne	.+26     	; 0x19dc <set_sensor_high+0x14e>
	{
		comsi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19c2:	80 91 d9 01 	lds	r24, 0x01D9
    19c6:	90 e0       	ldi	r25, 0x00	; 0
		comsi_high |= (high << 8);
    19c8:	98 2f       	mov	r25, r24
    19ca:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_high = sensh_arr[0];
    19cc:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
    19d0:	83 2b       	or	r24, r19
    19d2:	90 93 ca 01 	sts	0x01CA, r25
    19d6:	80 93 c9 01 	sts	0x01C9, r24
    19da:	1e c0       	rjmp	.+60     	; 0x1a18 <set_sensor_high+0x18a>
	}
	if(sensor_name == PAY_V)
    19dc:	2d 30       	cpi	r18, 0x0D	; 13
    19de:	69 f4       	brne	.+26     	; 0x19fa <set_sensor_high+0x16c>
	{
		payv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19e0:	80 91 d9 01 	lds	r24, 0x01D9
    19e4:	90 e0       	ldi	r25, 0x00	; 0
		payv_high |= (high << 8);
    19e6:	98 2f       	mov	r25, r24
    19e8:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_high = sensh_arr[0];
    19ea:	30 91 d8 01 	lds	r19, 0x01D8
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
    19ee:	83 2b       	or	r24, r19
    19f0:	90 93 9f 01 	sts	0x019F, r25
    19f4:	80 93 9e 01 	sts	0x019E, r24
    19f8:	1e c0       	rjmp	.+60     	; 0x1a36 <set_sensor_high+0x1a8>
	}
	if(sensor_name == PAY_I)
    19fa:	2e 30       	cpi	r18, 0x0E	; 14
    19fc:	69 f4       	brne	.+26     	; 0x1a18 <set_sensor_high+0x18a>
	{
		payi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19fe:	80 91 d9 01 	lds	r24, 0x01D9
    1a02:	90 e0       	ldi	r25, 0x00	; 0
		payi_high |= (high << 8);
    1a04:	98 2f       	mov	r25, r24
    1a06:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_high = sensh_arr[0];
    1a08:	20 91 d8 01 	lds	r18, 0x01D8
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
    1a0c:	82 2b       	or	r24, r18
    1a0e:	90 93 e7 02 	sts	0x02E7, r25
    1a12:	80 93 e6 02 	sts	0x02E6, r24
    1a16:	1d c0       	rjmp	.+58     	; 0x1a52 <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_V)
    1a18:	2f 30       	cpi	r18, 0x0F	; 15
    1a1a:	69 f4       	brne	.+26     	; 0x1a36 <set_sensor_high+0x1a8>
	{
		obcv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a1c:	80 91 d9 01 	lds	r24, 0x01D9
    1a20:	90 e0       	ldi	r25, 0x00	; 0
		obcv_high |= (high << 8);
    1a22:	98 2f       	mov	r25, r24
    1a24:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_high = sensh_arr[0];
    1a26:	20 91 d8 01 	lds	r18, 0x01D8
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
    1a2a:	82 2b       	or	r24, r18
    1a2c:	90 93 d6 01 	sts	0x01D6, r25
    1a30:	80 93 d5 01 	sts	0x01D5, r24
    1a34:	0e c0       	rjmp	.+28     	; 0x1a52 <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_I)
    1a36:	20 31       	cpi	r18, 0x10	; 16
    1a38:	61 f4       	brne	.+24     	; 0x1a52 <set_sensor_high+0x1c4>
	{
		obci_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a3a:	80 91 d9 01 	lds	r24, 0x01D9
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
		obci_high |= (high << 8);
    1a40:	98 2f       	mov	r25, r24
    1a42:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_high = sensh_arr[0];
    1a44:	20 91 d8 01 	lds	r18, 0x01D8
		high = (uint16_t)sensh_arr[1];
		obci_high |= (high << 8);
    1a48:	82 2b       	or	r24, r18
    1a4a:	90 93 a8 02 	sts	0x02A8, r25
    1a4e:	80 93 a7 02 	sts	0x02A7, r24
	}
	
	set_sens_h = 0;
    1a52:	10 92 c5 02 	sts	0x02C5, r1
    1a56:	08 95       	ret

00001a58 <set_sensor_low>:

void set_sensor_low(void)
{
	uint8_t sensor_name, req_by;
	uint16_t low = 0;
	sensor_name = sensl_arr[3];
    1a58:	20 91 f7 02 	lds	r18, 0x02F7
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    1a5c:	2a 30       	cpi	r18, 0x0A	; 10
    1a5e:	69 f4       	brne	.+26     	; 0x1a7a <set_sensor_low+0x22>
	{
		epstemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a60:	80 91 f5 02 	lds	r24, 0x02F5
    1a64:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_low |= (low << 8);
    1a66:	98 2f       	mov	r25, r24
    1a68:	88 27       	eor	r24, r24
	sensor_name = sensl_arr[3];
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_low = sensl_arr[0];
    1a6a:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		epstemp_low |= (low << 8);
    1a6e:	83 2b       	or	r24, r19
    1a70:	90 93 c0 01 	sts	0x01C0, r25
    1a74:	80 93 bf 01 	sts	0x01BF, r24
    1a78:	1e c0       	rjmp	.+60     	; 0x1ab6 <set_sensor_low+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    1a7a:	21 30       	cpi	r18, 0x01	; 1
    1a7c:	69 f4       	brne	.+26     	; 0x1a98 <set_sensor_low+0x40>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a7e:	80 91 f5 02 	lds	r24, 0x02F5
    1a82:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1a84:	98 2f       	mov	r25, r24
    1a86:	88 27       	eor	r24, r24
		epstemp_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_low = sensl_arr[0];
    1a88:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1a8c:	83 2b       	or	r24, r19
    1a8e:	90 93 aa 02 	sts	0x02AA, r25
    1a92:	80 93 a9 02 	sts	0x02A9, r24
    1a96:	1e c0       	rjmp	.+60     	; 0x1ad4 <set_sensor_low+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	69 f4       	brne	.+26     	; 0x1ab6 <set_sensor_low+0x5e>
	{
		pxi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a9c:	80 91 f5 02 	lds	r24, 0x02F5
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
		pxi_low |= (low << 8);
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	88 27       	eor	r24, r24
		pxv_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_low = sensl_arr[0];
    1aa6:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
    1aaa:	83 2b       	or	r24, r19
    1aac:	90 93 d4 01 	sts	0x01D4, r25
    1ab0:	80 93 d3 01 	sts	0x01D3, r24
    1ab4:	1e c0       	rjmp	.+60     	; 0x1af2 <set_sensor_low+0x9a>
	}
	if(sensor_name == PANELY_V)
    1ab6:	23 30       	cpi	r18, 0x03	; 3
    1ab8:	69 f4       	brne	.+26     	; 0x1ad4 <set_sensor_low+0x7c>
	{
		pyv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1aba:	80 91 f5 02 	lds	r24, 0x02F5
    1abe:	90 e0       	ldi	r25, 0x00	; 0
		pyv_low |= (low << 8);
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_low = sensl_arr[0];
    1ac4:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
    1ac8:	83 2b       	or	r24, r19
    1aca:	90 93 ac 02 	sts	0x02AC, r25
    1ace:	80 93 ab 02 	sts	0x02AB, r24
    1ad2:	1e c0       	rjmp	.+60     	; 0x1b10 <set_sensor_low+0xb8>
	}
	if(sensor_name == PANELY_I)
    1ad4:	24 30       	cpi	r18, 0x04	; 4
    1ad6:	69 f4       	brne	.+26     	; 0x1af2 <set_sensor_low+0x9a>
	{
		pyi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1ad8:	80 91 f5 02 	lds	r24, 0x02F5
    1adc:	90 e0       	ldi	r25, 0x00	; 0
		pyi_low |= (low << 8);
    1ade:	98 2f       	mov	r25, r24
    1ae0:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_low = sensl_arr[0];
    1ae2:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
    1ae6:	83 2b       	or	r24, r19
    1ae8:	90 93 bc 02 	sts	0x02BC, r25
    1aec:	80 93 bb 02 	sts	0x02BB, r24
    1af0:	1e c0       	rjmp	.+60     	; 0x1b2e <set_sensor_low+0xd6>
	}
	if(sensor_name == BATTM_V)
    1af2:	25 30       	cpi	r18, 0x05	; 5
    1af4:	69 f4       	brne	.+26     	; 0x1b10 <set_sensor_low+0xb8>
	{
		battmv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1af6:	80 91 f5 02 	lds	r24, 0x02F5
    1afa:	90 e0       	ldi	r25, 0x00	; 0
		battmv_low |= (low << 8);
    1afc:	98 2f       	mov	r25, r24
    1afe:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_low = sensl_arr[0];
    1b00:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
    1b04:	83 2b       	or	r24, r19
    1b06:	90 93 fd 01 	sts	0x01FD, r25
    1b0a:	80 93 fc 01 	sts	0x01FC, r24
    1b0e:	1e c0       	rjmp	.+60     	; 0x1b4c <set_sensor_low+0xf4>
	}
	if(sensor_name == BATT_V)
    1b10:	26 30       	cpi	r18, 0x06	; 6
    1b12:	69 f4       	brne	.+26     	; 0x1b2e <set_sensor_low+0xd6>
	{
		battv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b14:	80 91 f5 02 	lds	r24, 0x02F5
    1b18:	90 e0       	ldi	r25, 0x00	; 0
		battv_low |= (low << 8);
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_low = sensl_arr[0];
    1b1e:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
    1b22:	83 2b       	or	r24, r19
    1b24:	90 93 0a 01 	sts	0x010A, r25
    1b28:	80 93 09 01 	sts	0x0109, r24
    1b2c:	1e c0       	rjmp	.+60     	; 0x1b6a <set_sensor_low+0x112>
	}
	if(sensor_name == BATT_I)
    1b2e:	21 31       	cpi	r18, 0x11	; 17
    1b30:	69 f4       	brne	.+26     	; 0x1b4c <set_sensor_low+0xf4>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b32:	80 91 f5 02 	lds	r24, 0x02F5
    1b36:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1b38:	98 2f       	mov	r25, r24
    1b3a:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_low = sensl_arr[0];
    1b3c:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1b40:	83 2b       	or	r24, r19
    1b42:	90 93 aa 02 	sts	0x02AA, r25
    1b46:	80 93 a9 02 	sts	0x02A9, r24
    1b4a:	1e c0       	rjmp	.+60     	; 0x1b88 <set_sensor_low+0x130>
	}
	if(sensor_name == BATT_TEMP)
    1b4c:	29 30       	cpi	r18, 0x09	; 9
    1b4e:	69 f4       	brne	.+26     	; 0x1b6a <set_sensor_low+0x112>
	{
		battemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b50:	80 91 f5 02 	lds	r24, 0x02F5
    1b54:	90 e0       	ldi	r25, 0x00	; 0
		battemp_low |= (low << 8);
    1b56:	98 2f       	mov	r25, r24
    1b58:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_low = sensl_arr[0];
    1b5a:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
    1b5e:	83 2b       	or	r24, r19
    1b60:	90 93 d6 02 	sts	0x02D6, r25
    1b64:	80 93 d5 02 	sts	0x02D5, r24
    1b68:	1e c0       	rjmp	.+60     	; 0x1ba6 <set_sensor_low+0x14e>
	}
	if(sensor_name == COMS_V)
    1b6a:	2b 30       	cpi	r18, 0x0B	; 11
    1b6c:	69 f4       	brne	.+26     	; 0x1b88 <set_sensor_low+0x130>
	{
		comsv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b6e:	80 91 f5 02 	lds	r24, 0x02F5
    1b72:	90 e0       	ldi	r25, 0x00	; 0
		comsv_low |= (low << 8);
    1b74:	98 2f       	mov	r25, r24
    1b76:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_low = sensl_arr[0];
    1b78:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
    1b7c:	83 2b       	or	r24, r19
    1b7e:	90 93 fb 01 	sts	0x01FB, r25
    1b82:	80 93 fa 01 	sts	0x01FA, r24
    1b86:	1e c0       	rjmp	.+60     	; 0x1bc4 <set_sensor_low+0x16c>
	}
	if(sensor_name == COMS_I)
    1b88:	2c 30       	cpi	r18, 0x0C	; 12
    1b8a:	69 f4       	brne	.+26     	; 0x1ba6 <set_sensor_low+0x14e>
	{
		comsi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b8c:	80 91 f5 02 	lds	r24, 0x02F5
    1b90:	90 e0       	ldi	r25, 0x00	; 0
		comsi_low |= (low << 8);
    1b92:	98 2f       	mov	r25, r24
    1b94:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_low = sensl_arr[0];
    1b96:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
    1b9a:	83 2b       	or	r24, r19
    1b9c:	90 93 e5 02 	sts	0x02E5, r25
    1ba0:	80 93 e4 02 	sts	0x02E4, r24
    1ba4:	1e c0       	rjmp	.+60     	; 0x1be2 <set_sensor_low+0x18a>
	}
	if(sensor_name == PAY_V)
    1ba6:	2d 30       	cpi	r18, 0x0D	; 13
    1ba8:	69 f4       	brne	.+26     	; 0x1bc4 <set_sensor_low+0x16c>
	{
		payv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1baa:	80 91 f5 02 	lds	r24, 0x02F5
    1bae:	90 e0       	ldi	r25, 0x00	; 0
		payv_low |= (low << 8);
    1bb0:	98 2f       	mov	r25, r24
    1bb2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_low = sensl_arr[0];
    1bb4:	30 91 f4 02 	lds	r19, 0x02F4
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
    1bb8:	83 2b       	or	r24, r19
    1bba:	90 93 0c 01 	sts	0x010C, r25
    1bbe:	80 93 0b 01 	sts	0x010B, r24
    1bc2:	1e c0       	rjmp	.+60     	; 0x1c00 <set_sensor_low+0x1a8>
	}
	if(sensor_name == PAY_I)
    1bc4:	2e 30       	cpi	r18, 0x0E	; 14
    1bc6:	69 f4       	brne	.+26     	; 0x1be2 <set_sensor_low+0x18a>
	{
		payi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bc8:	80 91 f5 02 	lds	r24, 0x02F5
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
		payi_low |= (low << 8);
    1bce:	98 2f       	mov	r25, r24
    1bd0:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_low = sensl_arr[0];
    1bd2:	20 91 f4 02 	lds	r18, 0x02F4
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
    1bd6:	82 2b       	or	r24, r18
    1bd8:	90 93 06 02 	sts	0x0206, r25
    1bdc:	80 93 05 02 	sts	0x0205, r24
    1be0:	1d c0       	rjmp	.+58     	; 0x1c1c <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_V)
    1be2:	2f 30       	cpi	r18, 0x0F	; 15
    1be4:	69 f4       	brne	.+26     	; 0x1c00 <set_sensor_low+0x1a8>
	{
		obcv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1be6:	80 91 f5 02 	lds	r24, 0x02F5
    1bea:	90 e0       	ldi	r25, 0x00	; 0
		obcv_low |= (low << 8);
    1bec:	98 2f       	mov	r25, r24
    1bee:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_low = sensl_arr[0];
    1bf0:	20 91 f4 02 	lds	r18, 0x02F4
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
    1bf4:	82 2b       	or	r24, r18
    1bf6:	90 93 f3 02 	sts	0x02F3, r25
    1bfa:	80 93 f2 02 	sts	0x02F2, r24
    1bfe:	0e c0       	rjmp	.+28     	; 0x1c1c <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_I)
    1c00:	20 31       	cpi	r18, 0x10	; 16
    1c02:	61 f4       	brne	.+24     	; 0x1c1c <set_sensor_low+0x1c4>
	{
		obci_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1c04:	80 91 f5 02 	lds	r24, 0x02F5
    1c08:	90 e0       	ldi	r25, 0x00	; 0
		obci_low |= (low << 8);
    1c0a:	98 2f       	mov	r25, r24
    1c0c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_low = sensl_arr[0];
    1c0e:	20 91 f4 02 	lds	r18, 0x02F4
		low = (uint16_t)sensl_arr[1];
		obci_low |= (low << 8);
    1c12:	82 2b       	or	r24, r18
    1c14:	90 93 e0 02 	sts	0x02E0, r25
    1c18:	80 93 df 02 	sts	0x02DF, r24
	}
	
	set_sens_l = 0;
    1c1c:	10 92 ca 02 	sts	0x02CA, r1
    1c20:	08 95       	ret

00001c22 <set_var>:
}

void set_var(void)
{
	uint8_t var_name;
	var_name = setv_arr[3];
    1c22:	80 91 ce 01 	lds	r24, 0x01CE
	
	if(var_name == MPPTA)
    1c26:	8f 3f       	cpi	r24, 0xFF	; 255
    1c28:	29 f4       	brne	.+10     	; 0x1c34 <set_var+0x12>
	{
		mppta = setv_arr[0];
    1c2a:	80 91 cb 01 	lds	r24, 0x01CB
    1c2e:	80 93 e8 02 	sts	0x02E8, r24
    1c32:	06 c0       	rjmp	.+12     	; 0x1c40 <set_var+0x1e>
	}
	if(var_name == MPPTB)
    1c34:	8e 3f       	cpi	r24, 0xFE	; 254
    1c36:	21 f4       	brne	.+8      	; 0x1c40 <set_var+0x1e>
	{
		mpptb = setv_arr[0];
    1c38:	80 91 cb 01 	lds	r24, 0x01CB
    1c3c:	80 93 b4 01 	sts	0x01B4, r24
	}
	
	set_varf = 0;
    1c40:	10 92 c9 02 	sts	0x02C9, r1
    1c44:	08 95       	ret

00001c46 <receive_tm_msg>:
}

void receive_tm_msg(void)
{
	uint8_t req_by, obc_seq_count;
	req_by = new_tm_msg[7] >> 4;
    1c46:	80 91 d2 02 	lds	r24, 0x02D2
    1c4a:	82 95       	swap	r24
    1c4c:	8f 70       	andi	r24, 0x0F	; 15
	obc_seq_count = new_tm_msg[4];
    1c4e:	90 91 cf 02 	lds	r25, 0x02CF

	if(obc_seq_count > (tm_sequence_count + 1))
    1c52:	29 2f       	mov	r18, r25
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	60 91 00 01 	lds	r22, 0x0100
    1c5a:	46 2f       	mov	r20, r22
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	4f 5f       	subi	r20, 0xFF	; 255
    1c60:	5f 4f       	sbci	r21, 0xFF	; 255
    1c62:	42 17       	cp	r20, r18
    1c64:	53 07       	cpc	r21, r19
    1c66:	94 f4       	brge	.+36     	; 0x1c8c <receive_tm_msg+0x46>
	{
		send_tm_transaction_response(req_by, 0xFF);		// Let the OBC know that the transaction failed.
    1c68:	6f ef       	ldi	r22, 0xFF	; 255
    1c6a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1c6e:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1c72:	10 92 04 02 	sts	0x0204, r1
		receiving_tmf = 0;
    1c76:	10 92 e9 02 	sts	0x02E9, r1
    1c7a:	ee e0       	ldi	r30, 0x0E	; 14
    1c7c:	f2 e0       	ldi	r31, 0x02	; 2
    1c7e:	8d e9       	ldi	r24, 0x9D	; 157
    1c80:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1c82:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1c84:	e8 17       	cp	r30, r24
    1c86:	f9 07       	cpc	r31, r25
    1c88:	e1 f7       	brne	.-8      	; 0x1c82 <receive_tm_msg+0x3c>
    1c8a:	08 95       	ret
		new_tm_msgf = 0;
		receiving_tmf = 0;
		clear_current_tm();
		return;
	}
	if(current_tm_fullf)
    1c8c:	70 91 c7 02 	lds	r23, 0x02C7
    1c90:	77 23       	and	r23, r23
    1c92:	51 f0       	breq	.+20     	; 0x1ca8 <receive_tm_msg+0x62>
	{
		send_tm_transaction_response(req_by, 0xFF);
    1c94:	6f ef       	ldi	r22, 0xFF	; 255
    1c96:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1c9a:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1c9e:	10 92 04 02 	sts	0x0204, r1
		receiving_tmf = 0;
    1ca2:	10 92 e9 02 	sts	0x02E9, r1
		return;
    1ca6:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
    1ca8:	91 11       	cpse	r25, r1
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <receive_tm_msg+0x6c>
    1cac:	66 23       	and	r22, r22
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <receive_tm_msg+0x6c>
    1cb0:	47 c0       	rjmp	.+142    	; 0x1d40 <receive_tm_msg+0xfa>
    1cb2:	24 17       	cp	r18, r20
    1cb4:	35 07       	cpc	r19, r21
    1cb6:	91 f5       	brne	.+100    	; 0x1d1c <receive_tm_msg+0xd6>
	{
		tm_sequence_count = obc_seq_count;
    1cb8:	90 93 00 01 	sts	0x0100, r25
		receiving_tmf = 1;
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	40 93 e9 02 	sts	0x02E9, r20
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1cc2:	f9 01       	movw	r30, r18
    1cc4:	ee 0f       	add	r30, r30
    1cc6:	ff 1f       	adc	r31, r31
    1cc8:	ee 0f       	add	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	e2 5f       	subi	r30, 0xF2	; 242
    1cce:	fd 4f       	sbci	r31, 0xFD	; 253
    1cd0:	20 91 cb 02 	lds	r18, 0x02CB
    1cd4:	20 83       	st	Z, r18
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1cd6:	20 91 cc 02 	lds	r18, 0x02CC
    1cda:	21 83       	std	Z+1, r18	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1cdc:	20 91 cd 02 	lds	r18, 0x02CD
    1ce0:	22 83       	std	Z+2, r18	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1ce2:	20 91 ce 02 	lds	r18, 0x02CE
    1ce6:	23 83       	std	Z+3, r18	; 0x03
		if(obc_seq_count == 35)
    1ce8:	93 32       	cpi	r25, 0x23	; 35
    1cea:	a9 f4       	brne	.+42     	; 0x1d16 <receive_tm_msg+0xd0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
    1cec:	10 92 00 01 	sts	0x0100, r1
			receiving_tmf = 0;
    1cf0:	10 92 e9 02 	sts	0x02E9, r1
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	90 93 c7 02 	sts	0x02C7, r25
    1cfa:	ee e0       	ldi	r30, 0x0E	; 14
    1cfc:	f2 e0       	ldi	r31, 0x02	; 2
    1cfe:	ae e0       	ldi	r26, 0x0E	; 14
    1d00:	b1 e0       	ldi	r27, 0x01	; 1
    1d02:	2d e9       	ldi	r18, 0x9D	; 157
    1d04:	32 e0       	ldi	r19, 0x02	; 2
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
	{
		tm_to_downlink[i] = current_tm[i];
    1d06:	91 91       	ld	r25, Z+
    1d08:	9d 93       	st	X+, r25

// This function is necessary so that we can simply trash current_tm if a new transaction fails.
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
    1d0a:	e2 17       	cp	r30, r18
    1d0c:	f3 07       	cpc	r31, r19
    1d0e:	d9 f7       	brne	.-10     	; 0x1d06 <receive_tm_msg+0xc0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
			receiving_tmf = 0;
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
			store_current_tm();										// Put current_tm[] into tm_to_downlink[]
			send_tm_transaction_response(req_by, obc_seq_count);	// Let the OBC know that the transaction succeeded.
    1d10:	63 e2       	ldi	r22, 0x23	; 35
    1d12:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <send_tm_transaction_response>
		}
		new_tm_msgf = 0;
    1d16:	10 92 04 02 	sts	0x0204, r1
		return;
    1d1a:	08 95       	ret
	}
	else
	{
		send_tm_transaction_response(req_by, 0xFF);
    1d1c:	6f ef       	ldi	r22, 0xFF	; 255
    1d1e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1d22:	10 92 00 01 	sts	0x0100, r1
		receiving_tmf = 0;
    1d26:	10 92 e9 02 	sts	0x02E9, r1
		new_tm_msgf = 0;
    1d2a:	10 92 04 02 	sts	0x0204, r1
    1d2e:	ee e0       	ldi	r30, 0x0E	; 14
    1d30:	f2 e0       	ldi	r31, 0x02	; 2
    1d32:	8d e9       	ldi	r24, 0x9D	; 157
    1d34:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1d36:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1d38:	e8 17       	cp	r30, r24
    1d3a:	f9 07       	cpc	r31, r25
    1d3c:	e1 f7       	brne	.-8      	; 0x1d36 <receive_tm_msg+0xf0>
    1d3e:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
	{
		tm_sequence_count = obc_seq_count;
		receiving_tmf = 1;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	80 93 e9 02 	sts	0x02E9, r24
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1d46:	f9 01       	movw	r30, r18
    1d48:	ee 0f       	add	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	ee 0f       	add	r30, r30
    1d4e:	ff 1f       	adc	r31, r31
    1d50:	e2 5f       	subi	r30, 0xF2	; 242
    1d52:	fd 4f       	sbci	r31, 0xFD	; 253
    1d54:	80 91 cb 02 	lds	r24, 0x02CB
    1d58:	80 83       	st	Z, r24
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1d5a:	80 91 cc 02 	lds	r24, 0x02CC
    1d5e:	81 83       	std	Z+1, r24	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1d60:	80 91 cd 02 	lds	r24, 0x02CD
    1d64:	82 83       	std	Z+2, r24	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1d66:	80 91 ce 02 	lds	r24, 0x02CE
    1d6a:	83 83       	std	Z+3, r24	; 0x03
    1d6c:	d4 cf       	rjmp	.-88     	; 0x1d16 <receive_tm_msg+0xd0>

00001d6e <alert_obc_tcp_ready>:


// Lets the OBC know that we have a TC packet ready.
void alert_obc_tcp_ready(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1d6e:	8a e1       	ldi	r24, 0x1A	; 26
    1d70:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_COM;
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[5] = TC_PACKET_READY;
    1d7a:	81 e1       	ldi	r24, 0x11	; 17
    1d7c:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
    1d80:	80 91 00 02 	lds	r24, 0x0200
    1d84:	80 93 b9 01 	sts	0x01B9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1d88:	61 e1       	ldi	r22, 0x11	; 17
    1d8a:	85 eb       	ldi	r24, 0xB5	; 181
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
    1d92:	08 95       	ret

00001d94 <send_pus_packet_tc>:
	}
	return;
}

void send_pus_packet_tc(void)
{
    1d94:	2f 92       	push	r2
    1d96:	3f 92       	push	r3
    1d98:	4f 92       	push	r4
    1d9a:	5f 92       	push	r5
    1d9c:	6f 92       	push	r6
    1d9e:	7f 92       	push	r7
    1da0:	8f 92       	push	r8
    1da2:	9f 92       	push	r9
    1da4:	af 92       	push	r10
    1da6:	bf 92       	push	r11
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
	uint8_t i, timeout = 250;
	uint8_t num_transfers = PACKET_LENGTH / 4;
	
	tc_transfer_completef = 0;
    1db8:	10 92 e3 01 	sts	0x01E3, r1
	start_tc_transferf = 0;
    1dbc:	10 92 e2 01 	sts	0x01E2, r1
	alert_obc_tcp_ready();
    1dc0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <alert_obc_tcp_ready>
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1dc4:	80 91 e2 01 	lds	r24, 0x01E2
    1dc8:	81 11       	cpse	r24, r1
    1dca:	0d c0       	rjmp	.+26     	; 0x1de6 <send_pus_packet_tc+0x52>
    1dcc:	ca ef       	ldi	r28, 0xFA	; 250
    1dce:	03 c0       	rjmp	.+6      	; 0x1dd6 <send_pus_packet_tc+0x42>
    1dd0:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <send_pus_packet_tc+0x42>
    1dd4:	86 c0       	rjmp	.+268    	; 0x1ee2 <send_pus_packet_tc+0x14e>
		{
			return;
		}
		delay_us(10);
    1dd6:	8a e0       	ldi	r24, 0x0A	; 10
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	0e 94 79 10 	call	0x20f2	; 0x20f2 <delay_us>
	uint8_t num_transfers = PACKET_LENGTH / 4;
	
	tc_transfer_completef = 0;
	start_tc_transferf = 0;
	alert_obc_tcp_ready();
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1dde:	80 91 e2 01 	lds	r24, 0x01E2
    1de2:	88 23       	and	r24, r24
    1de4:	a9 f3       	breq	.-22     	; 0x1dd0 <send_pus_packet_tc+0x3c>
		{
			return;
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
    1de6:	10 92 e2 01 	sts	0x01E2, r1
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1dea:	80 91 e3 01 	lds	r24, 0x01E3
    1dee:	8f 3f       	cpi	r24, 0xFF	; 255
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <send_pus_packet_tc+0x60>
    1df2:	77 c0       	rjmp	.+238    	; 0x1ee2 <send_pus_packet_tc+0x14e>
    1df4:	0f 2e       	mov	r0, r31
    1df6:	f2 e0       	ldi	r31, 0x02	; 2
    1df8:	4f 2e       	mov	r4, r31
    1dfa:	f3 e0       	ldi	r31, 0x03	; 3
    1dfc:	5f 2e       	mov	r5, r31
    1dfe:	f0 2d       	mov	r31, r0
		delay_us(10);
	}				
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
    1e00:	31 2c       	mov	r3, r1
	{
		if(tc_transfer_completef == 0xFF)
			return;
		send_arr[0] = current_tc[(i * 4)];
    1e02:	c5 eb       	ldi	r28, 0xB5	; 181
    1e04:	d1 e0       	ldi	r29, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1e06:	0f 2e       	mov	r0, r31
    1e08:	f6 eb       	ldi	r31, 0xB6	; 182
    1e0a:	af 2e       	mov	r10, r31
    1e0c:	f1 e0       	ldi	r31, 0x01	; 1
    1e0e:	bf 2e       	mov	r11, r31
    1e10:	f0 2d       	mov	r31, r0
		send_arr[2] = current_tc[(i * 4) + 2];
    1e12:	0f 2e       	mov	r0, r31
    1e14:	f7 eb       	ldi	r31, 0xB7	; 183
    1e16:	cf 2e       	mov	r12, r31
    1e18:	f1 e0       	ldi	r31, 0x01	; 1
    1e1a:	df 2e       	mov	r13, r31
    1e1c:	f0 2d       	mov	r31, r0
		send_arr[3] = current_tc[(i * 4) + 3];
    1e1e:	0f 2e       	mov	r0, r31
    1e20:	f8 eb       	ldi	r31, 0xB8	; 184
    1e22:	ef 2e       	mov	r14, r31
    1e24:	f1 e0       	ldi	r31, 0x01	; 1
    1e26:	ff 2e       	mov	r15, r31
    1e28:	f0 2d       	mov	r31, r0
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1e2a:	0c eb       	ldi	r16, 0xBC	; 188
    1e2c:	11 e0       	ldi	r17, 0x01	; 1
    1e2e:	0f 2e       	mov	r0, r31
    1e30:	fa e1       	ldi	r31, 0x1A	; 26
    1e32:	2f 2e       	mov	r2, r31
    1e34:	f0 2d       	mov	r31, r0
	send_arr[6] = MT_COM;
    1e36:	0f 2e       	mov	r0, r31
    1e38:	fb eb       	ldi	r31, 0xBB	; 187
    1e3a:	8f 2e       	mov	r8, r31
    1e3c:	f1 e0       	ldi	r31, 0x01	; 1
    1e3e:	9f 2e       	mov	r9, r31
    1e40:	f0 2d       	mov	r31, r0
	send_arr[5] = SEND_TC;
    1e42:	0f 2e       	mov	r0, r31
    1e44:	fa eb       	ldi	r31, 0xBA	; 186
    1e46:	6f 2e       	mov	r6, r31
    1e48:	f1 e0       	ldi	r31, 0x01	; 1
    1e4a:	7f 2e       	mov	r7, r31
    1e4c:	f0 2d       	mov	r31, r0
    1e4e:	08 c0       	rjmp	.+16     	; 0x1e60 <send_pus_packet_tc+0xcc>
    1e50:	84 e0       	ldi	r24, 0x04	; 4
    1e52:	48 0e       	add	r4, r24
    1e54:	51 1c       	adc	r5, r1
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1e56:	80 91 e3 01 	lds	r24, 0x01E3
    1e5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <send_pus_packet_tc+0xcc>
    1e5e:	41 c0       	rjmp	.+130    	; 0x1ee2 <send_pus_packet_tc+0x14e>
    1e60:	f2 01       	movw	r30, r4
    1e62:	33 97       	sbiw	r30, 0x03	; 3
			return;
		send_arr[0] = current_tc[(i * 4)];
    1e64:	80 81       	ld	r24, Z
    1e66:	88 83       	st	Y, r24
    1e68:	31 96       	adiw	r30, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1e6a:	80 81       	ld	r24, Z
    1e6c:	f5 01       	movw	r30, r10
    1e6e:	80 83       	st	Z, r24
    1e70:	f2 01       	movw	r30, r4
    1e72:	31 97       	sbiw	r30, 0x01	; 1
		send_arr[2] = current_tc[(i * 4) + 2];
    1e74:	80 81       	ld	r24, Z
    1e76:	f6 01       	movw	r30, r12
    1e78:	80 83       	st	Z, r24
		send_arr[3] = current_tc[(i * 4) + 3];
    1e7a:	f2 01       	movw	r30, r4
    1e7c:	80 81       	ld	r24, Z
    1e7e:	f7 01       	movw	r30, r14
    1e80:	80 83       	st	Z, r24
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1e82:	f8 01       	movw	r30, r16
    1e84:	20 82       	st	Z, r2
	send_arr[6] = MT_COM;
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	f4 01       	movw	r30, r8
    1e8a:	80 83       	st	Z, r24
	send_arr[5] = SEND_TC;
    1e8c:	8e e0       	ldi	r24, 0x0E	; 14
    1e8e:	f3 01       	movw	r30, r6
    1e90:	80 83       	st	Z, r24
	send_arr[4] = packet_count;
    1e92:	e9 eb       	ldi	r30, 0xB9	; 185
    1e94:	f1 e0       	ldi	r31, 0x01	; 1
    1e96:	30 82       	st	Z, r3
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1e98:	61 e1       	ldi	r22, 0x11	; 17
    1e9a:	ce 01       	movw	r24, r28
    1e9c:	0e 94 87 00 	call	0x10e	; 0x10e <can_send_message>
		send_arr[0] = current_tc[(i * 4)];
		send_arr[1] = current_tc[(i * 4) + 1];
		send_arr[2] = current_tc[(i * 4) + 2];
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 8b 10 	call	0x2116	; 0x2116 <delay_ms>
		delay_us(10);
	}				
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
    1ea8:	33 94       	inc	r3
    1eaa:	f3 e2       	ldi	r31, 0x23	; 35
    1eac:	3f 12       	cpse	r3, r31
    1eae:	d0 cf       	rjmp	.-96     	; 0x1e50 <send_pus_packet_tc+0xbc>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1eb0:	80 91 e3 01 	lds	r24, 0x01E3
    1eb4:	81 11       	cpse	r24, r1
    1eb6:	0c c0       	rjmp	.+24     	; 0x1ed0 <send_pus_packet_tc+0x13c>
    1eb8:	c4 e6       	ldi	r28, 0x64	; 100
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <send_pus_packet_tc+0x12c>
    1ebc:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1ebe:	89 f0       	breq	.+34     	; 0x1ee2 <send_pus_packet_tc+0x14e>
		{
			return;
		}
		delay_us(100);
    1ec0:	84 e6       	ldi	r24, 0x64	; 100
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <delay_us>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1ec8:	80 91 e3 01 	lds	r24, 0x01E3
    1ecc:	88 23       	and	r24, r24
    1ece:	b1 f3       	breq	.-20     	; 0x1ebc <send_pus_packet_tc+0x128>
			return;
		}
		delay_us(100);
	}
	
	if(tc_transfer_completef != 35)
    1ed0:	83 32       	cpi	r24, 0x23	; 35
    1ed2:	19 f0       	breq	.+6      	; 0x1eda <send_pus_packet_tc+0x146>
	{
		tc_transfer_completef = 0;
    1ed4:	10 92 e3 01 	sts	0x01E3, r1
		return;
    1ed8:	04 c0       	rjmp	.+8      	; 0x1ee2 <send_pus_packet_tc+0x14e>
	}
	else
	{
		tc_transfer_completef = 0;
    1eda:	10 92 e3 01 	sts	0x01E3, r1
		tc_packet_readyf = 0;
    1ede:	10 92 c6 02 	sts	0x02C6, r1
		return;
	}
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	1f 91       	pop	r17
    1ee8:	0f 91       	pop	r16
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	df 90       	pop	r13
    1ef0:	cf 90       	pop	r12
    1ef2:	bf 90       	pop	r11
    1ef4:	af 90       	pop	r10
    1ef6:	9f 90       	pop	r9
    1ef8:	8f 90       	pop	r8
    1efa:	7f 90       	pop	r7
    1efc:	6f 90       	pop	r6
    1efe:	5f 90       	pop	r5
    1f00:	4f 90       	pop	r4
    1f02:	3f 90       	pop	r3
    1f04:	2f 90       	pop	r2
    1f06:	08 95       	ret

00001f08 <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now)
    1f08:	80 91 03 02 	lds	r24, 0x0203
    1f0c:	81 11       	cpse	r24, r1
		send_response();
    1f0e:	0e 94 8e 0b 	call	0x171c	; 0x171c <send_response>
	if (send_hk)
    1f12:	80 91 a6 02 	lds	r24, 0x02A6
    1f16:	81 11       	cpse	r24, r1
		send_housekeeping();
    1f18:	0e 94 a3 0b 	call	0x1746	; 0x1746 <send_housekeeping>
	if (send_data)
    1f1c:	80 91 c8 02 	lds	r24, 0x02C8
    1f20:	81 11       	cpse	r24, r1
		send_sensor_data();
    1f22:	0e 94 b5 0b 	call	0x176a	; 0x176a <send_sensor_data>
	if (msg_received)
    1f26:	80 91 0d 01 	lds	r24, 0x010D
    1f2a:	81 11       	cpse	r24, r1
		send_coms_packet();
    1f2c:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <send_coms_packet>
	if (read_response)
    1f30:	80 91 0d 02 	lds	r24, 0x020D
    1f34:	81 11       	cpse	r24, r1
		send_read_response();
    1f36:	0e 94 02 0c 	call	0x1804	; 0x1804 <send_read_response>
	if (write_response)
    1f3a:	80 91 d7 01 	lds	r24, 0x01D7
    1f3e:	81 11       	cpse	r24, r1
		send_write_response();
    1f40:	0e 94 23 0c 	call	0x1846	; 0x1846 <send_write_response>
	if (set_sens_h)
    1f44:	80 91 c5 02 	lds	r24, 0x02C5
    1f48:	81 11       	cpse	r24, r1
		set_sensor_high();
    1f4a:	0e 94 47 0c 	call	0x188e	; 0x188e <set_sensor_high>
	if (set_sens_l)
    1f4e:	80 91 ca 02 	lds	r24, 0x02CA
    1f52:	81 11       	cpse	r24, r1
		set_sensor_low();
    1f54:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <set_sensor_low>
	if (set_varf)
    1f58:	80 91 c9 02 	lds	r24, 0x02C9
    1f5c:	81 11       	cpse	r24, r1
		set_var();
    1f5e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <set_var>
	if (new_tm_msgf)
    1f62:	80 91 04 02 	lds	r24, 0x0204
    1f66:	81 11       	cpse	r24, r1
		receive_tm_msg();
    1f68:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <receive_tm_msg>
	if (tc_packet_readyf)
    1f6c:	80 91 c6 02 	lds	r24, 0x02C6
    1f70:	81 11       	cpse	r24, r1
		send_pus_packet_tc();
    1f72:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <send_pus_packet_tc>
    1f76:	08 95       	ret

00001f78 <LED_set>:
}

void LED_set(uint8_t LED) 
{
	
	if(LED == 1)
    1f78:	81 30       	cpi	r24, 0x01	; 1
    1f7a:	11 f4       	brne	.+4      	; 0x1f80 <LED_set+0x8>
	{
		PORTD |= 0x01;
    1f7c:	58 9a       	sbi	0x0b, 0	; 11
    1f7e:	08 95       	ret
	}
	if(LED == 2)
    1f80:	82 30       	cpi	r24, 0x02	; 2
    1f82:	11 f4       	brne	.+4      	; 0x1f88 <LED_set+0x10>
	{
		LEDPORT &= ~(1 << 6);
    1f84:	2e 98       	cbi	0x05, 6	; 5
    1f86:	08 95       	ret
	}
	if(LED == 3)
    1f88:	83 30       	cpi	r24, 0x03	; 3
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <LED_set+0x16>
	{
		PORTC &= ~(0x01);
    1f8c:	40 98       	cbi	0x08, 0	; 8
    1f8e:	08 95       	ret

00001f90 <LED_clr>:
}

void LED_clr(uint8_t LED) 
{
	
	if(LED == 1)
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	11 f4       	brne	.+4      	; 0x1f98 <LED_clr+0x8>
	{
		PORTD &= ~(0x01);
    1f94:	58 98       	cbi	0x0b, 0	; 11
    1f96:	08 95       	ret
	}
	if(LED == 2)
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	11 f4       	brne	.+4      	; 0x1fa0 <LED_clr+0x10>
	{
		LEDPORT |= (1 << 6);
    1f9c:	2e 9a       	sbi	0x05, 6	; 5
    1f9e:	08 95       	ret
	}
	if(LED == 3)
    1fa0:	83 30       	cpi	r24, 0x03	; 3
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <LED_clr+0x16>
	{
		PORTC |= 0x01;
    1fa4:	40 9a       	sbi	0x08, 0	; 8
    1fa6:	08 95       	ret

00001fa8 <main>:
	uint8_t high = 0, low = 0;
	
	uint8_t msg = 0x66;
	
	uint8_t* adc_result;
	*adc_result = 0;
    1fa8:	10 92 00 00 	sts	0x0000, r1
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    1fac:	e1 e6       	ldi	r30, 0x61	; 97
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 e8       	ldi	r24, 0x80	; 128
    1fb2:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1fb4:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1fb6:	8e ef       	ldi	r24, 0xFE	; 254
    1fb8:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    1fba:	81 e1       	ldi	r24, 0x11	; 17
    1fbc:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    1fbe:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    1fc0:	89 e0       	ldi	r24, 0x09	; 9
    1fc2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    1fc8:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    1fca:	1e b8       	out	0x0e, r1	; 14
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    1fcc:	0e 94 71 10 	call	0x20e2	; 0x20e2 <timer_init>

	adc_initialize();
    1fd0:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_initialize>
	can_init(0);
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <can_init>
	can_init_mobs();
    1fda:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <can_init_mobs>
	spi_initialize_master();
    1fde:	0e 94 3b 10 	call	0x2076	; 0x2076 <spi_initialize_master>

	// Enable the timer for mppt
	if(SELF_ID == 1)
	{
		LED_set(LED1);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <LED_set>
		mppt_timer_init();
    1fe8:	0e 94 2b 10 	call	0x2056	; 0x2056 <mppt_timer_init>
	}
	
	// Enable global interrupts for Timer execution
	sei();
    1fec:	78 94       	sei
	{
		transceiver_initialize();
		coms_timer_init();
	}

	SS1_set_high();		// SPI Temp Sensor.
    1fee:	0e 94 41 10 	call	0x2082	; 0x2082 <SS1_set_high>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    1ff2:	0e 94 88 02 	call	0x510	; 0x510 <can_check_general>
			//check_obc_alive();
		}

		if(SELF_ID == 1)
		{
			can_check_general();
    1ff6:	0e 94 88 02 	call	0x510	; 0x510 <can_check_general>
			LED_clr(LED1);
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LED_clr>
			delay_ms(1000);
    2000:	88 ee       	ldi	r24, 0xE8	; 232
    2002:	93 e0       	ldi	r25, 0x03	; 3
    2004:	0e 94 8b 10 	call	0x2116	; 0x2116 <delay_ms>
			adc_set_pin(2);
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	0e 94 84 00 	call	0x108	; 0x108 <adc_set_pin>
			adc_read(adc_result);
    200e:	c0 e0       	ldi	r28, 0x00	; 0
    2010:	d0 e0       	ldi	r29, 0x00	; 0
    2012:	ce 01       	movw	r24, r28
    2014:	0e 94 7b 00 	call	0xf6	; 0xf6 <adc_read>
			{
				LED_set(LED1);
			}
			else
			{
				LED_clr(LED1);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LED_clr>
			}
			set_duty_cycleA(0xBF);
    201e:	8f eb       	ldi	r24, 0xBF	; 191
    2020:	0e 94 37 10 	call	0x206e	; 0x206e <set_duty_cycleA>
			set_duty_cycleB(0x1F);
    2024:	8f e1       	ldi	r24, 0x1F	; 31
    2026:	0e 94 39 10 	call	0x2072	; 0x2072 <set_duty_cycleB>
			delay_ms(1000);
    202a:	88 ee       	ldi	r24, 0xE8	; 232
    202c:	93 e0       	ldi	r25, 0x03	; 3
    202e:	0e 94 8b 10 	call	0x2116	; 0x2116 <delay_ms>
			adc_set_pin(3);
    2032:	83 e0       	ldi	r24, 0x03	; 3
    2034:	0e 94 84 00 	call	0x108	; 0x108 <adc_set_pin>
			adc_read(adc_result);
    2038:	ce 01       	movw	r24, r28
    203a:	0e 94 7b 00 	call	0xf6	; 0xf6 <adc_read>
			{
				LED_set(LED1);
			}
			else
			{
				LED_clr(LED1);
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LED_clr>
			}
			set_duty_cycleA(0x1F);
    2044:	8f e1       	ldi	r24, 0x1F	; 31
    2046:	0e 94 37 10 	call	0x206e	; 0x206e <set_duty_cycleA>
			set_duty_cycleB(0xBF);
    204a:	8f eb       	ldi	r24, 0xBF	; 191
    204c:	0e 94 39 10 	call	0x2072	; 0x2072 <set_duty_cycleB>
			
		}
		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    2050:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <run_commands>
    2054:	ce cf       	rjmp	.-100    	; 0x1ff2 <main+0x4a>

00002056 <mppt_timer_init>:
#endif

// This function initializes a 8-bit timer used for generating PWM for mppt.
void mppt_timer_init(void) {
	
	TCNT0 = 0x0000; //Clear timer
    2056:	16 bc       	out	0x26, r1	; 38
	//For now, hard code in the values that the "duty cycle" registers will be set to. This will be updated later by the algorithm
	OCR0A = 0x3F; // b00111111
    2058:	8f e3       	ldi	r24, 0x3F	; 63
    205a:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xBF; // b10111111
    205c:	8f eb       	ldi	r24, 0xBF	; 191
    205e:	88 bd       	out	0x28, r24	; 40
	
	TCCR0A = 0x00; // b00000000 Don't connect any pins, but set to normal mode as a test
    2060:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; // b00000101 Set clock pre-scaling to 1024 for now, will be 1 later for "fast" output
    2062:	85 e0       	ldi	r24, 0x05	; 5
    2064:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x07; // b00000111 Enable the A and B compare match interrupts. Also enable the timer overflow interrupt
    2066:	87 e0       	ldi	r24, 0x07	; 7
    2068:	80 93 6e 00 	sts	0x006E, r24
    206c:	08 95       	ret

0000206e <set_duty_cycleA>:
}

//This function will set the duty cycle of MPPTA
//Duty is an 8 bit number, so 0x7F is a duty cycle of 0.5
void set_duty_cycleA(uint8_t duty){
	OCR0A = duty;	
    206e:	87 bd       	out	0x27, r24	; 39
    2070:	08 95       	ret

00002072 <set_duty_cycleB>:
}

//This function will set the duty cycle of MPPTB
void set_duty_cycleB(uint8_t duty){
	OCR0B = duty;
    2072:	88 bd       	out	0x28, r24	; 40
    2074:	08 95       	ret

00002076 <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    2076:	85 b7       	in	r24, 0x35	; 53
    2078:	8f 77       	andi	r24, 0x7F	; 127
    207a:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    207c:	83 e5       	ldi	r24, 0x53	; 83
    207e:	8c bd       	out	0x2c, r24	; 44
    2080:	08 95       	ret

00002082 <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    2082:	44 9a       	sbi	0x08, 4	; 8
    2084:	08 95       	ret

00002086 <SS1_set_low>:
	delay_us(1);
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    2086:	44 98       	cbi	0x08, 4	; 8
    2088:	08 95       	ret

0000208a <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    2092:	8c 01       	movw	r16, r24
    2094:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    2096:	0e 94 43 10 	call	0x2086	; 0x2086 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    209a:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    209c:	80 e8       	ldi	r24, 0x80	; 128
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 8b 10 	call	0x2116	; 0x2116 <delay_ms>
	*high = *reg_ptr;
    20a4:	8e b5       	in	r24, 0x2e	; 46
    20a6:	f8 01       	movw	r30, r16
    20a8:	80 83       	st	Z, r24
	delay_ms(128);
    20aa:	80 e8       	ldi	r24, 0x80	; 128
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 8b 10 	call	0x2116	; 0x2116 <delay_ms>
	*low = *reg_ptr;	
    20b2:	8e b5       	in	r24, 0x2e	; 46
    20b4:	88 83       	st	Y, r24
	SS1_set_high();
    20b6:	0e 94 41 10 	call	0x2082	; 0x2082 <SS1_set_high>
	
	return;
}
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	1f 91       	pop	r17
    20c0:	0f 91       	pop	r16
    20c2:	08 95       	ret

000020c4 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    20c4:	1f 92       	push	r1
    20c6:	0f 92       	push	r0
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	0f 92       	push	r0
    20cc:	11 24       	eor	r1, r1
    20ce:	8f 93       	push	r24
	CTC_flag = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	80 93 99 03 	sts	0x0399, r24
}
    20d6:	8f 91       	pop	r24
    20d8:	0f 90       	pop	r0
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	0f 90       	pop	r0
    20de:	1f 90       	pop	r1
    20e0:	18 95       	reti

000020e2 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    20e2:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    20e6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    20ea:	8a e0       	ldi	r24, 0x0A	; 10
    20ec:	80 93 81 00 	sts	0x0081, r24
    20f0:	08 95       	ret

000020f2 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    20f2:	10 92 99 03 	sts	0x0399, r1
	TCNT1 = 0x0000; //Clear timer
    20f6:	10 92 85 00 	sts	0x0085, r1
    20fa:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    20fe:	90 93 89 00 	sts	0x0089, r25
    2102:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    210c:	80 91 99 03 	lds	r24, 0x0399
    2110:	88 23       	and	r24, r24
    2112:	e1 f3       	breq	.-8      	; 0x210c <delay_us+0x1a>
}
    2114:	08 95       	ret

00002116 <delay_ms>:

void delay_ms(uint16_t ms) {
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	51 f0       	breq	.+20     	; 0x2138 <delay_ms+0x22>
    2124:	c0 e0       	ldi	r28, 0x00	; 0
    2126:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    2128:	88 ee       	ldi	r24, 0xE8	; 232
    212a:	93 e0       	ldi	r25, 0x03	; 3
    212c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    2130:	21 96       	adiw	r28, 0x01	; 1
    2132:	c0 17       	cp	r28, r16
    2134:	d1 07       	cpc	r29, r17
    2136:	c1 f7       	brne	.-16     	; 0x2128 <delay_ms+0x12>
		delay_us(1000);
	}
}
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	08 95       	ret

00002142 <__tablejump2__>:
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31

00002146 <__tablejump__>:
    2146:	05 90       	lpm	r0, Z+
    2148:	f4 91       	lpm	r31, Z
    214a:	e0 2d       	mov	r30, r0
    214c:	09 94       	ijmp

0000214e <_exit>:
    214e:	f8 94       	cli

00002150 <__stop_program>:
    2150:	ff cf       	rjmp	.-2      	; 0x2150 <__stop_program>
