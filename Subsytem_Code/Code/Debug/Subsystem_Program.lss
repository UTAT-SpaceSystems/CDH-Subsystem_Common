
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001be4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000059  00800100  00800100  00001c58  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000002a0  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003020  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ed3  00000000  00000000  00004f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000010b3  00000000  00000000  00005e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000005cc  00000000  00000000  00006ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000076f  00000000  00000000  0000749c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001e6a  00000000  00000000  00007c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000248  00000000  00000000  00009a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	c0 03       	fmuls	r20, r16
      7e:	52 04       	cpc	r5, r2
      80:	dc 04       	cpc	r13, r12
      82:	50 05       	cpc	r21, r0
      84:	90 05       	cpc	r25, r0
      86:	0c 06       	cpc	r0, r28
      88:	89 06       	cpc	r8, r25
      8a:	26 07       	cpc	r18, r22
      8c:	cc 07       	cpc	r28, r28
      8e:	ba 03       	fmulsu	r19, r18
      90:	d5 08       	sbc	r13, r5

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a9 35       	cpi	r26, 0x59	; 89
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 29 0b 	call	0x1652	; 0x1652 <main>
      b2:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
      ce:	28 e1       	ldi	r18, 0x18	; 24
      d0:	31 e0       	ldi	r19, 0x01	; 1
      d2:	30 93 28 01 	sts	0x0128, r19
      d6:	20 93 27 01 	sts	0x0127, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      da:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = id;  // populate ID field with ID Tag
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	70 93 23 01 	sts	0x0123, r23
      e4:	60 93 22 01 	sts	0x0122, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	20 93 21 01 	sts	0x0121, r18
	message.dlc = 8;			 // Max length of a CAN message.
      ee:	28 e0       	ldi	r18, 0x08	; 8
      f0:	20 93 26 01 	sts	0x0126, r18
	mob_number = 4;
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	20 93 4f 01 	sts	0x014F, r18
      fa:	dc 01       	movw	r26, r24
      fc:	e8 e1       	ldi	r30, 0x18	; 24
      fe:	f1 e0       	ldi	r31, 0x01	; 1
     100:	80 e2       	ldi	r24, 0x20	; 32
     102:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     104:	2d 91       	ld	r18, X+
     106:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     108:	e8 17       	cp	r30, r24
     10a:	f9 07       	cpc	r31, r25
     10c:	d9 f7       	brne	.-10     	; 0x104 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     10e:	60 91 4f 01 	lds	r22, 0x014F
     112:	80 e2       	ldi	r24, 0x20	; 32
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     11a:	81 11       	cpse	r24, r1
     11c:	f8 cf       	rjmp	.-16     	; 0x10e <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     11e:	60 91 4f 01 	lds	r22, 0x014F
     122:	80 e2       	ldi	r24, 0x20	; 32
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 a2 09 	call	0x1344	; 0x1344 <can_get_status>
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	c1 f3       	breq	.-16     	; 0x11e <can_send_message+0x50>

	return;
}
     12e:	08 95       	ret

00000130 <decode_command>:

void decode_command(uint8_t command)
{
	switch(command)
     130:	82 30       	cpi	r24, 0x02	; 2
     132:	b1 f0       	breq	.+44     	; 0x160 <decode_command+0x30>
     134:	83 30       	cpi	r24, 0x03	; 3
     136:	31 f1       	breq	.+76     	; 0x184 <decode_command+0x54>
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	a9 f5       	brne	.+106    	; 0x1a6 <decode_command+0x76>
	{
		case REQ_RESPONSE :
			LED_toggle(LED3);	//Toggle LED3 when a response is requested.
     13c:	83 e0       	ldi	r24, 0x03	; 3
     13e:	0e 94 0e 0b 	call	0x161c	; 0x161c <LED_toggle>
			delay_ms(100);
     142:	84 e6       	ldi	r24, 0x64	; 100
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
			LED_toggle(LED3);
     14a:	83 e0       	ldi	r24, 0x03	; 3
     14c:	0e 94 0e 0b 	call	0x161c	; 0x161c <LED_toggle>
			delay_ms(100);
     150:	84 e6       	ldi	r24, 0x64	; 100
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
			send_now = 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 2c 01 	sts	0x012C, r24
			return;
     15e:	08 95       	ret
		case REQ_DATA :
			LED_toggle(LED7);	//Toggle LED7 when data is requested.
     160:	87 e0       	ldi	r24, 0x07	; 7
     162:	0e 94 0e 0b 	call	0x161c	; 0x161c <LED_toggle>
			delay_ms(100);
     166:	84 e6       	ldi	r24, 0x64	; 100
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
			LED_toggle(LED7);
     16e:	87 e0       	ldi	r24, 0x07	; 7
     170:	0e 94 0e 0b 	call	0x161c	; 0x161c <LED_toggle>
			delay_ms(100);
     174:	84 e6       	ldi	r24, 0x64	; 100
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
			send_data = 1;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	80 93 46 01 	sts	0x0146, r24
			return;
     182:	08 95       	ret
		case REQ_HK :
			LED_toggle(LED6);	//Toggle LED6 when housekeeping was requested.
     184:	86 e0       	ldi	r24, 0x06	; 6
     186:	0e 94 0e 0b 	call	0x161c	; 0x161c <LED_toggle>
			delay_ms(100);
     18a:	84 e6       	ldi	r24, 0x64	; 100
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
			LED_toggle(LED6);
     192:	86 e0       	ldi	r24, 0x06	; 6
     194:	0e 94 0e 0b 	call	0x161c	; 0x161c <LED_toggle>
			delay_ms(100);
     198:	84 e6       	ldi	r24, 0x64	; 100
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
			send_hk = 1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	80 93 35 01 	sts	0x0135, r24
     1a6:	08 95       	ret

000001a8 <set_up_msg>:
	}
}

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     1a8:	10 92 2b 01 	sts	0x012B, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     1ac:	95 e0       	ldi	r25, 0x05	; 5
     1ae:	90 93 21 01 	sts	0x0121, r25
	message.dlc = 8;			 // Max length of a CAN message.
     1b2:	98 e0       	ldi	r25, 0x08	; 8
     1b4:	90 93 26 01 	sts	0x0126, r25
	mob_number = mailbox;
     1b8:	80 93 4f 01 	sts	0x014F, r24
	
	if(mailbox == 0)
     1bc:	81 11       	cpse	r24, r1
     1be:	0d c0       	rjmp	.+26     	; 0x1da <set_up_msg+0x32>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     1c0:	8d e2       	ldi	r24, 0x2D	; 45
     1c2:	91 e0       	ldi	r25, 0x01	; 1
     1c4:	90 93 28 01 	sts	0x0128, r25
     1c8:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     1cc:	84 e1       	ldi	r24, 0x14	; 20
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	90 93 23 01 	sts	0x0123, r25
     1d4:	80 93 22 01 	sts	0x0122, r24
		return;
     1d8:	08 95       	ret
	}
	if(mailbox == 1)
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	69 f4       	brne	.+26     	; 0x1f8 <set_up_msg+0x50>
	{
		message.pt_data = &data1[0];
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	90 93 28 01 	sts	0x0128, r25
     1e6:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID1;
     1ea:	85 e1       	ldi	r24, 0x15	; 21
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	90 93 23 01 	sts	0x0123, r25
     1f2:	80 93 22 01 	sts	0x0122, r24
		return;
     1f6:	08 95       	ret
	}
	if(mailbox == 2)
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	69 f4       	brne	.+26     	; 0x216 <set_up_msg+0x6e>
	{
		message.pt_data = &data2[0];
     1fc:	88 e0       	ldi	r24, 0x08	; 8
     1fe:	91 e0       	ldi	r25, 0x01	; 1
     200:	90 93 28 01 	sts	0x0128, r25
     204:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID2;
     208:	86 e1       	ldi	r24, 0x16	; 22
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	90 93 23 01 	sts	0x0123, r25
     210:	80 93 22 01 	sts	0x0122, r24
		return;
     214:	08 95       	ret
	}
	if(mailbox == 3)
     216:	83 30       	cpi	r24, 0x03	; 3
     218:	69 f4       	brne	.+26     	; 0x234 <set_up_msg+0x8c>
	{
		message.pt_data = &data3[0];
     21a:	8e e3       	ldi	r24, 0x3E	; 62
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	90 93 28 01 	sts	0x0128, r25
     222:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID3;
     226:	87 e1       	ldi	r24, 0x17	; 23
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	90 93 23 01 	sts	0x0123, r25
     22e:	80 93 22 01 	sts	0x0122, r24
		return;
     232:	08 95       	ret
	}
	if(mailbox == 5)
     234:	85 30       	cpi	r24, 0x05	; 5
     236:	61 f4       	brne	.+24     	; 0x250 <set_up_msg+0xa8>
	{
		message.pt_data = &data5[0];
     238:	87 e4       	ldi	r24, 0x47	; 71
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	90 93 28 01 	sts	0x0128, r25
     240:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID5;
     244:	89 e1       	ldi	r24, 0x19	; 25
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	90 93 23 01 	sts	0x0123, r25
     24c:	80 93 22 01 	sts	0x0122, r24
     250:	08 95       	ret

00000252 <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     252:	81 11       	cpse	r24, r1
     254:	1f c0       	rjmp	.+62     	; 0x294 <clean_up_msg+0x42>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     256:	10 92 2b 01 	sts	0x012B, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     25a:	85 e0       	ldi	r24, 0x05	; 5
     25c:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     260:	88 e0       	ldi	r24, 0x08	; 8
     262:	80 93 26 01 	sts	0x0126, r24
		mob_number = mailbox;
     266:	10 92 4f 01 	sts	0x014F, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     26a:	8d e2       	ldi	r24, 0x2D	; 45
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	90 93 28 01 	sts	0x0128, r25
     272:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     276:	84 e1       	ldi	r24, 0x14	; 20
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	90 93 23 01 	sts	0x0123, r25
     27e:	80 93 22 01 	sts	0x0122, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     282:	60 91 4f 01 	lds	r22, 0x014F
     286:	80 e2       	ldi	r24, 0x20	; 32
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     28e:	81 11       	cpse	r24, r1
     290:	f8 cf       	rjmp	.-16     	; 0x282 <clean_up_msg+0x30>
     292:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     294:	81 30       	cpi	r24, 0x01	; 1
     296:	01 f5       	brne	.+64     	; 0x2d8 <clean_up_msg+0x86>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     298:	10 92 2b 01 	sts	0x012B, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     29c:	85 e0       	ldi	r24, 0x05	; 5
     29e:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     2a2:	88 e0       	ldi	r24, 0x08	; 8
     2a4:	80 93 26 01 	sts	0x0126, r24
		mob_number = mailbox;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 4f 01 	sts	0x014F, r24
		message.pt_data = &data1[0];
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	90 93 28 01 	sts	0x0128, r25
     2b6:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID1;
     2ba:	85 e1       	ldi	r24, 0x15	; 21
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 23 01 	sts	0x0123, r25
     2c2:	80 93 22 01 	sts	0x0122, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     2c6:	60 91 4f 01 	lds	r22, 0x014F
     2ca:	80 e2       	ldi	r24, 0x20	; 32
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     2d2:	81 11       	cpse	r24, r1
     2d4:	f8 cf       	rjmp	.-16     	; 0x2c6 <clean_up_msg+0x74>
     2d6:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	01 f5       	brne	.+64     	; 0x31c <clean_up_msg+0xca>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2dc:	10 92 2b 01 	sts	0x012B, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     2e6:	88 e0       	ldi	r24, 0x08	; 8
     2e8:	80 93 26 01 	sts	0x0126, r24
		mob_number = mailbox;
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	80 93 4f 01 	sts	0x014F, r24
		message.pt_data = &data2[0];
     2f2:	88 e0       	ldi	r24, 0x08	; 8
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	90 93 28 01 	sts	0x0128, r25
     2fa:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID2;
     2fe:	86 e1       	ldi	r24, 0x16	; 22
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	90 93 23 01 	sts	0x0123, r25
     306:	80 93 22 01 	sts	0x0122, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     30a:	60 91 4f 01 	lds	r22, 0x014F
     30e:	80 e2       	ldi	r24, 0x20	; 32
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     316:	81 11       	cpse	r24, r1
     318:	f8 cf       	rjmp	.-16     	; 0x30a <clean_up_msg+0xb8>
     31a:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     31c:	83 30       	cpi	r24, 0x03	; 3
     31e:	01 f5       	brne	.+64     	; 0x360 <clean_up_msg+0x10e>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     320:	10 92 2b 01 	sts	0x012B, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     324:	85 e0       	ldi	r24, 0x05	; 5
     326:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     32a:	88 e0       	ldi	r24, 0x08	; 8
     32c:	80 93 26 01 	sts	0x0126, r24
		mob_number = mailbox;
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	80 93 4f 01 	sts	0x014F, r24
		message.pt_data = &data3[0];
     336:	8e e3       	ldi	r24, 0x3E	; 62
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	90 93 28 01 	sts	0x0128, r25
     33e:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID3;
     342:	87 e1       	ldi	r24, 0x17	; 23
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	90 93 23 01 	sts	0x0123, r25
     34a:	80 93 22 01 	sts	0x0122, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     34e:	60 91 4f 01 	lds	r22, 0x014F
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     35a:	81 11       	cpse	r24, r1
     35c:	f8 cf       	rjmp	.-16     	; 0x34e <clean_up_msg+0xfc>
     35e:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     360:	85 30       	cpi	r24, 0x05	; 5
     362:	e9 f4       	brne	.+58     	; 0x39e <clean_up_msg+0x14c>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     364:	10 92 2b 01 	sts	0x012B, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     368:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     36c:	98 e0       	ldi	r25, 0x08	; 8
     36e:	90 93 26 01 	sts	0x0126, r25
		mob_number = mailbox;
     372:	80 93 4f 01 	sts	0x014F, r24
		message.pt_data = &data5[0];
     376:	87 e4       	ldi	r24, 0x47	; 71
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	90 93 28 01 	sts	0x0128, r25
     37e:	80 93 27 01 	sts	0x0127, r24
		message.id.std = SUB0_ID5;
     382:	89 e1       	ldi	r24, 0x19	; 25
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	90 93 23 01 	sts	0x0123, r25
     38a:	80 93 22 01 	sts	0x0122, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     38e:	60 91 4f 01 	lds	r22, 0x014F
     392:	80 e2       	ldi	r24, 0x20	; 32
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     39a:	81 11       	cpse	r24, r1
     39c:	f8 cf       	rjmp	.-16     	; 0x38e <clean_up_msg+0x13c>
     39e:	08 95       	ret

000003a0 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     3a4:	85 e0       	ldi	r24, 0x05	; 5
     3a6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     3aa:	60 91 4f 01 	lds	r22, 0x014F
     3ae:	80 e2       	ldi	r24, 0x20	; 32
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 a2 09 	call	0x1344	; 0x1344 <can_get_status>
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	41 f1       	breq	.+80     	; 0x40a <can_check_housekeep+0x6a>
	{
		if(message.status == MOB_RX_COMPLETED)
     3ba:	80 91 29 01 	lds	r24, 0x0129
     3be:	80 32       	cpi	r24, 0x20	; 32
     3c0:	09 f5       	brne	.+66     	; 0x404 <can_check_housekeep+0x64>
     3c2:	a0 91 27 01 	lds	r26, 0x0127
     3c6:	b0 91 28 01 	lds	r27, 0x0128
     3ca:	ce e3       	ldi	r28, 0x3E	; 62
     3cc:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     3ce:	e6 e3       	ldi	r30, 0x36	; 54
     3d0:	f1 e0       	ldi	r31, 0x01	; 1
     3d2:	8d 91       	ld	r24, X+
     3d4:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     3d6:	ec 17       	cp	r30, r28
     3d8:	fd 07       	cpc	r31, r29
     3da:	d9 f7       	brne	.-10     	; 0x3d2 <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[7])	// FROM WHO
     3dc:	80 91 3d 01 	lds	r24, 0x013D
     3e0:	8f 3f       	cpi	r24, 0xFF	; 255
     3e2:	19 f0       	breq	.+6      	; 0x3ea <can_check_housekeep+0x4a>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     3e4:	e6 e3       	ldi	r30, 0x36	; 54
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <can_check_housekeep+0x5c>
			}
				
			switch(receive_arr[7])	// FROM WHO
			{
				case OBC_ID :
				switch(receive_arr[6]) // BIG TYPE
     3ea:	80 91 3c 01 	lds	r24, 0x013C
     3ee:	82 30       	cpi	r24, 0x02	; 2
     3f0:	c9 f7       	brne	.-14     	; 0x3e4 <can_check_housekeep+0x44>
				{
					case MT_COM :
					decode_command(receive_arr[5]); // SMALL TYPE
     3f2:	80 91 3b 01 	lds	r24, 0x013B
     3f6:	0e 94 98 00 	call	0x130	; 0x130 <decode_command>
     3fa:	f4 cf       	rjmp	.-24     	; 0x3e4 <can_check_housekeep+0x44>
				default:
					break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     3fc:	11 92       	st	Z+, r1
				case PAYL_ID :
					break;
				default:
					break;
			}
			for (i = 0; i < 8; i ++)
     3fe:	ec 17       	cp	r30, r28
     400:	fd 07       	cpc	r31, r29
     402:	e1 f7       	brne	.-8      	; 0x3fc <can_check_housekeep+0x5c>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     404:	85 e0       	ldi	r24, 0x05	; 5
     406:	0e 94 29 01 	call	0x252	; 0x252 <clean_up_msg>
	}	
	return;
}
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
     410:	5f 92       	push	r5
     412:	6f 92       	push	r6
     414:	7f 92       	push	r7
     416:	8f 92       	push	r8
     418:	9f 92       	push	r9
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     42e:	51 2c       	mov	r5, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     430:	09 e2       	ldi	r16, 0x29	; 41
     432:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     434:	0f 2e       	mov	r0, r31
     436:	f7 e2       	ldi	r31, 0x27	; 39
     438:	af 2e       	mov	r10, r31
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	bf 2e       	mov	r11, r31
     43e:	f0 2d       	mov	r31, r0
     440:	ce e3       	ldi	r28, 0x3E	; 62
     442:	d1 e0       	ldi	r29, 0x01	; 1
     444:	0f 2e       	mov	r0, r31
     446:	f6 e3       	ldi	r31, 0x36	; 54
     448:	ef 2e       	mov	r14, r31
     44a:	f1 e0       	ldi	r31, 0x01	; 1
     44c:	ff 2e       	mov	r15, r31
     44e:	f0 2d       	mov	r31, r0
				}
				
				switch(receive_arr[7])	// FROM WHO
     450:	0f 2e       	mov	r0, r31
     452:	fd e3       	ldi	r31, 0x3D	; 61
     454:	cf 2e       	mov	r12, r31
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	df 2e       	mov	r13, r31
     45a:	f0 2d       	mov	r31, r0
				{
					case OBC_ID :
						switch(receive_arr[6]) // BIG TYPE
     45c:	0f 2e       	mov	r0, r31
     45e:	fc e3       	ldi	r31, 0x3C	; 60
     460:	8f 2e       	mov	r8, r31
     462:	f1 e0       	ldi	r31, 0x01	; 1
     464:	9f 2e       	mov	r9, r31
     466:	f0 2d       	mov	r31, r0
						{
							case MT_COM :
								decode_command(receive_arr[5]); // SMALL TYPE
     468:	0f 2e       	mov	r0, r31
     46a:	fb e3       	ldi	r31, 0x3B	; 59
     46c:	6f 2e       	mov	r6, r31
     46e:	f1 e0       	ldi	r31, 0x01	; 1
     470:	7f 2e       	mov	r7, r31
     472:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     474:	85 2d       	mov	r24, r5
     476:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     47a:	60 91 4f 01 	lds	r22, 0x014F
     47e:	80 e2       	ldi	r24, 0x20	; 32
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 a2 09 	call	0x1344	; 0x1344 <can_get_status>
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	19 f1       	breq	.+70     	; 0x4d0 <can_check_general+0xc0>
		{
			if(message.status == MOB_RX_COMPLETED)
     48a:	f8 01       	movw	r30, r16
     48c:	80 81       	ld	r24, Z
     48e:	80 32       	cpi	r24, 0x20	; 32
     490:	e1 f4       	brne	.+56     	; 0x4ca <can_check_general+0xba>
     492:	f5 01       	movw	r30, r10
     494:	a0 81       	ld	r26, Z
     496:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     498:	f7 01       	movw	r30, r14
     49a:	8d 91       	ld	r24, X+
     49c:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     49e:	ec 17       	cp	r30, r28
     4a0:	fd 07       	cpc	r31, r29
     4a2:	d9 f7       	brne	.-10     	; 0x49a <can_check_general+0x8a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
				switch(receive_arr[7])	// FROM WHO
     4a4:	f6 01       	movw	r30, r12
     4a6:	80 81       	ld	r24, Z
     4a8:	8f 3f       	cpi	r24, 0xFF	; 255
     4aa:	11 f0       	breq	.+4      	; 0x4b0 <can_check_general+0xa0>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4ac:	f7 01       	movw	r30, r14
     4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <can_check_general+0xb2>
				}
				
				switch(receive_arr[7])	// FROM WHO
				{
					case OBC_ID :
						switch(receive_arr[6]) // BIG TYPE
     4b0:	f4 01       	movw	r30, r8
     4b2:	80 81       	ld	r24, Z
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	d1 f7       	brne	.-12     	; 0x4ac <can_check_general+0x9c>
						{
							case MT_COM :
								decode_command(receive_arr[5]); // SMALL TYPE
     4b8:	f3 01       	movw	r30, r6
     4ba:	80 81       	ld	r24, Z
     4bc:	0e 94 98 00 	call	0x130	; 0x130 <decode_command>
     4c0:	f5 cf       	rjmp	.-22     	; 0x4ac <can_check_general+0x9c>
					default:
						break;
				}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     4c2:	11 92       	st	Z+, r1
					case PAYL_ID :
						break;
					default:
						break;
				}
				for (i = 0; i < 8; i ++)
     4c4:	ec 17       	cp	r30, r28
     4c6:	fd 07       	cpc	r31, r29
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <can_check_general+0xb2>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     4ca:	85 2d       	mov	r24, r5
     4cc:	0e 94 29 01 	call	0x252	; 0x252 <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     4d0:	53 94       	inc	r5
     4d2:	f4 e0       	ldi	r31, 0x04	; 4
     4d4:	5f 12       	cpse	r5, r31
     4d6:	ce cf       	rjmp	.-100    	; 0x474 <can_check_general+0x64>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     4d8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <can_check_housekeep>
	
	return;
}
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	df 90       	pop	r13
     4ea:	cf 90       	pop	r12
     4ec:	bf 90       	pop	r11
     4ee:	af 90       	pop	r10
     4f0:	9f 90       	pop	r9
     4f2:	8f 90       	pop	r8
     4f4:	7f 90       	pop	r7
     4f6:	6f 90       	pop	r6
     4f8:	5f 90       	pop	r5
     4fa:	08 95       	ret

000004fc <can_init_mobs>:
void can_init_mobs(void)
{
	uint8_t i;

	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     4fc:	8d e2       	ldi	r24, 0x2D	; 45
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	90 93 28 01 	sts	0x0128, r25
     504:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     508:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     50c:	84 e1       	ldi	r24, 0x14	; 20
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	90 93 23 01 	sts	0x0123, r25
     514:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     51e:	88 e0       	ldi	r24, 0x08	; 8
     520:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
     524:	10 92 4f 01 	sts	0x014F, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     528:	60 91 4f 01 	lds	r22, 0x014F
     52c:	80 e2       	ldi	r24, 0x20	; 32
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     534:	81 11       	cpse	r24, r1
     536:	f8 cf       	rjmp	.-16     	; 0x528 <can_init_mobs+0x2c>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	90 93 28 01 	sts	0x0128, r25
     540:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;
     544:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID1;
     548:	85 e1       	ldi	r24, 0x15	; 21
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	90 93 23 01 	sts	0x0123, r25
     550:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;
     554:	85 e0       	ldi	r24, 0x05	; 5
     556:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;
     55a:	88 e0       	ldi	r24, 0x08	; 8
     55c:	80 93 26 01 	sts	0x0126, r24
	mob_number = 1;
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	80 93 4f 01 	sts	0x014F, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     566:	60 91 4f 01 	lds	r22, 0x014F
     56a:	80 e2       	ldi	r24, 0x20	; 32
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     572:	81 11       	cpse	r24, r1
     574:	f8 cf       	rjmp	.-16     	; 0x566 <can_init_mobs+0x6a>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     576:	88 e0       	ldi	r24, 0x08	; 8
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	90 93 28 01 	sts	0x0128, r25
     57e:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;
     582:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID2;
     586:	86 e1       	ldi	r24, 0x16	; 22
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	90 93 23 01 	sts	0x0123, r25
     58e:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;
     592:	85 e0       	ldi	r24, 0x05	; 5
     594:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;
     598:	88 e0       	ldi	r24, 0x08	; 8
     59a:	80 93 26 01 	sts	0x0126, r24
	mob_number = 2;
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	80 93 4f 01 	sts	0x014F, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     5a4:	60 91 4f 01 	lds	r22, 0x014F
     5a8:	80 e2       	ldi	r24, 0x20	; 32
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     5b0:	81 11       	cpse	r24, r1
     5b2:	f8 cf       	rjmp	.-16     	; 0x5a4 <can_init_mobs+0xa8>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     5b4:	8e e3       	ldi	r24, 0x3E	; 62
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	90 93 28 01 	sts	0x0128, r25
     5bc:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;
     5c0:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID3;
     5c4:	87 e1       	ldi	r24, 0x17	; 23
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	90 93 23 01 	sts	0x0123, r25
     5cc:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;
     5d0:	85 e0       	ldi	r24, 0x05	; 5
     5d2:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;
     5d6:	88 e0       	ldi	r24, 0x08	; 8
     5d8:	80 93 26 01 	sts	0x0126, r24
	mob_number = 3;
     5dc:	83 e0       	ldi	r24, 0x03	; 3
     5de:	80 93 4f 01 	sts	0x014F, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     5e2:	60 91 4f 01 	lds	r22, 0x014F
     5e6:	80 e2       	ldi	r24, 0x20	; 32
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     5ee:	81 11       	cpse	r24, r1
     5f0:	f8 cf       	rjmp	.-16     	; 0x5e2 <can_init_mobs+0xe6>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     5f2:	87 e4       	ldi	r24, 0x47	; 71
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	90 93 28 01 	sts	0x0128, r25
     5fa:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     5fe:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
     602:	89 e1       	ldi	r24, 0x19	; 25
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	90 93 23 01 	sts	0x0123, r25
     60a:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     60e:	85 e0       	ldi	r24, 0x05	; 5
     610:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;				// Max length of a CAN message.
     614:	98 e0       	ldi	r25, 0x08	; 8
     616:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     61a:	80 93 4f 01 	sts	0x014F, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     61e:	60 91 4f 01 	lds	r22, 0x014F
     622:	80 e2       	ldi	r24, 0x20	; 32
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 76 03 	call	0x6ec	; 0x6ec <can_cmd>
     62a:	81 11       	cpse	r24, r1
     62c:	f8 cf       	rjmp	.-16     	; 0x61e <can_init_mobs+0x122>
     62e:	e6 e3       	ldi	r30, 0x36	; 54
     630:	f1 e0       	ldi	r31, 0x01	; 1
     632:	8e e3       	ldi	r24, 0x3E	; 62
     634:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     636:	11 92       	st	Z+, r1
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     638:	e8 17       	cp	r30, r24
     63a:	f9 07       	cpc	r31, r25
     63c:	e1 f7       	brne	.-8      	; 0x636 <can_init_mobs+0x13a>
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
	}
	
	send_now = 0;
     63e:	10 92 2c 01 	sts	0x012C, r1
	send_hk = 0;
     642:	10 92 35 01 	sts	0x0135, r1
	send_data = 0;
     646:	10 92 46 01 	sts	0x0146, r1
     64a:	08 95       	ret

0000064c <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     64c:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     64e:	ad ee       	ldi	r26, 0xED	; 237
     650:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     652:	3e ee       	ldi	r19, 0xEE	; 238
     654:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     656:	98 2f       	mov	r25, r24
     658:	92 95       	swap	r25
     65a:	90 7f       	andi	r25, 0xF0	; 240
     65c:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     65e:	e3 2f       	mov	r30, r19
     660:	f2 2f       	mov	r31, r18
     662:	11 92       	st	Z+, r1
     664:	e8 3f       	cpi	r30, 0xF8	; 248
     666:	f1 05       	cpc	r31, r1
     668:	e1 f7       	brne	.-8      	; 0x662 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     66a:	8f 5f       	subi	r24, 0xFF	; 255
     66c:	86 30       	cpi	r24, 0x06	; 6
     66e:	99 f7       	brne	.-26     	; 0x656 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     670:	08 95       	ret

00000672 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     672:	80 91 ef 00 	lds	r24, 0x00EF
     676:	80 7c       	andi	r24, 0xC0	; 192
     678:	61 f0       	breq	.+24     	; 0x692 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     67a:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     67e:	98 2f       	mov	r25, r24
     680:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     682:	28 2f       	mov	r18, r24
     684:	20 76       	andi	r18, 0x60	; 96
     686:	20 32       	cpi	r18, 0x20	; 32
     688:	31 f0       	breq	.+12     	; 0x696 <can_get_mob_status+0x24>
     68a:	90 34       	cpi	r25, 0x40	; 64
     68c:	31 f0       	breq	.+12     	; 0x69a <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     68e:	8f 71       	andi	r24, 0x1F	; 31
     690:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     692:	8f ef       	ldi	r24, 0xFF	; 255
     694:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     696:	89 2f       	mov	r24, r25
     698:	08 95       	ret
     69a:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     69c:	08 95       	ret

0000069e <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     69e:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     6a0:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     6a2:	aa ef       	ldi	r26, 0xFA	; 250
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	9c 91       	ld	r25, X
     6a8:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	88 30       	cpi	r24, 0x08	; 8
     6ae:	d9 f7       	brne	.-10     	; 0x6a6 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     6b0:	08 95       	ret

000006b2 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	80 93 e2 00 	sts	0x00E2, r24
     6be:	8c e0       	ldi	r24, 0x0C	; 12
     6c0:	80 93 e3 00 	sts	0x00E3, r24
     6c4:	87 e3       	ldi	r24, 0x37	; 55
     6c6:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	08 95       	ret

000006ce <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     6ce:	0e 94 59 03 	call	0x6b2	; 0x6b2 <can_fixed_baudrate>
     6d2:	88 23       	and	r24, r24
     6d4:	49 f0       	breq	.+18     	; 0x6e8 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     6d6:	0e 94 26 03 	call	0x64c	; 0x64c <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     6da:	e8 ed       	ldi	r30, 0xD8	; 216
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	80 81       	ld	r24, Z
     6e0:	82 60       	ori	r24, 0x02	; 2
     6e2:	80 83       	st	Z, r24
    return (1);
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     6e8:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     6ea:	08 95       	ret

000006ec <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	1f 92       	push	r1
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	8c 91       	ld	r24, X
     6fc:	11 97       	sbiw	r26, 0x01	; 1
     6fe:	8c 30       	cpi	r24, 0x0C	; 12
     700:	b1 f4       	brne	.+44     	; 0x72e <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     702:	19 96       	adiw	r26, 0x09	; 9
     704:	8c 91       	ld	r24, X
     706:	19 97       	sbiw	r26, 0x09	; 9
     708:	80 36       	cpi	r24, 0x60	; 96
     70a:	69 f4       	brne	.+26     	; 0x726 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     70c:	86 2f       	mov	r24, r22
     70e:	82 95       	swap	r24
     710:	80 7f       	andi	r24, 0xF0	; 240
     712:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     716:	ef ee       	ldi	r30, 0xEF	; 239
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	8f 73       	andi	r24, 0x3F	; 63
     71e:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     720:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     724:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     726:	19 96       	adiw	r26, 0x09	; 9
     728:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	07 c6       	rjmp	.+3086   	; 0x133c <__stack+0xa3d>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     72e:	86 2f       	mov	r24, r22
     730:	82 95       	swap	r24
     732:	80 7f       	andi	r24, 0xF0	; 240
     734:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     738:	80 91 ef 00 	lds	r24, 0x00EF
     73c:	80 7c       	andi	r24, 0xC0	; 192
     73e:	09 f0       	breq	.+2      	; 0x742 <can_cmd+0x56>
     740:	f9 c5       	rjmp	.+3058   	; 0x1334 <__stack+0xa35>
    {
      cmd->status = MOB_PENDING; 
     742:	80 e6       	ldi	r24, 0x60	; 96
     744:	19 96       	adiw	r26, 0x09	; 9
     746:	8c 93       	st	X, r24
     748:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     74a:	6c 93       	st	X, r22
      Can_clear_mob();
     74c:	ee ee       	ldi	r30, 0xEE	; 238
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	11 92       	st	Z+, r1
     752:	e8 3f       	cpi	r30, 0xF8	; 248
     754:	f1 05       	cpc	r31, r1
     756:	e1 f7       	brne	.-8      	; 0x750 <can_cmd+0x64>
          
      switch (cmd->cmd)
     758:	11 96       	adiw	r26, 0x01	; 1
     75a:	4c 91       	ld	r20, X
     75c:	11 97       	sbiw	r26, 0x01	; 1
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	fa 01       	movw	r30, r20
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	eb 30       	cpi	r30, 0x0B	; 11
     766:	f1 05       	cpc	r31, r1
     768:	08 f0       	brcs	.+2      	; 0x76c <can_cmd+0x80>
     76a:	e0 c5       	rjmp	.+3008   	; 0x132c <__stack+0xa2d>
     76c:	e2 5c       	subi	r30, 0xC2	; 194
     76e:	ff 4f       	sbci	r31, 0xFF	; 255
     770:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     774:	16 96       	adiw	r26, 0x06	; 6
     776:	8c 91       	ld	r24, X
     778:	16 97       	sbiw	r26, 0x06	; 6
     77a:	81 11       	cpse	r24, r1
     77c:	b7 c4       	rjmp	.+2414   	; 0x10ec <__stack+0x7ed>
     77e:	c8 c4       	rjmp	.+2448   	; 0x1110 <__stack+0x811>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     780:	1b 96       	adiw	r26, 0x0b	; 11
     782:	8c 91       	ld	r24, X
     784:	1b 97       	sbiw	r26, 0x0b	; 11
     786:	88 23       	and	r24, r24
     788:	d9 f1       	breq	.+118    	; 0x800 <can_cmd+0x114>
     78a:	14 96       	adiw	r26, 0x04	; 4
     78c:	9c 91       	ld	r25, X
     78e:	14 97       	sbiw	r26, 0x04	; 4
     790:	92 95       	swap	r25
     792:	96 95       	lsr	r25
     794:	97 70       	andi	r25, 0x07	; 7
     796:	15 96       	adiw	r26, 0x05	; 5
     798:	8c 91       	ld	r24, X
     79a:	15 97       	sbiw	r26, 0x05	; 5
     79c:	88 0f       	add	r24, r24
     79e:	88 0f       	add	r24, r24
     7a0:	88 0f       	add	r24, r24
     7a2:	89 0f       	add	r24, r25
     7a4:	80 93 f3 00 	sts	0x00F3, r24
     7a8:	13 96       	adiw	r26, 0x03	; 3
     7aa:	9c 91       	ld	r25, X
     7ac:	13 97       	sbiw	r26, 0x03	; 3
     7ae:	92 95       	swap	r25
     7b0:	96 95       	lsr	r25
     7b2:	97 70       	andi	r25, 0x07	; 7
     7b4:	14 96       	adiw	r26, 0x04	; 4
     7b6:	8c 91       	ld	r24, X
     7b8:	14 97       	sbiw	r26, 0x04	; 4
     7ba:	88 0f       	add	r24, r24
     7bc:	88 0f       	add	r24, r24
     7be:	88 0f       	add	r24, r24
     7c0:	89 0f       	add	r24, r25
     7c2:	80 93 f2 00 	sts	0x00F2, r24
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	9c 91       	ld	r25, X
     7ca:	12 97       	sbiw	r26, 0x02	; 2
     7cc:	92 95       	swap	r25
     7ce:	96 95       	lsr	r25
     7d0:	97 70       	andi	r25, 0x07	; 7
     7d2:	13 96       	adiw	r26, 0x03	; 3
     7d4:	8c 91       	ld	r24, X
     7d6:	13 97       	sbiw	r26, 0x03	; 3
     7d8:	88 0f       	add	r24, r24
     7da:	88 0f       	add	r24, r24
     7dc:	88 0f       	add	r24, r24
     7de:	89 0f       	add	r24, r25
     7e0:	80 93 f1 00 	sts	0x00F1, r24
     7e4:	12 96       	adiw	r26, 0x02	; 2
     7e6:	8c 91       	ld	r24, X
     7e8:	12 97       	sbiw	r26, 0x02	; 2
     7ea:	88 0f       	add	r24, r24
     7ec:	88 0f       	add	r24, r24
     7ee:	88 0f       	add	r24, r24
     7f0:	80 93 f0 00 	sts	0x00F0, r24
     7f4:	ef ee       	ldi	r30, 0xEF	; 239
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	80 61       	ori	r24, 0x10	; 16
     7fc:	80 83       	st	Z, r24
     7fe:	1c c0       	rjmp	.+56     	; 0x838 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     800:	12 96       	adiw	r26, 0x02	; 2
     802:	8c 91       	ld	r24, X
     804:	12 97       	sbiw	r26, 0x02	; 2
     806:	86 95       	lsr	r24
     808:	86 95       	lsr	r24
     80a:	86 95       	lsr	r24
     80c:	13 96       	adiw	r26, 0x03	; 3
     80e:	9c 91       	ld	r25, X
     810:	13 97       	sbiw	r26, 0x03	; 3
     812:	20 e2       	ldi	r18, 0x20	; 32
     814:	92 9f       	mul	r25, r18
     816:	80 0d       	add	r24, r0
     818:	11 24       	eor	r1, r1
     81a:	80 93 f3 00 	sts	0x00F3, r24
     81e:	12 96       	adiw	r26, 0x02	; 2
     820:	8c 91       	ld	r24, X
     822:	12 97       	sbiw	r26, 0x02	; 2
     824:	82 95       	swap	r24
     826:	88 0f       	add	r24, r24
     828:	80 7e       	andi	r24, 0xE0	; 224
     82a:	80 93 f2 00 	sts	0x00F2, r24
     82e:	ef ee       	ldi	r30, 0xEF	; 239
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	8f 7e       	andi	r24, 0xEF	; 239
     836:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     838:	16 96       	adiw	r26, 0x06	; 6
     83a:	8c 91       	ld	r24, X
     83c:	16 97       	sbiw	r26, 0x06	; 6
     83e:	88 23       	and	r24, r24
     840:	91 f0       	breq	.+36     	; 0x866 <can_cmd+0x17a>
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	8a ef       	ldi	r24, 0xFA	; 250
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	17 96       	adiw	r26, 0x07	; 7
     84a:	ed 91       	ld	r30, X+
     84c:	fc 91       	ld	r31, X
     84e:	18 97       	sbiw	r26, 0x08	; 8
     850:	e2 0f       	add	r30, r18
     852:	f1 1d       	adc	r31, r1
     854:	30 81       	ld	r19, Z
     856:	fc 01       	movw	r30, r24
     858:	30 83       	st	Z, r19
     85a:	2f 5f       	subi	r18, 0xFF	; 255
     85c:	16 96       	adiw	r26, 0x06	; 6
     85e:	3c 91       	ld	r19, X
     860:	16 97       	sbiw	r26, 0x06	; 6
     862:	23 17       	cp	r18, r19
     864:	88 f3       	brcs	.-30     	; 0x848 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     866:	1a 96       	adiw	r26, 0x0a	; 10
     868:	8c 91       	ld	r24, X
     86a:	1a 97       	sbiw	r26, 0x0a	; 10
     86c:	88 23       	and	r24, r24
     86e:	31 f0       	breq	.+12     	; 0x87c <can_cmd+0x190>
     870:	e0 ef       	ldi	r30, 0xF0	; 240
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	84 60       	ori	r24, 0x04	; 4
     878:	80 83       	st	Z, r24
     87a:	05 c0       	rjmp	.+10     	; 0x886 <can_cmd+0x19a>
            else Can_clear_rtr();    
     87c:	e0 ef       	ldi	r30, 0xF0	; 240
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	8b 7f       	andi	r24, 0xFB	; 251
     884:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     886:	ef ee       	ldi	r30, 0xEF	; 239
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	90 81       	ld	r25, Z
     88c:	16 96       	adiw	r26, 0x06	; 6
     88e:	8c 91       	ld	r24, X
     890:	89 2b       	or	r24, r25
     892:	80 83       	st	Z, r24
          Can_config_tx();
     894:	80 81       	ld	r24, Z
     896:	8f 73       	andi	r24, 0x3F	; 63
     898:	80 83       	st	Z, r24
     89a:	80 81       	ld	r24, Z
     89c:	80 64       	ori	r24, 0x40	; 64
     89e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8a0:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     8a2:	4c c5       	rjmp	.+2712   	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8a4:	1b 96       	adiw	r26, 0x0b	; 11
     8a6:	8c 91       	ld	r24, X
     8a8:	1b 97       	sbiw	r26, 0x0b	; 11
     8aa:	88 23       	and	r24, r24
     8ac:	d9 f1       	breq	.+118    	; 0x924 <__stack+0x25>
     8ae:	14 96       	adiw	r26, 0x04	; 4
     8b0:	9c 91       	ld	r25, X
     8b2:	14 97       	sbiw	r26, 0x04	; 4
     8b4:	92 95       	swap	r25
     8b6:	96 95       	lsr	r25
     8b8:	97 70       	andi	r25, 0x07	; 7
     8ba:	15 96       	adiw	r26, 0x05	; 5
     8bc:	8c 91       	ld	r24, X
     8be:	15 97       	sbiw	r26, 0x05	; 5
     8c0:	88 0f       	add	r24, r24
     8c2:	88 0f       	add	r24, r24
     8c4:	88 0f       	add	r24, r24
     8c6:	89 0f       	add	r24, r25
     8c8:	80 93 f3 00 	sts	0x00F3, r24
     8cc:	13 96       	adiw	r26, 0x03	; 3
     8ce:	9c 91       	ld	r25, X
     8d0:	13 97       	sbiw	r26, 0x03	; 3
     8d2:	92 95       	swap	r25
     8d4:	96 95       	lsr	r25
     8d6:	97 70       	andi	r25, 0x07	; 7
     8d8:	14 96       	adiw	r26, 0x04	; 4
     8da:	8c 91       	ld	r24, X
     8dc:	14 97       	sbiw	r26, 0x04	; 4
     8de:	88 0f       	add	r24, r24
     8e0:	88 0f       	add	r24, r24
     8e2:	88 0f       	add	r24, r24
     8e4:	89 0f       	add	r24, r25
     8e6:	80 93 f2 00 	sts	0x00F2, r24
     8ea:	12 96       	adiw	r26, 0x02	; 2
     8ec:	9c 91       	ld	r25, X
     8ee:	12 97       	sbiw	r26, 0x02	; 2
     8f0:	92 95       	swap	r25
     8f2:	96 95       	lsr	r25
     8f4:	97 70       	andi	r25, 0x07	; 7
     8f6:	13 96       	adiw	r26, 0x03	; 3
     8f8:	8c 91       	ld	r24, X
     8fa:	13 97       	sbiw	r26, 0x03	; 3
     8fc:	88 0f       	add	r24, r24
     8fe:	88 0f       	add	r24, r24
     900:	88 0f       	add	r24, r24
     902:	89 0f       	add	r24, r25
     904:	80 93 f1 00 	sts	0x00F1, r24
     908:	12 96       	adiw	r26, 0x02	; 2
     90a:	8c 91       	ld	r24, X
     90c:	12 97       	sbiw	r26, 0x02	; 2
     90e:	88 0f       	add	r24, r24
     910:	88 0f       	add	r24, r24
     912:	88 0f       	add	r24, r24
     914:	80 93 f0 00 	sts	0x00F0, r24
     918:	ef ee       	ldi	r30, 0xEF	; 239
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	80 61       	ori	r24, 0x10	; 16
     920:	80 83       	st	Z, r24
     922:	1c c0       	rjmp	.+56     	; 0x95c <__stack+0x5d>
          else              { Can_set_std_id(cmd->id.std);}
     924:	12 96       	adiw	r26, 0x02	; 2
     926:	8c 91       	ld	r24, X
     928:	12 97       	sbiw	r26, 0x02	; 2
     92a:	86 95       	lsr	r24
     92c:	86 95       	lsr	r24
     92e:	86 95       	lsr	r24
     930:	13 96       	adiw	r26, 0x03	; 3
     932:	9c 91       	ld	r25, X
     934:	13 97       	sbiw	r26, 0x03	; 3
     936:	f0 e2       	ldi	r31, 0x20	; 32
     938:	9f 9f       	mul	r25, r31
     93a:	80 0d       	add	r24, r0
     93c:	11 24       	eor	r1, r1
     93e:	80 93 f3 00 	sts	0x00F3, r24
     942:	12 96       	adiw	r26, 0x02	; 2
     944:	8c 91       	ld	r24, X
     946:	12 97       	sbiw	r26, 0x02	; 2
     948:	82 95       	swap	r24
     94a:	88 0f       	add	r24, r24
     94c:	80 7e       	andi	r24, 0xE0	; 224
     94e:	80 93 f2 00 	sts	0x00F2, r24
     952:	ef ee       	ldi	r30, 0xEF	; 239
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	8f 7e       	andi	r24, 0xEF	; 239
     95a:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     95c:	16 96       	adiw	r26, 0x06	; 6
     95e:	8c 91       	ld	r24, X
     960:	16 97       	sbiw	r26, 0x06	; 6
     962:	88 23       	and	r24, r24
     964:	91 f0       	breq	.+36     	; 0x98a <__stack+0x8b>
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	8a ef       	ldi	r24, 0xFA	; 250
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	17 96       	adiw	r26, 0x07	; 7
     96e:	ed 91       	ld	r30, X+
     970:	fc 91       	ld	r31, X
     972:	18 97       	sbiw	r26, 0x08	; 8
     974:	e2 0f       	add	r30, r18
     976:	f1 1d       	adc	r31, r1
     978:	30 81       	ld	r19, Z
     97a:	fc 01       	movw	r30, r24
     97c:	30 83       	st	Z, r19
     97e:	2f 5f       	subi	r18, 0xFF	; 255
     980:	16 96       	adiw	r26, 0x06	; 6
     982:	3c 91       	ld	r19, X
     984:	16 97       	sbiw	r26, 0x06	; 6
     986:	23 17       	cp	r18, r19
     988:	88 f3       	brcs	.-30     	; 0x96c <__stack+0x6d>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     98a:	1a 96       	adiw	r26, 0x0a	; 10
     98c:	1c 92       	st	X, r1
     98e:	1a 97       	sbiw	r26, 0x0a	; 10
     990:	e0 ef       	ldi	r30, 0xF0	; 240
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	8b 7f       	andi	r24, 0xFB	; 251
     998:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     99a:	ef ee       	ldi	r30, 0xEF	; 239
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	90 81       	ld	r25, Z
     9a0:	16 96       	adiw	r26, 0x06	; 6
     9a2:	8c 91       	ld	r24, X
     9a4:	89 2b       	or	r24, r25
     9a6:	80 83       	st	Z, r24
          Can_config_tx();
     9a8:	80 81       	ld	r24, Z
     9aa:	8f 73       	andi	r24, 0x3F	; 63
     9ac:	80 83       	st	Z, r24
     9ae:	80 81       	ld	r24, Z
     9b0:	80 64       	ori	r24, 0x40	; 64
     9b2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     9b4:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     9b6:	c2 c4       	rjmp	.+2436   	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     9b8:	1b 96       	adiw	r26, 0x0b	; 11
     9ba:	8c 91       	ld	r24, X
     9bc:	1b 97       	sbiw	r26, 0x0b	; 11
     9be:	88 23       	and	r24, r24
     9c0:	d9 f1       	breq	.+118    	; 0xa38 <__stack+0x139>
     9c2:	14 96       	adiw	r26, 0x04	; 4
     9c4:	9c 91       	ld	r25, X
     9c6:	14 97       	sbiw	r26, 0x04	; 4
     9c8:	92 95       	swap	r25
     9ca:	96 95       	lsr	r25
     9cc:	97 70       	andi	r25, 0x07	; 7
     9ce:	15 96       	adiw	r26, 0x05	; 5
     9d0:	8c 91       	ld	r24, X
     9d2:	15 97       	sbiw	r26, 0x05	; 5
     9d4:	88 0f       	add	r24, r24
     9d6:	88 0f       	add	r24, r24
     9d8:	88 0f       	add	r24, r24
     9da:	89 0f       	add	r24, r25
     9dc:	80 93 f3 00 	sts	0x00F3, r24
     9e0:	13 96       	adiw	r26, 0x03	; 3
     9e2:	9c 91       	ld	r25, X
     9e4:	13 97       	sbiw	r26, 0x03	; 3
     9e6:	92 95       	swap	r25
     9e8:	96 95       	lsr	r25
     9ea:	97 70       	andi	r25, 0x07	; 7
     9ec:	14 96       	adiw	r26, 0x04	; 4
     9ee:	8c 91       	ld	r24, X
     9f0:	14 97       	sbiw	r26, 0x04	; 4
     9f2:	88 0f       	add	r24, r24
     9f4:	88 0f       	add	r24, r24
     9f6:	88 0f       	add	r24, r24
     9f8:	89 0f       	add	r24, r25
     9fa:	80 93 f2 00 	sts	0x00F2, r24
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	9c 91       	ld	r25, X
     a02:	12 97       	sbiw	r26, 0x02	; 2
     a04:	92 95       	swap	r25
     a06:	96 95       	lsr	r25
     a08:	97 70       	andi	r25, 0x07	; 7
     a0a:	13 96       	adiw	r26, 0x03	; 3
     a0c:	8c 91       	ld	r24, X
     a0e:	13 97       	sbiw	r26, 0x03	; 3
     a10:	88 0f       	add	r24, r24
     a12:	88 0f       	add	r24, r24
     a14:	88 0f       	add	r24, r24
     a16:	89 0f       	add	r24, r25
     a18:	80 93 f1 00 	sts	0x00F1, r24
     a1c:	12 96       	adiw	r26, 0x02	; 2
     a1e:	8c 91       	ld	r24, X
     a20:	12 97       	sbiw	r26, 0x02	; 2
     a22:	88 0f       	add	r24, r24
     a24:	88 0f       	add	r24, r24
     a26:	88 0f       	add	r24, r24
     a28:	80 93 f0 00 	sts	0x00F0, r24
     a2c:	ef ee       	ldi	r30, 0xEF	; 239
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	80 61       	ori	r24, 0x10	; 16
     a34:	80 83       	st	Z, r24
     a36:	1c c0       	rjmp	.+56     	; 0xa70 <__stack+0x171>
          else              { Can_set_std_id(cmd->id.std);}
     a38:	12 96       	adiw	r26, 0x02	; 2
     a3a:	8c 91       	ld	r24, X
     a3c:	12 97       	sbiw	r26, 0x02	; 2
     a3e:	86 95       	lsr	r24
     a40:	86 95       	lsr	r24
     a42:	86 95       	lsr	r24
     a44:	13 96       	adiw	r26, 0x03	; 3
     a46:	9c 91       	ld	r25, X
     a48:	13 97       	sbiw	r26, 0x03	; 3
     a4a:	f0 e2       	ldi	r31, 0x20	; 32
     a4c:	9f 9f       	mul	r25, r31
     a4e:	80 0d       	add	r24, r0
     a50:	11 24       	eor	r1, r1
     a52:	80 93 f3 00 	sts	0x00F3, r24
     a56:	12 96       	adiw	r26, 0x02	; 2
     a58:	8c 91       	ld	r24, X
     a5a:	12 97       	sbiw	r26, 0x02	; 2
     a5c:	82 95       	swap	r24
     a5e:	88 0f       	add	r24, r24
     a60:	80 7e       	andi	r24, 0xE0	; 224
     a62:	80 93 f2 00 	sts	0x00F2, r24
     a66:	ef ee       	ldi	r30, 0xEF	; 239
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	8f 7e       	andi	r24, 0xEF	; 239
     a6e:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	1a 96       	adiw	r26, 0x0a	; 10
     a74:	8c 93       	st	X, r24
     a76:	1a 97       	sbiw	r26, 0x0a	; 10
     a78:	e0 ef       	ldi	r30, 0xF0	; 240
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	84 60       	ori	r24, 0x04	; 4
     a80:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     a82:	ef ee       	ldi	r30, 0xEF	; 239
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	90 81       	ld	r25, Z
     a88:	16 96       	adiw	r26, 0x06	; 6
     a8a:	8c 91       	ld	r24, X
     a8c:	89 2b       	or	r24, r25
     a8e:	80 83       	st	Z, r24
          Can_config_tx();
     a90:	80 81       	ld	r24, Z
     a92:	8f 73       	andi	r24, 0x3F	; 63
     a94:	80 83       	st	Z, r24
     a96:	80 81       	ld	r24, Z
     a98:	80 64       	ori	r24, 0x40	; 64
     a9a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a9c:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a9e:	4e c4       	rjmp	.+2204   	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     aa0:	19 82       	std	Y+1, r1	; 0x01
     aa2:	9b 81       	ldd	r25, Y+3	; 0x03
     aa4:	92 95       	swap	r25
     aa6:	96 95       	lsr	r25
     aa8:	97 70       	andi	r25, 0x07	; 7
     aaa:	8c 81       	ldd	r24, Y+4	; 0x04
     aac:	88 0f       	add	r24, r24
     aae:	88 0f       	add	r24, r24
     ab0:	88 0f       	add	r24, r24
     ab2:	89 0f       	add	r24, r25
     ab4:	80 93 f7 00 	sts	0x00F7, r24
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
     aba:	92 95       	swap	r25
     abc:	96 95       	lsr	r25
     abe:	97 70       	andi	r25, 0x07	; 7
     ac0:	8b 81       	ldd	r24, Y+3	; 0x03
     ac2:	88 0f       	add	r24, r24
     ac4:	88 0f       	add	r24, r24
     ac6:	88 0f       	add	r24, r24
     ac8:	89 0f       	add	r24, r25
     aca:	80 93 f6 00 	sts	0x00F6, r24
     ace:	99 81       	ldd	r25, Y+1	; 0x01
     ad0:	92 95       	swap	r25
     ad2:	96 95       	lsr	r25
     ad4:	97 70       	andi	r25, 0x07	; 7
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	88 0f       	add	r24, r24
     ada:	88 0f       	add	r24, r24
     adc:	88 0f       	add	r24, r24
     ade:	89 0f       	add	r24, r25
     ae0:	80 93 f5 00 	sts	0x00F5, r24
     ae4:	29 81       	ldd	r18, Y+1	; 0x01
     ae6:	22 0f       	add	r18, r18
     ae8:	22 0f       	add	r18, r18
     aea:	22 0f       	add	r18, r18
     aec:	84 ef       	ldi	r24, 0xF4	; 244
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     af4:	ef ee       	ldi	r30, 0xEF	; 239
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	30 81       	ld	r19, Z
     afa:	16 96       	adiw	r26, 0x06	; 6
     afc:	2c 91       	ld	r18, X
     afe:	23 2b       	or	r18, r19
     b00:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b02:	dc 01       	movw	r26, r24
     b04:	2c 91       	ld	r18, X
     b06:	2b 7f       	andi	r18, 0xFB	; 251
     b08:	2c 93       	st	X, r18
          Can_clear_idemsk();
     b0a:	2c 91       	ld	r18, X
     b0c:	2e 7f       	andi	r18, 0xFE	; 254
     b0e:	2c 93       	st	X, r18
          Can_config_rx();       
     b10:	80 81       	ld	r24, Z
     b12:	8f 73       	andi	r24, 0x3F	; 63
     b14:	80 83       	st	Z, r24
     b16:	80 81       	ld	r24, Z
     b18:	80 68       	ori	r24, 0x80	; 128
     b1a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b1c:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     b1e:	0e c4       	rjmp	.+2076   	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     b24:	8a 81       	ldd	r24, Y+2	; 0x02
     b26:	82 95       	swap	r24
     b28:	88 0f       	add	r24, r24
     b2a:	80 7e       	andi	r24, 0xE0	; 224
     b2c:	81 5e       	subi	r24, 0xE1	; 225
     b2e:	27 ef       	ldi	r18, 0xF7	; 247
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	f9 01       	movw	r30, r18
     b34:	80 83       	st	Z, r24
     b36:	49 81       	ldd	r20, Y+1	; 0x01
     b38:	42 95       	swap	r20
     b3a:	44 0f       	add	r20, r20
     b3c:	40 7e       	andi	r20, 0xE0	; 224
     b3e:	86 ef       	ldi	r24, 0xF6	; 246
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	fc 01       	movw	r30, r24
     b44:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	4c 91       	ld	r20, X
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	46 95       	lsr	r20
     b4e:	46 95       	lsr	r20
     b50:	46 95       	lsr	r20
     b52:	13 96       	adiw	r26, 0x03	; 3
     b54:	5c 91       	ld	r21, X
     b56:	13 97       	sbiw	r26, 0x03	; 3
     b58:	f0 e2       	ldi	r31, 0x20	; 32
     b5a:	5f 9f       	mul	r21, r31
     b5c:	40 0d       	add	r20, r0
     b5e:	11 24       	eor	r1, r1
     b60:	40 93 f3 00 	sts	0x00F3, r20
     b64:	12 96       	adiw	r26, 0x02	; 2
     b66:	4c 91       	ld	r20, X
     b68:	12 97       	sbiw	r26, 0x02	; 2
     b6a:	42 95       	swap	r20
     b6c:	44 0f       	add	r20, r20
     b6e:	40 7e       	andi	r20, 0xE0	; 224
     b70:	40 93 f2 00 	sts	0x00F2, r20
     b74:	6f ee       	ldi	r22, 0xEF	; 239
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	fb 01       	movw	r30, r22
     b7a:	40 81       	ld	r20, Z
     b7c:	4f 7e       	andi	r20, 0xEF	; 239
     b7e:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     b80:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     b82:	5b 81       	ldd	r21, Y+3	; 0x03
     b84:	52 95       	swap	r21
     b86:	56 95       	lsr	r21
     b88:	57 70       	andi	r21, 0x07	; 7
     b8a:	4c 81       	ldd	r20, Y+4	; 0x04
     b8c:	44 0f       	add	r20, r20
     b8e:	44 0f       	add	r20, r20
     b90:	44 0f       	add	r20, r20
     b92:	45 0f       	add	r20, r21
     b94:	f9 01       	movw	r30, r18
     b96:	40 83       	st	Z, r20
     b98:	3a 81       	ldd	r19, Y+2	; 0x02
     b9a:	32 95       	swap	r19
     b9c:	36 95       	lsr	r19
     b9e:	37 70       	andi	r19, 0x07	; 7
     ba0:	2b 81       	ldd	r18, Y+3	; 0x03
     ba2:	22 0f       	add	r18, r18
     ba4:	22 0f       	add	r18, r18
     ba6:	22 0f       	add	r18, r18
     ba8:	23 0f       	add	r18, r19
     baa:	fc 01       	movw	r30, r24
     bac:	20 83       	st	Z, r18
     bae:	99 81       	ldd	r25, Y+1	; 0x01
     bb0:	92 95       	swap	r25
     bb2:	96 95       	lsr	r25
     bb4:	97 70       	andi	r25, 0x07	; 7
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	88 0f       	add	r24, r24
     bba:	88 0f       	add	r24, r24
     bbc:	88 0f       	add	r24, r24
     bbe:	89 0f       	add	r24, r25
     bc0:	80 93 f5 00 	sts	0x00F5, r24
     bc4:	29 81       	ldd	r18, Y+1	; 0x01
     bc6:	22 0f       	add	r18, r18
     bc8:	22 0f       	add	r18, r18
     bca:	22 0f       	add	r18, r18
     bcc:	84 ef       	ldi	r24, 0xF4	; 244
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	fc 01       	movw	r30, r24
     bd2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     bd4:	fb 01       	movw	r30, r22
     bd6:	30 81       	ld	r19, Z
     bd8:	16 96       	adiw	r26, 0x06	; 6
     bda:	2c 91       	ld	r18, X
     bdc:	16 97       	sbiw	r26, 0x06	; 6
     bde:	23 2b       	or	r18, r19
     be0:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     be2:	1a 96       	adiw	r26, 0x0a	; 10
     be4:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     be6:	dc 01       	movw	r26, r24
     be8:	2c 91       	ld	r18, X
     bea:	24 60       	ori	r18, 0x04	; 4
     bec:	2c 93       	st	X, r18
		  Can_clear_rtr();
     bee:	a0 ef       	ldi	r26, 0xF0	; 240
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	2c 91       	ld	r18, X
     bf4:	2b 7f       	andi	r18, 0xFB	; 251
     bf6:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     bf8:	20 81       	ld	r18, Z
     bfa:	2f 7e       	andi	r18, 0xEF	; 239
     bfc:	20 83       	st	Z, r18
          Can_clear_idemsk();
     bfe:	fc 01       	movw	r30, r24
     c00:	20 81       	ld	r18, Z
     c02:	2e 7f       	andi	r18, 0xFE	; 254
     c04:	20 83       	st	Z, r18
          Can_config_rx();       
     c06:	db 01       	movw	r26, r22
     c08:	8c 91       	ld	r24, X
     c0a:	8f 73       	andi	r24, 0x3F	; 63
     c0c:	8c 93       	st	X, r24
     c0e:	8c 91       	ld	r24, X
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c14:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     c16:	92 c3       	rjmp	.+1828   	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     c1c:	8a 81       	ldd	r24, Y+2	; 0x02
     c1e:	82 95       	swap	r24
     c20:	88 0f       	add	r24, r24
     c22:	80 7e       	andi	r24, 0xE0	; 224
     c24:	81 5e       	subi	r24, 0xE1	; 225
     c26:	27 ef       	ldi	r18, 0xF7	; 247
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	f9 01       	movw	r30, r18
     c2c:	80 83       	st	Z, r24
     c2e:	49 81       	ldd	r20, Y+1	; 0x01
     c30:	42 95       	swap	r20
     c32:	44 0f       	add	r20, r20
     c34:	40 7e       	andi	r20, 0xE0	; 224
     c36:	86 ef       	ldi	r24, 0xF6	; 246
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	fc 01       	movw	r30, r24
     c3c:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	4c 91       	ld	r20, X
     c42:	12 97       	sbiw	r26, 0x02	; 2
     c44:	46 95       	lsr	r20
     c46:	46 95       	lsr	r20
     c48:	46 95       	lsr	r20
     c4a:	13 96       	adiw	r26, 0x03	; 3
     c4c:	5c 91       	ld	r21, X
     c4e:	13 97       	sbiw	r26, 0x03	; 3
     c50:	f0 e2       	ldi	r31, 0x20	; 32
     c52:	5f 9f       	mul	r21, r31
     c54:	40 0d       	add	r20, r0
     c56:	11 24       	eor	r1, r1
     c58:	40 93 f3 00 	sts	0x00F3, r20
     c5c:	12 96       	adiw	r26, 0x02	; 2
     c5e:	4c 91       	ld	r20, X
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	42 95       	swap	r20
     c64:	44 0f       	add	r20, r20
     c66:	40 7e       	andi	r20, 0xE0	; 224
     c68:	40 93 f2 00 	sts	0x00F2, r20
     c6c:	6f ee       	ldi	r22, 0xEF	; 239
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	fb 01       	movw	r30, r22
     c72:	40 81       	ld	r20, Z
     c74:	4f 7e       	andi	r20, 0xEF	; 239
     c76:	40 83       	st	Z, r20
		
          u8_temp=0; 
     c78:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     c7a:	5b 81       	ldd	r21, Y+3	; 0x03
     c7c:	52 95       	swap	r21
     c7e:	56 95       	lsr	r21
     c80:	57 70       	andi	r21, 0x07	; 7
     c82:	4c 81       	ldd	r20, Y+4	; 0x04
     c84:	44 0f       	add	r20, r20
     c86:	44 0f       	add	r20, r20
     c88:	44 0f       	add	r20, r20
     c8a:	45 0f       	add	r20, r21
     c8c:	f9 01       	movw	r30, r18
     c8e:	40 83       	st	Z, r20
     c90:	3a 81       	ldd	r19, Y+2	; 0x02
     c92:	32 95       	swap	r19
     c94:	36 95       	lsr	r19
     c96:	37 70       	andi	r19, 0x07	; 7
     c98:	2b 81       	ldd	r18, Y+3	; 0x03
     c9a:	22 0f       	add	r18, r18
     c9c:	22 0f       	add	r18, r18
     c9e:	22 0f       	add	r18, r18
     ca0:	23 0f       	add	r18, r19
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 83       	st	Z, r18
     ca6:	99 81       	ldd	r25, Y+1	; 0x01
     ca8:	92 95       	swap	r25
     caa:	96 95       	lsr	r25
     cac:	97 70       	andi	r25, 0x07	; 7
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	88 0f       	add	r24, r24
     cb2:	88 0f       	add	r24, r24
     cb4:	88 0f       	add	r24, r24
     cb6:	89 0f       	add	r24, r25
     cb8:	80 93 f5 00 	sts	0x00F5, r24
     cbc:	29 81       	ldd	r18, Y+1	; 0x01
     cbe:	22 0f       	add	r18, r18
     cc0:	22 0f       	add	r18, r18
     cc2:	22 0f       	add	r18, r18
     cc4:	84 ef       	ldi	r24, 0xF4	; 244
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ccc:	fb 01       	movw	r30, r22
     cce:	30 81       	ld	r19, Z
     cd0:	16 96       	adiw	r26, 0x06	; 6
     cd2:	2c 91       	ld	r18, X
     cd4:	16 97       	sbiw	r26, 0x06	; 6
     cd6:	23 2b       	or	r18, r19
     cd8:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	1a 96       	adiw	r26, 0x0a	; 10
     cde:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     ce0:	dc 01       	movw	r26, r24
     ce2:	2c 91       	ld	r18, X
     ce4:	24 60       	ori	r18, 0x04	; 4
     ce6:	2c 93       	st	X, r18
		  Can_set_rtr();
     ce8:	a0 ef       	ldi	r26, 0xF0	; 240
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	2c 91       	ld	r18, X
     cee:	24 60       	ori	r18, 0x04	; 4
     cf0:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     cf2:	20 81       	ld	r18, Z
     cf4:	2f 7d       	andi	r18, 0xDF	; 223
     cf6:	20 83       	st	Z, r18
          Can_clear_idemsk();
     cf8:	fc 01       	movw	r30, r24
     cfa:	20 81       	ld	r18, Z
     cfc:	2e 7f       	andi	r18, 0xFE	; 254
     cfe:	20 83       	st	Z, r18
          Can_config_rx();       
     d00:	db 01       	movw	r26, r22
     d02:	8c 91       	ld	r24, X
     d04:	8f 73       	andi	r24, 0x3F	; 63
     d06:	8c 93       	st	X, r24
     d08:	8c 91       	ld	r24, X
     d0a:	80 68       	ori	r24, 0x80	; 128
     d0c:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d0e:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     d10:	15 c3       	rjmp	.+1578   	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d12:	1b 96       	adiw	r26, 0x0b	; 11
     d14:	8c 91       	ld	r24, X
     d16:	1b 97       	sbiw	r26, 0x0b	; 11
     d18:	88 23       	and	r24, r24
     d1a:	d9 f1       	breq	.+118    	; 0xd92 <__stack+0x493>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	9c 91       	ld	r25, X
     d20:	14 97       	sbiw	r26, 0x04	; 4
     d22:	92 95       	swap	r25
     d24:	96 95       	lsr	r25
     d26:	97 70       	andi	r25, 0x07	; 7
     d28:	15 96       	adiw	r26, 0x05	; 5
     d2a:	8c 91       	ld	r24, X
     d2c:	15 97       	sbiw	r26, 0x05	; 5
     d2e:	88 0f       	add	r24, r24
     d30:	88 0f       	add	r24, r24
     d32:	88 0f       	add	r24, r24
     d34:	89 0f       	add	r24, r25
     d36:	80 93 f3 00 	sts	0x00F3, r24
     d3a:	13 96       	adiw	r26, 0x03	; 3
     d3c:	9c 91       	ld	r25, X
     d3e:	13 97       	sbiw	r26, 0x03	; 3
     d40:	92 95       	swap	r25
     d42:	96 95       	lsr	r25
     d44:	97 70       	andi	r25, 0x07	; 7
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	8c 91       	ld	r24, X
     d4a:	14 97       	sbiw	r26, 0x04	; 4
     d4c:	88 0f       	add	r24, r24
     d4e:	88 0f       	add	r24, r24
     d50:	88 0f       	add	r24, r24
     d52:	89 0f       	add	r24, r25
     d54:	80 93 f2 00 	sts	0x00F2, r24
     d58:	12 96       	adiw	r26, 0x02	; 2
     d5a:	9c 91       	ld	r25, X
     d5c:	12 97       	sbiw	r26, 0x02	; 2
     d5e:	92 95       	swap	r25
     d60:	96 95       	lsr	r25
     d62:	97 70       	andi	r25, 0x07	; 7
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	8c 91       	ld	r24, X
     d68:	13 97       	sbiw	r26, 0x03	; 3
     d6a:	88 0f       	add	r24, r24
     d6c:	88 0f       	add	r24, r24
     d6e:	88 0f       	add	r24, r24
     d70:	89 0f       	add	r24, r25
     d72:	80 93 f1 00 	sts	0x00F1, r24
     d76:	12 96       	adiw	r26, 0x02	; 2
     d78:	8c 91       	ld	r24, X
     d7a:	12 97       	sbiw	r26, 0x02	; 2
     d7c:	88 0f       	add	r24, r24
     d7e:	88 0f       	add	r24, r24
     d80:	88 0f       	add	r24, r24
     d82:	80 93 f0 00 	sts	0x00F0, r24
     d86:	ef ee       	ldi	r30, 0xEF	; 239
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 61       	ori	r24, 0x10	; 16
     d8e:	80 83       	st	Z, r24
     d90:	1c c0       	rjmp	.+56     	; 0xdca <__stack+0x4cb>
          else              { Can_set_std_id(cmd->id.std);}
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	8c 91       	ld	r24, X
     d96:	12 97       	sbiw	r26, 0x02	; 2
     d98:	86 95       	lsr	r24
     d9a:	86 95       	lsr	r24
     d9c:	86 95       	lsr	r24
     d9e:	13 96       	adiw	r26, 0x03	; 3
     da0:	9c 91       	ld	r25, X
     da2:	13 97       	sbiw	r26, 0x03	; 3
     da4:	e0 e2       	ldi	r30, 0x20	; 32
     da6:	9e 9f       	mul	r25, r30
     da8:	80 0d       	add	r24, r0
     daa:	11 24       	eor	r1, r1
     dac:	80 93 f3 00 	sts	0x00F3, r24
     db0:	12 96       	adiw	r26, 0x02	; 2
     db2:	8c 91       	ld	r24, X
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	82 95       	swap	r24
     db8:	88 0f       	add	r24, r24
     dba:	80 7e       	andi	r24, 0xE0	; 224
     dbc:	80 93 f2 00 	sts	0x00F2, r24
     dc0:	ef ee       	ldi	r30, 0xEF	; 239
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8f 7e       	andi	r24, 0xEF	; 239
     dc8:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	9b 81       	ldd	r25, Y+3	; 0x03
     dd0:	92 95       	swap	r25
     dd2:	96 95       	lsr	r25
     dd4:	97 70       	andi	r25, 0x07	; 7
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	88 0f       	add	r24, r24
     dda:	88 0f       	add	r24, r24
     ddc:	88 0f       	add	r24, r24
     dde:	89 0f       	add	r24, r25
     de0:	80 93 f7 00 	sts	0x00F7, r24
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	92 95       	swap	r25
     de8:	96 95       	lsr	r25
     dea:	97 70       	andi	r25, 0x07	; 7
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	88 0f       	add	r24, r24
     df0:	88 0f       	add	r24, r24
     df2:	88 0f       	add	r24, r24
     df4:	89 0f       	add	r24, r25
     df6:	80 93 f6 00 	sts	0x00F6, r24
     dfa:	99 81       	ldd	r25, Y+1	; 0x01
     dfc:	92 95       	swap	r25
     dfe:	96 95       	lsr	r25
     e00:	97 70       	andi	r25, 0x07	; 7
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	88 0f       	add	r24, r24
     e06:	88 0f       	add	r24, r24
     e08:	88 0f       	add	r24, r24
     e0a:	89 0f       	add	r24, r25
     e0c:	80 93 f5 00 	sts	0x00F5, r24
     e10:	29 81       	ldd	r18, Y+1	; 0x01
     e12:	22 0f       	add	r18, r18
     e14:	22 0f       	add	r18, r18
     e16:	22 0f       	add	r18, r18
     e18:	84 ef       	ldi	r24, 0xF4	; 244
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     e20:	ef ee       	ldi	r30, 0xEF	; 239
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	30 81       	ld	r19, Z
     e26:	16 96       	adiw	r26, 0x06	; 6
     e28:	2c 91       	ld	r18, X
     e2a:	23 2b       	or	r18, r19
     e2c:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     e2e:	dc 01       	movw	r26, r24
     e30:	2c 91       	ld	r18, X
     e32:	2b 7f       	andi	r18, 0xFB	; 251
     e34:	2c 93       	st	X, r18
          Can_set_idemsk();
     e36:	2c 91       	ld	r18, X
     e38:	21 60       	ori	r18, 0x01	; 1
     e3a:	2c 93       	st	X, r18
          Can_config_rx();       
     e3c:	80 81       	ld	r24, Z
     e3e:	8f 73       	andi	r24, 0x3F	; 63
     e40:	80 83       	st	Z, r24
     e42:	80 81       	ld	r24, Z
     e44:	80 68       	ori	r24, 0x80	; 128
     e46:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e48:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     e4a:	78 c2       	rjmp	.+1264   	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     e4c:	1b 96       	adiw	r26, 0x0b	; 11
     e4e:	8c 91       	ld	r24, X
     e50:	1b 97       	sbiw	r26, 0x0b	; 11
     e52:	88 23       	and	r24, r24
     e54:	d9 f1       	breq	.+118    	; 0xecc <__stack+0x5cd>
     e56:	14 96       	adiw	r26, 0x04	; 4
     e58:	9c 91       	ld	r25, X
     e5a:	14 97       	sbiw	r26, 0x04	; 4
     e5c:	92 95       	swap	r25
     e5e:	96 95       	lsr	r25
     e60:	97 70       	andi	r25, 0x07	; 7
     e62:	15 96       	adiw	r26, 0x05	; 5
     e64:	8c 91       	ld	r24, X
     e66:	15 97       	sbiw	r26, 0x05	; 5
     e68:	88 0f       	add	r24, r24
     e6a:	88 0f       	add	r24, r24
     e6c:	88 0f       	add	r24, r24
     e6e:	89 0f       	add	r24, r25
     e70:	80 93 f3 00 	sts	0x00F3, r24
     e74:	13 96       	adiw	r26, 0x03	; 3
     e76:	9c 91       	ld	r25, X
     e78:	13 97       	sbiw	r26, 0x03	; 3
     e7a:	92 95       	swap	r25
     e7c:	96 95       	lsr	r25
     e7e:	97 70       	andi	r25, 0x07	; 7
     e80:	14 96       	adiw	r26, 0x04	; 4
     e82:	8c 91       	ld	r24, X
     e84:	14 97       	sbiw	r26, 0x04	; 4
     e86:	88 0f       	add	r24, r24
     e88:	88 0f       	add	r24, r24
     e8a:	88 0f       	add	r24, r24
     e8c:	89 0f       	add	r24, r25
     e8e:	80 93 f2 00 	sts	0x00F2, r24
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	9c 91       	ld	r25, X
     e96:	12 97       	sbiw	r26, 0x02	; 2
     e98:	92 95       	swap	r25
     e9a:	96 95       	lsr	r25
     e9c:	97 70       	andi	r25, 0x07	; 7
     e9e:	13 96       	adiw	r26, 0x03	; 3
     ea0:	8c 91       	ld	r24, X
     ea2:	13 97       	sbiw	r26, 0x03	; 3
     ea4:	88 0f       	add	r24, r24
     ea6:	88 0f       	add	r24, r24
     ea8:	88 0f       	add	r24, r24
     eaa:	89 0f       	add	r24, r25
     eac:	80 93 f1 00 	sts	0x00F1, r24
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	8c 91       	ld	r24, X
     eb4:	12 97       	sbiw	r26, 0x02	; 2
     eb6:	88 0f       	add	r24, r24
     eb8:	88 0f       	add	r24, r24
     eba:	88 0f       	add	r24, r24
     ebc:	80 93 f0 00 	sts	0x00F0, r24
     ec0:	ef ee       	ldi	r30, 0xEF	; 239
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 61       	ori	r24, 0x10	; 16
     ec8:	80 83       	st	Z, r24
     eca:	1c c0       	rjmp	.+56     	; 0xf04 <__stack+0x605>
          else              { Can_set_std_id(cmd->id.std);}
     ecc:	12 96       	adiw	r26, 0x02	; 2
     ece:	8c 91       	ld	r24, X
     ed0:	12 97       	sbiw	r26, 0x02	; 2
     ed2:	86 95       	lsr	r24
     ed4:	86 95       	lsr	r24
     ed6:	86 95       	lsr	r24
     ed8:	13 96       	adiw	r26, 0x03	; 3
     eda:	9c 91       	ld	r25, X
     edc:	13 97       	sbiw	r26, 0x03	; 3
     ede:	e0 e2       	ldi	r30, 0x20	; 32
     ee0:	9e 9f       	mul	r25, r30
     ee2:	80 0d       	add	r24, r0
     ee4:	11 24       	eor	r1, r1
     ee6:	80 93 f3 00 	sts	0x00F3, r24
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	8c 91       	ld	r24, X
     eee:	12 97       	sbiw	r26, 0x02	; 2
     ef0:	82 95       	swap	r24
     ef2:	88 0f       	add	r24, r24
     ef4:	80 7e       	andi	r24, 0xE0	; 224
     ef6:	80 93 f2 00 	sts	0x00F2, r24
     efa:	ef ee       	ldi	r30, 0xEF	; 239
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8f 7e       	andi	r24, 0xEF	; 239
     f02:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	92 95       	swap	r25
     f0c:	96 95       	lsr	r25
     f0e:	97 70       	andi	r25, 0x07	; 7
     f10:	8c 81       	ldd	r24, Y+4	; 0x04
     f12:	88 0f       	add	r24, r24
     f14:	88 0f       	add	r24, r24
     f16:	88 0f       	add	r24, r24
     f18:	89 0f       	add	r24, r25
     f1a:	80 93 f7 00 	sts	0x00F7, r24
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	92 95       	swap	r25
     f22:	96 95       	lsr	r25
     f24:	97 70       	andi	r25, 0x07	; 7
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	88 0f       	add	r24, r24
     f2a:	88 0f       	add	r24, r24
     f2c:	88 0f       	add	r24, r24
     f2e:	89 0f       	add	r24, r25
     f30:	80 93 f6 00 	sts	0x00F6, r24
     f34:	99 81       	ldd	r25, Y+1	; 0x01
     f36:	92 95       	swap	r25
     f38:	96 95       	lsr	r25
     f3a:	97 70       	andi	r25, 0x07	; 7
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	88 0f       	add	r24, r24
     f40:	88 0f       	add	r24, r24
     f42:	88 0f       	add	r24, r24
     f44:	89 0f       	add	r24, r25
     f46:	80 93 f5 00 	sts	0x00F5, r24
     f4a:	29 81       	ldd	r18, Y+1	; 0x01
     f4c:	22 0f       	add	r18, r18
     f4e:	22 0f       	add	r18, r18
     f50:	22 0f       	add	r18, r18
     f52:	84 ef       	ldi	r24, 0xF4	; 244
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	fc 01       	movw	r30, r24
     f58:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     f5a:	ef ee       	ldi	r30, 0xEF	; 239
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	30 81       	ld	r19, Z
     f60:	16 96       	adiw	r26, 0x06	; 6
     f62:	2c 91       	ld	r18, X
     f64:	16 97       	sbiw	r26, 0x06	; 6
     f66:	23 2b       	or	r18, r19
     f68:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     f6a:	1a 96       	adiw	r26, 0x0a	; 10
     f6c:	1c 92       	st	X, r1
     f6e:	dc 01       	movw	r26, r24
     f70:	2c 91       	ld	r18, X
     f72:	24 60       	ori	r18, 0x04	; 4
     f74:	2c 93       	st	X, r18
     f76:	a0 ef       	ldi	r26, 0xF0	; 240
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	2c 91       	ld	r18, X
     f7c:	2b 7f       	andi	r18, 0xFB	; 251
     f7e:	2c 93       	st	X, r18
          Can_set_idemsk();
     f80:	dc 01       	movw	r26, r24
     f82:	2c 91       	ld	r18, X
     f84:	21 60       	ori	r18, 0x01	; 1
     f86:	2c 93       	st	X, r18
          Can_config_rx();       
     f88:	80 81       	ld	r24, Z
     f8a:	8f 73       	andi	r24, 0x3F	; 63
     f8c:	80 83       	st	Z, r24
     f8e:	80 81       	ld	r24, Z
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     f94:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     f96:	d2 c1       	rjmp	.+932    	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f98:	1b 96       	adiw	r26, 0x0b	; 11
     f9a:	8c 91       	ld	r24, X
     f9c:	1b 97       	sbiw	r26, 0x0b	; 11
     f9e:	88 23       	and	r24, r24
     fa0:	d9 f1       	breq	.+118    	; 0x1018 <__stack+0x719>
     fa2:	14 96       	adiw	r26, 0x04	; 4
     fa4:	9c 91       	ld	r25, X
     fa6:	14 97       	sbiw	r26, 0x04	; 4
     fa8:	92 95       	swap	r25
     faa:	96 95       	lsr	r25
     fac:	97 70       	andi	r25, 0x07	; 7
     fae:	15 96       	adiw	r26, 0x05	; 5
     fb0:	8c 91       	ld	r24, X
     fb2:	15 97       	sbiw	r26, 0x05	; 5
     fb4:	88 0f       	add	r24, r24
     fb6:	88 0f       	add	r24, r24
     fb8:	88 0f       	add	r24, r24
     fba:	89 0f       	add	r24, r25
     fbc:	80 93 f3 00 	sts	0x00F3, r24
     fc0:	13 96       	adiw	r26, 0x03	; 3
     fc2:	9c 91       	ld	r25, X
     fc4:	13 97       	sbiw	r26, 0x03	; 3
     fc6:	92 95       	swap	r25
     fc8:	96 95       	lsr	r25
     fca:	97 70       	andi	r25, 0x07	; 7
     fcc:	14 96       	adiw	r26, 0x04	; 4
     fce:	8c 91       	ld	r24, X
     fd0:	14 97       	sbiw	r26, 0x04	; 4
     fd2:	88 0f       	add	r24, r24
     fd4:	88 0f       	add	r24, r24
     fd6:	88 0f       	add	r24, r24
     fd8:	89 0f       	add	r24, r25
     fda:	80 93 f2 00 	sts	0x00F2, r24
     fde:	12 96       	adiw	r26, 0x02	; 2
     fe0:	9c 91       	ld	r25, X
     fe2:	12 97       	sbiw	r26, 0x02	; 2
     fe4:	92 95       	swap	r25
     fe6:	96 95       	lsr	r25
     fe8:	97 70       	andi	r25, 0x07	; 7
     fea:	13 96       	adiw	r26, 0x03	; 3
     fec:	8c 91       	ld	r24, X
     fee:	13 97       	sbiw	r26, 0x03	; 3
     ff0:	88 0f       	add	r24, r24
     ff2:	88 0f       	add	r24, r24
     ff4:	88 0f       	add	r24, r24
     ff6:	89 0f       	add	r24, r25
     ff8:	80 93 f1 00 	sts	0x00F1, r24
     ffc:	12 96       	adiw	r26, 0x02	; 2
     ffe:	8c 91       	ld	r24, X
    1000:	12 97       	sbiw	r26, 0x02	; 2
    1002:	88 0f       	add	r24, r24
    1004:	88 0f       	add	r24, r24
    1006:	88 0f       	add	r24, r24
    1008:	80 93 f0 00 	sts	0x00F0, r24
    100c:	ef ee       	ldi	r30, 0xEF	; 239
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	80 61       	ori	r24, 0x10	; 16
    1014:	80 83       	st	Z, r24
    1016:	1c c0       	rjmp	.+56     	; 0x1050 <__stack+0x751>
          else              { Can_set_std_id(cmd->id.std);}
    1018:	12 96       	adiw	r26, 0x02	; 2
    101a:	8c 91       	ld	r24, X
    101c:	12 97       	sbiw	r26, 0x02	; 2
    101e:	86 95       	lsr	r24
    1020:	86 95       	lsr	r24
    1022:	86 95       	lsr	r24
    1024:	13 96       	adiw	r26, 0x03	; 3
    1026:	9c 91       	ld	r25, X
    1028:	13 97       	sbiw	r26, 0x03	; 3
    102a:	e0 e2       	ldi	r30, 0x20	; 32
    102c:	9e 9f       	mul	r25, r30
    102e:	80 0d       	add	r24, r0
    1030:	11 24       	eor	r1, r1
    1032:	80 93 f3 00 	sts	0x00F3, r24
    1036:	12 96       	adiw	r26, 0x02	; 2
    1038:	8c 91       	ld	r24, X
    103a:	12 97       	sbiw	r26, 0x02	; 2
    103c:	82 95       	swap	r24
    103e:	88 0f       	add	r24, r24
    1040:	80 7e       	andi	r24, 0xE0	; 224
    1042:	80 93 f2 00 	sts	0x00F2, r24
    1046:	ef ee       	ldi	r30, 0xEF	; 239
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8f 7e       	andi	r24, 0xEF	; 239
    104e:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	92 95       	swap	r25
    1058:	96 95       	lsr	r25
    105a:	97 70       	andi	r25, 0x07	; 7
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	88 0f       	add	r24, r24
    1060:	88 0f       	add	r24, r24
    1062:	88 0f       	add	r24, r24
    1064:	89 0f       	add	r24, r25
    1066:	80 93 f7 00 	sts	0x00F7, r24
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	92 95       	swap	r25
    106e:	96 95       	lsr	r25
    1070:	97 70       	andi	r25, 0x07	; 7
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	88 0f       	add	r24, r24
    1076:	88 0f       	add	r24, r24
    1078:	88 0f       	add	r24, r24
    107a:	89 0f       	add	r24, r25
    107c:	80 93 f6 00 	sts	0x00F6, r24
    1080:	99 81       	ldd	r25, Y+1	; 0x01
    1082:	92 95       	swap	r25
    1084:	96 95       	lsr	r25
    1086:	97 70       	andi	r25, 0x07	; 7
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	88 0f       	add	r24, r24
    108c:	88 0f       	add	r24, r24
    108e:	88 0f       	add	r24, r24
    1090:	89 0f       	add	r24, r25
    1092:	80 93 f5 00 	sts	0x00F5, r24
    1096:	29 81       	ldd	r18, Y+1	; 0x01
    1098:	22 0f       	add	r18, r18
    109a:	22 0f       	add	r18, r18
    109c:	22 0f       	add	r18, r18
    109e:	84 ef       	ldi	r24, 0xF4	; 244
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    10a6:	ef ee       	ldi	r30, 0xEF	; 239
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	30 81       	ld	r19, Z
    10ac:	16 96       	adiw	r26, 0x06	; 6
    10ae:	2c 91       	ld	r18, X
    10b0:	16 97       	sbiw	r26, 0x06	; 6
    10b2:	23 2b       	or	r18, r19
    10b4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    10b6:	21 e0       	ldi	r18, 0x01	; 1
    10b8:	1a 96       	adiw	r26, 0x0a	; 10
    10ba:	2c 93       	st	X, r18
    10bc:	dc 01       	movw	r26, r24
    10be:	2c 91       	ld	r18, X
    10c0:	24 60       	ori	r18, 0x04	; 4
    10c2:	2c 93       	st	X, r18
    10c4:	a0 ef       	ldi	r26, 0xF0	; 240
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	2c 91       	ld	r18, X
    10ca:	24 60       	ori	r18, 0x04	; 4
    10cc:	2c 93       	st	X, r18
          Can_clear_rplv();
    10ce:	20 81       	ld	r18, Z
    10d0:	2f 7d       	andi	r18, 0xDF	; 223
    10d2:	20 83       	st	Z, r18
          Can_set_idemsk();
    10d4:	dc 01       	movw	r26, r24
    10d6:	2c 91       	ld	r18, X
    10d8:	21 60       	ori	r18, 0x01	; 1
    10da:	2c 93       	st	X, r18
          Can_config_rx();       
    10dc:	80 81       	ld	r24, Z
    10de:	8f 73       	andi	r24, 0x3F	; 63
    10e0:	80 83       	st	Z, r24
    10e2:	80 81       	ld	r24, Z
    10e4:	80 68       	ori	r24, 0x80	; 128
    10e6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    10e8:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    10ea:	28 c1       	rjmp	.+592    	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	8a ef       	ldi	r24, 0xFA	; 250
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	17 96       	adiw	r26, 0x07	; 7
    10f4:	ed 91       	ld	r30, X+
    10f6:	fc 91       	ld	r31, X
    10f8:	18 97       	sbiw	r26, 0x08	; 8
    10fa:	e2 0f       	add	r30, r18
    10fc:	f1 1d       	adc	r31, r1
    10fe:	30 81       	ld	r19, Z
    1100:	fc 01       	movw	r30, r24
    1102:	30 83       	st	Z, r19
    1104:	2f 5f       	subi	r18, 0xFF	; 255
    1106:	16 96       	adiw	r26, 0x06	; 6
    1108:	3c 91       	ld	r19, X
    110a:	16 97       	sbiw	r26, 0x06	; 6
    110c:	23 17       	cp	r18, r19
    110e:	88 f3       	brcs	.-30     	; 0x10f2 <__stack+0x7f3>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    1110:	19 82       	std	Y+1, r1	; 0x01
    1112:	9b 81       	ldd	r25, Y+3	; 0x03
    1114:	92 95       	swap	r25
    1116:	96 95       	lsr	r25
    1118:	97 70       	andi	r25, 0x07	; 7
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	88 0f       	add	r24, r24
    111e:	88 0f       	add	r24, r24
    1120:	88 0f       	add	r24, r24
    1122:	89 0f       	add	r24, r25
    1124:	80 93 f7 00 	sts	0x00F7, r24
    1128:	9a 81       	ldd	r25, Y+2	; 0x02
    112a:	92 95       	swap	r25
    112c:	96 95       	lsr	r25
    112e:	97 70       	andi	r25, 0x07	; 7
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 0f       	add	r24, r24
    1134:	88 0f       	add	r24, r24
    1136:	88 0f       	add	r24, r24
    1138:	89 0f       	add	r24, r25
    113a:	80 93 f6 00 	sts	0x00F6, r24
    113e:	99 81       	ldd	r25, Y+1	; 0x01
    1140:	92 95       	swap	r25
    1142:	96 95       	lsr	r25
    1144:	97 70       	andi	r25, 0x07	; 7
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	88 0f       	add	r24, r24
    114a:	88 0f       	add	r24, r24
    114c:	88 0f       	add	r24, r24
    114e:	89 0f       	add	r24, r25
    1150:	80 93 f5 00 	sts	0x00F5, r24
    1154:	29 81       	ldd	r18, Y+1	; 0x01
    1156:	22 0f       	add	r18, r18
    1158:	22 0f       	add	r18, r18
    115a:	22 0f       	add	r18, r18
    115c:	84 ef       	ldi	r24, 0xF4	; 244
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	fc 01       	movw	r30, r24
    1162:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1164:	ef ee       	ldi	r30, 0xEF	; 239
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	30 81       	ld	r19, Z
    116a:	16 96       	adiw	r26, 0x06	; 6
    116c:	2c 91       	ld	r18, X
    116e:	16 97       	sbiw	r26, 0x06	; 6
    1170:	23 2b       	or	r18, r19
    1172:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1174:	21 e0       	ldi	r18, 0x01	; 1
    1176:	1a 96       	adiw	r26, 0x0a	; 10
    1178:	2c 93       	st	X, r18
    117a:	dc 01       	movw	r26, r24
    117c:	2c 91       	ld	r18, X
    117e:	24 60       	ori	r18, 0x04	; 4
    1180:	2c 93       	st	X, r18
    1182:	a0 ef       	ldi	r26, 0xF0	; 240
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	2c 91       	ld	r18, X
    1188:	24 60       	ori	r18, 0x04	; 4
    118a:	2c 93       	st	X, r18
          Can_set_rplv();
    118c:	20 81       	ld	r18, Z
    118e:	20 62       	ori	r18, 0x20	; 32
    1190:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1192:	dc 01       	movw	r26, r24
    1194:	2c 91       	ld	r18, X
    1196:	2e 7f       	andi	r18, 0xFE	; 254
    1198:	2c 93       	st	X, r18
          Can_config_rx();       
    119a:	80 81       	ld	r24, Z
    119c:	8f 73       	andi	r24, 0x3F	; 63
    119e:	80 83       	st	Z, r24
    11a0:	80 81       	ld	r24, Z
    11a2:	80 68       	ori	r24, 0x80	; 128
    11a4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    11a6:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    11a8:	c9 c0       	rjmp	.+402    	; 0x133c <__stack+0xa3d>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    11aa:	1b 96       	adiw	r26, 0x0b	; 11
    11ac:	8c 91       	ld	r24, X
    11ae:	1b 97       	sbiw	r26, 0x0b	; 11
    11b0:	88 23       	and	r24, r24
    11b2:	d9 f1       	breq	.+118    	; 0x122a <__stack+0x92b>
    11b4:	14 96       	adiw	r26, 0x04	; 4
    11b6:	9c 91       	ld	r25, X
    11b8:	14 97       	sbiw	r26, 0x04	; 4
    11ba:	92 95       	swap	r25
    11bc:	96 95       	lsr	r25
    11be:	97 70       	andi	r25, 0x07	; 7
    11c0:	15 96       	adiw	r26, 0x05	; 5
    11c2:	8c 91       	ld	r24, X
    11c4:	15 97       	sbiw	r26, 0x05	; 5
    11c6:	88 0f       	add	r24, r24
    11c8:	88 0f       	add	r24, r24
    11ca:	88 0f       	add	r24, r24
    11cc:	89 0f       	add	r24, r25
    11ce:	80 93 f3 00 	sts	0x00F3, r24
    11d2:	13 96       	adiw	r26, 0x03	; 3
    11d4:	9c 91       	ld	r25, X
    11d6:	13 97       	sbiw	r26, 0x03	; 3
    11d8:	92 95       	swap	r25
    11da:	96 95       	lsr	r25
    11dc:	97 70       	andi	r25, 0x07	; 7
    11de:	14 96       	adiw	r26, 0x04	; 4
    11e0:	8c 91       	ld	r24, X
    11e2:	14 97       	sbiw	r26, 0x04	; 4
    11e4:	88 0f       	add	r24, r24
    11e6:	88 0f       	add	r24, r24
    11e8:	88 0f       	add	r24, r24
    11ea:	89 0f       	add	r24, r25
    11ec:	80 93 f2 00 	sts	0x00F2, r24
    11f0:	12 96       	adiw	r26, 0x02	; 2
    11f2:	9c 91       	ld	r25, X
    11f4:	12 97       	sbiw	r26, 0x02	; 2
    11f6:	92 95       	swap	r25
    11f8:	96 95       	lsr	r25
    11fa:	97 70       	andi	r25, 0x07	; 7
    11fc:	13 96       	adiw	r26, 0x03	; 3
    11fe:	8c 91       	ld	r24, X
    1200:	13 97       	sbiw	r26, 0x03	; 3
    1202:	88 0f       	add	r24, r24
    1204:	88 0f       	add	r24, r24
    1206:	88 0f       	add	r24, r24
    1208:	89 0f       	add	r24, r25
    120a:	80 93 f1 00 	sts	0x00F1, r24
    120e:	12 96       	adiw	r26, 0x02	; 2
    1210:	8c 91       	ld	r24, X
    1212:	12 97       	sbiw	r26, 0x02	; 2
    1214:	88 0f       	add	r24, r24
    1216:	88 0f       	add	r24, r24
    1218:	88 0f       	add	r24, r24
    121a:	80 93 f0 00 	sts	0x00F0, r24
    121e:	ef ee       	ldi	r30, 0xEF	; 239
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 61       	ori	r24, 0x10	; 16
    1226:	80 83       	st	Z, r24
    1228:	1c c0       	rjmp	.+56     	; 0x1262 <__stack+0x963>
          else              { Can_set_std_id(cmd->id.std);}
    122a:	12 96       	adiw	r26, 0x02	; 2
    122c:	8c 91       	ld	r24, X
    122e:	12 97       	sbiw	r26, 0x02	; 2
    1230:	86 95       	lsr	r24
    1232:	86 95       	lsr	r24
    1234:	86 95       	lsr	r24
    1236:	13 96       	adiw	r26, 0x03	; 3
    1238:	9c 91       	ld	r25, X
    123a:	13 97       	sbiw	r26, 0x03	; 3
    123c:	e0 e2       	ldi	r30, 0x20	; 32
    123e:	9e 9f       	mul	r25, r30
    1240:	80 0d       	add	r24, r0
    1242:	11 24       	eor	r1, r1
    1244:	80 93 f3 00 	sts	0x00F3, r24
    1248:	12 96       	adiw	r26, 0x02	; 2
    124a:	8c 91       	ld	r24, X
    124c:	12 97       	sbiw	r26, 0x02	; 2
    124e:	82 95       	swap	r24
    1250:	88 0f       	add	r24, r24
    1252:	80 7e       	andi	r24, 0xE0	; 224
    1254:	80 93 f2 00 	sts	0x00F2, r24
    1258:	ef ee       	ldi	r30, 0xEF	; 239
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	8f 7e       	andi	r24, 0xEF	; 239
    1260:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1262:	16 96       	adiw	r26, 0x06	; 6
    1264:	8c 91       	ld	r24, X
    1266:	16 97       	sbiw	r26, 0x06	; 6
    1268:	88 23       	and	r24, r24
    126a:	91 f0       	breq	.+36     	; 0x1290 <__stack+0x991>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	8a ef       	ldi	r24, 0xFA	; 250
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	17 96       	adiw	r26, 0x07	; 7
    1274:	ed 91       	ld	r30, X+
    1276:	fc 91       	ld	r31, X
    1278:	18 97       	sbiw	r26, 0x08	; 8
    127a:	e2 0f       	add	r30, r18
    127c:	f1 1d       	adc	r31, r1
    127e:	30 81       	ld	r19, Z
    1280:	fc 01       	movw	r30, r24
    1282:	30 83       	st	Z, r19
    1284:	2f 5f       	subi	r18, 0xFF	; 255
    1286:	16 96       	adiw	r26, 0x06	; 6
    1288:	3c 91       	ld	r19, X
    128a:	16 97       	sbiw	r26, 0x06	; 6
    128c:	23 17       	cp	r18, r19
    128e:	88 f3       	brcs	.-30     	; 0x1272 <__stack+0x973>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	9b 81       	ldd	r25, Y+3	; 0x03
    1296:	92 95       	swap	r25
    1298:	96 95       	lsr	r25
    129a:	97 70       	andi	r25, 0x07	; 7
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	88 0f       	add	r24, r24
    12a0:	88 0f       	add	r24, r24
    12a2:	88 0f       	add	r24, r24
    12a4:	89 0f       	add	r24, r25
    12a6:	80 93 f7 00 	sts	0x00F7, r24
    12aa:	9a 81       	ldd	r25, Y+2	; 0x02
    12ac:	92 95       	swap	r25
    12ae:	96 95       	lsr	r25
    12b0:	97 70       	andi	r25, 0x07	; 7
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 0f       	add	r24, r24
    12b6:	88 0f       	add	r24, r24
    12b8:	88 0f       	add	r24, r24
    12ba:	89 0f       	add	r24, r25
    12bc:	80 93 f6 00 	sts	0x00F6, r24
    12c0:	99 81       	ldd	r25, Y+1	; 0x01
    12c2:	92 95       	swap	r25
    12c4:	96 95       	lsr	r25
    12c6:	97 70       	andi	r25, 0x07	; 7
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	88 0f       	add	r24, r24
    12cc:	88 0f       	add	r24, r24
    12ce:	88 0f       	add	r24, r24
    12d0:	89 0f       	add	r24, r25
    12d2:	80 93 f5 00 	sts	0x00F5, r24
    12d6:	29 81       	ldd	r18, Y+1	; 0x01
    12d8:	22 0f       	add	r18, r18
    12da:	22 0f       	add	r18, r18
    12dc:	22 0f       	add	r18, r18
    12de:	84 ef       	ldi	r24, 0xF4	; 244
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	fc 01       	movw	r30, r24
    12e4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    12e6:	ef ee       	ldi	r30, 0xEF	; 239
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	30 81       	ld	r19, Z
    12ec:	16 96       	adiw	r26, 0x06	; 6
    12ee:	2c 91       	ld	r18, X
    12f0:	16 97       	sbiw	r26, 0x06	; 6
    12f2:	23 2b       	or	r18, r19
    12f4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	1a 96       	adiw	r26, 0x0a	; 10
    12fa:	2c 93       	st	X, r18
    12fc:	dc 01       	movw	r26, r24
    12fe:	2c 91       	ld	r18, X
    1300:	24 60       	ori	r18, 0x04	; 4
    1302:	2c 93       	st	X, r18
    1304:	a0 ef       	ldi	r26, 0xF0	; 240
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	2c 91       	ld	r18, X
    130a:	24 60       	ori	r18, 0x04	; 4
    130c:	2c 93       	st	X, r18
          Can_set_rplv();
    130e:	20 81       	ld	r18, Z
    1310:	20 62       	ori	r18, 0x20	; 32
    1312:	20 83       	st	Z, r18
          Can_set_idemsk();
    1314:	dc 01       	movw	r26, r24
    1316:	2c 91       	ld	r18, X
    1318:	21 60       	ori	r18, 0x01	; 1
    131a:	2c 93       	st	X, r18
          Can_config_rx();       
    131c:	80 81       	ld	r24, Z
    131e:	8f 73       	andi	r24, 0x3F	; 63
    1320:	80 83       	st	Z, r24
    1322:	80 81       	ld	r24, Z
    1324:	80 68       	ori	r24, 0x80	; 128
    1326:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1328:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    132a:	08 c0       	rjmp	.+16     	; 0x133c <__stack+0xa3d>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    132c:	19 96       	adiw	r26, 0x09	; 9
    132e:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1330:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    1332:	04 c0       	rjmp	.+8      	; 0x133c <__stack+0xa3d>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1334:	8f e1       	ldi	r24, 0x1F	; 31
    1336:	19 96       	adiw	r26, 0x09	; 9
    1338:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    133c:	0f 90       	pop	r0
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    134a:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    134c:	88 23       	and	r24, r24
    134e:	09 f4       	brne	.+2      	; 0x1352 <can_get_status+0xe>
    1350:	e3 c0       	rjmp	.+454    	; 0x1518 <can_get_status+0x1d4>
    1352:	8f 31       	cpi	r24, 0x1F	; 31
    1354:	09 f4       	brne	.+2      	; 0x1358 <can_get_status+0x14>
    1356:	e2 c0       	rjmp	.+452    	; 0x151c <can_get_status+0x1d8>
    1358:	8f 3f       	cpi	r24, 0xFF	; 255
    135a:	09 f4       	brne	.+2      	; 0x135e <can_get_status+0x1a>
    135c:	e1 c0       	rjmp	.+450    	; 0x1520 <can_get_status+0x1dc>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    135e:	62 95       	swap	r22
    1360:	60 7f       	andi	r22, 0xF0	; 240
    1362:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    1366:	0e 94 39 03 	call	0x672	; 0x672 <can_get_mob_status>
    
    switch (a_status)
    136a:	80 32       	cpi	r24, 0x20	; 32
    136c:	61 f0       	breq	.+24     	; 0x1386 <can_get_status+0x42>
    136e:	20 f4       	brcc	.+8      	; 0x1378 <can_get_status+0x34>
    1370:	88 23       	and	r24, r24
    1372:	09 f4       	brne	.+2      	; 0x1376 <can_get_status+0x32>
    1374:	d7 c0       	rjmp	.+430    	; 0x1524 <can_get_status+0x1e0>
    1376:	c6 c0       	rjmp	.+396    	; 0x1504 <can_get_status+0x1c0>
    1378:	80 34       	cpi	r24, 0x40	; 64
    137a:	09 f4       	brne	.+2      	; 0x137e <can_get_status+0x3a>
    137c:	b8 c0       	rjmp	.+368    	; 0x14ee <can_get_status+0x1aa>
    137e:	80 3a       	cpi	r24, 0xA0	; 160
    1380:	09 f4       	brne	.+2      	; 0x1384 <can_get_status+0x40>
    1382:	5c c0       	rjmp	.+184    	; 0x143c <can_get_status+0xf8>
    1384:	bf c0       	rjmp	.+382    	; 0x1504 <can_get_status+0x1c0>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_toggle(LED7);	//Toggle LED0 when the appropriate message is received.
    1386:	87 e0       	ldi	r24, 0x07	; 7
    1388:	0e 94 0e 0b 	call	0x161c	; 0x161c <LED_toggle>
			delay_ms(100);
    138c:	84 e6       	ldi	r24, 0x64	; 100
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
			LED_toggle(LED7);
    1394:	87 e0       	ldi	r24, 0x07	; 7
    1396:	0e 94 0e 0b 	call	0x161c	; 0x161c <LED_toggle>
			delay_ms(100);
    139a:	84 e6       	ldi	r24, 0x64	; 100
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
	    
            cmd->ctrl.rtr = Can_get_rtr();
    13a2:	80 91 f0 00 	lds	r24, 0x00F0
    13a6:	82 fb       	bst	r24, 2
    13a8:	88 27       	eor	r24, r24
    13aa:	80 f9       	bld	r24, 0
    13ac:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    13ae:	80 91 ef 00 	lds	r24, 0x00EF
    13b2:	84 ff       	sbrs	r24, 4
    13b4:	2d c0       	rjmp	.+90     	; 0x1410 <can_get_status+0xcc>
            {
	            cmd->ctrl.ide = 1; // extended frame
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    13ba:	e3 ef       	ldi	r30, 0xF3	; 243
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	86 95       	lsr	r24
    13c2:	86 95       	lsr	r24
    13c4:	86 95       	lsr	r24
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	a2 ef       	ldi	r26, 0xF2	; 242
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	8c 91       	ld	r24, X
    13ce:	90 81       	ld	r25, Z
    13d0:	86 95       	lsr	r24
    13d2:	86 95       	lsr	r24
    13d4:	86 95       	lsr	r24
    13d6:	20 e2       	ldi	r18, 0x20	; 32
    13d8:	92 9f       	mul	r25, r18
    13da:	80 0d       	add	r24, r0
    13dc:	11 24       	eor	r1, r1
    13de:	8c 83       	std	Y+4, r24	; 0x04
    13e0:	e1 ef       	ldi	r30, 0xF1	; 241
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	9c 91       	ld	r25, X
    13e8:	86 95       	lsr	r24
    13ea:	86 95       	lsr	r24
    13ec:	86 95       	lsr	r24
    13ee:	20 e2       	ldi	r18, 0x20	; 32
    13f0:	92 9f       	mul	r25, r18
    13f2:	80 0d       	add	r24, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	8b 83       	std	Y+3, r24	; 0x03
    13f8:	80 91 f0 00 	lds	r24, 0x00F0
    13fc:	90 81       	ld	r25, Z
    13fe:	86 95       	lsr	r24
    1400:	86 95       	lsr	r24
    1402:	86 95       	lsr	r24
    1404:	20 e2       	ldi	r18, 0x20	; 32
    1406:	92 9f       	mul	r25, r18
    1408:	80 0d       	add	r24, r0
    140a:	11 24       	eor	r1, r1
    140c:	8a 83       	std	Y+2, r24	; 0x02
    140e:	07 c0       	rjmp	.+14     	; 0x141e <can_get_status+0xda>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    1410:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    1412:	e3 ef       	ldi	r30, 0xF3	; 243
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 91 f2 00 	lds	r24, 0x00F2
    141c:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    141e:	80 e2       	ldi	r24, 0x20	; 32
    1420:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1422:	8f 81       	ldd	r24, Y+7	; 0x07
    1424:	98 85       	ldd	r25, Y+8	; 0x08
    1426:	0e 94 4f 03 	call	0x69e	; 0x69e <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    142a:	ef ee       	ldi	r30, 0xEF	; 239
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	8f 73       	andi	r24, 0x3F	; 63
    1432:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    1434:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    1438:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    143a:	75 c0       	rjmp	.+234    	; 0x1526 <can_get_status+0x1e2>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    143c:	80 91 f0 00 	lds	r24, 0x00F0
    1440:	82 fb       	bst	r24, 2
    1442:	88 27       	eor	r24, r24
    1444:	80 f9       	bld	r24, 0
    1446:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1448:	80 91 ef 00 	lds	r24, 0x00EF
    144c:	84 ff       	sbrs	r24, 4
    144e:	2d c0       	rjmp	.+90     	; 0x14aa <can_get_status+0x166>
            {
                cmd->ctrl.ide = 1; // extended frame
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1454:	e3 ef       	ldi	r30, 0xF3	; 243
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	86 95       	lsr	r24
    145c:	86 95       	lsr	r24
    145e:	86 95       	lsr	r24
    1460:	8d 83       	std	Y+5, r24	; 0x05
    1462:	a2 ef       	ldi	r26, 0xF2	; 242
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	8c 91       	ld	r24, X
    1468:	90 81       	ld	r25, Z
    146a:	86 95       	lsr	r24
    146c:	86 95       	lsr	r24
    146e:	86 95       	lsr	r24
    1470:	20 e2       	ldi	r18, 0x20	; 32
    1472:	92 9f       	mul	r25, r18
    1474:	80 0d       	add	r24, r0
    1476:	11 24       	eor	r1, r1
    1478:	8c 83       	std	Y+4, r24	; 0x04
    147a:	e1 ef       	ldi	r30, 0xF1	; 241
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	9c 91       	ld	r25, X
    1482:	86 95       	lsr	r24
    1484:	86 95       	lsr	r24
    1486:	86 95       	lsr	r24
    1488:	20 e2       	ldi	r18, 0x20	; 32
    148a:	92 9f       	mul	r25, r18
    148c:	80 0d       	add	r24, r0
    148e:	11 24       	eor	r1, r1
    1490:	8b 83       	std	Y+3, r24	; 0x03
    1492:	80 91 f0 00 	lds	r24, 0x00F0
    1496:	90 81       	ld	r25, Z
    1498:	86 95       	lsr	r24
    149a:	86 95       	lsr	r24
    149c:	86 95       	lsr	r24
    149e:	20 e2       	ldi	r18, 0x20	; 32
    14a0:	92 9f       	mul	r25, r18
    14a2:	80 0d       	add	r24, r0
    14a4:	11 24       	eor	r1, r1
    14a6:	8a 83       	std	Y+2, r24	; 0x02
    14a8:	13 c0       	rjmp	.+38     	; 0x14d0 <can_get_status+0x18c>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    14aa:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    14ac:	e3 ef       	ldi	r30, 0xF3	; 243
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	82 95       	swap	r24
    14b4:	86 95       	lsr	r24
    14b6:	87 70       	andi	r24, 0x07	; 7
    14b8:	8b 83       	std	Y+3, r24	; 0x03
    14ba:	80 91 f2 00 	lds	r24, 0x00F2
    14be:	90 81       	ld	r25, Z
    14c0:	99 0f       	add	r25, r25
    14c2:	99 0f       	add	r25, r25
    14c4:	99 0f       	add	r25, r25
    14c6:	82 95       	swap	r24
    14c8:	86 95       	lsr	r24
    14ca:	87 70       	andi	r24, 0x07	; 7
    14cc:	89 0f       	add	r24, r25
    14ce:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    14d0:	80 ea       	ldi	r24, 0xA0	; 160
    14d2:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    14d4:	8f 81       	ldd	r24, Y+7	; 0x07
    14d6:	98 85       	ldd	r25, Y+8	; 0x08
    14d8:	0e 94 4f 03 	call	0x69e	; 0x69e <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    14dc:	ef ee       	ldi	r30, 0xEF	; 239
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 73       	andi	r24, 0x3F	; 63
    14e4:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    14e6:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    14ea:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    14ec:	1c c0       	rjmp	.+56     	; 0x1526 <can_get_status+0x1e2>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    14ee:	80 e4       	ldi	r24, 0x40	; 64
    14f0:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    14f2:	ef ee       	ldi	r30, 0xEF	; 239
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 73       	andi	r24, 0x3F	; 63
    14fa:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    14fc:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1500:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1502:	11 c0       	rjmp	.+34     	; 0x1526 <can_get_status+0x1e2>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1504:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    1506:	ef ee       	ldi	r30, 0xEF	; 239
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8f 73       	andi	r24, 0x3F	; 63
    150e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1510:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1514:	82 e0       	ldi	r24, 0x02	; 2
            break;
    1516:	07 c0       	rjmp	.+14     	; 0x1526 <can_get_status+0x1e2>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	05 c0       	rjmp	.+10     	; 0x1526 <can_get_status+0x1e2>
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <can_get_status+0x1e2>
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <can_get_status+0x1e2>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1524:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	08 95       	ret

0000152c <send_response>:
	return;	
}
/*****************************************************/

void send_response(void)
{
    152c:	e0 e1       	ldi	r30, 0x10	; 16
    152e:	f1 e0       	ldi	r31, 0x01	; 1
    1530:	88 e1       	ldi	r24, 0x18	; 24
    1532:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t i;
	for (i = 0; i < 8; i ++)
	{
		send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    1534:	20 ef       	ldi	r18, 0xF0	; 240
    1536:	21 93       	st	Z+, r18
/*****************************************************/

void send_response(void)
{
	uint8_t i;
	for (i = 0; i < 8; i ++)
    1538:	e8 17       	cp	r30, r24
    153a:	f9 07       	cpc	r31, r25
    153c:	e1 f7       	brne	.-8      	; 0x1536 <send_response+0xa>
	{
		send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
	}
	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    153e:	60 e1       	ldi	r22, 0x10	; 16
    1540:	80 e1       	ldi	r24, 0x10	; 16
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_hk = 0;
    1548:	10 92 35 01 	sts	0x0135, r1
    154c:	08 95       	ret

0000154e <send_housekeeping>:
	return;
}

void send_housekeeping(void)
{	
    154e:	e0 e1       	ldi	r30, 0x10	; 16
    1550:	f1 e0       	ldi	r31, 0x01	; 1
    1552:	88 e1       	ldi	r24, 0x18	; 24
    1554:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t i;
		
	for (i = 0; i < 8; i ++)
	{
		send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    1556:	20 ef       	ldi	r18, 0xF0	; 240
    1558:	21 93       	st	Z+, r18

void send_housekeeping(void)
{	
	uint8_t i;
		
	for (i = 0; i < 8; i ++)
    155a:	e8 17       	cp	r30, r24
    155c:	f9 07       	cpc	r31, r25
    155e:	e1 f7       	brne	.-8      	; 0x1558 <send_housekeeping+0xa>
	{
		send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
	}
	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1560:	60 e1       	ldi	r22, 0x10	; 16
    1562:	80 e1       	ldi	r24, 0x10	; 16
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_hk = 0;
    156a:	10 92 35 01 	sts	0x0135, r1
    156e:	08 95       	ret

00001570 <send_sensor_data>:
	return;
}

void send_sensor_data(void)
{
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	00 d0       	rcall	.+0      	; 0x1576 <send_sensor_data+0x6>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	e0 e1       	ldi	r30, 0x10	; 16
    157c:	f1 e0       	ldi	r31, 0x01	; 1
    157e:	88 e1       	ldi	r24, 0x18	; 24
    1580:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t i, high, low;
	
	for (i = 0; i < 8; i ++)
	{
		send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    1582:	11 92       	st	Z+, r1

void send_sensor_data(void)
{
	uint8_t i, high, low;
	
	for (i = 0; i < 8; i ++)
    1584:	e8 17       	cp	r30, r24
    1586:	f9 07       	cpc	r31, r25
    1588:	e1 f7       	brne	.-8      	; 0x1582 <send_sensor_data+0x12>
		send_arr[i] = 0x00;		// Message to be sent back to the OBC.
	}
			
	//adc_read(&send_arr[0]);	// This line was used to acquire temp from an analog sensor.

	spi_retrieve_temp(&high, &low);
    158a:	be 01       	movw	r22, r28
    158c:	6e 5f       	subi	r22, 0xFE	; 254
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	ce 01       	movw	r24, r28
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	0e 94 8c 0b 	call	0x1718	; 0x1718 <spi_retrieve_temp>
			
	send_arr[1] = high;			// SPI temperature sensor readings.
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	80 93 11 01 	sts	0x0111, r24
	send_arr[0] = low;
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	80 93 10 01 	sts	0x0110, r24
			
	send_arr[4] = 0x55;			// Temperature indicator.
    15a4:	85 e5       	ldi	r24, 0x55	; 85
    15a6:	80 93 14 01 	sts	0x0114, r24
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    15aa:	6a e0       	ldi	r22, 0x0A	; 10
    15ac:	80 e1       	ldi	r24, 0x10	; 16
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_data = 0;
    15b4:	10 92 46 01 	sts	0x0146, r1
	
	return;
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <send_coms_packet>:

void send_coms_packet(void)
{			
    15c2:	e0 e1       	ldi	r30, 0x10	; 16
    15c4:	f1 e0       	ldi	r31, 0x01	; 1
    15c6:	88 e1       	ldi	r24, 0x18	; 24
    15c8:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t i;
	
	for (i = 0; i < 8; i ++)
	{
		send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    15ca:	11 92       	st	Z+, r1

void send_coms_packet(void)
{			
	uint8_t i;
	
	for (i = 0; i < 8; i ++)
    15cc:	e8 17       	cp	r30, r24
    15ce:	f9 07       	cpc	r31, r25
    15d0:	e1 f7       	brne	.-8      	; 0x15ca <send_coms_packet+0x8>
	{
		send_arr[i] = 0x00;		// Message to be sent back to the OBC.
	}
	
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    15d2:	80 91 52 01 	lds	r24, 0x0152
    15d6:	80 93 10 01 	sts	0x0110, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB5);		//CAN1_MB0 is the data reception MB.
    15da:	6f e0       	ldi	r22, 0x0F	; 15
    15dc:	80 e1       	ldi	r24, 0x10	; 16
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_coms = 0;
    15e4:	10 92 51 01 	sts	0x0151, r1
    15e8:	08 95       	ret

000015ea <run_commands>:

#include "commands.h"

void run_commands(void)
{
	if (send_now == 1)
    15ea:	80 91 2c 01 	lds	r24, 0x012C
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <run_commands+0xc>
		send_response();
    15f2:	0e 94 96 0a 	call	0x152c	; 0x152c <send_response>
	if (send_hk == 1)
    15f6:	80 91 35 01 	lds	r24, 0x0135
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	11 f4       	brne	.+4      	; 0x1602 <run_commands+0x18>
		send_housekeeping();
    15fe:	0e 94 a7 0a 	call	0x154e	; 0x154e <send_housekeeping>
	if (send_data == 1)
    1602:	80 91 46 01 	lds	r24, 0x0146
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	11 f4       	brne	.+4      	; 0x160e <run_commands+0x24>
		send_sensor_data();
    160a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <send_sensor_data>
	if (send_coms == 1)
    160e:	80 91 51 01 	lds	r24, 0x0151
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	11 f4       	brne	.+4      	; 0x161a <run_commands+0x30>
		send_coms_packet();
    1616:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <send_coms_packet>
    161a:	08 95       	ret

0000161c <LED_toggle>:
	LEDPORT |= (1 << LED);
}

void LED_toggle(uint8_t LED) {
	
	if(LED == 7)
    161c:	87 30       	cpi	r24, 0x07	; 7
    161e:	29 f4       	brne	.+10     	; 0x162a <LED_toggle+0xe>
	{
		PORTD ^= 0x01;
    1620:	2b b1       	in	r18, 0x0b	; 11
    1622:	91 e0       	ldi	r25, 0x01	; 1
    1624:	92 27       	eor	r25, r18
    1626:	9b b9       	out	0x0b, r25	; 11
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <LED_toggle+0x1c>
	}
	if(LED == 3)
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	29 f4       	brne	.+10     	; 0x1638 <LED_toggle+0x1c>
	{
		PORTC ^= 0x01;
    162e:	98 b1       	in	r25, 0x08	; 8
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	89 27       	eor	r24, r25
    1634:	88 b9       	out	0x08, r24	; 8
    1636:	08 95       	ret
	}
	else
		LEDPORT ^= (1 << LED);
    1638:	45 b1       	in	r20, 0x05	; 5
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	b9 01       	movw	r22, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <LED_toggle+0x2a>
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <LED_toggle+0x26>
    164a:	cb 01       	movw	r24, r22
    164c:	84 27       	eor	r24, r20
    164e:	85 b9       	out	0x05, r24	; 5
    1650:	08 95       	ret

00001652 <main>:
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    1652:	e1 e6       	ldi	r30, 0x61	; 97
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 e8       	ldi	r24, 0x80	; 128
    1658:	80 83       	st	Z, r24
	CLKPR = 0x00;
    165a:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    165c:	8e ef       	ldi	r24, 0xFE	; 254
    165e:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    1660:	81 e1       	ldi	r24, 0x11	; 17
    1662:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    1664:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    1666:	89 e0       	ldi	r24, 0x09	; 9
    1668:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    166e:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    1670:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	
	timer_init();
    1672:	0e 94 b8 0b 	call	0x1770	; 0x1770 <timer_init>
	adc_initialize();
    1676:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	0e 94 67 03 	call	0x6ce	; 0x6ce <can_init>
	can_init_mobs();
    1680:	0e 94 7e 02 	call	0x4fc	; 0x4fc <can_init_mobs>
	spi_initialize_master();
    1684:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <spi_initialize_master>
	
	// Enable global interrupts for Timer execution
	sei();
    1688:	78 94       	sei
	
	transceiver_initialize();
    168a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <transceiver_initialize>
	
	SS1_set_high();		// SPI Temp Sensor.
    168e:	0e 94 83 0b 	call	0x1706	; 0x1706 <SS1_set_high>
	
	LED_toggle(LED7);
    1692:	87 e0       	ldi	r24, 0x07	; 7
    1694:	0e 94 0e 0b 	call	0x161c	; 0x161c <LED_toggle>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    1698:	0e 94 08 02 	call	0x410	; 0x410 <can_check_general>
	
		/*		TRANSCEIVER COMMUNICATION	*/
		trans_check();
    169c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <trans_check>
		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    16a0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <run_commands>
    16a4:	f9 cf       	rjmp	.-14     	; 0x1698 <main+0x46>

000016a6 <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    16a6:	85 b7       	in	r24, 0x35	; 53
    16a8:	8f 77       	andi	r24, 0x7F	; 127
    16aa:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    16ac:	83 e5       	ldi	r24, 0x53	; 83
    16ae:	8c bd       	out	0x2c, r24	; 44
    16b0:	08 95       	ret

000016b2 <spi_transfer>:
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	//SS_set_low();
	*reg_ptr = message;
    16b2:	8e bd       	out	0x2e, r24	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    16b4:	0d b4       	in	r0, 0x2d	; 45
    16b6:	07 fc       	sbrc	r0, 7
    16b8:	04 c0       	rjmp	.+8      	; 0x16c2 <spi_transfer+0x10>
    16ba:	89 ee       	ldi	r24, 0xE9	; 233
    16bc:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    16be:	f1 f7       	brne	.-4      	; 0x16bc <spi_transfer+0xa>
    16c0:	08 95       	ret
			delay_ms(100);
		}
	}	
	//SS_set_high();
	
	delay_cycles(10);
    16c2:	8a e0       	ldi	r24, 0x0A	; 10
    16c4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <delay_cycles>
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    16c8:	8e b5       	in	r24, 0x2e	; 46
		//temp2 = temp2 << (7 - i);		
		//temp += temp2;
	//}
	
	return receive_char;					// Transmission was successful, return the character that was received.
}
    16ca:	08 95       	ret

000016cc <SS_set_high>:
/************************************************************************/

void SS_set_high(void) 
{
	//PORTD |= (1 << 3);
	delay_us(1);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
    16d4:	08 95       	ret

000016d6 <spi_transfer2>:
	
	return receive_char;					// Transmission was successful, return the character that was received.
}

uint8_t spi_transfer2(uint8_t message)
{
    16d6:	cf 93       	push	r28
	//cmd_str(SRES);
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	PORTD &= (0xF7);
    16d8:	5b 98       	cbi	0x0b, 3	; 11
	//delay_cycles(10);
	*reg_ptr = message;
    16da:	8e bd       	out	0x2e, r24	; 46
	//delay_cycles(10);
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    16dc:	0d b4       	in	r0, 0x2d	; 45
    16de:	07 fc       	sbrc	r0, 7
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <spi_transfer2+0x18>
    16e2:	c9 ee       	ldi	r28, 0xE9	; 233
    16e4:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <spi_transfer2+0xe>
		{
			SS_set_high();
    16e8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <SS_set_high>
			return 0x00;						// Something went wrong, so the function times out.
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <spi_transfer2+0x2a>
		}
	}
	delay_cycles(7);
    16ee:	87 e0       	ldi	r24, 0x07	; 7
    16f0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <delay_cycles>
	SS_set_high();
    16f4:	0e 94 66 0b 	call	0x16cc	; 0x16cc <SS_set_high>
	
	delay_cycles(10);
    16f8:	8a e0       	ldi	r24, 0x0A	; 10
    16fa:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <delay_cycles>
		
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    16fe:	ce b5       	in	r28, 0x2e	; 46
		
	return receive_char;					// Transmission was successful, return the character that was received.
}
    1700:	8c 2f       	mov	r24, r28
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    1706:	44 9a       	sbi	0x08, 4	; 8
    1708:	08 95       	ret

0000170a <SS_set_low>:
/************************************************************************/

void SS_set_low(void)
{
	//PORTD &= (0xF7);
	delay_us(1);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
    1712:	08 95       	ret

00001714 <SS1_set_low>:
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    1714:	44 98       	cbi	0x08, 4	; 8
    1716:	08 95       	ret

00001718 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	8c 01       	movw	r16, r24
    1722:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    1724:	0e 94 8a 0b 	call	0x1714	; 0x1714 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    1728:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    172a:	80 e8       	ldi	r24, 0x80	; 128
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
	*high = *reg_ptr;
    1732:	8e b5       	in	r24, 0x2e	; 46
    1734:	f8 01       	movw	r30, r16
    1736:	80 83       	st	Z, r24
	delay_ms(128);
    1738:	80 e8       	ldi	r24, 0x80	; 128
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
	*low = *reg_ptr;	
    1740:	8e b5       	in	r24, 0x2e	; 46
    1742:	88 83       	st	Y, r24
	SS1_set_high();
    1744:	0e 94 83 0b 	call	0x1706	; 0x1706 <SS1_set_high>
	
	return;
}
    1748:	df 91       	pop	r29
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

00001752 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	8f 93       	push	r24
	CTC_flag = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	80 93 58 01 	sts	0x0158, r24
}
    1764:	8f 91       	pop	r24
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    1770:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    1774:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    1778:	8a e0       	ldi	r24, 0x0A	; 10
    177a:	80 93 81 00 	sts	0x0081, r24
    177e:	08 95       	ret

00001780 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    1780:	10 92 58 01 	sts	0x0158, r1
	TCNT1 = 0x0000; //Clear timer
    1784:	10 92 85 00 	sts	0x0085, r1
    1788:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    178c:	90 93 89 00 	sts	0x0089, r25
    1790:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    179a:	80 91 58 01 	lds	r24, 0x0158
    179e:	88 23       	and	r24, r24
    17a0:	e1 f3       	breq	.-8      	; 0x179a <delay_us+0x1a>
}
    17a2:	08 95       	ret

000017a4 <delay_ms>:

void delay_ms(uint16_t ms) {
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	51 f0       	breq	.+20     	; 0x17c6 <delay_ms+0x22>
    17b2:	c0 e0       	ldi	r28, 0x00	; 0
    17b4:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    17b6:	88 ee       	ldi	r24, 0xE8	; 232
    17b8:	93 e0       	ldi	r25, 0x03	; 3
    17ba:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    17be:	21 96       	adiw	r28, 0x01	; 1
    17c0:	c0 17       	cp	r28, r16
    17c2:	d1 07       	cpc	r29, r17
    17c4:	c1 f7       	brne	.-16     	; 0x17b6 <delay_ms+0x12>
		delay_us(1000);
	}
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <delay_cycles>:

void delay_cycles(uint8_t cycles)	// @ 8 MHz, 1 cycle = 125 ns
{
	uint8_t i;
	
	for (i = 0; i < cycles; i++)
    17d0:	88 23       	and	r24, r24
    17d2:	21 f0       	breq	.+8      	; 0x17dc <delay_cycles+0xc>
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9f 5f       	subi	r25, 0xFF	; 255
    17d8:	98 13       	cpse	r25, r24
    17da:	fd cf       	rjmp	.-6      	; 0x17d6 <delay_cycles+0x6>
    17dc:	08 95       	ret

000017de <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
    17de:	cf 93       	push	r28
    17e0:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
    17e2:	0e 94 85 0b 	call	0x170a	; 0x170a <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
    17e6:	80 e8       	ldi	r24, 0x80	; 128
    17e8:	8c 0f       	add	r24, r28
    17ea:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	delay_us(1);
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	msg = spi_transfer(0x00);
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
    17fc:	c8 2f       	mov	r28, r24

	SS_set_high();
    17fe:	0e 94 66 0b 	call	0x16cc	; 0x16cc <SS_set_high>
	
	delay_ms(1);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
	
	return msg;
}
    180a:	8c 2f       	mov	r24, r28
    180c:	cf 91       	pop	r28
    180e:	08 95       	ret

00001810 <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	d8 2f       	mov	r29, r24
    1816:	c6 2f       	mov	r28, r22
	uint8_t msg, check, i;
	
	SS_set_low();
    1818:	0e 94 85 0b 	call	0x170a	; 0x170a <SS_set_low>
	msg = spi_transfer(addr);		// Send the desired address
    181c:	8d 2f       	mov	r24, r29
    181e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	delay_us(1);
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    182a:	8c 2f       	mov	r24, r28
    182c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	SS_set_high();
    1830:	0e 94 66 0b 	call	0x16cc	; 0x16cc <SS_set_high>
	
	delay_ms(1);
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>

	return;
}
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
    1842:	cf 93       	push	r28
    1844:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
    1846:	0e 94 85 0b 	call	0x170a	; 0x170a <SS_set_low>
	msg = spi_transfer(msg);
    184a:	8f ea       	ldi	r24, 0xAF	; 175
    184c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	delay_us(1);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1858:	8c 2f       	mov	r24, r28
    185a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	delay_us(1);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	msg = spi_transfer(0x00);
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
    186c:	c8 2f       	mov	r28, r24
	SS_set_high();
    186e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <SS_set_high>
	delay_ms(1);
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
	return msg;
}
    187a:	8c 2f       	mov	r24, r28
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr)
{
    1880:	cf 93       	push	r28
	uint8_t msg;
	
	msg = spi_transfer2(addr);
    1882:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <spi_transfer2>
    1886:	c8 2f       	mov	r28, r24
	
	delay_us(1);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	return msg;
}
    1890:	8c 2f       	mov	r24, r28
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	d8 2f       	mov	r29, r24
    189c:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    189e:	8d e3       	ldi	r24, 0x3D	; 61
    18a0:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
	uint8_t msg, i, check;
	msg = 0b00101111;
	
	SS_set_low();
    18a4:	0e 94 85 0b 	call	0x170a	; 0x170a <SS_set_low>
	spi_transfer(msg);
    18a8:	8f e2       	ldi	r24, 0x2F	; 47
    18aa:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	delay_us(1);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    18b6:	8d 2f       	mov	r24, r29
    18b8:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	delay_us(1);
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    18c4:	8c 2f       	mov	r24, r28
    18c6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	SS_set_high();
    18ca:	0e 94 66 0b 	call	0x16cc	; 0x16cc <SS_set_high>
	delay_ms(1);
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>

	return;
}
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <get_status>:
/*		Note: 000 = IDLE, 001 = RX, 110 = RX buffer overflow.			*/
/*																		*/
/************************************************************************/

void get_status(uint8_t *CHIP_RDYn, uint8_t *state)
{
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	eb 01       	movw	r28, r22
	uint8_t msg;

	msg = cmd_str(SNOP);
    18e2:	8d e3       	ldi	r24, 0x3D	; 61
    18e4:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
	
	msg = msg & ~0x80;
    18e8:	8f 77       	andi	r24, 0x7F	; 127
	msg = msg >> 4;
    18ea:	82 95       	swap	r24
    18ec:	8f 70       	andi	r24, 0x0F	; 15
	*state = msg;
    18ee:	88 83       	st	Y, r24
	
	return;
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <dir_FIFO_read>:
/*	on the CC1120's FIFO and return the byte which was located there.	*/
/*																		*/
/************************************************************************/

uint8_t dir_FIFO_read(uint8_t addr)
{
    18f6:	cf 93       	push	r28
    18f8:	c8 2f       	mov	r28, r24
	cmd_str(SNOP);
    18fa:	8d e3       	ldi	r24, 0x3D	; 61
    18fc:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
	uint8_t msg;
	msg = 0b10111110;
	
	SS_set_low();
    1900:	0e 94 85 0b 	call	0x170a	; 0x170a <SS_set_low>
	msg = spi_transfer(msg);
    1904:	8e eb       	ldi	r24, 0xBE	; 190
    1906:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	delay_us(1);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1912:	8c 2f       	mov	r24, r28
    1914:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
	delay_us(1);
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 c0 0b 	call	0x1780	; 0x1780 <delay_us>
	msg = spi_transfer(0x00);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <spi_transfer>
    1926:	c8 2f       	mov	r28, r24
	SS_set_high();
    1928:	0e 94 66 0b 	call	0x16cc	; 0x16cc <SS_set_high>
	delay_ms(1);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
	return msg;
}
    1934:	8c 2f       	mov	r24, r28
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	c8 2f       	mov	r28, r24
    1942:	d6 2f       	mov	r29, r22
    1944:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
    1946:	0e 94 ef 0b 	call	0x17de	; 0x17de <reg_read>
	if(!data)
    194a:	11 11       	cpse	r17, r1
    194c:	0c c0       	rjmp	.+24     	; 0x1966 <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
    194e:	e1 e0       	ldi	r30, 0x01	; 1
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	af 01       	movw	r20, r30
    1954:	02 c0       	rjmp	.+4      	; 0x195a <reg_write_bit+0x20>
    1956:	44 0f       	add	r20, r20
    1958:	55 1f       	adc	r21, r21
    195a:	da 95       	dec	r29
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <reg_write_bit+0x1c>
    195e:	40 95       	com	r20
		msg = temp & msg;
    1960:	68 2f       	mov	r22, r24
    1962:	64 23       	and	r22, r20
    1964:	0a c0       	rjmp	.+20     	; 0x197a <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	9a 01       	movw	r18, r20
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <reg_write_bit+0x38>
    196e:	22 0f       	add	r18, r18
    1970:	33 1f       	adc	r19, r19
    1972:	da 95       	dec	r29
    1974:	e2 f7       	brpl	.-8      	; 0x196e <reg_write_bit+0x34>
		msg = temp | msg;
    1976:	68 2f       	mov	r22, r24
    1978:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
    197a:	8c 2f       	mov	r24, r28
    197c:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	return;
}
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	1f 91       	pop	r17
    1986:	08 95       	ret

00001988 <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	c8 2f       	mov	r28, r24
    1990:	d6 2f       	mov	r29, r22
    1992:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
    1994:	0e 94 21 0c 	call	0x1842	; 0x1842 <reg_read2F>
	if(!data)
    1998:	11 11       	cpse	r17, r1
    199a:	0c c0       	rjmp	.+24     	; 0x19b4 <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
    199c:	e1 e0       	ldi	r30, 0x01	; 1
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	af 01       	movw	r20, r30
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <reg_write_bit2F+0x20>
    19a4:	44 0f       	add	r20, r20
    19a6:	55 1f       	adc	r21, r21
    19a8:	da 95       	dec	r29
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <reg_write_bit2F+0x1c>
    19ac:	40 95       	com	r20
		msg = temp & msg;
    19ae:	68 2f       	mov	r22, r24
    19b0:	64 23       	and	r22, r20
    19b2:	0a c0       	rjmp	.+20     	; 0x19c8 <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	9a 01       	movw	r18, r20
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <reg_write_bit2F+0x38>
    19bc:	22 0f       	add	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	da 95       	dec	r29
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <reg_write_bit2F+0x34>
		msg = temp | msg;
    19c4:	68 2f       	mov	r22, r24
    19c6:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
    19c8:	8c 2f       	mov	r24, r28
    19ca:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	return;
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	08 95       	ret

000019d6 <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    19d6:	0e 94 85 0b 	call	0x170a	; 0x170a <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	  
	//RESET 
    cmd_str(SRES);             //SRES                  reset chip
    19da:	80 e3       	ldi	r24, 0x30	; 48
    19dc:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
      
    //Reset RX FIFO
    cmd_str(SFRX);             //SFRX                  flush RX FIFO
    19e0:	8a e3       	ldi	r24, 0x3A	; 58
    19e2:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
      
    //Reset TX FIFO
    cmd_str(SFTX);             //SFTX                  flush TX FIFO
    19e6:	8b e3       	ldi	r24, 0x3B	; 59
    19e8:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>

	//**************SET UP RX****************//
  
	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	82 e1       	ldi	r24, 0x12	; 18
    19f0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    19f4:	6f e5       	ldi	r22, 0x5F	; 95
    19f6:	83 e1       	ldi	r24, 0x13	; 19
    19f8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    19fc:	60 e4       	ldi	r22, 0x40	; 64
    19fe:	86 e1       	ldi	r24, 0x16	; 22
    1a00:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    1a04:	6e e0       	ldi	r22, 0x0E	; 14
    1a06:	87 e1       	ldi	r24, 0x17	; 23
    1a08:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    1a0c:	63 e0       	ldi	r22, 0x03	; 3
    1a0e:	89 e1       	ldi	r24, 0x19	; 25
    1a10:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    1a14:	63 e3       	ldi	r22, 0x33	; 51
    1a16:	8b e1       	ldi	r24, 0x1B	; 27
    1a18:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    1a1c:	67 e1       	ldi	r22, 0x17	; 23
    1a1e:	8d e1       	ldi	r24, 0x1D	; 29
    1a20:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    1a24:	60 e5       	ldi	r22, 0x50	; 80
    1a26:	8f e1       	ldi	r24, 0x1F	; 31
    1a28:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
//  reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
  
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    1a2c:	64 e1       	ldi	r22, 0x14	; 20
    1a2e:	81 e2       	ldi	r24, 0x21	; 33
    1a30:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    1a34:	6c ea       	ldi	r22, 0xAC	; 172
    1a36:	82 e2       	ldi	r24, 0x22	; 34
    1a38:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	//reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
	//reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
	//reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
  
	cmd_str(SNOP);
    1a3c:	8d e3       	ldi	r24, 0x3D	; 61
    1a3e:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
	//For test purposes only, (2nd block, deleted first one) use values from SmartRF for some bits
	reg_write(0x08, 0x0B);            //*Changed on line 152
    1a42:	6b e0       	ldi	r22, 0x0B	; 11
    1a44:	88 e0       	ldi	r24, 0x08	; 8
    1a46:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x13, 0x0D);            //
    1a4a:	6d e0       	ldi	r22, 0x0D	; 13
    1a4c:	83 e1       	ldi	r24, 0x13	; 19
    1a4e:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x26, 0x04);            //*Changed on line 144
    1a52:	64 e0       	ldi	r22, 0x04	; 4
    1a54:	86 e2       	ldi	r24, 0x26	; 38
    1a56:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
  
	//High performance RX
	reg_write(0x08, 0x0B);            //
    1a5a:	6b e0       	ldi	r22, 0x0B	; 11
    1a5c:	88 e0       	ldi	r24, 0x08	; 8
    1a5e:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x0C, 0x1C);            //
    1a62:	6c e1       	ldi	r22, 0x1C	; 28
    1a64:	8c e0       	ldi	r24, 0x0C	; 12
    1a66:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x10, 0x00);            //
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	80 e1       	ldi	r24, 0x10	; 16
    1a6e:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x11, 0x04);            //
    1a72:	64 e0       	ldi	r22, 0x04	; 4
    1a74:	81 e1       	ldi	r24, 0x11	; 17
    1a76:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x13, 0x05);            //
    1a7a:	65 e0       	ldi	r22, 0x05	; 5
    1a7c:	83 e1       	ldi	r24, 0x13	; 19
    1a7e:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x1C, 0xA9);            //
    1a82:	69 ea       	ldi	r22, 0xA9	; 169
    1a84:	8c e1       	ldi	r24, 0x1C	; 28
    1a86:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x1D, 0xCF);            //
    1a8a:	6f ec       	ldi	r22, 0xCF	; 207
    1a8c:	8d e1       	ldi	r24, 0x1D	; 29
    1a8e:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x1E, 0x00);            //
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	8e e1       	ldi	r24, 0x1E	; 30
    1a96:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x20, 0x03);            //
    1a9a:	63 e0       	ldi	r22, 0x03	; 3
    1a9c:	80 e2       	ldi	r24, 0x20	; 32
    1a9e:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x2E, 0x00);            //
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	8e e2       	ldi	r24, 0x2E	; 46
    1aa6:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write2F(0x00, 0x00);          //
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>

	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    1ab2:	68 e4       	ldi	r22, 0x48	; 72
    1ab4:	8a e0       	ldi	r24, 0x0A	; 10
    1ab6:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    1aba:	65 e0       	ldi	r22, 0x05	; 5
    1abc:	8b e0       	ldi	r24, 0x0B	; 11
    1abe:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: 0x14           set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector enabled
    1ac2:	64 e0       	ldi	r22, 0x04	; 4
    1ac4:	81 e2       	ldi	r24, 0x21	; 33
    1ac6:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
  
	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
    1aca:	60 e0       	ldi	r22, 0x00	; 0
    1acc:	8d e0       	ldi	r24, 0x0D	; 13
    1ace:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	65 e0       	ldi	r22, 0x05	; 5
    1ad6:	8e e0       	ldi	r24, 0x0E	; 14
    1ad8:	0e 94 9d 0c 	call	0x193a	; 0x193a <reg_write_bit>
  
	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	67 e0       	ldi	r22, 0x07	; 7
    1ae0:	82 e0       	ldi	r24, 0x02	; 2
    1ae2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	66 e0       	ldi	r22, 0x06	; 6
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	0e 94 c4 0c 	call	0x1988	; 0x1988 <reg_write_bit2F>
  
	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    1af0:	40 e0       	ldi	r20, 0x00	; 0
    1af2:	66 e0       	ldi	r22, 0x06	; 6
    1af4:	88 e0       	ldi	r24, 0x08	; 8
    1af6:	0e 94 9d 0c 	call	0x193a	; 0x193a <reg_write_bit>
	reg_write(0x09, 0x17);            //SYNC_CFG0: 0x17        32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    1afa:	67 e1       	ldi	r22, 0x17	; 23
    1afc:	89 e0       	ldi	r24, 0x09	; 9
    1afe:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
  
	//set packets
	reg_write(0x26, 0x00);            //PKT_CFG2: 0x00         set FIFO mode
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	86 e2       	ldi	r24, 0x26	; 38
    1b06:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
	reg_write(0x2E, 0xFF);            //PKT_LEN: 0xFF          set packet length to 0xFF (max)  
    1b0a:	6f ef       	ldi	r22, 0xFF	; 255
    1b0c:	8e e2       	ldi	r24, 0x2E	; 46
    1b0e:	0e 94 08 0c 	call	0x1810	; 0x1810 <reg_write>
    
	//Frequency setting
	cmd_str(SNOP);
    1b12:	8d e3       	ldi	r24, 0x3D	; 61
    1b14:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    1b18:	6c e6       	ldi	r22, 0x6C	; 108
    1b1a:	8c e0       	ldi	r24, 0x0C	; 12
    1b1c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    1b20:	60 e8       	ldi	r22, 0x80	; 128
    1b22:	8d e0       	ldi	r24, 0x0D	; 13
    1b24:	0e 94 4b 0c 	call	0x1896	; 0x1896 <reg_write2F>

	//set up GPIO1 to 17
	//reg_write(0x00, 17);
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    1b28:	83 e3       	ldi	r24, 0x33	; 51
    1b2a:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
	delay_ms(250);
    1b2e:	8a ef       	ldi	r24, 0xFA	; 250
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>

	cmd_str(SAFC);					 // Automatic frequency control
    1b36:	87 e3       	ldi	r24, 0x37	; 55
    1b38:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
	delay_ms(250);
    1b3c:	8a ef       	ldi	r24, 0xFA	; 250
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <delay_ms>
	
	//reg_write2F(0xD2, 0x00);
	//reg_write2F(0xD4, 0xFF);
	
	send_coms = 0;
    1b44:	10 92 51 01 	sts	0x0151, r1

	cmd_str(SRX);                    // Put in RX mode
    1b48:	84 e3       	ldi	r24, 0x34	; 52
    1b4a:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
    1b4e:	08 95       	ret

00001b50 <trans_check>:
	reg_write2F(reg, msg);
	return;
}

void trans_check(void)
{
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <trans_check+0x6>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
	uint8_t msg = 0, CHIP_RDYn, state;
	
	get_status(&CHIP_RDYn, &state);
    1b5a:	be 01       	movw	r22, r28
    1b5c:	6e 5f       	subi	r22, 0xFE	; 254
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <get_status>

	if(state == 0b110 || state == 0b111)
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	86 50       	subi	r24, 0x06	; 6
    1b6c:	82 30       	cpi	r24, 0x02	; 2
    1b6e:	68 f5       	brcc	.+90     	; 0x1bca <trans_check+0x7a>
	{
		cmd_str(SIDLE);
    1b70:	86 e3       	ldi	r24, 0x36	; 54
    1b72:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
		//LED_toggle(LED3);
		//delay_ms(100);
		
		// Here we would send our message to the OBC.
		
		cmd_str(SNOP);
    1b76:	8d e3       	ldi	r24, 0x3D	; 61
    1b78:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
		trans_msg[0] = dir_FIFO_read(0x80);
    1b7c:	80 e8       	ldi	r24, 0x80	; 128
    1b7e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <dir_FIFO_read>
    1b82:	80 93 52 01 	sts	0x0152, r24
		trans_msg[1] = dir_FIFO_read(0x81);
    1b86:	81 e8       	ldi	r24, 0x81	; 129
    1b88:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <dir_FIFO_read>
    1b8c:	80 93 53 01 	sts	0x0153, r24
		trans_msg[2] = dir_FIFO_read(0x82);
    1b90:	82 e8       	ldi	r24, 0x82	; 130
    1b92:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <dir_FIFO_read>
    1b96:	80 93 54 01 	sts	0x0154, r24
		trans_msg[3] = dir_FIFO_read(0x83);
    1b9a:	83 e8       	ldi	r24, 0x83	; 131
    1b9c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <dir_FIFO_read>
    1ba0:	80 93 55 01 	sts	0x0155, r24
		trans_msg[4] = dir_FIFO_read(0x84);
    1ba4:	84 e8       	ldi	r24, 0x84	; 132
    1ba6:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <dir_FIFO_read>
    1baa:	80 93 56 01 	sts	0x0156, r24
		trans_msg[5] = dir_FIFO_read(0x85);
    1bae:	85 e8       	ldi	r24, 0x85	; 133
    1bb0:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <dir_FIFO_read>
    1bb4:	80 93 57 01 	sts	0x0157, r24
			//LED_toggle(LED6);
			//delay_ms(100);
			//LED_toggle(LED6);
			//delay_ms(100);
		//}
		send_coms = 1;		// Indicates that in main() we will send trans_msg to the OBC via CAN.
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	80 93 51 01 	sts	0x0151, r24
		
		cmd_str(SFRX);
    1bbe:	8a e3       	ldi	r24, 0x3A	; 58
    1bc0:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
		//reg_write2F(0xD2, 0x00);
		//reg_write2F(0xD4, 0xFF);
		
		//cmd_str(SFTX);
		
		cmd_str(SRX);
    1bc4:	84 e3       	ldi	r24, 0x34	; 52
    1bc6:	0e 94 40 0c 	call	0x1880	; 0x1880 <cmd_str>
	}
	return;
}
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <__tablejump2__>:
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31

00001bd8 <__tablejump__>:
    1bd8:	05 90       	lpm	r0, Z+
    1bda:	f4 91       	lpm	r31, Z
    1bdc:	e0 2d       	mov	r30, r0
    1bde:	09 94       	ijmp

00001be0 <_exit>:
    1be0:	f8 94       	cli

00001be2 <__stop_program>:
    1be2:	ff cf       	rjmp	.-2      	; 0x1be2 <__stop_program>
