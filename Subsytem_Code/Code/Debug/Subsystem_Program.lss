
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001996  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000054  00800100  00800100  00001a0a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001a0a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000230  00000000  00000000  00001a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000028d0  00000000  00000000  00001c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ccb  00000000  00000000  0000453a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ebc  00000000  00000000  00005205  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004ac  00000000  00000000  000060c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000006b6  00000000  00000000  00006570  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001b06  00000000  00000000  00006c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001e8  00000000  00000000  0000872c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	e2 02       	muls	r30, r18
      7e:	74 03       	mulsu	r23, r20
      80:	fe 03       	fmulsu	r23, r22
      82:	72 04       	cpc	r7, r2
      84:	b2 04       	cpc	r11, r2
      86:	2e 05       	cpc	r18, r14
      88:	ab 05       	cpc	r26, r11
      8a:	48 06       	cpc	r4, r24
      8c:	ee 06       	cpc	r14, r30
      8e:	dc 02       	muls	r29, r28
      90:	f7 07       	cpc	r31, r23

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a4 35       	cpi	r26, 0x54	; 84
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <main>
      b2:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      ce:	e8 e7       	ldi	r30, 0x78	; 120
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	20 81       	ld	r18, Z
      d4:	dc 01       	movw	r26, r24
      d6:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
      d8:	21 81       	ldd	r18, Z+1	; 0x01
      da:	11 96       	adiw	r26, 0x01	; 1
      dc:	2c 93       	st	X, r18
      de:	08 95       	ret

000000e0 <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
	uint8_t i = 0;
	
	message.pt_data = &data0[0]; // point message object to first element of data buffer
      e4:	8d e2       	ldi	r24, 0x2D	; 45
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	90 93 28 01 	sts	0x0128, r25
      ec:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      f0:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
      f4:	84 e1       	ldi	r24, 0x14	; 20
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	90 93 23 01 	sts	0x0123, r25
      fc:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     100:	85 e0       	ldi	r24, 0x05	; 5
     102:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
     10c:	10 92 4f 01 	sts	0x014F, r1
	
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	80 e2       	ldi	r24, 0x20	; 32
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 c4 08 	call	0x1188	; 0x1188 <can_get_status>
     11a:	81 30       	cpi	r24, 0x01	; 1
     11c:	09 f4       	brne	.+2      	; 0x120 <can_check_general+0x40>
     11e:	a7 c0       	rjmp	.+334    	; 0x26e <can_check_general+0x18e>
	{
		if(message.status == MOB_RX_COMPLETED)
     120:	80 91 29 01 	lds	r24, 0x0129
     124:	80 32       	cpi	r24, 0x20	; 32
     126:	09 f0       	breq	.+2      	; 0x12a <can_check_general+0x4a>
     128:	80 c0       	rjmp	.+256    	; 0x22a <can_check_general+0x14a>
     12a:	a0 91 27 01 	lds	r26, 0x0127
     12e:	b0 91 28 01 	lds	r27, 0x0128
     132:	ce e3       	ldi	r28, 0x3E	; 62
     134:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     136:	e6 e3       	ldi	r30, 0x36	; 54
     138:	f1 e0       	ldi	r31, 0x01	; 1
     13a:	8d 91       	ld	r24, X+
     13c:	81 93       	st	Z+, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
     13e:	ec 17       	cp	r30, r28
     140:	fd 07       	cpc	r31, r29
     142:	d9 f7       	brne	.-10     	; 0x13a <can_check_general+0x5a>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
			
			if ((receive_arr[0] == 0xFF) && (receive_arr[1] == 0xFF) && (receive_arr[2] == 0xFF) && (receive_arr[3] == 0xFF)
     144:	80 91 36 01 	lds	r24, 0x0136
     148:	8f 3f       	cpi	r24, 0xFF	; 255
     14a:	a1 f5       	brne	.+104    	; 0x1b4 <can_check_general+0xd4>
     14c:	80 91 37 01 	lds	r24, 0x0137
     150:	8f 3f       	cpi	r24, 0xFF	; 255
     152:	09 f0       	breq	.+2      	; 0x156 <can_check_general+0x76>
     154:	89 c0       	rjmp	.+274    	; 0x268 <can_check_general+0x188>
     156:	80 91 38 01 	lds	r24, 0x0138
     15a:	8f 3f       	cpi	r24, 0xFF	; 255
     15c:	09 f0       	breq	.+2      	; 0x160 <can_check_general+0x80>
     15e:	84 c0       	rjmp	.+264    	; 0x268 <can_check_general+0x188>
     160:	80 91 39 01 	lds	r24, 0x0139
     164:	8f 3f       	cpi	r24, 0xFF	; 255
     166:	09 f0       	breq	.+2      	; 0x16a <can_check_general+0x8a>
     168:	7f c0       	rjmp	.+254    	; 0x268 <can_check_general+0x188>
			&& (receive_arr[4] == 0xFF) && (receive_arr[5] == 0xFF) && (receive_arr[6] == 0xFF) && (receive_arr[7] == 0xFF))
     16a:	80 91 3a 01 	lds	r24, 0x013A
     16e:	8f 3f       	cpi	r24, 0xFF	; 255
     170:	09 f0       	breq	.+2      	; 0x174 <can_check_general+0x94>
     172:	7a c0       	rjmp	.+244    	; 0x268 <can_check_general+0x188>
     174:	80 91 3b 01 	lds	r24, 0x013B
     178:	8f 3f       	cpi	r24, 0xFF	; 255
     17a:	09 f0       	breq	.+2      	; 0x17e <can_check_general+0x9e>
     17c:	75 c0       	rjmp	.+234    	; 0x268 <can_check_general+0x188>
     17e:	80 91 3c 01 	lds	r24, 0x013C
     182:	8f 3f       	cpi	r24, 0xFF	; 255
     184:	09 f0       	breq	.+2      	; 0x188 <can_check_general+0xa8>
     186:	70 c0       	rjmp	.+224    	; 0x268 <can_check_general+0x188>
     188:	80 91 3d 01 	lds	r24, 0x013D
     18c:	8f 3f       	cpi	r24, 0xFF	; 255
     18e:	09 f0       	breq	.+2      	; 0x192 <can_check_general+0xb2>
     190:	6b c0       	rjmp	.+214    	; 0x268 <can_check_general+0x188>
			{
				LED_toggle(LED3);	//Toggle LED3 when the appropriate message is received.
     192:	83 e0       	ldi	r24, 0x03	; 3
     194:	0e 94 b8 09 	call	0x1370	; 0x1370 <LED_toggle>
				delay_ms(100);
     198:	84 e6       	ldi	r24, 0x64	; 100
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
				LED_toggle(LED3);
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	0e 94 b8 09 	call	0x1370	; 0x1370 <LED_toggle>
				delay_ms(100);
     1a6:	84 e6       	ldi	r24, 0x64	; 100
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
				send_now = 1;
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	80 93 2c 01 	sts	0x012C, r24
			}
			
			if ((receive_arr[0] == 0x55) && (receive_arr[1] == 0x55) && (receive_arr[2] == 0x55) && (receive_arr[3] == 0x55)
     1b4:	80 91 36 01 	lds	r24, 0x0136
     1b8:	85 35       	cpi	r24, 0x55	; 85
     1ba:	09 f0       	breq	.+2      	; 0x1be <can_check_general+0xde>
     1bc:	55 c0       	rjmp	.+170    	; 0x268 <can_check_general+0x188>
     1be:	80 91 37 01 	lds	r24, 0x0137
     1c2:	85 35       	cpi	r24, 0x55	; 85
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <can_check_general+0xe8>
     1c6:	50 c0       	rjmp	.+160    	; 0x268 <can_check_general+0x188>
     1c8:	80 91 38 01 	lds	r24, 0x0138
     1cc:	85 35       	cpi	r24, 0x55	; 85
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <can_check_general+0xf2>
     1d0:	4b c0       	rjmp	.+150    	; 0x268 <can_check_general+0x188>
     1d2:	80 91 39 01 	lds	r24, 0x0139
     1d6:	85 35       	cpi	r24, 0x55	; 85
     1d8:	09 f0       	breq	.+2      	; 0x1dc <can_check_general+0xfc>
     1da:	46 c0       	rjmp	.+140    	; 0x268 <can_check_general+0x188>
			&& (receive_arr[4] == 0x55) && (receive_arr[5] == 0x55) && (receive_arr[6] == 0x55) && (receive_arr[7] == 0x55))
     1dc:	80 91 3a 01 	lds	r24, 0x013A
     1e0:	85 35       	cpi	r24, 0x55	; 85
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <can_check_general+0x106>
     1e4:	41 c0       	rjmp	.+130    	; 0x268 <can_check_general+0x188>
     1e6:	80 91 3b 01 	lds	r24, 0x013B
     1ea:	85 35       	cpi	r24, 0x55	; 85
     1ec:	e9 f5       	brne	.+122    	; 0x268 <can_check_general+0x188>
     1ee:	80 91 3c 01 	lds	r24, 0x013C
     1f2:	85 35       	cpi	r24, 0x55	; 85
     1f4:	c9 f5       	brne	.+114    	; 0x268 <can_check_general+0x188>
     1f6:	80 91 3d 01 	lds	r24, 0x013D
     1fa:	85 35       	cpi	r24, 0x55	; 85
     1fc:	a9 f5       	brne	.+106    	; 0x268 <can_check_general+0x188>
			{
				LED_toggle(LED7);	//Toggle LED7 when the appropriate message is received.
     1fe:	87 e0       	ldi	r24, 0x07	; 7
     200:	0e 94 b8 09 	call	0x1370	; 0x1370 <LED_toggle>
				delay_ms(100);
     204:	84 e6       	ldi	r24, 0x64	; 100
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
				LED_toggle(LED7);
     20c:	87 e0       	ldi	r24, 0x07	; 7
     20e:	0e 94 b8 09 	call	0x1370	; 0x1370 <LED_toggle>
				delay_ms(100);
     212:	84 e6       	ldi	r24, 0x64	; 100
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
				send_data = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 46 01 	sts	0x0146, r24
     220:	23 c0       	rjmp	.+70     	; 0x268 <can_check_general+0x188>
			}
			
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     222:	11 92       	st	Z+, r1
				LED_toggle(LED7);
				delay_ms(100);
				send_data = 1;
			}
			
			for (i = 0; i < 8; i ++)
     224:	ec 17       	cp	r30, r28
     226:	fd 07       	cpc	r31, r29
     228:	e1 f7       	brne	.-8      	; 0x222 <can_check_general+0x142>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     22a:	8d e2       	ldi	r24, 0x2D	; 45
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	90 93 28 01 	sts	0x0128, r25
     232:	80 93 27 01 	sts	0x0127, r24
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     236:	10 92 2b 01 	sts	0x012B, r1
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     23a:	84 e1       	ldi	r24, 0x14	; 20
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	90 93 23 01 	sts	0x0123, r25
     242:	80 93 22 01 	sts	0x0122, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     246:	85 e0       	ldi	r24, 0x05	; 5
     248:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     24c:	88 e0       	ldi	r24, 0x08	; 8
     24e:	80 93 26 01 	sts	0x0126, r24
		mob_number = 0;
     252:	10 92 4f 01 	sts	0x014F, r1
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     256:	60 91 4f 01 	lds	r22, 0x014F
     25a:	80 e2       	ldi	r24, 0x20	; 32
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0e 94 98 02 	call	0x530	; 0x530 <can_cmd>
     262:	81 11       	cpse	r24, r1
     264:	f8 cf       	rjmp	.-16     	; 0x256 <can_check_general+0x176>
     266:	03 c0       	rjmp	.+6      	; 0x26e <can_check_general+0x18e>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     268:	e6 e3       	ldi	r30, 0x36	; 54
     26a:	f1 e0       	ldi	r31, 0x01	; 1
     26c:	da cf       	rjmp	.-76     	; 0x222 <can_check_general+0x142>
		mob_number = 0;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
	uint8_t i = 0;
	
	message.pt_data = &data5[0]; // point message object to first element of data buffer
     278:	87 e4       	ldi	r24, 0x47	; 71
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	90 93 28 01 	sts	0x0128, r25
     280:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     284:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;  // populate ID field with ID Tag
     288:	89 e1       	ldi	r24, 0x19	; 25
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	90 93 23 01 	sts	0x0123, r25
     290:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     294:	85 e0       	ldi	r24, 0x05	; 5
     296:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     29a:	98 e0       	ldi	r25, 0x08	; 8
     29c:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     2a0:	80 93 4f 01 	sts	0x014F, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
     2a4:	65 e0       	ldi	r22, 0x05	; 5
     2a6:	80 e2       	ldi	r24, 0x20	; 32
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 c4 08 	call	0x1188	; 0x1188 <can_get_status>
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <can_check_housekeep+0x40>
     2b2:	6f c0       	rjmp	.+222    	; 0x392 <can_check_housekeep+0x11e>
	{
		if(message.status == MOB_RX_COMPLETED)
     2b4:	80 91 29 01 	lds	r24, 0x0129
     2b8:	80 32       	cpi	r24, 0x20	; 32
     2ba:	09 f0       	breq	.+2      	; 0x2be <can_check_housekeep+0x4a>
     2bc:	48 c0       	rjmp	.+144    	; 0x34e <can_check_housekeep+0xda>
     2be:	a0 91 27 01 	lds	r26, 0x0127
     2c2:	b0 91 28 01 	lds	r27, 0x0128
     2c6:	ce e3       	ldi	r28, 0x3E	; 62
     2c8:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     2ca:	e6 e3       	ldi	r30, 0x36	; 54
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	8d 91       	ld	r24, X+
     2d0:	81 93       	st	Z+, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
     2d2:	ec 17       	cp	r30, r28
     2d4:	fd 07       	cpc	r31, r29
     2d6:	d9 f7       	brne	.-10     	; 0x2ce <can_check_housekeep+0x5a>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
			
			if ((receive_arr[0] == 0x0F) && (receive_arr[1] == 0x0F) && (receive_arr[2] == 0x0F) && (receive_arr[3] == 0x0F)
     2d8:	80 91 36 01 	lds	r24, 0x0136
     2dc:	8f 30       	cpi	r24, 0x0F	; 15
     2de:	09 f0       	breq	.+2      	; 0x2e2 <can_check_housekeep+0x6e>
     2e0:	55 c0       	rjmp	.+170    	; 0x38c <can_check_housekeep+0x118>
     2e2:	80 91 37 01 	lds	r24, 0x0137
     2e6:	8f 30       	cpi	r24, 0x0F	; 15
     2e8:	09 f0       	breq	.+2      	; 0x2ec <can_check_housekeep+0x78>
     2ea:	50 c0       	rjmp	.+160    	; 0x38c <can_check_housekeep+0x118>
     2ec:	80 91 38 01 	lds	r24, 0x0138
     2f0:	8f 30       	cpi	r24, 0x0F	; 15
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <can_check_housekeep+0x82>
     2f4:	4b c0       	rjmp	.+150    	; 0x38c <can_check_housekeep+0x118>
     2f6:	80 91 39 01 	lds	r24, 0x0139
     2fa:	8f 30       	cpi	r24, 0x0F	; 15
     2fc:	09 f0       	breq	.+2      	; 0x300 <can_check_housekeep+0x8c>
     2fe:	46 c0       	rjmp	.+140    	; 0x38c <can_check_housekeep+0x118>
			&& (receive_arr[4] == 0x0F) && (receive_arr[5] == 0x0F) && (receive_arr[6] == 0x0F) && (receive_arr[7] == 0x0F))
     300:	80 91 3a 01 	lds	r24, 0x013A
     304:	8f 30       	cpi	r24, 0x0F	; 15
     306:	09 f0       	breq	.+2      	; 0x30a <can_check_housekeep+0x96>
     308:	41 c0       	rjmp	.+130    	; 0x38c <can_check_housekeep+0x118>
     30a:	80 91 3b 01 	lds	r24, 0x013B
     30e:	8f 30       	cpi	r24, 0x0F	; 15
     310:	e9 f5       	brne	.+122    	; 0x38c <can_check_housekeep+0x118>
     312:	80 91 3c 01 	lds	r24, 0x013C
     316:	8f 30       	cpi	r24, 0x0F	; 15
     318:	c9 f5       	brne	.+114    	; 0x38c <can_check_housekeep+0x118>
     31a:	80 91 3d 01 	lds	r24, 0x013D
     31e:	8f 30       	cpi	r24, 0x0F	; 15
     320:	a9 f5       	brne	.+106    	; 0x38c <can_check_housekeep+0x118>
			{
				LED_toggle(LED6);	//Toggle LED5 when housekeeping was requested.
     322:	86 e0       	ldi	r24, 0x06	; 6
     324:	0e 94 b8 09 	call	0x1370	; 0x1370 <LED_toggle>
				delay_ms(100);
     328:	84 e6       	ldi	r24, 0x64	; 100
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
				LED_toggle(LED6);
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	0e 94 b8 09 	call	0x1370	; 0x1370 <LED_toggle>
				delay_ms(100);
     336:	84 e6       	ldi	r24, 0x64	; 100
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
				send_hk = 1;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 35 01 	sts	0x0135, r24
     344:	23 c0       	rjmp	.+70     	; 0x38c <can_check_housekeep+0x118>
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     346:	11 92       	st	Z+, r1
				delay_ms(100);
				LED_toggle(LED6);
				delay_ms(100);
				send_hk = 1;
			}
			for (i = 0; i < 8; i ++)
     348:	ec 17       	cp	r30, r28
     34a:	fd 07       	cpc	r31, r29
     34c:	e1 f7       	brne	.-8      	; 0x346 <can_check_housekeep+0xd2>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data5[0]; // point message object to first element of data buffer
     34e:	87 e4       	ldi	r24, 0x47	; 71
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	90 93 28 01 	sts	0x0128, r25
     356:	80 93 27 01 	sts	0x0127, r24
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     35a:	10 92 2b 01 	sts	0x012B, r1
		message.id.std = SUB0_ID5;  // populate ID field with ID Tag
     35e:	89 e1       	ldi	r24, 0x19	; 25
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	90 93 23 01 	sts	0x0123, r25
     366:	80 93 22 01 	sts	0x0122, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     36a:	85 e0       	ldi	r24, 0x05	; 5
     36c:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     370:	98 e0       	ldi	r25, 0x08	; 8
     372:	90 93 26 01 	sts	0x0126, r25
		mob_number = 5;
     376:	80 93 4f 01 	sts	0x014F, r24
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     37a:	60 91 4f 01 	lds	r22, 0x014F
     37e:	80 e2       	ldi	r24, 0x20	; 32
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	0e 94 98 02 	call	0x530	; 0x530 <can_cmd>
     386:	81 11       	cpse	r24, r1
     388:	f8 cf       	rjmp	.-16     	; 0x37a <can_check_housekeep+0x106>
     38a:	03 c0       	rjmp	.+6      	; 0x392 <can_check_housekeep+0x11e>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     38c:	e6 e3       	ldi	r30, 0x36	; 54
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	da cf       	rjmp	.-76     	; 0x346 <can_check_housekeep+0xd2>
		mob_number = 5;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     398:	28 e1       	ldi	r18, 0x18	; 24
     39a:	31 e0       	ldi	r19, 0x01	; 1
     39c:	30 93 28 01 	sts	0x0128, r19
     3a0:	20 93 27 01 	sts	0x0127, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3a4:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = id;  // populate ID field with ID Tag
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	70 93 23 01 	sts	0x0123, r23
     3ae:	60 93 22 01 	sts	0x0122, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     3b2:	22 e0       	ldi	r18, 0x02	; 2
     3b4:	20 93 21 01 	sts	0x0121, r18
	message.dlc = 8;			 // Max length of a CAN message.
     3b8:	28 e0       	ldi	r18, 0x08	; 8
     3ba:	20 93 26 01 	sts	0x0126, r18
	mob_number = 4;
     3be:	24 e0       	ldi	r18, 0x04	; 4
     3c0:	20 93 4f 01 	sts	0x014F, r18
     3c4:	dc 01       	movw	r26, r24
     3c6:	e8 e1       	ldi	r30, 0x18	; 24
     3c8:	f1 e0       	ldi	r31, 0x01	; 1
     3ca:	80 e2       	ldi	r24, 0x20	; 32
     3cc:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     3ce:	2d 91       	ld	r18, X+
     3d0:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     3d2:	e8 17       	cp	r30, r24
     3d4:	f9 07       	cpc	r31, r25
     3d6:	d9 f7       	brne	.-10     	; 0x3ce <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     3d8:	60 91 4f 01 	lds	r22, 0x014F
     3dc:	80 e2       	ldi	r24, 0x20	; 32
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 98 02 	call	0x530	; 0x530 <can_cmd>
     3e4:	81 11       	cpse	r24, r1
     3e6:	f8 cf       	rjmp	.-16     	; 0x3d8 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     3e8:	60 91 4f 01 	lds	r22, 0x014F
     3ec:	80 e2       	ldi	r24, 0x20	; 32
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 c4 08 	call	0x1188	; 0x1188 <can_get_status>
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	c1 f3       	breq	.-16     	; 0x3e8 <can_send_message+0x50>

	return;
}
     3f8:	08 95       	ret

000003fa <can_init_mobs>:
void can_init_mobs(void)
{
	/* INITIALIZE MOB0 */
	uint8_t i;

	message.pt_data = &data0[0]; // point message object to first element of data buffer
     3fa:	8d e2       	ldi	r24, 0x2D	; 45
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	90 93 28 01 	sts	0x0128, r25
     402:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     406:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     40a:	84 e1       	ldi	r24, 0x14	; 20
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	90 93 23 01 	sts	0x0123, r25
     412:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     41c:	88 e0       	ldi	r24, 0x08	; 8
     41e:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
     422:	10 92 4f 01 	sts	0x014F, r1
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     426:	60 91 4f 01 	lds	r22, 0x014F
     42a:	80 e2       	ldi	r24, 0x20	; 32
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 98 02 	call	0x530	; 0x530 <can_cmd>
     432:	81 11       	cpse	r24, r1
     434:	f8 cf       	rjmp	.-16     	; 0x426 <can_init_mobs+0x2c>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     436:	87 e4       	ldi	r24, 0x47	; 71
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	90 93 28 01 	sts	0x0128, r25
     43e:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     442:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
     446:	89 e1       	ldi	r24, 0x19	; 25
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	90 93 23 01 	sts	0x0123, r25
     44e:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     452:	85 e0       	ldi	r24, 0x05	; 5
     454:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;				// Max length of a CAN message.
     458:	98 e0       	ldi	r25, 0x08	; 8
     45a:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     45e:	80 93 4f 01 	sts	0x014F, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     462:	60 91 4f 01 	lds	r22, 0x014F
     466:	80 e2       	ldi	r24, 0x20	; 32
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 98 02 	call	0x530	; 0x530 <can_cmd>
     46e:	81 11       	cpse	r24, r1
     470:	f8 cf       	rjmp	.-16     	; 0x462 <can_init_mobs+0x68>
     472:	e6 e3       	ldi	r30, 0x36	; 54
     474:	f1 e0       	ldi	r31, 0x01	; 1
     476:	8e e3       	ldi	r24, 0x3E	; 62
     478:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     47a:	11 92       	st	Z+, r1
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     47c:	e8 17       	cp	r30, r24
     47e:	f9 07       	cpc	r31, r25
     480:	e1 f7       	brne	.-8      	; 0x47a <can_init_mobs+0x80>
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
	}
	
	send_now = 0;
     482:	10 92 2c 01 	sts	0x012C, r1
	send_hk = 0;
     486:	10 92 35 01 	sts	0x0135, r1
	send_data = 0;
     48a:	10 92 46 01 	sts	0x0146, r1
     48e:	08 95       	ret

00000490 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     490:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     492:	ad ee       	ldi	r26, 0xED	; 237
     494:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     496:	3e ee       	ldi	r19, 0xEE	; 238
     498:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     49a:	98 2f       	mov	r25, r24
     49c:	92 95       	swap	r25
     49e:	90 7f       	andi	r25, 0xF0	; 240
     4a0:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     4a2:	e3 2f       	mov	r30, r19
     4a4:	f2 2f       	mov	r31, r18
     4a6:	11 92       	st	Z+, r1
     4a8:	e8 3f       	cpi	r30, 0xF8	; 248
     4aa:	f1 05       	cpc	r31, r1
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     4ae:	8f 5f       	subi	r24, 0xFF	; 255
     4b0:	86 30       	cpi	r24, 0x06	; 6
     4b2:	99 f7       	brne	.-26     	; 0x49a <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     4b4:	08 95       	ret

000004b6 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     4b6:	80 91 ef 00 	lds	r24, 0x00EF
     4ba:	80 7c       	andi	r24, 0xC0	; 192
     4bc:	61 f0       	breq	.+24     	; 0x4d6 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     4be:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     4c2:	98 2f       	mov	r25, r24
     4c4:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     4c6:	28 2f       	mov	r18, r24
     4c8:	20 76       	andi	r18, 0x60	; 96
     4ca:	20 32       	cpi	r18, 0x20	; 32
     4cc:	31 f0       	breq	.+12     	; 0x4da <can_get_mob_status+0x24>
     4ce:	90 34       	cpi	r25, 0x40	; 64
     4d0:	31 f0       	breq	.+12     	; 0x4de <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     4d2:	8f 71       	andi	r24, 0x1F	; 31
     4d4:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     4da:	89 2f       	mov	r24, r25
     4dc:	08 95       	ret
     4de:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     4e0:	08 95       	ret

000004e2 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     4e2:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     4e4:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     4e6:	aa ef       	ldi	r26, 0xFA	; 250
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	9c 91       	ld	r25, X
     4ec:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	88 30       	cpi	r24, 0x08	; 8
     4f2:	d9 f7       	brne	.-10     	; 0x4ea <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     4f4:	08 95       	ret

000004f6 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	80 93 e2 00 	sts	0x00E2, r24
     502:	8c e0       	ldi	r24, 0x0C	; 12
     504:	80 93 e3 00 	sts	0x00E3, r24
     508:	87 e3       	ldi	r24, 0x37	; 55
     50a:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	08 95       	ret

00000512 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     512:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <can_fixed_baudrate>
     516:	88 23       	and	r24, r24
     518:	49 f0       	breq	.+18     	; 0x52c <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     51a:	0e 94 48 02 	call	0x490	; 0x490 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     51e:	e8 ed       	ldi	r30, 0xD8	; 216
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	82 60       	ori	r24, 0x02	; 2
     526:	80 83       	st	Z, r24
    return (1);
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     52c:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     52e:	08 95       	ret

00000530 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	1f 92       	push	r1
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     53c:	11 96       	adiw	r26, 0x01	; 1
     53e:	8c 91       	ld	r24, X
     540:	11 97       	sbiw	r26, 0x01	; 1
     542:	8c 30       	cpi	r24, 0x0C	; 12
     544:	b1 f4       	brne	.+44     	; 0x572 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     546:	19 96       	adiw	r26, 0x09	; 9
     548:	8c 91       	ld	r24, X
     54a:	19 97       	sbiw	r26, 0x09	; 9
     54c:	80 36       	cpi	r24, 0x60	; 96
     54e:	69 f4       	brne	.+26     	; 0x56a <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     550:	86 2f       	mov	r24, r22
     552:	82 95       	swap	r24
     554:	80 7f       	andi	r24, 0xF0	; 240
     556:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     55a:	ef ee       	ldi	r30, 0xEF	; 239
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	80 81       	ld	r24, Z
     560:	8f 73       	andi	r24, 0x3F	; 63
     562:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     564:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     568:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     56a:	19 96       	adiw	r26, 0x09	; 9
     56c:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	07 c6       	rjmp	.+3086   	; 0x1180 <__stack+0x881>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     572:	86 2f       	mov	r24, r22
     574:	82 95       	swap	r24
     576:	80 7f       	andi	r24, 0xF0	; 240
     578:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     57c:	80 91 ef 00 	lds	r24, 0x00EF
     580:	80 7c       	andi	r24, 0xC0	; 192
     582:	09 f0       	breq	.+2      	; 0x586 <can_cmd+0x56>
     584:	f9 c5       	rjmp	.+3058   	; 0x1178 <__stack+0x879>
    {
      cmd->status = MOB_PENDING; 
     586:	80 e6       	ldi	r24, 0x60	; 96
     588:	19 96       	adiw	r26, 0x09	; 9
     58a:	8c 93       	st	X, r24
     58c:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     58e:	6c 93       	st	X, r22
      Can_clear_mob();
     590:	ee ee       	ldi	r30, 0xEE	; 238
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	11 92       	st	Z+, r1
     596:	e8 3f       	cpi	r30, 0xF8	; 248
     598:	f1 05       	cpc	r31, r1
     59a:	e1 f7       	brne	.-8      	; 0x594 <can_cmd+0x64>
          
      switch (cmd->cmd)
     59c:	11 96       	adiw	r26, 0x01	; 1
     59e:	4c 91       	ld	r20, X
     5a0:	11 97       	sbiw	r26, 0x01	; 1
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	fa 01       	movw	r30, r20
     5a6:	31 97       	sbiw	r30, 0x01	; 1
     5a8:	eb 30       	cpi	r30, 0x0B	; 11
     5aa:	f1 05       	cpc	r31, r1
     5ac:	08 f0       	brcs	.+2      	; 0x5b0 <can_cmd+0x80>
     5ae:	e0 c5       	rjmp	.+3008   	; 0x1170 <__stack+0x871>
     5b0:	e2 5c       	subi	r30, 0xC2	; 194
     5b2:	ff 4f       	sbci	r31, 0xFF	; 255
     5b4:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     5b8:	16 96       	adiw	r26, 0x06	; 6
     5ba:	8c 91       	ld	r24, X
     5bc:	16 97       	sbiw	r26, 0x06	; 6
     5be:	81 11       	cpse	r24, r1
     5c0:	b7 c4       	rjmp	.+2414   	; 0xf30 <__stack+0x631>
     5c2:	c8 c4       	rjmp	.+2448   	; 0xf54 <__stack+0x655>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     5c4:	1b 96       	adiw	r26, 0x0b	; 11
     5c6:	8c 91       	ld	r24, X
     5c8:	1b 97       	sbiw	r26, 0x0b	; 11
     5ca:	88 23       	and	r24, r24
     5cc:	d9 f1       	breq	.+118    	; 0x644 <can_cmd+0x114>
     5ce:	14 96       	adiw	r26, 0x04	; 4
     5d0:	9c 91       	ld	r25, X
     5d2:	14 97       	sbiw	r26, 0x04	; 4
     5d4:	92 95       	swap	r25
     5d6:	96 95       	lsr	r25
     5d8:	97 70       	andi	r25, 0x07	; 7
     5da:	15 96       	adiw	r26, 0x05	; 5
     5dc:	8c 91       	ld	r24, X
     5de:	15 97       	sbiw	r26, 0x05	; 5
     5e0:	88 0f       	add	r24, r24
     5e2:	88 0f       	add	r24, r24
     5e4:	88 0f       	add	r24, r24
     5e6:	89 0f       	add	r24, r25
     5e8:	80 93 f3 00 	sts	0x00F3, r24
     5ec:	13 96       	adiw	r26, 0x03	; 3
     5ee:	9c 91       	ld	r25, X
     5f0:	13 97       	sbiw	r26, 0x03	; 3
     5f2:	92 95       	swap	r25
     5f4:	96 95       	lsr	r25
     5f6:	97 70       	andi	r25, 0x07	; 7
     5f8:	14 96       	adiw	r26, 0x04	; 4
     5fa:	8c 91       	ld	r24, X
     5fc:	14 97       	sbiw	r26, 0x04	; 4
     5fe:	88 0f       	add	r24, r24
     600:	88 0f       	add	r24, r24
     602:	88 0f       	add	r24, r24
     604:	89 0f       	add	r24, r25
     606:	80 93 f2 00 	sts	0x00F2, r24
     60a:	12 96       	adiw	r26, 0x02	; 2
     60c:	9c 91       	ld	r25, X
     60e:	12 97       	sbiw	r26, 0x02	; 2
     610:	92 95       	swap	r25
     612:	96 95       	lsr	r25
     614:	97 70       	andi	r25, 0x07	; 7
     616:	13 96       	adiw	r26, 0x03	; 3
     618:	8c 91       	ld	r24, X
     61a:	13 97       	sbiw	r26, 0x03	; 3
     61c:	88 0f       	add	r24, r24
     61e:	88 0f       	add	r24, r24
     620:	88 0f       	add	r24, r24
     622:	89 0f       	add	r24, r25
     624:	80 93 f1 00 	sts	0x00F1, r24
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	8c 91       	ld	r24, X
     62c:	12 97       	sbiw	r26, 0x02	; 2
     62e:	88 0f       	add	r24, r24
     630:	88 0f       	add	r24, r24
     632:	88 0f       	add	r24, r24
     634:	80 93 f0 00 	sts	0x00F0, r24
     638:	ef ee       	ldi	r30, 0xEF	; 239
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	80 61       	ori	r24, 0x10	; 16
     640:	80 83       	st	Z, r24
     642:	1c c0       	rjmp	.+56     	; 0x67c <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     644:	12 96       	adiw	r26, 0x02	; 2
     646:	8c 91       	ld	r24, X
     648:	12 97       	sbiw	r26, 0x02	; 2
     64a:	86 95       	lsr	r24
     64c:	86 95       	lsr	r24
     64e:	86 95       	lsr	r24
     650:	13 96       	adiw	r26, 0x03	; 3
     652:	9c 91       	ld	r25, X
     654:	13 97       	sbiw	r26, 0x03	; 3
     656:	20 e2       	ldi	r18, 0x20	; 32
     658:	92 9f       	mul	r25, r18
     65a:	80 0d       	add	r24, r0
     65c:	11 24       	eor	r1, r1
     65e:	80 93 f3 00 	sts	0x00F3, r24
     662:	12 96       	adiw	r26, 0x02	; 2
     664:	8c 91       	ld	r24, X
     666:	12 97       	sbiw	r26, 0x02	; 2
     668:	82 95       	swap	r24
     66a:	88 0f       	add	r24, r24
     66c:	80 7e       	andi	r24, 0xE0	; 224
     66e:	80 93 f2 00 	sts	0x00F2, r24
     672:	ef ee       	ldi	r30, 0xEF	; 239
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	8f 7e       	andi	r24, 0xEF	; 239
     67a:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     67c:	16 96       	adiw	r26, 0x06	; 6
     67e:	8c 91       	ld	r24, X
     680:	16 97       	sbiw	r26, 0x06	; 6
     682:	88 23       	and	r24, r24
     684:	91 f0       	breq	.+36     	; 0x6aa <can_cmd+0x17a>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	8a ef       	ldi	r24, 0xFA	; 250
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	17 96       	adiw	r26, 0x07	; 7
     68e:	ed 91       	ld	r30, X+
     690:	fc 91       	ld	r31, X
     692:	18 97       	sbiw	r26, 0x08	; 8
     694:	e2 0f       	add	r30, r18
     696:	f1 1d       	adc	r31, r1
     698:	30 81       	ld	r19, Z
     69a:	fc 01       	movw	r30, r24
     69c:	30 83       	st	Z, r19
     69e:	2f 5f       	subi	r18, 0xFF	; 255
     6a0:	16 96       	adiw	r26, 0x06	; 6
     6a2:	3c 91       	ld	r19, X
     6a4:	16 97       	sbiw	r26, 0x06	; 6
     6a6:	23 17       	cp	r18, r19
     6a8:	88 f3       	brcs	.-30     	; 0x68c <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     6aa:	1a 96       	adiw	r26, 0x0a	; 10
     6ac:	8c 91       	ld	r24, X
     6ae:	1a 97       	sbiw	r26, 0x0a	; 10
     6b0:	88 23       	and	r24, r24
     6b2:	31 f0       	breq	.+12     	; 0x6c0 <can_cmd+0x190>
     6b4:	e0 ef       	ldi	r30, 0xF0	; 240
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	84 60       	ori	r24, 0x04	; 4
     6bc:	80 83       	st	Z, r24
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <can_cmd+0x19a>
            else Can_clear_rtr();    
     6c0:	e0 ef       	ldi	r30, 0xF0	; 240
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	8b 7f       	andi	r24, 0xFB	; 251
     6c8:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     6ca:	ef ee       	ldi	r30, 0xEF	; 239
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	90 81       	ld	r25, Z
     6d0:	16 96       	adiw	r26, 0x06	; 6
     6d2:	8c 91       	ld	r24, X
     6d4:	89 2b       	or	r24, r25
     6d6:	80 83       	st	Z, r24
          Can_config_tx();
     6d8:	80 81       	ld	r24, Z
     6da:	8f 73       	andi	r24, 0x3F	; 63
     6dc:	80 83       	st	Z, r24
     6de:	80 81       	ld	r24, Z
     6e0:	80 64       	ori	r24, 0x40	; 64
     6e2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     6e6:	4c c5       	rjmp	.+2712   	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     6e8:	1b 96       	adiw	r26, 0x0b	; 11
     6ea:	8c 91       	ld	r24, X
     6ec:	1b 97       	sbiw	r26, 0x0b	; 11
     6ee:	88 23       	and	r24, r24
     6f0:	d9 f1       	breq	.+118    	; 0x768 <can_cmd+0x238>
     6f2:	14 96       	adiw	r26, 0x04	; 4
     6f4:	9c 91       	ld	r25, X
     6f6:	14 97       	sbiw	r26, 0x04	; 4
     6f8:	92 95       	swap	r25
     6fa:	96 95       	lsr	r25
     6fc:	97 70       	andi	r25, 0x07	; 7
     6fe:	15 96       	adiw	r26, 0x05	; 5
     700:	8c 91       	ld	r24, X
     702:	15 97       	sbiw	r26, 0x05	; 5
     704:	88 0f       	add	r24, r24
     706:	88 0f       	add	r24, r24
     708:	88 0f       	add	r24, r24
     70a:	89 0f       	add	r24, r25
     70c:	80 93 f3 00 	sts	0x00F3, r24
     710:	13 96       	adiw	r26, 0x03	; 3
     712:	9c 91       	ld	r25, X
     714:	13 97       	sbiw	r26, 0x03	; 3
     716:	92 95       	swap	r25
     718:	96 95       	lsr	r25
     71a:	97 70       	andi	r25, 0x07	; 7
     71c:	14 96       	adiw	r26, 0x04	; 4
     71e:	8c 91       	ld	r24, X
     720:	14 97       	sbiw	r26, 0x04	; 4
     722:	88 0f       	add	r24, r24
     724:	88 0f       	add	r24, r24
     726:	88 0f       	add	r24, r24
     728:	89 0f       	add	r24, r25
     72a:	80 93 f2 00 	sts	0x00F2, r24
     72e:	12 96       	adiw	r26, 0x02	; 2
     730:	9c 91       	ld	r25, X
     732:	12 97       	sbiw	r26, 0x02	; 2
     734:	92 95       	swap	r25
     736:	96 95       	lsr	r25
     738:	97 70       	andi	r25, 0x07	; 7
     73a:	13 96       	adiw	r26, 0x03	; 3
     73c:	8c 91       	ld	r24, X
     73e:	13 97       	sbiw	r26, 0x03	; 3
     740:	88 0f       	add	r24, r24
     742:	88 0f       	add	r24, r24
     744:	88 0f       	add	r24, r24
     746:	89 0f       	add	r24, r25
     748:	80 93 f1 00 	sts	0x00F1, r24
     74c:	12 96       	adiw	r26, 0x02	; 2
     74e:	8c 91       	ld	r24, X
     750:	12 97       	sbiw	r26, 0x02	; 2
     752:	88 0f       	add	r24, r24
     754:	88 0f       	add	r24, r24
     756:	88 0f       	add	r24, r24
     758:	80 93 f0 00 	sts	0x00F0, r24
     75c:	ef ee       	ldi	r30, 0xEF	; 239
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	80 61       	ori	r24, 0x10	; 16
     764:	80 83       	st	Z, r24
     766:	1c c0       	rjmp	.+56     	; 0x7a0 <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     768:	12 96       	adiw	r26, 0x02	; 2
     76a:	8c 91       	ld	r24, X
     76c:	12 97       	sbiw	r26, 0x02	; 2
     76e:	86 95       	lsr	r24
     770:	86 95       	lsr	r24
     772:	86 95       	lsr	r24
     774:	13 96       	adiw	r26, 0x03	; 3
     776:	9c 91       	ld	r25, X
     778:	13 97       	sbiw	r26, 0x03	; 3
     77a:	f0 e2       	ldi	r31, 0x20	; 32
     77c:	9f 9f       	mul	r25, r31
     77e:	80 0d       	add	r24, r0
     780:	11 24       	eor	r1, r1
     782:	80 93 f3 00 	sts	0x00F3, r24
     786:	12 96       	adiw	r26, 0x02	; 2
     788:	8c 91       	ld	r24, X
     78a:	12 97       	sbiw	r26, 0x02	; 2
     78c:	82 95       	swap	r24
     78e:	88 0f       	add	r24, r24
     790:	80 7e       	andi	r24, 0xE0	; 224
     792:	80 93 f2 00 	sts	0x00F2, r24
     796:	ef ee       	ldi	r30, 0xEF	; 239
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	8f 7e       	andi	r24, 0xEF	; 239
     79e:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     7a0:	16 96       	adiw	r26, 0x06	; 6
     7a2:	8c 91       	ld	r24, X
     7a4:	16 97       	sbiw	r26, 0x06	; 6
     7a6:	88 23       	and	r24, r24
     7a8:	91 f0       	breq	.+36     	; 0x7ce <can_cmd+0x29e>
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	8a ef       	ldi	r24, 0xFA	; 250
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	17 96       	adiw	r26, 0x07	; 7
     7b2:	ed 91       	ld	r30, X+
     7b4:	fc 91       	ld	r31, X
     7b6:	18 97       	sbiw	r26, 0x08	; 8
     7b8:	e2 0f       	add	r30, r18
     7ba:	f1 1d       	adc	r31, r1
     7bc:	30 81       	ld	r19, Z
     7be:	fc 01       	movw	r30, r24
     7c0:	30 83       	st	Z, r19
     7c2:	2f 5f       	subi	r18, 0xFF	; 255
     7c4:	16 96       	adiw	r26, 0x06	; 6
     7c6:	3c 91       	ld	r19, X
     7c8:	16 97       	sbiw	r26, 0x06	; 6
     7ca:	23 17       	cp	r18, r19
     7cc:	88 f3       	brcs	.-30     	; 0x7b0 <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     7ce:	1a 96       	adiw	r26, 0x0a	; 10
     7d0:	1c 92       	st	X, r1
     7d2:	1a 97       	sbiw	r26, 0x0a	; 10
     7d4:	e0 ef       	ldi	r30, 0xF0	; 240
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	8b 7f       	andi	r24, 0xFB	; 251
     7dc:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     7de:	ef ee       	ldi	r30, 0xEF	; 239
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	90 81       	ld	r25, Z
     7e4:	16 96       	adiw	r26, 0x06	; 6
     7e6:	8c 91       	ld	r24, X
     7e8:	89 2b       	or	r24, r25
     7ea:	80 83       	st	Z, r24
          Can_config_tx();
     7ec:	80 81       	ld	r24, Z
     7ee:	8f 73       	andi	r24, 0x3F	; 63
     7f0:	80 83       	st	Z, r24
     7f2:	80 81       	ld	r24, Z
     7f4:	80 64       	ori	r24, 0x40	; 64
     7f6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7f8:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     7fa:	c2 c4       	rjmp	.+2436   	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7fc:	1b 96       	adiw	r26, 0x0b	; 11
     7fe:	8c 91       	ld	r24, X
     800:	1b 97       	sbiw	r26, 0x0b	; 11
     802:	88 23       	and	r24, r24
     804:	d9 f1       	breq	.+118    	; 0x87c <can_cmd+0x34c>
     806:	14 96       	adiw	r26, 0x04	; 4
     808:	9c 91       	ld	r25, X
     80a:	14 97       	sbiw	r26, 0x04	; 4
     80c:	92 95       	swap	r25
     80e:	96 95       	lsr	r25
     810:	97 70       	andi	r25, 0x07	; 7
     812:	15 96       	adiw	r26, 0x05	; 5
     814:	8c 91       	ld	r24, X
     816:	15 97       	sbiw	r26, 0x05	; 5
     818:	88 0f       	add	r24, r24
     81a:	88 0f       	add	r24, r24
     81c:	88 0f       	add	r24, r24
     81e:	89 0f       	add	r24, r25
     820:	80 93 f3 00 	sts	0x00F3, r24
     824:	13 96       	adiw	r26, 0x03	; 3
     826:	9c 91       	ld	r25, X
     828:	13 97       	sbiw	r26, 0x03	; 3
     82a:	92 95       	swap	r25
     82c:	96 95       	lsr	r25
     82e:	97 70       	andi	r25, 0x07	; 7
     830:	14 96       	adiw	r26, 0x04	; 4
     832:	8c 91       	ld	r24, X
     834:	14 97       	sbiw	r26, 0x04	; 4
     836:	88 0f       	add	r24, r24
     838:	88 0f       	add	r24, r24
     83a:	88 0f       	add	r24, r24
     83c:	89 0f       	add	r24, r25
     83e:	80 93 f2 00 	sts	0x00F2, r24
     842:	12 96       	adiw	r26, 0x02	; 2
     844:	9c 91       	ld	r25, X
     846:	12 97       	sbiw	r26, 0x02	; 2
     848:	92 95       	swap	r25
     84a:	96 95       	lsr	r25
     84c:	97 70       	andi	r25, 0x07	; 7
     84e:	13 96       	adiw	r26, 0x03	; 3
     850:	8c 91       	ld	r24, X
     852:	13 97       	sbiw	r26, 0x03	; 3
     854:	88 0f       	add	r24, r24
     856:	88 0f       	add	r24, r24
     858:	88 0f       	add	r24, r24
     85a:	89 0f       	add	r24, r25
     85c:	80 93 f1 00 	sts	0x00F1, r24
     860:	12 96       	adiw	r26, 0x02	; 2
     862:	8c 91       	ld	r24, X
     864:	12 97       	sbiw	r26, 0x02	; 2
     866:	88 0f       	add	r24, r24
     868:	88 0f       	add	r24, r24
     86a:	88 0f       	add	r24, r24
     86c:	80 93 f0 00 	sts	0x00F0, r24
     870:	ef ee       	ldi	r30, 0xEF	; 239
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	80 61       	ori	r24, 0x10	; 16
     878:	80 83       	st	Z, r24
     87a:	1c c0       	rjmp	.+56     	; 0x8b4 <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     87c:	12 96       	adiw	r26, 0x02	; 2
     87e:	8c 91       	ld	r24, X
     880:	12 97       	sbiw	r26, 0x02	; 2
     882:	86 95       	lsr	r24
     884:	86 95       	lsr	r24
     886:	86 95       	lsr	r24
     888:	13 96       	adiw	r26, 0x03	; 3
     88a:	9c 91       	ld	r25, X
     88c:	13 97       	sbiw	r26, 0x03	; 3
     88e:	f0 e2       	ldi	r31, 0x20	; 32
     890:	9f 9f       	mul	r25, r31
     892:	80 0d       	add	r24, r0
     894:	11 24       	eor	r1, r1
     896:	80 93 f3 00 	sts	0x00F3, r24
     89a:	12 96       	adiw	r26, 0x02	; 2
     89c:	8c 91       	ld	r24, X
     89e:	12 97       	sbiw	r26, 0x02	; 2
     8a0:	82 95       	swap	r24
     8a2:	88 0f       	add	r24, r24
     8a4:	80 7e       	andi	r24, 0xE0	; 224
     8a6:	80 93 f2 00 	sts	0x00F2, r24
     8aa:	ef ee       	ldi	r30, 0xEF	; 239
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	8f 7e       	andi	r24, 0xEF	; 239
     8b2:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	1a 96       	adiw	r26, 0x0a	; 10
     8b8:	8c 93       	st	X, r24
     8ba:	1a 97       	sbiw	r26, 0x0a	; 10
     8bc:	e0 ef       	ldi	r30, 0xF0	; 240
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	84 60       	ori	r24, 0x04	; 4
     8c4:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     8c6:	ef ee       	ldi	r30, 0xEF	; 239
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	90 81       	ld	r25, Z
     8cc:	16 96       	adiw	r26, 0x06	; 6
     8ce:	8c 91       	ld	r24, X
     8d0:	89 2b       	or	r24, r25
     8d2:	80 83       	st	Z, r24
          Can_config_tx();
     8d4:	80 81       	ld	r24, Z
     8d6:	8f 73       	andi	r24, 0x3F	; 63
     8d8:	80 83       	st	Z, r24
     8da:	80 81       	ld	r24, Z
     8dc:	80 64       	ori	r24, 0x40	; 64
     8de:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8e0:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     8e2:	4e c4       	rjmp	.+2204   	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     8e4:	19 82       	std	Y+1, r1	; 0x01
     8e6:	9b 81       	ldd	r25, Y+3	; 0x03
     8e8:	92 95       	swap	r25
     8ea:	96 95       	lsr	r25
     8ec:	97 70       	andi	r25, 0x07	; 7
     8ee:	8c 81       	ldd	r24, Y+4	; 0x04
     8f0:	88 0f       	add	r24, r24
     8f2:	88 0f       	add	r24, r24
     8f4:	88 0f       	add	r24, r24
     8f6:	89 0f       	add	r24, r25
     8f8:	80 93 f7 00 	sts	0x00F7, r24
     8fc:	9a 81       	ldd	r25, Y+2	; 0x02
     8fe:	92 95       	swap	r25
     900:	96 95       	lsr	r25
     902:	97 70       	andi	r25, 0x07	; 7
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	88 0f       	add	r24, r24
     908:	88 0f       	add	r24, r24
     90a:	88 0f       	add	r24, r24
     90c:	89 0f       	add	r24, r25
     90e:	80 93 f6 00 	sts	0x00F6, r24
     912:	99 81       	ldd	r25, Y+1	; 0x01
     914:	92 95       	swap	r25
     916:	96 95       	lsr	r25
     918:	97 70       	andi	r25, 0x07	; 7
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	88 0f       	add	r24, r24
     91e:	88 0f       	add	r24, r24
     920:	88 0f       	add	r24, r24
     922:	89 0f       	add	r24, r25
     924:	80 93 f5 00 	sts	0x00F5, r24
     928:	29 81       	ldd	r18, Y+1	; 0x01
     92a:	22 0f       	add	r18, r18
     92c:	22 0f       	add	r18, r18
     92e:	22 0f       	add	r18, r18
     930:	84 ef       	ldi	r24, 0xF4	; 244
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     938:	ef ee       	ldi	r30, 0xEF	; 239
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	30 81       	ld	r19, Z
     93e:	16 96       	adiw	r26, 0x06	; 6
     940:	2c 91       	ld	r18, X
     942:	23 2b       	or	r18, r19
     944:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     946:	dc 01       	movw	r26, r24
     948:	2c 91       	ld	r18, X
     94a:	2b 7f       	andi	r18, 0xFB	; 251
     94c:	2c 93       	st	X, r18
          Can_clear_idemsk();
     94e:	2c 91       	ld	r18, X
     950:	2e 7f       	andi	r18, 0xFE	; 254
     952:	2c 93       	st	X, r18
          Can_config_rx();       
     954:	80 81       	ld	r24, Z
     956:	8f 73       	andi	r24, 0x3F	; 63
     958:	80 83       	st	Z, r24
     95a:	80 81       	ld	r24, Z
     95c:	80 68       	ori	r24, 0x80	; 128
     95e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     960:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     962:	0e c4       	rjmp	.+2076   	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     968:	8a 81       	ldd	r24, Y+2	; 0x02
     96a:	82 95       	swap	r24
     96c:	88 0f       	add	r24, r24
     96e:	80 7e       	andi	r24, 0xE0	; 224
     970:	81 5e       	subi	r24, 0xE1	; 225
     972:	27 ef       	ldi	r18, 0xF7	; 247
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	f9 01       	movw	r30, r18
     978:	80 83       	st	Z, r24
     97a:	49 81       	ldd	r20, Y+1	; 0x01
     97c:	42 95       	swap	r20
     97e:	44 0f       	add	r20, r20
     980:	40 7e       	andi	r20, 0xE0	; 224
     982:	86 ef       	ldi	r24, 0xF6	; 246
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	fc 01       	movw	r30, r24
     988:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     98a:	12 96       	adiw	r26, 0x02	; 2
     98c:	4c 91       	ld	r20, X
     98e:	12 97       	sbiw	r26, 0x02	; 2
     990:	46 95       	lsr	r20
     992:	46 95       	lsr	r20
     994:	46 95       	lsr	r20
     996:	13 96       	adiw	r26, 0x03	; 3
     998:	5c 91       	ld	r21, X
     99a:	13 97       	sbiw	r26, 0x03	; 3
     99c:	f0 e2       	ldi	r31, 0x20	; 32
     99e:	5f 9f       	mul	r21, r31
     9a0:	40 0d       	add	r20, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	40 93 f3 00 	sts	0x00F3, r20
     9a8:	12 96       	adiw	r26, 0x02	; 2
     9aa:	4c 91       	ld	r20, X
     9ac:	12 97       	sbiw	r26, 0x02	; 2
     9ae:	42 95       	swap	r20
     9b0:	44 0f       	add	r20, r20
     9b2:	40 7e       	andi	r20, 0xE0	; 224
     9b4:	40 93 f2 00 	sts	0x00F2, r20
     9b8:	6f ee       	ldi	r22, 0xEF	; 239
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	fb 01       	movw	r30, r22
     9be:	40 81       	ld	r20, Z
     9c0:	4f 7e       	andi	r20, 0xEF	; 239
     9c2:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     9c4:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     9c6:	5b 81       	ldd	r21, Y+3	; 0x03
     9c8:	52 95       	swap	r21
     9ca:	56 95       	lsr	r21
     9cc:	57 70       	andi	r21, 0x07	; 7
     9ce:	4c 81       	ldd	r20, Y+4	; 0x04
     9d0:	44 0f       	add	r20, r20
     9d2:	44 0f       	add	r20, r20
     9d4:	44 0f       	add	r20, r20
     9d6:	45 0f       	add	r20, r21
     9d8:	f9 01       	movw	r30, r18
     9da:	40 83       	st	Z, r20
     9dc:	3a 81       	ldd	r19, Y+2	; 0x02
     9de:	32 95       	swap	r19
     9e0:	36 95       	lsr	r19
     9e2:	37 70       	andi	r19, 0x07	; 7
     9e4:	2b 81       	ldd	r18, Y+3	; 0x03
     9e6:	22 0f       	add	r18, r18
     9e8:	22 0f       	add	r18, r18
     9ea:	22 0f       	add	r18, r18
     9ec:	23 0f       	add	r18, r19
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18
     9f2:	99 81       	ldd	r25, Y+1	; 0x01
     9f4:	92 95       	swap	r25
     9f6:	96 95       	lsr	r25
     9f8:	97 70       	andi	r25, 0x07	; 7
     9fa:	8a 81       	ldd	r24, Y+2	; 0x02
     9fc:	88 0f       	add	r24, r24
     9fe:	88 0f       	add	r24, r24
     a00:	88 0f       	add	r24, r24
     a02:	89 0f       	add	r24, r25
     a04:	80 93 f5 00 	sts	0x00F5, r24
     a08:	29 81       	ldd	r18, Y+1	; 0x01
     a0a:	22 0f       	add	r18, r18
     a0c:	22 0f       	add	r18, r18
     a0e:	22 0f       	add	r18, r18
     a10:	84 ef       	ldi	r24, 0xF4	; 244
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	fc 01       	movw	r30, r24
     a16:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     a18:	fb 01       	movw	r30, r22
     a1a:	30 81       	ld	r19, Z
     a1c:	16 96       	adiw	r26, 0x06	; 6
     a1e:	2c 91       	ld	r18, X
     a20:	16 97       	sbiw	r26, 0x06	; 6
     a22:	23 2b       	or	r18, r19
     a24:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     a26:	1a 96       	adiw	r26, 0x0a	; 10
     a28:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     a2a:	dc 01       	movw	r26, r24
     a2c:	2c 91       	ld	r18, X
     a2e:	24 60       	ori	r18, 0x04	; 4
     a30:	2c 93       	st	X, r18
		  Can_clear_rtr();
     a32:	a0 ef       	ldi	r26, 0xF0	; 240
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	2c 91       	ld	r18, X
     a38:	2b 7f       	andi	r18, 0xFB	; 251
     a3a:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     a3c:	20 81       	ld	r18, Z
     a3e:	2f 7e       	andi	r18, 0xEF	; 239
     a40:	20 83       	st	Z, r18
          Can_clear_idemsk();
     a42:	fc 01       	movw	r30, r24
     a44:	20 81       	ld	r18, Z
     a46:	2e 7f       	andi	r18, 0xFE	; 254
     a48:	20 83       	st	Z, r18
          Can_config_rx();       
     a4a:	db 01       	movw	r26, r22
     a4c:	8c 91       	ld	r24, X
     a4e:	8f 73       	andi	r24, 0x3F	; 63
     a50:	8c 93       	st	X, r24
     a52:	8c 91       	ld	r24, X
     a54:	80 68       	ori	r24, 0x80	; 128
     a56:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a58:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     a5a:	92 c3       	rjmp	.+1828   	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     a5c:	8f ef       	ldi	r24, 0xFF	; 255
     a5e:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	82 95       	swap	r24
     a64:	88 0f       	add	r24, r24
     a66:	80 7e       	andi	r24, 0xE0	; 224
     a68:	81 5e       	subi	r24, 0xE1	; 225
     a6a:	27 ef       	ldi	r18, 0xF7	; 247
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	80 83       	st	Z, r24
     a72:	49 81       	ldd	r20, Y+1	; 0x01
     a74:	42 95       	swap	r20
     a76:	44 0f       	add	r20, r20
     a78:	40 7e       	andi	r20, 0xE0	; 224
     a7a:	86 ef       	ldi	r24, 0xF6	; 246
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	fc 01       	movw	r30, r24
     a80:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     a82:	12 96       	adiw	r26, 0x02	; 2
     a84:	4c 91       	ld	r20, X
     a86:	12 97       	sbiw	r26, 0x02	; 2
     a88:	46 95       	lsr	r20
     a8a:	46 95       	lsr	r20
     a8c:	46 95       	lsr	r20
     a8e:	13 96       	adiw	r26, 0x03	; 3
     a90:	5c 91       	ld	r21, X
     a92:	13 97       	sbiw	r26, 0x03	; 3
     a94:	f0 e2       	ldi	r31, 0x20	; 32
     a96:	5f 9f       	mul	r21, r31
     a98:	40 0d       	add	r20, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	40 93 f3 00 	sts	0x00F3, r20
     aa0:	12 96       	adiw	r26, 0x02	; 2
     aa2:	4c 91       	ld	r20, X
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	42 95       	swap	r20
     aa8:	44 0f       	add	r20, r20
     aaa:	40 7e       	andi	r20, 0xE0	; 224
     aac:	40 93 f2 00 	sts	0x00F2, r20
     ab0:	6f ee       	ldi	r22, 0xEF	; 239
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	fb 01       	movw	r30, r22
     ab6:	40 81       	ld	r20, Z
     ab8:	4f 7e       	andi	r20, 0xEF	; 239
     aba:	40 83       	st	Z, r20
		
          u8_temp=0; 
     abc:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     abe:	5b 81       	ldd	r21, Y+3	; 0x03
     ac0:	52 95       	swap	r21
     ac2:	56 95       	lsr	r21
     ac4:	57 70       	andi	r21, 0x07	; 7
     ac6:	4c 81       	ldd	r20, Y+4	; 0x04
     ac8:	44 0f       	add	r20, r20
     aca:	44 0f       	add	r20, r20
     acc:	44 0f       	add	r20, r20
     ace:	45 0f       	add	r20, r21
     ad0:	f9 01       	movw	r30, r18
     ad2:	40 83       	st	Z, r20
     ad4:	3a 81       	ldd	r19, Y+2	; 0x02
     ad6:	32 95       	swap	r19
     ad8:	36 95       	lsr	r19
     ada:	37 70       	andi	r19, 0x07	; 7
     adc:	2b 81       	ldd	r18, Y+3	; 0x03
     ade:	22 0f       	add	r18, r18
     ae0:	22 0f       	add	r18, r18
     ae2:	22 0f       	add	r18, r18
     ae4:	23 0f       	add	r18, r19
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
     aea:	99 81       	ldd	r25, Y+1	; 0x01
     aec:	92 95       	swap	r25
     aee:	96 95       	lsr	r25
     af0:	97 70       	andi	r25, 0x07	; 7
     af2:	8a 81       	ldd	r24, Y+2	; 0x02
     af4:	88 0f       	add	r24, r24
     af6:	88 0f       	add	r24, r24
     af8:	88 0f       	add	r24, r24
     afa:	89 0f       	add	r24, r25
     afc:	80 93 f5 00 	sts	0x00F5, r24
     b00:	29 81       	ldd	r18, Y+1	; 0x01
     b02:	22 0f       	add	r18, r18
     b04:	22 0f       	add	r18, r18
     b06:	22 0f       	add	r18, r18
     b08:	84 ef       	ldi	r24, 0xF4	; 244
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	fc 01       	movw	r30, r24
     b0e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b10:	fb 01       	movw	r30, r22
     b12:	30 81       	ld	r19, Z
     b14:	16 96       	adiw	r26, 0x06	; 6
     b16:	2c 91       	ld	r18, X
     b18:	16 97       	sbiw	r26, 0x06	; 6
     b1a:	23 2b       	or	r18, r19
     b1c:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     b1e:	21 e0       	ldi	r18, 0x01	; 1
     b20:	1a 96       	adiw	r26, 0x0a	; 10
     b22:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     b24:	dc 01       	movw	r26, r24
     b26:	2c 91       	ld	r18, X
     b28:	24 60       	ori	r18, 0x04	; 4
     b2a:	2c 93       	st	X, r18
		  Can_set_rtr();
     b2c:	a0 ef       	ldi	r26, 0xF0	; 240
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	2c 91       	ld	r18, X
     b32:	24 60       	ori	r18, 0x04	; 4
     b34:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     b36:	20 81       	ld	r18, Z
     b38:	2f 7d       	andi	r18, 0xDF	; 223
     b3a:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b3c:	fc 01       	movw	r30, r24
     b3e:	20 81       	ld	r18, Z
     b40:	2e 7f       	andi	r18, 0xFE	; 254
     b42:	20 83       	st	Z, r18
          Can_config_rx();       
     b44:	db 01       	movw	r26, r22
     b46:	8c 91       	ld	r24, X
     b48:	8f 73       	andi	r24, 0x3F	; 63
     b4a:	8c 93       	st	X, r24
     b4c:	8c 91       	ld	r24, X
     b4e:	80 68       	ori	r24, 0x80	; 128
     b50:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b52:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     b54:	15 c3       	rjmp	.+1578   	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b56:	1b 96       	adiw	r26, 0x0b	; 11
     b58:	8c 91       	ld	r24, X
     b5a:	1b 97       	sbiw	r26, 0x0b	; 11
     b5c:	88 23       	and	r24, r24
     b5e:	d9 f1       	breq	.+118    	; 0xbd6 <__stack+0x2d7>
     b60:	14 96       	adiw	r26, 0x04	; 4
     b62:	9c 91       	ld	r25, X
     b64:	14 97       	sbiw	r26, 0x04	; 4
     b66:	92 95       	swap	r25
     b68:	96 95       	lsr	r25
     b6a:	97 70       	andi	r25, 0x07	; 7
     b6c:	15 96       	adiw	r26, 0x05	; 5
     b6e:	8c 91       	ld	r24, X
     b70:	15 97       	sbiw	r26, 0x05	; 5
     b72:	88 0f       	add	r24, r24
     b74:	88 0f       	add	r24, r24
     b76:	88 0f       	add	r24, r24
     b78:	89 0f       	add	r24, r25
     b7a:	80 93 f3 00 	sts	0x00F3, r24
     b7e:	13 96       	adiw	r26, 0x03	; 3
     b80:	9c 91       	ld	r25, X
     b82:	13 97       	sbiw	r26, 0x03	; 3
     b84:	92 95       	swap	r25
     b86:	96 95       	lsr	r25
     b88:	97 70       	andi	r25, 0x07	; 7
     b8a:	14 96       	adiw	r26, 0x04	; 4
     b8c:	8c 91       	ld	r24, X
     b8e:	14 97       	sbiw	r26, 0x04	; 4
     b90:	88 0f       	add	r24, r24
     b92:	88 0f       	add	r24, r24
     b94:	88 0f       	add	r24, r24
     b96:	89 0f       	add	r24, r25
     b98:	80 93 f2 00 	sts	0x00F2, r24
     b9c:	12 96       	adiw	r26, 0x02	; 2
     b9e:	9c 91       	ld	r25, X
     ba0:	12 97       	sbiw	r26, 0x02	; 2
     ba2:	92 95       	swap	r25
     ba4:	96 95       	lsr	r25
     ba6:	97 70       	andi	r25, 0x07	; 7
     ba8:	13 96       	adiw	r26, 0x03	; 3
     baa:	8c 91       	ld	r24, X
     bac:	13 97       	sbiw	r26, 0x03	; 3
     bae:	88 0f       	add	r24, r24
     bb0:	88 0f       	add	r24, r24
     bb2:	88 0f       	add	r24, r24
     bb4:	89 0f       	add	r24, r25
     bb6:	80 93 f1 00 	sts	0x00F1, r24
     bba:	12 96       	adiw	r26, 0x02	; 2
     bbc:	8c 91       	ld	r24, X
     bbe:	12 97       	sbiw	r26, 0x02	; 2
     bc0:	88 0f       	add	r24, r24
     bc2:	88 0f       	add	r24, r24
     bc4:	88 0f       	add	r24, r24
     bc6:	80 93 f0 00 	sts	0x00F0, r24
     bca:	ef ee       	ldi	r30, 0xEF	; 239
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	80 61       	ori	r24, 0x10	; 16
     bd2:	80 83       	st	Z, r24
     bd4:	1c c0       	rjmp	.+56     	; 0xc0e <__stack+0x30f>
          else              { Can_set_std_id(cmd->id.std);}
     bd6:	12 96       	adiw	r26, 0x02	; 2
     bd8:	8c 91       	ld	r24, X
     bda:	12 97       	sbiw	r26, 0x02	; 2
     bdc:	86 95       	lsr	r24
     bde:	86 95       	lsr	r24
     be0:	86 95       	lsr	r24
     be2:	13 96       	adiw	r26, 0x03	; 3
     be4:	9c 91       	ld	r25, X
     be6:	13 97       	sbiw	r26, 0x03	; 3
     be8:	e0 e2       	ldi	r30, 0x20	; 32
     bea:	9e 9f       	mul	r25, r30
     bec:	80 0d       	add	r24, r0
     bee:	11 24       	eor	r1, r1
     bf0:	80 93 f3 00 	sts	0x00F3, r24
     bf4:	12 96       	adiw	r26, 0x02	; 2
     bf6:	8c 91       	ld	r24, X
     bf8:	12 97       	sbiw	r26, 0x02	; 2
     bfa:	82 95       	swap	r24
     bfc:	88 0f       	add	r24, r24
     bfe:	80 7e       	andi	r24, 0xE0	; 224
     c00:	80 93 f2 00 	sts	0x00F2, r24
     c04:	ef ee       	ldi	r30, 0xEF	; 239
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8f 7e       	andi	r24, 0xEF	; 239
     c0c:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     c0e:	8f ef       	ldi	r24, 0xFF	; 255
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	9b 81       	ldd	r25, Y+3	; 0x03
     c14:	92 95       	swap	r25
     c16:	96 95       	lsr	r25
     c18:	97 70       	andi	r25, 0x07	; 7
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	88 0f       	add	r24, r24
     c1e:	88 0f       	add	r24, r24
     c20:	88 0f       	add	r24, r24
     c22:	89 0f       	add	r24, r25
     c24:	80 93 f7 00 	sts	0x00F7, r24
     c28:	9a 81       	ldd	r25, Y+2	; 0x02
     c2a:	92 95       	swap	r25
     c2c:	96 95       	lsr	r25
     c2e:	97 70       	andi	r25, 0x07	; 7
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	88 0f       	add	r24, r24
     c34:	88 0f       	add	r24, r24
     c36:	88 0f       	add	r24, r24
     c38:	89 0f       	add	r24, r25
     c3a:	80 93 f6 00 	sts	0x00F6, r24
     c3e:	99 81       	ldd	r25, Y+1	; 0x01
     c40:	92 95       	swap	r25
     c42:	96 95       	lsr	r25
     c44:	97 70       	andi	r25, 0x07	; 7
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	88 0f       	add	r24, r24
     c4a:	88 0f       	add	r24, r24
     c4c:	88 0f       	add	r24, r24
     c4e:	89 0f       	add	r24, r25
     c50:	80 93 f5 00 	sts	0x00F5, r24
     c54:	29 81       	ldd	r18, Y+1	; 0x01
     c56:	22 0f       	add	r18, r18
     c58:	22 0f       	add	r18, r18
     c5a:	22 0f       	add	r18, r18
     c5c:	84 ef       	ldi	r24, 0xF4	; 244
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     c64:	ef ee       	ldi	r30, 0xEF	; 239
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	30 81       	ld	r19, Z
     c6a:	16 96       	adiw	r26, 0x06	; 6
     c6c:	2c 91       	ld	r18, X
     c6e:	23 2b       	or	r18, r19
     c70:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     c72:	dc 01       	movw	r26, r24
     c74:	2c 91       	ld	r18, X
     c76:	2b 7f       	andi	r18, 0xFB	; 251
     c78:	2c 93       	st	X, r18
          Can_set_idemsk();
     c7a:	2c 91       	ld	r18, X
     c7c:	21 60       	ori	r18, 0x01	; 1
     c7e:	2c 93       	st	X, r18
          Can_config_rx();       
     c80:	80 81       	ld	r24, Z
     c82:	8f 73       	andi	r24, 0x3F	; 63
     c84:	80 83       	st	Z, r24
     c86:	80 81       	ld	r24, Z
     c88:	80 68       	ori	r24, 0x80	; 128
     c8a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     c8e:	78 c2       	rjmp	.+1264   	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c90:	1b 96       	adiw	r26, 0x0b	; 11
     c92:	8c 91       	ld	r24, X
     c94:	1b 97       	sbiw	r26, 0x0b	; 11
     c96:	88 23       	and	r24, r24
     c98:	d9 f1       	breq	.+118    	; 0xd10 <__stack+0x411>
     c9a:	14 96       	adiw	r26, 0x04	; 4
     c9c:	9c 91       	ld	r25, X
     c9e:	14 97       	sbiw	r26, 0x04	; 4
     ca0:	92 95       	swap	r25
     ca2:	96 95       	lsr	r25
     ca4:	97 70       	andi	r25, 0x07	; 7
     ca6:	15 96       	adiw	r26, 0x05	; 5
     ca8:	8c 91       	ld	r24, X
     caa:	15 97       	sbiw	r26, 0x05	; 5
     cac:	88 0f       	add	r24, r24
     cae:	88 0f       	add	r24, r24
     cb0:	88 0f       	add	r24, r24
     cb2:	89 0f       	add	r24, r25
     cb4:	80 93 f3 00 	sts	0x00F3, r24
     cb8:	13 96       	adiw	r26, 0x03	; 3
     cba:	9c 91       	ld	r25, X
     cbc:	13 97       	sbiw	r26, 0x03	; 3
     cbe:	92 95       	swap	r25
     cc0:	96 95       	lsr	r25
     cc2:	97 70       	andi	r25, 0x07	; 7
     cc4:	14 96       	adiw	r26, 0x04	; 4
     cc6:	8c 91       	ld	r24, X
     cc8:	14 97       	sbiw	r26, 0x04	; 4
     cca:	88 0f       	add	r24, r24
     ccc:	88 0f       	add	r24, r24
     cce:	88 0f       	add	r24, r24
     cd0:	89 0f       	add	r24, r25
     cd2:	80 93 f2 00 	sts	0x00F2, r24
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	9c 91       	ld	r25, X
     cda:	12 97       	sbiw	r26, 0x02	; 2
     cdc:	92 95       	swap	r25
     cde:	96 95       	lsr	r25
     ce0:	97 70       	andi	r25, 0x07	; 7
     ce2:	13 96       	adiw	r26, 0x03	; 3
     ce4:	8c 91       	ld	r24, X
     ce6:	13 97       	sbiw	r26, 0x03	; 3
     ce8:	88 0f       	add	r24, r24
     cea:	88 0f       	add	r24, r24
     cec:	88 0f       	add	r24, r24
     cee:	89 0f       	add	r24, r25
     cf0:	80 93 f1 00 	sts	0x00F1, r24
     cf4:	12 96       	adiw	r26, 0x02	; 2
     cf6:	8c 91       	ld	r24, X
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	88 0f       	add	r24, r24
     cfc:	88 0f       	add	r24, r24
     cfe:	88 0f       	add	r24, r24
     d00:	80 93 f0 00 	sts	0x00F0, r24
     d04:	ef ee       	ldi	r30, 0xEF	; 239
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	80 61       	ori	r24, 0x10	; 16
     d0c:	80 83       	st	Z, r24
     d0e:	1c c0       	rjmp	.+56     	; 0xd48 <__stack+0x449>
          else              { Can_set_std_id(cmd->id.std);}
     d10:	12 96       	adiw	r26, 0x02	; 2
     d12:	8c 91       	ld	r24, X
     d14:	12 97       	sbiw	r26, 0x02	; 2
     d16:	86 95       	lsr	r24
     d18:	86 95       	lsr	r24
     d1a:	86 95       	lsr	r24
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	9c 91       	ld	r25, X
     d20:	13 97       	sbiw	r26, 0x03	; 3
     d22:	e0 e2       	ldi	r30, 0x20	; 32
     d24:	9e 9f       	mul	r25, r30
     d26:	80 0d       	add	r24, r0
     d28:	11 24       	eor	r1, r1
     d2a:	80 93 f3 00 	sts	0x00F3, r24
     d2e:	12 96       	adiw	r26, 0x02	; 2
     d30:	8c 91       	ld	r24, X
     d32:	12 97       	sbiw	r26, 0x02	; 2
     d34:	82 95       	swap	r24
     d36:	88 0f       	add	r24, r24
     d38:	80 7e       	andi	r24, 0xE0	; 224
     d3a:	80 93 f2 00 	sts	0x00F2, r24
     d3e:	ef ee       	ldi	r30, 0xEF	; 239
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	8f 7e       	andi	r24, 0xEF	; 239
     d46:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	89 83       	std	Y+1, r24	; 0x01
     d4c:	9b 81       	ldd	r25, Y+3	; 0x03
     d4e:	92 95       	swap	r25
     d50:	96 95       	lsr	r25
     d52:	97 70       	andi	r25, 0x07	; 7
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	88 0f       	add	r24, r24
     d58:	88 0f       	add	r24, r24
     d5a:	88 0f       	add	r24, r24
     d5c:	89 0f       	add	r24, r25
     d5e:	80 93 f7 00 	sts	0x00F7, r24
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	92 95       	swap	r25
     d66:	96 95       	lsr	r25
     d68:	97 70       	andi	r25, 0x07	; 7
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	88 0f       	add	r24, r24
     d6e:	88 0f       	add	r24, r24
     d70:	88 0f       	add	r24, r24
     d72:	89 0f       	add	r24, r25
     d74:	80 93 f6 00 	sts	0x00F6, r24
     d78:	99 81       	ldd	r25, Y+1	; 0x01
     d7a:	92 95       	swap	r25
     d7c:	96 95       	lsr	r25
     d7e:	97 70       	andi	r25, 0x07	; 7
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	88 0f       	add	r24, r24
     d84:	88 0f       	add	r24, r24
     d86:	88 0f       	add	r24, r24
     d88:	89 0f       	add	r24, r25
     d8a:	80 93 f5 00 	sts	0x00F5, r24
     d8e:	29 81       	ldd	r18, Y+1	; 0x01
     d90:	22 0f       	add	r18, r18
     d92:	22 0f       	add	r18, r18
     d94:	22 0f       	add	r18, r18
     d96:	84 ef       	ldi	r24, 0xF4	; 244
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	fc 01       	movw	r30, r24
     d9c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d9e:	ef ee       	ldi	r30, 0xEF	; 239
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	30 81       	ld	r19, Z
     da4:	16 96       	adiw	r26, 0x06	; 6
     da6:	2c 91       	ld	r18, X
     da8:	16 97       	sbiw	r26, 0x06	; 6
     daa:	23 2b       	or	r18, r19
     dac:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     dae:	1a 96       	adiw	r26, 0x0a	; 10
     db0:	1c 92       	st	X, r1
     db2:	dc 01       	movw	r26, r24
     db4:	2c 91       	ld	r18, X
     db6:	24 60       	ori	r18, 0x04	; 4
     db8:	2c 93       	st	X, r18
     dba:	a0 ef       	ldi	r26, 0xF0	; 240
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	2c 91       	ld	r18, X
     dc0:	2b 7f       	andi	r18, 0xFB	; 251
     dc2:	2c 93       	st	X, r18
          Can_set_idemsk();
     dc4:	dc 01       	movw	r26, r24
     dc6:	2c 91       	ld	r18, X
     dc8:	21 60       	ori	r18, 0x01	; 1
     dca:	2c 93       	st	X, r18
          Can_config_rx();       
     dcc:	80 81       	ld	r24, Z
     dce:	8f 73       	andi	r24, 0x3F	; 63
     dd0:	80 83       	st	Z, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	80 68       	ori	r24, 0x80	; 128
     dd6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dd8:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     dda:	d2 c1       	rjmp	.+932    	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ddc:	1b 96       	adiw	r26, 0x0b	; 11
     dde:	8c 91       	ld	r24, X
     de0:	1b 97       	sbiw	r26, 0x0b	; 11
     de2:	88 23       	and	r24, r24
     de4:	d9 f1       	breq	.+118    	; 0xe5c <__stack+0x55d>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	9c 91       	ld	r25, X
     dea:	14 97       	sbiw	r26, 0x04	; 4
     dec:	92 95       	swap	r25
     dee:	96 95       	lsr	r25
     df0:	97 70       	andi	r25, 0x07	; 7
     df2:	15 96       	adiw	r26, 0x05	; 5
     df4:	8c 91       	ld	r24, X
     df6:	15 97       	sbiw	r26, 0x05	; 5
     df8:	88 0f       	add	r24, r24
     dfa:	88 0f       	add	r24, r24
     dfc:	88 0f       	add	r24, r24
     dfe:	89 0f       	add	r24, r25
     e00:	80 93 f3 00 	sts	0x00F3, r24
     e04:	13 96       	adiw	r26, 0x03	; 3
     e06:	9c 91       	ld	r25, X
     e08:	13 97       	sbiw	r26, 0x03	; 3
     e0a:	92 95       	swap	r25
     e0c:	96 95       	lsr	r25
     e0e:	97 70       	andi	r25, 0x07	; 7
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8c 91       	ld	r24, X
     e14:	14 97       	sbiw	r26, 0x04	; 4
     e16:	88 0f       	add	r24, r24
     e18:	88 0f       	add	r24, r24
     e1a:	88 0f       	add	r24, r24
     e1c:	89 0f       	add	r24, r25
     e1e:	80 93 f2 00 	sts	0x00F2, r24
     e22:	12 96       	adiw	r26, 0x02	; 2
     e24:	9c 91       	ld	r25, X
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	92 95       	swap	r25
     e2a:	96 95       	lsr	r25
     e2c:	97 70       	andi	r25, 0x07	; 7
     e2e:	13 96       	adiw	r26, 0x03	; 3
     e30:	8c 91       	ld	r24, X
     e32:	13 97       	sbiw	r26, 0x03	; 3
     e34:	88 0f       	add	r24, r24
     e36:	88 0f       	add	r24, r24
     e38:	88 0f       	add	r24, r24
     e3a:	89 0f       	add	r24, r25
     e3c:	80 93 f1 00 	sts	0x00F1, r24
     e40:	12 96       	adiw	r26, 0x02	; 2
     e42:	8c 91       	ld	r24, X
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	88 0f       	add	r24, r24
     e48:	88 0f       	add	r24, r24
     e4a:	88 0f       	add	r24, r24
     e4c:	80 93 f0 00 	sts	0x00F0, r24
     e50:	ef ee       	ldi	r30, 0xEF	; 239
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 61       	ori	r24, 0x10	; 16
     e58:	80 83       	st	Z, r24
     e5a:	1c c0       	rjmp	.+56     	; 0xe94 <__stack+0x595>
          else              { Can_set_std_id(cmd->id.std);}
     e5c:	12 96       	adiw	r26, 0x02	; 2
     e5e:	8c 91       	ld	r24, X
     e60:	12 97       	sbiw	r26, 0x02	; 2
     e62:	86 95       	lsr	r24
     e64:	86 95       	lsr	r24
     e66:	86 95       	lsr	r24
     e68:	13 96       	adiw	r26, 0x03	; 3
     e6a:	9c 91       	ld	r25, X
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	e0 e2       	ldi	r30, 0x20	; 32
     e70:	9e 9f       	mul	r25, r30
     e72:	80 0d       	add	r24, r0
     e74:	11 24       	eor	r1, r1
     e76:	80 93 f3 00 	sts	0x00F3, r24
     e7a:	12 96       	adiw	r26, 0x02	; 2
     e7c:	8c 91       	ld	r24, X
     e7e:	12 97       	sbiw	r26, 0x02	; 2
     e80:	82 95       	swap	r24
     e82:	88 0f       	add	r24, r24
     e84:	80 7e       	andi	r24, 0xE0	; 224
     e86:	80 93 f2 00 	sts	0x00F2, r24
     e8a:	ef ee       	ldi	r30, 0xEF	; 239
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	8f 7e       	andi	r24, 0xEF	; 239
     e92:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	89 83       	std	Y+1, r24	; 0x01
     e98:	9b 81       	ldd	r25, Y+3	; 0x03
     e9a:	92 95       	swap	r25
     e9c:	96 95       	lsr	r25
     e9e:	97 70       	andi	r25, 0x07	; 7
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	88 0f       	add	r24, r24
     ea4:	88 0f       	add	r24, r24
     ea6:	88 0f       	add	r24, r24
     ea8:	89 0f       	add	r24, r25
     eaa:	80 93 f7 00 	sts	0x00F7, r24
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	92 95       	swap	r25
     eb2:	96 95       	lsr	r25
     eb4:	97 70       	andi	r25, 0x07	; 7
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	88 0f       	add	r24, r24
     eba:	88 0f       	add	r24, r24
     ebc:	88 0f       	add	r24, r24
     ebe:	89 0f       	add	r24, r25
     ec0:	80 93 f6 00 	sts	0x00F6, r24
     ec4:	99 81       	ldd	r25, Y+1	; 0x01
     ec6:	92 95       	swap	r25
     ec8:	96 95       	lsr	r25
     eca:	97 70       	andi	r25, 0x07	; 7
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	88 0f       	add	r24, r24
     ed0:	88 0f       	add	r24, r24
     ed2:	88 0f       	add	r24, r24
     ed4:	89 0f       	add	r24, r25
     ed6:	80 93 f5 00 	sts	0x00F5, r24
     eda:	29 81       	ldd	r18, Y+1	; 0x01
     edc:	22 0f       	add	r18, r18
     ede:	22 0f       	add	r18, r18
     ee0:	22 0f       	add	r18, r18
     ee2:	84 ef       	ldi	r24, 0xF4	; 244
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	fc 01       	movw	r30, r24
     ee8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     eea:	ef ee       	ldi	r30, 0xEF	; 239
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	30 81       	ld	r19, Z
     ef0:	16 96       	adiw	r26, 0x06	; 6
     ef2:	2c 91       	ld	r18, X
     ef4:	16 97       	sbiw	r26, 0x06	; 6
     ef6:	23 2b       	or	r18, r19
     ef8:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     efa:	21 e0       	ldi	r18, 0x01	; 1
     efc:	1a 96       	adiw	r26, 0x0a	; 10
     efe:	2c 93       	st	X, r18
     f00:	dc 01       	movw	r26, r24
     f02:	2c 91       	ld	r18, X
     f04:	24 60       	ori	r18, 0x04	; 4
     f06:	2c 93       	st	X, r18
     f08:	a0 ef       	ldi	r26, 0xF0	; 240
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	2c 91       	ld	r18, X
     f0e:	24 60       	ori	r18, 0x04	; 4
     f10:	2c 93       	st	X, r18
          Can_clear_rplv();
     f12:	20 81       	ld	r18, Z
     f14:	2f 7d       	andi	r18, 0xDF	; 223
     f16:	20 83       	st	Z, r18
          Can_set_idemsk();
     f18:	dc 01       	movw	r26, r24
     f1a:	2c 91       	ld	r18, X
     f1c:	21 60       	ori	r18, 0x01	; 1
     f1e:	2c 93       	st	X, r18
          Can_config_rx();       
     f20:	80 81       	ld	r24, Z
     f22:	8f 73       	andi	r24, 0x3F	; 63
     f24:	80 83       	st	Z, r24
     f26:	80 81       	ld	r24, Z
     f28:	80 68       	ori	r24, 0x80	; 128
     f2a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     f2c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     f2e:	28 c1       	rjmp	.+592    	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	8a ef       	ldi	r24, 0xFA	; 250
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	17 96       	adiw	r26, 0x07	; 7
     f38:	ed 91       	ld	r30, X+
     f3a:	fc 91       	ld	r31, X
     f3c:	18 97       	sbiw	r26, 0x08	; 8
     f3e:	e2 0f       	add	r30, r18
     f40:	f1 1d       	adc	r31, r1
     f42:	30 81       	ld	r19, Z
     f44:	fc 01       	movw	r30, r24
     f46:	30 83       	st	Z, r19
     f48:	2f 5f       	subi	r18, 0xFF	; 255
     f4a:	16 96       	adiw	r26, 0x06	; 6
     f4c:	3c 91       	ld	r19, X
     f4e:	16 97       	sbiw	r26, 0x06	; 6
     f50:	23 17       	cp	r18, r19
     f52:	88 f3       	brcs	.-30     	; 0xf36 <__stack+0x637>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     f54:	19 82       	std	Y+1, r1	; 0x01
     f56:	9b 81       	ldd	r25, Y+3	; 0x03
     f58:	92 95       	swap	r25
     f5a:	96 95       	lsr	r25
     f5c:	97 70       	andi	r25, 0x07	; 7
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	88 0f       	add	r24, r24
     f62:	88 0f       	add	r24, r24
     f64:	88 0f       	add	r24, r24
     f66:	89 0f       	add	r24, r25
     f68:	80 93 f7 00 	sts	0x00F7, r24
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	92 95       	swap	r25
     f70:	96 95       	lsr	r25
     f72:	97 70       	andi	r25, 0x07	; 7
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	88 0f       	add	r24, r24
     f78:	88 0f       	add	r24, r24
     f7a:	88 0f       	add	r24, r24
     f7c:	89 0f       	add	r24, r25
     f7e:	80 93 f6 00 	sts	0x00F6, r24
     f82:	99 81       	ldd	r25, Y+1	; 0x01
     f84:	92 95       	swap	r25
     f86:	96 95       	lsr	r25
     f88:	97 70       	andi	r25, 0x07	; 7
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	88 0f       	add	r24, r24
     f8e:	88 0f       	add	r24, r24
     f90:	88 0f       	add	r24, r24
     f92:	89 0f       	add	r24, r25
     f94:	80 93 f5 00 	sts	0x00F5, r24
     f98:	29 81       	ldd	r18, Y+1	; 0x01
     f9a:	22 0f       	add	r18, r18
     f9c:	22 0f       	add	r18, r18
     f9e:	22 0f       	add	r18, r18
     fa0:	84 ef       	ldi	r24, 0xF4	; 244
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     fa8:	ef ee       	ldi	r30, 0xEF	; 239
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	30 81       	ld	r19, Z
     fae:	16 96       	adiw	r26, 0x06	; 6
     fb0:	2c 91       	ld	r18, X
     fb2:	16 97       	sbiw	r26, 0x06	; 6
     fb4:	23 2b       	or	r18, r19
     fb6:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	1a 96       	adiw	r26, 0x0a	; 10
     fbc:	2c 93       	st	X, r18
     fbe:	dc 01       	movw	r26, r24
     fc0:	2c 91       	ld	r18, X
     fc2:	24 60       	ori	r18, 0x04	; 4
     fc4:	2c 93       	st	X, r18
     fc6:	a0 ef       	ldi	r26, 0xF0	; 240
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	2c 91       	ld	r18, X
     fcc:	24 60       	ori	r18, 0x04	; 4
     fce:	2c 93       	st	X, r18
          Can_set_rplv();
     fd0:	20 81       	ld	r18, Z
     fd2:	20 62       	ori	r18, 0x20	; 32
     fd4:	20 83       	st	Z, r18
          Can_clear_idemsk();
     fd6:	dc 01       	movw	r26, r24
     fd8:	2c 91       	ld	r18, X
     fda:	2e 7f       	andi	r18, 0xFE	; 254
     fdc:	2c 93       	st	X, r18
          Can_config_rx();       
     fde:	80 81       	ld	r24, Z
     fe0:	8f 73       	andi	r24, 0x3F	; 63
     fe2:	80 83       	st	Z, r24
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fea:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     fec:	c9 c0       	rjmp	.+402    	; 0x1180 <__stack+0x881>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fee:	1b 96       	adiw	r26, 0x0b	; 11
     ff0:	8c 91       	ld	r24, X
     ff2:	1b 97       	sbiw	r26, 0x0b	; 11
     ff4:	88 23       	and	r24, r24
     ff6:	d9 f1       	breq	.+118    	; 0x106e <__stack+0x76f>
     ff8:	14 96       	adiw	r26, 0x04	; 4
     ffa:	9c 91       	ld	r25, X
     ffc:	14 97       	sbiw	r26, 0x04	; 4
     ffe:	92 95       	swap	r25
    1000:	96 95       	lsr	r25
    1002:	97 70       	andi	r25, 0x07	; 7
    1004:	15 96       	adiw	r26, 0x05	; 5
    1006:	8c 91       	ld	r24, X
    1008:	15 97       	sbiw	r26, 0x05	; 5
    100a:	88 0f       	add	r24, r24
    100c:	88 0f       	add	r24, r24
    100e:	88 0f       	add	r24, r24
    1010:	89 0f       	add	r24, r25
    1012:	80 93 f3 00 	sts	0x00F3, r24
    1016:	13 96       	adiw	r26, 0x03	; 3
    1018:	9c 91       	ld	r25, X
    101a:	13 97       	sbiw	r26, 0x03	; 3
    101c:	92 95       	swap	r25
    101e:	96 95       	lsr	r25
    1020:	97 70       	andi	r25, 0x07	; 7
    1022:	14 96       	adiw	r26, 0x04	; 4
    1024:	8c 91       	ld	r24, X
    1026:	14 97       	sbiw	r26, 0x04	; 4
    1028:	88 0f       	add	r24, r24
    102a:	88 0f       	add	r24, r24
    102c:	88 0f       	add	r24, r24
    102e:	89 0f       	add	r24, r25
    1030:	80 93 f2 00 	sts	0x00F2, r24
    1034:	12 96       	adiw	r26, 0x02	; 2
    1036:	9c 91       	ld	r25, X
    1038:	12 97       	sbiw	r26, 0x02	; 2
    103a:	92 95       	swap	r25
    103c:	96 95       	lsr	r25
    103e:	97 70       	andi	r25, 0x07	; 7
    1040:	13 96       	adiw	r26, 0x03	; 3
    1042:	8c 91       	ld	r24, X
    1044:	13 97       	sbiw	r26, 0x03	; 3
    1046:	88 0f       	add	r24, r24
    1048:	88 0f       	add	r24, r24
    104a:	88 0f       	add	r24, r24
    104c:	89 0f       	add	r24, r25
    104e:	80 93 f1 00 	sts	0x00F1, r24
    1052:	12 96       	adiw	r26, 0x02	; 2
    1054:	8c 91       	ld	r24, X
    1056:	12 97       	sbiw	r26, 0x02	; 2
    1058:	88 0f       	add	r24, r24
    105a:	88 0f       	add	r24, r24
    105c:	88 0f       	add	r24, r24
    105e:	80 93 f0 00 	sts	0x00F0, r24
    1062:	ef ee       	ldi	r30, 0xEF	; 239
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 61       	ori	r24, 0x10	; 16
    106a:	80 83       	st	Z, r24
    106c:	1c c0       	rjmp	.+56     	; 0x10a6 <__stack+0x7a7>
          else              { Can_set_std_id(cmd->id.std);}
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	8c 91       	ld	r24, X
    1072:	12 97       	sbiw	r26, 0x02	; 2
    1074:	86 95       	lsr	r24
    1076:	86 95       	lsr	r24
    1078:	86 95       	lsr	r24
    107a:	13 96       	adiw	r26, 0x03	; 3
    107c:	9c 91       	ld	r25, X
    107e:	13 97       	sbiw	r26, 0x03	; 3
    1080:	e0 e2       	ldi	r30, 0x20	; 32
    1082:	9e 9f       	mul	r25, r30
    1084:	80 0d       	add	r24, r0
    1086:	11 24       	eor	r1, r1
    1088:	80 93 f3 00 	sts	0x00F3, r24
    108c:	12 96       	adiw	r26, 0x02	; 2
    108e:	8c 91       	ld	r24, X
    1090:	12 97       	sbiw	r26, 0x02	; 2
    1092:	82 95       	swap	r24
    1094:	88 0f       	add	r24, r24
    1096:	80 7e       	andi	r24, 0xE0	; 224
    1098:	80 93 f2 00 	sts	0x00F2, r24
    109c:	ef ee       	ldi	r30, 0xEF	; 239
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8f 7e       	andi	r24, 0xEF	; 239
    10a4:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    10a6:	16 96       	adiw	r26, 0x06	; 6
    10a8:	8c 91       	ld	r24, X
    10aa:	16 97       	sbiw	r26, 0x06	; 6
    10ac:	88 23       	and	r24, r24
    10ae:	91 f0       	breq	.+36     	; 0x10d4 <__stack+0x7d5>
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	8a ef       	ldi	r24, 0xFA	; 250
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	17 96       	adiw	r26, 0x07	; 7
    10b8:	ed 91       	ld	r30, X+
    10ba:	fc 91       	ld	r31, X
    10bc:	18 97       	sbiw	r26, 0x08	; 8
    10be:	e2 0f       	add	r30, r18
    10c0:	f1 1d       	adc	r31, r1
    10c2:	30 81       	ld	r19, Z
    10c4:	fc 01       	movw	r30, r24
    10c6:	30 83       	st	Z, r19
    10c8:	2f 5f       	subi	r18, 0xFF	; 255
    10ca:	16 96       	adiw	r26, 0x06	; 6
    10cc:	3c 91       	ld	r19, X
    10ce:	16 97       	sbiw	r26, 0x06	; 6
    10d0:	23 17       	cp	r18, r19
    10d2:	88 f3       	brcs	.-30     	; 0x10b6 <__stack+0x7b7>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	92 95       	swap	r25
    10dc:	96 95       	lsr	r25
    10de:	97 70       	andi	r25, 0x07	; 7
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	88 0f       	add	r24, r24
    10e4:	88 0f       	add	r24, r24
    10e6:	88 0f       	add	r24, r24
    10e8:	89 0f       	add	r24, r25
    10ea:	80 93 f7 00 	sts	0x00F7, r24
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	92 95       	swap	r25
    10f2:	96 95       	lsr	r25
    10f4:	97 70       	andi	r25, 0x07	; 7
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 0f       	add	r24, r24
    10fa:	88 0f       	add	r24, r24
    10fc:	88 0f       	add	r24, r24
    10fe:	89 0f       	add	r24, r25
    1100:	80 93 f6 00 	sts	0x00F6, r24
    1104:	99 81       	ldd	r25, Y+1	; 0x01
    1106:	92 95       	swap	r25
    1108:	96 95       	lsr	r25
    110a:	97 70       	andi	r25, 0x07	; 7
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	88 0f       	add	r24, r24
    1110:	88 0f       	add	r24, r24
    1112:	88 0f       	add	r24, r24
    1114:	89 0f       	add	r24, r25
    1116:	80 93 f5 00 	sts	0x00F5, r24
    111a:	29 81       	ldd	r18, Y+1	; 0x01
    111c:	22 0f       	add	r18, r18
    111e:	22 0f       	add	r18, r18
    1120:	22 0f       	add	r18, r18
    1122:	84 ef       	ldi	r24, 0xF4	; 244
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	fc 01       	movw	r30, r24
    1128:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    112a:	ef ee       	ldi	r30, 0xEF	; 239
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	30 81       	ld	r19, Z
    1130:	16 96       	adiw	r26, 0x06	; 6
    1132:	2c 91       	ld	r18, X
    1134:	16 97       	sbiw	r26, 0x06	; 6
    1136:	23 2b       	or	r18, r19
    1138:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    113a:	21 e0       	ldi	r18, 0x01	; 1
    113c:	1a 96       	adiw	r26, 0x0a	; 10
    113e:	2c 93       	st	X, r18
    1140:	dc 01       	movw	r26, r24
    1142:	2c 91       	ld	r18, X
    1144:	24 60       	ori	r18, 0x04	; 4
    1146:	2c 93       	st	X, r18
    1148:	a0 ef       	ldi	r26, 0xF0	; 240
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	2c 91       	ld	r18, X
    114e:	24 60       	ori	r18, 0x04	; 4
    1150:	2c 93       	st	X, r18
          Can_set_rplv();
    1152:	20 81       	ld	r18, Z
    1154:	20 62       	ori	r18, 0x20	; 32
    1156:	20 83       	st	Z, r18
          Can_set_idemsk();
    1158:	dc 01       	movw	r26, r24
    115a:	2c 91       	ld	r18, X
    115c:	21 60       	ori	r18, 0x01	; 1
    115e:	2c 93       	st	X, r18
          Can_config_rx();       
    1160:	80 81       	ld	r24, Z
    1162:	8f 73       	andi	r24, 0x3F	; 63
    1164:	80 83       	st	Z, r24
    1166:	80 81       	ld	r24, Z
    1168:	80 68       	ori	r24, 0x80	; 128
    116a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    116c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    116e:	08 c0       	rjmp	.+16     	; 0x1180 <__stack+0x881>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1170:	19 96       	adiw	r26, 0x09	; 9
    1172:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1174:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <__stack+0x881>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1178:	8f e1       	ldi	r24, 0x1F	; 31
    117a:	19 96       	adiw	r26, 0x09	; 9
    117c:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    1180:	0f 90       	pop	r0
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	08 95       	ret

00001188 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    118e:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1190:	88 23       	and	r24, r24
    1192:	09 f4       	brne	.+2      	; 0x1196 <can_get_status+0xe>
    1194:	e3 c0       	rjmp	.+454    	; 0x135c <can_get_status+0x1d4>
    1196:	8f 31       	cpi	r24, 0x1F	; 31
    1198:	09 f4       	brne	.+2      	; 0x119c <can_get_status+0x14>
    119a:	e2 c0       	rjmp	.+452    	; 0x1360 <can_get_status+0x1d8>
    119c:	8f 3f       	cpi	r24, 0xFF	; 255
    119e:	09 f4       	brne	.+2      	; 0x11a2 <can_get_status+0x1a>
    11a0:	e1 c0       	rjmp	.+450    	; 0x1364 <can_get_status+0x1dc>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    11a2:	62 95       	swap	r22
    11a4:	60 7f       	andi	r22, 0xF0	; 240
    11a6:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    11aa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <can_get_mob_status>
    
    switch (a_status)
    11ae:	80 32       	cpi	r24, 0x20	; 32
    11b0:	61 f0       	breq	.+24     	; 0x11ca <can_get_status+0x42>
    11b2:	20 f4       	brcc	.+8      	; 0x11bc <can_get_status+0x34>
    11b4:	88 23       	and	r24, r24
    11b6:	09 f4       	brne	.+2      	; 0x11ba <can_get_status+0x32>
    11b8:	d7 c0       	rjmp	.+430    	; 0x1368 <can_get_status+0x1e0>
    11ba:	c6 c0       	rjmp	.+396    	; 0x1348 <can_get_status+0x1c0>
    11bc:	80 34       	cpi	r24, 0x40	; 64
    11be:	09 f4       	brne	.+2      	; 0x11c2 <can_get_status+0x3a>
    11c0:	b8 c0       	rjmp	.+368    	; 0x1332 <can_get_status+0x1aa>
    11c2:	80 3a       	cpi	r24, 0xA0	; 160
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <can_get_status+0x40>
    11c6:	5c c0       	rjmp	.+184    	; 0x1280 <can_get_status+0xf8>
    11c8:	bf c0       	rjmp	.+382    	; 0x1348 <can_get_status+0x1c0>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_toggle(LED7);	//Toggle LED0 when the appropriate message is received.
    11ca:	87 e0       	ldi	r24, 0x07	; 7
    11cc:	0e 94 b8 09 	call	0x1370	; 0x1370 <LED_toggle>
			delay_ms(100);
    11d0:	84 e6       	ldi	r24, 0x64	; 100
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
			LED_toggle(LED7);
    11d8:	87 e0       	ldi	r24, 0x07	; 7
    11da:	0e 94 b8 09 	call	0x1370	; 0x1370 <LED_toggle>
			delay_ms(100);
    11de:	84 e6       	ldi	r24, 0x64	; 100
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
	    
            cmd->ctrl.rtr = Can_get_rtr();
    11e6:	80 91 f0 00 	lds	r24, 0x00F0
    11ea:	82 fb       	bst	r24, 2
    11ec:	88 27       	eor	r24, r24
    11ee:	80 f9       	bld	r24, 0
    11f0:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    11f2:	80 91 ef 00 	lds	r24, 0x00EF
    11f6:	84 ff       	sbrs	r24, 4
    11f8:	2d c0       	rjmp	.+90     	; 0x1254 <can_get_status+0xcc>
            {
	            cmd->ctrl.ide = 1; // extended frame
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    11fe:	e3 ef       	ldi	r30, 0xF3	; 243
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	86 95       	lsr	r24
    1206:	86 95       	lsr	r24
    1208:	86 95       	lsr	r24
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	a2 ef       	ldi	r26, 0xF2	; 242
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	8c 91       	ld	r24, X
    1212:	90 81       	ld	r25, Z
    1214:	86 95       	lsr	r24
    1216:	86 95       	lsr	r24
    1218:	86 95       	lsr	r24
    121a:	20 e2       	ldi	r18, 0x20	; 32
    121c:	92 9f       	mul	r25, r18
    121e:	80 0d       	add	r24, r0
    1220:	11 24       	eor	r1, r1
    1222:	8c 83       	std	Y+4, r24	; 0x04
    1224:	e1 ef       	ldi	r30, 0xF1	; 241
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	9c 91       	ld	r25, X
    122c:	86 95       	lsr	r24
    122e:	86 95       	lsr	r24
    1230:	86 95       	lsr	r24
    1232:	20 e2       	ldi	r18, 0x20	; 32
    1234:	92 9f       	mul	r25, r18
    1236:	80 0d       	add	r24, r0
    1238:	11 24       	eor	r1, r1
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	80 91 f0 00 	lds	r24, 0x00F0
    1240:	90 81       	ld	r25, Z
    1242:	86 95       	lsr	r24
    1244:	86 95       	lsr	r24
    1246:	86 95       	lsr	r24
    1248:	20 e2       	ldi	r18, 0x20	; 32
    124a:	92 9f       	mul	r25, r18
    124c:	80 0d       	add	r24, r0
    124e:	11 24       	eor	r1, r1
    1250:	8a 83       	std	Y+2, r24	; 0x02
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <can_get_status+0xda>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    1254:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    1256:	e3 ef       	ldi	r30, 0xF3	; 243
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	80 91 f2 00 	lds	r24, 0x00F2
    1260:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    1262:	80 e2       	ldi	r24, 0x20	; 32
    1264:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1266:	8f 81       	ldd	r24, Y+7	; 0x07
    1268:	98 85       	ldd	r25, Y+8	; 0x08
    126a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    126e:	ef ee       	ldi	r30, 0xEF	; 239
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8f 73       	andi	r24, 0x3F	; 63
    1276:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    1278:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    127c:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    127e:	75 c0       	rjmp	.+234    	; 0x136a <can_get_status+0x1e2>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    1280:	80 91 f0 00 	lds	r24, 0x00F0
    1284:	82 fb       	bst	r24, 2
    1286:	88 27       	eor	r24, r24
    1288:	80 f9       	bld	r24, 0
    128a:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    128c:	80 91 ef 00 	lds	r24, 0x00EF
    1290:	84 ff       	sbrs	r24, 4
    1292:	2d c0       	rjmp	.+90     	; 0x12ee <can_get_status+0x166>
            {
                cmd->ctrl.ide = 1; // extended frame
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1298:	e3 ef       	ldi	r30, 0xF3	; 243
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	86 95       	lsr	r24
    12a0:	86 95       	lsr	r24
    12a2:	86 95       	lsr	r24
    12a4:	8d 83       	std	Y+5, r24	; 0x05
    12a6:	a2 ef       	ldi	r26, 0xF2	; 242
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	8c 91       	ld	r24, X
    12ac:	90 81       	ld	r25, Z
    12ae:	86 95       	lsr	r24
    12b0:	86 95       	lsr	r24
    12b2:	86 95       	lsr	r24
    12b4:	20 e2       	ldi	r18, 0x20	; 32
    12b6:	92 9f       	mul	r25, r18
    12b8:	80 0d       	add	r24, r0
    12ba:	11 24       	eor	r1, r1
    12bc:	8c 83       	std	Y+4, r24	; 0x04
    12be:	e1 ef       	ldi	r30, 0xF1	; 241
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	9c 91       	ld	r25, X
    12c6:	86 95       	lsr	r24
    12c8:	86 95       	lsr	r24
    12ca:	86 95       	lsr	r24
    12cc:	20 e2       	ldi	r18, 0x20	; 32
    12ce:	92 9f       	mul	r25, r18
    12d0:	80 0d       	add	r24, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	8b 83       	std	Y+3, r24	; 0x03
    12d6:	80 91 f0 00 	lds	r24, 0x00F0
    12da:	90 81       	ld	r25, Z
    12dc:	86 95       	lsr	r24
    12de:	86 95       	lsr	r24
    12e0:	86 95       	lsr	r24
    12e2:	20 e2       	ldi	r18, 0x20	; 32
    12e4:	92 9f       	mul	r25, r18
    12e6:	80 0d       	add	r24, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	8a 83       	std	Y+2, r24	; 0x02
    12ec:	13 c0       	rjmp	.+38     	; 0x1314 <can_get_status+0x18c>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    12ee:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    12f0:	e3 ef       	ldi	r30, 0xF3	; 243
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	82 95       	swap	r24
    12f8:	86 95       	lsr	r24
    12fa:	87 70       	andi	r24, 0x07	; 7
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	80 91 f2 00 	lds	r24, 0x00F2
    1302:	90 81       	ld	r25, Z
    1304:	99 0f       	add	r25, r25
    1306:	99 0f       	add	r25, r25
    1308:	99 0f       	add	r25, r25
    130a:	82 95       	swap	r24
    130c:	86 95       	lsr	r24
    130e:	87 70       	andi	r24, 0x07	; 7
    1310:	89 0f       	add	r24, r25
    1312:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1314:	80 ea       	ldi	r24, 0xA0	; 160
    1316:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1318:	8f 81       	ldd	r24, Y+7	; 0x07
    131a:	98 85       	ldd	r25, Y+8	; 0x08
    131c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1320:	ef ee       	ldi	r30, 0xEF	; 239
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8f 73       	andi	r24, 0x3F	; 63
    1328:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    132a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    132e:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1330:	1c c0       	rjmp	.+56     	; 0x136a <can_get_status+0x1e2>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1332:	80 e4       	ldi	r24, 0x40	; 64
    1334:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1336:	ef ee       	ldi	r30, 0xEF	; 239
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	8f 73       	andi	r24, 0x3F	; 63
    133e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1340:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1344:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1346:	11 c0       	rjmp	.+34     	; 0x136a <can_get_status+0x1e2>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1348:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    134a:	ef ee       	ldi	r30, 0xEF	; 239
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8f 73       	andi	r24, 0x3F	; 63
    1352:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1354:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1358:	82 e0       	ldi	r24, 0x02	; 2
            break;
    135a:	07 c0       	rjmp	.+14     	; 0x136a <can_get_status+0x1e2>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	05 c0       	rjmp	.+10     	; 0x136a <can_get_status+0x1e2>
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	03 c0       	rjmp	.+6      	; 0x136a <can_get_status+0x1e2>
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	01 c0       	rjmp	.+2      	; 0x136a <can_get_status+0x1e2>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1368:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <LED_toggle>:
	LEDPORT |= (1 << LED);
}

void LED_toggle(uint8_t LED) {
	
	if(LED == 7)
    1370:	87 30       	cpi	r24, 0x07	; 7
    1372:	29 f4       	brne	.+10     	; 0x137e <LED_toggle+0xe>
	{
		PORTD ^= 0x01;
    1374:	2b b1       	in	r18, 0x0b	; 11
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	92 27       	eor	r25, r18
    137a:	9b b9       	out	0x0b, r25	; 11
    137c:	07 c0       	rjmp	.+14     	; 0x138c <LED_toggle+0x1c>
	}
	if(LED == 3)
    137e:	83 30       	cpi	r24, 0x03	; 3
    1380:	29 f4       	brne	.+10     	; 0x138c <LED_toggle+0x1c>
	{
		PORTC ^= 0x01;
    1382:	98 b1       	in	r25, 0x08	; 8
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	89 27       	eor	r24, r25
    1388:	88 b9       	out	0x08, r24	; 8
    138a:	08 95       	ret
	}
	else
		LEDPORT ^= (1 << LED);
    138c:	45 b1       	in	r20, 0x05	; 5
    138e:	21 e0       	ldi	r18, 0x01	; 1
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	b9 01       	movw	r22, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <LED_toggle+0x2a>
    1396:	66 0f       	add	r22, r22
    1398:	77 1f       	adc	r23, r23
    139a:	8a 95       	dec	r24
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <LED_toggle+0x26>
    139e:	cb 01       	movw	r24, r22
    13a0:	84 27       	eor	r24, r20
    13a2:	85 b9       	out	0x05, r24	; 5
    13a4:	08 95       	ret

000013a6 <main>:
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    13a6:	e1 e6       	ldi	r30, 0x61	; 97
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 e8       	ldi	r24, 0x80	; 128
    13ac:	80 83       	st	Z, r24
	CLKPR = 0x00;
    13ae:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    13b0:	8e ef       	ldi	r24, 0xFE	; 254
    13b2:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x01;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    13b8:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    13ba:	99 e0       	ldi	r25, 0x09	; 9
    13bc:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    13be:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    13c0:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    13c2:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	
	timer_init();
    13c4:	0e 94 a7 0a 	call	0x154e	; 0x154e <timer_init>
	adc_initialize();
    13c8:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	0e 94 89 02 	call	0x512	; 0x512 <can_init>
	can_init_mobs();
    13d2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <can_init_mobs>
	spi_initialize_master();
    13d6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <spi_initialize_master>
	
	// Enable global interrupts for Timer execution
	sei();
    13da:	78 94       	sei
	
	transceiver_initialize();
    13dc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <transceiver_initialize>
	
	LED_toggle(LED7);
    13e0:	87 e0       	ldi	r24, 0x07	; 7
    13e2:	0e 94 b8 09 	call	0x1370	; 0x1370 <LED_toggle>
    13e6:	00 e1       	ldi	r16, 0x10	; 16
    13e8:	11 e0       	ldi	r17, 0x01	; 1
    13ea:	0f 2e       	mov	r0, r31
    13ec:	f8 e1       	ldi	r31, 0x18	; 24
    13ee:	ef 2e       	mov	r14, r31
    13f0:	f1 e0       	ldi	r31, 0x01	; 1
    13f2:	ff 2e       	mov	r15, r31
    13f4:	f0 2d       	mov	r31, r0
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    13f6:	0f 2e       	mov	r0, r31
    13f8:	fb ea       	ldi	r31, 0xAB	; 171
    13fa:	cf 2e       	mov	r12, r31
    13fc:	f0 2d       	mov	r31, r0
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    13fe:	0f 2e       	mov	r0, r31
    1400:	f0 ef       	ldi	r31, 0xF0	; 240
    1402:	df 2e       	mov	r13, r31
    1404:	f0 2d       	mov	r31, r0
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
			send_arr[3] = 0x55;			// Temperature indicator.
    1406:	c3 e1       	ldi	r28, 0x13	; 19
    1408:	d1 e0       	ldi	r29, 0x01	; 1
    140a:	0f 2e       	mov	r0, r31
    140c:	f5 e5       	ldi	r31, 0x55	; 85
    140e:	9f 2e       	mov	r9, r31
    1410:	f0 2d       	mov	r31, r0
    1412:	a0 2e       	mov	r10, r16
    1414:	b1 2e       	mov	r11, r17
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			send_arr[0] = trans_msg;	// ASCII character which was received.
			send_arr[3] = 0x66;			// Coms indicator.
    1416:	0f 2e       	mov	r0, r31
    1418:	f6 e6       	ldi	r31, 0x66	; 102
    141a:	8f 2e       	mov	r8, r31
    141c:	f0 2d       	mov	r31, r0
	/*		Begin Main Program Loop					*/	
    while(1)
    {
		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 */
		can_check_general();
    141e:	0e 94 70 00 	call	0xe0	; 0xe0 <can_check_general>
		
		/* CHECK FOR HOUSEKEEPING REQUEST */
		can_check_housekeep();
    1422:	0e 94 3a 01 	call	0x274	; 0x274 <can_check_housekeep>

		/*		TRANSCEIVER COMMUNICATION	*/
		trans_check();
    1426:	0e 94 97 0c 	call	0x192e	; 0x192e <trans_check>

		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    142a:	80 91 2c 01 	lds	r24, 0x012C
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	69 f4       	brne	.+26     	; 0x144c <main+0xa6>
    1432:	ea 2d       	mov	r30, r10
    1434:	fb 2d       	mov	r31, r11
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    1436:	c1 92       	st	Z+, r12

		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
    1438:	ee 15       	cp	r30, r14
    143a:	ff 05       	cpc	r31, r15
    143c:	e1 f7       	brne	.-8      	; 0x1436 <main+0x90>
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    143e:	61 e1       	ldi	r22, 0x11	; 17
    1440:	8a 2d       	mov	r24, r10
    1442:	9b 2d       	mov	r25, r11
    1444:	0e 94 cc 01 	call	0x398	; 0x398 <can_send_message>
			send_now = 0;
    1448:	10 92 2c 01 	sts	0x012C, r1
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
    144c:	80 91 35 01 	lds	r24, 0x0135
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	69 f4       	brne	.+26     	; 0x146e <main+0xc8>
    1454:	ea 2d       	mov	r30, r10
    1456:	fb 2d       	mov	r31, r11
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    1458:	d1 92       	st	Z+, r13
			send_now = 0;
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    145a:	ee 15       	cp	r30, r14
    145c:	ff 05       	cpc	r31, r15
    145e:	e1 f7       	brne	.-8      	; 0x1458 <main+0xb2>
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1460:	60 e1       	ldi	r22, 0x10	; 16
    1462:	8a 2d       	mov	r24, r10
    1464:	9b 2d       	mov	r25, r11
    1466:	0e 94 cc 01 	call	0x398	; 0x398 <can_send_message>
			send_hk = 0;
    146a:	10 92 35 01 	sts	0x0135, r1
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
    146e:	80 91 46 01 	lds	r24, 0x0146
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 f4       	brne	.+36     	; 0x149a <main+0xf4>
    1476:	ea 2d       	mov	r30, r10
    1478:	fb 2d       	mov	r31, r11
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    147a:	11 92       	st	Z+, r1
			send_hk = 0;
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    147c:	ee 15       	cp	r30, r14
    147e:	ff 05       	cpc	r31, r15
    1480:	e1 f7       	brne	.-8      	; 0x147a <main+0xd4>
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
    1482:	8a 2d       	mov	r24, r10
    1484:	9b 2d       	mov	r25, r11
    1486:	0e 94 67 00 	call	0xce	; 0xce <adc_read>
			send_arr[3] = 0x55;			// Temperature indicator.
    148a:	98 82       	st	Y, r9
			
			can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    148c:	6a e0       	ldi	r22, 0x0A	; 10
    148e:	8a 2d       	mov	r24, r10
    1490:	9b 2d       	mov	r25, r11
    1492:	0e 94 cc 01 	call	0x398	; 0x398 <can_send_message>
			send_data = 0;
    1496:	10 92 46 01 	sts	0x0146, r1
		}
		
		if (send_coms == 1)		// Send a reply to the message that was received!
    149a:	80 91 51 01 	lds	r24, 0x0151
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <main+0xfe>
    14a2:	bd cf       	rjmp	.-134    	; 0x141e <main+0x78>
    14a4:	f8 01       	movw	r30, r16
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    14a6:	11 92       	st	Z+, r1
			send_data = 0;
		}
		
		if (send_coms == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    14a8:	ee 15       	cp	r30, r14
    14aa:	ff 05       	cpc	r31, r15
    14ac:	e1 f7       	brne	.-8      	; 0x14a6 <main+0x100>
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			send_arr[0] = trans_msg;	// ASCII character which was received.
    14ae:	80 91 52 01 	lds	r24, 0x0152
    14b2:	f8 01       	movw	r30, r16
    14b4:	80 83       	st	Z, r24
			send_arr[3] = 0x66;			// Coms indicator.
    14b6:	88 82       	st	Y, r8
			
			can_send_message(&(send_arr[0]), CAN1_MB5);		//CAN1_MB0 is the data reception MB.
    14b8:	6f e0       	ldi	r22, 0x0F	; 15
    14ba:	c8 01       	movw	r24, r16
    14bc:	0e 94 cc 01 	call	0x398	; 0x398 <can_send_message>
			send_data = 0;
    14c0:	10 92 46 01 	sts	0x0146, r1
    14c4:	ac cf       	rjmp	.-168    	; 0x141e <main+0x78>

000014c6 <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    14c6:	85 b7       	in	r24, 0x35	; 53
    14c8:	8f 77       	andi	r24, 0x7F	; 127
    14ca:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    14cc:	83 e5       	ldi	r24, 0x53	; 83
    14ce:	8c bd       	out	0x2c, r24	; 44
    14d0:	08 95       	ret

000014d2 <spi_transfer>:
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	//SS_set_low();
	*reg_ptr = message;
    14d2:	8e bd       	out	0x2e, r24	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    14d4:	0d b4       	in	r0, 0x2d	; 45
    14d6:	07 fc       	sbrc	r0, 7
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <spi_transfer+0x10>
    14da:	89 ee       	ldi	r24, 0xE9	; 233
    14dc:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    14de:	f1 f7       	brne	.-4      	; 0x14dc <spi_transfer+0xa>
    14e0:	08 95       	ret
			delay_ms(100);
		}
	}	
	//SS_set_high();
	
	delay_cycles(10);
    14e2:	8a e0       	ldi	r24, 0x0A	; 10
    14e4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <delay_cycles>
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    14e8:	8e b5       	in	r24, 0x2e	; 46
		//temp2 = temp2 << (7 - i);		
		//temp += temp2;
	//}
	
	return receive_char;					// Transmission was successful, return the character that was received.
}
    14ea:	08 95       	ret

000014ec <SS_set_high>:
/************************************************************************/

void SS_set_high(void) 
{
	//PORTD |= (1 << 3);
	delay_us(1);
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
    14f4:	08 95       	ret

000014f6 <spi_transfer2>:
	
	return receive_char;					// Transmission was successful, return the character that was received.
}

uint8_t spi_transfer2(uint8_t message)
{
    14f6:	cf 93       	push	r28
	//cmd_str(SRES);
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	PORTD &= (0xF7);
    14f8:	5b 98       	cbi	0x0b, 3	; 11
	//delay_cycles(10);
	*reg_ptr = message;
    14fa:	8e bd       	out	0x2e, r24	; 46
	//delay_cycles(10);
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    14fc:	0d b4       	in	r0, 0x2d	; 45
    14fe:	07 fc       	sbrc	r0, 7
    1500:	06 c0       	rjmp	.+12     	; 0x150e <spi_transfer2+0x18>
    1502:	c9 ee       	ldi	r28, 0xE9	; 233
    1504:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1506:	f1 f7       	brne	.-4      	; 0x1504 <spi_transfer2+0xe>
		{
			SS_set_high();
    1508:	0e 94 76 0a 	call	0x14ec	; 0x14ec <SS_set_high>
			return 0x00;						// Something went wrong, so the function times out.
    150c:	09 c0       	rjmp	.+18     	; 0x1520 <spi_transfer2+0x2a>
		}
	}
	delay_cycles(7);
    150e:	87 e0       	ldi	r24, 0x07	; 7
    1510:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <delay_cycles>
	SS_set_high();
    1514:	0e 94 76 0a 	call	0x14ec	; 0x14ec <SS_set_high>
	
	delay_cycles(10);
    1518:	8a e0       	ldi	r24, 0x0A	; 10
    151a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <delay_cycles>
		
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    151e:	ce b5       	in	r28, 0x2e	; 46
		
	return receive_char;					// Transmission was successful, return the character that was received.
}
    1520:	8c 2f       	mov	r24, r28
    1522:	cf 91       	pop	r28
    1524:	08 95       	ret

00001526 <SS_set_low>:
/************************************************************************/

void SS_set_low(void)
{
	//PORTD &= (0xF7);
	delay_us(1);
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
    152e:	08 95       	ret

00001530 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	8f 93       	push	r24
	CTC_flag = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	80 93 53 01 	sts	0x0153, r24
}
    1542:	8f 91       	pop	r24
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    154e:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    1552:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    1556:	8a e0       	ldi	r24, 0x0A	; 10
    1558:	80 93 81 00 	sts	0x0081, r24
    155c:	08 95       	ret

0000155e <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    155e:	10 92 53 01 	sts	0x0153, r1
	TCNT1 = 0x0000; //Clear timer
    1562:	10 92 85 00 	sts	0x0085, r1
    1566:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    156a:	90 93 89 00 	sts	0x0089, r25
    156e:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    1578:	80 91 53 01 	lds	r24, 0x0153
    157c:	88 23       	and	r24, r24
    157e:	e1 f3       	breq	.-8      	; 0x1578 <delay_us+0x1a>
}
    1580:	08 95       	ret

00001582 <delay_ms>:

void delay_ms(uint16_t ms) {
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	51 f0       	breq	.+20     	; 0x15a4 <delay_ms+0x22>
    1590:	c0 e0       	ldi	r28, 0x00	; 0
    1592:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    1594:	88 ee       	ldi	r24, 0xE8	; 232
    1596:	93 e0       	ldi	r25, 0x03	; 3
    1598:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    159c:	21 96       	adiw	r28, 0x01	; 1
    159e:	c0 17       	cp	r28, r16
    15a0:	d1 07       	cpc	r29, r17
    15a2:	c1 f7       	brne	.-16     	; 0x1594 <delay_ms+0x12>
		delay_us(1000);
	}
}
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	08 95       	ret

000015ae <delay_cycles>:

void delay_cycles(uint8_t cycles)	// @ 8 MHz, 1 cycle = 125 ns
{
	uint8_t i;
	
	for (i = 0; i < cycles; i++)
    15ae:	88 23       	and	r24, r24
    15b0:	21 f0       	breq	.+8      	; 0x15ba <delay_cycles+0xc>
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9f 5f       	subi	r25, 0xFF	; 255
    15b6:	98 13       	cpse	r25, r24
    15b8:	fd cf       	rjmp	.-6      	; 0x15b4 <delay_cycles+0x6>
    15ba:	08 95       	ret

000015bc <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
    15bc:	cf 93       	push	r28
    15be:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
    15c0:	0e 94 93 0a 	call	0x1526	; 0x1526 <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	8c 0f       	add	r24, r28
    15c8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	delay_us(1);
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	msg = spi_transfer(0x00);
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
    15da:	c8 2f       	mov	r28, r24

	SS_set_high();
    15dc:	0e 94 76 0a 	call	0x14ec	; 0x14ec <SS_set_high>
	
	delay_ms(1);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
	
	return msg;
}
    15e8:	8c 2f       	mov	r24, r28
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	d8 2f       	mov	r29, r24
    15f4:	c6 2f       	mov	r28, r22
	uint8_t msg, check, i;
	
	SS_set_low();
    15f6:	0e 94 93 0a 	call	0x1526	; 0x1526 <SS_set_low>
	msg = spi_transfer(addr);		// Send the desired address
    15fa:	8d 2f       	mov	r24, r29
    15fc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	delay_us(1);
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    1608:	8c 2f       	mov	r24, r28
    160a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	SS_set_high();
    160e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <SS_set_high>
	
	delay_ms(1);
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>

	return;
}
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
    1620:	cf 93       	push	r28
    1622:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
    1624:	0e 94 93 0a 	call	0x1526	; 0x1526 <SS_set_low>
	msg = spi_transfer(msg);
    1628:	8f ea       	ldi	r24, 0xAF	; 175
    162a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	delay_us(1);
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1636:	8c 2f       	mov	r24, r28
    1638:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	delay_us(1);
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	msg = spi_transfer(0x00);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
    164a:	c8 2f       	mov	r28, r24
	SS_set_high();
    164c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <SS_set_high>
	delay_ms(1);
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
	return msg;
}
    1658:	8c 2f       	mov	r24, r28
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr)
{
    165e:	cf 93       	push	r28
	uint8_t msg;
	
	msg = spi_transfer2(addr);
    1660:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <spi_transfer2>
    1664:	c8 2f       	mov	r28, r24
	
	delay_us(1);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	return msg;
}
    166e:	8c 2f       	mov	r24, r28
    1670:	cf 91       	pop	r28
    1672:	08 95       	ret

00001674 <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	d8 2f       	mov	r29, r24
    167a:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    167c:	8d e3       	ldi	r24, 0x3D	; 61
    167e:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
	uint8_t msg, i, check;
	msg = 0b00101111;
	
	SS_set_low();
    1682:	0e 94 93 0a 	call	0x1526	; 0x1526 <SS_set_low>
	spi_transfer(msg);
    1686:	8f e2       	ldi	r24, 0x2F	; 47
    1688:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	delay_us(1);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1694:	8d 2f       	mov	r24, r29
    1696:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	delay_us(1);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    16a2:	8c 2f       	mov	r24, r28
    16a4:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	SS_set_high();
    16a8:	0e 94 76 0a 	call	0x14ec	; 0x14ec <SS_set_high>
	delay_ms(1);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>

	return;
}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <get_status>:
/*		Note: 000 = IDLE, 001 = RX, 110 = RX buffer overflow.			*/
/*																		*/
/************************************************************************/

void get_status(uint8_t *CHIP_RDYn, uint8_t *state)
{
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	eb 01       	movw	r28, r22
	uint8_t msg;

	msg = cmd_str(SNOP);
    16c0:	8d e3       	ldi	r24, 0x3D	; 61
    16c2:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
	
	msg = msg & ~0x80;
    16c6:	8f 77       	andi	r24, 0x7F	; 127
	msg = msg >> 4;
    16c8:	82 95       	swap	r24
    16ca:	8f 70       	andi	r24, 0x0F	; 15
	*state = msg;
    16cc:	88 83       	st	Y, r24
	
	return;
}
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <dir_FIFO_read>:
/*	on the CC1120's FIFO and return the byte which was located there.	*/
/*																		*/
/************************************************************************/

uint8_t dir_FIFO_read(uint8_t addr)
{
    16d4:	cf 93       	push	r28
    16d6:	c8 2f       	mov	r28, r24
	cmd_str(SNOP);
    16d8:	8d e3       	ldi	r24, 0x3D	; 61
    16da:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
	uint8_t msg;
	msg = 0b10111110;
	
	SS_set_low();
    16de:	0e 94 93 0a 	call	0x1526	; 0x1526 <SS_set_low>
	msg = spi_transfer(msg);
    16e2:	8e eb       	ldi	r24, 0xBE	; 190
    16e4:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	delay_us(1);
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    16f0:	8c 2f       	mov	r24, r28
    16f2:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
	delay_us(1);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 af 0a 	call	0x155e	; 0x155e <delay_us>
	msg = spi_transfer(0x00);
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <spi_transfer>
    1704:	c8 2f       	mov	r28, r24
	SS_set_high();
    1706:	0e 94 76 0a 	call	0x14ec	; 0x14ec <SS_set_high>
	delay_ms(1);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
	return msg;
}
    1712:	8c 2f       	mov	r24, r28
    1714:	cf 91       	pop	r28
    1716:	08 95       	ret

00001718 <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	c8 2f       	mov	r28, r24
    1720:	d6 2f       	mov	r29, r22
    1722:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
    1724:	0e 94 de 0a 	call	0x15bc	; 0x15bc <reg_read>
	if(!data)
    1728:	11 11       	cpse	r17, r1
    172a:	0c c0       	rjmp	.+24     	; 0x1744 <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
    172c:	e1 e0       	ldi	r30, 0x01	; 1
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	af 01       	movw	r20, r30
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <reg_write_bit+0x20>
    1734:	44 0f       	add	r20, r20
    1736:	55 1f       	adc	r21, r21
    1738:	da 95       	dec	r29
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <reg_write_bit+0x1c>
    173c:	40 95       	com	r20
		msg = temp & msg;
    173e:	68 2f       	mov	r22, r24
    1740:	64 23       	and	r22, r20
    1742:	0a c0       	rjmp	.+20     	; 0x1758 <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
    1744:	41 e0       	ldi	r20, 0x01	; 1
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	9a 01       	movw	r18, r20
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <reg_write_bit+0x38>
    174c:	22 0f       	add	r18, r18
    174e:	33 1f       	adc	r19, r19
    1750:	da 95       	dec	r29
    1752:	e2 f7       	brpl	.-8      	; 0x174c <reg_write_bit+0x34>
		msg = temp | msg;
    1754:	68 2f       	mov	r22, r24
    1756:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
    1758:	8c 2f       	mov	r24, r28
    175a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	return;
}
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	08 95       	ret

00001766 <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	c8 2f       	mov	r28, r24
    176e:	d6 2f       	mov	r29, r22
    1770:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
    1772:	0e 94 10 0b 	call	0x1620	; 0x1620 <reg_read2F>
	if(!data)
    1776:	11 11       	cpse	r17, r1
    1778:	0c c0       	rjmp	.+24     	; 0x1792 <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
    177a:	e1 e0       	ldi	r30, 0x01	; 1
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	af 01       	movw	r20, r30
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <reg_write_bit2F+0x20>
    1782:	44 0f       	add	r20, r20
    1784:	55 1f       	adc	r21, r21
    1786:	da 95       	dec	r29
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <reg_write_bit2F+0x1c>
    178a:	40 95       	com	r20
		msg = temp & msg;
    178c:	68 2f       	mov	r22, r24
    178e:	64 23       	and	r22, r20
    1790:	0a c0       	rjmp	.+20     	; 0x17a6 <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	9a 01       	movw	r18, r20
    1798:	02 c0       	rjmp	.+4      	; 0x179e <reg_write_bit2F+0x38>
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	da 95       	dec	r29
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <reg_write_bit2F+0x34>
		msg = temp | msg;
    17a2:	68 2f       	mov	r22, r24
    17a4:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
    17a6:	8c 2f       	mov	r24, r28
    17a8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	return;
}
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	08 95       	ret

000017b4 <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    17b4:	0e 94 93 0a 	call	0x1526	; 0x1526 <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	  
	//RESET 
    cmd_str(SRES);             //SRES                  reset chip
    17b8:	80 e3       	ldi	r24, 0x30	; 48
    17ba:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
      
    //Reset RX FIFO
    cmd_str(SFRX);             //SFRX                  flush RX FIFO
    17be:	8a e3       	ldi	r24, 0x3A	; 58
    17c0:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
      
    //Reset TX FIFO
    cmd_str(SFTX);             //SFTX                  flush TX FIFO
    17c4:	8b e3       	ldi	r24, 0x3B	; 59
    17c6:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>

	//**************SET UP RX****************//
  
	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	82 e1       	ldi	r24, 0x12	; 18
    17ce:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    17d2:	6f e5       	ldi	r22, 0x5F	; 95
    17d4:	83 e1       	ldi	r24, 0x13	; 19
    17d6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    17da:	60 e4       	ldi	r22, 0x40	; 64
    17dc:	86 e1       	ldi	r24, 0x16	; 22
    17de:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    17e2:	6e e0       	ldi	r22, 0x0E	; 14
    17e4:	87 e1       	ldi	r24, 0x17	; 23
    17e6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    17ea:	63 e0       	ldi	r22, 0x03	; 3
    17ec:	89 e1       	ldi	r24, 0x19	; 25
    17ee:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    17f2:	63 e3       	ldi	r22, 0x33	; 51
    17f4:	8b e1       	ldi	r24, 0x1B	; 27
    17f6:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    17fa:	67 e1       	ldi	r22, 0x17	; 23
    17fc:	8d e1       	ldi	r24, 0x1D	; 29
    17fe:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    1802:	60 e5       	ldi	r22, 0x50	; 80
    1804:	8f e1       	ldi	r24, 0x1F	; 31
    1806:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
//  reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
  
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    180a:	64 e1       	ldi	r22, 0x14	; 20
    180c:	81 e2       	ldi	r24, 0x21	; 33
    180e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    1812:	6c ea       	ldi	r22, 0xAC	; 172
    1814:	82 e2       	ldi	r24, 0x22	; 34
    1816:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	//reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
	//reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
	//reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
  
	cmd_str(SNOP);
    181a:	8d e3       	ldi	r24, 0x3D	; 61
    181c:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
	//For test purposes only, (2nd block, deleted first one) use values from SmartRF for some bits
	reg_write(0x08, 0x0B);            //*Changed on line 152
    1820:	6b e0       	ldi	r22, 0x0B	; 11
    1822:	88 e0       	ldi	r24, 0x08	; 8
    1824:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x13, 0x0D);            //
    1828:	6d e0       	ldi	r22, 0x0D	; 13
    182a:	83 e1       	ldi	r24, 0x13	; 19
    182c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x26, 0x04);            //*Changed on line 144
    1830:	64 e0       	ldi	r22, 0x04	; 4
    1832:	86 e2       	ldi	r24, 0x26	; 38
    1834:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
  
	//High performance RX
	reg_write(0x08, 0x0B);            //
    1838:	6b e0       	ldi	r22, 0x0B	; 11
    183a:	88 e0       	ldi	r24, 0x08	; 8
    183c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x0C, 0x1C);            //
    1840:	6c e1       	ldi	r22, 0x1C	; 28
    1842:	8c e0       	ldi	r24, 0x0C	; 12
    1844:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x10, 0x00);            //
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	80 e1       	ldi	r24, 0x10	; 16
    184c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x11, 0x04);            //
    1850:	64 e0       	ldi	r22, 0x04	; 4
    1852:	81 e1       	ldi	r24, 0x11	; 17
    1854:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x13, 0x05);            //
    1858:	65 e0       	ldi	r22, 0x05	; 5
    185a:	83 e1       	ldi	r24, 0x13	; 19
    185c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x1C, 0xA9);            //
    1860:	69 ea       	ldi	r22, 0xA9	; 169
    1862:	8c e1       	ldi	r24, 0x1C	; 28
    1864:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x1D, 0xCF);            //
    1868:	6f ec       	ldi	r22, 0xCF	; 207
    186a:	8d e1       	ldi	r24, 0x1D	; 29
    186c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x1E, 0x00);            //
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	8e e1       	ldi	r24, 0x1E	; 30
    1874:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x20, 0x03);            //
    1878:	63 e0       	ldi	r22, 0x03	; 3
    187a:	80 e2       	ldi	r24, 0x20	; 32
    187c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x2E, 0x00);            //
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	8e e2       	ldi	r24, 0x2E	; 46
    1884:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write2F(0x00, 0x00);          //
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>

	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    1890:	68 e4       	ldi	r22, 0x48	; 72
    1892:	8a e0       	ldi	r24, 0x0A	; 10
    1894:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    1898:	65 e0       	ldi	r22, 0x05	; 5
    189a:	8b e0       	ldi	r24, 0x0B	; 11
    189c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: 0x14           set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector enabled
    18a0:	64 e0       	ldi	r22, 0x04	; 4
    18a2:	81 e2       	ldi	r24, 0x21	; 33
    18a4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
  
	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	8d e0       	ldi	r24, 0x0D	; 13
    18ac:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	65 e0       	ldi	r22, 0x05	; 5
    18b4:	8e e0       	ldi	r24, 0x0E	; 14
    18b6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <reg_write_bit>
  
	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	67 e0       	ldi	r22, 0x07	; 7
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	0e 94 b3 0b 	call	0x1766	; 0x1766 <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	66 e0       	ldi	r22, 0x06	; 6
    18c8:	82 e0       	ldi	r24, 0x02	; 2
    18ca:	0e 94 b3 0b 	call	0x1766	; 0x1766 <reg_write_bit2F>
  
	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	66 e0       	ldi	r22, 0x06	; 6
    18d2:	88 e0       	ldi	r24, 0x08	; 8
    18d4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <reg_write_bit>
	reg_write(0x09, 0x17);            //SYNC_CFG0: 0x17        32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    18d8:	67 e1       	ldi	r22, 0x17	; 23
    18da:	89 e0       	ldi	r24, 0x09	; 9
    18dc:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
  
	//set packets
	reg_write(0x26, 0x00);            //PKT_CFG2: 0x00         set FIFO mode
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	86 e2       	ldi	r24, 0x26	; 38
    18e4:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
	reg_write(0x2E, 0xFF);            //PKT_LEN: 0xFF          set packet length to 0xFF (max)  
    18e8:	6f ef       	ldi	r22, 0xFF	; 255
    18ea:	8e e2       	ldi	r24, 0x2E	; 46
    18ec:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <reg_write>
    
	//Frequency setting
	cmd_str(SNOP);
    18f0:	8d e3       	ldi	r24, 0x3D	; 61
    18f2:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    18f6:	6c e6       	ldi	r22, 0x6C	; 108
    18f8:	8c e0       	ldi	r24, 0x0C	; 12
    18fa:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    18fe:	60 e8       	ldi	r22, 0x80	; 128
    1900:	8d e0       	ldi	r24, 0x0D	; 13
    1902:	0e 94 3a 0b 	call	0x1674	; 0x1674 <reg_write2F>

	//set up GPIO1 to 17
	//reg_write(0x00, 17);
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    1906:	83 e3       	ldi	r24, 0x33	; 51
    1908:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
	delay_ms(250);
    190c:	8a ef       	ldi	r24, 0xFA	; 250
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>

	cmd_str(SAFC);					 // Automatic frequency control
    1914:	87 e3       	ldi	r24, 0x37	; 55
    1916:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
	delay_ms(250);
    191a:	8a ef       	ldi	r24, 0xFA	; 250
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <delay_ms>
	
	//reg_write2F(0xD2, 0x00);
	//reg_write2F(0xD4, 0xFF);
	
	send_coms = 0;
    1922:	10 92 51 01 	sts	0x0151, r1

	cmd_str(SRX);                    // Put in RX mode
    1926:	84 e3       	ldi	r24, 0x34	; 52
    1928:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
    192c:	08 95       	ret

0000192e <trans_check>:
	reg_write2F(reg, msg);
	return;
}

void trans_check(void)
{
    192e:	1f 93       	push	r17
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	00 d0       	rcall	.+0      	; 0x1936 <trans_check+0x8>
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
	uint8_t msg = 0, CHIP_RDYn, state;
	
	get_status(&CHIP_RDYn, &state);
    193a:	be 01       	movw	r22, r28
    193c:	6e 5f       	subi	r22, 0xFE	; 254
    193e:	7f 4f       	sbci	r23, 0xFF	; 255
    1940:	ce 01       	movw	r24, r28
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <get_status>

	if(state == 0b110 || state == 0b111)
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	86 50       	subi	r24, 0x06	; 6
    194c:	82 30       	cpi	r24, 0x02	; 2
    194e:	a8 f4       	brcc	.+42     	; 0x197a <trans_check+0x4c>
	{
		cmd_str(SIDLE);
    1950:	86 e3       	ldi	r24, 0x36	; 54
    1952:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
		//LED_toggle(LED3);
		//delay_ms(100);
		
		// Here we would send our message to the OBC.
		
		cmd_str(SNOP);
    1956:	8d e3       	ldi	r24, 0x3D	; 61
    1958:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
		msg = dir_FIFO_read(0x80);
    195c:	80 e8       	ldi	r24, 0x80	; 128
    195e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <dir_FIFO_read>
    1962:	18 2f       	mov	r17, r24
			//delay_ms(100);
			//LED_toggle(LED6);
			//delay_ms(100);
		//}
		
		cmd_str(SFRX);
    1964:	8a e3       	ldi	r24, 0x3A	; 58
    1966:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
		
		trans_msg = msg;	// Global variable used in main.c
    196a:	10 93 52 01 	sts	0x0152, r17
		send_coms = 1;		// Indicates that in main() we will send trans_msg to the OBC via CAN.
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 51 01 	sts	0x0151, r24
		//reg_write2F(0xD2, 0x00);
		//reg_write2F(0xD4, 0xFF);
		
		//cmd_str(SFTX);
		
		cmd_str(SRX);
    1974:	84 e3       	ldi	r24, 0x34	; 52
    1976:	0e 94 2f 0b 	call	0x165e	; 0x165e <cmd_str>
	}
	return;
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	08 95       	ret

00001986 <__tablejump2__>:
    1986:	ee 0f       	add	r30, r30
    1988:	ff 1f       	adc	r31, r31

0000198a <__tablejump__>:
    198a:	05 90       	lpm	r0, Z+
    198c:	f4 91       	lpm	r31, Z
    198e:	e0 2d       	mov	r30, r0
    1990:	09 94       	ijmp

00001992 <_exit>:
    1992:	f8 94       	cli

00001994 <__stop_program>:
    1994:	ff cf       	rjmp	.-2      	; 0x1994 <__stop_program>
