
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fa8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000d2  00800100  00800100  0000201c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000290  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000039e1  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001037  00000000  00000000  00005cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000010ea  00000000  00000000  00006cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000005cc  00000000  00000000  00007de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000009a5  00000000  00000000  000083ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000023cd  00000000  00000000  00008d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000230  00000000  00000000  0000b11e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__vector_12>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	b0 00       	.word	0x00b0	; ????
      7e:	b4 00       	.word	0x00b4	; ????
      80:	c2 00       	.word	0x00c2	; ????
      82:	0b 01       	movw	r0, r22
      84:	c6 00       	.word	0x00c6	; ????
      86:	0b 01       	movw	r0, r22
      88:	d4 00       	.word	0x00d4	; ????
      8a:	0b 01       	movw	r0, r22
      8c:	e2 00       	.word	0x00e2	; ????
      8e:	f0 00       	.word	0x00f0	; ????
      90:	fe 00       	.word	0x00fe	; ????
      92:	0b 04       	cpc	r0, r11
      94:	9d 04       	cpc	r9, r13
      96:	27 05       	cpc	r18, r7
      98:	9b 05       	cpc	r25, r11
      9a:	db 05       	cpc	r29, r11
      9c:	57 06       	cpc	r5, r23
      9e:	d4 06       	cpc	r13, r20
      a0:	71 07       	cpc	r23, r17
      a2:	17 08       	sbc	r1, r7
      a4:	05 04       	cpc	r0, r5
      a6:	20 09       	sbc	r18, r0

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d8 e0       	ldi	r29, 0x08	; 8
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_clear_bss>:
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a2 3d       	cpi	r26, 0xD2	; 210
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <main>
      c8:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      d0:	82 e0       	ldi	r24, 0x02	; 2
      d2:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      d6:	82 ee       	ldi	r24, 0xE2	; 226
      d8:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      dc:	80 ea       	ldi	r24, 0xA0	; 160
      de:	80 93 7b 00 	sts	0x007B, r24
      e2:	08 95       	ret

000000e4 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
      e4:	21 e3       	ldi	r18, 0x31	; 49
      e6:	31 e0       	ldi	r19, 0x01	; 1
      e8:	30 93 5c 01 	sts	0x015C, r19
      ec:	20 93 5b 01 	sts	0x015B, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      f0:	10 92 5f 01 	sts	0x015F, r1
	message.id.std = id;  // populate ID field with ID Tag
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	70 93 57 01 	sts	0x0157, r23
      fa:	60 93 56 01 	sts	0x0156, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
      fe:	22 e0       	ldi	r18, 0x02	; 2
     100:	20 93 55 01 	sts	0x0155, r18
	message.dlc = 8;			 // Max length of a CAN message.
     104:	28 e0       	ldi	r18, 0x08	; 8
     106:	20 93 5a 01 	sts	0x015A, r18
	mob_number = 4;
     10a:	24 e0       	ldi	r18, 0x04	; 4
     10c:	20 93 b4 01 	sts	0x01B4, r18
     110:	dc 01       	movw	r26, r24
     112:	e1 e3       	ldi	r30, 0x31	; 49
     114:	f1 e0       	ldi	r31, 0x01	; 1
     116:	89 e3       	ldi	r24, 0x39	; 57
     118:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     11a:	2d 91       	ld	r18, X+
     11c:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     11e:	e8 17       	cp	r30, r24
     120:	f9 07       	cpc	r31, r25
     122:	d9 f7       	brne	.-10     	; 0x11a <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     124:	60 91 b4 01 	lds	r22, 0x01B4
     128:	84 e5       	ldi	r24, 0x54	; 84
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     130:	81 11       	cpse	r24, r1
     132:	f8 cf       	rjmp	.-16     	; 0x124 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     134:	60 91 b4 01 	lds	r22, 0x01B4
     138:	84 e5       	ldi	r24, 0x54	; 84
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 ed 09 	call	0x13da	; 0x13da <can_get_status>
     140:	81 30       	cpi	r24, 0x01	; 1
     142:	c1 f3       	breq	.-16     	; 0x134 <can_send_message+0x50>

	return;
}
     144:	08 95       	ret

00000146 <decode_command>:

void decode_command(uint8_t* command_array)
{		
	uint8_t i, command  = *(command_array + 5);

	switch(command)
     146:	fc 01       	movw	r30, r24
     148:	45 81       	ldd	r20, Z+5	; 0x05
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	fa 01       	movw	r30, r20
     14e:	31 97       	sbiw	r30, 0x01	; 1
     150:	eb 30       	cpi	r30, 0x0B	; 11
     152:	f1 05       	cpc	r31, r1
     154:	08 f0       	brcs	.+2      	; 0x158 <decode_command+0x12>
     156:	5f c0       	rjmp	.+190    	; 0x216 <decode_command+0xd0>
     158:	e2 5c       	subi	r30, 0xC2	; 194
     15a:	ff 4f       	sbci	r31, 0xFF	; 255
     15c:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__tablejump2__>
		case REQ_RESPONSE :
			if(SELF_ID != 1)
			{
				LED_toggle(LED3);
			}
			send_now = 1;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 70 01 	sts	0x0170, r24
			return;
     166:	08 95       	ret
		case REQ_DATA :
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
			send_data = 1;
     168:	21 e0       	ldi	r18, 0x01	; 1
     16a:	20 93 a2 01 	sts	0x01A2, r18
     16e:	dc 01       	movw	r26, r24
     170:	e0 e6       	ldi	r30, 0x60	; 96
     172:	f1 e0       	ldi	r31, 0x01	; 1
     174:	88 e6       	ldi	r24, 0x68	; 104
     176:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     178:	2d 91       	ld	r18, X+
     17a:	21 93       	st	Z+, r18
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
			send_data = 1;
			for (i = 0; i < 8; i ++)
     17c:	e8 17       	cp	r30, r24
     17e:	f9 07       	cpc	r31, r25
     180:	d9 f7       	brne	.-10     	; 0x178 <decode_command+0x32>
     182:	08 95       	ret
		case REQ_HK :
			if(SELF_ID != 1)
			{
				LED_toggle(LED2);
			}
			send_hk = 1;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	80 93 82 01 	sts	0x0182, r24
			return;
     18a:	08 95       	ret
		case REQ_READ:
			read_response = 1;
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	20 93 79 01 	sts	0x0179, r18
     192:	dc 01       	movw	r26, r24
     194:	e9 ec       	ldi	r30, 0xC9	; 201
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	81 ed       	ldi	r24, 0xD1	; 209
     19a:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     19c:	2d 91       	ld	r18, X+
     19e:	21 93       	st	Z+, r18
			}
			send_hk = 1;
			return;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1a0:	e8 17       	cp	r30, r24
     1a2:	f9 07       	cpc	r31, r25
     1a4:	d9 f7       	brne	.-10     	; 0x19c <decode_command+0x56>
     1a6:	08 95       	ret
			{
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	20 93 47 01 	sts	0x0147, r18
     1ae:	dc 01       	movw	r26, r24
     1b0:	e0 e0       	ldi	r30, 0x00	; 0
     1b2:	f1 e0       	ldi	r31, 0x01	; 1
     1b4:	88 e0       	ldi	r24, 0x08	; 8
     1b6:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     1b8:	2d 91       	ld	r18, X+
     1ba:	21 93       	st	Z+, r18
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     1bc:	e8 17       	cp	r30, r24
     1be:	f9 07       	cpc	r31, r25
     1c0:	d9 f7       	brne	.-10     	; 0x1b8 <decode_command+0x72>
     1c2:	08 95       	ret
			{
				write_arr[i] = *(command_array + i);
			}
			return;
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	20 93 a1 01 	sts	0x01A1, r18
     1ca:	dc 01       	movw	r26, r24
     1cc:	e8 e4       	ldi	r30, 0x48	; 72
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	80 e5       	ldi	r24, 0x50	; 80
     1d2:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				sensh_arr[i] = *(command_array + i);
     1d4:	2d 91       	ld	r18, X+
     1d6:	21 93       	st	Z+, r18
				write_arr[i] = *(command_array + i);
			}
			return;
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
			for (i = 0; i < 8; i ++)
     1d8:	e8 17       	cp	r30, r24
     1da:	f9 07       	cpc	r31, r25
     1dc:	d9 f7       	brne	.-10     	; 0x1d4 <decode_command+0x8e>
     1de:	08 95       	ret
			{
				sensh_arr[i] = *(command_array + i);
			}
			return;
		case SET_SENSOR_LOW:
			set_sens_l = 1;
     1e0:	21 e0       	ldi	r18, 0x01	; 1
     1e2:	20 93 a3 01 	sts	0x01A3, r18
     1e6:	dc 01       	movw	r26, r24
     1e8:	ec eb       	ldi	r30, 0xBC	; 188
     1ea:	f1 e0       	ldi	r31, 0x01	; 1
     1ec:	84 ec       	ldi	r24, 0xC4	; 196
     1ee:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				sensl_arr[i] = *(command_array + i);
     1f0:	2d 91       	ld	r18, X+
     1f2:	21 93       	st	Z+, r18
				sensh_arr[i] = *(command_array + i);
			}
			return;
		case SET_SENSOR_LOW:
			set_sens_l = 1;
			for (i = 0; i < 8; i ++)
     1f4:	e8 17       	cp	r30, r24
     1f6:	f9 07       	cpc	r31, r25
     1f8:	d9 f7       	brne	.-10     	; 0x1f0 <decode_command+0xaa>
     1fa:	08 95       	ret
			{
				sensl_arr[i] = *(command_array + i);
			}
			return;
		case SET_VAR:
			set_var = 1;
     1fc:	21 e0       	ldi	r18, 0x01	; 1
     1fe:	20 93 23 01 	sts	0x0123, r18
     202:	dc 01       	movw	r26, r24
     204:	eb e3       	ldi	r30, 0x3B	; 59
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	83 e4       	ldi	r24, 0x43	; 67
     20a:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				setv_arr[i] = *(command_array + i);
     20c:	2d 91       	ld	r18, X+
     20e:	21 93       	st	Z+, r18
				sensl_arr[i] = *(command_array + i);
			}
			return;
		case SET_VAR:
			set_var = 1;
			for (i = 0; i < 8; i ++)
     210:	e8 17       	cp	r30, r24
     212:	f9 07       	cpc	r31, r25
     214:	d9 f7       	brne	.-10     	; 0x20c <decode_command+0xc6>
     216:	08 95       	ret

00000218 <set_up_msg>:
	}
}

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     218:	10 92 5f 01 	sts	0x015F, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     21c:	95 e0       	ldi	r25, 0x05	; 5
     21e:	90 93 55 01 	sts	0x0155, r25
	message.dlc = 8;			 // Max length of a CAN message.
     222:	98 e0       	ldi	r25, 0x08	; 8
     224:	90 93 5a 01 	sts	0x015A, r25
	mob_number = mailbox;
     228:	80 93 b4 01 	sts	0x01B4, r24
	
	if(mailbox == 0)
     22c:	81 11       	cpse	r24, r1
     22e:	0e c0       	rjmp	.+28     	; 0x24c <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     230:	8a e7       	ldi	r24, 0x7A	; 122
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	90 93 5c 01 	sts	0x015C, r25
     238:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     23c:	80 91 91 01 	lds	r24, 0x0191
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	90 93 57 01 	sts	0x0157, r25
     246:	80 93 56 01 	sts	0x0156, r24
		return;
     24a:	08 95       	ret
	}
	if(mailbox == 1)
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	71 f4       	brne	.+28     	; 0x26c <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     250:	83 e1       	ldi	r24, 0x13	; 19
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	90 93 5c 01 	sts	0x015C, r25
     258:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = id_array[1];
     25c:	80 91 92 01 	lds	r24, 0x0192
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	90 93 57 01 	sts	0x0157, r25
     266:	80 93 56 01 	sts	0x0156, r24
		return;
     26a:	08 95       	ret
	}
	if(mailbox == 2)
     26c:	82 30       	cpi	r24, 0x02	; 2
     26e:	71 f4       	brne	.+28     	; 0x28c <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     270:	8b e1       	ldi	r24, 0x1B	; 27
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	90 93 5c 01 	sts	0x015C, r25
     278:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = id_array[2];
     27c:	80 91 93 01 	lds	r24, 0x0193
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	90 93 57 01 	sts	0x0157, r25
     286:	80 93 56 01 	sts	0x0156, r24
		return;
     28a:	08 95       	ret
	}
	if(mailbox == 3)
     28c:	83 30       	cpi	r24, 0x03	; 3
     28e:	71 f4       	brne	.+28     	; 0x2ac <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     290:	89 e9       	ldi	r24, 0x99	; 153
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	90 93 5c 01 	sts	0x015C, r25
     298:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = id_array[3];
     29c:	80 91 94 01 	lds	r24, 0x0194
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	90 93 57 01 	sts	0x0157, r25
     2a6:	80 93 56 01 	sts	0x0156, r24
		return;
     2aa:	08 95       	ret
	}
	if(mailbox == 5)
     2ac:	85 30       	cpi	r24, 0x05	; 5
     2ae:	69 f4       	brne	.+26     	; 0x2ca <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     2b0:	88 ea       	ldi	r24, 0xA8	; 168
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	90 93 5c 01 	sts	0x015C, r25
     2b8:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = id_array[5];
     2bc:	80 91 96 01 	lds	r24, 0x0196
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	90 93 57 01 	sts	0x0157, r25
     2c6:	80 93 56 01 	sts	0x0156, r24
     2ca:	08 95       	ret

000002cc <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     2cc:	81 11       	cpse	r24, r1
     2ce:	20 c0       	rjmp	.+64     	; 0x310 <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2d0:	10 92 5f 01 	sts	0x015F, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2d4:	85 e0       	ldi	r24, 0x05	; 5
     2d6:	80 93 55 01 	sts	0x0155, r24
		message.dlc = 8;			 // Max length of a CAN message.
     2da:	88 e0       	ldi	r24, 0x08	; 8
     2dc:	80 93 5a 01 	sts	0x015A, r24
		mob_number = mailbox;
     2e0:	10 92 b4 01 	sts	0x01B4, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     2e4:	8a e7       	ldi	r24, 0x7A	; 122
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	90 93 5c 01 	sts	0x015C, r25
     2ec:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     2f0:	80 91 91 01 	lds	r24, 0x0191
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	90 93 57 01 	sts	0x0157, r25
     2fa:	80 93 56 01 	sts	0x0156, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     2fe:	60 91 b4 01 	lds	r22, 0x01B4
     302:	84 e5       	ldi	r24, 0x54	; 84
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     30a:	81 11       	cpse	r24, r1
     30c:	f8 cf       	rjmp	.-16     	; 0x2fe <clean_up_msg+0x32>
     30e:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	01 f5       	brne	.+64     	; 0x354 <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     314:	10 92 5f 01 	sts	0x015F, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     318:	85 e0       	ldi	r24, 0x05	; 5
     31a:	80 93 55 01 	sts	0x0155, r24
		message.dlc = 8;			 // Max length of a CAN message.
     31e:	88 e0       	ldi	r24, 0x08	; 8
     320:	80 93 5a 01 	sts	0x015A, r24
		mob_number = mailbox;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	80 93 b4 01 	sts	0x01B4, r24
		message.pt_data = &data1[0];
     32a:	83 e1       	ldi	r24, 0x13	; 19
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	90 93 5c 01 	sts	0x015C, r25
     332:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = SUB0_ID1;
     336:	85 e1       	ldi	r24, 0x15	; 21
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	90 93 57 01 	sts	0x0157, r25
     33e:	80 93 56 01 	sts	0x0156, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     342:	60 91 b4 01 	lds	r22, 0x01B4
     346:	84 e5       	ldi	r24, 0x54	; 84
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     34e:	81 11       	cpse	r24, r1
     350:	f8 cf       	rjmp	.-16     	; 0x342 <clean_up_msg+0x76>
     352:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	09 f5       	brne	.+66     	; 0x39a <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     358:	10 92 5f 01 	sts	0x015F, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     35c:	85 e0       	ldi	r24, 0x05	; 5
     35e:	80 93 55 01 	sts	0x0155, r24
		message.dlc = 8;			 // Max length of a CAN message.
     362:	88 e0       	ldi	r24, 0x08	; 8
     364:	80 93 5a 01 	sts	0x015A, r24
		mob_number = mailbox;
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	80 93 b4 01 	sts	0x01B4, r24
		message.pt_data = &data2[0];
     36e:	8b e1       	ldi	r24, 0x1B	; 27
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	90 93 5c 01 	sts	0x015C, r25
     376:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = id_array[2];
     37a:	80 91 93 01 	lds	r24, 0x0193
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	90 93 57 01 	sts	0x0157, r25
     384:	80 93 56 01 	sts	0x0156, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     388:	60 91 b4 01 	lds	r22, 0x01B4
     38c:	84 e5       	ldi	r24, 0x54	; 84
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     394:	81 11       	cpse	r24, r1
     396:	f8 cf       	rjmp	.-16     	; 0x388 <clean_up_msg+0xbc>
     398:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     39a:	83 30       	cpi	r24, 0x03	; 3
     39c:	09 f5       	brne	.+66     	; 0x3e0 <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     39e:	10 92 5f 01 	sts	0x015F, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	80 93 55 01 	sts	0x0155, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3a8:	88 e0       	ldi	r24, 0x08	; 8
     3aa:	80 93 5a 01 	sts	0x015A, r24
		mob_number = mailbox;
     3ae:	83 e0       	ldi	r24, 0x03	; 3
     3b0:	80 93 b4 01 	sts	0x01B4, r24
		message.pt_data = &data3[0];
     3b4:	89 e9       	ldi	r24, 0x99	; 153
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	90 93 5c 01 	sts	0x015C, r25
     3bc:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = id_array[3];
     3c0:	80 91 94 01 	lds	r24, 0x0194
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	90 93 57 01 	sts	0x0157, r25
     3ca:	80 93 56 01 	sts	0x0156, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3ce:	60 91 b4 01 	lds	r22, 0x01B4
     3d2:	84 e5       	ldi	r24, 0x54	; 84
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     3da:	81 11       	cpse	r24, r1
     3dc:	f8 cf       	rjmp	.-16     	; 0x3ce <clean_up_msg+0x102>
     3de:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     3e0:	85 30       	cpi	r24, 0x05	; 5
     3e2:	f1 f4       	brne	.+60     	; 0x420 <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3e4:	10 92 5f 01 	sts	0x015F, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3e8:	80 93 55 01 	sts	0x0155, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3ec:	98 e0       	ldi	r25, 0x08	; 8
     3ee:	90 93 5a 01 	sts	0x015A, r25
		mob_number = mailbox;
     3f2:	80 93 b4 01 	sts	0x01B4, r24
		message.pt_data = &data5[0];
     3f6:	88 ea       	ldi	r24, 0xA8	; 168
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	90 93 5c 01 	sts	0x015C, r25
     3fe:	80 93 5b 01 	sts	0x015B, r24
		message.id.std = id_array[5];
     402:	80 91 96 01 	lds	r24, 0x0196
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	90 93 57 01 	sts	0x0157, r25
     40c:	80 93 56 01 	sts	0x0156, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     410:	60 91 b4 01 	lds	r22, 0x01B4
     414:	84 e5       	ldi	r24, 0x54	; 84
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     41c:	81 11       	cpse	r24, r1
     41e:	f8 cf       	rjmp	.-16     	; 0x410 <clean_up_msg+0x144>
     420:	08 95       	ret

00000422 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     426:	85 e0       	ldi	r24, 0x05	; 5
     428:	0e 94 0c 01 	call	0x218	; 0x218 <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     42c:	60 91 b4 01 	lds	r22, 0x01B4
     430:	84 e5       	ldi	r24, 0x54	; 84
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 ed 09 	call	0x13da	; 0x13da <can_get_status>
     438:	81 30       	cpi	r24, 0x01	; 1
     43a:	11 f1       	breq	.+68     	; 0x480 <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     43c:	80 91 5d 01 	lds	r24, 0x015D
     440:	80 32       	cpi	r24, 0x20	; 32
     442:	d9 f4       	brne	.+54     	; 0x47a <can_check_housekeep+0x58>
     444:	a0 91 5b 01 	lds	r26, 0x015B
     448:	b0 91 5c 01 	lds	r27, 0x015C
     44c:	c1 e9       	ldi	r28, 0x91	; 145
     44e:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     450:	e9 e8       	ldi	r30, 0x89	; 137
     452:	f1 e0       	ldi	r31, 0x01	; 1
     454:	8d 91       	ld	r24, X+
     456:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     458:	ec 17       	cp	r30, r28
     45a:	fd 07       	cpc	r31, r29
     45c:	d9 f7       	brne	.-10     	; 0x454 <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     45e:	80 91 8f 01 	lds	r24, 0x018F
     462:	82 30       	cpi	r24, 0x02	; 2
     464:	21 f4       	brne	.+8      	; 0x46e <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     466:	89 e8       	ldi	r24, 0x89	; 137
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 a3 00 	call	0x146	; 0x146 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     46e:	e9 e8       	ldi	r30, 0x89	; 137
     470:	f1 e0       	ldi	r31, 0x01	; 1
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     472:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     474:	ec 17       	cp	r30, r28
     476:	fd 07       	cpc	r31, r29
     478:	e1 f7       	brne	.-8      	; 0x472 <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     47a:	85 e0       	ldi	r24, 0x05	; 5
     47c:	0e 94 66 01 	call	0x2cc	; 0x2cc <clean_up_msg>
	}	
	return;
}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
     486:	9f 92       	push	r9
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     49c:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     49e:	0d e5       	ldi	r16, 0x5D	; 93
     4a0:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4a2:	0f 2e       	mov	r0, r31
     4a4:	fb e5       	ldi	r31, 0x5B	; 91
     4a6:	af 2e       	mov	r10, r31
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	bf 2e       	mov	r11, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	c1 e9       	ldi	r28, 0x91	; 145
     4b0:	d1 e0       	ldi	r29, 0x01	; 1
     4b2:	0f 2e       	mov	r0, r31
     4b4:	f9 e8       	ldi	r31, 0x89	; 137
     4b6:	ef 2e       	mov	r14, r31
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	ff 2e       	mov	r15, r31
     4bc:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     4be:	0f 2e       	mov	r0, r31
     4c0:	ff e8       	ldi	r31, 0x8F	; 143
     4c2:	cf 2e       	mov	r12, r31
     4c4:	f1 e0       	ldi	r31, 0x01	; 1
     4c6:	df 2e       	mov	r13, r31
     4c8:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     4ca:	89 2d       	mov	r24, r9
     4cc:	0e 94 0c 01 	call	0x218	; 0x218 <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     4d0:	60 91 b4 01 	lds	r22, 0x01B4
     4d4:	84 e5       	ldi	r24, 0x54	; 84
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 ed 09 	call	0x13da	; 0x13da <can_get_status>
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	e1 f0       	breq	.+56     	; 0x518 <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     4e0:	f8 01       	movw	r30, r16
     4e2:	80 81       	ld	r24, Z
     4e4:	80 32       	cpi	r24, 0x20	; 32
     4e6:	a9 f4       	brne	.+42     	; 0x512 <can_check_general+0x8c>
     4e8:	f5 01       	movw	r30, r10
     4ea:	a0 81       	ld	r26, Z
     4ec:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4ee:	f7 01       	movw	r30, r14
     4f0:	8d 91       	ld	r24, X+
     4f2:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     4f4:	ec 17       	cp	r30, r28
     4f6:	fd 07       	cpc	r31, r29
     4f8:	d9 f7       	brne	.-10     	; 0x4f0 <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     4fa:	f6 01       	movw	r30, r12
     4fc:	80 81       	ld	r24, Z
     4fe:	82 30       	cpi	r24, 0x02	; 2
     500:	19 f4       	brne	.+6      	; 0x508 <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     502:	c7 01       	movw	r24, r14
     504:	0e 94 a3 00 	call	0x146	; 0x146 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     508:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     50a:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     50c:	ec 17       	cp	r30, r28
     50e:	fd 07       	cpc	r31, r29
     510:	e1 f7       	brne	.-8      	; 0x50a <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     512:	89 2d       	mov	r24, r9
     514:	0e 94 66 01 	call	0x2cc	; 0x2cc <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     518:	93 94       	inc	r9
     51a:	f4 e0       	ldi	r31, 0x04	; 4
     51c:	9f 12       	cpse	r9, r31
     51e:	d5 cf       	rjmp	.-86     	; 0x4ca <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     520:	0e 94 11 02 	call	0x422	; 0x422 <can_check_housekeep>
	
	return;
}
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	bf 90       	pop	r11
     536:	af 90       	pop	r10
     538:	9f 90       	pop	r9
     53a:	08 95       	ret

0000053c <can_init_mobs>:
/*		This function initializes our can message objects with their ID	*/
/*		and sets whether or not they are in transmit mode or receive.	*/
/************************************************************************/

void can_init_mobs(void)
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
		id_array[5] = SUB0_ID5;
	}
	
	if(SELF_ID == 1)
	{
		id_array[0] = SUB1_ID0;
     540:	8a e1       	ldi	r24, 0x1A	; 26
     542:	80 93 91 01 	sts	0x0191, r24
		id_array[1] = SUB1_ID1;
     546:	8b e1       	ldi	r24, 0x1B	; 27
     548:	80 93 92 01 	sts	0x0192, r24
		id_array[2] = SUB1_ID2;
     54c:	8c e1       	ldi	r24, 0x1C	; 28
     54e:	80 93 93 01 	sts	0x0193, r24
		id_array[3] = SUB1_ID3;
     552:	8d e1       	ldi	r24, 0x1D	; 29
     554:	80 93 94 01 	sts	0x0194, r24
		id_array[4] = SUB1_ID4;
     558:	8e e1       	ldi	r24, 0x1E	; 30
     55a:	80 93 95 01 	sts	0x0195, r24
		id_array[5] = SUB1_ID5;
     55e:	8f e1       	ldi	r24, 0x1F	; 31
     560:	80 93 96 01 	sts	0x0196, r24
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     564:	8a e7       	ldi	r24, 0x7A	; 122
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	90 93 5c 01 	sts	0x015C, r25
     56c:	80 93 5b 01 	sts	0x015B, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     570:	10 92 5f 01 	sts	0x015F, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     574:	8a e1       	ldi	r24, 0x1A	; 26
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	90 93 57 01 	sts	0x0157, r25
     57c:	80 93 56 01 	sts	0x0156, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     580:	85 e0       	ldi	r24, 0x05	; 5
     582:	80 93 55 01 	sts	0x0155, r24
	message.dlc = 8;			 // Max length of a CAN message.
     586:	88 e0       	ldi	r24, 0x08	; 8
     588:	80 93 5a 01 	sts	0x015A, r24
	mob_number = 0;
     58c:	10 92 b4 01 	sts	0x01B4, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     590:	60 91 b4 01 	lds	r22, 0x01B4
     594:	84 e5       	ldi	r24, 0x54	; 84
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     59c:	81 11       	cpse	r24, r1
     59e:	f8 cf       	rjmp	.-16     	; 0x590 <can_init_mobs+0x54>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     5a0:	83 e1       	ldi	r24, 0x13	; 19
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	90 93 5c 01 	sts	0x015C, r25
     5a8:	80 93 5b 01 	sts	0x015B, r24
	message.ctrl.ide = 0;
     5ac:	10 92 5f 01 	sts	0x015F, r1
	message.id.std = id_array[1];
     5b0:	80 91 92 01 	lds	r24, 0x0192
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	90 93 57 01 	sts	0x0157, r25
     5ba:	80 93 56 01 	sts	0x0156, r24
	message.cmd = CMD_RX_DATA;
     5be:	85 e0       	ldi	r24, 0x05	; 5
     5c0:	80 93 55 01 	sts	0x0155, r24
	message.dlc = 8;
     5c4:	88 e0       	ldi	r24, 0x08	; 8
     5c6:	80 93 5a 01 	sts	0x015A, r24
	mob_number = 1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	80 93 b4 01 	sts	0x01B4, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     5d0:	60 91 b4 01 	lds	r22, 0x01B4
     5d4:	84 e5       	ldi	r24, 0x54	; 84
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     5dc:	81 11       	cpse	r24, r1
     5de:	f8 cf       	rjmp	.-16     	; 0x5d0 <can_init_mobs+0x94>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     5e0:	8b e1       	ldi	r24, 0x1B	; 27
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	90 93 5c 01 	sts	0x015C, r25
     5e8:	80 93 5b 01 	sts	0x015B, r24
	message.ctrl.ide = 0;
     5ec:	10 92 5f 01 	sts	0x015F, r1
	message.id.std = id_array[2];
     5f0:	80 91 93 01 	lds	r24, 0x0193
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	90 93 57 01 	sts	0x0157, r25
     5fa:	80 93 56 01 	sts	0x0156, r24
	message.cmd = CMD_RX_DATA;
     5fe:	85 e0       	ldi	r24, 0x05	; 5
     600:	80 93 55 01 	sts	0x0155, r24
	message.dlc = 8;
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	80 93 5a 01 	sts	0x015A, r24
	mob_number = 2;
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	80 93 b4 01 	sts	0x01B4, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     610:	60 91 b4 01 	lds	r22, 0x01B4
     614:	84 e5       	ldi	r24, 0x54	; 84
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     61c:	81 11       	cpse	r24, r1
     61e:	f8 cf       	rjmp	.-16     	; 0x610 <can_init_mobs+0xd4>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     620:	89 e9       	ldi	r24, 0x99	; 153
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	90 93 5c 01 	sts	0x015C, r25
     628:	80 93 5b 01 	sts	0x015B, r24
	message.ctrl.ide = 0;
     62c:	10 92 5f 01 	sts	0x015F, r1
	message.id.std = id_array[3];
     630:	80 91 94 01 	lds	r24, 0x0194
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	90 93 57 01 	sts	0x0157, r25
     63a:	80 93 56 01 	sts	0x0156, r24
	message.cmd = CMD_RX_DATA;
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	80 93 55 01 	sts	0x0155, r24
	message.dlc = 8;
     644:	88 e0       	ldi	r24, 0x08	; 8
     646:	80 93 5a 01 	sts	0x015A, r24
	mob_number = 3;
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	80 93 b4 01 	sts	0x01B4, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     650:	60 91 b4 01 	lds	r22, 0x01B4
     654:	84 e5       	ldi	r24, 0x54	; 84
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     65c:	81 11       	cpse	r24, r1
     65e:	f8 cf       	rjmp	.-16     	; 0x650 <can_init_mobs+0x114>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     660:	88 ea       	ldi	r24, 0xA8	; 168
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	90 93 5c 01 	sts	0x015C, r25
     668:	80 93 5b 01 	sts	0x015B, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     66c:	10 92 5f 01 	sts	0x015F, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     670:	80 91 96 01 	lds	r24, 0x0196
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	90 93 57 01 	sts	0x0157, r25
     67a:	80 93 56 01 	sts	0x0156, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     67e:	85 e0       	ldi	r24, 0x05	; 5
     680:	80 93 55 01 	sts	0x0155, r24
	message.dlc = 8;				// Max length of a CAN message.
     684:	98 e0       	ldi	r25, 0x08	; 8
     686:	90 93 5a 01 	sts	0x015A, r25
	mob_number = 5;
     68a:	80 93 b4 01 	sts	0x01B4, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     68e:	60 91 b4 01 	lds	r22, 0x01B4
     692:	84 e5       	ldi	r24, 0x54	; 84
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	0e 94 c1 03 	call	0x782	; 0x782 <can_cmd>
     69a:	81 11       	cpse	r24, r1
     69c:	f8 cf       	rjmp	.-16     	; 0x68e <can_init_mobs+0x152>
     69e:	e9 e8       	ldi	r30, 0x89	; 137
     6a0:	f1 e0       	ldi	r31, 0x01	; 1
     6a2:	85 e2       	ldi	r24, 0x25	; 37
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	c9 ec       	ldi	r28, 0xC9	; 201
     6a8:	d1 e0       	ldi	r29, 0x01	; 1
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	51 e0       	ldi	r21, 0x01	; 1
     6ae:	21 e9       	ldi	r18, 0x91	; 145
     6b0:	31 e0       	ldi	r19, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     6b2:	11 92       	st	Z+, r1
		send_arr[i] = 0;
     6b4:	dc 01       	movw	r26, r24
     6b6:	1d 92       	st	X+, r1
     6b8:	cd 01       	movw	r24, r26
		read_arr[i] = 0;
     6ba:	19 92       	st	Y+, r1
		write_arr[i] = 0;
     6bc:	da 01       	movw	r26, r20
     6be:	1d 92       	st	X+, r1
     6c0:	ad 01       	movw	r20, r26
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     6c2:	e2 17       	cp	r30, r18
     6c4:	f3 07       	cpc	r31, r19
     6c6:	a9 f7       	brne	.-22     	; 0x6b2 <can_init_mobs+0x176>
		read_arr[i] = 0;
		write_arr[i] = 0;
	}
	
	/* Initialize Global Command Flags to zero */
	send_now = 0;
     6c8:	10 92 70 01 	sts	0x0170, r1
	send_hk = 0;
     6cc:	10 92 82 01 	sts	0x0182, r1
	send_data = 0;
     6d0:	10 92 a2 01 	sts	0x01A2, r1
	read_response = 0;
     6d4:	10 92 79 01 	sts	0x0179, r1
	write_response = 0;
     6d8:	10 92 47 01 	sts	0x0147, r1
	
	return;
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     6e2:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     6e4:	ad ee       	ldi	r26, 0xED	; 237
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     6e8:	3e ee       	ldi	r19, 0xEE	; 238
     6ea:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     6ec:	98 2f       	mov	r25, r24
     6ee:	92 95       	swap	r25
     6f0:	90 7f       	andi	r25, 0xF0	; 240
     6f2:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     6f4:	e3 2f       	mov	r30, r19
     6f6:	f2 2f       	mov	r31, r18
     6f8:	11 92       	st	Z+, r1
     6fa:	e8 3f       	cpi	r30, 0xF8	; 248
     6fc:	f1 05       	cpc	r31, r1
     6fe:	e1 f7       	brne	.-8      	; 0x6f8 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	86 30       	cpi	r24, 0x06	; 6
     704:	99 f7       	brne	.-26     	; 0x6ec <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     706:	08 95       	ret

00000708 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     708:	80 91 ef 00 	lds	r24, 0x00EF
     70c:	80 7c       	andi	r24, 0xC0	; 192
     70e:	61 f0       	breq	.+24     	; 0x728 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     710:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     714:	98 2f       	mov	r25, r24
     716:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     718:	28 2f       	mov	r18, r24
     71a:	20 76       	andi	r18, 0x60	; 96
     71c:	20 32       	cpi	r18, 0x20	; 32
     71e:	31 f0       	breq	.+12     	; 0x72c <can_get_mob_status+0x24>
     720:	90 34       	cpi	r25, 0x40	; 64
     722:	31 f0       	breq	.+12     	; 0x730 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     724:	8f 71       	andi	r24, 0x1F	; 31
     726:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     72c:	89 2f       	mov	r24, r25
     72e:	08 95       	ret
     730:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     732:	08 95       	ret

00000734 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     734:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     736:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     738:	aa ef       	ldi	r26, 0xFA	; 250
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	9c 91       	ld	r25, X
     73e:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	88 30       	cpi	r24, 0x08	; 8
     744:	d9 f7       	brne	.-10     	; 0x73c <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     746:	08 95       	ret

00000748 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	80 93 e2 00 	sts	0x00E2, r24
     754:	8c e0       	ldi	r24, 0x0C	; 12
     756:	80 93 e3 00 	sts	0x00E3, r24
     75a:	87 e3       	ldi	r24, 0x37	; 55
     75c:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	08 95       	ret

00000764 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     764:	0e 94 a4 03 	call	0x748	; 0x748 <can_fixed_baudrate>
     768:	88 23       	and	r24, r24
     76a:	49 f0       	breq	.+18     	; 0x77e <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     76c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     770:	e8 ed       	ldi	r30, 0xD8	; 216
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	82 60       	ori	r24, 0x02	; 2
     778:	80 83       	st	Z, r24
    return (1);
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     77e:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     780:	08 95       	ret

00000782 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	1f 92       	push	r1
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     78e:	11 96       	adiw	r26, 0x01	; 1
     790:	8c 91       	ld	r24, X
     792:	11 97       	sbiw	r26, 0x01	; 1
     794:	8c 30       	cpi	r24, 0x0C	; 12
     796:	b1 f4       	brne	.+44     	; 0x7c4 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     798:	19 96       	adiw	r26, 0x09	; 9
     79a:	8c 91       	ld	r24, X
     79c:	19 97       	sbiw	r26, 0x09	; 9
     79e:	80 36       	cpi	r24, 0x60	; 96
     7a0:	69 f4       	brne	.+26     	; 0x7bc <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     7a2:	86 2f       	mov	r24, r22
     7a4:	82 95       	swap	r24
     7a6:	80 7f       	andi	r24, 0xF0	; 240
     7a8:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     7ac:	ef ee       	ldi	r30, 0xEF	; 239
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	8f 73       	andi	r24, 0x3F	; 63
     7b4:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     7b6:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     7ba:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     7bc:	19 96       	adiw	r26, 0x09	; 9
     7be:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	07 c6       	rjmp	.+3086   	; 0x13d2 <__stack+0xad3>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     7c4:	86 2f       	mov	r24, r22
     7c6:	82 95       	swap	r24
     7c8:	80 7f       	andi	r24, 0xF0	; 240
     7ca:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     7ce:	80 91 ef 00 	lds	r24, 0x00EF
     7d2:	80 7c       	andi	r24, 0xC0	; 192
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <can_cmd+0x56>
     7d6:	f9 c5       	rjmp	.+3058   	; 0x13ca <__stack+0xacb>
    {
      cmd->status = MOB_PENDING; 
     7d8:	80 e6       	ldi	r24, 0x60	; 96
     7da:	19 96       	adiw	r26, 0x09	; 9
     7dc:	8c 93       	st	X, r24
     7de:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     7e0:	6c 93       	st	X, r22
      Can_clear_mob();
     7e2:	ee ee       	ldi	r30, 0xEE	; 238
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	11 92       	st	Z+, r1
     7e8:	e8 3f       	cpi	r30, 0xF8	; 248
     7ea:	f1 05       	cpc	r31, r1
     7ec:	e1 f7       	brne	.-8      	; 0x7e6 <can_cmd+0x64>
          
      switch (cmd->cmd)
     7ee:	11 96       	adiw	r26, 0x01	; 1
     7f0:	4c 91       	ld	r20, X
     7f2:	11 97       	sbiw	r26, 0x01	; 1
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	fa 01       	movw	r30, r20
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	eb 30       	cpi	r30, 0x0B	; 11
     7fc:	f1 05       	cpc	r31, r1
     7fe:	08 f0       	brcs	.+2      	; 0x802 <can_cmd+0x80>
     800:	e0 c5       	rjmp	.+3008   	; 0x13c2 <__stack+0xac3>
     802:	e7 5b       	subi	r30, 0xB7	; 183
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     80a:	16 96       	adiw	r26, 0x06	; 6
     80c:	8c 91       	ld	r24, X
     80e:	16 97       	sbiw	r26, 0x06	; 6
     810:	81 11       	cpse	r24, r1
     812:	b7 c4       	rjmp	.+2414   	; 0x1182 <__stack+0x883>
     814:	c8 c4       	rjmp	.+2448   	; 0x11a6 <__stack+0x8a7>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     816:	1b 96       	adiw	r26, 0x0b	; 11
     818:	8c 91       	ld	r24, X
     81a:	1b 97       	sbiw	r26, 0x0b	; 11
     81c:	88 23       	and	r24, r24
     81e:	d9 f1       	breq	.+118    	; 0x896 <can_cmd+0x114>
     820:	14 96       	adiw	r26, 0x04	; 4
     822:	9c 91       	ld	r25, X
     824:	14 97       	sbiw	r26, 0x04	; 4
     826:	92 95       	swap	r25
     828:	96 95       	lsr	r25
     82a:	97 70       	andi	r25, 0x07	; 7
     82c:	15 96       	adiw	r26, 0x05	; 5
     82e:	8c 91       	ld	r24, X
     830:	15 97       	sbiw	r26, 0x05	; 5
     832:	88 0f       	add	r24, r24
     834:	88 0f       	add	r24, r24
     836:	88 0f       	add	r24, r24
     838:	89 0f       	add	r24, r25
     83a:	80 93 f3 00 	sts	0x00F3, r24
     83e:	13 96       	adiw	r26, 0x03	; 3
     840:	9c 91       	ld	r25, X
     842:	13 97       	sbiw	r26, 0x03	; 3
     844:	92 95       	swap	r25
     846:	96 95       	lsr	r25
     848:	97 70       	andi	r25, 0x07	; 7
     84a:	14 96       	adiw	r26, 0x04	; 4
     84c:	8c 91       	ld	r24, X
     84e:	14 97       	sbiw	r26, 0x04	; 4
     850:	88 0f       	add	r24, r24
     852:	88 0f       	add	r24, r24
     854:	88 0f       	add	r24, r24
     856:	89 0f       	add	r24, r25
     858:	80 93 f2 00 	sts	0x00F2, r24
     85c:	12 96       	adiw	r26, 0x02	; 2
     85e:	9c 91       	ld	r25, X
     860:	12 97       	sbiw	r26, 0x02	; 2
     862:	92 95       	swap	r25
     864:	96 95       	lsr	r25
     866:	97 70       	andi	r25, 0x07	; 7
     868:	13 96       	adiw	r26, 0x03	; 3
     86a:	8c 91       	ld	r24, X
     86c:	13 97       	sbiw	r26, 0x03	; 3
     86e:	88 0f       	add	r24, r24
     870:	88 0f       	add	r24, r24
     872:	88 0f       	add	r24, r24
     874:	89 0f       	add	r24, r25
     876:	80 93 f1 00 	sts	0x00F1, r24
     87a:	12 96       	adiw	r26, 0x02	; 2
     87c:	8c 91       	ld	r24, X
     87e:	12 97       	sbiw	r26, 0x02	; 2
     880:	88 0f       	add	r24, r24
     882:	88 0f       	add	r24, r24
     884:	88 0f       	add	r24, r24
     886:	80 93 f0 00 	sts	0x00F0, r24
     88a:	ef ee       	ldi	r30, 0xEF	; 239
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	80 61       	ori	r24, 0x10	; 16
     892:	80 83       	st	Z, r24
     894:	1c c0       	rjmp	.+56     	; 0x8ce <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     896:	12 96       	adiw	r26, 0x02	; 2
     898:	8c 91       	ld	r24, X
     89a:	12 97       	sbiw	r26, 0x02	; 2
     89c:	86 95       	lsr	r24
     89e:	86 95       	lsr	r24
     8a0:	86 95       	lsr	r24
     8a2:	13 96       	adiw	r26, 0x03	; 3
     8a4:	9c 91       	ld	r25, X
     8a6:	13 97       	sbiw	r26, 0x03	; 3
     8a8:	20 e2       	ldi	r18, 0x20	; 32
     8aa:	92 9f       	mul	r25, r18
     8ac:	80 0d       	add	r24, r0
     8ae:	11 24       	eor	r1, r1
     8b0:	80 93 f3 00 	sts	0x00F3, r24
     8b4:	12 96       	adiw	r26, 0x02	; 2
     8b6:	8c 91       	ld	r24, X
     8b8:	12 97       	sbiw	r26, 0x02	; 2
     8ba:	82 95       	swap	r24
     8bc:	88 0f       	add	r24, r24
     8be:	80 7e       	andi	r24, 0xE0	; 224
     8c0:	80 93 f2 00 	sts	0x00F2, r24
     8c4:	ef ee       	ldi	r30, 0xEF	; 239
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8f 7e       	andi	r24, 0xEF	; 239
     8cc:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     8ce:	16 96       	adiw	r26, 0x06	; 6
     8d0:	8c 91       	ld	r24, X
     8d2:	16 97       	sbiw	r26, 0x06	; 6
     8d4:	88 23       	and	r24, r24
     8d6:	91 f0       	breq	.+36     	; 0x8fc <can_cmd+0x17a>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	8a ef       	ldi	r24, 0xFA	; 250
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	17 96       	adiw	r26, 0x07	; 7
     8e0:	ed 91       	ld	r30, X+
     8e2:	fc 91       	ld	r31, X
     8e4:	18 97       	sbiw	r26, 0x08	; 8
     8e6:	e2 0f       	add	r30, r18
     8e8:	f1 1d       	adc	r31, r1
     8ea:	30 81       	ld	r19, Z
     8ec:	fc 01       	movw	r30, r24
     8ee:	30 83       	st	Z, r19
     8f0:	2f 5f       	subi	r18, 0xFF	; 255
     8f2:	16 96       	adiw	r26, 0x06	; 6
     8f4:	3c 91       	ld	r19, X
     8f6:	16 97       	sbiw	r26, 0x06	; 6
     8f8:	23 17       	cp	r18, r19
     8fa:	88 f3       	brcs	.-30     	; 0x8de <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     8fc:	1a 96       	adiw	r26, 0x0a	; 10
     8fe:	8c 91       	ld	r24, X
     900:	1a 97       	sbiw	r26, 0x0a	; 10
     902:	88 23       	and	r24, r24
     904:	31 f0       	breq	.+12     	; 0x912 <__stack+0x13>
     906:	e0 ef       	ldi	r30, 0xF0	; 240
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	84 60       	ori	r24, 0x04	; 4
     90e:	80 83       	st	Z, r24
     910:	05 c0       	rjmp	.+10     	; 0x91c <__stack+0x1d>
            else Can_clear_rtr();    
     912:	e0 ef       	ldi	r30, 0xF0	; 240
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	80 81       	ld	r24, Z
     918:	8b 7f       	andi	r24, 0xFB	; 251
     91a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     91c:	ef ee       	ldi	r30, 0xEF	; 239
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	90 81       	ld	r25, Z
     922:	16 96       	adiw	r26, 0x06	; 6
     924:	8c 91       	ld	r24, X
     926:	89 2b       	or	r24, r25
     928:	80 83       	st	Z, r24
          Can_config_tx();
     92a:	80 81       	ld	r24, Z
     92c:	8f 73       	andi	r24, 0x3F	; 63
     92e:	80 83       	st	Z, r24
     930:	80 81       	ld	r24, Z
     932:	80 64       	ori	r24, 0x40	; 64
     934:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     936:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     938:	4c c5       	rjmp	.+2712   	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     93a:	1b 96       	adiw	r26, 0x0b	; 11
     93c:	8c 91       	ld	r24, X
     93e:	1b 97       	sbiw	r26, 0x0b	; 11
     940:	88 23       	and	r24, r24
     942:	d9 f1       	breq	.+118    	; 0x9ba <__stack+0xbb>
     944:	14 96       	adiw	r26, 0x04	; 4
     946:	9c 91       	ld	r25, X
     948:	14 97       	sbiw	r26, 0x04	; 4
     94a:	92 95       	swap	r25
     94c:	96 95       	lsr	r25
     94e:	97 70       	andi	r25, 0x07	; 7
     950:	15 96       	adiw	r26, 0x05	; 5
     952:	8c 91       	ld	r24, X
     954:	15 97       	sbiw	r26, 0x05	; 5
     956:	88 0f       	add	r24, r24
     958:	88 0f       	add	r24, r24
     95a:	88 0f       	add	r24, r24
     95c:	89 0f       	add	r24, r25
     95e:	80 93 f3 00 	sts	0x00F3, r24
     962:	13 96       	adiw	r26, 0x03	; 3
     964:	9c 91       	ld	r25, X
     966:	13 97       	sbiw	r26, 0x03	; 3
     968:	92 95       	swap	r25
     96a:	96 95       	lsr	r25
     96c:	97 70       	andi	r25, 0x07	; 7
     96e:	14 96       	adiw	r26, 0x04	; 4
     970:	8c 91       	ld	r24, X
     972:	14 97       	sbiw	r26, 0x04	; 4
     974:	88 0f       	add	r24, r24
     976:	88 0f       	add	r24, r24
     978:	88 0f       	add	r24, r24
     97a:	89 0f       	add	r24, r25
     97c:	80 93 f2 00 	sts	0x00F2, r24
     980:	12 96       	adiw	r26, 0x02	; 2
     982:	9c 91       	ld	r25, X
     984:	12 97       	sbiw	r26, 0x02	; 2
     986:	92 95       	swap	r25
     988:	96 95       	lsr	r25
     98a:	97 70       	andi	r25, 0x07	; 7
     98c:	13 96       	adiw	r26, 0x03	; 3
     98e:	8c 91       	ld	r24, X
     990:	13 97       	sbiw	r26, 0x03	; 3
     992:	88 0f       	add	r24, r24
     994:	88 0f       	add	r24, r24
     996:	88 0f       	add	r24, r24
     998:	89 0f       	add	r24, r25
     99a:	80 93 f1 00 	sts	0x00F1, r24
     99e:	12 96       	adiw	r26, 0x02	; 2
     9a0:	8c 91       	ld	r24, X
     9a2:	12 97       	sbiw	r26, 0x02	; 2
     9a4:	88 0f       	add	r24, r24
     9a6:	88 0f       	add	r24, r24
     9a8:	88 0f       	add	r24, r24
     9aa:	80 93 f0 00 	sts	0x00F0, r24
     9ae:	ef ee       	ldi	r30, 0xEF	; 239
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	80 61       	ori	r24, 0x10	; 16
     9b6:	80 83       	st	Z, r24
     9b8:	1c c0       	rjmp	.+56     	; 0x9f2 <__stack+0xf3>
          else              { Can_set_std_id(cmd->id.std);}
     9ba:	12 96       	adiw	r26, 0x02	; 2
     9bc:	8c 91       	ld	r24, X
     9be:	12 97       	sbiw	r26, 0x02	; 2
     9c0:	86 95       	lsr	r24
     9c2:	86 95       	lsr	r24
     9c4:	86 95       	lsr	r24
     9c6:	13 96       	adiw	r26, 0x03	; 3
     9c8:	9c 91       	ld	r25, X
     9ca:	13 97       	sbiw	r26, 0x03	; 3
     9cc:	f0 e2       	ldi	r31, 0x20	; 32
     9ce:	9f 9f       	mul	r25, r31
     9d0:	80 0d       	add	r24, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	80 93 f3 00 	sts	0x00F3, r24
     9d8:	12 96       	adiw	r26, 0x02	; 2
     9da:	8c 91       	ld	r24, X
     9dc:	12 97       	sbiw	r26, 0x02	; 2
     9de:	82 95       	swap	r24
     9e0:	88 0f       	add	r24, r24
     9e2:	80 7e       	andi	r24, 0xE0	; 224
     9e4:	80 93 f2 00 	sts	0x00F2, r24
     9e8:	ef ee       	ldi	r30, 0xEF	; 239
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	8f 7e       	andi	r24, 0xEF	; 239
     9f0:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     9f2:	16 96       	adiw	r26, 0x06	; 6
     9f4:	8c 91       	ld	r24, X
     9f6:	16 97       	sbiw	r26, 0x06	; 6
     9f8:	88 23       	and	r24, r24
     9fa:	91 f0       	breq	.+36     	; 0xa20 <__stack+0x121>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	8a ef       	ldi	r24, 0xFA	; 250
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	17 96       	adiw	r26, 0x07	; 7
     a04:	ed 91       	ld	r30, X+
     a06:	fc 91       	ld	r31, X
     a08:	18 97       	sbiw	r26, 0x08	; 8
     a0a:	e2 0f       	add	r30, r18
     a0c:	f1 1d       	adc	r31, r1
     a0e:	30 81       	ld	r19, Z
     a10:	fc 01       	movw	r30, r24
     a12:	30 83       	st	Z, r19
     a14:	2f 5f       	subi	r18, 0xFF	; 255
     a16:	16 96       	adiw	r26, 0x06	; 6
     a18:	3c 91       	ld	r19, X
     a1a:	16 97       	sbiw	r26, 0x06	; 6
     a1c:	23 17       	cp	r18, r19
     a1e:	88 f3       	brcs	.-30     	; 0xa02 <__stack+0x103>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     a20:	1a 96       	adiw	r26, 0x0a	; 10
     a22:	1c 92       	st	X, r1
     a24:	1a 97       	sbiw	r26, 0x0a	; 10
     a26:	e0 ef       	ldi	r30, 0xF0	; 240
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	8b 7f       	andi	r24, 0xFB	; 251
     a2e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     a30:	ef ee       	ldi	r30, 0xEF	; 239
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	90 81       	ld	r25, Z
     a36:	16 96       	adiw	r26, 0x06	; 6
     a38:	8c 91       	ld	r24, X
     a3a:	89 2b       	or	r24, r25
     a3c:	80 83       	st	Z, r24
          Can_config_tx();
     a3e:	80 81       	ld	r24, Z
     a40:	8f 73       	andi	r24, 0x3F	; 63
     a42:	80 83       	st	Z, r24
     a44:	80 81       	ld	r24, Z
     a46:	80 64       	ori	r24, 0x40	; 64
     a48:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a4c:	c2 c4       	rjmp	.+2436   	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a4e:	1b 96       	adiw	r26, 0x0b	; 11
     a50:	8c 91       	ld	r24, X
     a52:	1b 97       	sbiw	r26, 0x0b	; 11
     a54:	88 23       	and	r24, r24
     a56:	d9 f1       	breq	.+118    	; 0xace <__stack+0x1cf>
     a58:	14 96       	adiw	r26, 0x04	; 4
     a5a:	9c 91       	ld	r25, X
     a5c:	14 97       	sbiw	r26, 0x04	; 4
     a5e:	92 95       	swap	r25
     a60:	96 95       	lsr	r25
     a62:	97 70       	andi	r25, 0x07	; 7
     a64:	15 96       	adiw	r26, 0x05	; 5
     a66:	8c 91       	ld	r24, X
     a68:	15 97       	sbiw	r26, 0x05	; 5
     a6a:	88 0f       	add	r24, r24
     a6c:	88 0f       	add	r24, r24
     a6e:	88 0f       	add	r24, r24
     a70:	89 0f       	add	r24, r25
     a72:	80 93 f3 00 	sts	0x00F3, r24
     a76:	13 96       	adiw	r26, 0x03	; 3
     a78:	9c 91       	ld	r25, X
     a7a:	13 97       	sbiw	r26, 0x03	; 3
     a7c:	92 95       	swap	r25
     a7e:	96 95       	lsr	r25
     a80:	97 70       	andi	r25, 0x07	; 7
     a82:	14 96       	adiw	r26, 0x04	; 4
     a84:	8c 91       	ld	r24, X
     a86:	14 97       	sbiw	r26, 0x04	; 4
     a88:	88 0f       	add	r24, r24
     a8a:	88 0f       	add	r24, r24
     a8c:	88 0f       	add	r24, r24
     a8e:	89 0f       	add	r24, r25
     a90:	80 93 f2 00 	sts	0x00F2, r24
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	9c 91       	ld	r25, X
     a98:	12 97       	sbiw	r26, 0x02	; 2
     a9a:	92 95       	swap	r25
     a9c:	96 95       	lsr	r25
     a9e:	97 70       	andi	r25, 0x07	; 7
     aa0:	13 96       	adiw	r26, 0x03	; 3
     aa2:	8c 91       	ld	r24, X
     aa4:	13 97       	sbiw	r26, 0x03	; 3
     aa6:	88 0f       	add	r24, r24
     aa8:	88 0f       	add	r24, r24
     aaa:	88 0f       	add	r24, r24
     aac:	89 0f       	add	r24, r25
     aae:	80 93 f1 00 	sts	0x00F1, r24
     ab2:	12 96       	adiw	r26, 0x02	; 2
     ab4:	8c 91       	ld	r24, X
     ab6:	12 97       	sbiw	r26, 0x02	; 2
     ab8:	88 0f       	add	r24, r24
     aba:	88 0f       	add	r24, r24
     abc:	88 0f       	add	r24, r24
     abe:	80 93 f0 00 	sts	0x00F0, r24
     ac2:	ef ee       	ldi	r30, 0xEF	; 239
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	80 61       	ori	r24, 0x10	; 16
     aca:	80 83       	st	Z, r24
     acc:	1c c0       	rjmp	.+56     	; 0xb06 <__stack+0x207>
          else              { Can_set_std_id(cmd->id.std);}
     ace:	12 96       	adiw	r26, 0x02	; 2
     ad0:	8c 91       	ld	r24, X
     ad2:	12 97       	sbiw	r26, 0x02	; 2
     ad4:	86 95       	lsr	r24
     ad6:	86 95       	lsr	r24
     ad8:	86 95       	lsr	r24
     ada:	13 96       	adiw	r26, 0x03	; 3
     adc:	9c 91       	ld	r25, X
     ade:	13 97       	sbiw	r26, 0x03	; 3
     ae0:	f0 e2       	ldi	r31, 0x20	; 32
     ae2:	9f 9f       	mul	r25, r31
     ae4:	80 0d       	add	r24, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	80 93 f3 00 	sts	0x00F3, r24
     aec:	12 96       	adiw	r26, 0x02	; 2
     aee:	8c 91       	ld	r24, X
     af0:	12 97       	sbiw	r26, 0x02	; 2
     af2:	82 95       	swap	r24
     af4:	88 0f       	add	r24, r24
     af6:	80 7e       	andi	r24, 0xE0	; 224
     af8:	80 93 f2 00 	sts	0x00F2, r24
     afc:	ef ee       	ldi	r30, 0xEF	; 239
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	8f 7e       	andi	r24, 0xEF	; 239
     b04:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	1a 96       	adiw	r26, 0x0a	; 10
     b0a:	8c 93       	st	X, r24
     b0c:	1a 97       	sbiw	r26, 0x0a	; 10
     b0e:	e0 ef       	ldi	r30, 0xF0	; 240
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	84 60       	ori	r24, 0x04	; 4
     b16:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     b18:	ef ee       	ldi	r30, 0xEF	; 239
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	90 81       	ld	r25, Z
     b1e:	16 96       	adiw	r26, 0x06	; 6
     b20:	8c 91       	ld	r24, X
     b22:	89 2b       	or	r24, r25
     b24:	80 83       	st	Z, r24
          Can_config_tx();
     b26:	80 81       	ld	r24, Z
     b28:	8f 73       	andi	r24, 0x3F	; 63
     b2a:	80 83       	st	Z, r24
     b2c:	80 81       	ld	r24, Z
     b2e:	80 64       	ori	r24, 0x40	; 64
     b30:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b32:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     b34:	4e c4       	rjmp	.+2204   	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     b36:	19 82       	std	Y+1, r1	; 0x01
     b38:	9b 81       	ldd	r25, Y+3	; 0x03
     b3a:	92 95       	swap	r25
     b3c:	96 95       	lsr	r25
     b3e:	97 70       	andi	r25, 0x07	; 7
     b40:	8c 81       	ldd	r24, Y+4	; 0x04
     b42:	88 0f       	add	r24, r24
     b44:	88 0f       	add	r24, r24
     b46:	88 0f       	add	r24, r24
     b48:	89 0f       	add	r24, r25
     b4a:	80 93 f7 00 	sts	0x00F7, r24
     b4e:	9a 81       	ldd	r25, Y+2	; 0x02
     b50:	92 95       	swap	r25
     b52:	96 95       	lsr	r25
     b54:	97 70       	andi	r25, 0x07	; 7
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	88 0f       	add	r24, r24
     b5a:	88 0f       	add	r24, r24
     b5c:	88 0f       	add	r24, r24
     b5e:	89 0f       	add	r24, r25
     b60:	80 93 f6 00 	sts	0x00F6, r24
     b64:	99 81       	ldd	r25, Y+1	; 0x01
     b66:	92 95       	swap	r25
     b68:	96 95       	lsr	r25
     b6a:	97 70       	andi	r25, 0x07	; 7
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	88 0f       	add	r24, r24
     b70:	88 0f       	add	r24, r24
     b72:	88 0f       	add	r24, r24
     b74:	89 0f       	add	r24, r25
     b76:	80 93 f5 00 	sts	0x00F5, r24
     b7a:	29 81       	ldd	r18, Y+1	; 0x01
     b7c:	22 0f       	add	r18, r18
     b7e:	22 0f       	add	r18, r18
     b80:	22 0f       	add	r18, r18
     b82:	84 ef       	ldi	r24, 0xF4	; 244
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b8a:	ef ee       	ldi	r30, 0xEF	; 239
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	30 81       	ld	r19, Z
     b90:	16 96       	adiw	r26, 0x06	; 6
     b92:	2c 91       	ld	r18, X
     b94:	23 2b       	or	r18, r19
     b96:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b98:	dc 01       	movw	r26, r24
     b9a:	2c 91       	ld	r18, X
     b9c:	2b 7f       	andi	r18, 0xFB	; 251
     b9e:	2c 93       	st	X, r18
          Can_clear_idemsk();
     ba0:	2c 91       	ld	r18, X
     ba2:	2e 7f       	andi	r18, 0xFE	; 254
     ba4:	2c 93       	st	X, r18
          Can_config_rx();       
     ba6:	80 81       	ld	r24, Z
     ba8:	8f 73       	andi	r24, 0x3F	; 63
     baa:	80 83       	st	Z, r24
     bac:	80 81       	ld	r24, Z
     bae:	80 68       	ori	r24, 0x80	; 128
     bb0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     bb2:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     bb4:	0e c4       	rjmp	.+2076   	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	82 95       	swap	r24
     bbe:	88 0f       	add	r24, r24
     bc0:	80 7e       	andi	r24, 0xE0	; 224
     bc2:	81 5e       	subi	r24, 0xE1	; 225
     bc4:	27 ef       	ldi	r18, 0xF7	; 247
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	f9 01       	movw	r30, r18
     bca:	80 83       	st	Z, r24
     bcc:	49 81       	ldd	r20, Y+1	; 0x01
     bce:	42 95       	swap	r20
     bd0:	44 0f       	add	r20, r20
     bd2:	40 7e       	andi	r20, 0xE0	; 224
     bd4:	86 ef       	ldi	r24, 0xF6	; 246
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	fc 01       	movw	r30, r24
     bda:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     bdc:	12 96       	adiw	r26, 0x02	; 2
     bde:	4c 91       	ld	r20, X
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	46 95       	lsr	r20
     be4:	46 95       	lsr	r20
     be6:	46 95       	lsr	r20
     be8:	13 96       	adiw	r26, 0x03	; 3
     bea:	5c 91       	ld	r21, X
     bec:	13 97       	sbiw	r26, 0x03	; 3
     bee:	f0 e2       	ldi	r31, 0x20	; 32
     bf0:	5f 9f       	mul	r21, r31
     bf2:	40 0d       	add	r20, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	40 93 f3 00 	sts	0x00F3, r20
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	4c 91       	ld	r20, X
     bfe:	12 97       	sbiw	r26, 0x02	; 2
     c00:	42 95       	swap	r20
     c02:	44 0f       	add	r20, r20
     c04:	40 7e       	andi	r20, 0xE0	; 224
     c06:	40 93 f2 00 	sts	0x00F2, r20
     c0a:	6f ee       	ldi	r22, 0xEF	; 239
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	fb 01       	movw	r30, r22
     c10:	40 81       	ld	r20, Z
     c12:	4f 7e       	andi	r20, 0xEF	; 239
     c14:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     c16:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     c18:	5b 81       	ldd	r21, Y+3	; 0x03
     c1a:	52 95       	swap	r21
     c1c:	56 95       	lsr	r21
     c1e:	57 70       	andi	r21, 0x07	; 7
     c20:	4c 81       	ldd	r20, Y+4	; 0x04
     c22:	44 0f       	add	r20, r20
     c24:	44 0f       	add	r20, r20
     c26:	44 0f       	add	r20, r20
     c28:	45 0f       	add	r20, r21
     c2a:	f9 01       	movw	r30, r18
     c2c:	40 83       	st	Z, r20
     c2e:	3a 81       	ldd	r19, Y+2	; 0x02
     c30:	32 95       	swap	r19
     c32:	36 95       	lsr	r19
     c34:	37 70       	andi	r19, 0x07	; 7
     c36:	2b 81       	ldd	r18, Y+3	; 0x03
     c38:	22 0f       	add	r18, r18
     c3a:	22 0f       	add	r18, r18
     c3c:	22 0f       	add	r18, r18
     c3e:	23 0f       	add	r18, r19
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18
     c44:	99 81       	ldd	r25, Y+1	; 0x01
     c46:	92 95       	swap	r25
     c48:	96 95       	lsr	r25
     c4a:	97 70       	andi	r25, 0x07	; 7
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	88 0f       	add	r24, r24
     c50:	88 0f       	add	r24, r24
     c52:	88 0f       	add	r24, r24
     c54:	89 0f       	add	r24, r25
     c56:	80 93 f5 00 	sts	0x00F5, r24
     c5a:	29 81       	ldd	r18, Y+1	; 0x01
     c5c:	22 0f       	add	r18, r18
     c5e:	22 0f       	add	r18, r18
     c60:	22 0f       	add	r18, r18
     c62:	84 ef       	ldi	r24, 0xF4	; 244
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     c6a:	fb 01       	movw	r30, r22
     c6c:	30 81       	ld	r19, Z
     c6e:	16 96       	adiw	r26, 0x06	; 6
     c70:	2c 91       	ld	r18, X
     c72:	16 97       	sbiw	r26, 0x06	; 6
     c74:	23 2b       	or	r18, r19
     c76:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     c78:	1a 96       	adiw	r26, 0x0a	; 10
     c7a:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     c7c:	dc 01       	movw	r26, r24
     c7e:	2c 91       	ld	r18, X
     c80:	24 60       	ori	r18, 0x04	; 4
     c82:	2c 93       	st	X, r18
		  Can_clear_rtr();
     c84:	a0 ef       	ldi	r26, 0xF0	; 240
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	2c 91       	ld	r18, X
     c8a:	2b 7f       	andi	r18, 0xFB	; 251
     c8c:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     c8e:	20 81       	ld	r18, Z
     c90:	2f 7e       	andi	r18, 0xEF	; 239
     c92:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c94:	fc 01       	movw	r30, r24
     c96:	20 81       	ld	r18, Z
     c98:	2e 7f       	andi	r18, 0xFE	; 254
     c9a:	20 83       	st	Z, r18
          Can_config_rx();       
     c9c:	db 01       	movw	r26, r22
     c9e:	8c 91       	ld	r24, X
     ca0:	8f 73       	andi	r24, 0x3F	; 63
     ca2:	8c 93       	st	X, r24
     ca4:	8c 91       	ld	r24, X
     ca6:	80 68       	ori	r24, 0x80	; 128
     ca8:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     caa:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     cac:	92 c3       	rjmp	.+1828   	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	82 95       	swap	r24
     cb6:	88 0f       	add	r24, r24
     cb8:	80 7e       	andi	r24, 0xE0	; 224
     cba:	81 5e       	subi	r24, 0xE1	; 225
     cbc:	27 ef       	ldi	r18, 0xF7	; 247
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	f9 01       	movw	r30, r18
     cc2:	80 83       	st	Z, r24
     cc4:	49 81       	ldd	r20, Y+1	; 0x01
     cc6:	42 95       	swap	r20
     cc8:	44 0f       	add	r20, r20
     cca:	40 7e       	andi	r20, 0xE0	; 224
     ccc:	86 ef       	ldi	r24, 0xF6	; 246
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	fc 01       	movw	r30, r24
     cd2:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     cd4:	12 96       	adiw	r26, 0x02	; 2
     cd6:	4c 91       	ld	r20, X
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	46 95       	lsr	r20
     cdc:	46 95       	lsr	r20
     cde:	46 95       	lsr	r20
     ce0:	13 96       	adiw	r26, 0x03	; 3
     ce2:	5c 91       	ld	r21, X
     ce4:	13 97       	sbiw	r26, 0x03	; 3
     ce6:	f0 e2       	ldi	r31, 0x20	; 32
     ce8:	5f 9f       	mul	r21, r31
     cea:	40 0d       	add	r20, r0
     cec:	11 24       	eor	r1, r1
     cee:	40 93 f3 00 	sts	0x00F3, r20
     cf2:	12 96       	adiw	r26, 0x02	; 2
     cf4:	4c 91       	ld	r20, X
     cf6:	12 97       	sbiw	r26, 0x02	; 2
     cf8:	42 95       	swap	r20
     cfa:	44 0f       	add	r20, r20
     cfc:	40 7e       	andi	r20, 0xE0	; 224
     cfe:	40 93 f2 00 	sts	0x00F2, r20
     d02:	6f ee       	ldi	r22, 0xEF	; 239
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	fb 01       	movw	r30, r22
     d08:	40 81       	ld	r20, Z
     d0a:	4f 7e       	andi	r20, 0xEF	; 239
     d0c:	40 83       	st	Z, r20
		
          u8_temp=0; 
     d0e:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     d10:	5b 81       	ldd	r21, Y+3	; 0x03
     d12:	52 95       	swap	r21
     d14:	56 95       	lsr	r21
     d16:	57 70       	andi	r21, 0x07	; 7
     d18:	4c 81       	ldd	r20, Y+4	; 0x04
     d1a:	44 0f       	add	r20, r20
     d1c:	44 0f       	add	r20, r20
     d1e:	44 0f       	add	r20, r20
     d20:	45 0f       	add	r20, r21
     d22:	f9 01       	movw	r30, r18
     d24:	40 83       	st	Z, r20
     d26:	3a 81       	ldd	r19, Y+2	; 0x02
     d28:	32 95       	swap	r19
     d2a:	36 95       	lsr	r19
     d2c:	37 70       	andi	r19, 0x07	; 7
     d2e:	2b 81       	ldd	r18, Y+3	; 0x03
     d30:	22 0f       	add	r18, r18
     d32:	22 0f       	add	r18, r18
     d34:	22 0f       	add	r18, r18
     d36:	23 0f       	add	r18, r19
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18
     d3c:	99 81       	ldd	r25, Y+1	; 0x01
     d3e:	92 95       	swap	r25
     d40:	96 95       	lsr	r25
     d42:	97 70       	andi	r25, 0x07	; 7
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	88 0f       	add	r24, r24
     d48:	88 0f       	add	r24, r24
     d4a:	88 0f       	add	r24, r24
     d4c:	89 0f       	add	r24, r25
     d4e:	80 93 f5 00 	sts	0x00F5, r24
     d52:	29 81       	ldd	r18, Y+1	; 0x01
     d54:	22 0f       	add	r18, r18
     d56:	22 0f       	add	r18, r18
     d58:	22 0f       	add	r18, r18
     d5a:	84 ef       	ldi	r24, 0xF4	; 244
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d62:	fb 01       	movw	r30, r22
     d64:	30 81       	ld	r19, Z
     d66:	16 96       	adiw	r26, 0x06	; 6
     d68:	2c 91       	ld	r18, X
     d6a:	16 97       	sbiw	r26, 0x06	; 6
     d6c:	23 2b       	or	r18, r19
     d6e:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     d70:	21 e0       	ldi	r18, 0x01	; 1
     d72:	1a 96       	adiw	r26, 0x0a	; 10
     d74:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     d76:	dc 01       	movw	r26, r24
     d78:	2c 91       	ld	r18, X
     d7a:	24 60       	ori	r18, 0x04	; 4
     d7c:	2c 93       	st	X, r18
		  Can_set_rtr();
     d7e:	a0 ef       	ldi	r26, 0xF0	; 240
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	2c 91       	ld	r18, X
     d84:	24 60       	ori	r18, 0x04	; 4
     d86:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     d88:	20 81       	ld	r18, Z
     d8a:	2f 7d       	andi	r18, 0xDF	; 223
     d8c:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d8e:	fc 01       	movw	r30, r24
     d90:	20 81       	ld	r18, Z
     d92:	2e 7f       	andi	r18, 0xFE	; 254
     d94:	20 83       	st	Z, r18
          Can_config_rx();       
     d96:	db 01       	movw	r26, r22
     d98:	8c 91       	ld	r24, X
     d9a:	8f 73       	andi	r24, 0x3F	; 63
     d9c:	8c 93       	st	X, r24
     d9e:	8c 91       	ld	r24, X
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     da4:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     da6:	15 c3       	rjmp	.+1578   	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     da8:	1b 96       	adiw	r26, 0x0b	; 11
     daa:	8c 91       	ld	r24, X
     dac:	1b 97       	sbiw	r26, 0x0b	; 11
     dae:	88 23       	and	r24, r24
     db0:	d9 f1       	breq	.+118    	; 0xe28 <__stack+0x529>
     db2:	14 96       	adiw	r26, 0x04	; 4
     db4:	9c 91       	ld	r25, X
     db6:	14 97       	sbiw	r26, 0x04	; 4
     db8:	92 95       	swap	r25
     dba:	96 95       	lsr	r25
     dbc:	97 70       	andi	r25, 0x07	; 7
     dbe:	15 96       	adiw	r26, 0x05	; 5
     dc0:	8c 91       	ld	r24, X
     dc2:	15 97       	sbiw	r26, 0x05	; 5
     dc4:	88 0f       	add	r24, r24
     dc6:	88 0f       	add	r24, r24
     dc8:	88 0f       	add	r24, r24
     dca:	89 0f       	add	r24, r25
     dcc:	80 93 f3 00 	sts	0x00F3, r24
     dd0:	13 96       	adiw	r26, 0x03	; 3
     dd2:	9c 91       	ld	r25, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	92 95       	swap	r25
     dd8:	96 95       	lsr	r25
     dda:	97 70       	andi	r25, 0x07	; 7
     ddc:	14 96       	adiw	r26, 0x04	; 4
     dde:	8c 91       	ld	r24, X
     de0:	14 97       	sbiw	r26, 0x04	; 4
     de2:	88 0f       	add	r24, r24
     de4:	88 0f       	add	r24, r24
     de6:	88 0f       	add	r24, r24
     de8:	89 0f       	add	r24, r25
     dea:	80 93 f2 00 	sts	0x00F2, r24
     dee:	12 96       	adiw	r26, 0x02	; 2
     df0:	9c 91       	ld	r25, X
     df2:	12 97       	sbiw	r26, 0x02	; 2
     df4:	92 95       	swap	r25
     df6:	96 95       	lsr	r25
     df8:	97 70       	andi	r25, 0x07	; 7
     dfa:	13 96       	adiw	r26, 0x03	; 3
     dfc:	8c 91       	ld	r24, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	88 0f       	add	r24, r24
     e02:	88 0f       	add	r24, r24
     e04:	88 0f       	add	r24, r24
     e06:	89 0f       	add	r24, r25
     e08:	80 93 f1 00 	sts	0x00F1, r24
     e0c:	12 96       	adiw	r26, 0x02	; 2
     e0e:	8c 91       	ld	r24, X
     e10:	12 97       	sbiw	r26, 0x02	; 2
     e12:	88 0f       	add	r24, r24
     e14:	88 0f       	add	r24, r24
     e16:	88 0f       	add	r24, r24
     e18:	80 93 f0 00 	sts	0x00F0, r24
     e1c:	ef ee       	ldi	r30, 0xEF	; 239
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	80 61       	ori	r24, 0x10	; 16
     e24:	80 83       	st	Z, r24
     e26:	1c c0       	rjmp	.+56     	; 0xe60 <__stack+0x561>
          else              { Can_set_std_id(cmd->id.std);}
     e28:	12 96       	adiw	r26, 0x02	; 2
     e2a:	8c 91       	ld	r24, X
     e2c:	12 97       	sbiw	r26, 0x02	; 2
     e2e:	86 95       	lsr	r24
     e30:	86 95       	lsr	r24
     e32:	86 95       	lsr	r24
     e34:	13 96       	adiw	r26, 0x03	; 3
     e36:	9c 91       	ld	r25, X
     e38:	13 97       	sbiw	r26, 0x03	; 3
     e3a:	e0 e2       	ldi	r30, 0x20	; 32
     e3c:	9e 9f       	mul	r25, r30
     e3e:	80 0d       	add	r24, r0
     e40:	11 24       	eor	r1, r1
     e42:	80 93 f3 00 	sts	0x00F3, r24
     e46:	12 96       	adiw	r26, 0x02	; 2
     e48:	8c 91       	ld	r24, X
     e4a:	12 97       	sbiw	r26, 0x02	; 2
     e4c:	82 95       	swap	r24
     e4e:	88 0f       	add	r24, r24
     e50:	80 7e       	andi	r24, 0xE0	; 224
     e52:	80 93 f2 00 	sts	0x00F2, r24
     e56:	ef ee       	ldi	r30, 0xEF	; 239
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7e       	andi	r24, 0xEF	; 239
     e5e:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     e60:	8f ef       	ldi	r24, 0xFF	; 255
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	9b 81       	ldd	r25, Y+3	; 0x03
     e66:	92 95       	swap	r25
     e68:	96 95       	lsr	r25
     e6a:	97 70       	andi	r25, 0x07	; 7
     e6c:	8c 81       	ldd	r24, Y+4	; 0x04
     e6e:	88 0f       	add	r24, r24
     e70:	88 0f       	add	r24, r24
     e72:	88 0f       	add	r24, r24
     e74:	89 0f       	add	r24, r25
     e76:	80 93 f7 00 	sts	0x00F7, r24
     e7a:	9a 81       	ldd	r25, Y+2	; 0x02
     e7c:	92 95       	swap	r25
     e7e:	96 95       	lsr	r25
     e80:	97 70       	andi	r25, 0x07	; 7
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	88 0f       	add	r24, r24
     e86:	88 0f       	add	r24, r24
     e88:	88 0f       	add	r24, r24
     e8a:	89 0f       	add	r24, r25
     e8c:	80 93 f6 00 	sts	0x00F6, r24
     e90:	99 81       	ldd	r25, Y+1	; 0x01
     e92:	92 95       	swap	r25
     e94:	96 95       	lsr	r25
     e96:	97 70       	andi	r25, 0x07	; 7
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	88 0f       	add	r24, r24
     e9c:	88 0f       	add	r24, r24
     e9e:	88 0f       	add	r24, r24
     ea0:	89 0f       	add	r24, r25
     ea2:	80 93 f5 00 	sts	0x00F5, r24
     ea6:	29 81       	ldd	r18, Y+1	; 0x01
     ea8:	22 0f       	add	r18, r18
     eaa:	22 0f       	add	r18, r18
     eac:	22 0f       	add	r18, r18
     eae:	84 ef       	ldi	r24, 0xF4	; 244
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     eb6:	ef ee       	ldi	r30, 0xEF	; 239
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	30 81       	ld	r19, Z
     ebc:	16 96       	adiw	r26, 0x06	; 6
     ebe:	2c 91       	ld	r18, X
     ec0:	23 2b       	or	r18, r19
     ec2:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     ec4:	dc 01       	movw	r26, r24
     ec6:	2c 91       	ld	r18, X
     ec8:	2b 7f       	andi	r18, 0xFB	; 251
     eca:	2c 93       	st	X, r18
          Can_set_idemsk();
     ecc:	2c 91       	ld	r18, X
     ece:	21 60       	ori	r18, 0x01	; 1
     ed0:	2c 93       	st	X, r18
          Can_config_rx();       
     ed2:	80 81       	ld	r24, Z
     ed4:	8f 73       	andi	r24, 0x3F	; 63
     ed6:	80 83       	st	Z, r24
     ed8:	80 81       	ld	r24, Z
     eda:	80 68       	ori	r24, 0x80	; 128
     edc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ede:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     ee0:	78 c2       	rjmp	.+1264   	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ee2:	1b 96       	adiw	r26, 0x0b	; 11
     ee4:	8c 91       	ld	r24, X
     ee6:	1b 97       	sbiw	r26, 0x0b	; 11
     ee8:	88 23       	and	r24, r24
     eea:	d9 f1       	breq	.+118    	; 0xf62 <__stack+0x663>
     eec:	14 96       	adiw	r26, 0x04	; 4
     eee:	9c 91       	ld	r25, X
     ef0:	14 97       	sbiw	r26, 0x04	; 4
     ef2:	92 95       	swap	r25
     ef4:	96 95       	lsr	r25
     ef6:	97 70       	andi	r25, 0x07	; 7
     ef8:	15 96       	adiw	r26, 0x05	; 5
     efa:	8c 91       	ld	r24, X
     efc:	15 97       	sbiw	r26, 0x05	; 5
     efe:	88 0f       	add	r24, r24
     f00:	88 0f       	add	r24, r24
     f02:	88 0f       	add	r24, r24
     f04:	89 0f       	add	r24, r25
     f06:	80 93 f3 00 	sts	0x00F3, r24
     f0a:	13 96       	adiw	r26, 0x03	; 3
     f0c:	9c 91       	ld	r25, X
     f0e:	13 97       	sbiw	r26, 0x03	; 3
     f10:	92 95       	swap	r25
     f12:	96 95       	lsr	r25
     f14:	97 70       	andi	r25, 0x07	; 7
     f16:	14 96       	adiw	r26, 0x04	; 4
     f18:	8c 91       	ld	r24, X
     f1a:	14 97       	sbiw	r26, 0x04	; 4
     f1c:	88 0f       	add	r24, r24
     f1e:	88 0f       	add	r24, r24
     f20:	88 0f       	add	r24, r24
     f22:	89 0f       	add	r24, r25
     f24:	80 93 f2 00 	sts	0x00F2, r24
     f28:	12 96       	adiw	r26, 0x02	; 2
     f2a:	9c 91       	ld	r25, X
     f2c:	12 97       	sbiw	r26, 0x02	; 2
     f2e:	92 95       	swap	r25
     f30:	96 95       	lsr	r25
     f32:	97 70       	andi	r25, 0x07	; 7
     f34:	13 96       	adiw	r26, 0x03	; 3
     f36:	8c 91       	ld	r24, X
     f38:	13 97       	sbiw	r26, 0x03	; 3
     f3a:	88 0f       	add	r24, r24
     f3c:	88 0f       	add	r24, r24
     f3e:	88 0f       	add	r24, r24
     f40:	89 0f       	add	r24, r25
     f42:	80 93 f1 00 	sts	0x00F1, r24
     f46:	12 96       	adiw	r26, 0x02	; 2
     f48:	8c 91       	ld	r24, X
     f4a:	12 97       	sbiw	r26, 0x02	; 2
     f4c:	88 0f       	add	r24, r24
     f4e:	88 0f       	add	r24, r24
     f50:	88 0f       	add	r24, r24
     f52:	80 93 f0 00 	sts	0x00F0, r24
     f56:	ef ee       	ldi	r30, 0xEF	; 239
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 61       	ori	r24, 0x10	; 16
     f5e:	80 83       	st	Z, r24
     f60:	1c c0       	rjmp	.+56     	; 0xf9a <__stack+0x69b>
          else              { Can_set_std_id(cmd->id.std);}
     f62:	12 96       	adiw	r26, 0x02	; 2
     f64:	8c 91       	ld	r24, X
     f66:	12 97       	sbiw	r26, 0x02	; 2
     f68:	86 95       	lsr	r24
     f6a:	86 95       	lsr	r24
     f6c:	86 95       	lsr	r24
     f6e:	13 96       	adiw	r26, 0x03	; 3
     f70:	9c 91       	ld	r25, X
     f72:	13 97       	sbiw	r26, 0x03	; 3
     f74:	e0 e2       	ldi	r30, 0x20	; 32
     f76:	9e 9f       	mul	r25, r30
     f78:	80 0d       	add	r24, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	80 93 f3 00 	sts	0x00F3, r24
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	8c 91       	ld	r24, X
     f84:	12 97       	sbiw	r26, 0x02	; 2
     f86:	82 95       	swap	r24
     f88:	88 0f       	add	r24, r24
     f8a:	80 7e       	andi	r24, 0xE0	; 224
     f8c:	80 93 f2 00 	sts	0x00F2, r24
     f90:	ef ee       	ldi	r30, 0xEF	; 239
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8f 7e       	andi	r24, 0xEF	; 239
     f98:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	9b 81       	ldd	r25, Y+3	; 0x03
     fa0:	92 95       	swap	r25
     fa2:	96 95       	lsr	r25
     fa4:	97 70       	andi	r25, 0x07	; 7
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	88 0f       	add	r24, r24
     faa:	88 0f       	add	r24, r24
     fac:	88 0f       	add	r24, r24
     fae:	89 0f       	add	r24, r25
     fb0:	80 93 f7 00 	sts	0x00F7, r24
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	92 95       	swap	r25
     fb8:	96 95       	lsr	r25
     fba:	97 70       	andi	r25, 0x07	; 7
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	88 0f       	add	r24, r24
     fc0:	88 0f       	add	r24, r24
     fc2:	88 0f       	add	r24, r24
     fc4:	89 0f       	add	r24, r25
     fc6:	80 93 f6 00 	sts	0x00F6, r24
     fca:	99 81       	ldd	r25, Y+1	; 0x01
     fcc:	92 95       	swap	r25
     fce:	96 95       	lsr	r25
     fd0:	97 70       	andi	r25, 0x07	; 7
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	88 0f       	add	r24, r24
     fd6:	88 0f       	add	r24, r24
     fd8:	88 0f       	add	r24, r24
     fda:	89 0f       	add	r24, r25
     fdc:	80 93 f5 00 	sts	0x00F5, r24
     fe0:	29 81       	ldd	r18, Y+1	; 0x01
     fe2:	22 0f       	add	r18, r18
     fe4:	22 0f       	add	r18, r18
     fe6:	22 0f       	add	r18, r18
     fe8:	84 ef       	ldi	r24, 0xF4	; 244
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	fc 01       	movw	r30, r24
     fee:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ff0:	ef ee       	ldi	r30, 0xEF	; 239
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	30 81       	ld	r19, Z
     ff6:	16 96       	adiw	r26, 0x06	; 6
     ff8:	2c 91       	ld	r18, X
     ffa:	16 97       	sbiw	r26, 0x06	; 6
     ffc:	23 2b       	or	r18, r19
     ffe:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1000:	1a 96       	adiw	r26, 0x0a	; 10
    1002:	1c 92       	st	X, r1
    1004:	dc 01       	movw	r26, r24
    1006:	2c 91       	ld	r18, X
    1008:	24 60       	ori	r18, 0x04	; 4
    100a:	2c 93       	st	X, r18
    100c:	a0 ef       	ldi	r26, 0xF0	; 240
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	2c 91       	ld	r18, X
    1012:	2b 7f       	andi	r18, 0xFB	; 251
    1014:	2c 93       	st	X, r18
          Can_set_idemsk();
    1016:	dc 01       	movw	r26, r24
    1018:	2c 91       	ld	r18, X
    101a:	21 60       	ori	r18, 0x01	; 1
    101c:	2c 93       	st	X, r18
          Can_config_rx();       
    101e:	80 81       	ld	r24, Z
    1020:	8f 73       	andi	r24, 0x3F	; 63
    1022:	80 83       	st	Z, r24
    1024:	80 81       	ld	r24, Z
    1026:	80 68       	ori	r24, 0x80	; 128
    1028:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    102a:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    102c:	d2 c1       	rjmp	.+932    	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    102e:	1b 96       	adiw	r26, 0x0b	; 11
    1030:	8c 91       	ld	r24, X
    1032:	1b 97       	sbiw	r26, 0x0b	; 11
    1034:	88 23       	and	r24, r24
    1036:	d9 f1       	breq	.+118    	; 0x10ae <__stack+0x7af>
    1038:	14 96       	adiw	r26, 0x04	; 4
    103a:	9c 91       	ld	r25, X
    103c:	14 97       	sbiw	r26, 0x04	; 4
    103e:	92 95       	swap	r25
    1040:	96 95       	lsr	r25
    1042:	97 70       	andi	r25, 0x07	; 7
    1044:	15 96       	adiw	r26, 0x05	; 5
    1046:	8c 91       	ld	r24, X
    1048:	15 97       	sbiw	r26, 0x05	; 5
    104a:	88 0f       	add	r24, r24
    104c:	88 0f       	add	r24, r24
    104e:	88 0f       	add	r24, r24
    1050:	89 0f       	add	r24, r25
    1052:	80 93 f3 00 	sts	0x00F3, r24
    1056:	13 96       	adiw	r26, 0x03	; 3
    1058:	9c 91       	ld	r25, X
    105a:	13 97       	sbiw	r26, 0x03	; 3
    105c:	92 95       	swap	r25
    105e:	96 95       	lsr	r25
    1060:	97 70       	andi	r25, 0x07	; 7
    1062:	14 96       	adiw	r26, 0x04	; 4
    1064:	8c 91       	ld	r24, X
    1066:	14 97       	sbiw	r26, 0x04	; 4
    1068:	88 0f       	add	r24, r24
    106a:	88 0f       	add	r24, r24
    106c:	88 0f       	add	r24, r24
    106e:	89 0f       	add	r24, r25
    1070:	80 93 f2 00 	sts	0x00F2, r24
    1074:	12 96       	adiw	r26, 0x02	; 2
    1076:	9c 91       	ld	r25, X
    1078:	12 97       	sbiw	r26, 0x02	; 2
    107a:	92 95       	swap	r25
    107c:	96 95       	lsr	r25
    107e:	97 70       	andi	r25, 0x07	; 7
    1080:	13 96       	adiw	r26, 0x03	; 3
    1082:	8c 91       	ld	r24, X
    1084:	13 97       	sbiw	r26, 0x03	; 3
    1086:	88 0f       	add	r24, r24
    1088:	88 0f       	add	r24, r24
    108a:	88 0f       	add	r24, r24
    108c:	89 0f       	add	r24, r25
    108e:	80 93 f1 00 	sts	0x00F1, r24
    1092:	12 96       	adiw	r26, 0x02	; 2
    1094:	8c 91       	ld	r24, X
    1096:	12 97       	sbiw	r26, 0x02	; 2
    1098:	88 0f       	add	r24, r24
    109a:	88 0f       	add	r24, r24
    109c:	88 0f       	add	r24, r24
    109e:	80 93 f0 00 	sts	0x00F0, r24
    10a2:	ef ee       	ldi	r30, 0xEF	; 239
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 61       	ori	r24, 0x10	; 16
    10aa:	80 83       	st	Z, r24
    10ac:	1c c0       	rjmp	.+56     	; 0x10e6 <__stack+0x7e7>
          else              { Can_set_std_id(cmd->id.std);}
    10ae:	12 96       	adiw	r26, 0x02	; 2
    10b0:	8c 91       	ld	r24, X
    10b2:	12 97       	sbiw	r26, 0x02	; 2
    10b4:	86 95       	lsr	r24
    10b6:	86 95       	lsr	r24
    10b8:	86 95       	lsr	r24
    10ba:	13 96       	adiw	r26, 0x03	; 3
    10bc:	9c 91       	ld	r25, X
    10be:	13 97       	sbiw	r26, 0x03	; 3
    10c0:	e0 e2       	ldi	r30, 0x20	; 32
    10c2:	9e 9f       	mul	r25, r30
    10c4:	80 0d       	add	r24, r0
    10c6:	11 24       	eor	r1, r1
    10c8:	80 93 f3 00 	sts	0x00F3, r24
    10cc:	12 96       	adiw	r26, 0x02	; 2
    10ce:	8c 91       	ld	r24, X
    10d0:	12 97       	sbiw	r26, 0x02	; 2
    10d2:	82 95       	swap	r24
    10d4:	88 0f       	add	r24, r24
    10d6:	80 7e       	andi	r24, 0xE0	; 224
    10d8:	80 93 f2 00 	sts	0x00F2, r24
    10dc:	ef ee       	ldi	r30, 0xEF	; 239
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	8f 7e       	andi	r24, 0xEF	; 239
    10e4:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	9b 81       	ldd	r25, Y+3	; 0x03
    10ec:	92 95       	swap	r25
    10ee:	96 95       	lsr	r25
    10f0:	97 70       	andi	r25, 0x07	; 7
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	88 0f       	add	r24, r24
    10f6:	88 0f       	add	r24, r24
    10f8:	88 0f       	add	r24, r24
    10fa:	89 0f       	add	r24, r25
    10fc:	80 93 f7 00 	sts	0x00F7, r24
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	92 95       	swap	r25
    1104:	96 95       	lsr	r25
    1106:	97 70       	andi	r25, 0x07	; 7
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 0f       	add	r24, r24
    110c:	88 0f       	add	r24, r24
    110e:	88 0f       	add	r24, r24
    1110:	89 0f       	add	r24, r25
    1112:	80 93 f6 00 	sts	0x00F6, r24
    1116:	99 81       	ldd	r25, Y+1	; 0x01
    1118:	92 95       	swap	r25
    111a:	96 95       	lsr	r25
    111c:	97 70       	andi	r25, 0x07	; 7
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	88 0f       	add	r24, r24
    1122:	88 0f       	add	r24, r24
    1124:	88 0f       	add	r24, r24
    1126:	89 0f       	add	r24, r25
    1128:	80 93 f5 00 	sts	0x00F5, r24
    112c:	29 81       	ldd	r18, Y+1	; 0x01
    112e:	22 0f       	add	r18, r18
    1130:	22 0f       	add	r18, r18
    1132:	22 0f       	add	r18, r18
    1134:	84 ef       	ldi	r24, 0xF4	; 244
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	fc 01       	movw	r30, r24
    113a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    113c:	ef ee       	ldi	r30, 0xEF	; 239
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	30 81       	ld	r19, Z
    1142:	16 96       	adiw	r26, 0x06	; 6
    1144:	2c 91       	ld	r18, X
    1146:	16 97       	sbiw	r26, 0x06	; 6
    1148:	23 2b       	or	r18, r19
    114a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    114c:	21 e0       	ldi	r18, 0x01	; 1
    114e:	1a 96       	adiw	r26, 0x0a	; 10
    1150:	2c 93       	st	X, r18
    1152:	dc 01       	movw	r26, r24
    1154:	2c 91       	ld	r18, X
    1156:	24 60       	ori	r18, 0x04	; 4
    1158:	2c 93       	st	X, r18
    115a:	a0 ef       	ldi	r26, 0xF0	; 240
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	2c 91       	ld	r18, X
    1160:	24 60       	ori	r18, 0x04	; 4
    1162:	2c 93       	st	X, r18
          Can_clear_rplv();
    1164:	20 81       	ld	r18, Z
    1166:	2f 7d       	andi	r18, 0xDF	; 223
    1168:	20 83       	st	Z, r18
          Can_set_idemsk();
    116a:	dc 01       	movw	r26, r24
    116c:	2c 91       	ld	r18, X
    116e:	21 60       	ori	r18, 0x01	; 1
    1170:	2c 93       	st	X, r18
          Can_config_rx();       
    1172:	80 81       	ld	r24, Z
    1174:	8f 73       	andi	r24, 0x3F	; 63
    1176:	80 83       	st	Z, r24
    1178:	80 81       	ld	r24, Z
    117a:	80 68       	ori	r24, 0x80	; 128
    117c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    117e:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1180:	28 c1       	rjmp	.+592    	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	8a ef       	ldi	r24, 0xFA	; 250
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	17 96       	adiw	r26, 0x07	; 7
    118a:	ed 91       	ld	r30, X+
    118c:	fc 91       	ld	r31, X
    118e:	18 97       	sbiw	r26, 0x08	; 8
    1190:	e2 0f       	add	r30, r18
    1192:	f1 1d       	adc	r31, r1
    1194:	30 81       	ld	r19, Z
    1196:	fc 01       	movw	r30, r24
    1198:	30 83       	st	Z, r19
    119a:	2f 5f       	subi	r18, 0xFF	; 255
    119c:	16 96       	adiw	r26, 0x06	; 6
    119e:	3c 91       	ld	r19, X
    11a0:	16 97       	sbiw	r26, 0x06	; 6
    11a2:	23 17       	cp	r18, r19
    11a4:	88 f3       	brcs	.-30     	; 0x1188 <__stack+0x889>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    11a6:	19 82       	std	Y+1, r1	; 0x01
    11a8:	9b 81       	ldd	r25, Y+3	; 0x03
    11aa:	92 95       	swap	r25
    11ac:	96 95       	lsr	r25
    11ae:	97 70       	andi	r25, 0x07	; 7
    11b0:	8c 81       	ldd	r24, Y+4	; 0x04
    11b2:	88 0f       	add	r24, r24
    11b4:	88 0f       	add	r24, r24
    11b6:	88 0f       	add	r24, r24
    11b8:	89 0f       	add	r24, r25
    11ba:	80 93 f7 00 	sts	0x00F7, r24
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	92 95       	swap	r25
    11c2:	96 95       	lsr	r25
    11c4:	97 70       	andi	r25, 0x07	; 7
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	88 0f       	add	r24, r24
    11ca:	88 0f       	add	r24, r24
    11cc:	88 0f       	add	r24, r24
    11ce:	89 0f       	add	r24, r25
    11d0:	80 93 f6 00 	sts	0x00F6, r24
    11d4:	99 81       	ldd	r25, Y+1	; 0x01
    11d6:	92 95       	swap	r25
    11d8:	96 95       	lsr	r25
    11da:	97 70       	andi	r25, 0x07	; 7
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	88 0f       	add	r24, r24
    11e0:	88 0f       	add	r24, r24
    11e2:	88 0f       	add	r24, r24
    11e4:	89 0f       	add	r24, r25
    11e6:	80 93 f5 00 	sts	0x00F5, r24
    11ea:	29 81       	ldd	r18, Y+1	; 0x01
    11ec:	22 0f       	add	r18, r18
    11ee:	22 0f       	add	r18, r18
    11f0:	22 0f       	add	r18, r18
    11f2:	84 ef       	ldi	r24, 0xF4	; 244
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    11fa:	ef ee       	ldi	r30, 0xEF	; 239
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	30 81       	ld	r19, Z
    1200:	16 96       	adiw	r26, 0x06	; 6
    1202:	2c 91       	ld	r18, X
    1204:	16 97       	sbiw	r26, 0x06	; 6
    1206:	23 2b       	or	r18, r19
    1208:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	1a 96       	adiw	r26, 0x0a	; 10
    120e:	2c 93       	st	X, r18
    1210:	dc 01       	movw	r26, r24
    1212:	2c 91       	ld	r18, X
    1214:	24 60       	ori	r18, 0x04	; 4
    1216:	2c 93       	st	X, r18
    1218:	a0 ef       	ldi	r26, 0xF0	; 240
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	2c 91       	ld	r18, X
    121e:	24 60       	ori	r18, 0x04	; 4
    1220:	2c 93       	st	X, r18
          Can_set_rplv();
    1222:	20 81       	ld	r18, Z
    1224:	20 62       	ori	r18, 0x20	; 32
    1226:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1228:	dc 01       	movw	r26, r24
    122a:	2c 91       	ld	r18, X
    122c:	2e 7f       	andi	r18, 0xFE	; 254
    122e:	2c 93       	st	X, r18
          Can_config_rx();       
    1230:	80 81       	ld	r24, Z
    1232:	8f 73       	andi	r24, 0x3F	; 63
    1234:	80 83       	st	Z, r24
    1236:	80 81       	ld	r24, Z
    1238:	80 68       	ori	r24, 0x80	; 128
    123a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    123c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    123e:	c9 c0       	rjmp	.+402    	; 0x13d2 <__stack+0xad3>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1240:	1b 96       	adiw	r26, 0x0b	; 11
    1242:	8c 91       	ld	r24, X
    1244:	1b 97       	sbiw	r26, 0x0b	; 11
    1246:	88 23       	and	r24, r24
    1248:	d9 f1       	breq	.+118    	; 0x12c0 <__stack+0x9c1>
    124a:	14 96       	adiw	r26, 0x04	; 4
    124c:	9c 91       	ld	r25, X
    124e:	14 97       	sbiw	r26, 0x04	; 4
    1250:	92 95       	swap	r25
    1252:	96 95       	lsr	r25
    1254:	97 70       	andi	r25, 0x07	; 7
    1256:	15 96       	adiw	r26, 0x05	; 5
    1258:	8c 91       	ld	r24, X
    125a:	15 97       	sbiw	r26, 0x05	; 5
    125c:	88 0f       	add	r24, r24
    125e:	88 0f       	add	r24, r24
    1260:	88 0f       	add	r24, r24
    1262:	89 0f       	add	r24, r25
    1264:	80 93 f3 00 	sts	0x00F3, r24
    1268:	13 96       	adiw	r26, 0x03	; 3
    126a:	9c 91       	ld	r25, X
    126c:	13 97       	sbiw	r26, 0x03	; 3
    126e:	92 95       	swap	r25
    1270:	96 95       	lsr	r25
    1272:	97 70       	andi	r25, 0x07	; 7
    1274:	14 96       	adiw	r26, 0x04	; 4
    1276:	8c 91       	ld	r24, X
    1278:	14 97       	sbiw	r26, 0x04	; 4
    127a:	88 0f       	add	r24, r24
    127c:	88 0f       	add	r24, r24
    127e:	88 0f       	add	r24, r24
    1280:	89 0f       	add	r24, r25
    1282:	80 93 f2 00 	sts	0x00F2, r24
    1286:	12 96       	adiw	r26, 0x02	; 2
    1288:	9c 91       	ld	r25, X
    128a:	12 97       	sbiw	r26, 0x02	; 2
    128c:	92 95       	swap	r25
    128e:	96 95       	lsr	r25
    1290:	97 70       	andi	r25, 0x07	; 7
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	8c 91       	ld	r24, X
    1296:	13 97       	sbiw	r26, 0x03	; 3
    1298:	88 0f       	add	r24, r24
    129a:	88 0f       	add	r24, r24
    129c:	88 0f       	add	r24, r24
    129e:	89 0f       	add	r24, r25
    12a0:	80 93 f1 00 	sts	0x00F1, r24
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	8c 91       	ld	r24, X
    12a8:	12 97       	sbiw	r26, 0x02	; 2
    12aa:	88 0f       	add	r24, r24
    12ac:	88 0f       	add	r24, r24
    12ae:	88 0f       	add	r24, r24
    12b0:	80 93 f0 00 	sts	0x00F0, r24
    12b4:	ef ee       	ldi	r30, 0xEF	; 239
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 61       	ori	r24, 0x10	; 16
    12bc:	80 83       	st	Z, r24
    12be:	1c c0       	rjmp	.+56     	; 0x12f8 <__stack+0x9f9>
          else              { Can_set_std_id(cmd->id.std);}
    12c0:	12 96       	adiw	r26, 0x02	; 2
    12c2:	8c 91       	ld	r24, X
    12c4:	12 97       	sbiw	r26, 0x02	; 2
    12c6:	86 95       	lsr	r24
    12c8:	86 95       	lsr	r24
    12ca:	86 95       	lsr	r24
    12cc:	13 96       	adiw	r26, 0x03	; 3
    12ce:	9c 91       	ld	r25, X
    12d0:	13 97       	sbiw	r26, 0x03	; 3
    12d2:	e0 e2       	ldi	r30, 0x20	; 32
    12d4:	9e 9f       	mul	r25, r30
    12d6:	80 0d       	add	r24, r0
    12d8:	11 24       	eor	r1, r1
    12da:	80 93 f3 00 	sts	0x00F3, r24
    12de:	12 96       	adiw	r26, 0x02	; 2
    12e0:	8c 91       	ld	r24, X
    12e2:	12 97       	sbiw	r26, 0x02	; 2
    12e4:	82 95       	swap	r24
    12e6:	88 0f       	add	r24, r24
    12e8:	80 7e       	andi	r24, 0xE0	; 224
    12ea:	80 93 f2 00 	sts	0x00F2, r24
    12ee:	ef ee       	ldi	r30, 0xEF	; 239
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 7e       	andi	r24, 0xEF	; 239
    12f6:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    12f8:	16 96       	adiw	r26, 0x06	; 6
    12fa:	8c 91       	ld	r24, X
    12fc:	16 97       	sbiw	r26, 0x06	; 6
    12fe:	88 23       	and	r24, r24
    1300:	91 f0       	breq	.+36     	; 0x1326 <__stack+0xa27>
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	8a ef       	ldi	r24, 0xFA	; 250
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	17 96       	adiw	r26, 0x07	; 7
    130a:	ed 91       	ld	r30, X+
    130c:	fc 91       	ld	r31, X
    130e:	18 97       	sbiw	r26, 0x08	; 8
    1310:	e2 0f       	add	r30, r18
    1312:	f1 1d       	adc	r31, r1
    1314:	30 81       	ld	r19, Z
    1316:	fc 01       	movw	r30, r24
    1318:	30 83       	st	Z, r19
    131a:	2f 5f       	subi	r18, 0xFF	; 255
    131c:	16 96       	adiw	r26, 0x06	; 6
    131e:	3c 91       	ld	r19, X
    1320:	16 97       	sbiw	r26, 0x06	; 6
    1322:	23 17       	cp	r18, r19
    1324:	88 f3       	brcs	.-30     	; 0x1308 <__stack+0xa09>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	9b 81       	ldd	r25, Y+3	; 0x03
    132c:	92 95       	swap	r25
    132e:	96 95       	lsr	r25
    1330:	97 70       	andi	r25, 0x07	; 7
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	88 0f       	add	r24, r24
    1336:	88 0f       	add	r24, r24
    1338:	88 0f       	add	r24, r24
    133a:	89 0f       	add	r24, r25
    133c:	80 93 f7 00 	sts	0x00F7, r24
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	92 95       	swap	r25
    1344:	96 95       	lsr	r25
    1346:	97 70       	andi	r25, 0x07	; 7
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	88 0f       	add	r24, r24
    134c:	88 0f       	add	r24, r24
    134e:	88 0f       	add	r24, r24
    1350:	89 0f       	add	r24, r25
    1352:	80 93 f6 00 	sts	0x00F6, r24
    1356:	99 81       	ldd	r25, Y+1	; 0x01
    1358:	92 95       	swap	r25
    135a:	96 95       	lsr	r25
    135c:	97 70       	andi	r25, 0x07	; 7
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	88 0f       	add	r24, r24
    1362:	88 0f       	add	r24, r24
    1364:	88 0f       	add	r24, r24
    1366:	89 0f       	add	r24, r25
    1368:	80 93 f5 00 	sts	0x00F5, r24
    136c:	29 81       	ldd	r18, Y+1	; 0x01
    136e:	22 0f       	add	r18, r18
    1370:	22 0f       	add	r18, r18
    1372:	22 0f       	add	r18, r18
    1374:	84 ef       	ldi	r24, 0xF4	; 244
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	fc 01       	movw	r30, r24
    137a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    137c:	ef ee       	ldi	r30, 0xEF	; 239
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	30 81       	ld	r19, Z
    1382:	16 96       	adiw	r26, 0x06	; 6
    1384:	2c 91       	ld	r18, X
    1386:	16 97       	sbiw	r26, 0x06	; 6
    1388:	23 2b       	or	r18, r19
    138a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    138c:	21 e0       	ldi	r18, 0x01	; 1
    138e:	1a 96       	adiw	r26, 0x0a	; 10
    1390:	2c 93       	st	X, r18
    1392:	dc 01       	movw	r26, r24
    1394:	2c 91       	ld	r18, X
    1396:	24 60       	ori	r18, 0x04	; 4
    1398:	2c 93       	st	X, r18
    139a:	a0 ef       	ldi	r26, 0xF0	; 240
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	2c 91       	ld	r18, X
    13a0:	24 60       	ori	r18, 0x04	; 4
    13a2:	2c 93       	st	X, r18
          Can_set_rplv();
    13a4:	20 81       	ld	r18, Z
    13a6:	20 62       	ori	r18, 0x20	; 32
    13a8:	20 83       	st	Z, r18
          Can_set_idemsk();
    13aa:	dc 01       	movw	r26, r24
    13ac:	2c 91       	ld	r18, X
    13ae:	21 60       	ori	r18, 0x01	; 1
    13b0:	2c 93       	st	X, r18
          Can_config_rx();       
    13b2:	80 81       	ld	r24, Z
    13b4:	8f 73       	andi	r24, 0x3F	; 63
    13b6:	80 83       	st	Z, r24
    13b8:	80 81       	ld	r24, Z
    13ba:	80 68       	ori	r24, 0x80	; 128
    13bc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    13be:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <__stack+0xad3>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    13c2:	19 96       	adiw	r26, 0x09	; 9
    13c4:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    13c6:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <__stack+0xad3>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    13ca:	8f e1       	ldi	r24, 0x1F	; 31
    13cc:	19 96       	adiw	r26, 0x09	; 9
    13ce:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    13d2:	0f 90       	pop	r0
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    13e2:	88 23       	and	r24, r24
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <can_get_status+0xe>
    13e6:	d5 c0       	rjmp	.+426    	; 0x1592 <can_get_status+0x1b8>
    13e8:	8f 31       	cpi	r24, 0x1F	; 31
    13ea:	09 f4       	brne	.+2      	; 0x13ee <can_get_status+0x14>
    13ec:	d4 c0       	rjmp	.+424    	; 0x1596 <can_get_status+0x1bc>
    13ee:	8f 3f       	cpi	r24, 0xFF	; 255
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <can_get_status+0x1a>
    13f2:	d3 c0       	rjmp	.+422    	; 0x159a <can_get_status+0x1c0>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    13f4:	62 95       	swap	r22
    13f6:	60 7f       	andi	r22, 0xF0	; 240
    13f8:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    13fc:	0e 94 84 03 	call	0x708	; 0x708 <can_get_mob_status>
    
    switch (a_status)
    1400:	80 32       	cpi	r24, 0x20	; 32
    1402:	61 f0       	breq	.+24     	; 0x141c <can_get_status+0x42>
    1404:	20 f4       	brcc	.+8      	; 0x140e <can_get_status+0x34>
    1406:	88 23       	and	r24, r24
    1408:	09 f4       	brne	.+2      	; 0x140c <can_get_status+0x32>
    140a:	c9 c0       	rjmp	.+402    	; 0x159e <can_get_status+0x1c4>
    140c:	b8 c0       	rjmp	.+368    	; 0x157e <can_get_status+0x1a4>
    140e:	80 34       	cpi	r24, 0x40	; 64
    1410:	09 f4       	brne	.+2      	; 0x1414 <can_get_status+0x3a>
    1412:	aa c0       	rjmp	.+340    	; 0x1568 <can_get_status+0x18e>
    1414:	80 3a       	cpi	r24, 0xA0	; 160
    1416:	09 f4       	brne	.+2      	; 0x141a <can_get_status+0x40>
    1418:	4e c0       	rjmp	.+156    	; 0x14b6 <can_get_status+0xdc>
    141a:	b1 c0       	rjmp	.+354    	; 0x157e <can_get_status+0x1a4>
        case MOB_RX_COMPLETED:
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
            cmd->ctrl.rtr = Can_get_rtr();
    141c:	80 91 f0 00 	lds	r24, 0x00F0
    1420:	82 fb       	bst	r24, 2
    1422:	88 27       	eor	r24, r24
    1424:	80 f9       	bld	r24, 0
    1426:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1428:	80 91 ef 00 	lds	r24, 0x00EF
    142c:	84 ff       	sbrs	r24, 4
    142e:	2d c0       	rjmp	.+90     	; 0x148a <can_get_status+0xb0>
            {
	            cmd->ctrl.ide = 1; // extended frame
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    1434:	e3 ef       	ldi	r30, 0xF3	; 243
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	86 95       	lsr	r24
    143c:	86 95       	lsr	r24
    143e:	86 95       	lsr	r24
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	a2 ef       	ldi	r26, 0xF2	; 242
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	8c 91       	ld	r24, X
    1448:	90 81       	ld	r25, Z
    144a:	86 95       	lsr	r24
    144c:	86 95       	lsr	r24
    144e:	86 95       	lsr	r24
    1450:	20 e2       	ldi	r18, 0x20	; 32
    1452:	92 9f       	mul	r25, r18
    1454:	80 0d       	add	r24, r0
    1456:	11 24       	eor	r1, r1
    1458:	8c 83       	std	Y+4, r24	; 0x04
    145a:	e1 ef       	ldi	r30, 0xF1	; 241
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	9c 91       	ld	r25, X
    1462:	86 95       	lsr	r24
    1464:	86 95       	lsr	r24
    1466:	86 95       	lsr	r24
    1468:	20 e2       	ldi	r18, 0x20	; 32
    146a:	92 9f       	mul	r25, r18
    146c:	80 0d       	add	r24, r0
    146e:	11 24       	eor	r1, r1
    1470:	8b 83       	std	Y+3, r24	; 0x03
    1472:	80 91 f0 00 	lds	r24, 0x00F0
    1476:	90 81       	ld	r25, Z
    1478:	86 95       	lsr	r24
    147a:	86 95       	lsr	r24
    147c:	86 95       	lsr	r24
    147e:	20 e2       	ldi	r18, 0x20	; 32
    1480:	92 9f       	mul	r25, r18
    1482:	80 0d       	add	r24, r0
    1484:	11 24       	eor	r1, r1
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	07 c0       	rjmp	.+14     	; 0x1498 <can_get_status+0xbe>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    148a:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    148c:	e3 ef       	ldi	r30, 0xF3	; 243
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 91 f2 00 	lds	r24, 0x00F2
    1496:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    1498:	80 e2       	ldi	r24, 0x20	; 32
    149a:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    149c:	8f 81       	ldd	r24, Y+7	; 0x07
    149e:	98 85       	ldd	r25, Y+8	; 0x08
    14a0:	0e 94 9a 03 	call	0x734	; 0x734 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    14a4:	ef ee       	ldi	r30, 0xEF	; 239
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 73       	andi	r24, 0x3F	; 63
    14ac:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    14ae:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    14b2:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    14b4:	75 c0       	rjmp	.+234    	; 0x15a0 <can_get_status+0x1c6>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    14b6:	80 91 f0 00 	lds	r24, 0x00F0
    14ba:	82 fb       	bst	r24, 2
    14bc:	88 27       	eor	r24, r24
    14be:	80 f9       	bld	r24, 0
    14c0:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    14c2:	80 91 ef 00 	lds	r24, 0x00EF
    14c6:	84 ff       	sbrs	r24, 4
    14c8:	2d c0       	rjmp	.+90     	; 0x1524 <can_get_status+0x14a>
            {
                cmd->ctrl.ide = 1; // extended frame
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    14ce:	e3 ef       	ldi	r30, 0xF3	; 243
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	86 95       	lsr	r24
    14d6:	86 95       	lsr	r24
    14d8:	86 95       	lsr	r24
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	a2 ef       	ldi	r26, 0xF2	; 242
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	8c 91       	ld	r24, X
    14e2:	90 81       	ld	r25, Z
    14e4:	86 95       	lsr	r24
    14e6:	86 95       	lsr	r24
    14e8:	86 95       	lsr	r24
    14ea:	20 e2       	ldi	r18, 0x20	; 32
    14ec:	92 9f       	mul	r25, r18
    14ee:	80 0d       	add	r24, r0
    14f0:	11 24       	eor	r1, r1
    14f2:	8c 83       	std	Y+4, r24	; 0x04
    14f4:	e1 ef       	ldi	r30, 0xF1	; 241
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	9c 91       	ld	r25, X
    14fc:	86 95       	lsr	r24
    14fe:	86 95       	lsr	r24
    1500:	86 95       	lsr	r24
    1502:	20 e2       	ldi	r18, 0x20	; 32
    1504:	92 9f       	mul	r25, r18
    1506:	80 0d       	add	r24, r0
    1508:	11 24       	eor	r1, r1
    150a:	8b 83       	std	Y+3, r24	; 0x03
    150c:	80 91 f0 00 	lds	r24, 0x00F0
    1510:	90 81       	ld	r25, Z
    1512:	86 95       	lsr	r24
    1514:	86 95       	lsr	r24
    1516:	86 95       	lsr	r24
    1518:	20 e2       	ldi	r18, 0x20	; 32
    151a:	92 9f       	mul	r25, r18
    151c:	80 0d       	add	r24, r0
    151e:	11 24       	eor	r1, r1
    1520:	8a 83       	std	Y+2, r24	; 0x02
    1522:	13 c0       	rjmp	.+38     	; 0x154a <can_get_status+0x170>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1524:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1526:	e3 ef       	ldi	r30, 0xF3	; 243
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	82 95       	swap	r24
    152e:	86 95       	lsr	r24
    1530:	87 70       	andi	r24, 0x07	; 7
    1532:	8b 83       	std	Y+3, r24	; 0x03
    1534:	80 91 f2 00 	lds	r24, 0x00F2
    1538:	90 81       	ld	r25, Z
    153a:	99 0f       	add	r25, r25
    153c:	99 0f       	add	r25, r25
    153e:	99 0f       	add	r25, r25
    1540:	82 95       	swap	r24
    1542:	86 95       	lsr	r24
    1544:	87 70       	andi	r24, 0x07	; 7
    1546:	89 0f       	add	r24, r25
    1548:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    154a:	80 ea       	ldi	r24, 0xA0	; 160
    154c:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    154e:	8f 81       	ldd	r24, Y+7	; 0x07
    1550:	98 85       	ldd	r25, Y+8	; 0x08
    1552:	0e 94 9a 03 	call	0x734	; 0x734 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1556:	ef ee       	ldi	r30, 0xEF	; 239
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 73       	andi	r24, 0x3F	; 63
    155e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    1560:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    1564:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1566:	1c c0       	rjmp	.+56     	; 0x15a0 <can_get_status+0x1c6>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1568:	80 e4       	ldi	r24, 0x40	; 64
    156a:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    156c:	ef ee       	ldi	r30, 0xEF	; 239
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 73       	andi	r24, 0x3F	; 63
    1574:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1576:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    157a:	80 e4       	ldi	r24, 0x40	; 64
            break;
    157c:	11 c0       	rjmp	.+34     	; 0x15a0 <can_get_status+0x1c6>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    157e:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    1580:	ef ee       	ldi	r30, 0xEF	; 239
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	8f 73       	andi	r24, 0x3F	; 63
    1588:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    158a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    158e:	82 e0       	ldi	r24, 0x02	; 2
            break;
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <can_get_status+0x1c6>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <can_get_status+0x1c6>
    1596:	82 e0       	ldi	r24, 0x02	; 2
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <can_get_status+0x1c6>
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <can_get_status+0x1c6>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    159e:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    15a6:	83 e1       	ldi	r24, 0x13	; 19
    15a8:	80 93 2c 01 	sts	0x012C, r24
	send_arr[6] = MT_COM;
    15ac:	82 e0       	ldi	r24, 0x02	; 2
    15ae:	80 93 2b 01 	sts	0x012B, r24
	send_arr[5] = RESPONSE;
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	80 93 2a 01 	sts	0x012A, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    15b8:	61 e1       	ldi	r22, 0x11	; 17
    15ba:	85 e2       	ldi	r24, 0x25	; 37
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	0e 94 72 00 	call	0xe4	; 0xe4 <can_send_message>
	send_now = 0;
    15c2:	10 92 70 01 	sts	0x0170, r1
    15c6:	08 95       	ret

000015c8 <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    15c8:	83 e1       	ldi	r24, 0x13	; 19
    15ca:	80 93 2c 01 	sts	0x012C, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	80 93 2b 01 	sts	0x012B, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    15d4:	60 e1       	ldi	r22, 0x10	; 16
    15d6:	85 e2       	ldi	r24, 0x25	; 37
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 72 00 	call	0xe4	; 0xe4 <can_send_message>
	send_hk = 0;
    15de:	10 92 82 01 	sts	0x0182, r1
    15e2:	08 95       	ret

000015e4 <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <send_sensor_data+0xa>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[3];
    15f2:	10 91 63 01 	lds	r17, 0x0163
	req_by = data_req_arr[7] >> 4;
    15f6:	00 91 67 01 	lds	r16, 0x0167
    15fa:	02 95       	swap	r16
    15fc:	0f 70       	andi	r16, 0x0F	; 15
	
	if(sensor_name == EPS_TEMP)
    15fe:	1a 30       	cpi	r17, 0x0A	; 10
    1600:	69 f4       	brne	.+26     	; 0x161c <send_sensor_data+0x38>
	{
		spi_retrieve_temp(&high, &low);
    1602:	be 01       	movw	r22, r28
    1604:	6e 5f       	subi	r22, 0xFE	; 254
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	ce 01       	movw	r24, r28
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	80 93 26 01 	sts	0x0126, r24
		send_arr[0] = low;
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	80 93 25 01 	sts	0x0125, r24
	//}
	//if(sensor_name == OBC_I)
	//{
	//}

	send_arr[7] = (SELF_ID << 4)|req_by;
    161c:	00 61       	ori	r16, 0x10	; 16
    161e:	00 93 2c 01 	sts	0x012C, r16
	send_arr[6] = MT_DATA;
    1622:	10 92 2b 01 	sts	0x012B, r1
	send_arr[5] = sensor_name;				
    1626:	10 93 2a 01 	sts	0x012A, r17
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    162a:	6a e0       	ldi	r22, 0x0A	; 10
    162c:	85 e2       	ldi	r24, 0x25	; 37
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	0e 94 72 00 	call	0xe4	; 0xe4 <can_send_message>
	send_data = 0;
    1634:	10 92 a2 01 	sts	0x01A2, r1
	
	return;
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	08 95       	ret

00001646 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1646:	83 e1       	ldi	r24, 0x13	; 19
    1648:	80 93 2c 01 	sts	0x012C, r24
	send_arr[6] = MT_DATA;
    164c:	10 92 2b 01 	sts	0x012B, r1
	send_arr[5] = COMS_PACKET;
    1650:	82 e0       	ldi	r24, 0x02	; 2
    1652:	80 93 2a 01 	sts	0x012A, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    1656:	80 91 73 01 	lds	r24, 0x0173
    165a:	80 93 25 01 	sts	0x0125, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    165e:	6a e0       	ldi	r22, 0x0A	; 10
    1660:	85 e2       	ldi	r24, 0x25	; 37
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 72 00 	call	0xe4	; 0xe4 <can_send_message>
	msg_received = 0;
    1668:	10 92 0c 01 	sts	0x010C, r1
    166c:	08 95       	ret

0000166e <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    166e:	90 91 cc 01 	lds	r25, 0x01CC
	read_ptr = read_arr[0];
    1672:	e0 91 c9 01 	lds	r30, 0x01C9
    1676:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    1678:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    167a:	20 91 d0 01 	lds	r18, 0x01D0
    167e:	20 61       	ori	r18, 0x10	; 16
    1680:	20 93 2c 01 	sts	0x012C, r18
	send_arr[6] = MT_COM;
    1684:	22 e0       	ldi	r18, 0x02	; 2
    1686:	20 93 2b 01 	sts	0x012B, r18
	send_arr[5] = ACK_READ;
    168a:	26 e0       	ldi	r18, 0x06	; 6
    168c:	20 93 2a 01 	sts	0x012A, r18
	send_arr[3] = passkey;
    1690:	90 93 28 01 	sts	0x0128, r25
	send_arr[0] = read_val;
    1694:	80 93 25 01 	sts	0x0125, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1698:	61 e1       	ldi	r22, 0x11	; 17
    169a:	85 e2       	ldi	r24, 0x25	; 37
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	0e 94 72 00 	call	0xe4	; 0xe4 <can_send_message>
	read_response = 0;
    16a2:	10 92 79 01 	sts	0x0179, r1
    16a6:	08 95       	ret

000016a8 <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    16a8:	80 91 03 01 	lds	r24, 0x0103
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    16ac:	20 91 00 01 	lds	r18, 0x0100
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    16b0:	90 91 d0 01 	lds	r25, 0x01D0
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    16b4:	e0 91 01 01 	lds	r30, 0x0101
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    16ba:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    16bc:	90 61       	ori	r25, 0x10	; 16
    16be:	90 93 2c 01 	sts	0x012C, r25
	send_arr[6] = MT_COM;
    16c2:	92 e0       	ldi	r25, 0x02	; 2
    16c4:	90 93 2b 01 	sts	0x012B, r25
	send_arr[5] = ACK_WRITE;
    16c8:	98 e0       	ldi	r25, 0x08	; 8
    16ca:	90 93 2a 01 	sts	0x012A, r25
	send_arr[3] = passkey;
    16ce:	80 93 28 01 	sts	0x0128, r24
	send_arr[0] = ret_val;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	80 93 25 01 	sts	0x0125, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    16d8:	61 e1       	ldi	r22, 0x11	; 17
    16da:	85 e2       	ldi	r24, 0x25	; 37
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	0e 94 72 00 	call	0xe4	; 0xe4 <can_send_message>
	write_response = 0;
    16e2:	10 92 47 01 	sts	0x0147, r1
    16e6:	08 95       	ret

000016e8 <set_sensor_highf>:


void set_sensor_highf(void)
{
	uint8_t low, sensor_name, req_by;
	sensor_name = sensh_arr[3];
    16e8:	20 91 4b 01 	lds	r18, 0x014B
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    16ec:	2a 30       	cpi	r18, 0x0A	; 10
    16ee:	69 f4       	brne	.+26     	; 0x170a <set_sensor_highf+0x22>
	{
		epstemp_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		epstemp_high |= (low << 8);
    16f0:	80 91 49 01 	lds	r24, 0x0149
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	98 2f       	mov	r25, r24
    16f8:	88 27       	eor	r24, r24
	sensor_name = sensh_arr[3];
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_high = sensh_arr[0];
    16fa:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		epstemp_high |= (low << 8);
    16fe:	83 2b       	or	r24, r19
    1700:	90 93 2e 01 	sts	0x012E, r25
    1704:	80 93 2d 01 	sts	0x012D, r24
    1708:	1e c0       	rjmp	.+60     	; 0x1746 <set_sensor_highf+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    170a:	21 30       	cpi	r18, 0x01	; 1
    170c:	69 f4       	brne	.+26     	; 0x1728 <set_sensor_highf+0x40>
	{
		pxv_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		pxv_high |= (low << 8);		
    170e:	80 91 49 01 	lds	r24, 0x0149
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	98 2f       	mov	r25, r24
    1716:	88 27       	eor	r24, r24
		epstemp_high |= (low << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_high = sensh_arr[0];
    1718:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		pxv_high |= (low << 8);		
    171c:	83 2b       	or	r24, r19
    171e:	90 93 6f 01 	sts	0x016F, r25
    1722:	80 93 6e 01 	sts	0x016E, r24
    1726:	1e c0       	rjmp	.+60     	; 0x1764 <set_sensor_highf+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	69 f4       	brne	.+26     	; 0x1746 <set_sensor_highf+0x5e>
	{
		pxi_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		pxi_high |= (low << 8);
    172c:	80 91 49 01 	lds	r24, 0x0149
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	98 2f       	mov	r25, r24
    1734:	88 27       	eor	r24, r24
		pxv_high |= (low << 8);		
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_high = sensh_arr[0];
    1736:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		pxi_high |= (low << 8);
    173a:	83 2b       	or	r24, r19
    173c:	90 93 c6 01 	sts	0x01C6, r25
    1740:	80 93 c5 01 	sts	0x01C5, r24
    1744:	1e c0       	rjmp	.+60     	; 0x1782 <set_sensor_highf+0x9a>
	}
	if(sensor_name == PANELY_V)
    1746:	23 30       	cpi	r18, 0x03	; 3
    1748:	69 f4       	brne	.+26     	; 0x1764 <set_sensor_highf+0x7c>
	{
		pyv_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		pyv_high |= (low << 8);
    174a:	80 91 49 01 	lds	r24, 0x0149
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	98 2f       	mov	r25, r24
    1752:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		pxi_high |= (low << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_high = sensh_arr[0];
    1754:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		pyv_high |= (low << 8);
    1758:	83 2b       	or	r24, r19
    175a:	90 93 10 01 	sts	0x0110, r25
    175e:	80 93 0f 01 	sts	0x010F, r24
    1762:	1e c0       	rjmp	.+60     	; 0x17a0 <set_sensor_highf+0xb8>
	}
	if(sensor_name == PANELY_I)
    1764:	24 30       	cpi	r18, 0x04	; 4
    1766:	69 f4       	brne	.+26     	; 0x1782 <set_sensor_highf+0x9a>
	{
		pyi_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		pyi_high |= (low << 8);
    1768:	80 91 49 01 	lds	r24, 0x0149
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	98 2f       	mov	r25, r24
    1770:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		pyv_high |= (low << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_high = sensh_arr[0];
    1772:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		pyi_high |= (low << 8);
    1776:	83 2b       	or	r24, r19
    1778:	90 93 c8 01 	sts	0x01C8, r25
    177c:	80 93 c7 01 	sts	0x01C7, r24
    1780:	1e c0       	rjmp	.+60     	; 0x17be <set_sensor_highf+0xd6>
	}
	if(sensor_name == BATTM_V)
    1782:	25 30       	cpi	r18, 0x05	; 5
    1784:	69 f4       	brne	.+26     	; 0x17a0 <set_sensor_highf+0xb8>
	{
		battmv_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		battmv_high |= (low << 8);
    1786:	80 91 49 01 	lds	r24, 0x0149
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	98 2f       	mov	r25, r24
    178e:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		pyi_high |= (low << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_high = sensh_arr[0];
    1790:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		battmv_high |= (low << 8);
    1794:	83 2b       	or	r24, r19
    1796:	90 93 6d 01 	sts	0x016D, r25
    179a:	80 93 6c 01 	sts	0x016C, r24
    179e:	1e c0       	rjmp	.+60     	; 0x17dc <set_sensor_highf+0xf4>
	}
	if(sensor_name == BATT_V)
    17a0:	26 30       	cpi	r18, 0x06	; 6
    17a2:	69 f4       	brne	.+26     	; 0x17be <set_sensor_highf+0xd6>
	{
		battv_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		battv_high |= (low << 8);
    17a4:	80 91 49 01 	lds	r24, 0x0149
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	98 2f       	mov	r25, r24
    17ac:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		battmv_high |= (low << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_high = sensh_arr[0];
    17ae:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		battv_high |= (low << 8);
    17b2:	83 2b       	or	r24, r19
    17b4:	90 93 a5 01 	sts	0x01A5, r25
    17b8:	80 93 a4 01 	sts	0x01A4, r24
    17bc:	1e c0       	rjmp	.+60     	; 0x17fa <set_sensor_highf+0x112>
	}
	if(sensor_name == BATT_I)
    17be:	21 31       	cpi	r18, 0x11	; 17
    17c0:	69 f4       	brne	.+26     	; 0x17dc <set_sensor_highf+0xf4>
	{
		pxv_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		pxv_high |= (low << 8);
    17c2:	80 91 49 01 	lds	r24, 0x0149
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	98 2f       	mov	r25, r24
    17ca:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		battv_high |= (low << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_high = sensh_arr[0];
    17cc:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		pxv_high |= (low << 8);
    17d0:	83 2b       	or	r24, r19
    17d2:	90 93 6f 01 	sts	0x016F, r25
    17d6:	80 93 6e 01 	sts	0x016E, r24
    17da:	1e c0       	rjmp	.+60     	; 0x1818 <set_sensor_highf+0x130>
	}
	if(sensor_name == BATT_TEMP)
    17dc:	29 30       	cpi	r18, 0x09	; 9
    17de:	69 f4       	brne	.+26     	; 0x17fa <set_sensor_highf+0x112>
	{
		battemp_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		battemp_high |= (low << 8);
    17e0:	80 91 49 01 	lds	r24, 0x0149
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	98 2f       	mov	r25, r24
    17e8:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		pxv_high |= (low << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_high = sensh_arr[0];
    17ea:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		battemp_high |= (low << 8);
    17ee:	83 2b       	or	r24, r19
    17f0:	90 93 12 01 	sts	0x0112, r25
    17f4:	80 93 11 01 	sts	0x0111, r24
    17f8:	1e c0       	rjmp	.+60     	; 0x1836 <set_sensor_highf+0x14e>
	}
	if(sensor_name == COMS_V)
    17fa:	2b 30       	cpi	r18, 0x0B	; 11
    17fc:	69 f4       	brne	.+26     	; 0x1818 <set_sensor_highf+0x130>
	{
		comsv_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		comsv_high |= (low << 8);
    17fe:	80 91 49 01 	lds	r24, 0x0149
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	98 2f       	mov	r25, r24
    1806:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		battemp_high |= (low << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_high = sensh_arr[0];
    1808:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		comsv_high |= (low << 8);
    180c:	83 2b       	or	r24, r19
    180e:	90 93 53 01 	sts	0x0153, r25
    1812:	80 93 52 01 	sts	0x0152, r24
    1816:	1e c0       	rjmp	.+60     	; 0x1854 <set_sensor_highf+0x16c>
	}
	if(sensor_name == COMS_I)
    1818:	2c 30       	cpi	r18, 0x0C	; 12
    181a:	69 f4       	brne	.+26     	; 0x1836 <set_sensor_highf+0x14e>
	{
		comsi_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		comsi_high |= (low << 8);
    181c:	80 91 49 01 	lds	r24, 0x0149
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	98 2f       	mov	r25, r24
    1824:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		comsv_high |= (low << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_high = sensh_arr[0];
    1826:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		comsi_high |= (low << 8);
    182a:	83 2b       	or	r24, r19
    182c:	90 93 3a 01 	sts	0x013A, r25
    1830:	80 93 39 01 	sts	0x0139, r24
    1834:	1e c0       	rjmp	.+60     	; 0x1872 <set_sensor_highf+0x18a>
	}
	if(sensor_name == PAY_V)
    1836:	2d 30       	cpi	r18, 0x0D	; 13
    1838:	69 f4       	brne	.+26     	; 0x1854 <set_sensor_highf+0x16c>
	{
		payv_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		payv_high |= (low << 8);
    183a:	80 91 49 01 	lds	r24, 0x0149
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	98 2f       	mov	r25, r24
    1842:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		comsi_high |= (low << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_high = sensh_arr[0];
    1844:	30 91 48 01 	lds	r19, 0x0148
		low = (uint16_t)sensh_arr[1];
		payv_high |= (low << 8);
    1848:	83 2b       	or	r24, r19
    184a:	90 93 0e 01 	sts	0x010E, r25
    184e:	80 93 0d 01 	sts	0x010D, r24
    1852:	1e c0       	rjmp	.+60     	; 0x1890 <set_sensor_highf+0x1a8>
	}
	if(sensor_name == PAY_I)
    1854:	2e 30       	cpi	r18, 0x0E	; 14
    1856:	69 f4       	brne	.+26     	; 0x1872 <set_sensor_highf+0x18a>
	{
		payi_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		payi_high |= (low << 8);
    1858:	80 91 49 01 	lds	r24, 0x0149
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	98 2f       	mov	r25, r24
    1860:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		payv_high |= (low << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_high = sensh_arr[0];
    1862:	20 91 48 01 	lds	r18, 0x0148
		low = (uint16_t)sensh_arr[1];
		payi_high |= (low << 8);
    1866:	82 2b       	or	r24, r18
    1868:	90 93 b8 01 	sts	0x01B8, r25
    186c:	80 93 b7 01 	sts	0x01B7, r24
    1870:	08 95       	ret
	}
	if(sensor_name == OBC_V)
    1872:	2f 30       	cpi	r18, 0x0F	; 15
    1874:	69 f4       	brne	.+26     	; 0x1890 <set_sensor_highf+0x1a8>
	{
		obcv_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		obcv_high |= (low << 8);
    1876:	80 91 49 01 	lds	r24, 0x0149
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	98 2f       	mov	r25, r24
    187e:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		payi_high |= (low << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_high = sensh_arr[0];
    1880:	20 91 48 01 	lds	r18, 0x0148
		low = (uint16_t)sensh_arr[1];
		obcv_high |= (low << 8);
    1884:	82 2b       	or	r24, r18
    1886:	90 93 46 01 	sts	0x0146, r25
    188a:	80 93 45 01 	sts	0x0145, r24
    188e:	08 95       	ret
	}
	if(sensor_name == OBC_I)
    1890:	20 31       	cpi	r18, 0x10	; 16
    1892:	61 f4       	brne	.+24     	; 0x18ac <set_sensor_highf+0x1c4>
	{
		obci_high = sensh_arr[0];
		low = (uint16_t)sensh_arr[1];
		obci_high |= (low << 8);
    1894:	80 91 49 01 	lds	r24, 0x0149
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	98 2f       	mov	r25, r24
    189c:	88 27       	eor	r24, r24
		low = (uint16_t)sensh_arr[1];
		obcv_high |= (low << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_high = sensh_arr[0];
    189e:	20 91 48 01 	lds	r18, 0x0148
		low = (uint16_t)sensh_arr[1];
		obci_high |= (low << 8);
    18a2:	82 2b       	or	r24, r18
    18a4:	90 93 84 01 	sts	0x0184, r25
    18a8:	80 93 83 01 	sts	0x0183, r24
    18ac:	08 95       	ret

000018ae <set_sensor_lowf>:
}

void set_sensor_lowf(void)
{
	uint8_t low, sensor_name, req_by;
	sensor_name = sensl_arr[3];
    18ae:	20 91 bf 01 	lds	r18, 0x01BF
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    18b2:	2a 30       	cpi	r18, 0x0A	; 10
    18b4:	69 f4       	brne	.+26     	; 0x18d0 <set_sensor_lowf+0x22>
	{
		epstemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		epstemp_low |= (low << 8);
    18b6:	80 91 bd 01 	lds	r24, 0x01BD
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	98 2f       	mov	r25, r24
    18be:	88 27       	eor	r24, r24
	sensor_name = sensl_arr[3];
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_low = sensl_arr[0];
    18c0:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		epstemp_low |= (low << 8);
    18c4:	83 2b       	or	r24, r19
    18c6:	90 93 30 01 	sts	0x0130, r25
    18ca:	80 93 2f 01 	sts	0x012F, r24
    18ce:	1e c0       	rjmp	.+60     	; 0x190c <set_sensor_lowf+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    18d0:	21 30       	cpi	r18, 0x01	; 1
    18d2:	69 f4       	brne	.+26     	; 0x18ee <set_sensor_lowf+0x40>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    18d4:	80 91 bd 01 	lds	r24, 0x01BD
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	98 2f       	mov	r25, r24
    18dc:	88 27       	eor	r24, r24
		epstemp_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_low = sensl_arr[0];
    18de:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    18e2:	83 2b       	or	r24, r19
    18e4:	90 93 86 01 	sts	0x0186, r25
    18e8:	80 93 85 01 	sts	0x0185, r24
    18ec:	1e c0       	rjmp	.+60     	; 0x192a <set_sensor_lowf+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    18ee:	22 30       	cpi	r18, 0x02	; 2
    18f0:	69 f4       	brne	.+26     	; 0x190c <set_sensor_lowf+0x5e>
	{
		pxi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
    18f2:	80 91 bd 01 	lds	r24, 0x01BD
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	98 2f       	mov	r25, r24
    18fa:	88 27       	eor	r24, r24
		pxv_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_low = sensl_arr[0];
    18fc:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
    1900:	83 2b       	or	r24, r19
    1902:	90 93 44 01 	sts	0x0144, r25
    1906:	80 93 43 01 	sts	0x0143, r24
    190a:	1e c0       	rjmp	.+60     	; 0x1948 <set_sensor_lowf+0x9a>
	}
	if(sensor_name == PANELY_V)
    190c:	23 30       	cpi	r18, 0x03	; 3
    190e:	69 f4       	brne	.+26     	; 0x192a <set_sensor_lowf+0x7c>
	{
		pyv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
    1910:	80 91 bd 01 	lds	r24, 0x01BD
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	98 2f       	mov	r25, r24
    1918:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_low = sensl_arr[0];
    191a:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
    191e:	83 2b       	or	r24, r19
    1920:	90 93 88 01 	sts	0x0188, r25
    1924:	80 93 87 01 	sts	0x0187, r24
    1928:	1e c0       	rjmp	.+60     	; 0x1966 <set_sensor_lowf+0xb8>
	}
	if(sensor_name == PANELY_I)
    192a:	24 30       	cpi	r18, 0x04	; 4
    192c:	69 f4       	brne	.+26     	; 0x1948 <set_sensor_lowf+0x9a>
	{
		pyi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
    192e:	80 91 bd 01 	lds	r24, 0x01BD
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	98 2f       	mov	r25, r24
    1936:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_low = sensl_arr[0];
    1938:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
    193c:	83 2b       	or	r24, r19
    193e:	90 93 98 01 	sts	0x0198, r25
    1942:	80 93 97 01 	sts	0x0197, r24
    1946:	1e c0       	rjmp	.+60     	; 0x1984 <set_sensor_lowf+0xd6>
	}
	if(sensor_name == BATTM_V)
    1948:	25 30       	cpi	r18, 0x05	; 5
    194a:	69 f4       	brne	.+26     	; 0x1966 <set_sensor_lowf+0xb8>
	{
		battmv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
    194c:	80 91 bd 01 	lds	r24, 0x01BD
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	98 2f       	mov	r25, r24
    1954:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_low = sensl_arr[0];
    1956:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
    195a:	83 2b       	or	r24, r19
    195c:	90 93 6b 01 	sts	0x016B, r25
    1960:	80 93 6a 01 	sts	0x016A, r24
    1964:	1e c0       	rjmp	.+60     	; 0x19a2 <set_sensor_lowf+0xf4>
	}
	if(sensor_name == BATT_V)
    1966:	26 30       	cpi	r18, 0x06	; 6
    1968:	69 f4       	brne	.+26     	; 0x1984 <set_sensor_lowf+0xd6>
	{
		battv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
    196a:	80 91 bd 01 	lds	r24, 0x01BD
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	98 2f       	mov	r25, r24
    1972:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_low = sensl_arr[0];
    1974:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
    1978:	83 2b       	or	r24, r19
    197a:	90 93 09 01 	sts	0x0109, r25
    197e:	80 93 08 01 	sts	0x0108, r24
    1982:	1e c0       	rjmp	.+60     	; 0x19c0 <set_sensor_lowf+0x112>
	}
	if(sensor_name == BATT_I)
    1984:	21 31       	cpi	r18, 0x11	; 17
    1986:	69 f4       	brne	.+26     	; 0x19a2 <set_sensor_lowf+0xf4>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1988:	80 91 bd 01 	lds	r24, 0x01BD
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	98 2f       	mov	r25, r24
    1990:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_low = sensl_arr[0];
    1992:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1996:	83 2b       	or	r24, r19
    1998:	90 93 86 01 	sts	0x0186, r25
    199c:	80 93 85 01 	sts	0x0185, r24
    19a0:	1e c0       	rjmp	.+60     	; 0x19de <set_sensor_lowf+0x130>
	}
	if(sensor_name == BATT_TEMP)
    19a2:	29 30       	cpi	r18, 0x09	; 9
    19a4:	69 f4       	brne	.+26     	; 0x19c0 <set_sensor_lowf+0x112>
	{
		battemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
    19a6:	80 91 bd 01 	lds	r24, 0x01BD
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	98 2f       	mov	r25, r24
    19ae:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_low = sensl_arr[0];
    19b0:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
    19b4:	83 2b       	or	r24, r19
    19b6:	90 93 a7 01 	sts	0x01A7, r25
    19ba:	80 93 a6 01 	sts	0x01A6, r24
    19be:	1e c0       	rjmp	.+60     	; 0x19fc <set_sensor_lowf+0x14e>
	}
	if(sensor_name == COMS_V)
    19c0:	2b 30       	cpi	r18, 0x0B	; 11
    19c2:	69 f4       	brne	.+26     	; 0x19de <set_sensor_lowf+0x130>
	{
		comsv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
    19c4:	80 91 bd 01 	lds	r24, 0x01BD
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	98 2f       	mov	r25, r24
    19cc:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_low = sensl_arr[0];
    19ce:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
    19d2:	83 2b       	or	r24, r19
    19d4:	90 93 69 01 	sts	0x0169, r25
    19d8:	80 93 68 01 	sts	0x0168, r24
    19dc:	1e c0       	rjmp	.+60     	; 0x1a1a <set_sensor_lowf+0x16c>
	}
	if(sensor_name == COMS_I)
    19de:	2c 30       	cpi	r18, 0x0C	; 12
    19e0:	69 f4       	brne	.+26     	; 0x19fc <set_sensor_lowf+0x14e>
	{
		comsi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
    19e2:	80 91 bd 01 	lds	r24, 0x01BD
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	98 2f       	mov	r25, r24
    19ea:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_low = sensl_arr[0];
    19ec:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
    19f0:	83 2b       	or	r24, r19
    19f2:	90 93 b6 01 	sts	0x01B6, r25
    19f6:	80 93 b5 01 	sts	0x01B5, r24
    19fa:	1e c0       	rjmp	.+60     	; 0x1a38 <set_sensor_lowf+0x18a>
	}
	if(sensor_name == PAY_V)
    19fc:	2d 30       	cpi	r18, 0x0D	; 13
    19fe:	69 f4       	brne	.+26     	; 0x1a1a <set_sensor_lowf+0x16c>
	{
		payv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
    1a00:	80 91 bd 01 	lds	r24, 0x01BD
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	98 2f       	mov	r25, r24
    1a08:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_low = sensl_arr[0];
    1a0a:	30 91 bc 01 	lds	r19, 0x01BC
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
    1a0e:	83 2b       	or	r24, r19
    1a10:	90 93 0b 01 	sts	0x010B, r25
    1a14:	80 93 0a 01 	sts	0x010A, r24
    1a18:	1e c0       	rjmp	.+60     	; 0x1a56 <set_sensor_lowf+0x1a8>
	}
	if(sensor_name == PAY_I)
    1a1a:	2e 30       	cpi	r18, 0x0E	; 14
    1a1c:	69 f4       	brne	.+26     	; 0x1a38 <set_sensor_lowf+0x18a>
	{
		payi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
    1a1e:	80 91 bd 01 	lds	r24, 0x01BD
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	98 2f       	mov	r25, r24
    1a26:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_low = sensl_arr[0];
    1a28:	20 91 bc 01 	lds	r18, 0x01BC
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
    1a2c:	82 2b       	or	r24, r18
    1a2e:	90 93 72 01 	sts	0x0172, r25
    1a32:	80 93 71 01 	sts	0x0171, r24
    1a36:	08 95       	ret
	}
	if(sensor_name == OBC_V)
    1a38:	2f 30       	cpi	r18, 0x0F	; 15
    1a3a:	69 f4       	brne	.+26     	; 0x1a56 <set_sensor_lowf+0x1a8>
	{
		obcv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
    1a3c:	80 91 bd 01 	lds	r24, 0x01BD
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	98 2f       	mov	r25, r24
    1a44:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_low = sensl_arr[0];
    1a46:	20 91 bc 01 	lds	r18, 0x01BC
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
    1a4a:	82 2b       	or	r24, r18
    1a4c:	90 93 bb 01 	sts	0x01BB, r25
    1a50:	80 93 ba 01 	sts	0x01BA, r24
    1a54:	08 95       	ret
	}
	if(sensor_name == OBC_I)
    1a56:	20 31       	cpi	r18, 0x10	; 16
    1a58:	61 f4       	brne	.+24     	; 0x1a72 <set_sensor_lowf+0x1c4>
	{
		obci_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
		obci_low |= (low << 8);
    1a5a:	80 91 bd 01 	lds	r24, 0x01BD
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	98 2f       	mov	r25, r24
    1a62:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_low = sensl_arr[0];
    1a64:	20 91 bc 01 	lds	r18, 0x01BC
		low = (uint16_t)sensl_arr[1];
		obci_low |= (low << 8);
    1a68:	82 2b       	or	r24, r18
    1a6a:	90 93 b1 01 	sts	0x01B1, r25
    1a6e:	80 93 b0 01 	sts	0x01B0, r24
    1a72:	08 95       	ret

00001a74 <set_varf>:
}

void set_varf(void)
{
	uint8_t low, var_name;
	var_name = setv_arr[3];
    1a74:	80 91 3e 01 	lds	r24, 0x013E
	
	if(var_name == MPPTA)
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	29 f4       	brne	.+10     	; 0x1a86 <set_varf+0x12>
	{
		mppta = setv_arr[0];
    1a7c:	80 91 3b 01 	lds	r24, 0x013B
    1a80:	80 93 b9 01 	sts	0x01B9, r24
    1a84:	08 95       	ret
	}
	if(var_name == MPPTB)
    1a86:	82 30       	cpi	r24, 0x02	; 2
    1a88:	21 f4       	brne	.+8      	; 0x1a92 <set_varf+0x1e>
	{
		mpptb = setv_arr[0];
    1a8a:	80 91 3b 01 	lds	r24, 0x013B
    1a8e:	80 93 24 01 	sts	0x0124, r24
    1a92:	08 95       	ret

00001a94 <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now == 1)
    1a94:	80 91 70 01 	lds	r24, 0x0170
    1a98:	81 30       	cpi	r24, 0x01	; 1
    1a9a:	11 f4       	brne	.+4      	; 0x1aa0 <run_commands+0xc>
		send_response();
    1a9c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <send_response>
	if (send_hk == 1)
    1aa0:	80 91 82 01 	lds	r24, 0x0182
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	11 f4       	brne	.+4      	; 0x1aac <run_commands+0x18>
		send_housekeeping();
    1aa8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <send_housekeeping>
	if (send_data == 1)
    1aac:	80 91 a2 01 	lds	r24, 0x01A2
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	11 f4       	brne	.+4      	; 0x1ab8 <run_commands+0x24>
		send_sensor_data();
    1ab4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <send_sensor_data>
	if (msg_received == 1)
    1ab8:	80 91 0c 01 	lds	r24, 0x010C
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	11 f4       	brne	.+4      	; 0x1ac4 <run_commands+0x30>
		send_coms_packet();
    1ac0:	0e 94 23 0b 	call	0x1646	; 0x1646 <send_coms_packet>
	if (read_response == 1)
    1ac4:	80 91 79 01 	lds	r24, 0x0179
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <run_commands+0x3c>
		send_read_response();
    1acc:	0e 94 37 0b 	call	0x166e	; 0x166e <send_read_response>
	if (write_response == 1)
    1ad0:	80 91 47 01 	lds	r24, 0x0147
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	11 f4       	brne	.+4      	; 0x1adc <run_commands+0x48>
		send_write_response();
    1ad8:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <send_write_response>
	if (set_sens_h == 1)
    1adc:	80 91 a1 01 	lds	r24, 0x01A1
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	11 f4       	brne	.+4      	; 0x1ae8 <run_commands+0x54>
		set_sensor_highf();
    1ae4:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <set_sensor_highf>
	if (set_sens_l == 1)
    1ae8:	80 91 a3 01 	lds	r24, 0x01A3
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	11 f4       	brne	.+4      	; 0x1af4 <run_commands+0x60>
		set_sensor_lowf();
    1af0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <set_sensor_lowf>
	if (set_var == 1)
    1af4:	80 91 23 01 	lds	r24, 0x0123
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <run_commands+0x6c>
		set_varf();
    1afc:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <set_varf>
    1b00:	08 95       	ret

00001b02 <main>:
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    1b02:	e1 e6       	ldi	r30, 0x61	; 97
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 e8       	ldi	r24, 0x80	; 128
    1b08:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1b0a:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1b0c:	8e ef       	ldi	r24, 0xFE	; 254
    1b0e:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    1b10:	81 e1       	ldi	r24, 0x11	; 17
    1b12:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    1b14:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    1b16:	89 e0       	ldi	r24, 0x09	; 9
    1b18:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    1b1e:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    1b20:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	
	timer_init();
    1b22:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <timer_init>
	adc_initialize();
    1b26:	0e 94 68 00 	call	0xd0	; 0xd0 <adc_initialize>
	can_init(0);
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	0e 94 b2 03 	call	0x764	; 0x764 <can_init>
	can_init_mobs();
    1b30:	0e 94 9e 02 	call	0x53c	; 0x53c <can_init_mobs>
	spi_initialize_master();
    1b34:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <spi_initialize_master>
	
	// Enable global interrupts for Timer execution
	sei();
    1b38:	78 94       	sei
	
	transceiver_initialize();
    1b3a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <transceiver_initialize>
	
	SS1_set_high();		// SPI Temp Sensor.
    1b3e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SS1_set_high>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    1b42:	0e 94 43 02 	call	0x486	; 0x486 <can_check_general>
			trans_check();		// Check for incoming packets.	
		}

		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    1b46:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <run_commands>
    1b4a:	fb cf       	rjmp	.-10     	; 0x1b42 <main+0x40>

00001b4c <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    1b4c:	85 b7       	in	r24, 0x35	; 53
    1b4e:	8f 77       	andi	r24, 0x7F	; 127
    1b50:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    1b52:	83 e5       	ldi	r24, 0x53	; 83
    1b54:	8c bd       	out	0x2c, r24	; 44
    1b56:	08 95       	ret

00001b58 <spi_transfer>:
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	//SS_set_low();
	*reg_ptr = message;
    1b58:	8e bd       	out	0x2e, r24	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    1b5a:	0d b4       	in	r0, 0x2d	; 45
    1b5c:	07 fc       	sbrc	r0, 7
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <spi_transfer+0x10>
    1b60:	89 ee       	ldi	r24, 0xE9	; 233
    1b62:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <spi_transfer+0xa>
    1b66:	08 95       	ret
			}
		}
	}	
	//SS_set_high();
	
	delay_cycles(10);
    1b68:	8a e0       	ldi	r24, 0x0A	; 10
    1b6a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <delay_cycles>
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    1b6e:	8e b5       	in	r24, 0x2e	; 46
		//temp2 = temp2 << (7 - i);		
		//temp += temp2;
	//}
	
	return receive_char;					// Transmission was successful, return the character that was received.
}
    1b70:	08 95       	ret

00001b72 <SS_set_high>:
/************************************************************************/

void SS_set_high(void) 
{
	//PORTD |= (1 << 3);
	delay_us(1);
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
    1b7a:	08 95       	ret

00001b7c <spi_transfer2>:
	
	return receive_char;					// Transmission was successful, return the character that was received.
}

uint8_t spi_transfer2(uint8_t message)
{
    1b7c:	cf 93       	push	r28
	//cmd_str(SRES);
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	PORTD &= (0xF7);
    1b7e:	5b 98       	cbi	0x0b, 3	; 11
	//delay_cycles(10);
	*reg_ptr = message;
    1b80:	8e bd       	out	0x2e, r24	; 46
	//delay_cycles(10);
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    1b82:	0d b4       	in	r0, 0x2d	; 45
    1b84:	07 fc       	sbrc	r0, 7
    1b86:	06 c0       	rjmp	.+12     	; 0x1b94 <spi_transfer2+0x18>
    1b88:	c9 ee       	ldi	r28, 0xE9	; 233
    1b8a:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <spi_transfer2+0xe>
		{
			SS_set_high();
    1b8e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <SS_set_high>
			return 0x00;						// Something went wrong, so the function times out.
    1b92:	09 c0       	rjmp	.+18     	; 0x1ba6 <spi_transfer2+0x2a>
		}
	}
	delay_cycles(7);
    1b94:	87 e0       	ldi	r24, 0x07	; 7
    1b96:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <delay_cycles>
	SS_set_high();
    1b9a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <SS_set_high>
	
	delay_cycles(10);
    1b9e:	8a e0       	ldi	r24, 0x0A	; 10
    1ba0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <delay_cycles>
		
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    1ba4:	ce b5       	in	r28, 0x2e	; 46
		
	return receive_char;					// Transmission was successful, return the character that was received.
}
    1ba6:	8c 2f       	mov	r24, r28
    1ba8:	cf 91       	pop	r28
    1baa:	08 95       	ret

00001bac <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    1bac:	44 9a       	sbi	0x08, 4	; 8
    1bae:	08 95       	ret

00001bb0 <SS_set_low>:
/************************************************************************/

void SS_set_low(void)
{
	//PORTD &= (0xF7);
	delay_us(1);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
    1bb8:	08 95       	ret

00001bba <SS1_set_low>:
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    1bba:	44 98       	cbi	0x08, 4	; 8
    1bbc:	08 95       	ret

00001bbe <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	8c 01       	movw	r16, r24
    1bc8:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    1bca:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    1bce:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    1bd0:	80 e8       	ldi	r24, 0x80	; 128
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <delay_ms>
	*high = *reg_ptr;
    1bd8:	8e b5       	in	r24, 0x2e	; 46
    1bda:	f8 01       	movw	r30, r16
    1bdc:	80 83       	st	Z, r24
	delay_ms(128);
    1bde:	80 e8       	ldi	r24, 0x80	; 128
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <delay_ms>
	*low = *reg_ptr;	
    1be6:	8e b5       	in	r24, 0x2e	; 46
    1be8:	88 83       	st	Y, r24
	SS1_set_high();
    1bea:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <SS1_set_high>
	
	return;
}
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	08 95       	ret

00001bf8 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    1bf8:	1f 92       	push	r1
    1bfa:	0f 92       	push	r0
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	0f 92       	push	r0
    1c00:	11 24       	eor	r1, r1
    1c02:	8f 93       	push	r24
	CTC_flag = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	80 93 d1 01 	sts	0x01D1, r24
}
    1c0a:	8f 91       	pop	r24
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    1c16:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    1c1a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    1c1e:	8a e0       	ldi	r24, 0x0A	; 10
    1c20:	80 93 81 00 	sts	0x0081, r24
    1c24:	08 95       	ret

00001c26 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    1c26:	10 92 d1 01 	sts	0x01D1, r1
	TCNT1 = 0x0000; //Clear timer
    1c2a:	10 92 85 00 	sts	0x0085, r1
    1c2e:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    1c32:	90 93 89 00 	sts	0x0089, r25
    1c36:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1c3a:	82 e0       	ldi	r24, 0x02	; 2
    1c3c:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    1c40:	80 91 d1 01 	lds	r24, 0x01D1
    1c44:	88 23       	and	r24, r24
    1c46:	e1 f3       	breq	.-8      	; 0x1c40 <delay_us+0x1a>
}
    1c48:	08 95       	ret

00001c4a <delay_ms>:

void delay_ms(uint16_t ms) {
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	51 f0       	breq	.+20     	; 0x1c6c <delay_ms+0x22>
    1c58:	c0 e0       	ldi	r28, 0x00	; 0
    1c5a:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    1c5c:	88 ee       	ldi	r24, 0xE8	; 232
    1c5e:	93 e0       	ldi	r25, 0x03	; 3
    1c60:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    1c64:	21 96       	adiw	r28, 0x01	; 1
    1c66:	c0 17       	cp	r28, r16
    1c68:	d1 07       	cpc	r29, r17
    1c6a:	c1 f7       	brne	.-16     	; 0x1c5c <delay_ms+0x12>
		delay_us(1000);
	}
}
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	08 95       	ret

00001c76 <delay_cycles>:

void delay_cycles(uint8_t cycles)	// @ 8 MHz, 1 cycle = 125 ns
{
	uint8_t i;
	
	for (i = 0; i < cycles; i++)
    1c76:	88 23       	and	r24, r24
    1c78:	21 f0       	breq	.+8      	; 0x1c82 <delay_cycles+0xc>
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9f 5f       	subi	r25, 0xFF	; 255
    1c7e:	98 13       	cpse	r25, r24
    1c80:	fd cf       	rjmp	.-6      	; 0x1c7c <delay_cycles+0x6>
    1c82:	08 95       	ret

00001c84 <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
    1c84:	cf 93       	push	r28
    1c86:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
    1c88:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
    1c8c:	80 e8       	ldi	r24, 0x80	; 128
    1c8e:	8c 0f       	add	r24, r28
    1c90:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
	delay_us(1);
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
	msg = spi_transfer(0x00);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
    1ca2:	c8 2f       	mov	r28, r24

	SS_set_high();
    1ca4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <SS_set_high>
	
	delay_ms(1);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <delay_ms>
	
	return msg;
}
    1cb0:	8c 2f       	mov	r24, r28
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	d8 2f       	mov	r29, r24
    1cbc:	c6 2f       	mov	r28, r22
	uint8_t msg, check, i;
	
	SS_set_low();
    1cbe:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <SS_set_low>
	msg = spi_transfer(addr);		// Send the desired address
    1cc2:	8d 2f       	mov	r24, r29
    1cc4:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
	delay_us(1);
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    1cd0:	8c 2f       	mov	r24, r28
    1cd2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
	SS_set_high();
    1cd6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <SS_set_high>
	
	delay_ms(1);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <delay_ms>

	return;
}
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	08 95       	ret

00001ce8 <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
    1ce8:	cf 93       	push	r28
    1cea:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
    1cec:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <SS_set_low>
	msg = spi_transfer(msg);
    1cf0:	8f ea       	ldi	r24, 0xAF	; 175
    1cf2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
	delay_us(1);
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1cfe:	8c 2f       	mov	r24, r28
    1d00:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
	delay_us(1);
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
	msg = spi_transfer(0x00);
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
    1d12:	c8 2f       	mov	r28, r24
	SS_set_high();
    1d14:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <SS_set_high>
	delay_ms(1);
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <delay_ms>
	return msg;
}
    1d20:	8c 2f       	mov	r24, r28
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr)
{
    1d26:	cf 93       	push	r28
	uint8_t msg;
	
	msg = spi_transfer2(addr);
    1d28:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <spi_transfer2>
    1d2c:	c8 2f       	mov	r28, r24
	
	delay_us(1);
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
	return msg;
}
    1d36:	8c 2f       	mov	r24, r28
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	d8 2f       	mov	r29, r24
    1d42:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    1d44:	8d e3       	ldi	r24, 0x3D	; 61
    1d46:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <cmd_str>
	uint8_t msg, i, check;
	msg = 0b00101111;
	
	SS_set_low();
    1d4a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <SS_set_low>
	spi_transfer(msg);
    1d4e:	8f e2       	ldi	r24, 0x2F	; 47
    1d50:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
	delay_us(1);
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1d5c:	8d 2f       	mov	r24, r29
    1d5e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
	delay_us(1);
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    1d6a:	8c 2f       	mov	r24, r28
    1d6c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <spi_transfer>
	SS_set_high();
    1d70:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <SS_set_high>
	delay_ms(1);
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <delay_ms>

	return;
}
    1d7c:	df 91       	pop	r29
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	c8 2f       	mov	r28, r24
    1d8a:	d6 2f       	mov	r29, r22
    1d8c:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
    1d8e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <reg_read>
	if(!data)
    1d92:	11 11       	cpse	r17, r1
    1d94:	0c c0       	rjmp	.+24     	; 0x1dae <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
    1d96:	e1 e0       	ldi	r30, 0x01	; 1
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	af 01       	movw	r20, r30
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <reg_write_bit+0x20>
    1d9e:	44 0f       	add	r20, r20
    1da0:	55 1f       	adc	r21, r21
    1da2:	da 95       	dec	r29
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <reg_write_bit+0x1c>
    1da6:	40 95       	com	r20
		msg = temp & msg;
    1da8:	68 2f       	mov	r22, r24
    1daa:	64 23       	and	r22, r20
    1dac:	0a c0       	rjmp	.+20     	; 0x1dc2 <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	9a 01       	movw	r18, r20
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <reg_write_bit+0x38>
    1db6:	22 0f       	add	r18, r18
    1db8:	33 1f       	adc	r19, r19
    1dba:	da 95       	dec	r29
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <reg_write_bit+0x34>
		msg = temp | msg;
    1dbe:	68 2f       	mov	r22, r24
    1dc0:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
    1dc2:	8c 2f       	mov	r24, r28
    1dc4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	return;
}
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	08 95       	ret

00001dd0 <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	c8 2f       	mov	r28, r24
    1dd8:	d6 2f       	mov	r29, r22
    1dda:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
    1ddc:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <reg_read2F>
	if(!data)
    1de0:	11 11       	cpse	r17, r1
    1de2:	0c c0       	rjmp	.+24     	; 0x1dfc <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
    1de4:	e1 e0       	ldi	r30, 0x01	; 1
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	af 01       	movw	r20, r30
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <reg_write_bit2F+0x20>
    1dec:	44 0f       	add	r20, r20
    1dee:	55 1f       	adc	r21, r21
    1df0:	da 95       	dec	r29
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <reg_write_bit2F+0x1c>
    1df4:	40 95       	com	r20
		msg = temp & msg;
    1df6:	68 2f       	mov	r22, r24
    1df8:	64 23       	and	r22, r20
    1dfa:	0a c0       	rjmp	.+20     	; 0x1e10 <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	9a 01       	movw	r18, r20
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <reg_write_bit2F+0x38>
    1e04:	22 0f       	add	r18, r18
    1e06:	33 1f       	adc	r19, r19
    1e08:	da 95       	dec	r29
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <reg_write_bit2F+0x34>
		msg = temp | msg;
    1e0c:	68 2f       	mov	r22, r24
    1e0e:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
    1e10:	8c 2f       	mov	r24, r28
    1e12:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	return;
}
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	1f 91       	pop	r17
    1e1c:	08 95       	ret

00001e1e <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    1e1e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	  
	//RESET 
    cmd_str(SRES);             //SRES                  reset chip
    1e22:	80 e3       	ldi	r24, 0x30	; 48
    1e24:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <cmd_str>
      
    //Reset RX FIFO
    cmd_str(SFRX);             //SFRX                  flush RX FIFO
    1e28:	8a e3       	ldi	r24, 0x3A	; 58
    1e2a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <cmd_str>
      
    //Reset TX FIFO
    cmd_str(SFTX);             //SFTX                  flush TX FIFO
    1e2e:	8b e3       	ldi	r24, 0x3B	; 59
    1e30:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <cmd_str>

	//**************SET UP RX****************//
  
	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	82 e1       	ldi	r24, 0x12	; 18
    1e38:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    1e3c:	6f e5       	ldi	r22, 0x5F	; 95
    1e3e:	83 e1       	ldi	r24, 0x13	; 19
    1e40:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    1e44:	60 e4       	ldi	r22, 0x40	; 64
    1e46:	86 e1       	ldi	r24, 0x16	; 22
    1e48:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    1e4c:	6e e0       	ldi	r22, 0x0E	; 14
    1e4e:	87 e1       	ldi	r24, 0x17	; 23
    1e50:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    1e54:	63 e0       	ldi	r22, 0x03	; 3
    1e56:	89 e1       	ldi	r24, 0x19	; 25
    1e58:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    1e5c:	63 e3       	ldi	r22, 0x33	; 51
    1e5e:	8b e1       	ldi	r24, 0x1B	; 27
    1e60:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    1e64:	67 e1       	ldi	r22, 0x17	; 23
    1e66:	8d e1       	ldi	r24, 0x1D	; 29
    1e68:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    1e6c:	60 e5       	ldi	r22, 0x50	; 80
    1e6e:	8f e1       	ldi	r24, 0x1F	; 31
    1e70:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
//  reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
  
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    1e74:	64 e1       	ldi	r22, 0x14	; 20
    1e76:	81 e2       	ldi	r24, 0x21	; 33
    1e78:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    1e7c:	6c ea       	ldi	r22, 0xAC	; 172
    1e7e:	82 e2       	ldi	r24, 0x22	; 34
    1e80:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	//reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
	//reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
	//reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
  
	cmd_str(SNOP);
    1e84:	8d e3       	ldi	r24, 0x3D	; 61
    1e86:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <cmd_str>
	//For test purposes only, (2nd block, deleted first one) use values from SmartRF for some bits
	reg_write(0x08, 0x0B);            //*Changed on line 152
    1e8a:	6b e0       	ldi	r22, 0x0B	; 11
    1e8c:	88 e0       	ldi	r24, 0x08	; 8
    1e8e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x13, 0x0D);            //
    1e92:	6d e0       	ldi	r22, 0x0D	; 13
    1e94:	83 e1       	ldi	r24, 0x13	; 19
    1e96:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x26, 0x04);            //*Changed on line 144
    1e9a:	64 e0       	ldi	r22, 0x04	; 4
    1e9c:	86 e2       	ldi	r24, 0x26	; 38
    1e9e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
  
	//High performance RX
	reg_write(0x08, 0x0B);            //
    1ea2:	6b e0       	ldi	r22, 0x0B	; 11
    1ea4:	88 e0       	ldi	r24, 0x08	; 8
    1ea6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x0C, 0x1C);            //
    1eaa:	6c e1       	ldi	r22, 0x1C	; 28
    1eac:	8c e0       	ldi	r24, 0x0C	; 12
    1eae:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x10, 0x00);            //
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	80 e1       	ldi	r24, 0x10	; 16
    1eb6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x11, 0x04);            //
    1eba:	64 e0       	ldi	r22, 0x04	; 4
    1ebc:	81 e1       	ldi	r24, 0x11	; 17
    1ebe:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x13, 0x05);            //
    1ec2:	65 e0       	ldi	r22, 0x05	; 5
    1ec4:	83 e1       	ldi	r24, 0x13	; 19
    1ec6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x1C, 0xA9);            //
    1eca:	69 ea       	ldi	r22, 0xA9	; 169
    1ecc:	8c e1       	ldi	r24, 0x1C	; 28
    1ece:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x1D, 0xCF);            //
    1ed2:	6f ec       	ldi	r22, 0xCF	; 207
    1ed4:	8d e1       	ldi	r24, 0x1D	; 29
    1ed6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x1E, 0x00);            //
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	8e e1       	ldi	r24, 0x1E	; 30
    1ede:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x20, 0x03);            //
    1ee2:	63 e0       	ldi	r22, 0x03	; 3
    1ee4:	80 e2       	ldi	r24, 0x20	; 32
    1ee6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x2E, 0x00);            //
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	8e e2       	ldi	r24, 0x2E	; 46
    1eee:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write2F(0x00, 0x00);          //
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>

	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    1efa:	68 e4       	ldi	r22, 0x48	; 72
    1efc:	8a e0       	ldi	r24, 0x0A	; 10
    1efe:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    1f02:	65 e0       	ldi	r22, 0x05	; 5
    1f04:	8b e0       	ldi	r24, 0x0B	; 11
    1f06:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: 0x14           set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector enabled
    1f0a:	64 e0       	ldi	r22, 0x04	; 4
    1f0c:	81 e2       	ldi	r24, 0x21	; 33
    1f0e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
  
	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	8d e0       	ldi	r24, 0x0D	; 13
    1f16:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	65 e0       	ldi	r22, 0x05	; 5
    1f1e:	8e e0       	ldi	r24, 0x0E	; 14
    1f20:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <reg_write_bit>
  
	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	67 e0       	ldi	r22, 0x07	; 7
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	66 e0       	ldi	r22, 0x06	; 6
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <reg_write_bit2F>
  
	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	66 e0       	ldi	r22, 0x06	; 6
    1f3c:	88 e0       	ldi	r24, 0x08	; 8
    1f3e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <reg_write_bit>
	reg_write(0x09, 0x17);            //SYNC_CFG0: 0x17        32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    1f42:	67 e1       	ldi	r22, 0x17	; 23
    1f44:	89 e0       	ldi	r24, 0x09	; 9
    1f46:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
  
	//set packets
	reg_write(0x26, 0x00);            //PKT_CFG2: 0x00         set FIFO mode
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	86 e2       	ldi	r24, 0x26	; 38
    1f4e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
	reg_write(0x2E, 0xFF);            //PKT_LEN: 0xFF          set packet length to 0xFF (max)  
    1f52:	6f ef       	ldi	r22, 0xFF	; 255
    1f54:	8e e2       	ldi	r24, 0x2E	; 46
    1f56:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <reg_write>
    
	//Frequency setting
	cmd_str(SNOP);
    1f5a:	8d e3       	ldi	r24, 0x3D	; 61
    1f5c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <cmd_str>
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    1f60:	6c e6       	ldi	r22, 0x6C	; 108
    1f62:	8c e0       	ldi	r24, 0x0C	; 12
    1f64:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    1f68:	60 e8       	ldi	r22, 0x80	; 128
    1f6a:	8d e0       	ldi	r24, 0x0D	; 13
    1f6c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <reg_write2F>

	//set up GPIO1 to 17
	//reg_write(0x00, 17);
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    1f70:	83 e3       	ldi	r24, 0x33	; 51
    1f72:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <cmd_str>
	delay_ms(250);
    1f76:	8a ef       	ldi	r24, 0xFA	; 250
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <delay_ms>

	cmd_str(SAFC);					 // Automatic frequency control
    1f7e:	87 e3       	ldi	r24, 0x37	; 55
    1f80:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <cmd_str>
	delay_ms(250);
    1f84:	8a ef       	ldi	r24, 0xFA	; 250
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <delay_ms>
	
	//reg_write2F(0xD2, 0x00);
	//reg_write2F(0xD4, 0xFF);
	
	msg_received = 0;
    1f8c:	10 92 0c 01 	sts	0x010C, r1

	cmd_str(SRX);                    // Put in RX mode
    1f90:	84 e3       	ldi	r24, 0x34	; 52
    1f92:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <cmd_str>
    1f96:	08 95       	ret

00001f98 <__tablejump2__>:
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31

00001f9c <__tablejump__>:
    1f9c:	05 90       	lpm	r0, Z+
    1f9e:	f4 91       	lpm	r31, Z
    1fa0:	e0 2d       	mov	r30, r0
    1fa2:	09 94       	ijmp

00001fa4 <_exit>:
    1fa4:	f8 94       	cli

00001fa6 <__stop_program>:
    1fa6:	ff cf       	rjmp	.-2      	; 0x1fa6 <__stop_program>
