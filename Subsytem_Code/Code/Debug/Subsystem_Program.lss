
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000231c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002a0  00800100  00800100  00002390  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000002e0  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004438  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000011f6  00000000  00000000  00006ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000139b  00000000  00000000  00007cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000720  00000000  00000000  0000906c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b43  00000000  00000000  0000978c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000023c4  00000000  00000000  0000a2cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000278  00000000  00000000  0000c693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//if the flag is set from commands, then flip the pin that controls the battBalance on.
//batt balance pins are 23 and 24 

void run_battBalance()
{
	if (balance_l == 1)
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
	{
		PIN_set(BALANCE_L_P);
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
	}
	if (balance_l == 0)
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
	{
		PIN_clr(BALANCE_L_P);
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
	}
	if (balance_h == 1)
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
	{
		PIN_set(BALANCE_H_P);
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
	}
	if (balance_h == 0)
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 47 11 	jmp	0x228e	; 0x228e <__vector_12>
	{
		PIN_clr(BALANCE_H_P);
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__vector_15>
      40:	0c 94 47 10 	jmp	0x208e	; 0x208e <__vector_16>
      44:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__vector_17>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      7c:	bb 00       	.word	0x00bb	; ????
      7e:	be 00       	.word	0x00be	; ????
      80:	cb 00       	.word	0x00cb	; ????
      82:	42 01       	movw	r8, r4
      84:	ce 00       	.word	0x00ce	; ????
      86:	42 01       	movw	r8, r4
      88:	db 00       	.word	0x00db	; ????
      8a:	42 01       	movw	r8, r4
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	f5 00       	.word	0x00f5	; ????
      90:	02 01       	movw	r0, r4
      92:	0f 01       	movw	r0, r30
      94:	12 01       	movw	r2, r4
      96:	42 01       	movw	r8, r4
      98:	1f 01       	movw	r2, r30
      9a:	42 01       	movw	r8, r4
      9c:	42 01       	movw	r8, r4
      9e:	3f 01       	movw	r6, r30
      a0:	42 01       	movw	r8, r4
      a2:	3c 01       	movw	r6, r24
      a4:	9f 04       	cpc	r9, r15
      a6:	31 05       	cpc	r19, r1
      a8:	bb 05       	cpc	r27, r11
      aa:	2f 06       	cpc	r2, r31
      ac:	6f 06       	cpc	r6, r31
      ae:	eb 06       	cpc	r14, r27
      b0:	68 07       	cpc	r22, r24
      b2:	05 08       	sbc	r0, r5
      b4:	ab 08       	sbc	r10, r11
      b6:	99 04       	cpc	r9, r9
      b8:	b4 09       	sbc	r27, r4

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
      c6:	23 e0       	ldi	r18, 0x03	; 3
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 3a       	cpi	r26, 0xA0	; 160
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <main>
      da:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      e8:	82 ee       	ldi	r24, 0xE2	; 226
      ea:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      ee:	80 ea       	ldi	r24, 0xA0	; 160
      f0:	80 93 7b 00 	sts	0x007B, r24
      f4:	08 95       	ret

000000f6 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
      f6:	21 ec       	ldi	r18, 0xC1	; 193
      f8:	31 e0       	ldi	r19, 0x01	; 1
      fa:	30 93 f0 01 	sts	0x01F0, r19
      fe:	20 93 ef 01 	sts	0x01EF, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     102:	10 92 f3 01 	sts	0x01F3, r1
	message.id.std = id;  // populate ID field with ID Tag
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	70 93 eb 01 	sts	0x01EB, r23
     10c:	60 93 ea 01 	sts	0x01EA, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     110:	22 e0       	ldi	r18, 0x02	; 2
     112:	20 93 e9 01 	sts	0x01E9, r18
	message.dlc = 8;			 // Max length of a CAN message.
     116:	28 e0       	ldi	r18, 0x08	; 8
     118:	20 93 ee 01 	sts	0x01EE, r18
	mob_number = 4;
     11c:	24 e0       	ldi	r18, 0x04	; 4
     11e:	20 93 ea 02 	sts	0x02EA, r18
     122:	dc 01       	movw	r26, r24
     124:	e1 ec       	ldi	r30, 0xC1	; 193
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	89 ec       	ldi	r24, 0xC9	; 201
     12a:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     12c:	2d 91       	ld	r18, X+
     12e:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     130:	e8 17       	cp	r30, r24
     132:	f9 07       	cpc	r31, r25
     134:	d9 f7       	brne	.-10     	; 0x12c <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     136:	60 91 ea 02 	lds	r22, 0x02EA
     13a:	88 ee       	ldi	r24, 0xE8	; 232
     13c:	91 e0       	ldi	r25, 0x01	; 1
     13e:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     142:	81 11       	cpse	r24, r1
     144:	f8 cf       	rjmp	.-16     	; 0x136 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     146:	60 91 ea 02 	lds	r22, 0x02EA
     14a:	88 ee       	ldi	r24, 0xE8	; 232
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 81 0a 	call	0x1502	; 0x1502 <can_get_status>
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	c1 f3       	breq	.-16     	; 0x146 <can_send_message+0x50>

	return;
}
     156:	08 95       	ret

00000158 <decode_command>:

void decode_command(uint8_t* command_array)
{		
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	ec 01       	movw	r28, r24
	uint8_t i, command  = *(command_array + 5);
	uint8_t req_by = (*(command_array + 7)) >> 4;

	switch(command)
     15e:	4d 81       	ldd	r20, Y+5	; 0x05
     160:	50 e0       	ldi	r21, 0x00	; 0
     162:	fa 01       	movw	r30, r20
     164:	31 97       	sbiw	r30, 0x01	; 1
     166:	e4 31       	cpi	r30, 0x14	; 20
     168:	f1 05       	cpc	r31, r1
     16a:	08 f0       	brcs	.+2      	; 0x16e <decode_command+0x16>
     16c:	8b c0       	rjmp	.+278    	; 0x284 <decode_command+0x12c>
     16e:	e2 5c       	subi	r30, 0xC2	; 194
     170:	ff 4f       	sbci	r31, 0xFF	; 255
     172:	0c 94 86 11 	jmp	0x230c	; 0x230c <__tablejump2__>
		case REQ_RESPONSE :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED3);
			}
			send_now = 1;
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 93 07 02 	sts	0x0207, r24
		case REQ_DATA :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
			send_data = 1;
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	80 93 cd 02 	sts	0x02CD, r24
     182:	de 01       	movw	r26, r28
     184:	e4 ef       	ldi	r30, 0xF4	; 244
     186:	f1 e0       	ldi	r31, 0x01	; 1
     188:	8c ef       	ldi	r24, 0xFC	; 252
     18a:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     18c:	2d 91       	ld	r18, X+
     18e:	21 93       	st	Z+, r18
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
			send_data = 1;
			for (i = 0; i < 8; i ++)
     190:	e8 17       	cp	r30, r24
     192:	f9 07       	cpc	r31, r25
     194:	d9 f7       	brne	.-10     	; 0x18c <decode_command+0x34>
		case REQ_HK :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED2);
			}
			send_hk = 1;
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 93 ab 02 	sts	0x02AB, r24
		case REQ_READ:
			read_response = 1;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 93 12 02 	sts	0x0212, r24
     1a2:	de 01       	movw	r26, r28
     1a4:	e7 e9       	ldi	r30, 0x97	; 151
     1a6:	f3 e0       	ldi	r31, 0x03	; 3
     1a8:	8f e9       	ldi	r24, 0x9F	; 159
     1aa:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     1ac:	2d 91       	ld	r18, X+
     1ae:	21 93       	st	Z+, r18
				PIN_toggle(LED2);
			}
			send_hk = 1;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1b0:	e8 17       	cp	r30, r24
     1b2:	f9 07       	cpc	r31, r25
     1b4:	d9 f7       	brne	.-10     	; 0x1ac <decode_command+0x54>
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	80 93 d8 01 	sts	0x01D8, r24
     1bc:	de 01       	movw	r26, r28
     1be:	e1 e0       	ldi	r30, 0x01	; 1
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	89 e0       	ldi	r24, 0x09	; 9
     1c4:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     1c6:	2d 91       	ld	r18, X+
     1c8:	21 93       	st	Z+, r18
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     1ca:	e8 17       	cp	r30, r24
     1cc:	f9 07       	cpc	r31, r25
     1ce:	d9 f7       	brne	.-10     	; 0x1c6 <decode_command+0x6e>
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 ca 02 	sts	0x02CA, r24
     1d6:	de 01       	movw	r26, r28
     1d8:	e9 ed       	ldi	r30, 0xD9	; 217
     1da:	f1 e0       	ldi	r31, 0x01	; 1
     1dc:	81 ee       	ldi	r24, 0xE1	; 225
     1de:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				sensh_arr[i] = *(command_array + i);
     1e0:	2d 91       	ld	r18, X+
     1e2:	21 93       	st	Z+, r18
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
			for (i = 0; i < 8; i ++)
     1e4:	e8 17       	cp	r30, r24
     1e6:	f9 07       	cpc	r31, r25
     1e8:	d9 f7       	brne	.-10     	; 0x1e0 <decode_command+0x88>
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	80 93 cf 02 	sts	0x02CF, r24
     1f0:	de 01       	movw	r26, r28
     1f2:	ea ef       	ldi	r30, 0xFA	; 250
     1f4:	f2 e0       	ldi	r31, 0x02	; 2
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				sensl_arr[i] = *(command_array + i);
     1fa:	2d 91       	ld	r18, X+
     1fc:	21 93       	st	Z+, r18
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
			for (i = 0; i < 8; i ++)
     1fe:	e8 17       	cp	r30, r24
     200:	f9 07       	cpc	r31, r25
     202:	d9 f7       	brne	.-10     	; 0x1fa <decode_command+0xa2>
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	80 93 ce 02 	sts	0x02CE, r24
     20a:	de 01       	movw	r26, r28
     20c:	ec ec       	ldi	r30, 0xCC	; 204
     20e:	f1 e0       	ldi	r31, 0x01	; 1
     210:	84 ed       	ldi	r24, 0xD4	; 212
     212:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				setv_arr[i] = *(command_array + i);
     214:	2d 91       	ld	r18, X+
     216:	21 93       	st	Z+, r18
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
			for (i = 0; i < 8; i ++)
     218:	e8 17       	cp	r30, r24
     21a:	f9 07       	cpc	r31, r25
     21c:	d9 f7       	brne	.-10     	; 0x214 <decode_command+0xbc>
			{
				setv_arr[i] = *(command_array + i);
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
     21e:	88 81       	ld	r24, Y
     220:	80 93 03 02 	sts	0x0203, r24
		case SEND_TM:
			new_tm_msgf = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 93 09 02 	sts	0x0209, r24
     22a:	de 01       	movw	r26, r28
     22c:	e0 ed       	ldi	r30, 0xD0	; 208
     22e:	f2 e0       	ldi	r31, 0x02	; 2
     230:	88 ed       	ldi	r24, 0xD8	; 216
     232:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				new_tm_msg[i] = *(command_array + i);
     234:	2d 91       	ld	r18, X+
     236:	21 93       	st	Z+, r18
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
		case SEND_TM:
			new_tm_msgf = 1;
			for (i = 0; i < 8; i ++)
     238:	e8 17       	cp	r30, r24
     23a:	f9 07       	cpc	r31, r25
     23c:	d9 f7       	brne	.-10     	; 0x234 <decode_command+0xdc>
			{
				new_tm_msg[i] = *(command_array + i);
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
     23e:	80 91 cc 02 	lds	r24, 0x02CC
     242:	81 11       	cpse	r24, r1
     244:	19 c0       	rjmp	.+50     	; 0x278 <decode_command+0x120>
     246:	80 91 ef 02 	lds	r24, 0x02EF
     24a:	81 11       	cpse	r24, r1
     24c:	15 c0       	rjmp	.+42     	; 0x278 <decode_command+0x120>
}

// Let the OBC know that you are ready to receive TM packet.
static void start_tm_packet(void)
{
	send_arr[7] = (SELF_ID << 4)|COMS_TASK_ID;
     24e:	87 e1       	ldi	r24, 0x17	; 23
     250:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_COM;
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[5] = OK_START_TM_PACKET;
     25a:	80 e1       	ldi	r24, 0x10	; 16
     25c:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
     260:	80 91 03 02 	lds	r24, 0x0203
     264:	80 93 b9 01 	sts	0x01B9, r24
	receiving_tmf = 1;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 ef 02 	sts	0x02EF, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
     26e:	61 e1       	ldi	r22, 0x11	; 17
     270:	85 eb       	ldi	r24, 0xB5	; 181
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
				start_tm_packet();
		case TC_TRANSACTION_RESP:
			tc_transfer_completef = *command_array;
     278:	88 81       	ld	r24, Y
     27a:	80 93 e5 01 	sts	0x01E5, r24
		case OK_START_TC_PACKET:
			start_tc_transferf = 1;
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	80 93 e4 01 	sts	0x01E4, r24
		default:
			return;
	}
	return;
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <set_up_msg>:

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     28a:	10 92 f3 01 	sts	0x01F3, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     28e:	95 e0       	ldi	r25, 0x05	; 5
     290:	90 93 e9 01 	sts	0x01E9, r25
	message.dlc = 8;			 // Max length of a CAN message.
     294:	98 e0       	ldi	r25, 0x08	; 8
     296:	90 93 ee 01 	sts	0x01EE, r25
	mob_number = mailbox;
     29a:	80 93 ea 02 	sts	0x02EA, r24
	
	if(mailbox == 0)
     29e:	81 11       	cpse	r24, r1
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     2a2:	83 ea       	ldi	r24, 0xA3	; 163
     2a4:	92 e0       	ldi	r25, 0x02	; 2
     2a6:	90 93 f0 01 	sts	0x01F0, r25
     2aa:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     2ae:	80 91 ba 02 	lds	r24, 0x02BA
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	90 93 eb 01 	sts	0x01EB, r25
     2b8:	80 93 ea 01 	sts	0x01EA, r24
		return;
     2bc:	08 95       	ret
	}
	if(mailbox == 1)
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	71 f4       	brne	.+28     	; 0x2de <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     2c2:	85 ea       	ldi	r24, 0xA5	; 165
     2c4:	91 e0       	ldi	r25, 0x01	; 1
     2c6:	90 93 f0 01 	sts	0x01F0, r25
     2ca:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = id_array[1];
     2ce:	80 91 bb 02 	lds	r24, 0x02BB
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	90 93 eb 01 	sts	0x01EB, r25
     2d8:	80 93 ea 01 	sts	0x01EA, r24
		return;
     2dc:	08 95       	ret
	}
	if(mailbox == 2)
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	71 f4       	brne	.+28     	; 0x2fe <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     2e2:	8d ea       	ldi	r24, 0xAD	; 173
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	90 93 f0 01 	sts	0x01F0, r25
     2ea:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = id_array[2];
     2ee:	80 91 bc 02 	lds	r24, 0x02BC
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	90 93 eb 01 	sts	0x01EB, r25
     2f8:	80 93 ea 01 	sts	0x01EA, r24
		return;
     2fc:	08 95       	ret
	}
	if(mailbox == 3)
     2fe:	83 30       	cpi	r24, 0x03	; 3
     300:	71 f4       	brne	.+28     	; 0x31e <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     302:	82 ec       	ldi	r24, 0xC2	; 194
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	90 93 f0 01 	sts	0x01F0, r25
     30a:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = id_array[3];
     30e:	80 91 bd 02 	lds	r24, 0x02BD
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	90 93 eb 01 	sts	0x01EB, r25
     318:	80 93 ea 01 	sts	0x01EA, r24
		return;
     31c:	08 95       	ret
	}
	if(mailbox == 5)
     31e:	85 30       	cpi	r24, 0x05	; 5
     320:	69 f4       	brne	.+26     	; 0x33c <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     322:	8e ed       	ldi	r24, 0xDE	; 222
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	90 93 f0 01 	sts	0x01F0, r25
     32a:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = id_array[5];
     32e:	80 91 bf 02 	lds	r24, 0x02BF
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	90 93 eb 01 	sts	0x01EB, r25
     338:	80 93 ea 01 	sts	0x01EA, r24
     33c:	08 95       	ret

0000033e <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     33e:	81 11       	cpse	r24, r1
     340:	20 c0       	rjmp	.+64     	; 0x382 <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     342:	10 92 f3 01 	sts	0x01F3, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     346:	85 e0       	ldi	r24, 0x05	; 5
     348:	80 93 e9 01 	sts	0x01E9, r24
		message.dlc = 8;			 // Max length of a CAN message.
     34c:	88 e0       	ldi	r24, 0x08	; 8
     34e:	80 93 ee 01 	sts	0x01EE, r24
		mob_number = mailbox;
     352:	10 92 ea 02 	sts	0x02EA, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     356:	83 ea       	ldi	r24, 0xA3	; 163
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	90 93 f0 01 	sts	0x01F0, r25
     35e:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     362:	80 91 ba 02 	lds	r24, 0x02BA
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	90 93 eb 01 	sts	0x01EB, r25
     36c:	80 93 ea 01 	sts	0x01EA, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     370:	60 91 ea 02 	lds	r22, 0x02EA
     374:	88 ee       	ldi	r24, 0xE8	; 232
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     37c:	81 11       	cpse	r24, r1
     37e:	f8 cf       	rjmp	.-16     	; 0x370 <clean_up_msg+0x32>
     380:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	01 f5       	brne	.+64     	; 0x3c6 <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     386:	10 92 f3 01 	sts	0x01F3, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     38a:	85 e0       	ldi	r24, 0x05	; 5
     38c:	80 93 e9 01 	sts	0x01E9, r24
		message.dlc = 8;			 // Max length of a CAN message.
     390:	88 e0       	ldi	r24, 0x08	; 8
     392:	80 93 ee 01 	sts	0x01EE, r24
		mob_number = mailbox;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	80 93 ea 02 	sts	0x02EA, r24
		message.pt_data = &data1[0];
     39c:	85 ea       	ldi	r24, 0xA5	; 165
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	90 93 f0 01 	sts	0x01F0, r25
     3a4:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = SUB0_ID1;
     3a8:	85 e1       	ldi	r24, 0x15	; 21
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	90 93 eb 01 	sts	0x01EB, r25
     3b0:	80 93 ea 01 	sts	0x01EA, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3b4:	60 91 ea 02 	lds	r22, 0x02EA
     3b8:	88 ee       	ldi	r24, 0xE8	; 232
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     3c0:	81 11       	cpse	r24, r1
     3c2:	f8 cf       	rjmp	.-16     	; 0x3b4 <clean_up_msg+0x76>
     3c4:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     3c6:	82 30       	cpi	r24, 0x02	; 2
     3c8:	09 f5       	brne	.+66     	; 0x40c <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3ca:	10 92 f3 01 	sts	0x01F3, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3ce:	85 e0       	ldi	r24, 0x05	; 5
     3d0:	80 93 e9 01 	sts	0x01E9, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3d4:	88 e0       	ldi	r24, 0x08	; 8
     3d6:	80 93 ee 01 	sts	0x01EE, r24
		mob_number = mailbox;
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	80 93 ea 02 	sts	0x02EA, r24
		message.pt_data = &data2[0];
     3e0:	8d ea       	ldi	r24, 0xAD	; 173
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	90 93 f0 01 	sts	0x01F0, r25
     3e8:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = id_array[2];
     3ec:	80 91 bc 02 	lds	r24, 0x02BC
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	90 93 eb 01 	sts	0x01EB, r25
     3f6:	80 93 ea 01 	sts	0x01EA, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3fa:	60 91 ea 02 	lds	r22, 0x02EA
     3fe:	88 ee       	ldi	r24, 0xE8	; 232
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     406:	81 11       	cpse	r24, r1
     408:	f8 cf       	rjmp	.-16     	; 0x3fa <clean_up_msg+0xbc>
     40a:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     40c:	83 30       	cpi	r24, 0x03	; 3
     40e:	09 f5       	brne	.+66     	; 0x452 <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     410:	10 92 f3 01 	sts	0x01F3, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     414:	85 e0       	ldi	r24, 0x05	; 5
     416:	80 93 e9 01 	sts	0x01E9, r24
		message.dlc = 8;			 // Max length of a CAN message.
     41a:	88 e0       	ldi	r24, 0x08	; 8
     41c:	80 93 ee 01 	sts	0x01EE, r24
		mob_number = mailbox;
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	80 93 ea 02 	sts	0x02EA, r24
		message.pt_data = &data3[0];
     426:	82 ec       	ldi	r24, 0xC2	; 194
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	90 93 f0 01 	sts	0x01F0, r25
     42e:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = id_array[3];
     432:	80 91 bd 02 	lds	r24, 0x02BD
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	90 93 eb 01 	sts	0x01EB, r25
     43c:	80 93 ea 01 	sts	0x01EA, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     440:	60 91 ea 02 	lds	r22, 0x02EA
     444:	88 ee       	ldi	r24, 0xE8	; 232
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     44c:	81 11       	cpse	r24, r1
     44e:	f8 cf       	rjmp	.-16     	; 0x440 <clean_up_msg+0x102>
     450:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     452:	85 30       	cpi	r24, 0x05	; 5
     454:	f1 f4       	brne	.+60     	; 0x492 <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     456:	10 92 f3 01 	sts	0x01F3, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     45a:	80 93 e9 01 	sts	0x01E9, r24
		message.dlc = 8;			 // Max length of a CAN message.
     45e:	98 e0       	ldi	r25, 0x08	; 8
     460:	90 93 ee 01 	sts	0x01EE, r25
		mob_number = mailbox;
     464:	80 93 ea 02 	sts	0x02EA, r24
		message.pt_data = &data5[0];
     468:	8e ed       	ldi	r24, 0xDE	; 222
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	90 93 f0 01 	sts	0x01F0, r25
     470:	80 93 ef 01 	sts	0x01EF, r24
		message.id.std = id_array[5];
     474:	80 91 bf 02 	lds	r24, 0x02BF
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 eb 01 	sts	0x01EB, r25
     47e:	80 93 ea 01 	sts	0x01EA, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     482:	60 91 ea 02 	lds	r22, 0x02EA
     486:	88 ee       	ldi	r24, 0xE8	; 232
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     48e:	81 11       	cpse	r24, r1
     490:	f8 cf       	rjmp	.-16     	; 0x482 <clean_up_msg+0x144>
     492:	08 95       	ret

00000494 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     498:	85 e0       	ldi	r24, 0x05	; 5
     49a:	0e 94 45 01 	call	0x28a	; 0x28a <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     49e:	60 91 ea 02 	lds	r22, 0x02EA
     4a2:	88 ee       	ldi	r24, 0xE8	; 232
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 81 0a 	call	0x1502	; 0x1502 <can_get_status>
     4aa:	81 30       	cpi	r24, 0x01	; 1
     4ac:	11 f1       	breq	.+68     	; 0x4f2 <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     4ae:	80 91 f1 01 	lds	r24, 0x01F1
     4b2:	80 32       	cpi	r24, 0x20	; 32
     4b4:	d9 f4       	brne	.+54     	; 0x4ec <can_check_housekeep+0x58>
     4b6:	a0 91 ef 01 	lds	r26, 0x01EF
     4ba:	b0 91 f0 01 	lds	r27, 0x01F0
     4be:	ca eb       	ldi	r28, 0xBA	; 186
     4c0:	d2 e0       	ldi	r29, 0x02	; 2
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     4c2:	e2 eb       	ldi	r30, 0xB2	; 178
     4c4:	f2 e0       	ldi	r31, 0x02	; 2
     4c6:	8d 91       	ld	r24, X+
     4c8:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     4ca:	ec 17       	cp	r30, r28
     4cc:	fd 07       	cpc	r31, r29
     4ce:	d9 f7       	brne	.-10     	; 0x4c6 <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     4d0:	80 91 b8 02 	lds	r24, 0x02B8
     4d4:	82 30       	cpi	r24, 0x02	; 2
     4d6:	21 f4       	brne	.+8      	; 0x4e0 <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     4d8:	82 eb       	ldi	r24, 0xB2	; 178
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	0e 94 ac 00 	call	0x158	; 0x158 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     4e0:	e2 eb       	ldi	r30, 0xB2	; 178
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     4e4:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     4e6:	ec 17       	cp	r30, r28
     4e8:	fd 07       	cpc	r31, r29
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     4ec:	85 e0       	ldi	r24, 0x05	; 5
     4ee:	0e 94 9f 01 	call	0x33e	; 0x33e <clean_up_msg>
	}	
	return;
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <can_check_general>:
#include "can_api.h"

static void start_tm_packet(void);

void can_check_general(void)
{
     4f8:	9f 92       	push	r9
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     50e:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     510:	01 ef       	ldi	r16, 0xF1	; 241
     512:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     514:	0f 2e       	mov	r0, r31
     516:	ff ee       	ldi	r31, 0xEF	; 239
     518:	af 2e       	mov	r10, r31
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	bf 2e       	mov	r11, r31
     51e:	f0 2d       	mov	r31, r0
     520:	ca eb       	ldi	r28, 0xBA	; 186
     522:	d2 e0       	ldi	r29, 0x02	; 2
     524:	0f 2e       	mov	r0, r31
     526:	f2 eb       	ldi	r31, 0xB2	; 178
     528:	ef 2e       	mov	r14, r31
     52a:	f2 e0       	ldi	r31, 0x02	; 2
     52c:	ff 2e       	mov	r15, r31
     52e:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     530:	0f 2e       	mov	r0, r31
     532:	f8 eb       	ldi	r31, 0xB8	; 184
     534:	cf 2e       	mov	r12, r31
     536:	f2 e0       	ldi	r31, 0x02	; 2
     538:	df 2e       	mov	r13, r31
     53a:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     53c:	89 2d       	mov	r24, r9
     53e:	0e 94 45 01 	call	0x28a	; 0x28a <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     542:	60 91 ea 02 	lds	r22, 0x02EA
     546:	88 ee       	ldi	r24, 0xE8	; 232
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 81 0a 	call	0x1502	; 0x1502 <can_get_status>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	e1 f0       	breq	.+56     	; 0x58a <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     552:	f8 01       	movw	r30, r16
     554:	80 81       	ld	r24, Z
     556:	80 32       	cpi	r24, 0x20	; 32
     558:	a9 f4       	brne	.+42     	; 0x584 <can_check_general+0x8c>
     55a:	f5 01       	movw	r30, r10
     55c:	a0 81       	ld	r26, Z
     55e:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     560:	f7 01       	movw	r30, r14
     562:	8d 91       	ld	r24, X+
     564:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     566:	ec 17       	cp	r30, r28
     568:	fd 07       	cpc	r31, r29
     56a:	d9 f7       	brne	.-10     	; 0x562 <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     56c:	f6 01       	movw	r30, r12
     56e:	80 81       	ld	r24, Z
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	19 f4       	brne	.+6      	; 0x57a <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     574:	c7 01       	movw	r24, r14
     576:	0e 94 ac 00 	call	0x158	; 0x158 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     57a:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     57c:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     57e:	ec 17       	cp	r30, r28
     580:	fd 07       	cpc	r31, r29
     582:	e1 f7       	brne	.-8      	; 0x57c <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     584:	89 2d       	mov	r24, r9
     586:	0e 94 9f 01 	call	0x33e	; 0x33e <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     58a:	93 94       	inc	r9
     58c:	f4 e0       	ldi	r31, 0x04	; 4
     58e:	9f 12       	cpse	r9, r31
     590:	d5 cf       	rjmp	.-86     	; 0x53c <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     592:	0e 94 4a 02 	call	0x494	; 0x494 <can_check_housekeep>
	
	return;
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	08 95       	ret

000005ae <can_init_mobs>:
/*		This function initializes our can message objects with their ID	*/
/*		and sets whether or not they are in transmit mode or receive.	*/
/************************************************************************/

void can_init_mobs(void)
{
     5ae:	8f 92       	push	r8
     5b0:	9f 92       	push	r9
     5b2:	bf 92       	push	r11
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
		id_array[5] = SUB0_ID5;
	}
	
	if(SELF_ID == 1)
	{
		id_array[0] = SUB1_ID0;
     5c4:	8a e1       	ldi	r24, 0x1A	; 26
     5c6:	80 93 ba 02 	sts	0x02BA, r24
		id_array[1] = SUB1_ID1;
     5ca:	8b e1       	ldi	r24, 0x1B	; 27
     5cc:	80 93 bb 02 	sts	0x02BB, r24
		id_array[2] = SUB1_ID2;
     5d0:	8c e1       	ldi	r24, 0x1C	; 28
     5d2:	80 93 bc 02 	sts	0x02BC, r24
		id_array[3] = SUB1_ID3;
     5d6:	8d e1       	ldi	r24, 0x1D	; 29
     5d8:	80 93 bd 02 	sts	0x02BD, r24
		id_array[4] = SUB1_ID4;
     5dc:	8e e1       	ldi	r24, 0x1E	; 30
     5de:	80 93 be 02 	sts	0x02BE, r24
		id_array[5] = SUB1_ID5;
     5e2:	8f e1       	ldi	r24, 0x1F	; 31
     5e4:	80 93 bf 02 	sts	0x02BF, r24
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     5e8:	83 ea       	ldi	r24, 0xA3	; 163
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	90 93 f0 01 	sts	0x01F0, r25
     5f0:	80 93 ef 01 	sts	0x01EF, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     5f4:	10 92 f3 01 	sts	0x01F3, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     5f8:	8a e1       	ldi	r24, 0x1A	; 26
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	90 93 eb 01 	sts	0x01EB, r25
     600:	80 93 ea 01 	sts	0x01EA, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     604:	85 e0       	ldi	r24, 0x05	; 5
     606:	80 93 e9 01 	sts	0x01E9, r24
	message.dlc = 8;			 // Max length of a CAN message.
     60a:	88 e0       	ldi	r24, 0x08	; 8
     60c:	80 93 ee 01 	sts	0x01EE, r24
	mob_number = 0;
     610:	10 92 ea 02 	sts	0x02EA, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     614:	60 91 ea 02 	lds	r22, 0x02EA
     618:	88 ee       	ldi	r24, 0xE8	; 232
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     620:	81 11       	cpse	r24, r1
     622:	f8 cf       	rjmp	.-16     	; 0x614 <can_init_mobs+0x66>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     624:	85 ea       	ldi	r24, 0xA5	; 165
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	90 93 f0 01 	sts	0x01F0, r25
     62c:	80 93 ef 01 	sts	0x01EF, r24
	message.ctrl.ide = 0;
     630:	10 92 f3 01 	sts	0x01F3, r1
	message.id.std = id_array[1];
     634:	80 91 bb 02 	lds	r24, 0x02BB
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	90 93 eb 01 	sts	0x01EB, r25
     63e:	80 93 ea 01 	sts	0x01EA, r24
	message.cmd = CMD_RX_DATA;
     642:	85 e0       	ldi	r24, 0x05	; 5
     644:	80 93 e9 01 	sts	0x01E9, r24
	message.dlc = 8;
     648:	88 e0       	ldi	r24, 0x08	; 8
     64a:	80 93 ee 01 	sts	0x01EE, r24
	mob_number = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 ea 02 	sts	0x02EA, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     654:	60 91 ea 02 	lds	r22, 0x02EA
     658:	88 ee       	ldi	r24, 0xE8	; 232
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     660:	81 11       	cpse	r24, r1
     662:	f8 cf       	rjmp	.-16     	; 0x654 <can_init_mobs+0xa6>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     664:	8d ea       	ldi	r24, 0xAD	; 173
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	90 93 f0 01 	sts	0x01F0, r25
     66c:	80 93 ef 01 	sts	0x01EF, r24
	message.ctrl.ide = 0;
     670:	10 92 f3 01 	sts	0x01F3, r1
	message.id.std = id_array[2];
     674:	80 91 bc 02 	lds	r24, 0x02BC
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	90 93 eb 01 	sts	0x01EB, r25
     67e:	80 93 ea 01 	sts	0x01EA, r24
	message.cmd = CMD_RX_DATA;
     682:	85 e0       	ldi	r24, 0x05	; 5
     684:	80 93 e9 01 	sts	0x01E9, r24
	message.dlc = 8;
     688:	88 e0       	ldi	r24, 0x08	; 8
     68a:	80 93 ee 01 	sts	0x01EE, r24
	mob_number = 2;
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	80 93 ea 02 	sts	0x02EA, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     694:	60 91 ea 02 	lds	r22, 0x02EA
     698:	88 ee       	ldi	r24, 0xE8	; 232
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     6a0:	81 11       	cpse	r24, r1
     6a2:	f8 cf       	rjmp	.-16     	; 0x694 <can_init_mobs+0xe6>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     6a4:	82 ec       	ldi	r24, 0xC2	; 194
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	90 93 f0 01 	sts	0x01F0, r25
     6ac:	80 93 ef 01 	sts	0x01EF, r24
	message.ctrl.ide = 0;
     6b0:	10 92 f3 01 	sts	0x01F3, r1
	message.id.std = id_array[3];
     6b4:	80 91 bd 02 	lds	r24, 0x02BD
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	90 93 eb 01 	sts	0x01EB, r25
     6be:	80 93 ea 01 	sts	0x01EA, r24
	message.cmd = CMD_RX_DATA;
     6c2:	85 e0       	ldi	r24, 0x05	; 5
     6c4:	80 93 e9 01 	sts	0x01E9, r24
	message.dlc = 8;
     6c8:	88 e0       	ldi	r24, 0x08	; 8
     6ca:	80 93 ee 01 	sts	0x01EE, r24
	mob_number = 3;
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	80 93 ea 02 	sts	0x02EA, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     6d4:	60 91 ea 02 	lds	r22, 0x02EA
     6d8:	88 ee       	ldi	r24, 0xE8	; 232
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     6e0:	81 11       	cpse	r24, r1
     6e2:	f8 cf       	rjmp	.-16     	; 0x6d4 <can_init_mobs+0x126>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     6e4:	8e ed       	ldi	r24, 0xDE	; 222
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	90 93 f0 01 	sts	0x01F0, r25
     6ec:	80 93 ef 01 	sts	0x01EF, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     6f0:	10 92 f3 01 	sts	0x01F3, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     6f4:	80 91 bf 02 	lds	r24, 0x02BF
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	90 93 eb 01 	sts	0x01EB, r25
     6fe:	80 93 ea 01 	sts	0x01EA, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     702:	85 e0       	ldi	r24, 0x05	; 5
     704:	80 93 e9 01 	sts	0x01E9, r24
	message.dlc = 8;				// Max length of a CAN message.
     708:	98 e0       	ldi	r25, 0x08	; 8
     70a:	90 93 ee 01 	sts	0x01EE, r25
	mob_number = 5;
     70e:	80 93 ea 02 	sts	0x02EA, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     712:	60 91 ea 02 	lds	r22, 0x02EA
     716:	88 ee       	ldi	r24, 0xE8	; 232
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_cmd>
     71e:	81 11       	cpse	r24, r1
     720:	f8 cf       	rjmp	.-16     	; 0x712 <can_init_mobs+0x164>
     722:	0f 2e       	mov	r0, r31
     724:	f2 eb       	ldi	r31, 0xB2	; 178
     726:	cf 2e       	mov	r12, r31
     728:	f2 e0       	ldi	r31, 0x02	; 2
     72a:	df 2e       	mov	r13, r31
     72c:	f0 2d       	mov	r31, r0
     72e:	0f 2e       	mov	r0, r31
     730:	f5 eb       	ldi	r31, 0xB5	; 181
     732:	ef 2e       	mov	r14, r31
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	ff 2e       	mov	r15, r31
     738:	f0 2d       	mov	r31, r0
     73a:	07 e9       	ldi	r16, 0x97	; 151
     73c:	13 e0       	ldi	r17, 0x03	; 3
     73e:	61 e0       	ldi	r22, 0x01	; 1
     740:	71 e0       	ldi	r23, 0x01	; 1
     742:	44 ef       	ldi	r20, 0xF4	; 244
     744:	51 e0       	ldi	r21, 0x01	; 1
     746:	29 ed       	ldi	r18, 0xD9	; 217
     748:	31 e0       	ldi	r19, 0x01	; 1
     74a:	8a ef       	ldi	r24, 0xFA	; 250
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	cc ec       	ldi	r28, 0xCC	; 204
     750:	d1 e0       	ldi	r29, 0x01	; 1
     752:	a0 ed       	ldi	r26, 0xD0	; 208
     754:	b2 e0       	ldi	r27, 0x02	; 2
     756:	0f 2e       	mov	r0, r31
     758:	f0 ef       	ldi	r31, 0xF0	; 240
     75a:	8f 2e       	mov	r8, r31
     75c:	f2 e0       	ldi	r31, 0x02	; 2
     75e:	9f 2e       	mov	r9, r31
     760:	f0 2d       	mov	r31, r0
     762:	68 94       	set
     764:	bb 24       	eor	r11, r11
     766:	b3 f8       	bld	r11, 3
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     768:	f6 01       	movw	r30, r12
     76a:	11 92       	st	Z+, r1
     76c:	6f 01       	movw	r12, r30
		send_arr[i] = 0;
     76e:	f7 01       	movw	r30, r14
     770:	11 92       	st	Z+, r1
     772:	7f 01       	movw	r14, r30
		read_arr[i] = 0;
     774:	f8 01       	movw	r30, r16
     776:	11 92       	st	Z+, r1
     778:	8f 01       	movw	r16, r30
		write_arr[i] = 0;
     77a:	fb 01       	movw	r30, r22
     77c:	11 92       	st	Z+, r1
     77e:	bf 01       	movw	r22, r30
		data_req_arr[i] = 0;
     780:	fa 01       	movw	r30, r20
     782:	11 92       	st	Z+, r1
     784:	af 01       	movw	r20, r30
		sensh_arr[i] = 0;
     786:	f9 01       	movw	r30, r18
     788:	11 92       	st	Z+, r1
     78a:	9f 01       	movw	r18, r30
		sensl_arr[i] = 0;
     78c:	fc 01       	movw	r30, r24
     78e:	11 92       	st	Z+, r1
     790:	cf 01       	movw	r24, r30
		setv_arr[i] = 0;
     792:	19 92       	st	Y+, r1
		new_tm_msg[i] = 0;
     794:	1d 92       	st	X+, r1
		new_tc_msg[i] = 0;
     796:	f4 01       	movw	r30, r8
     798:	11 92       	st	Z+, r1
     79a:	4f 01       	movw	r8, r30
     79c:	ba 94       	dec	r11
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     79e:	21 f7       	brne	.-56     	; 0x768 <can_init_mobs+0x1ba>
     7a0:	e3 e1       	ldi	r30, 0x13	; 19
     7a2:	f2 e0       	ldi	r31, 0x02	; 2
     7a4:	a5 e0       	ldi	r26, 0x05	; 5
     7a6:	b3 e0       	ldi	r27, 0x03	; 3
     7a8:	82 ea       	ldi	r24, 0xA2	; 162
     7aa:	92 e0       	ldi	r25, 0x02	; 2
		new_tc_msg[i] = 0;
	}
	
	for (i = 0; i < 143; i++)		// Initialize the TM/TC Packet arrays.
	{
		current_tm[i] = 0;
     7ac:	11 92       	st	Z+, r1
		current_tc[i] = 0;
     7ae:	1d 92       	st	X+, r1
		setv_arr[i] = 0;
		new_tm_msg[i] = 0;
		new_tc_msg[i] = 0;
	}
	
	for (i = 0; i < 143; i++)		// Initialize the TM/TC Packet arrays.
     7b0:	e8 17       	cp	r30, r24
     7b2:	f9 07       	cpc	r31, r25
     7b4:	d9 f7       	brne	.-10     	; 0x7ac <can_init_mobs+0x1fe>
		current_tm[i] = 0;
		current_tc[i] = 0;
	}
	
	/* Initialize Global Command Flags to zero */
	send_now = 0;
     7b6:	10 92 07 02 	sts	0x0207, r1
	send_hk = 0;
     7ba:	10 92 ab 02 	sts	0x02AB, r1
	send_data = 0;
     7be:	10 92 cd 02 	sts	0x02CD, r1
	read_response = 0;
     7c2:	10 92 12 02 	sts	0x0212, r1
	write_response = 0;
     7c6:	10 92 d8 01 	sts	0x01D8, r1
	set_sens_h = 0;
     7ca:	10 92 ca 02 	sts	0x02CA, r1
	set_sens_l = 0;
     7ce:	10 92 cf 02 	sts	0x02CF, r1
	set_varf = 0;
     7d2:	10 92 ce 02 	sts	0x02CE, r1
	new_tm_msgf = 0;
     7d6:	10 92 09 02 	sts	0x0209, r1
	tm_sequence_count = 0;
     7da:	10 92 00 01 	sts	0x0100, r1
	current_tm_fullf = 0;
     7de:	10 92 cc 02 	sts	0x02CC, r1
	tc_packet_readyf = 0;
     7e2:	10 92 cb 02 	sts	0x02CB, r1
	tc_transfer_completef = 0;
     7e6:	10 92 e5 01 	sts	0x01E5, r1
	start_tc_transferf = 0;
     7ea:	10 92 e4 01 	sts	0x01E4, r1
	receiving_tmf = 0;
     7ee:	10 92 ef 02 	sts	0x02EF, r1
	
	return;
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	0f 91       	pop	r16
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	bf 90       	pop	r11
     804:	9f 90       	pop	r9
     806:	8f 90       	pop	r8
     808:	08 95       	ret

0000080a <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     80a:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     80c:	ad ee       	ldi	r26, 0xED	; 237
     80e:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     810:	3e ee       	ldi	r19, 0xEE	; 238
     812:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     814:	98 2f       	mov	r25, r24
     816:	92 95       	swap	r25
     818:	90 7f       	andi	r25, 0xF0	; 240
     81a:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     81c:	e3 2f       	mov	r30, r19
     81e:	f2 2f       	mov	r31, r18
     820:	11 92       	st	Z+, r1
     822:	e8 3f       	cpi	r30, 0xF8	; 248
     824:	f1 05       	cpc	r31, r1
     826:	e1 f7       	brne	.-8      	; 0x820 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     828:	8f 5f       	subi	r24, 0xFF	; 255
     82a:	86 30       	cpi	r24, 0x06	; 6
     82c:	99 f7       	brne	.-26     	; 0x814 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     82e:	08 95       	ret

00000830 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     830:	80 91 ef 00 	lds	r24, 0x00EF
     834:	80 7c       	andi	r24, 0xC0	; 192
     836:	61 f0       	breq	.+24     	; 0x850 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     838:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     83c:	98 2f       	mov	r25, r24
     83e:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     840:	28 2f       	mov	r18, r24
     842:	20 76       	andi	r18, 0x60	; 96
     844:	20 32       	cpi	r18, 0x20	; 32
     846:	31 f0       	breq	.+12     	; 0x854 <can_get_mob_status+0x24>
     848:	90 34       	cpi	r25, 0x40	; 64
     84a:	31 f0       	breq	.+12     	; 0x858 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     84c:	8f 71       	andi	r24, 0x1F	; 31
     84e:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     854:	89 2f       	mov	r24, r25
     856:	08 95       	ret
     858:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     85a:	08 95       	ret

0000085c <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     85c:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     85e:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     860:	aa ef       	ldi	r26, 0xFA	; 250
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	9c 91       	ld	r25, X
     866:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     868:	8f 5f       	subi	r24, 0xFF	; 255
     86a:	88 30       	cpi	r24, 0x08	; 8
     86c:	d9 f7       	brne	.-10     	; 0x864 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     86e:	08 95       	ret

00000870 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	80 93 e2 00 	sts	0x00E2, r24
     87c:	8c e0       	ldi	r24, 0x0C	; 12
     87e:	80 93 e3 00 	sts	0x00E3, r24
     882:	87 e3       	ldi	r24, 0x37	; 55
     884:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	08 95       	ret

0000088c <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     88c:	0e 94 38 04 	call	0x870	; 0x870 <can_fixed_baudrate>
     890:	88 23       	and	r24, r24
     892:	49 f0       	breq	.+18     	; 0x8a6 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     894:	0e 94 05 04 	call	0x80a	; 0x80a <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     898:	e8 ed       	ldi	r30, 0xD8	; 216
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	82 60       	ori	r24, 0x02	; 2
     8a0:	80 83       	st	Z, r24
    return (1);
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     8a6:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     8a8:	08 95       	ret

000008aa <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	1f 92       	push	r1
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     8b6:	11 96       	adiw	r26, 0x01	; 1
     8b8:	8c 91       	ld	r24, X
     8ba:	11 97       	sbiw	r26, 0x01	; 1
     8bc:	8c 30       	cpi	r24, 0x0C	; 12
     8be:	b1 f4       	brne	.+44     	; 0x8ec <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     8c0:	19 96       	adiw	r26, 0x09	; 9
     8c2:	8c 91       	ld	r24, X
     8c4:	19 97       	sbiw	r26, 0x09	; 9
     8c6:	80 36       	cpi	r24, 0x60	; 96
     8c8:	69 f4       	brne	.+26     	; 0x8e4 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     8ca:	86 2f       	mov	r24, r22
     8cc:	82 95       	swap	r24
     8ce:	80 7f       	andi	r24, 0xF0	; 240
     8d0:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     8d4:	ef ee       	ldi	r30, 0xEF	; 239
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	8f 73       	andi	r24, 0x3F	; 63
     8dc:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     8de:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     8e2:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     8e4:	19 96       	adiw	r26, 0x09	; 9
     8e6:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	07 c6       	rjmp	.+3086   	; 0x14fa <__stack+0xbfb>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     8ec:	86 2f       	mov	r24, r22
     8ee:	82 95       	swap	r24
     8f0:	80 7f       	andi	r24, 0xF0	; 240
     8f2:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     8f6:	80 91 ef 00 	lds	r24, 0x00EF
     8fa:	80 7c       	andi	r24, 0xC0	; 192
     8fc:	09 f0       	breq	.+2      	; 0x900 <__stack+0x1>
     8fe:	f9 c5       	rjmp	.+3058   	; 0x14f2 <__stack+0xbf3>
    {
      cmd->status = MOB_PENDING; 
     900:	80 e6       	ldi	r24, 0x60	; 96
     902:	19 96       	adiw	r26, 0x09	; 9
     904:	8c 93       	st	X, r24
     906:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     908:	6c 93       	st	X, r22
      Can_clear_mob();
     90a:	ee ee       	ldi	r30, 0xEE	; 238
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	11 92       	st	Z+, r1
     910:	e8 3f       	cpi	r30, 0xF8	; 248
     912:	f1 05       	cpc	r31, r1
     914:	e1 f7       	brne	.-8      	; 0x90e <__stack+0xf>
          
      switch (cmd->cmd)
     916:	11 96       	adiw	r26, 0x01	; 1
     918:	4c 91       	ld	r20, X
     91a:	11 97       	sbiw	r26, 0x01	; 1
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	fa 01       	movw	r30, r20
     920:	31 97       	sbiw	r30, 0x01	; 1
     922:	eb 30       	cpi	r30, 0x0B	; 11
     924:	f1 05       	cpc	r31, r1
     926:	08 f0       	brcs	.+2      	; 0x92a <__stack+0x2b>
     928:	e0 c5       	rjmp	.+3008   	; 0x14ea <__stack+0xbeb>
     92a:	ee 5a       	subi	r30, 0xAE	; 174
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	0c 94 86 11 	jmp	0x230c	; 0x230c <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     932:	16 96       	adiw	r26, 0x06	; 6
     934:	8c 91       	ld	r24, X
     936:	16 97       	sbiw	r26, 0x06	; 6
     938:	81 11       	cpse	r24, r1
     93a:	b7 c4       	rjmp	.+2414   	; 0x12aa <__stack+0x9ab>
     93c:	c8 c4       	rjmp	.+2448   	; 0x12ce <__stack+0x9cf>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     93e:	1b 96       	adiw	r26, 0x0b	; 11
     940:	8c 91       	ld	r24, X
     942:	1b 97       	sbiw	r26, 0x0b	; 11
     944:	88 23       	and	r24, r24
     946:	d9 f1       	breq	.+118    	; 0x9be <__stack+0xbf>
     948:	14 96       	adiw	r26, 0x04	; 4
     94a:	9c 91       	ld	r25, X
     94c:	14 97       	sbiw	r26, 0x04	; 4
     94e:	92 95       	swap	r25
     950:	96 95       	lsr	r25
     952:	97 70       	andi	r25, 0x07	; 7
     954:	15 96       	adiw	r26, 0x05	; 5
     956:	8c 91       	ld	r24, X
     958:	15 97       	sbiw	r26, 0x05	; 5
     95a:	88 0f       	add	r24, r24
     95c:	88 0f       	add	r24, r24
     95e:	88 0f       	add	r24, r24
     960:	89 0f       	add	r24, r25
     962:	80 93 f3 00 	sts	0x00F3, r24
     966:	13 96       	adiw	r26, 0x03	; 3
     968:	9c 91       	ld	r25, X
     96a:	13 97       	sbiw	r26, 0x03	; 3
     96c:	92 95       	swap	r25
     96e:	96 95       	lsr	r25
     970:	97 70       	andi	r25, 0x07	; 7
     972:	14 96       	adiw	r26, 0x04	; 4
     974:	8c 91       	ld	r24, X
     976:	14 97       	sbiw	r26, 0x04	; 4
     978:	88 0f       	add	r24, r24
     97a:	88 0f       	add	r24, r24
     97c:	88 0f       	add	r24, r24
     97e:	89 0f       	add	r24, r25
     980:	80 93 f2 00 	sts	0x00F2, r24
     984:	12 96       	adiw	r26, 0x02	; 2
     986:	9c 91       	ld	r25, X
     988:	12 97       	sbiw	r26, 0x02	; 2
     98a:	92 95       	swap	r25
     98c:	96 95       	lsr	r25
     98e:	97 70       	andi	r25, 0x07	; 7
     990:	13 96       	adiw	r26, 0x03	; 3
     992:	8c 91       	ld	r24, X
     994:	13 97       	sbiw	r26, 0x03	; 3
     996:	88 0f       	add	r24, r24
     998:	88 0f       	add	r24, r24
     99a:	88 0f       	add	r24, r24
     99c:	89 0f       	add	r24, r25
     99e:	80 93 f1 00 	sts	0x00F1, r24
     9a2:	12 96       	adiw	r26, 0x02	; 2
     9a4:	8c 91       	ld	r24, X
     9a6:	12 97       	sbiw	r26, 0x02	; 2
     9a8:	88 0f       	add	r24, r24
     9aa:	88 0f       	add	r24, r24
     9ac:	88 0f       	add	r24, r24
     9ae:	80 93 f0 00 	sts	0x00F0, r24
     9b2:	ef ee       	ldi	r30, 0xEF	; 239
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	80 81       	ld	r24, Z
     9b8:	80 61       	ori	r24, 0x10	; 16
     9ba:	80 83       	st	Z, r24
     9bc:	1c c0       	rjmp	.+56     	; 0x9f6 <__stack+0xf7>
          else              { Can_set_std_id(cmd->id.std);}
     9be:	12 96       	adiw	r26, 0x02	; 2
     9c0:	8c 91       	ld	r24, X
     9c2:	12 97       	sbiw	r26, 0x02	; 2
     9c4:	86 95       	lsr	r24
     9c6:	86 95       	lsr	r24
     9c8:	86 95       	lsr	r24
     9ca:	13 96       	adiw	r26, 0x03	; 3
     9cc:	9c 91       	ld	r25, X
     9ce:	13 97       	sbiw	r26, 0x03	; 3
     9d0:	20 e2       	ldi	r18, 0x20	; 32
     9d2:	92 9f       	mul	r25, r18
     9d4:	80 0d       	add	r24, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	80 93 f3 00 	sts	0x00F3, r24
     9dc:	12 96       	adiw	r26, 0x02	; 2
     9de:	8c 91       	ld	r24, X
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	82 95       	swap	r24
     9e4:	88 0f       	add	r24, r24
     9e6:	80 7e       	andi	r24, 0xE0	; 224
     9e8:	80 93 f2 00 	sts	0x00F2, r24
     9ec:	ef ee       	ldi	r30, 0xEF	; 239
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	8f 7e       	andi	r24, 0xEF	; 239
     9f4:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     9f6:	16 96       	adiw	r26, 0x06	; 6
     9f8:	8c 91       	ld	r24, X
     9fa:	16 97       	sbiw	r26, 0x06	; 6
     9fc:	88 23       	and	r24, r24
     9fe:	91 f0       	breq	.+36     	; 0xa24 <__stack+0x125>
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	8a ef       	ldi	r24, 0xFA	; 250
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	17 96       	adiw	r26, 0x07	; 7
     a08:	ed 91       	ld	r30, X+
     a0a:	fc 91       	ld	r31, X
     a0c:	18 97       	sbiw	r26, 0x08	; 8
     a0e:	e2 0f       	add	r30, r18
     a10:	f1 1d       	adc	r31, r1
     a12:	30 81       	ld	r19, Z
     a14:	fc 01       	movw	r30, r24
     a16:	30 83       	st	Z, r19
     a18:	2f 5f       	subi	r18, 0xFF	; 255
     a1a:	16 96       	adiw	r26, 0x06	; 6
     a1c:	3c 91       	ld	r19, X
     a1e:	16 97       	sbiw	r26, 0x06	; 6
     a20:	23 17       	cp	r18, r19
     a22:	88 f3       	brcs	.-30     	; 0xa06 <__stack+0x107>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     a24:	1a 96       	adiw	r26, 0x0a	; 10
     a26:	8c 91       	ld	r24, X
     a28:	1a 97       	sbiw	r26, 0x0a	; 10
     a2a:	88 23       	and	r24, r24
     a2c:	31 f0       	breq	.+12     	; 0xa3a <__stack+0x13b>
     a2e:	e0 ef       	ldi	r30, 0xF0	; 240
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	84 60       	ori	r24, 0x04	; 4
     a36:	80 83       	st	Z, r24
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <__stack+0x145>
            else Can_clear_rtr();    
     a3a:	e0 ef       	ldi	r30, 0xF0	; 240
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	8b 7f       	andi	r24, 0xFB	; 251
     a42:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     a44:	ef ee       	ldi	r30, 0xEF	; 239
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	90 81       	ld	r25, Z
     a4a:	16 96       	adiw	r26, 0x06	; 6
     a4c:	8c 91       	ld	r24, X
     a4e:	89 2b       	or	r24, r25
     a50:	80 83       	st	Z, r24
          Can_config_tx();
     a52:	80 81       	ld	r24, Z
     a54:	8f 73       	andi	r24, 0x3F	; 63
     a56:	80 83       	st	Z, r24
     a58:	80 81       	ld	r24, Z
     a5a:	80 64       	ori	r24, 0x40	; 64
     a5c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a60:	4c c5       	rjmp	.+2712   	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a62:	1b 96       	adiw	r26, 0x0b	; 11
     a64:	8c 91       	ld	r24, X
     a66:	1b 97       	sbiw	r26, 0x0b	; 11
     a68:	88 23       	and	r24, r24
     a6a:	d9 f1       	breq	.+118    	; 0xae2 <__stack+0x1e3>
     a6c:	14 96       	adiw	r26, 0x04	; 4
     a6e:	9c 91       	ld	r25, X
     a70:	14 97       	sbiw	r26, 0x04	; 4
     a72:	92 95       	swap	r25
     a74:	96 95       	lsr	r25
     a76:	97 70       	andi	r25, 0x07	; 7
     a78:	15 96       	adiw	r26, 0x05	; 5
     a7a:	8c 91       	ld	r24, X
     a7c:	15 97       	sbiw	r26, 0x05	; 5
     a7e:	88 0f       	add	r24, r24
     a80:	88 0f       	add	r24, r24
     a82:	88 0f       	add	r24, r24
     a84:	89 0f       	add	r24, r25
     a86:	80 93 f3 00 	sts	0x00F3, r24
     a8a:	13 96       	adiw	r26, 0x03	; 3
     a8c:	9c 91       	ld	r25, X
     a8e:	13 97       	sbiw	r26, 0x03	; 3
     a90:	92 95       	swap	r25
     a92:	96 95       	lsr	r25
     a94:	97 70       	andi	r25, 0x07	; 7
     a96:	14 96       	adiw	r26, 0x04	; 4
     a98:	8c 91       	ld	r24, X
     a9a:	14 97       	sbiw	r26, 0x04	; 4
     a9c:	88 0f       	add	r24, r24
     a9e:	88 0f       	add	r24, r24
     aa0:	88 0f       	add	r24, r24
     aa2:	89 0f       	add	r24, r25
     aa4:	80 93 f2 00 	sts	0x00F2, r24
     aa8:	12 96       	adiw	r26, 0x02	; 2
     aaa:	9c 91       	ld	r25, X
     aac:	12 97       	sbiw	r26, 0x02	; 2
     aae:	92 95       	swap	r25
     ab0:	96 95       	lsr	r25
     ab2:	97 70       	andi	r25, 0x07	; 7
     ab4:	13 96       	adiw	r26, 0x03	; 3
     ab6:	8c 91       	ld	r24, X
     ab8:	13 97       	sbiw	r26, 0x03	; 3
     aba:	88 0f       	add	r24, r24
     abc:	88 0f       	add	r24, r24
     abe:	88 0f       	add	r24, r24
     ac0:	89 0f       	add	r24, r25
     ac2:	80 93 f1 00 	sts	0x00F1, r24
     ac6:	12 96       	adiw	r26, 0x02	; 2
     ac8:	8c 91       	ld	r24, X
     aca:	12 97       	sbiw	r26, 0x02	; 2
     acc:	88 0f       	add	r24, r24
     ace:	88 0f       	add	r24, r24
     ad0:	88 0f       	add	r24, r24
     ad2:	80 93 f0 00 	sts	0x00F0, r24
     ad6:	ef ee       	ldi	r30, 0xEF	; 239
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	80 61       	ori	r24, 0x10	; 16
     ade:	80 83       	st	Z, r24
     ae0:	1c c0       	rjmp	.+56     	; 0xb1a <__stack+0x21b>
          else              { Can_set_std_id(cmd->id.std);}
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	8c 91       	ld	r24, X
     ae6:	12 97       	sbiw	r26, 0x02	; 2
     ae8:	86 95       	lsr	r24
     aea:	86 95       	lsr	r24
     aec:	86 95       	lsr	r24
     aee:	13 96       	adiw	r26, 0x03	; 3
     af0:	9c 91       	ld	r25, X
     af2:	13 97       	sbiw	r26, 0x03	; 3
     af4:	f0 e2       	ldi	r31, 0x20	; 32
     af6:	9f 9f       	mul	r25, r31
     af8:	80 0d       	add	r24, r0
     afa:	11 24       	eor	r1, r1
     afc:	80 93 f3 00 	sts	0x00F3, r24
     b00:	12 96       	adiw	r26, 0x02	; 2
     b02:	8c 91       	ld	r24, X
     b04:	12 97       	sbiw	r26, 0x02	; 2
     b06:	82 95       	swap	r24
     b08:	88 0f       	add	r24, r24
     b0a:	80 7e       	andi	r24, 0xE0	; 224
     b0c:	80 93 f2 00 	sts	0x00F2, r24
     b10:	ef ee       	ldi	r30, 0xEF	; 239
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8f 7e       	andi	r24, 0xEF	; 239
     b18:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     b1a:	16 96       	adiw	r26, 0x06	; 6
     b1c:	8c 91       	ld	r24, X
     b1e:	16 97       	sbiw	r26, 0x06	; 6
     b20:	88 23       	and	r24, r24
     b22:	91 f0       	breq	.+36     	; 0xb48 <__stack+0x249>
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	8a ef       	ldi	r24, 0xFA	; 250
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	17 96       	adiw	r26, 0x07	; 7
     b2c:	ed 91       	ld	r30, X+
     b2e:	fc 91       	ld	r31, X
     b30:	18 97       	sbiw	r26, 0x08	; 8
     b32:	e2 0f       	add	r30, r18
     b34:	f1 1d       	adc	r31, r1
     b36:	30 81       	ld	r19, Z
     b38:	fc 01       	movw	r30, r24
     b3a:	30 83       	st	Z, r19
     b3c:	2f 5f       	subi	r18, 0xFF	; 255
     b3e:	16 96       	adiw	r26, 0x06	; 6
     b40:	3c 91       	ld	r19, X
     b42:	16 97       	sbiw	r26, 0x06	; 6
     b44:	23 17       	cp	r18, r19
     b46:	88 f3       	brcs	.-30     	; 0xb2a <__stack+0x22b>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     b48:	1a 96       	adiw	r26, 0x0a	; 10
     b4a:	1c 92       	st	X, r1
     b4c:	1a 97       	sbiw	r26, 0x0a	; 10
     b4e:	e0 ef       	ldi	r30, 0xF0	; 240
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8b 7f       	andi	r24, 0xFB	; 251
     b56:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     b58:	ef ee       	ldi	r30, 0xEF	; 239
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	90 81       	ld	r25, Z
     b5e:	16 96       	adiw	r26, 0x06	; 6
     b60:	8c 91       	ld	r24, X
     b62:	89 2b       	or	r24, r25
     b64:	80 83       	st	Z, r24
          Can_config_tx();
     b66:	80 81       	ld	r24, Z
     b68:	8f 73       	andi	r24, 0x3F	; 63
     b6a:	80 83       	st	Z, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	80 64       	ori	r24, 0x40	; 64
     b70:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b72:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     b74:	c2 c4       	rjmp	.+2436   	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b76:	1b 96       	adiw	r26, 0x0b	; 11
     b78:	8c 91       	ld	r24, X
     b7a:	1b 97       	sbiw	r26, 0x0b	; 11
     b7c:	88 23       	and	r24, r24
     b7e:	d9 f1       	breq	.+118    	; 0xbf6 <__stack+0x2f7>
     b80:	14 96       	adiw	r26, 0x04	; 4
     b82:	9c 91       	ld	r25, X
     b84:	14 97       	sbiw	r26, 0x04	; 4
     b86:	92 95       	swap	r25
     b88:	96 95       	lsr	r25
     b8a:	97 70       	andi	r25, 0x07	; 7
     b8c:	15 96       	adiw	r26, 0x05	; 5
     b8e:	8c 91       	ld	r24, X
     b90:	15 97       	sbiw	r26, 0x05	; 5
     b92:	88 0f       	add	r24, r24
     b94:	88 0f       	add	r24, r24
     b96:	88 0f       	add	r24, r24
     b98:	89 0f       	add	r24, r25
     b9a:	80 93 f3 00 	sts	0x00F3, r24
     b9e:	13 96       	adiw	r26, 0x03	; 3
     ba0:	9c 91       	ld	r25, X
     ba2:	13 97       	sbiw	r26, 0x03	; 3
     ba4:	92 95       	swap	r25
     ba6:	96 95       	lsr	r25
     ba8:	97 70       	andi	r25, 0x07	; 7
     baa:	14 96       	adiw	r26, 0x04	; 4
     bac:	8c 91       	ld	r24, X
     bae:	14 97       	sbiw	r26, 0x04	; 4
     bb0:	88 0f       	add	r24, r24
     bb2:	88 0f       	add	r24, r24
     bb4:	88 0f       	add	r24, r24
     bb6:	89 0f       	add	r24, r25
     bb8:	80 93 f2 00 	sts	0x00F2, r24
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	9c 91       	ld	r25, X
     bc0:	12 97       	sbiw	r26, 0x02	; 2
     bc2:	92 95       	swap	r25
     bc4:	96 95       	lsr	r25
     bc6:	97 70       	andi	r25, 0x07	; 7
     bc8:	13 96       	adiw	r26, 0x03	; 3
     bca:	8c 91       	ld	r24, X
     bcc:	13 97       	sbiw	r26, 0x03	; 3
     bce:	88 0f       	add	r24, r24
     bd0:	88 0f       	add	r24, r24
     bd2:	88 0f       	add	r24, r24
     bd4:	89 0f       	add	r24, r25
     bd6:	80 93 f1 00 	sts	0x00F1, r24
     bda:	12 96       	adiw	r26, 0x02	; 2
     bdc:	8c 91       	ld	r24, X
     bde:	12 97       	sbiw	r26, 0x02	; 2
     be0:	88 0f       	add	r24, r24
     be2:	88 0f       	add	r24, r24
     be4:	88 0f       	add	r24, r24
     be6:	80 93 f0 00 	sts	0x00F0, r24
     bea:	ef ee       	ldi	r30, 0xEF	; 239
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 61       	ori	r24, 0x10	; 16
     bf2:	80 83       	st	Z, r24
     bf4:	1c c0       	rjmp	.+56     	; 0xc2e <__stack+0x32f>
          else              { Can_set_std_id(cmd->id.std);}
     bf6:	12 96       	adiw	r26, 0x02	; 2
     bf8:	8c 91       	ld	r24, X
     bfa:	12 97       	sbiw	r26, 0x02	; 2
     bfc:	86 95       	lsr	r24
     bfe:	86 95       	lsr	r24
     c00:	86 95       	lsr	r24
     c02:	13 96       	adiw	r26, 0x03	; 3
     c04:	9c 91       	ld	r25, X
     c06:	13 97       	sbiw	r26, 0x03	; 3
     c08:	f0 e2       	ldi	r31, 0x20	; 32
     c0a:	9f 9f       	mul	r25, r31
     c0c:	80 0d       	add	r24, r0
     c0e:	11 24       	eor	r1, r1
     c10:	80 93 f3 00 	sts	0x00F3, r24
     c14:	12 96       	adiw	r26, 0x02	; 2
     c16:	8c 91       	ld	r24, X
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	82 95       	swap	r24
     c1c:	88 0f       	add	r24, r24
     c1e:	80 7e       	andi	r24, 0xE0	; 224
     c20:	80 93 f2 00 	sts	0x00F2, r24
     c24:	ef ee       	ldi	r30, 0xEF	; 239
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8f 7e       	andi	r24, 0xEF	; 239
     c2c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	1a 96       	adiw	r26, 0x0a	; 10
     c32:	8c 93       	st	X, r24
     c34:	1a 97       	sbiw	r26, 0x0a	; 10
     c36:	e0 ef       	ldi	r30, 0xF0	; 240
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	84 60       	ori	r24, 0x04	; 4
     c3e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     c40:	ef ee       	ldi	r30, 0xEF	; 239
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	90 81       	ld	r25, Z
     c46:	16 96       	adiw	r26, 0x06	; 6
     c48:	8c 91       	ld	r24, X
     c4a:	89 2b       	or	r24, r25
     c4c:	80 83       	st	Z, r24
          Can_config_tx();
     c4e:	80 81       	ld	r24, Z
     c50:	8f 73       	andi	r24, 0x3F	; 63
     c52:	80 83       	st	Z, r24
     c54:	80 81       	ld	r24, Z
     c56:	80 64       	ori	r24, 0x40	; 64
     c58:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c5a:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     c5c:	4e c4       	rjmp	.+2204   	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     c5e:	19 82       	std	Y+1, r1	; 0x01
     c60:	9b 81       	ldd	r25, Y+3	; 0x03
     c62:	92 95       	swap	r25
     c64:	96 95       	lsr	r25
     c66:	97 70       	andi	r25, 0x07	; 7
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	88 0f       	add	r24, r24
     c6c:	88 0f       	add	r24, r24
     c6e:	88 0f       	add	r24, r24
     c70:	89 0f       	add	r24, r25
     c72:	80 93 f7 00 	sts	0x00F7, r24
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	92 95       	swap	r25
     c7a:	96 95       	lsr	r25
     c7c:	97 70       	andi	r25, 0x07	; 7
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	88 0f       	add	r24, r24
     c82:	88 0f       	add	r24, r24
     c84:	88 0f       	add	r24, r24
     c86:	89 0f       	add	r24, r25
     c88:	80 93 f6 00 	sts	0x00F6, r24
     c8c:	99 81       	ldd	r25, Y+1	; 0x01
     c8e:	92 95       	swap	r25
     c90:	96 95       	lsr	r25
     c92:	97 70       	andi	r25, 0x07	; 7
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	88 0f       	add	r24, r24
     c98:	88 0f       	add	r24, r24
     c9a:	88 0f       	add	r24, r24
     c9c:	89 0f       	add	r24, r25
     c9e:	80 93 f5 00 	sts	0x00F5, r24
     ca2:	29 81       	ldd	r18, Y+1	; 0x01
     ca4:	22 0f       	add	r18, r18
     ca6:	22 0f       	add	r18, r18
     ca8:	22 0f       	add	r18, r18
     caa:	84 ef       	ldi	r24, 0xF4	; 244
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	fc 01       	movw	r30, r24
     cb0:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     cb2:	ef ee       	ldi	r30, 0xEF	; 239
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	30 81       	ld	r19, Z
     cb8:	16 96       	adiw	r26, 0x06	; 6
     cba:	2c 91       	ld	r18, X
     cbc:	23 2b       	or	r18, r19
     cbe:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     cc0:	dc 01       	movw	r26, r24
     cc2:	2c 91       	ld	r18, X
     cc4:	2b 7f       	andi	r18, 0xFB	; 251
     cc6:	2c 93       	st	X, r18
          Can_clear_idemsk();
     cc8:	2c 91       	ld	r18, X
     cca:	2e 7f       	andi	r18, 0xFE	; 254
     ccc:	2c 93       	st	X, r18
          Can_config_rx();       
     cce:	80 81       	ld	r24, Z
     cd0:	8f 73       	andi	r24, 0x3F	; 63
     cd2:	80 83       	st	Z, r24
     cd4:	80 81       	ld	r24, Z
     cd6:	80 68       	ori	r24, 0x80	; 128
     cd8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     cda:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     cdc:	0e c4       	rjmp	.+2076   	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     cde:	8f ef       	ldi	r24, 0xFF	; 255
     ce0:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	82 95       	swap	r24
     ce6:	88 0f       	add	r24, r24
     ce8:	80 7e       	andi	r24, 0xE0	; 224
     cea:	81 5e       	subi	r24, 0xE1	; 225
     cec:	27 ef       	ldi	r18, 0xF7	; 247
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	f9 01       	movw	r30, r18
     cf2:	80 83       	st	Z, r24
     cf4:	49 81       	ldd	r20, Y+1	; 0x01
     cf6:	42 95       	swap	r20
     cf8:	44 0f       	add	r20, r20
     cfa:	40 7e       	andi	r20, 0xE0	; 224
     cfc:	86 ef       	ldi	r24, 0xF6	; 246
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	fc 01       	movw	r30, r24
     d02:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     d04:	12 96       	adiw	r26, 0x02	; 2
     d06:	4c 91       	ld	r20, X
     d08:	12 97       	sbiw	r26, 0x02	; 2
     d0a:	46 95       	lsr	r20
     d0c:	46 95       	lsr	r20
     d0e:	46 95       	lsr	r20
     d10:	13 96       	adiw	r26, 0x03	; 3
     d12:	5c 91       	ld	r21, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	f0 e2       	ldi	r31, 0x20	; 32
     d18:	5f 9f       	mul	r21, r31
     d1a:	40 0d       	add	r20, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	40 93 f3 00 	sts	0x00F3, r20
     d22:	12 96       	adiw	r26, 0x02	; 2
     d24:	4c 91       	ld	r20, X
     d26:	12 97       	sbiw	r26, 0x02	; 2
     d28:	42 95       	swap	r20
     d2a:	44 0f       	add	r20, r20
     d2c:	40 7e       	andi	r20, 0xE0	; 224
     d2e:	40 93 f2 00 	sts	0x00F2, r20
     d32:	6f ee       	ldi	r22, 0xEF	; 239
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	fb 01       	movw	r30, r22
     d38:	40 81       	ld	r20, Z
     d3a:	4f 7e       	andi	r20, 0xEF	; 239
     d3c:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     d3e:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     d40:	5b 81       	ldd	r21, Y+3	; 0x03
     d42:	52 95       	swap	r21
     d44:	56 95       	lsr	r21
     d46:	57 70       	andi	r21, 0x07	; 7
     d48:	4c 81       	ldd	r20, Y+4	; 0x04
     d4a:	44 0f       	add	r20, r20
     d4c:	44 0f       	add	r20, r20
     d4e:	44 0f       	add	r20, r20
     d50:	45 0f       	add	r20, r21
     d52:	f9 01       	movw	r30, r18
     d54:	40 83       	st	Z, r20
     d56:	3a 81       	ldd	r19, Y+2	; 0x02
     d58:	32 95       	swap	r19
     d5a:	36 95       	lsr	r19
     d5c:	37 70       	andi	r19, 0x07	; 7
     d5e:	2b 81       	ldd	r18, Y+3	; 0x03
     d60:	22 0f       	add	r18, r18
     d62:	22 0f       	add	r18, r18
     d64:	22 0f       	add	r18, r18
     d66:	23 0f       	add	r18, r19
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
     d6c:	99 81       	ldd	r25, Y+1	; 0x01
     d6e:	92 95       	swap	r25
     d70:	96 95       	lsr	r25
     d72:	97 70       	andi	r25, 0x07	; 7
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	88 0f       	add	r24, r24
     d78:	88 0f       	add	r24, r24
     d7a:	88 0f       	add	r24, r24
     d7c:	89 0f       	add	r24, r25
     d7e:	80 93 f5 00 	sts	0x00F5, r24
     d82:	29 81       	ldd	r18, Y+1	; 0x01
     d84:	22 0f       	add	r18, r18
     d86:	22 0f       	add	r18, r18
     d88:	22 0f       	add	r18, r18
     d8a:	84 ef       	ldi	r24, 0xF4	; 244
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	fc 01       	movw	r30, r24
     d90:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     d92:	fb 01       	movw	r30, r22
     d94:	30 81       	ld	r19, Z
     d96:	16 96       	adiw	r26, 0x06	; 6
     d98:	2c 91       	ld	r18, X
     d9a:	16 97       	sbiw	r26, 0x06	; 6
     d9c:	23 2b       	or	r18, r19
     d9e:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     da0:	1a 96       	adiw	r26, 0x0a	; 10
     da2:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     da4:	dc 01       	movw	r26, r24
     da6:	2c 91       	ld	r18, X
     da8:	24 60       	ori	r18, 0x04	; 4
     daa:	2c 93       	st	X, r18
		  Can_clear_rtr();
     dac:	a0 ef       	ldi	r26, 0xF0	; 240
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	2c 91       	ld	r18, X
     db2:	2b 7f       	andi	r18, 0xFB	; 251
     db4:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     db6:	20 81       	ld	r18, Z
     db8:	2f 7e       	andi	r18, 0xEF	; 239
     dba:	20 83       	st	Z, r18
          Can_clear_idemsk();
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 81       	ld	r18, Z
     dc0:	2e 7f       	andi	r18, 0xFE	; 254
     dc2:	20 83       	st	Z, r18
          Can_config_rx();       
     dc4:	db 01       	movw	r26, r22
     dc6:	8c 91       	ld	r24, X
     dc8:	8f 73       	andi	r24, 0x3F	; 63
     dca:	8c 93       	st	X, r24
     dcc:	8c 91       	ld	r24, X
     dce:	80 68       	ori	r24, 0x80	; 128
     dd0:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dd2:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     dd4:	92 c3       	rjmp	.+1828   	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	82 95       	swap	r24
     dde:	88 0f       	add	r24, r24
     de0:	80 7e       	andi	r24, 0xE0	; 224
     de2:	81 5e       	subi	r24, 0xE1	; 225
     de4:	27 ef       	ldi	r18, 0xF7	; 247
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	f9 01       	movw	r30, r18
     dea:	80 83       	st	Z, r24
     dec:	49 81       	ldd	r20, Y+1	; 0x01
     dee:	42 95       	swap	r20
     df0:	44 0f       	add	r20, r20
     df2:	40 7e       	andi	r20, 0xE0	; 224
     df4:	86 ef       	ldi	r24, 0xF6	; 246
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	fc 01       	movw	r30, r24
     dfa:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     dfc:	12 96       	adiw	r26, 0x02	; 2
     dfe:	4c 91       	ld	r20, X
     e00:	12 97       	sbiw	r26, 0x02	; 2
     e02:	46 95       	lsr	r20
     e04:	46 95       	lsr	r20
     e06:	46 95       	lsr	r20
     e08:	13 96       	adiw	r26, 0x03	; 3
     e0a:	5c 91       	ld	r21, X
     e0c:	13 97       	sbiw	r26, 0x03	; 3
     e0e:	f0 e2       	ldi	r31, 0x20	; 32
     e10:	5f 9f       	mul	r21, r31
     e12:	40 0d       	add	r20, r0
     e14:	11 24       	eor	r1, r1
     e16:	40 93 f3 00 	sts	0x00F3, r20
     e1a:	12 96       	adiw	r26, 0x02	; 2
     e1c:	4c 91       	ld	r20, X
     e1e:	12 97       	sbiw	r26, 0x02	; 2
     e20:	42 95       	swap	r20
     e22:	44 0f       	add	r20, r20
     e24:	40 7e       	andi	r20, 0xE0	; 224
     e26:	40 93 f2 00 	sts	0x00F2, r20
     e2a:	6f ee       	ldi	r22, 0xEF	; 239
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	fb 01       	movw	r30, r22
     e30:	40 81       	ld	r20, Z
     e32:	4f 7e       	andi	r20, 0xEF	; 239
     e34:	40 83       	st	Z, r20
		
          u8_temp=0; 
     e36:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     e38:	5b 81       	ldd	r21, Y+3	; 0x03
     e3a:	52 95       	swap	r21
     e3c:	56 95       	lsr	r21
     e3e:	57 70       	andi	r21, 0x07	; 7
     e40:	4c 81       	ldd	r20, Y+4	; 0x04
     e42:	44 0f       	add	r20, r20
     e44:	44 0f       	add	r20, r20
     e46:	44 0f       	add	r20, r20
     e48:	45 0f       	add	r20, r21
     e4a:	f9 01       	movw	r30, r18
     e4c:	40 83       	st	Z, r20
     e4e:	3a 81       	ldd	r19, Y+2	; 0x02
     e50:	32 95       	swap	r19
     e52:	36 95       	lsr	r19
     e54:	37 70       	andi	r19, 0x07	; 7
     e56:	2b 81       	ldd	r18, Y+3	; 0x03
     e58:	22 0f       	add	r18, r18
     e5a:	22 0f       	add	r18, r18
     e5c:	22 0f       	add	r18, r18
     e5e:	23 0f       	add	r18, r19
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
     e64:	99 81       	ldd	r25, Y+1	; 0x01
     e66:	92 95       	swap	r25
     e68:	96 95       	lsr	r25
     e6a:	97 70       	andi	r25, 0x07	; 7
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	88 0f       	add	r24, r24
     e70:	88 0f       	add	r24, r24
     e72:	88 0f       	add	r24, r24
     e74:	89 0f       	add	r24, r25
     e76:	80 93 f5 00 	sts	0x00F5, r24
     e7a:	29 81       	ldd	r18, Y+1	; 0x01
     e7c:	22 0f       	add	r18, r18
     e7e:	22 0f       	add	r18, r18
     e80:	22 0f       	add	r18, r18
     e82:	84 ef       	ldi	r24, 0xF4	; 244
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e8a:	fb 01       	movw	r30, r22
     e8c:	30 81       	ld	r19, Z
     e8e:	16 96       	adiw	r26, 0x06	; 6
     e90:	2c 91       	ld	r18, X
     e92:	16 97       	sbiw	r26, 0x06	; 6
     e94:	23 2b       	or	r18, r19
     e96:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     e98:	21 e0       	ldi	r18, 0x01	; 1
     e9a:	1a 96       	adiw	r26, 0x0a	; 10
     e9c:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     e9e:	dc 01       	movw	r26, r24
     ea0:	2c 91       	ld	r18, X
     ea2:	24 60       	ori	r18, 0x04	; 4
     ea4:	2c 93       	st	X, r18
		  Can_set_rtr();
     ea6:	a0 ef       	ldi	r26, 0xF0	; 240
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	2c 91       	ld	r18, X
     eac:	24 60       	ori	r18, 0x04	; 4
     eae:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     eb0:	20 81       	ld	r18, Z
     eb2:	2f 7d       	andi	r18, 0xDF	; 223
     eb4:	20 83       	st	Z, r18
          Can_clear_idemsk();
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 81       	ld	r18, Z
     eba:	2e 7f       	andi	r18, 0xFE	; 254
     ebc:	20 83       	st	Z, r18
          Can_config_rx();       
     ebe:	db 01       	movw	r26, r22
     ec0:	8c 91       	ld	r24, X
     ec2:	8f 73       	andi	r24, 0x3F	; 63
     ec4:	8c 93       	st	X, r24
     ec6:	8c 91       	ld	r24, X
     ec8:	80 68       	ori	r24, 0x80	; 128
     eca:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ecc:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     ece:	15 c3       	rjmp	.+1578   	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ed0:	1b 96       	adiw	r26, 0x0b	; 11
     ed2:	8c 91       	ld	r24, X
     ed4:	1b 97       	sbiw	r26, 0x0b	; 11
     ed6:	88 23       	and	r24, r24
     ed8:	d9 f1       	breq	.+118    	; 0xf50 <__stack+0x651>
     eda:	14 96       	adiw	r26, 0x04	; 4
     edc:	9c 91       	ld	r25, X
     ede:	14 97       	sbiw	r26, 0x04	; 4
     ee0:	92 95       	swap	r25
     ee2:	96 95       	lsr	r25
     ee4:	97 70       	andi	r25, 0x07	; 7
     ee6:	15 96       	adiw	r26, 0x05	; 5
     ee8:	8c 91       	ld	r24, X
     eea:	15 97       	sbiw	r26, 0x05	; 5
     eec:	88 0f       	add	r24, r24
     eee:	88 0f       	add	r24, r24
     ef0:	88 0f       	add	r24, r24
     ef2:	89 0f       	add	r24, r25
     ef4:	80 93 f3 00 	sts	0x00F3, r24
     ef8:	13 96       	adiw	r26, 0x03	; 3
     efa:	9c 91       	ld	r25, X
     efc:	13 97       	sbiw	r26, 0x03	; 3
     efe:	92 95       	swap	r25
     f00:	96 95       	lsr	r25
     f02:	97 70       	andi	r25, 0x07	; 7
     f04:	14 96       	adiw	r26, 0x04	; 4
     f06:	8c 91       	ld	r24, X
     f08:	14 97       	sbiw	r26, 0x04	; 4
     f0a:	88 0f       	add	r24, r24
     f0c:	88 0f       	add	r24, r24
     f0e:	88 0f       	add	r24, r24
     f10:	89 0f       	add	r24, r25
     f12:	80 93 f2 00 	sts	0x00F2, r24
     f16:	12 96       	adiw	r26, 0x02	; 2
     f18:	9c 91       	ld	r25, X
     f1a:	12 97       	sbiw	r26, 0x02	; 2
     f1c:	92 95       	swap	r25
     f1e:	96 95       	lsr	r25
     f20:	97 70       	andi	r25, 0x07	; 7
     f22:	13 96       	adiw	r26, 0x03	; 3
     f24:	8c 91       	ld	r24, X
     f26:	13 97       	sbiw	r26, 0x03	; 3
     f28:	88 0f       	add	r24, r24
     f2a:	88 0f       	add	r24, r24
     f2c:	88 0f       	add	r24, r24
     f2e:	89 0f       	add	r24, r25
     f30:	80 93 f1 00 	sts	0x00F1, r24
     f34:	12 96       	adiw	r26, 0x02	; 2
     f36:	8c 91       	ld	r24, X
     f38:	12 97       	sbiw	r26, 0x02	; 2
     f3a:	88 0f       	add	r24, r24
     f3c:	88 0f       	add	r24, r24
     f3e:	88 0f       	add	r24, r24
     f40:	80 93 f0 00 	sts	0x00F0, r24
     f44:	ef ee       	ldi	r30, 0xEF	; 239
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	80 61       	ori	r24, 0x10	; 16
     f4c:	80 83       	st	Z, r24
     f4e:	1c c0       	rjmp	.+56     	; 0xf88 <__stack+0x689>
          else              { Can_set_std_id(cmd->id.std);}
     f50:	12 96       	adiw	r26, 0x02	; 2
     f52:	8c 91       	ld	r24, X
     f54:	12 97       	sbiw	r26, 0x02	; 2
     f56:	86 95       	lsr	r24
     f58:	86 95       	lsr	r24
     f5a:	86 95       	lsr	r24
     f5c:	13 96       	adiw	r26, 0x03	; 3
     f5e:	9c 91       	ld	r25, X
     f60:	13 97       	sbiw	r26, 0x03	; 3
     f62:	e0 e2       	ldi	r30, 0x20	; 32
     f64:	9e 9f       	mul	r25, r30
     f66:	80 0d       	add	r24, r0
     f68:	11 24       	eor	r1, r1
     f6a:	80 93 f3 00 	sts	0x00F3, r24
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	8c 91       	ld	r24, X
     f72:	12 97       	sbiw	r26, 0x02	; 2
     f74:	82 95       	swap	r24
     f76:	88 0f       	add	r24, r24
     f78:	80 7e       	andi	r24, 0xE0	; 224
     f7a:	80 93 f2 00 	sts	0x00F2, r24
     f7e:	ef ee       	ldi	r30, 0xEF	; 239
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	8f 7e       	andi	r24, 0xEF	; 239
     f86:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	92 95       	swap	r25
     f90:	96 95       	lsr	r25
     f92:	97 70       	andi	r25, 0x07	; 7
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	88 0f       	add	r24, r24
     f98:	88 0f       	add	r24, r24
     f9a:	88 0f       	add	r24, r24
     f9c:	89 0f       	add	r24, r25
     f9e:	80 93 f7 00 	sts	0x00F7, r24
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	92 95       	swap	r25
     fa6:	96 95       	lsr	r25
     fa8:	97 70       	andi	r25, 0x07	; 7
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	88 0f       	add	r24, r24
     fae:	88 0f       	add	r24, r24
     fb0:	88 0f       	add	r24, r24
     fb2:	89 0f       	add	r24, r25
     fb4:	80 93 f6 00 	sts	0x00F6, r24
     fb8:	99 81       	ldd	r25, Y+1	; 0x01
     fba:	92 95       	swap	r25
     fbc:	96 95       	lsr	r25
     fbe:	97 70       	andi	r25, 0x07	; 7
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 0f       	add	r24, r24
     fc4:	88 0f       	add	r24, r24
     fc6:	88 0f       	add	r24, r24
     fc8:	89 0f       	add	r24, r25
     fca:	80 93 f5 00 	sts	0x00F5, r24
     fce:	29 81       	ldd	r18, Y+1	; 0x01
     fd0:	22 0f       	add	r18, r18
     fd2:	22 0f       	add	r18, r18
     fd4:	22 0f       	add	r18, r18
     fd6:	84 ef       	ldi	r24, 0xF4	; 244
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     fde:	ef ee       	ldi	r30, 0xEF	; 239
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	30 81       	ld	r19, Z
     fe4:	16 96       	adiw	r26, 0x06	; 6
     fe6:	2c 91       	ld	r18, X
     fe8:	23 2b       	or	r18, r19
     fea:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     fec:	dc 01       	movw	r26, r24
     fee:	2c 91       	ld	r18, X
     ff0:	2b 7f       	andi	r18, 0xFB	; 251
     ff2:	2c 93       	st	X, r18
          Can_set_idemsk();
     ff4:	2c 91       	ld	r18, X
     ff6:	21 60       	ori	r18, 0x01	; 1
     ff8:	2c 93       	st	X, r18
          Can_config_rx();       
     ffa:	80 81       	ld	r24, Z
     ffc:	8f 73       	andi	r24, 0x3F	; 63
     ffe:	80 83       	st	Z, r24
    1000:	80 81       	ld	r24, Z
    1002:	80 68       	ori	r24, 0x80	; 128
    1004:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1006:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1008:	78 c2       	rjmp	.+1264   	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    100a:	1b 96       	adiw	r26, 0x0b	; 11
    100c:	8c 91       	ld	r24, X
    100e:	1b 97       	sbiw	r26, 0x0b	; 11
    1010:	88 23       	and	r24, r24
    1012:	d9 f1       	breq	.+118    	; 0x108a <__stack+0x78b>
    1014:	14 96       	adiw	r26, 0x04	; 4
    1016:	9c 91       	ld	r25, X
    1018:	14 97       	sbiw	r26, 0x04	; 4
    101a:	92 95       	swap	r25
    101c:	96 95       	lsr	r25
    101e:	97 70       	andi	r25, 0x07	; 7
    1020:	15 96       	adiw	r26, 0x05	; 5
    1022:	8c 91       	ld	r24, X
    1024:	15 97       	sbiw	r26, 0x05	; 5
    1026:	88 0f       	add	r24, r24
    1028:	88 0f       	add	r24, r24
    102a:	88 0f       	add	r24, r24
    102c:	89 0f       	add	r24, r25
    102e:	80 93 f3 00 	sts	0x00F3, r24
    1032:	13 96       	adiw	r26, 0x03	; 3
    1034:	9c 91       	ld	r25, X
    1036:	13 97       	sbiw	r26, 0x03	; 3
    1038:	92 95       	swap	r25
    103a:	96 95       	lsr	r25
    103c:	97 70       	andi	r25, 0x07	; 7
    103e:	14 96       	adiw	r26, 0x04	; 4
    1040:	8c 91       	ld	r24, X
    1042:	14 97       	sbiw	r26, 0x04	; 4
    1044:	88 0f       	add	r24, r24
    1046:	88 0f       	add	r24, r24
    1048:	88 0f       	add	r24, r24
    104a:	89 0f       	add	r24, r25
    104c:	80 93 f2 00 	sts	0x00F2, r24
    1050:	12 96       	adiw	r26, 0x02	; 2
    1052:	9c 91       	ld	r25, X
    1054:	12 97       	sbiw	r26, 0x02	; 2
    1056:	92 95       	swap	r25
    1058:	96 95       	lsr	r25
    105a:	97 70       	andi	r25, 0x07	; 7
    105c:	13 96       	adiw	r26, 0x03	; 3
    105e:	8c 91       	ld	r24, X
    1060:	13 97       	sbiw	r26, 0x03	; 3
    1062:	88 0f       	add	r24, r24
    1064:	88 0f       	add	r24, r24
    1066:	88 0f       	add	r24, r24
    1068:	89 0f       	add	r24, r25
    106a:	80 93 f1 00 	sts	0x00F1, r24
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	8c 91       	ld	r24, X
    1072:	12 97       	sbiw	r26, 0x02	; 2
    1074:	88 0f       	add	r24, r24
    1076:	88 0f       	add	r24, r24
    1078:	88 0f       	add	r24, r24
    107a:	80 93 f0 00 	sts	0x00F0, r24
    107e:	ef ee       	ldi	r30, 0xEF	; 239
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	80 61       	ori	r24, 0x10	; 16
    1086:	80 83       	st	Z, r24
    1088:	1c c0       	rjmp	.+56     	; 0x10c2 <__stack+0x7c3>
          else              { Can_set_std_id(cmd->id.std);}
    108a:	12 96       	adiw	r26, 0x02	; 2
    108c:	8c 91       	ld	r24, X
    108e:	12 97       	sbiw	r26, 0x02	; 2
    1090:	86 95       	lsr	r24
    1092:	86 95       	lsr	r24
    1094:	86 95       	lsr	r24
    1096:	13 96       	adiw	r26, 0x03	; 3
    1098:	9c 91       	ld	r25, X
    109a:	13 97       	sbiw	r26, 0x03	; 3
    109c:	e0 e2       	ldi	r30, 0x20	; 32
    109e:	9e 9f       	mul	r25, r30
    10a0:	80 0d       	add	r24, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	80 93 f3 00 	sts	0x00F3, r24
    10a8:	12 96       	adiw	r26, 0x02	; 2
    10aa:	8c 91       	ld	r24, X
    10ac:	12 97       	sbiw	r26, 0x02	; 2
    10ae:	82 95       	swap	r24
    10b0:	88 0f       	add	r24, r24
    10b2:	80 7e       	andi	r24, 0xE0	; 224
    10b4:	80 93 f2 00 	sts	0x00F2, r24
    10b8:	ef ee       	ldi	r30, 0xEF	; 239
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 7e       	andi	r24, 0xEF	; 239
    10c0:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	92 95       	swap	r25
    10ca:	96 95       	lsr	r25
    10cc:	97 70       	andi	r25, 0x07	; 7
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	88 0f       	add	r24, r24
    10d2:	88 0f       	add	r24, r24
    10d4:	88 0f       	add	r24, r24
    10d6:	89 0f       	add	r24, r25
    10d8:	80 93 f7 00 	sts	0x00F7, r24
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	92 95       	swap	r25
    10e0:	96 95       	lsr	r25
    10e2:	97 70       	andi	r25, 0x07	; 7
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	88 0f       	add	r24, r24
    10e8:	88 0f       	add	r24, r24
    10ea:	88 0f       	add	r24, r24
    10ec:	89 0f       	add	r24, r25
    10ee:	80 93 f6 00 	sts	0x00F6, r24
    10f2:	99 81       	ldd	r25, Y+1	; 0x01
    10f4:	92 95       	swap	r25
    10f6:	96 95       	lsr	r25
    10f8:	97 70       	andi	r25, 0x07	; 7
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	88 0f       	add	r24, r24
    10fe:	88 0f       	add	r24, r24
    1100:	88 0f       	add	r24, r24
    1102:	89 0f       	add	r24, r25
    1104:	80 93 f5 00 	sts	0x00F5, r24
    1108:	29 81       	ldd	r18, Y+1	; 0x01
    110a:	22 0f       	add	r18, r18
    110c:	22 0f       	add	r18, r18
    110e:	22 0f       	add	r18, r18
    1110:	84 ef       	ldi	r24, 0xF4	; 244
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	fc 01       	movw	r30, r24
    1116:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1118:	ef ee       	ldi	r30, 0xEF	; 239
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	30 81       	ld	r19, Z
    111e:	16 96       	adiw	r26, 0x06	; 6
    1120:	2c 91       	ld	r18, X
    1122:	16 97       	sbiw	r26, 0x06	; 6
    1124:	23 2b       	or	r18, r19
    1126:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1128:	1a 96       	adiw	r26, 0x0a	; 10
    112a:	1c 92       	st	X, r1
    112c:	dc 01       	movw	r26, r24
    112e:	2c 91       	ld	r18, X
    1130:	24 60       	ori	r18, 0x04	; 4
    1132:	2c 93       	st	X, r18
    1134:	a0 ef       	ldi	r26, 0xF0	; 240
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	2c 91       	ld	r18, X
    113a:	2b 7f       	andi	r18, 0xFB	; 251
    113c:	2c 93       	st	X, r18
          Can_set_idemsk();
    113e:	dc 01       	movw	r26, r24
    1140:	2c 91       	ld	r18, X
    1142:	21 60       	ori	r18, 0x01	; 1
    1144:	2c 93       	st	X, r18
          Can_config_rx();       
    1146:	80 81       	ld	r24, Z
    1148:	8f 73       	andi	r24, 0x3F	; 63
    114a:	80 83       	st	Z, r24
    114c:	80 81       	ld	r24, Z
    114e:	80 68       	ori	r24, 0x80	; 128
    1150:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1152:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1154:	d2 c1       	rjmp	.+932    	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1156:	1b 96       	adiw	r26, 0x0b	; 11
    1158:	8c 91       	ld	r24, X
    115a:	1b 97       	sbiw	r26, 0x0b	; 11
    115c:	88 23       	and	r24, r24
    115e:	d9 f1       	breq	.+118    	; 0x11d6 <__stack+0x8d7>
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	9c 91       	ld	r25, X
    1164:	14 97       	sbiw	r26, 0x04	; 4
    1166:	92 95       	swap	r25
    1168:	96 95       	lsr	r25
    116a:	97 70       	andi	r25, 0x07	; 7
    116c:	15 96       	adiw	r26, 0x05	; 5
    116e:	8c 91       	ld	r24, X
    1170:	15 97       	sbiw	r26, 0x05	; 5
    1172:	88 0f       	add	r24, r24
    1174:	88 0f       	add	r24, r24
    1176:	88 0f       	add	r24, r24
    1178:	89 0f       	add	r24, r25
    117a:	80 93 f3 00 	sts	0x00F3, r24
    117e:	13 96       	adiw	r26, 0x03	; 3
    1180:	9c 91       	ld	r25, X
    1182:	13 97       	sbiw	r26, 0x03	; 3
    1184:	92 95       	swap	r25
    1186:	96 95       	lsr	r25
    1188:	97 70       	andi	r25, 0x07	; 7
    118a:	14 96       	adiw	r26, 0x04	; 4
    118c:	8c 91       	ld	r24, X
    118e:	14 97       	sbiw	r26, 0x04	; 4
    1190:	88 0f       	add	r24, r24
    1192:	88 0f       	add	r24, r24
    1194:	88 0f       	add	r24, r24
    1196:	89 0f       	add	r24, r25
    1198:	80 93 f2 00 	sts	0x00F2, r24
    119c:	12 96       	adiw	r26, 0x02	; 2
    119e:	9c 91       	ld	r25, X
    11a0:	12 97       	sbiw	r26, 0x02	; 2
    11a2:	92 95       	swap	r25
    11a4:	96 95       	lsr	r25
    11a6:	97 70       	andi	r25, 0x07	; 7
    11a8:	13 96       	adiw	r26, 0x03	; 3
    11aa:	8c 91       	ld	r24, X
    11ac:	13 97       	sbiw	r26, 0x03	; 3
    11ae:	88 0f       	add	r24, r24
    11b0:	88 0f       	add	r24, r24
    11b2:	88 0f       	add	r24, r24
    11b4:	89 0f       	add	r24, r25
    11b6:	80 93 f1 00 	sts	0x00F1, r24
    11ba:	12 96       	adiw	r26, 0x02	; 2
    11bc:	8c 91       	ld	r24, X
    11be:	12 97       	sbiw	r26, 0x02	; 2
    11c0:	88 0f       	add	r24, r24
    11c2:	88 0f       	add	r24, r24
    11c4:	88 0f       	add	r24, r24
    11c6:	80 93 f0 00 	sts	0x00F0, r24
    11ca:	ef ee       	ldi	r30, 0xEF	; 239
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 61       	ori	r24, 0x10	; 16
    11d2:	80 83       	st	Z, r24
    11d4:	1c c0       	rjmp	.+56     	; 0x120e <__stack+0x90f>
          else              { Can_set_std_id(cmd->id.std);}
    11d6:	12 96       	adiw	r26, 0x02	; 2
    11d8:	8c 91       	ld	r24, X
    11da:	12 97       	sbiw	r26, 0x02	; 2
    11dc:	86 95       	lsr	r24
    11de:	86 95       	lsr	r24
    11e0:	86 95       	lsr	r24
    11e2:	13 96       	adiw	r26, 0x03	; 3
    11e4:	9c 91       	ld	r25, X
    11e6:	13 97       	sbiw	r26, 0x03	; 3
    11e8:	e0 e2       	ldi	r30, 0x20	; 32
    11ea:	9e 9f       	mul	r25, r30
    11ec:	80 0d       	add	r24, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	80 93 f3 00 	sts	0x00F3, r24
    11f4:	12 96       	adiw	r26, 0x02	; 2
    11f6:	8c 91       	ld	r24, X
    11f8:	12 97       	sbiw	r26, 0x02	; 2
    11fa:	82 95       	swap	r24
    11fc:	88 0f       	add	r24, r24
    11fe:	80 7e       	andi	r24, 0xE0	; 224
    1200:	80 93 f2 00 	sts	0x00F2, r24
    1204:	ef ee       	ldi	r30, 0xEF	; 239
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8f 7e       	andi	r24, 0xEF	; 239
    120c:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    120e:	8f ef       	ldi	r24, 0xFF	; 255
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	9b 81       	ldd	r25, Y+3	; 0x03
    1214:	92 95       	swap	r25
    1216:	96 95       	lsr	r25
    1218:	97 70       	andi	r25, 0x07	; 7
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	88 0f       	add	r24, r24
    121e:	88 0f       	add	r24, r24
    1220:	88 0f       	add	r24, r24
    1222:	89 0f       	add	r24, r25
    1224:	80 93 f7 00 	sts	0x00F7, r24
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	92 95       	swap	r25
    122c:	96 95       	lsr	r25
    122e:	97 70       	andi	r25, 0x07	; 7
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 0f       	add	r24, r24
    1234:	88 0f       	add	r24, r24
    1236:	88 0f       	add	r24, r24
    1238:	89 0f       	add	r24, r25
    123a:	80 93 f6 00 	sts	0x00F6, r24
    123e:	99 81       	ldd	r25, Y+1	; 0x01
    1240:	92 95       	swap	r25
    1242:	96 95       	lsr	r25
    1244:	97 70       	andi	r25, 0x07	; 7
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	88 0f       	add	r24, r24
    124a:	88 0f       	add	r24, r24
    124c:	88 0f       	add	r24, r24
    124e:	89 0f       	add	r24, r25
    1250:	80 93 f5 00 	sts	0x00F5, r24
    1254:	29 81       	ldd	r18, Y+1	; 0x01
    1256:	22 0f       	add	r18, r18
    1258:	22 0f       	add	r18, r18
    125a:	22 0f       	add	r18, r18
    125c:	84 ef       	ldi	r24, 0xF4	; 244
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	fc 01       	movw	r30, r24
    1262:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1264:	ef ee       	ldi	r30, 0xEF	; 239
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	30 81       	ld	r19, Z
    126a:	16 96       	adiw	r26, 0x06	; 6
    126c:	2c 91       	ld	r18, X
    126e:	16 97       	sbiw	r26, 0x06	; 6
    1270:	23 2b       	or	r18, r19
    1272:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1274:	21 e0       	ldi	r18, 0x01	; 1
    1276:	1a 96       	adiw	r26, 0x0a	; 10
    1278:	2c 93       	st	X, r18
    127a:	dc 01       	movw	r26, r24
    127c:	2c 91       	ld	r18, X
    127e:	24 60       	ori	r18, 0x04	; 4
    1280:	2c 93       	st	X, r18
    1282:	a0 ef       	ldi	r26, 0xF0	; 240
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	2c 91       	ld	r18, X
    1288:	24 60       	ori	r18, 0x04	; 4
    128a:	2c 93       	st	X, r18
          Can_clear_rplv();
    128c:	20 81       	ld	r18, Z
    128e:	2f 7d       	andi	r18, 0xDF	; 223
    1290:	20 83       	st	Z, r18
          Can_set_idemsk();
    1292:	dc 01       	movw	r26, r24
    1294:	2c 91       	ld	r18, X
    1296:	21 60       	ori	r18, 0x01	; 1
    1298:	2c 93       	st	X, r18
          Can_config_rx();       
    129a:	80 81       	ld	r24, Z
    129c:	8f 73       	andi	r24, 0x3F	; 63
    129e:	80 83       	st	Z, r24
    12a0:	80 81       	ld	r24, Z
    12a2:	80 68       	ori	r24, 0x80	; 128
    12a4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    12a6:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    12a8:	28 c1       	rjmp	.+592    	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	8a ef       	ldi	r24, 0xFA	; 250
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	17 96       	adiw	r26, 0x07	; 7
    12b2:	ed 91       	ld	r30, X+
    12b4:	fc 91       	ld	r31, X
    12b6:	18 97       	sbiw	r26, 0x08	; 8
    12b8:	e2 0f       	add	r30, r18
    12ba:	f1 1d       	adc	r31, r1
    12bc:	30 81       	ld	r19, Z
    12be:	fc 01       	movw	r30, r24
    12c0:	30 83       	st	Z, r19
    12c2:	2f 5f       	subi	r18, 0xFF	; 255
    12c4:	16 96       	adiw	r26, 0x06	; 6
    12c6:	3c 91       	ld	r19, X
    12c8:	16 97       	sbiw	r26, 0x06	; 6
    12ca:	23 17       	cp	r18, r19
    12cc:	88 f3       	brcs	.-30     	; 0x12b0 <__stack+0x9b1>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    12ce:	19 82       	std	Y+1, r1	; 0x01
    12d0:	9b 81       	ldd	r25, Y+3	; 0x03
    12d2:	92 95       	swap	r25
    12d4:	96 95       	lsr	r25
    12d6:	97 70       	andi	r25, 0x07	; 7
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	88 0f       	add	r24, r24
    12dc:	88 0f       	add	r24, r24
    12de:	88 0f       	add	r24, r24
    12e0:	89 0f       	add	r24, r25
    12e2:	80 93 f7 00 	sts	0x00F7, r24
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	92 95       	swap	r25
    12ea:	96 95       	lsr	r25
    12ec:	97 70       	andi	r25, 0x07	; 7
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 0f       	add	r24, r24
    12f2:	88 0f       	add	r24, r24
    12f4:	88 0f       	add	r24, r24
    12f6:	89 0f       	add	r24, r25
    12f8:	80 93 f6 00 	sts	0x00F6, r24
    12fc:	99 81       	ldd	r25, Y+1	; 0x01
    12fe:	92 95       	swap	r25
    1300:	96 95       	lsr	r25
    1302:	97 70       	andi	r25, 0x07	; 7
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	88 0f       	add	r24, r24
    1308:	88 0f       	add	r24, r24
    130a:	88 0f       	add	r24, r24
    130c:	89 0f       	add	r24, r25
    130e:	80 93 f5 00 	sts	0x00F5, r24
    1312:	29 81       	ldd	r18, Y+1	; 0x01
    1314:	22 0f       	add	r18, r18
    1316:	22 0f       	add	r18, r18
    1318:	22 0f       	add	r18, r18
    131a:	84 ef       	ldi	r24, 0xF4	; 244
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1322:	ef ee       	ldi	r30, 0xEF	; 239
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	30 81       	ld	r19, Z
    1328:	16 96       	adiw	r26, 0x06	; 6
    132a:	2c 91       	ld	r18, X
    132c:	16 97       	sbiw	r26, 0x06	; 6
    132e:	23 2b       	or	r18, r19
    1330:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	1a 96       	adiw	r26, 0x0a	; 10
    1336:	2c 93       	st	X, r18
    1338:	dc 01       	movw	r26, r24
    133a:	2c 91       	ld	r18, X
    133c:	24 60       	ori	r18, 0x04	; 4
    133e:	2c 93       	st	X, r18
    1340:	a0 ef       	ldi	r26, 0xF0	; 240
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	2c 91       	ld	r18, X
    1346:	24 60       	ori	r18, 0x04	; 4
    1348:	2c 93       	st	X, r18
          Can_set_rplv();
    134a:	20 81       	ld	r18, Z
    134c:	20 62       	ori	r18, 0x20	; 32
    134e:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1350:	dc 01       	movw	r26, r24
    1352:	2c 91       	ld	r18, X
    1354:	2e 7f       	andi	r18, 0xFE	; 254
    1356:	2c 93       	st	X, r18
          Can_config_rx();       
    1358:	80 81       	ld	r24, Z
    135a:	8f 73       	andi	r24, 0x3F	; 63
    135c:	80 83       	st	Z, r24
    135e:	80 81       	ld	r24, Z
    1360:	80 68       	ori	r24, 0x80	; 128
    1362:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1364:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    1366:	c9 c0       	rjmp	.+402    	; 0x14fa <__stack+0xbfb>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1368:	1b 96       	adiw	r26, 0x0b	; 11
    136a:	8c 91       	ld	r24, X
    136c:	1b 97       	sbiw	r26, 0x0b	; 11
    136e:	88 23       	and	r24, r24
    1370:	d9 f1       	breq	.+118    	; 0x13e8 <__stack+0xae9>
    1372:	14 96       	adiw	r26, 0x04	; 4
    1374:	9c 91       	ld	r25, X
    1376:	14 97       	sbiw	r26, 0x04	; 4
    1378:	92 95       	swap	r25
    137a:	96 95       	lsr	r25
    137c:	97 70       	andi	r25, 0x07	; 7
    137e:	15 96       	adiw	r26, 0x05	; 5
    1380:	8c 91       	ld	r24, X
    1382:	15 97       	sbiw	r26, 0x05	; 5
    1384:	88 0f       	add	r24, r24
    1386:	88 0f       	add	r24, r24
    1388:	88 0f       	add	r24, r24
    138a:	89 0f       	add	r24, r25
    138c:	80 93 f3 00 	sts	0x00F3, r24
    1390:	13 96       	adiw	r26, 0x03	; 3
    1392:	9c 91       	ld	r25, X
    1394:	13 97       	sbiw	r26, 0x03	; 3
    1396:	92 95       	swap	r25
    1398:	96 95       	lsr	r25
    139a:	97 70       	andi	r25, 0x07	; 7
    139c:	14 96       	adiw	r26, 0x04	; 4
    139e:	8c 91       	ld	r24, X
    13a0:	14 97       	sbiw	r26, 0x04	; 4
    13a2:	88 0f       	add	r24, r24
    13a4:	88 0f       	add	r24, r24
    13a6:	88 0f       	add	r24, r24
    13a8:	89 0f       	add	r24, r25
    13aa:	80 93 f2 00 	sts	0x00F2, r24
    13ae:	12 96       	adiw	r26, 0x02	; 2
    13b0:	9c 91       	ld	r25, X
    13b2:	12 97       	sbiw	r26, 0x02	; 2
    13b4:	92 95       	swap	r25
    13b6:	96 95       	lsr	r25
    13b8:	97 70       	andi	r25, 0x07	; 7
    13ba:	13 96       	adiw	r26, 0x03	; 3
    13bc:	8c 91       	ld	r24, X
    13be:	13 97       	sbiw	r26, 0x03	; 3
    13c0:	88 0f       	add	r24, r24
    13c2:	88 0f       	add	r24, r24
    13c4:	88 0f       	add	r24, r24
    13c6:	89 0f       	add	r24, r25
    13c8:	80 93 f1 00 	sts	0x00F1, r24
    13cc:	12 96       	adiw	r26, 0x02	; 2
    13ce:	8c 91       	ld	r24, X
    13d0:	12 97       	sbiw	r26, 0x02	; 2
    13d2:	88 0f       	add	r24, r24
    13d4:	88 0f       	add	r24, r24
    13d6:	88 0f       	add	r24, r24
    13d8:	80 93 f0 00 	sts	0x00F0, r24
    13dc:	ef ee       	ldi	r30, 0xEF	; 239
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	80 61       	ori	r24, 0x10	; 16
    13e4:	80 83       	st	Z, r24
    13e6:	1c c0       	rjmp	.+56     	; 0x1420 <__stack+0xb21>
          else              { Can_set_std_id(cmd->id.std);}
    13e8:	12 96       	adiw	r26, 0x02	; 2
    13ea:	8c 91       	ld	r24, X
    13ec:	12 97       	sbiw	r26, 0x02	; 2
    13ee:	86 95       	lsr	r24
    13f0:	86 95       	lsr	r24
    13f2:	86 95       	lsr	r24
    13f4:	13 96       	adiw	r26, 0x03	; 3
    13f6:	9c 91       	ld	r25, X
    13f8:	13 97       	sbiw	r26, 0x03	; 3
    13fa:	e0 e2       	ldi	r30, 0x20	; 32
    13fc:	9e 9f       	mul	r25, r30
    13fe:	80 0d       	add	r24, r0
    1400:	11 24       	eor	r1, r1
    1402:	80 93 f3 00 	sts	0x00F3, r24
    1406:	12 96       	adiw	r26, 0x02	; 2
    1408:	8c 91       	ld	r24, X
    140a:	12 97       	sbiw	r26, 0x02	; 2
    140c:	82 95       	swap	r24
    140e:	88 0f       	add	r24, r24
    1410:	80 7e       	andi	r24, 0xE0	; 224
    1412:	80 93 f2 00 	sts	0x00F2, r24
    1416:	ef ee       	ldi	r30, 0xEF	; 239
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8f 7e       	andi	r24, 0xEF	; 239
    141e:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1420:	16 96       	adiw	r26, 0x06	; 6
    1422:	8c 91       	ld	r24, X
    1424:	16 97       	sbiw	r26, 0x06	; 6
    1426:	88 23       	and	r24, r24
    1428:	91 f0       	breq	.+36     	; 0x144e <__stack+0xb4f>
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	8a ef       	ldi	r24, 0xFA	; 250
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	17 96       	adiw	r26, 0x07	; 7
    1432:	ed 91       	ld	r30, X+
    1434:	fc 91       	ld	r31, X
    1436:	18 97       	sbiw	r26, 0x08	; 8
    1438:	e2 0f       	add	r30, r18
    143a:	f1 1d       	adc	r31, r1
    143c:	30 81       	ld	r19, Z
    143e:	fc 01       	movw	r30, r24
    1440:	30 83       	st	Z, r19
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	16 96       	adiw	r26, 0x06	; 6
    1446:	3c 91       	ld	r19, X
    1448:	16 97       	sbiw	r26, 0x06	; 6
    144a:	23 17       	cp	r18, r19
    144c:	88 f3       	brcs	.-30     	; 0x1430 <__stack+0xb31>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    144e:	8f ef       	ldi	r24, 0xFF	; 255
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	9b 81       	ldd	r25, Y+3	; 0x03
    1454:	92 95       	swap	r25
    1456:	96 95       	lsr	r25
    1458:	97 70       	andi	r25, 0x07	; 7
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	88 0f       	add	r24, r24
    145e:	88 0f       	add	r24, r24
    1460:	88 0f       	add	r24, r24
    1462:	89 0f       	add	r24, r25
    1464:	80 93 f7 00 	sts	0x00F7, r24
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	92 95       	swap	r25
    146c:	96 95       	lsr	r25
    146e:	97 70       	andi	r25, 0x07	; 7
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 0f       	add	r24, r24
    1474:	88 0f       	add	r24, r24
    1476:	88 0f       	add	r24, r24
    1478:	89 0f       	add	r24, r25
    147a:	80 93 f6 00 	sts	0x00F6, r24
    147e:	99 81       	ldd	r25, Y+1	; 0x01
    1480:	92 95       	swap	r25
    1482:	96 95       	lsr	r25
    1484:	97 70       	andi	r25, 0x07	; 7
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	88 0f       	add	r24, r24
    148a:	88 0f       	add	r24, r24
    148c:	88 0f       	add	r24, r24
    148e:	89 0f       	add	r24, r25
    1490:	80 93 f5 00 	sts	0x00F5, r24
    1494:	29 81       	ldd	r18, Y+1	; 0x01
    1496:	22 0f       	add	r18, r18
    1498:	22 0f       	add	r18, r18
    149a:	22 0f       	add	r18, r18
    149c:	84 ef       	ldi	r24, 0xF4	; 244
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    14a4:	ef ee       	ldi	r30, 0xEF	; 239
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	30 81       	ld	r19, Z
    14aa:	16 96       	adiw	r26, 0x06	; 6
    14ac:	2c 91       	ld	r18, X
    14ae:	16 97       	sbiw	r26, 0x06	; 6
    14b0:	23 2b       	or	r18, r19
    14b2:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	1a 96       	adiw	r26, 0x0a	; 10
    14b8:	2c 93       	st	X, r18
    14ba:	dc 01       	movw	r26, r24
    14bc:	2c 91       	ld	r18, X
    14be:	24 60       	ori	r18, 0x04	; 4
    14c0:	2c 93       	st	X, r18
    14c2:	a0 ef       	ldi	r26, 0xF0	; 240
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	2c 91       	ld	r18, X
    14c8:	24 60       	ori	r18, 0x04	; 4
    14ca:	2c 93       	st	X, r18
          Can_set_rplv();
    14cc:	20 81       	ld	r18, Z
    14ce:	20 62       	ori	r18, 0x20	; 32
    14d0:	20 83       	st	Z, r18
          Can_set_idemsk();
    14d2:	dc 01       	movw	r26, r24
    14d4:	2c 91       	ld	r18, X
    14d6:	21 60       	ori	r18, 0x01	; 1
    14d8:	2c 93       	st	X, r18
          Can_config_rx();       
    14da:	80 81       	ld	r24, Z
    14dc:	8f 73       	andi	r24, 0x3F	; 63
    14de:	80 83       	st	Z, r24
    14e0:	80 81       	ld	r24, Z
    14e2:	80 68       	ori	r24, 0x80	; 128
    14e4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    14e6:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    14e8:	08 c0       	rjmp	.+16     	; 0x14fa <__stack+0xbfb>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    14ea:	19 96       	adiw	r26, 0x09	; 9
    14ec:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    14ee:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <__stack+0xbfb>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    14f2:	8f e1       	ldi	r24, 0x1F	; 31
    14f4:	19 96       	adiw	r26, 0x09	; 9
    14f6:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    14fa:	0f 90       	pop	r0
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    150a:	88 23       	and	r24, r24
    150c:	09 f4       	brne	.+2      	; 0x1510 <can_get_status+0xe>
    150e:	d5 c0       	rjmp	.+426    	; 0x16ba <can_get_status+0x1b8>
    1510:	8f 31       	cpi	r24, 0x1F	; 31
    1512:	09 f4       	brne	.+2      	; 0x1516 <can_get_status+0x14>
    1514:	d4 c0       	rjmp	.+424    	; 0x16be <can_get_status+0x1bc>
    1516:	8f 3f       	cpi	r24, 0xFF	; 255
    1518:	09 f4       	brne	.+2      	; 0x151c <can_get_status+0x1a>
    151a:	d3 c0       	rjmp	.+422    	; 0x16c2 <can_get_status+0x1c0>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    151c:	62 95       	swap	r22
    151e:	60 7f       	andi	r22, 0xF0	; 240
    1520:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    1524:	0e 94 18 04 	call	0x830	; 0x830 <can_get_mob_status>
    
    switch (a_status)
    1528:	80 32       	cpi	r24, 0x20	; 32
    152a:	61 f0       	breq	.+24     	; 0x1544 <can_get_status+0x42>
    152c:	20 f4       	brcc	.+8      	; 0x1536 <can_get_status+0x34>
    152e:	88 23       	and	r24, r24
    1530:	09 f4       	brne	.+2      	; 0x1534 <can_get_status+0x32>
    1532:	c9 c0       	rjmp	.+402    	; 0x16c6 <can_get_status+0x1c4>
    1534:	b8 c0       	rjmp	.+368    	; 0x16a6 <can_get_status+0x1a4>
    1536:	80 34       	cpi	r24, 0x40	; 64
    1538:	09 f4       	brne	.+2      	; 0x153c <can_get_status+0x3a>
    153a:	aa c0       	rjmp	.+340    	; 0x1690 <can_get_status+0x18e>
    153c:	80 3a       	cpi	r24, 0xA0	; 160
    153e:	09 f4       	brne	.+2      	; 0x1542 <can_get_status+0x40>
    1540:	4e c0       	rjmp	.+156    	; 0x15de <can_get_status+0xdc>
    1542:	b1 c0       	rjmp	.+354    	; 0x16a6 <can_get_status+0x1a4>
        case MOB_RX_COMPLETED:
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
            cmd->ctrl.rtr = Can_get_rtr();
    1544:	80 91 f0 00 	lds	r24, 0x00F0
    1548:	82 fb       	bst	r24, 2
    154a:	88 27       	eor	r24, r24
    154c:	80 f9       	bld	r24, 0
    154e:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1550:	80 91 ef 00 	lds	r24, 0x00EF
    1554:	84 ff       	sbrs	r24, 4
    1556:	2d c0       	rjmp	.+90     	; 0x15b2 <can_get_status+0xb0>
            {
	            cmd->ctrl.ide = 1; // extended frame
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    155c:	e3 ef       	ldi	r30, 0xF3	; 243
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	86 95       	lsr	r24
    1564:	86 95       	lsr	r24
    1566:	86 95       	lsr	r24
    1568:	8d 83       	std	Y+5, r24	; 0x05
    156a:	a2 ef       	ldi	r26, 0xF2	; 242
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	8c 91       	ld	r24, X
    1570:	90 81       	ld	r25, Z
    1572:	86 95       	lsr	r24
    1574:	86 95       	lsr	r24
    1576:	86 95       	lsr	r24
    1578:	20 e2       	ldi	r18, 0x20	; 32
    157a:	92 9f       	mul	r25, r18
    157c:	80 0d       	add	r24, r0
    157e:	11 24       	eor	r1, r1
    1580:	8c 83       	std	Y+4, r24	; 0x04
    1582:	e1 ef       	ldi	r30, 0xF1	; 241
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	9c 91       	ld	r25, X
    158a:	86 95       	lsr	r24
    158c:	86 95       	lsr	r24
    158e:	86 95       	lsr	r24
    1590:	20 e2       	ldi	r18, 0x20	; 32
    1592:	92 9f       	mul	r25, r18
    1594:	80 0d       	add	r24, r0
    1596:	11 24       	eor	r1, r1
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	80 91 f0 00 	lds	r24, 0x00F0
    159e:	90 81       	ld	r25, Z
    15a0:	86 95       	lsr	r24
    15a2:	86 95       	lsr	r24
    15a4:	86 95       	lsr	r24
    15a6:	20 e2       	ldi	r18, 0x20	; 32
    15a8:	92 9f       	mul	r25, r18
    15aa:	80 0d       	add	r24, r0
    15ac:	11 24       	eor	r1, r1
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <can_get_status+0xbe>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    15b2:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    15b4:	e3 ef       	ldi	r30, 0xF3	; 243
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	80 91 f2 00 	lds	r24, 0x00F2
    15be:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    15c0:	80 e2       	ldi	r24, 0x20	; 32
    15c2:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    15c4:	8f 81       	ldd	r24, Y+7	; 0x07
    15c6:	98 85       	ldd	r25, Y+8	; 0x08
    15c8:	0e 94 2e 04 	call	0x85c	; 0x85c <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    15cc:	ef ee       	ldi	r30, 0xEF	; 239
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 73       	andi	r24, 0x3F	; 63
    15d4:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    15d6:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    15da:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    15dc:	75 c0       	rjmp	.+234    	; 0x16c8 <can_get_status+0x1c6>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    15de:	80 91 f0 00 	lds	r24, 0x00F0
    15e2:	82 fb       	bst	r24, 2
    15e4:	88 27       	eor	r24, r24
    15e6:	80 f9       	bld	r24, 0
    15e8:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    15ea:	80 91 ef 00 	lds	r24, 0x00EF
    15ee:	84 ff       	sbrs	r24, 4
    15f0:	2d c0       	rjmp	.+90     	; 0x164c <can_get_status+0x14a>
            {
                cmd->ctrl.ide = 1; // extended frame
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    15f6:	e3 ef       	ldi	r30, 0xF3	; 243
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	86 95       	lsr	r24
    15fe:	86 95       	lsr	r24
    1600:	86 95       	lsr	r24
    1602:	8d 83       	std	Y+5, r24	; 0x05
    1604:	a2 ef       	ldi	r26, 0xF2	; 242
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	8c 91       	ld	r24, X
    160a:	90 81       	ld	r25, Z
    160c:	86 95       	lsr	r24
    160e:	86 95       	lsr	r24
    1610:	86 95       	lsr	r24
    1612:	20 e2       	ldi	r18, 0x20	; 32
    1614:	92 9f       	mul	r25, r18
    1616:	80 0d       	add	r24, r0
    1618:	11 24       	eor	r1, r1
    161a:	8c 83       	std	Y+4, r24	; 0x04
    161c:	e1 ef       	ldi	r30, 0xF1	; 241
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	9c 91       	ld	r25, X
    1624:	86 95       	lsr	r24
    1626:	86 95       	lsr	r24
    1628:	86 95       	lsr	r24
    162a:	20 e2       	ldi	r18, 0x20	; 32
    162c:	92 9f       	mul	r25, r18
    162e:	80 0d       	add	r24, r0
    1630:	11 24       	eor	r1, r1
    1632:	8b 83       	std	Y+3, r24	; 0x03
    1634:	80 91 f0 00 	lds	r24, 0x00F0
    1638:	90 81       	ld	r25, Z
    163a:	86 95       	lsr	r24
    163c:	86 95       	lsr	r24
    163e:	86 95       	lsr	r24
    1640:	20 e2       	ldi	r18, 0x20	; 32
    1642:	92 9f       	mul	r25, r18
    1644:	80 0d       	add	r24, r0
    1646:	11 24       	eor	r1, r1
    1648:	8a 83       	std	Y+2, r24	; 0x02
    164a:	13 c0       	rjmp	.+38     	; 0x1672 <can_get_status+0x170>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    164c:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    164e:	e3 ef       	ldi	r30, 0xF3	; 243
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	82 95       	swap	r24
    1656:	86 95       	lsr	r24
    1658:	87 70       	andi	r24, 0x07	; 7
    165a:	8b 83       	std	Y+3, r24	; 0x03
    165c:	80 91 f2 00 	lds	r24, 0x00F2
    1660:	90 81       	ld	r25, Z
    1662:	99 0f       	add	r25, r25
    1664:	99 0f       	add	r25, r25
    1666:	99 0f       	add	r25, r25
    1668:	82 95       	swap	r24
    166a:	86 95       	lsr	r24
    166c:	87 70       	andi	r24, 0x07	; 7
    166e:	89 0f       	add	r24, r25
    1670:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1672:	80 ea       	ldi	r24, 0xA0	; 160
    1674:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1676:	8f 81       	ldd	r24, Y+7	; 0x07
    1678:	98 85       	ldd	r25, Y+8	; 0x08
    167a:	0e 94 2e 04 	call	0x85c	; 0x85c <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    167e:	ef ee       	ldi	r30, 0xEF	; 239
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	8f 73       	andi	r24, 0x3F	; 63
    1686:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    1688:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    168c:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    168e:	1c c0       	rjmp	.+56     	; 0x16c8 <can_get_status+0x1c6>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1690:	80 e4       	ldi	r24, 0x40	; 64
    1692:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1694:	ef ee       	ldi	r30, 0xEF	; 239
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8f 73       	andi	r24, 0x3F	; 63
    169c:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    169e:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    16a2:	80 e4       	ldi	r24, 0x40	; 64
            break;
    16a4:	11 c0       	rjmp	.+34     	; 0x16c8 <can_get_status+0x1c6>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    16a6:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    16a8:	ef ee       	ldi	r30, 0xEF	; 239
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8f 73       	andi	r24, 0x3F	; 63
    16b0:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    16b2:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    16b6:	82 e0       	ldi	r24, 0x02	; 2
            break;
    16b8:	07 c0       	rjmp	.+14     	; 0x16c8 <can_get_status+0x1c6>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <can_get_status+0x1c6>
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	03 c0       	rjmp	.+6      	; 0x16c8 <can_get_status+0x1c6>
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <can_get_status+0x1c6>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	08 95       	ret

000016ce <send_tm_transaction_response>:
}

// Helper
static void send_tm_transaction_response(uint8_t req_by, uint8_t code)
{			
	send_arr[7] = (SELF_ID << 4)|req_by;
    16ce:	80 61       	ori	r24, 0x10	; 16
    16d0:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_COM;
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[5] = TM_TRANSACTION_RESP;
    16da:	83 e1       	ldi	r24, 0x13	; 19
    16dc:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
    16e0:	80 91 03 02 	lds	r24, 0x0203
    16e4:	80 93 b9 01 	sts	0x01B9, r24
	send_arr[3] = 0;
    16e8:	10 92 b8 01 	sts	0x01B8, r1
	send_arr[2] = 0;
    16ec:	10 92 b7 01 	sts	0x01B7, r1
	send_arr[1] = 0;
    16f0:	10 92 b6 01 	sts	0x01B6, r1
	send_arr[0] = code;
    16f4:	60 93 b5 01 	sts	0x01B5, r22
	can_send_message(&(send_arr[0]), CAN1_MB7);
    16f8:	61 e1       	ldi	r22, 0x11	; 17
    16fa:	85 eb       	ldi	r24, 0xB5	; 181
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
    1702:	08 95       	ret

00001704 <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1704:	83 e1       	ldi	r24, 0x13	; 19
    1706:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_COM;
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[5] = RESPONSE;
    1710:	84 e0       	ldi	r24, 0x04	; 4
    1712:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
    1716:	80 91 03 02 	lds	r24, 0x0203
    171a:	80 93 b9 01 	sts	0x01B9, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    171e:	61 e1       	ldi	r22, 0x11	; 17
    1720:	85 eb       	ldi	r24, 0xB5	; 181
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
	send_now = 0;
    1728:	10 92 07 02 	sts	0x0207, r1
    172c:	08 95       	ret

0000172e <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|HK_TASK_ID;
    172e:	84 e1       	ldi	r24, 0x14	; 20
    1730:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[4] = CURRENT_MINUTE;
    173a:	80 91 03 02 	lds	r24, 0x0203
    173e:	80 93 b9 01 	sts	0x01B9, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1742:	60 e1       	ldi	r22, 0x10	; 16
    1744:	85 eb       	ldi	r24, 0xB5	; 181
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
	send_hk = 0;
    174c:	10 92 ab 02 	sts	0x02AB, r1
    1750:	08 95       	ret

00001752 <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	00 d0       	rcall	.+0      	; 0x175c <send_sensor_data+0xa>
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[3];
    1760:	10 91 f7 01 	lds	r17, 0x01F7
	req_by = data_req_arr[7] >> 4;
    1764:	00 91 fb 01 	lds	r16, 0x01FB
    1768:	02 95       	swap	r16
    176a:	0f 70       	andi	r16, 0x0F	; 15
	send_arr[3] = 0;
    176c:	10 92 b8 01 	sts	0x01B8, r1
	send_arr[2] = 0;
    1770:	10 92 b7 01 	sts	0x01B7, r1
	send_arr[1] = 0;
    1774:	10 92 b6 01 	sts	0x01B6, r1
	send_arr[0] = 0;
    1778:	10 92 b5 01 	sts	0x01B5, r1
	
	if(sensor_name == EPS_TEMP)
    177c:	1a 30       	cpi	r17, 0x0A	; 10
    177e:	71 f4       	brne	.+28     	; 0x179c <send_sensor_data+0x4a>
	{
		spi_retrieve_temp(&high, &low);
    1780:	be 01       	movw	r22, r28
    1782:	6e 5f       	subi	r22, 0xFE	; 254
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	ce 01       	movw	r24, r28
    1788:	01 96       	adiw	r24, 0x01	; 1
    178a:	0e 94 2a 11 	call	0x2254	; 0x2254 <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	80 93 b6 01 	sts	0x01B6, r24
		send_arr[0] = low;
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	80 93 b5 01 	sts	0x01B5, r24
    179a:	0e c0       	rjmp	.+28     	; 0x17b8 <send_sensor_data+0x66>
	}
	
	if(sensor_name == PANELX_V)
    179c:	11 30       	cpi	r17, 0x01	; 1
    179e:	29 f4       	brne	.+10     	; 0x17aa <send_sensor_data+0x58>
	{
		send_arr[0] = pxv;
    17a0:	80 91 d8 02 	lds	r24, 0x02D8
    17a4:	80 93 b5 01 	sts	0x01B5, r24
    17a8:	0e c0       	rjmp	.+28     	; 0x17c6 <send_sensor_data+0x74>
	}
	if(sensor_name == PANELX_I)
    17aa:	12 30       	cpi	r17, 0x02	; 2
    17ac:	29 f4       	brne	.+10     	; 0x17b8 <send_sensor_data+0x66>
	{
		send_arr[0] = pxi;
    17ae:	80 91 d9 02 	lds	r24, 0x02D9
    17b2:	80 93 b5 01 	sts	0x01B5, r24
    17b6:	0d c0       	rjmp	.+26     	; 0x17d2 <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_V)
    17b8:	13 30       	cpi	r17, 0x03	; 3
    17ba:	29 f4       	brne	.+10     	; 0x17c6 <send_sensor_data+0x74>
	{
		send_arr[0] = pyv;
    17bc:	80 91 06 02 	lds	r24, 0x0206
    17c0:	80 93 b5 01 	sts	0x01B5, r24
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_I)
    17c6:	14 30       	cpi	r17, 0x04	; 4
    17c8:	21 f4       	brne	.+8      	; 0x17d2 <send_sensor_data+0x80>
	{
		send_arr[0] = pyi;
    17ca:	80 91 09 01 	lds	r24, 0x0109
    17ce:	80 93 b5 01 	sts	0x01B5, r24
	//}
	//if(sensor_name == OBC_I)
	//{
	//}

	send_arr[7] = (SELF_ID << 4)|req_by;
    17d2:	00 61       	ori	r16, 0x10	; 16
    17d4:	00 93 bc 01 	sts	0x01BC, r16
	send_arr[6] = MT_DATA;
    17d8:	10 92 bb 01 	sts	0x01BB, r1
	send_arr[5] = sensor_name;
    17dc:	10 93 ba 01 	sts	0x01BA, r17
	send_arr[4] = CURRENT_MINUTE;			
    17e0:	80 91 03 02 	lds	r24, 0x0203
    17e4:	80 93 b9 01 	sts	0x01B9, r24
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    17e8:	6a e0       	ldi	r22, 0x0A	; 10
    17ea:	85 eb       	ldi	r24, 0xB5	; 181
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
	send_data = 0;
    17f2:	10 92 cd 02 	sts	0x02CD, r1
	
	return;
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1804:	83 e1       	ldi	r24, 0x13	; 19
    1806:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_DATA;
    180a:	10 92 bb 01 	sts	0x01BB, r1
	send_arr[5] = COMS_PACKET;
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
    1814:	80 91 03 02 	lds	r24, 0x0203
    1818:	80 93 b9 01 	sts	0x01B9, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    181c:	80 91 0c 02 	lds	r24, 0x020C
    1820:	80 93 b5 01 	sts	0x01B5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1824:	6a e0       	ldi	r22, 0x0A	; 10
    1826:	85 eb       	ldi	r24, 0xB5	; 181
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
	msg_received = 0;
    182e:	10 92 0e 01 	sts	0x010E, r1
    1832:	08 95       	ret

00001834 <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    1834:	90 91 9a 03 	lds	r25, 0x039A
	read_ptr = read_arr[0];
    1838:	e0 91 97 03 	lds	r30, 0x0397
    183c:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    183e:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    1840:	20 91 9e 03 	lds	r18, 0x039E
    1844:	20 61       	ori	r18, 0x10	; 16
    1846:	20 93 bc 01 	sts	0x01BC, r18
	send_arr[6] = MT_COM;
    184a:	22 e0       	ldi	r18, 0x02	; 2
    184c:	20 93 bb 01 	sts	0x01BB, r18
	send_arr[5] = ACK_READ;
    1850:	26 e0       	ldi	r18, 0x06	; 6
    1852:	20 93 ba 01 	sts	0x01BA, r18
	send_arr[4] = CURRENT_MINUTE;
    1856:	20 91 03 02 	lds	r18, 0x0203
    185a:	20 93 b9 01 	sts	0x01B9, r18
	send_arr[3] = passkey;
    185e:	90 93 b8 01 	sts	0x01B8, r25
	send_arr[0] = read_val;
    1862:	80 93 b5 01 	sts	0x01B5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1866:	61 e1       	ldi	r22, 0x11	; 17
    1868:	85 eb       	ldi	r24, 0xB5	; 181
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
	read_response = 0;
    1870:	10 92 12 02 	sts	0x0212, r1
    1874:	08 95       	ret

00001876 <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    1876:	80 91 04 01 	lds	r24, 0x0104
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    187a:	20 91 01 01 	lds	r18, 0x0101
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    187e:	90 91 9e 03 	lds	r25, 0x039E
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    1882:	e0 91 02 01 	lds	r30, 0x0102
    1886:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    1888:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    188a:	90 61       	ori	r25, 0x10	; 16
    188c:	90 93 bc 01 	sts	0x01BC, r25
	send_arr[6] = MT_COM;
    1890:	92 e0       	ldi	r25, 0x02	; 2
    1892:	90 93 bb 01 	sts	0x01BB, r25
	send_arr[5] = ACK_WRITE;
    1896:	98 e0       	ldi	r25, 0x08	; 8
    1898:	90 93 ba 01 	sts	0x01BA, r25
	send_arr[4] = CURRENT_MINUTE;
    189c:	90 91 03 02 	lds	r25, 0x0203
    18a0:	90 93 b9 01 	sts	0x01B9, r25
	send_arr[3] = passkey;
    18a4:	80 93 b8 01 	sts	0x01B8, r24
	send_arr[0] = ret_val;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	80 93 b5 01 	sts	0x01B5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    18ae:	61 e1       	ldi	r22, 0x11	; 17
    18b0:	85 eb       	ldi	r24, 0xB5	; 181
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
	write_response = 0;
    18b8:	10 92 d8 01 	sts	0x01D8, r1
    18bc:	08 95       	ret

000018be <set_sensor_high>:

void set_sensor_high(void)
{
	uint8_t sensor_name, req_by;
	uint16_t high = 0;
	sensor_name = sensh_arr[3];
    18be:	20 91 dc 01 	lds	r18, 0x01DC
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    18c2:	2a 30       	cpi	r18, 0x0A	; 10
    18c4:	69 f4       	brne	.+26     	; 0x18e0 <set_sensor_high+0x22>
	{
		epstemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18c6:	80 91 da 01 	lds	r24, 0x01DA
    18ca:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_high |= (high << 8);
    18cc:	98 2f       	mov	r25, r24
    18ce:	88 27       	eor	r24, r24
	sensor_name = sensh_arr[3];
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_high = sensh_arr[0];
    18d0:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		epstemp_high |= (high << 8);
    18d4:	83 2b       	or	r24, r19
    18d6:	90 93 be 01 	sts	0x01BE, r25
    18da:	80 93 bd 01 	sts	0x01BD, r24
    18de:	1e c0       	rjmp	.+60     	; 0x191c <set_sensor_high+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    18e0:	21 30       	cpi	r18, 0x01	; 1
    18e2:	69 f4       	brne	.+26     	; 0x18fe <set_sensor_high+0x40>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18e4:	80 91 da 01 	lds	r24, 0x01DA
    18e8:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);		
    18ea:	98 2f       	mov	r25, r24
    18ec:	88 27       	eor	r24, r24
		epstemp_high |= (high << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_high = sensh_arr[0];
    18ee:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);		
    18f2:	83 2b       	or	r24, r19
    18f4:	90 93 05 02 	sts	0x0205, r25
    18f8:	80 93 04 02 	sts	0x0204, r24
    18fc:	1e c0       	rjmp	.+60     	; 0x193a <set_sensor_high+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	69 f4       	brne	.+26     	; 0x191c <set_sensor_high+0x5e>
	{
		pxi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1902:	80 91 da 01 	lds	r24, 0x01DA
    1906:	90 e0       	ldi	r25, 0x00	; 0
		pxi_high |= (high << 8);
    1908:	98 2f       	mov	r25, r24
    190a:	88 27       	eor	r24, r24
		pxv_high |= (high << 8);		
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_high = sensh_arr[0];
    190c:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
    1910:	83 2b       	or	r24, r19
    1912:	90 93 04 03 	sts	0x0304, r25
    1916:	80 93 03 03 	sts	0x0303, r24
    191a:	1e c0       	rjmp	.+60     	; 0x1958 <set_sensor_high+0x9a>
	}
	if(sensor_name == PANELY_V)
    191c:	23 30       	cpi	r18, 0x03	; 3
    191e:	69 f4       	brne	.+26     	; 0x193a <set_sensor_high+0x7c>
	{
		pyv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1920:	80 91 da 01 	lds	r24, 0x01DA
    1924:	90 e0       	ldi	r25, 0x00	; 0
		pyv_high |= (high << 8);
    1926:	98 2f       	mov	r25, r24
    1928:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_high = sensh_arr[0];
    192a:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
    192e:	83 2b       	or	r24, r19
    1930:	90 93 a2 01 	sts	0x01A2, r25
    1934:	80 93 a1 01 	sts	0x01A1, r24
    1938:	1e c0       	rjmp	.+60     	; 0x1976 <set_sensor_high+0xb8>
	}
	if(sensor_name == PANELY_I)
    193a:	24 30       	cpi	r18, 0x04	; 4
    193c:	69 f4       	brne	.+26     	; 0x1958 <set_sensor_high+0x9a>
	{
		pyi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    193e:	80 91 da 01 	lds	r24, 0x01DA
    1942:	90 e0       	ldi	r25, 0x00	; 0
		pyi_high |= (high << 8);
    1944:	98 2f       	mov	r25, r24
    1946:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_high = sensh_arr[0];
    1948:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
    194c:	83 2b       	or	r24, r19
    194e:	90 93 96 03 	sts	0x0396, r25
    1952:	80 93 95 03 	sts	0x0395, r24
    1956:	1e c0       	rjmp	.+60     	; 0x1994 <set_sensor_high+0xd6>
	}
	if(sensor_name == BATTM_V)
    1958:	25 30       	cpi	r18, 0x05	; 5
    195a:	69 f4       	brne	.+26     	; 0x1976 <set_sensor_high+0xb8>
	{
		battmv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    195c:	80 91 da 01 	lds	r24, 0x01DA
    1960:	90 e0       	ldi	r25, 0x00	; 0
		battmv_high |= (high << 8);
    1962:	98 2f       	mov	r25, r24
    1964:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_high = sensh_arr[0];
    1966:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
    196a:	83 2b       	or	r24, r19
    196c:	90 93 02 02 	sts	0x0202, r25
    1970:	80 93 01 02 	sts	0x0201, r24
    1974:	1e c0       	rjmp	.+60     	; 0x19b2 <set_sensor_high+0xf4>
	}
	if(sensor_name == BATT_V)
    1976:	26 30       	cpi	r18, 0x06	; 6
    1978:	69 f4       	brne	.+26     	; 0x1994 <set_sensor_high+0xd6>
	{
		battv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    197a:	80 91 da 01 	lds	r24, 0x01DA
    197e:	90 e0       	ldi	r25, 0x00	; 0
		battv_high |= (high << 8);
    1980:	98 2f       	mov	r25, r24
    1982:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_high = sensh_arr[0];
    1984:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
    1988:	83 2b       	or	r24, r19
    198a:	90 93 db 02 	sts	0x02DB, r25
    198e:	80 93 da 02 	sts	0x02DA, r24
    1992:	1e c0       	rjmp	.+60     	; 0x19d0 <set_sensor_high+0x112>
	}
	if(sensor_name == BATT_I)
    1994:	21 31       	cpi	r18, 0x11	; 17
    1996:	69 f4       	brne	.+26     	; 0x19b2 <set_sensor_high+0xf4>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1998:	80 91 da 01 	lds	r24, 0x01DA
    199c:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);
    199e:	98 2f       	mov	r25, r24
    19a0:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_high = sensh_arr[0];
    19a2:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
    19a6:	83 2b       	or	r24, r19
    19a8:	90 93 05 02 	sts	0x0205, r25
    19ac:	80 93 04 02 	sts	0x0204, r24
    19b0:	1e c0       	rjmp	.+60     	; 0x19ee <set_sensor_high+0x130>
	}
	if(sensor_name == BATT_TEMP)
    19b2:	29 30       	cpi	r18, 0x09	; 9
    19b4:	69 f4       	brne	.+26     	; 0x19d0 <set_sensor_high+0x112>
	{
		battemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19b6:	80 91 da 01 	lds	r24, 0x01DA
    19ba:	90 e0       	ldi	r25, 0x00	; 0
		battemp_high |= (high << 8);
    19bc:	98 2f       	mov	r25, r24
    19be:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_high = sensh_arr[0];
    19c0:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
    19c4:	83 2b       	or	r24, r19
    19c6:	90 93 a4 01 	sts	0x01A4, r25
    19ca:	80 93 a3 01 	sts	0x01A3, r24
    19ce:	1e c0       	rjmp	.+60     	; 0x1a0c <set_sensor_high+0x14e>
	}
	if(sensor_name == COMS_V)
    19d0:	2b 30       	cpi	r18, 0x0B	; 11
    19d2:	69 f4       	brne	.+26     	; 0x19ee <set_sensor_high+0x130>
	{
		comsv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19d4:	80 91 da 01 	lds	r24, 0x01DA
    19d8:	90 e0       	ldi	r25, 0x00	; 0
		comsv_high |= (high << 8);
    19da:	98 2f       	mov	r25, r24
    19dc:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_high = sensh_arr[0];
    19de:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
    19e2:	83 2b       	or	r24, r19
    19e4:	90 93 e7 01 	sts	0x01E7, r25
    19e8:	80 93 e6 01 	sts	0x01E6, r24
    19ec:	1e c0       	rjmp	.+60     	; 0x1a2a <set_sensor_high+0x16c>
	}
	if(sensor_name == COMS_I)
    19ee:	2c 30       	cpi	r18, 0x0C	; 12
    19f0:	69 f4       	brne	.+26     	; 0x1a0c <set_sensor_high+0x14e>
	{
		comsi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19f2:	80 91 da 01 	lds	r24, 0x01DA
    19f6:	90 e0       	ldi	r25, 0x00	; 0
		comsi_high |= (high << 8);
    19f8:	98 2f       	mov	r25, r24
    19fa:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_high = sensh_arr[0];
    19fc:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
    1a00:	83 2b       	or	r24, r19
    1a02:	90 93 ca 01 	sts	0x01CA, r25
    1a06:	80 93 c9 01 	sts	0x01C9, r24
    1a0a:	1e c0       	rjmp	.+60     	; 0x1a48 <set_sensor_high+0x18a>
	}
	if(sensor_name == PAY_V)
    1a0c:	2d 30       	cpi	r18, 0x0D	; 13
    1a0e:	69 f4       	brne	.+26     	; 0x1a2a <set_sensor_high+0x16c>
	{
		payv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a10:	80 91 da 01 	lds	r24, 0x01DA
    1a14:	90 e0       	ldi	r25, 0x00	; 0
		payv_high |= (high << 8);
    1a16:	98 2f       	mov	r25, r24
    1a18:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_high = sensh_arr[0];
    1a1a:	30 91 d9 01 	lds	r19, 0x01D9
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
    1a1e:	83 2b       	or	r24, r19
    1a20:	90 93 a0 01 	sts	0x01A0, r25
    1a24:	80 93 9f 01 	sts	0x019F, r24
    1a28:	1e c0       	rjmp	.+60     	; 0x1a66 <set_sensor_high+0x1a8>
	}
	if(sensor_name == PAY_I)
    1a2a:	2e 30       	cpi	r18, 0x0E	; 14
    1a2c:	69 f4       	brne	.+26     	; 0x1a48 <set_sensor_high+0x18a>
	{
		payi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a2e:	80 91 da 01 	lds	r24, 0x01DA
    1a32:	90 e0       	ldi	r25, 0x00	; 0
		payi_high |= (high << 8);
    1a34:	98 2f       	mov	r25, r24
    1a36:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_high = sensh_arr[0];
    1a38:	20 91 d9 01 	lds	r18, 0x01D9
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
    1a3c:	82 2b       	or	r24, r18
    1a3e:	90 93 ee 02 	sts	0x02EE, r25
    1a42:	80 93 ed 02 	sts	0x02ED, r24
    1a46:	1d c0       	rjmp	.+58     	; 0x1a82 <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_V)
    1a48:	2f 30       	cpi	r18, 0x0F	; 15
    1a4a:	69 f4       	brne	.+26     	; 0x1a66 <set_sensor_high+0x1a8>
	{
		obcv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a4c:	80 91 da 01 	lds	r24, 0x01DA
    1a50:	90 e0       	ldi	r25, 0x00	; 0
		obcv_high |= (high << 8);
    1a52:	98 2f       	mov	r25, r24
    1a54:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_high = sensh_arr[0];
    1a56:	20 91 d9 01 	lds	r18, 0x01D9
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
    1a5a:	82 2b       	or	r24, r18
    1a5c:	90 93 d7 01 	sts	0x01D7, r25
    1a60:	80 93 d6 01 	sts	0x01D6, r24
    1a64:	0e c0       	rjmp	.+28     	; 0x1a82 <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_I)
    1a66:	20 31       	cpi	r18, 0x10	; 16
    1a68:	61 f4       	brne	.+24     	; 0x1a82 <set_sensor_high+0x1c4>
	{
		obci_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a6a:	80 91 da 01 	lds	r24, 0x01DA
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
		obci_high |= (high << 8);
    1a70:	98 2f       	mov	r25, r24
    1a72:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_high = sensh_arr[0];
    1a74:	20 91 d9 01 	lds	r18, 0x01D9
		high = (uint16_t)sensh_arr[1];
		obci_high |= (high << 8);
    1a78:	82 2b       	or	r24, r18
    1a7a:	90 93 ad 02 	sts	0x02AD, r25
    1a7e:	80 93 ac 02 	sts	0x02AC, r24
	}
	
	set_sens_h = 0;
    1a82:	10 92 ca 02 	sts	0x02CA, r1
    1a86:	08 95       	ret

00001a88 <set_sensor_low>:

void set_sensor_low(void)
{
	uint8_t sensor_name, req_by;
	uint16_t low = 0;
	sensor_name = sensl_arr[3];
    1a88:	20 91 fd 02 	lds	r18, 0x02FD
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    1a8c:	2a 30       	cpi	r18, 0x0A	; 10
    1a8e:	69 f4       	brne	.+26     	; 0x1aaa <set_sensor_low+0x22>
	{
		epstemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a90:	80 91 fb 02 	lds	r24, 0x02FB
    1a94:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_low |= (low << 8);
    1a96:	98 2f       	mov	r25, r24
    1a98:	88 27       	eor	r24, r24
	sensor_name = sensl_arr[3];
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_low = sensl_arr[0];
    1a9a:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		epstemp_low |= (low << 8);
    1a9e:	83 2b       	or	r24, r19
    1aa0:	90 93 c0 01 	sts	0x01C0, r25
    1aa4:	80 93 bf 01 	sts	0x01BF, r24
    1aa8:	1e c0       	rjmp	.+60     	; 0x1ae6 <set_sensor_low+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    1aaa:	21 30       	cpi	r18, 0x01	; 1
    1aac:	69 f4       	brne	.+26     	; 0x1ac8 <set_sensor_low+0x40>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1aae:	80 91 fb 02 	lds	r24, 0x02FB
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	88 27       	eor	r24, r24
		epstemp_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_low = sensl_arr[0];
    1ab8:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1abc:	83 2b       	or	r24, r19
    1abe:	90 93 af 02 	sts	0x02AF, r25
    1ac2:	80 93 ae 02 	sts	0x02AE, r24
    1ac6:	1e c0       	rjmp	.+60     	; 0x1b04 <set_sensor_low+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    1ac8:	22 30       	cpi	r18, 0x02	; 2
    1aca:	69 f4       	brne	.+26     	; 0x1ae6 <set_sensor_low+0x5e>
	{
		pxi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1acc:	80 91 fb 02 	lds	r24, 0x02FB
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
		pxi_low |= (low << 8);
    1ad2:	98 2f       	mov	r25, r24
    1ad4:	88 27       	eor	r24, r24
		pxv_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_low = sensl_arr[0];
    1ad6:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
    1ada:	83 2b       	or	r24, r19
    1adc:	90 93 d5 01 	sts	0x01D5, r25
    1ae0:	80 93 d4 01 	sts	0x01D4, r24
    1ae4:	1e c0       	rjmp	.+60     	; 0x1b22 <set_sensor_low+0x9a>
	}
	if(sensor_name == PANELY_V)
    1ae6:	23 30       	cpi	r18, 0x03	; 3
    1ae8:	69 f4       	brne	.+26     	; 0x1b04 <set_sensor_low+0x7c>
	{
		pyv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1aea:	80 91 fb 02 	lds	r24, 0x02FB
    1aee:	90 e0       	ldi	r25, 0x00	; 0
		pyv_low |= (low << 8);
    1af0:	98 2f       	mov	r25, r24
    1af2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_low = sensl_arr[0];
    1af4:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
    1af8:	83 2b       	or	r24, r19
    1afa:	90 93 b1 02 	sts	0x02B1, r25
    1afe:	80 93 b0 02 	sts	0x02B0, r24
    1b02:	1e c0       	rjmp	.+60     	; 0x1b40 <set_sensor_low+0xb8>
	}
	if(sensor_name == PANELY_I)
    1b04:	24 30       	cpi	r18, 0x04	; 4
    1b06:	69 f4       	brne	.+26     	; 0x1b22 <set_sensor_low+0x9a>
	{
		pyi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b08:	80 91 fb 02 	lds	r24, 0x02FB
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
		pyi_low |= (low << 8);
    1b0e:	98 2f       	mov	r25, r24
    1b10:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_low = sensl_arr[0];
    1b12:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
    1b16:	83 2b       	or	r24, r19
    1b18:	90 93 c1 02 	sts	0x02C1, r25
    1b1c:	80 93 c0 02 	sts	0x02C0, r24
    1b20:	1e c0       	rjmp	.+60     	; 0x1b5e <set_sensor_low+0xd6>
	}
	if(sensor_name == BATTM_V)
    1b22:	25 30       	cpi	r18, 0x05	; 5
    1b24:	69 f4       	brne	.+26     	; 0x1b40 <set_sensor_low+0xb8>
	{
		battmv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b26:	80 91 fb 02 	lds	r24, 0x02FB
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
		battmv_low |= (low << 8);
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_low = sensl_arr[0];
    1b30:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
    1b34:	83 2b       	or	r24, r19
    1b36:	90 93 ff 01 	sts	0x01FF, r25
    1b3a:	80 93 fe 01 	sts	0x01FE, r24
    1b3e:	1e c0       	rjmp	.+60     	; 0x1b7c <set_sensor_low+0xf4>
	}
	if(sensor_name == BATT_V)
    1b40:	26 30       	cpi	r18, 0x06	; 6
    1b42:	69 f4       	brne	.+26     	; 0x1b5e <set_sensor_low+0xd6>
	{
		battv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b44:	80 91 fb 02 	lds	r24, 0x02FB
    1b48:	90 e0       	ldi	r25, 0x00	; 0
		battv_low |= (low << 8);
    1b4a:	98 2f       	mov	r25, r24
    1b4c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_low = sensl_arr[0];
    1b4e:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
    1b52:	83 2b       	or	r24, r19
    1b54:	90 93 0b 01 	sts	0x010B, r25
    1b58:	80 93 0a 01 	sts	0x010A, r24
    1b5c:	1e c0       	rjmp	.+60     	; 0x1b9a <set_sensor_low+0x112>
	}
	if(sensor_name == BATT_I)
    1b5e:	21 31       	cpi	r18, 0x11	; 17
    1b60:	69 f4       	brne	.+26     	; 0x1b7c <set_sensor_low+0xf4>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b62:	80 91 fb 02 	lds	r24, 0x02FB
    1b66:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1b68:	98 2f       	mov	r25, r24
    1b6a:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_low = sensl_arr[0];
    1b6c:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1b70:	83 2b       	or	r24, r19
    1b72:	90 93 af 02 	sts	0x02AF, r25
    1b76:	80 93 ae 02 	sts	0x02AE, r24
    1b7a:	1e c0       	rjmp	.+60     	; 0x1bb8 <set_sensor_low+0x130>
	}
	if(sensor_name == BATT_TEMP)
    1b7c:	29 30       	cpi	r18, 0x09	; 9
    1b7e:	69 f4       	brne	.+26     	; 0x1b9a <set_sensor_low+0x112>
	{
		battemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b80:	80 91 fb 02 	lds	r24, 0x02FB
    1b84:	90 e0       	ldi	r25, 0x00	; 0
		battemp_low |= (low << 8);
    1b86:	98 2f       	mov	r25, r24
    1b88:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_low = sensl_arr[0];
    1b8a:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
    1b8e:	83 2b       	or	r24, r19
    1b90:	90 93 dd 02 	sts	0x02DD, r25
    1b94:	80 93 dc 02 	sts	0x02DC, r24
    1b98:	1e c0       	rjmp	.+60     	; 0x1bd6 <set_sensor_low+0x14e>
	}
	if(sensor_name == COMS_V)
    1b9a:	2b 30       	cpi	r18, 0x0B	; 11
    1b9c:	69 f4       	brne	.+26     	; 0x1bb8 <set_sensor_low+0x130>
	{
		comsv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b9e:	80 91 fb 02 	lds	r24, 0x02FB
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
		comsv_low |= (low << 8);
    1ba4:	98 2f       	mov	r25, r24
    1ba6:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_low = sensl_arr[0];
    1ba8:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
    1bac:	83 2b       	or	r24, r19
    1bae:	90 93 fd 01 	sts	0x01FD, r25
    1bb2:	80 93 fc 01 	sts	0x01FC, r24
    1bb6:	1e c0       	rjmp	.+60     	; 0x1bf4 <set_sensor_low+0x16c>
	}
	if(sensor_name == COMS_I)
    1bb8:	2c 30       	cpi	r18, 0x0C	; 12
    1bba:	69 f4       	brne	.+26     	; 0x1bd6 <set_sensor_low+0x14e>
	{
		comsi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bbc:	80 91 fb 02 	lds	r24, 0x02FB
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
		comsi_low |= (low << 8);
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_low = sensl_arr[0];
    1bc6:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
    1bca:	83 2b       	or	r24, r19
    1bcc:	90 93 ec 02 	sts	0x02EC, r25
    1bd0:	80 93 eb 02 	sts	0x02EB, r24
    1bd4:	1e c0       	rjmp	.+60     	; 0x1c12 <set_sensor_low+0x18a>
	}
	if(sensor_name == PAY_V)
    1bd6:	2d 30       	cpi	r18, 0x0D	; 13
    1bd8:	69 f4       	brne	.+26     	; 0x1bf4 <set_sensor_low+0x16c>
	{
		payv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bda:	80 91 fb 02 	lds	r24, 0x02FB
    1bde:	90 e0       	ldi	r25, 0x00	; 0
		payv_low |= (low << 8);
    1be0:	98 2f       	mov	r25, r24
    1be2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_low = sensl_arr[0];
    1be4:	30 91 fa 02 	lds	r19, 0x02FA
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
    1be8:	83 2b       	or	r24, r19
    1bea:	90 93 0d 01 	sts	0x010D, r25
    1bee:	80 93 0c 01 	sts	0x010C, r24
    1bf2:	1e c0       	rjmp	.+60     	; 0x1c30 <set_sensor_low+0x1a8>
	}
	if(sensor_name == PAY_I)
    1bf4:	2e 30       	cpi	r18, 0x0E	; 14
    1bf6:	69 f4       	brne	.+26     	; 0x1c12 <set_sensor_low+0x18a>
	{
		payi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bf8:	80 91 fb 02 	lds	r24, 0x02FB
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
		payi_low |= (low << 8);
    1bfe:	98 2f       	mov	r25, r24
    1c00:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_low = sensl_arr[0];
    1c02:	20 91 fa 02 	lds	r18, 0x02FA
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
    1c06:	82 2b       	or	r24, r18
    1c08:	90 93 0b 02 	sts	0x020B, r25
    1c0c:	80 93 0a 02 	sts	0x020A, r24
    1c10:	1d c0       	rjmp	.+58     	; 0x1c4c <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_V)
    1c12:	2f 30       	cpi	r18, 0x0F	; 15
    1c14:	69 f4       	brne	.+26     	; 0x1c30 <set_sensor_low+0x1a8>
	{
		obcv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1c16:	80 91 fb 02 	lds	r24, 0x02FB
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
		obcv_low |= (low << 8);
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_low = sensl_arr[0];
    1c20:	20 91 fa 02 	lds	r18, 0x02FA
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
    1c24:	82 2b       	or	r24, r18
    1c26:	90 93 f9 02 	sts	0x02F9, r25
    1c2a:	80 93 f8 02 	sts	0x02F8, r24
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_I)
    1c30:	20 31       	cpi	r18, 0x10	; 16
    1c32:	61 f4       	brne	.+24     	; 0x1c4c <set_sensor_low+0x1c4>
	{
		obci_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1c34:	80 91 fb 02 	lds	r24, 0x02FB
    1c38:	90 e0       	ldi	r25, 0x00	; 0
		obci_low |= (low << 8);
    1c3a:	98 2f       	mov	r25, r24
    1c3c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_low = sensl_arr[0];
    1c3e:	20 91 fa 02 	lds	r18, 0x02FA
		low = (uint16_t)sensl_arr[1];
		obci_low |= (low << 8);
    1c42:	82 2b       	or	r24, r18
    1c44:	90 93 e7 02 	sts	0x02E7, r25
    1c48:	80 93 e6 02 	sts	0x02E6, r24
	}
	
	set_sens_l = 0;
    1c4c:	10 92 cf 02 	sts	0x02CF, r1
    1c50:	08 95       	ret

00001c52 <set_var>:
}

void set_var(void)
{
	uint8_t var_name;
	var_name = setv_arr[3];
    1c52:	80 91 cf 01 	lds	r24, 0x01CF
	
	if(var_name == MPPTX)
    1c56:	8f 3f       	cpi	r24, 0xFF	; 255
    1c58:	29 f4       	brne	.+10     	; 0x1c64 <set_var+0x12>
	{
		mpptx = setv_arr[0];
    1c5a:	90 91 cc 01 	lds	r25, 0x01CC
    1c5e:	90 93 08 02 	sts	0x0208, r25
    1c62:	0e c0       	rjmp	.+28     	; 0x1c80 <set_var+0x2e>
	}
	if(var_name == MPPTY)
    1c64:	8e 3f       	cpi	r24, 0xFE	; 254
    1c66:	29 f4       	brne	.+10     	; 0x1c72 <set_var+0x20>
	{
		mppty = setv_arr[0];
    1c68:	80 91 cc 01 	lds	r24, 0x01CC
    1c6c:	80 93 00 02 	sts	0x0200, r24
    1c70:	0d c0       	rjmp	.+26     	; 0x1c8c <set_var+0x3a>
	}
	if(var_name == BALANCE_H)
    1c72:	80 3f       	cpi	r24, 0xF0	; 240
    1c74:	29 f4       	brne	.+10     	; 0x1c80 <set_var+0x2e>
	{
		balance_l = setv_arr[0];
    1c76:	80 91 cc 01 	lds	r24, 0x01CC
    1c7a:	80 93 e3 01 	sts	0x01E3, r24
    1c7e:	06 c0       	rjmp	.+12     	; 0x1c8c <set_var+0x3a>
	}
	if(var_name == BALANCE_L)
    1c80:	81 3f       	cpi	r24, 0xF1	; 241
    1c82:	21 f4       	brne	.+8      	; 0x1c8c <set_var+0x3a>
	{
		balance_h = setv_arr[0];
    1c84:	80 91 cc 01 	lds	r24, 0x01CC
    1c88:	80 93 cb 01 	sts	0x01CB, r24
	}
	set_varf = 0;
    1c8c:	10 92 ce 02 	sts	0x02CE, r1
    1c90:	08 95       	ret

00001c92 <receive_tm_msg>:
}

void receive_tm_msg(void)
{
	uint8_t req_by, obc_seq_count;
	req_by = new_tm_msg[7] >> 4;
    1c92:	80 91 d7 02 	lds	r24, 0x02D7
    1c96:	82 95       	swap	r24
    1c98:	8f 70       	andi	r24, 0x0F	; 15
	obc_seq_count = new_tm_msg[4];
    1c9a:	90 91 d4 02 	lds	r25, 0x02D4

	if(obc_seq_count > (tm_sequence_count + 1))
    1c9e:	29 2f       	mov	r18, r25
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	60 91 00 01 	lds	r22, 0x0100
    1ca6:	46 2f       	mov	r20, r22
    1ca8:	50 e0       	ldi	r21, 0x00	; 0
    1caa:	4f 5f       	subi	r20, 0xFF	; 255
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	42 17       	cp	r20, r18
    1cb0:	53 07       	cpc	r21, r19
    1cb2:	94 f4       	brge	.+36     	; 0x1cd8 <receive_tm_msg+0x46>
	{
		send_tm_transaction_response(req_by, 0xFF);		// Let the OBC know that the transaction failed.
    1cb4:	6f ef       	ldi	r22, 0xFF	; 255
    1cb6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <send_tm_transaction_response>
		tm_sequence_count = 0;
    1cba:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1cbe:	10 92 09 02 	sts	0x0209, r1
		receiving_tmf = 0;
    1cc2:	10 92 ef 02 	sts	0x02EF, r1
    1cc6:	e3 e1       	ldi	r30, 0x13	; 19
    1cc8:	f2 e0       	ldi	r31, 0x02	; 2
    1cca:	82 ea       	ldi	r24, 0xA2	; 162
    1ccc:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1cce:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1cd0:	e8 17       	cp	r30, r24
    1cd2:	f9 07       	cpc	r31, r25
    1cd4:	e1 f7       	brne	.-8      	; 0x1cce <receive_tm_msg+0x3c>
    1cd6:	08 95       	ret
		new_tm_msgf = 0;
		receiving_tmf = 0;
		clear_current_tm();
		return;
	}
	if(current_tm_fullf)
    1cd8:	70 91 cc 02 	lds	r23, 0x02CC
    1cdc:	77 23       	and	r23, r23
    1cde:	51 f0       	breq	.+20     	; 0x1cf4 <receive_tm_msg+0x62>
	{
		send_tm_transaction_response(req_by, 0xFF);
    1ce0:	6f ef       	ldi	r22, 0xFF	; 255
    1ce2:	0e 94 67 0b 	call	0x16ce	; 0x16ce <send_tm_transaction_response>
		tm_sequence_count = 0;
    1ce6:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1cea:	10 92 09 02 	sts	0x0209, r1
		receiving_tmf = 0;
    1cee:	10 92 ef 02 	sts	0x02EF, r1
		return;
    1cf2:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
    1cf4:	91 11       	cpse	r25, r1
    1cf6:	03 c0       	rjmp	.+6      	; 0x1cfe <receive_tm_msg+0x6c>
    1cf8:	66 23       	and	r22, r22
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <receive_tm_msg+0x6c>
    1cfc:	47 c0       	rjmp	.+142    	; 0x1d8c <receive_tm_msg+0xfa>
    1cfe:	24 17       	cp	r18, r20
    1d00:	35 07       	cpc	r19, r21
    1d02:	91 f5       	brne	.+100    	; 0x1d68 <receive_tm_msg+0xd6>
	{
		tm_sequence_count = obc_seq_count;
    1d04:	90 93 00 01 	sts	0x0100, r25
		receiving_tmf = 1;
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	40 93 ef 02 	sts	0x02EF, r20
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1d0e:	f9 01       	movw	r30, r18
    1d10:	ee 0f       	add	r30, r30
    1d12:	ff 1f       	adc	r31, r31
    1d14:	ee 0f       	add	r30, r30
    1d16:	ff 1f       	adc	r31, r31
    1d18:	ed 5e       	subi	r30, 0xED	; 237
    1d1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d1c:	20 91 d0 02 	lds	r18, 0x02D0
    1d20:	20 83       	st	Z, r18
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1d22:	20 91 d1 02 	lds	r18, 0x02D1
    1d26:	21 83       	std	Z+1, r18	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1d28:	20 91 d2 02 	lds	r18, 0x02D2
    1d2c:	22 83       	std	Z+2, r18	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1d2e:	20 91 d3 02 	lds	r18, 0x02D3
    1d32:	23 83       	std	Z+3, r18	; 0x03
		if(obc_seq_count == 35)
    1d34:	93 32       	cpi	r25, 0x23	; 35
    1d36:	a9 f4       	brne	.+42     	; 0x1d62 <receive_tm_msg+0xd0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
    1d38:	10 92 00 01 	sts	0x0100, r1
			receiving_tmf = 0;
    1d3c:	10 92 ef 02 	sts	0x02EF, r1
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
    1d40:	91 e0       	ldi	r25, 0x01	; 1
    1d42:	90 93 cc 02 	sts	0x02CC, r25
    1d46:	e3 e1       	ldi	r30, 0x13	; 19
    1d48:	f2 e0       	ldi	r31, 0x02	; 2
    1d4a:	af e0       	ldi	r26, 0x0F	; 15
    1d4c:	b1 e0       	ldi	r27, 0x01	; 1
    1d4e:	22 ea       	ldi	r18, 0xA2	; 162
    1d50:	32 e0       	ldi	r19, 0x02	; 2
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
	{
		tm_to_downlink[i] = current_tm[i];
    1d52:	91 91       	ld	r25, Z+
    1d54:	9d 93       	st	X+, r25

// This function is necessary so that we can simply trash current_tm if a new transaction fails.
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
    1d56:	e2 17       	cp	r30, r18
    1d58:	f3 07       	cpc	r31, r19
    1d5a:	d9 f7       	brne	.-10     	; 0x1d52 <receive_tm_msg+0xc0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
			receiving_tmf = 0;
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
			store_current_tm();										// Put current_tm[] into tm_to_downlink[]
			send_tm_transaction_response(req_by, obc_seq_count);	// Let the OBC know that the transaction succeeded.
    1d5c:	63 e2       	ldi	r22, 0x23	; 35
    1d5e:	0e 94 67 0b 	call	0x16ce	; 0x16ce <send_tm_transaction_response>
		}
		new_tm_msgf = 0;
    1d62:	10 92 09 02 	sts	0x0209, r1
		return;
    1d66:	08 95       	ret
	}
	else
	{
		send_tm_transaction_response(req_by, 0xFF);
    1d68:	6f ef       	ldi	r22, 0xFF	; 255
    1d6a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <send_tm_transaction_response>
		tm_sequence_count = 0;
    1d6e:	10 92 00 01 	sts	0x0100, r1
		receiving_tmf = 0;
    1d72:	10 92 ef 02 	sts	0x02EF, r1
		new_tm_msgf = 0;
    1d76:	10 92 09 02 	sts	0x0209, r1
    1d7a:	e3 e1       	ldi	r30, 0x13	; 19
    1d7c:	f2 e0       	ldi	r31, 0x02	; 2
    1d7e:	82 ea       	ldi	r24, 0xA2	; 162
    1d80:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1d82:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1d84:	e8 17       	cp	r30, r24
    1d86:	f9 07       	cpc	r31, r25
    1d88:	e1 f7       	brne	.-8      	; 0x1d82 <receive_tm_msg+0xf0>
    1d8a:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
	{
		tm_sequence_count = obc_seq_count;
		receiving_tmf = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	80 93 ef 02 	sts	0x02EF, r24
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1d92:	f9 01       	movw	r30, r18
    1d94:	ee 0f       	add	r30, r30
    1d96:	ff 1f       	adc	r31, r31
    1d98:	ee 0f       	add	r30, r30
    1d9a:	ff 1f       	adc	r31, r31
    1d9c:	ed 5e       	subi	r30, 0xED	; 237
    1d9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1da0:	80 91 d0 02 	lds	r24, 0x02D0
    1da4:	80 83       	st	Z, r24
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1da6:	80 91 d1 02 	lds	r24, 0x02D1
    1daa:	81 83       	std	Z+1, r24	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1dac:	80 91 d2 02 	lds	r24, 0x02D2
    1db0:	82 83       	std	Z+2, r24	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1db2:	80 91 d3 02 	lds	r24, 0x02D3
    1db6:	83 83       	std	Z+3, r24	; 0x03
    1db8:	d4 cf       	rjmp	.-88     	; 0x1d62 <receive_tm_msg+0xd0>

00001dba <alert_obc_tcp_ready>:


// Lets the OBC know that we have a TC packet ready.
void alert_obc_tcp_ready(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1dba:	8a e1       	ldi	r24, 0x1A	; 26
    1dbc:	80 93 bc 01 	sts	0x01BC, r24
	send_arr[6] = MT_COM;
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	80 93 bb 01 	sts	0x01BB, r24
	send_arr[5] = TC_PACKET_READY;
    1dc6:	81 e1       	ldi	r24, 0x11	; 17
    1dc8:	80 93 ba 01 	sts	0x01BA, r24
	send_arr[4] = CURRENT_MINUTE;
    1dcc:	80 91 03 02 	lds	r24, 0x0203
    1dd0:	80 93 b9 01 	sts	0x01B9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1dd4:	61 e1       	ldi	r22, 0x11	; 17
    1dd6:	85 eb       	ldi	r24, 0xB5	; 181
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
    1dde:	08 95       	ret

00001de0 <send_pus_packet_tc>:
	}
	return;
}

void send_pus_packet_tc(void)
{
    1de0:	2f 92       	push	r2
    1de2:	3f 92       	push	r3
    1de4:	4f 92       	push	r4
    1de6:	5f 92       	push	r5
    1de8:	6f 92       	push	r6
    1dea:	7f 92       	push	r7
    1dec:	8f 92       	push	r8
    1dee:	9f 92       	push	r9
    1df0:	af 92       	push	r10
    1df2:	bf 92       	push	r11
    1df4:	cf 92       	push	r12
    1df6:	df 92       	push	r13
    1df8:	ef 92       	push	r14
    1dfa:	ff 92       	push	r15
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
	uint8_t i, timeout = 250;
	uint8_t num_transfers = PACKET_LENGTH / 4;
	
	tc_transfer_completef = 0;
    1e04:	10 92 e5 01 	sts	0x01E5, r1
	start_tc_transferf = 0;
    1e08:	10 92 e4 01 	sts	0x01E4, r1
	alert_obc_tcp_ready();
    1e0c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <alert_obc_tcp_ready>
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1e10:	80 91 e4 01 	lds	r24, 0x01E4
    1e14:	81 11       	cpse	r24, r1
    1e16:	0d c0       	rjmp	.+26     	; 0x1e32 <send_pus_packet_tc+0x52>
    1e18:	ca ef       	ldi	r28, 0xFA	; 250
    1e1a:	03 c0       	rjmp	.+6      	; 0x1e22 <send_pus_packet_tc+0x42>
    1e1c:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <send_pus_packet_tc+0x42>
    1e20:	86 c0       	rjmp	.+268    	; 0x1f2e <send_pus_packet_tc+0x14e>
		{
			return;
		}
		delay_us(10);
    1e22:	8a e0       	ldi	r24, 0x0A	; 10
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 5e 11 	call	0x22bc	; 0x22bc <delay_us>
	uint8_t num_transfers = PACKET_LENGTH / 4;
	
	tc_transfer_completef = 0;
	start_tc_transferf = 0;
	alert_obc_tcp_ready();
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1e2a:	80 91 e4 01 	lds	r24, 0x01E4
    1e2e:	88 23       	and	r24, r24
    1e30:	a9 f3       	breq	.-22     	; 0x1e1c <send_pus_packet_tc+0x3c>
		{
			return;
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
    1e32:	10 92 e4 01 	sts	0x01E4, r1
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1e36:	80 91 e5 01 	lds	r24, 0x01E5
    1e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <send_pus_packet_tc+0x60>
    1e3e:	77 c0       	rjmp	.+238    	; 0x1f2e <send_pus_packet_tc+0x14e>
    1e40:	0f 2e       	mov	r0, r31
    1e42:	f8 e0       	ldi	r31, 0x08	; 8
    1e44:	4f 2e       	mov	r4, r31
    1e46:	f3 e0       	ldi	r31, 0x03	; 3
    1e48:	5f 2e       	mov	r5, r31
    1e4a:	f0 2d       	mov	r31, r0
		delay_us(10);
	}				
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
    1e4c:	31 2c       	mov	r3, r1
	{
		if(tc_transfer_completef == 0xFF)
			return;
		send_arr[0] = current_tc[(i * 4)];
    1e4e:	c5 eb       	ldi	r28, 0xB5	; 181
    1e50:	d1 e0       	ldi	r29, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1e52:	0f 2e       	mov	r0, r31
    1e54:	f6 eb       	ldi	r31, 0xB6	; 182
    1e56:	af 2e       	mov	r10, r31
    1e58:	f1 e0       	ldi	r31, 0x01	; 1
    1e5a:	bf 2e       	mov	r11, r31
    1e5c:	f0 2d       	mov	r31, r0
		send_arr[2] = current_tc[(i * 4) + 2];
    1e5e:	0f 2e       	mov	r0, r31
    1e60:	f7 eb       	ldi	r31, 0xB7	; 183
    1e62:	cf 2e       	mov	r12, r31
    1e64:	f1 e0       	ldi	r31, 0x01	; 1
    1e66:	df 2e       	mov	r13, r31
    1e68:	f0 2d       	mov	r31, r0
		send_arr[3] = current_tc[(i * 4) + 3];
    1e6a:	0f 2e       	mov	r0, r31
    1e6c:	f8 eb       	ldi	r31, 0xB8	; 184
    1e6e:	ef 2e       	mov	r14, r31
    1e70:	f1 e0       	ldi	r31, 0x01	; 1
    1e72:	ff 2e       	mov	r15, r31
    1e74:	f0 2d       	mov	r31, r0
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1e76:	0c eb       	ldi	r16, 0xBC	; 188
    1e78:	11 e0       	ldi	r17, 0x01	; 1
    1e7a:	0f 2e       	mov	r0, r31
    1e7c:	fa e1       	ldi	r31, 0x1A	; 26
    1e7e:	2f 2e       	mov	r2, r31
    1e80:	f0 2d       	mov	r31, r0
	send_arr[6] = MT_COM;
    1e82:	0f 2e       	mov	r0, r31
    1e84:	fb eb       	ldi	r31, 0xBB	; 187
    1e86:	8f 2e       	mov	r8, r31
    1e88:	f1 e0       	ldi	r31, 0x01	; 1
    1e8a:	9f 2e       	mov	r9, r31
    1e8c:	f0 2d       	mov	r31, r0
	send_arr[5] = SEND_TC;
    1e8e:	0f 2e       	mov	r0, r31
    1e90:	fa eb       	ldi	r31, 0xBA	; 186
    1e92:	6f 2e       	mov	r6, r31
    1e94:	f1 e0       	ldi	r31, 0x01	; 1
    1e96:	7f 2e       	mov	r7, r31
    1e98:	f0 2d       	mov	r31, r0
    1e9a:	08 c0       	rjmp	.+16     	; 0x1eac <send_pus_packet_tc+0xcc>
    1e9c:	84 e0       	ldi	r24, 0x04	; 4
    1e9e:	48 0e       	add	r4, r24
    1ea0:	51 1c       	adc	r5, r1
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1ea2:	80 91 e5 01 	lds	r24, 0x01E5
    1ea6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <send_pus_packet_tc+0xcc>
    1eaa:	41 c0       	rjmp	.+130    	; 0x1f2e <send_pus_packet_tc+0x14e>
    1eac:	f2 01       	movw	r30, r4
    1eae:	33 97       	sbiw	r30, 0x03	; 3
			return;
		send_arr[0] = current_tc[(i * 4)];
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 83       	st	Y, r24
    1eb4:	31 96       	adiw	r30, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1eb6:	80 81       	ld	r24, Z
    1eb8:	f5 01       	movw	r30, r10
    1eba:	80 83       	st	Z, r24
    1ebc:	f2 01       	movw	r30, r4
    1ebe:	31 97       	sbiw	r30, 0x01	; 1
		send_arr[2] = current_tc[(i * 4) + 2];
    1ec0:	80 81       	ld	r24, Z
    1ec2:	f6 01       	movw	r30, r12
    1ec4:	80 83       	st	Z, r24
		send_arr[3] = current_tc[(i * 4) + 3];
    1ec6:	f2 01       	movw	r30, r4
    1ec8:	80 81       	ld	r24, Z
    1eca:	f7 01       	movw	r30, r14
    1ecc:	80 83       	st	Z, r24
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1ece:	f8 01       	movw	r30, r16
    1ed0:	20 82       	st	Z, r2
	send_arr[6] = MT_COM;
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	f4 01       	movw	r30, r8
    1ed6:	80 83       	st	Z, r24
	send_arr[5] = SEND_TC;
    1ed8:	8e e0       	ldi	r24, 0x0E	; 14
    1eda:	f3 01       	movw	r30, r6
    1edc:	80 83       	st	Z, r24
	send_arr[4] = packet_count;
    1ede:	e9 eb       	ldi	r30, 0xB9	; 185
    1ee0:	f1 e0       	ldi	r31, 0x01	; 1
    1ee2:	30 82       	st	Z, r3
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1ee4:	61 e1       	ldi	r22, 0x11	; 17
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	0e 94 7b 00 	call	0xf6	; 0xf6 <can_send_message>
		send_arr[0] = current_tc[(i * 4)];
		send_arr[1] = current_tc[(i * 4) + 1];
		send_arr[2] = current_tc[(i * 4) + 2];
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <delay_ms>
		delay_us(10);
	}				
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
    1ef4:	33 94       	inc	r3
    1ef6:	f3 e2       	ldi	r31, 0x23	; 35
    1ef8:	3f 12       	cpse	r3, r31
    1efa:	d0 cf       	rjmp	.-96     	; 0x1e9c <send_pus_packet_tc+0xbc>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1efc:	80 91 e5 01 	lds	r24, 0x01E5
    1f00:	81 11       	cpse	r24, r1
    1f02:	0c c0       	rjmp	.+24     	; 0x1f1c <send_pus_packet_tc+0x13c>
    1f04:	c4 e6       	ldi	r28, 0x64	; 100
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <send_pus_packet_tc+0x12c>
    1f08:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1f0a:	89 f0       	breq	.+34     	; 0x1f2e <send_pus_packet_tc+0x14e>
		{
			return;
		}
		delay_us(100);
    1f0c:	84 e6       	ldi	r24, 0x64	; 100
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 5e 11 	call	0x22bc	; 0x22bc <delay_us>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1f14:	80 91 e5 01 	lds	r24, 0x01E5
    1f18:	88 23       	and	r24, r24
    1f1a:	b1 f3       	breq	.-20     	; 0x1f08 <send_pus_packet_tc+0x128>
			return;
		}
		delay_us(100);
	}
	
	if(tc_transfer_completef != 35)
    1f1c:	83 32       	cpi	r24, 0x23	; 35
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <send_pus_packet_tc+0x146>
	{
		tc_transfer_completef = 0;
    1f20:	10 92 e5 01 	sts	0x01E5, r1
		return;
    1f24:	04 c0       	rjmp	.+8      	; 0x1f2e <send_pus_packet_tc+0x14e>
	}
	else
	{
		tc_transfer_completef = 0;
    1f26:	10 92 e5 01 	sts	0x01E5, r1
		tc_packet_readyf = 0;
    1f2a:	10 92 cb 02 	sts	0x02CB, r1
		return;
	}
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	df 90       	pop	r13
    1f3c:	cf 90       	pop	r12
    1f3e:	bf 90       	pop	r11
    1f40:	af 90       	pop	r10
    1f42:	9f 90       	pop	r9
    1f44:	8f 90       	pop	r8
    1f46:	7f 90       	pop	r7
    1f48:	6f 90       	pop	r6
    1f4a:	5f 90       	pop	r5
    1f4c:	4f 90       	pop	r4
    1f4e:	3f 90       	pop	r3
    1f50:	2f 90       	pop	r2
    1f52:	08 95       	ret

00001f54 <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now)
    1f54:	80 91 07 02 	lds	r24, 0x0207
    1f58:	81 11       	cpse	r24, r1
		send_response();
    1f5a:	0e 94 82 0b 	call	0x1704	; 0x1704 <send_response>
	if (send_hk)
    1f5e:	80 91 ab 02 	lds	r24, 0x02AB
    1f62:	81 11       	cpse	r24, r1
		send_housekeeping();
    1f64:	0e 94 97 0b 	call	0x172e	; 0x172e <send_housekeeping>
	if (send_data)
    1f68:	80 91 cd 02 	lds	r24, 0x02CD
    1f6c:	81 11       	cpse	r24, r1
		send_sensor_data();
    1f6e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <send_sensor_data>
	if (msg_received)
    1f72:	80 91 0e 01 	lds	r24, 0x010E
    1f76:	81 11       	cpse	r24, r1
		send_coms_packet();
    1f78:	0e 94 02 0c 	call	0x1804	; 0x1804 <send_coms_packet>
	if (read_response)
    1f7c:	80 91 12 02 	lds	r24, 0x0212
    1f80:	81 11       	cpse	r24, r1
		send_read_response();
    1f82:	0e 94 1a 0c 	call	0x1834	; 0x1834 <send_read_response>
	if (write_response)
    1f86:	80 91 d8 01 	lds	r24, 0x01D8
    1f8a:	81 11       	cpse	r24, r1
		send_write_response();
    1f8c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <send_write_response>
	if (set_sens_h)
    1f90:	80 91 ca 02 	lds	r24, 0x02CA
    1f94:	81 11       	cpse	r24, r1
		set_sensor_high();
    1f96:	0e 94 5f 0c 	call	0x18be	; 0x18be <set_sensor_high>
	if (set_sens_l)
    1f9a:	80 91 cf 02 	lds	r24, 0x02CF
    1f9e:	81 11       	cpse	r24, r1
		set_sensor_low();
    1fa0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <set_sensor_low>
	if (set_varf)
    1fa4:	80 91 ce 02 	lds	r24, 0x02CE
    1fa8:	81 11       	cpse	r24, r1
		set_var();
    1faa:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <set_var>
	if (new_tm_msgf)
    1fae:	80 91 09 02 	lds	r24, 0x0209
    1fb2:	81 11       	cpse	r24, r1
		receive_tm_msg();
    1fb4:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <receive_tm_msg>
	if (tc_packet_readyf)
    1fb8:	80 91 cb 02 	lds	r24, 0x02CB
    1fbc:	81 11       	cpse	r24, r1
		send_pus_packet_tc();
    1fbe:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <send_pus_packet_tc>
    1fc2:	08 95       	ret

00001fc4 <main>:
	uint8_t high = 0, low = 0;
	
	uint8_t msg = 0x66;
	
	uint8_t* adc_result;
	*adc_result = 0;
    1fc4:	10 92 00 00 	sts	0x0000, r1
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    1fc8:	e1 e6       	ldi	r30, 0x61	; 97
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 e8       	ldi	r24, 0x80	; 128
    1fce:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1fd0:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1fd2:	8e ef       	ldi	r24, 0xFE	; 254
    1fd4:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    1fd6:	81 e1       	ldi	r24, 0x11	; 17
    1fd8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    1fda:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    1fdc:	89 e0       	ldi	r24, 0x09	; 9
    1fde:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    1fe0:	c1 e0       	ldi	r28, 0x01	; 1
    1fe2:	cb b9       	out	0x0b, r28	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    1fe4:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    1fe6:	1e b8       	out	0x0e, r1	; 14
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    1fe8:	0e 94 56 11 	call	0x22ac	; 0x22ac <timer_init>

	adc_initialize();
    1fec:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_initialize>
	can_init(0);
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	0e 94 46 04 	call	0x88c	; 0x88c <can_init>
	can_init_mobs();
    1ff6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <can_init_mobs>
	spi_initialize_master();
    1ffa:	0e 94 20 11 	call	0x2240	; 0x2240 <spi_initialize_master>

	// Enable the timer for mppt
	if(SELF_ID == 1)
	{
		PIN_set(LED1);
    1ffe:	8d e1       	ldi	r24, 0x1D	; 29
    2000:	0e 94 a0 10 	call	0x2140	; 0x2140 <PIN_set>
		mppt_timer_init();
    2004:	0e 94 94 10 	call	0x2128	; 0x2128 <mppt_timer_init>
		mpptx = 0x3F;
    2008:	8f e3       	ldi	r24, 0x3F	; 63
    200a:	80 93 08 02 	sts	0x0208, r24
		mppty = 0x1F;
    200e:	8f e1       	ldi	r24, 0x1F	; 31
    2010:	80 93 00 02 	sts	0x0200, r24
		balance_l = 1;
    2014:	c0 93 e3 01 	sts	0x01E3, r28
		balance_h = 1;
    2018:	c0 93 cb 01 	sts	0x01CB, r28
		pxv = 0xBF;
    201c:	8f eb       	ldi	r24, 0xBF	; 191
    201e:	80 93 d8 02 	sts	0x02D8, r24
		pxi	= 0x0F;
    2022:	8f e0       	ldi	r24, 0x0F	; 15
    2024:	80 93 d9 02 	sts	0x02D9, r24
		pyv = 0x5F;
    2028:	8f e5       	ldi	r24, 0x5F	; 95
    202a:	80 93 06 02 	sts	0x0206, r24
		pyi = 0x2F;
    202e:	8f e2       	ldi	r24, 0x2F	; 47
    2030:	80 93 09 01 	sts	0x0109, r24
	}
	
	// Enable global interrupts for Timer execution
	sei();
    2034:	78 94       	sei
	{
		transceiver_initialize();
		coms_timer_init();
	}

	SS1_set_high();		// SPI Temp Sensor.
    2036:	0e 94 26 11 	call	0x224c	; 0x224c <SS1_set_high>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    203a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <can_check_general>
			//run_mppt();
			//run_battBalance();
		}
		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    203e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <run_commands>
    2042:	fb cf       	rjmp	.-10     	; 0x203a <main+0x76>

00002044 <__vector_15>:


//Section to deal with timer interrupts
#if (SELF_ID == 1)
//When the A compare register is reached, turn on the MPPTX signal
ISR(TIMER0_COMPA_vect) {
    2044:	1f 92       	push	r1
    2046:	0f 92       	push	r0
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	0f 92       	push	r0
    204c:	11 24       	eor	r1, r1
    204e:	2f 93       	push	r18
    2050:	3f 93       	push	r19
    2052:	4f 93       	push	r20
    2054:	5f 93       	push	r21
    2056:	6f 93       	push	r22
    2058:	7f 93       	push	r23
    205a:	8f 93       	push	r24
    205c:	9f 93       	push	r25
    205e:	af 93       	push	r26
    2060:	bf 93       	push	r27
    2062:	ef 93       	push	r30
    2064:	ff 93       	push	r31
	PIN_clr(LED2);
    2066:	8b e1       	ldi	r24, 0x1B	; 27
    2068:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <PIN_clr>
}
    206c:	ff 91       	pop	r31
    206e:	ef 91       	pop	r30
    2070:	bf 91       	pop	r27
    2072:	af 91       	pop	r26
    2074:	9f 91       	pop	r25
    2076:	8f 91       	pop	r24
    2078:	7f 91       	pop	r23
    207a:	6f 91       	pop	r22
    207c:	5f 91       	pop	r21
    207e:	4f 91       	pop	r20
    2080:	3f 91       	pop	r19
    2082:	2f 91       	pop	r18
    2084:	0f 90       	pop	r0
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	0f 90       	pop	r0
    208a:	1f 90       	pop	r1
    208c:	18 95       	reti

0000208e <__vector_16>:

//When the B compare register is reached, turn on the MPPTY signal
ISR(TIMER0_COMPB_vect) {
    208e:	1f 92       	push	r1
    2090:	0f 92       	push	r0
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	0f 92       	push	r0
    2096:	11 24       	eor	r1, r1
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	4f 93       	push	r20
    209e:	5f 93       	push	r21
    20a0:	6f 93       	push	r22
    20a2:	7f 93       	push	r23
    20a4:	8f 93       	push	r24
    20a6:	9f 93       	push	r25
    20a8:	af 93       	push	r26
    20aa:	bf 93       	push	r27
    20ac:	ef 93       	push	r30
    20ae:	ff 93       	push	r31
	PIN_clr(LED3);
    20b0:	8e e1       	ldi	r24, 0x1E	; 30
    20b2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <PIN_clr>
}
    20b6:	ff 91       	pop	r31
    20b8:	ef 91       	pop	r30
    20ba:	bf 91       	pop	r27
    20bc:	af 91       	pop	r26
    20be:	9f 91       	pop	r25
    20c0:	8f 91       	pop	r24
    20c2:	7f 91       	pop	r23
    20c4:	6f 91       	pop	r22
    20c6:	5f 91       	pop	r21
    20c8:	4f 91       	pop	r20
    20ca:	3f 91       	pop	r19
    20cc:	2f 91       	pop	r18
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0f 90       	pop	r0
    20d4:	1f 90       	pop	r1
    20d6:	18 95       	reti

000020d8 <__vector_17>:

//When the timer overflows, turn off both signals
ISR(TIMER0_OVF_vect) {
    20d8:	1f 92       	push	r1
    20da:	0f 92       	push	r0
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	0f 92       	push	r0
    20e0:	11 24       	eor	r1, r1
    20e2:	2f 93       	push	r18
    20e4:	3f 93       	push	r19
    20e6:	4f 93       	push	r20
    20e8:	5f 93       	push	r21
    20ea:	6f 93       	push	r22
    20ec:	7f 93       	push	r23
    20ee:	8f 93       	push	r24
    20f0:	9f 93       	push	r25
    20f2:	af 93       	push	r26
    20f4:	bf 93       	push	r27
    20f6:	ef 93       	push	r30
    20f8:	ff 93       	push	r31
	PIN_set(LED2);
    20fa:	8b e1       	ldi	r24, 0x1B	; 27
    20fc:	0e 94 a0 10 	call	0x2140	; 0x2140 <PIN_set>
	PIN_set(LED3);
    2100:	8e e1       	ldi	r24, 0x1E	; 30
    2102:	0e 94 a0 10 	call	0x2140	; 0x2140 <PIN_set>
}
    2106:	ff 91       	pop	r31
    2108:	ef 91       	pop	r30
    210a:	bf 91       	pop	r27
    210c:	af 91       	pop	r26
    210e:	9f 91       	pop	r25
    2110:	8f 91       	pop	r24
    2112:	7f 91       	pop	r23
    2114:	6f 91       	pop	r22
    2116:	5f 91       	pop	r21
    2118:	4f 91       	pop	r20
    211a:	3f 91       	pop	r19
    211c:	2f 91       	pop	r18
    211e:	0f 90       	pop	r0
    2120:	0f be       	out	0x3f, r0	; 63
    2122:	0f 90       	pop	r0
    2124:	1f 90       	pop	r1
    2126:	18 95       	reti

00002128 <mppt_timer_init>:

// This function initializes a 8-bit timer used for generating PWM for mppt.
// NOTE: I cannot run this after global interrupts have been turned on
void mppt_timer_init(void) {
	
	TCNT0 = 0x0000; //Clear timer
    2128:	16 bc       	out	0x26, r1	; 38
	//For now, hard code in the values that the "duty cycle" registers will be set to. This will be updated later by the algorithm
	OCR0A = 0x3F; // b00111111
    212a:	8f e3       	ldi	r24, 0x3F	; 63
    212c:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xBF; // b10111111
    212e:	8f eb       	ldi	r24, 0xBF	; 191
    2130:	88 bd       	out	0x28, r24	; 40
	
	TCCR0A = 0x00; // b00000000 Don't connect any pins, but set to normal mode as a test
    2132:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; // b00000101 Set clock pre-scaling to 1024 for now, will be 1 later for "fast" output
    2134:	85 e0       	ldi	r24, 0x05	; 5
    2136:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x07; // b00000111 Enable the A and B compare match interrupts. Also enable the timer overflow interrupt
    2138:	87 e0       	ldi	r24, 0x07	; 7
    213a:	80 93 6e 00 	sts	0x006E, r24
    213e:	08 95       	ret

00002140 <PIN_set>:
	return;
}

void PIN_set(uint8_t PIN)
{
	if(PIN == 13)
    2140:	8d 30       	cpi	r24, 0x0D	; 13
    2142:	11 f4       	brne	.+4      	; 0x2148 <PIN_set+0x8>
	{
		PORTD |= 0b00100000;
    2144:	5d 9a       	sbi	0x0b, 5	; 11
    2146:	08 c0       	rjmp	.+16     	; 0x2158 <PIN_set+0x18>
	}
	if(PIN == 14)
    2148:	8e 30       	cpi	r24, 0x0E	; 14
    214a:	11 f4       	brne	.+4      	; 0x2150 <PIN_set+0x10>
	{
		PORTD |= 0b01000000;
    214c:	5e 9a       	sbi	0x0b, 6	; 11
    214e:	08 c0       	rjmp	.+16     	; 0x2160 <PIN_set+0x20>
	}
	if(PIN == 15)
    2150:	8f 30       	cpi	r24, 0x0F	; 15
    2152:	11 f4       	brne	.+4      	; 0x2158 <PIN_set+0x18>
	{
		PORTD |= 0b10000000;
    2154:	5f 9a       	sbi	0x0b, 7	; 11
    2156:	08 c0       	rjmp	.+16     	; 0x2168 <PIN_set+0x28>
	}
	if(PIN == 16)
    2158:	80 31       	cpi	r24, 0x10	; 16
    215a:	11 f4       	brne	.+4      	; 0x2160 <PIN_set+0x20>
	{
		PORTB |= 0b00000100;
    215c:	2a 9a       	sbi	0x05, 2	; 5
    215e:	08 c0       	rjmp	.+16     	; 0x2170 <PIN_set+0x30>
	}
	if(PIN == 17)
    2160:	81 31       	cpi	r24, 0x11	; 17
    2162:	11 f4       	brne	.+4      	; 0x2168 <PIN_set+0x28>
	{
		PORTC |= 0b00010000;
    2164:	44 9a       	sbi	0x08, 4	; 8
    2166:	08 c0       	rjmp	.+16     	; 0x2178 <PIN_set+0x38>
	}
	if(PIN == 18)
    2168:	82 31       	cpi	r24, 0x12	; 18
    216a:	11 f4       	brne	.+4      	; 0x2170 <PIN_set+0x30>
	{
		PORTC |= 0b00100000;
    216c:	45 9a       	sbi	0x08, 5	; 8
    216e:	08 c0       	rjmp	.+16     	; 0x2180 <PIN_set+0x40>
	}
	if(PIN == 22)
    2170:	86 31       	cpi	r24, 0x16	; 22
    2172:	11 f4       	brne	.+4      	; 0x2178 <PIN_set+0x38>
	{
		PORTC |= 0b01000000;
    2174:	46 9a       	sbi	0x08, 6	; 8
    2176:	08 c0       	rjmp	.+16     	; 0x2188 <PIN_set+0x48>
	}
	if(PIN == 23)
    2178:	87 31       	cpi	r24, 0x17	; 23
    217a:	11 f4       	brne	.+4      	; 0x2180 <PIN_set+0x40>
	{
		PORTB |= 0b00001000;
    217c:	2b 9a       	sbi	0x05, 3	; 5
    217e:	08 c0       	rjmp	.+16     	; 0x2190 <PIN_set+0x50>
	}
	if(PIN == 24)
    2180:	88 31       	cpi	r24, 0x18	; 24
    2182:	11 f4       	brne	.+4      	; 0x2188 <PIN_set+0x48>
	{
		PORTB |= 0b00010000;
    2184:	2c 9a       	sbi	0x05, 4	; 5
    2186:	08 c0       	rjmp	.+16     	; 0x2198 <PIN_set+0x58>
	}
	if(PIN == 25)
    2188:	89 31       	cpi	r24, 0x19	; 25
    218a:	11 f4       	brne	.+4      	; 0x2190 <PIN_set+0x50>
	{
		PORTC |= 0b10000000;
    218c:	47 9a       	sbi	0x08, 7	; 8
    218e:	08 c0       	rjmp	.+16     	; 0x21a0 <PIN_set+0x60>
	}
	if(PIN == 26)
    2190:	8a 31       	cpi	r24, 0x1A	; 26
    2192:	11 f4       	brne	.+4      	; 0x2198 <PIN_set+0x58>
	{
		PORTB |= 0b00100000;
    2194:	2d 9a       	sbi	0x05, 5	; 5
    2196:	08 c0       	rjmp	.+16     	; 0x21a8 <PIN_set+0x68>
	}
	if(PIN == 27)
    2198:	8b 31       	cpi	r24, 0x1B	; 27
    219a:	11 f4       	brne	.+4      	; 0x21a0 <PIN_set+0x60>
	{
		PORTB |= 0b01000000;
    219c:	2e 9a       	sbi	0x05, 6	; 5
    219e:	08 c0       	rjmp	.+16     	; 0x21b0 <PIN_set+0x70>
	}
	if(PIN == 28)
    21a0:	8c 31       	cpi	r24, 0x1C	; 28
    21a2:	11 f4       	brne	.+4      	; 0x21a8 <PIN_set+0x68>
	{
		PORTB |= 0b10000000;
    21a4:	2f 9a       	sbi	0x05, 7	; 5
    21a6:	08 c0       	rjmp	.+16     	; 0x21b8 <PIN_set+0x78>
	}
	if(PIN == 29)
    21a8:	8d 31       	cpi	r24, 0x1D	; 29
    21aa:	11 f4       	brne	.+4      	; 0x21b0 <PIN_set+0x70>
	{
		PORTD |= 0b00000001;
    21ac:	58 9a       	sbi	0x0b, 0	; 11
    21ae:	08 95       	ret
	}
	if(PIN == 30)
    21b0:	8e 31       	cpi	r24, 0x1E	; 30
    21b2:	11 f4       	brne	.+4      	; 0x21b8 <PIN_set+0x78>
	{
		PORTC |= 0b00000001;
    21b4:	40 9a       	sbi	0x08, 0	; 8
    21b6:	08 95       	ret
	}
	if(PIN == 32)
    21b8:	80 32       	cpi	r24, 0x20	; 32
    21ba:	09 f4       	brne	.+2      	; 0x21be <PIN_set+0x7e>
	{
		PORTD |= 0b00000010;
    21bc:	59 9a       	sbi	0x0b, 1	; 11
    21be:	08 95       	ret

000021c0 <PIN_clr>:
	return;
}

void PIN_clr(uint8_t PIN)
{
	if(PIN == 13)
    21c0:	8d 30       	cpi	r24, 0x0D	; 13
    21c2:	11 f4       	brne	.+4      	; 0x21c8 <PIN_clr+0x8>
	{
		PORTD &= ~(0b00100000);
    21c4:	5d 98       	cbi	0x0b, 5	; 11
    21c6:	08 c0       	rjmp	.+16     	; 0x21d8 <PIN_clr+0x18>
	}
	if(PIN == 14)
    21c8:	8e 30       	cpi	r24, 0x0E	; 14
    21ca:	11 f4       	brne	.+4      	; 0x21d0 <PIN_clr+0x10>
	{
		PORTD &= ~(0b01000000);
    21cc:	5e 98       	cbi	0x0b, 6	; 11
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <PIN_clr+0x20>
	}
	if(PIN == 15)
    21d0:	8f 30       	cpi	r24, 0x0F	; 15
    21d2:	11 f4       	brne	.+4      	; 0x21d8 <PIN_clr+0x18>
	{
		PORTD &= ~(0b10000000);
    21d4:	5f 98       	cbi	0x0b, 7	; 11
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <PIN_clr+0x28>
	}
	if(PIN == 16)
    21d8:	80 31       	cpi	r24, 0x10	; 16
    21da:	11 f4       	brne	.+4      	; 0x21e0 <PIN_clr+0x20>
	{
		PORTB &= ~(0b00000100);
    21dc:	2a 98       	cbi	0x05, 2	; 5
    21de:	08 c0       	rjmp	.+16     	; 0x21f0 <PIN_clr+0x30>
	}
	if(PIN == 17)
    21e0:	81 31       	cpi	r24, 0x11	; 17
    21e2:	11 f4       	brne	.+4      	; 0x21e8 <PIN_clr+0x28>
	{
		PORTC &= ~(0b00010000);
    21e4:	44 98       	cbi	0x08, 4	; 8
    21e6:	08 c0       	rjmp	.+16     	; 0x21f8 <PIN_clr+0x38>
	}
	if(PIN == 18)
    21e8:	82 31       	cpi	r24, 0x12	; 18
    21ea:	11 f4       	brne	.+4      	; 0x21f0 <PIN_clr+0x30>
	{
		PORTC &= ~(0b00100000);
    21ec:	45 98       	cbi	0x08, 5	; 8
    21ee:	08 c0       	rjmp	.+16     	; 0x2200 <PIN_clr+0x40>
	}
	if(PIN == 22)
    21f0:	86 31       	cpi	r24, 0x16	; 22
    21f2:	11 f4       	brne	.+4      	; 0x21f8 <PIN_clr+0x38>
	{
		PORTC &= ~(0b01000000);
    21f4:	46 98       	cbi	0x08, 6	; 8
    21f6:	08 c0       	rjmp	.+16     	; 0x2208 <PIN_clr+0x48>
	}
	if(PIN == 23)
    21f8:	87 31       	cpi	r24, 0x17	; 23
    21fa:	11 f4       	brne	.+4      	; 0x2200 <PIN_clr+0x40>
	{
		PORTB &= ~(0b00001000);
    21fc:	2b 98       	cbi	0x05, 3	; 5
    21fe:	08 c0       	rjmp	.+16     	; 0x2210 <PIN_clr+0x50>
	}
	if(PIN == 24)
    2200:	88 31       	cpi	r24, 0x18	; 24
    2202:	11 f4       	brne	.+4      	; 0x2208 <PIN_clr+0x48>
	{
		PORTB &= ~(0b00010000);
    2204:	2c 98       	cbi	0x05, 4	; 5
    2206:	08 c0       	rjmp	.+16     	; 0x2218 <PIN_clr+0x58>
	}
	if(PIN == 25)
    2208:	89 31       	cpi	r24, 0x19	; 25
    220a:	11 f4       	brne	.+4      	; 0x2210 <PIN_clr+0x50>
	{
		PORTC &= ~(0b10000000);
    220c:	47 98       	cbi	0x08, 7	; 8
    220e:	08 c0       	rjmp	.+16     	; 0x2220 <PIN_clr+0x60>
	}
	if(PIN == 26)
    2210:	8a 31       	cpi	r24, 0x1A	; 26
    2212:	11 f4       	brne	.+4      	; 0x2218 <PIN_clr+0x58>
	{
		PORTB &= ~(0b00100000);
    2214:	2d 98       	cbi	0x05, 5	; 5
    2216:	08 c0       	rjmp	.+16     	; 0x2228 <PIN_clr+0x68>
	}
	if(PIN == 27)
    2218:	8b 31       	cpi	r24, 0x1B	; 27
    221a:	11 f4       	brne	.+4      	; 0x2220 <PIN_clr+0x60>
	{
		PORTB &= ~(0b01000000);
    221c:	2e 98       	cbi	0x05, 6	; 5
    221e:	08 c0       	rjmp	.+16     	; 0x2230 <PIN_clr+0x70>
	}
	if(PIN == 28)
    2220:	8c 31       	cpi	r24, 0x1C	; 28
    2222:	11 f4       	brne	.+4      	; 0x2228 <PIN_clr+0x68>
	{
		PORTB &= ~(0b10000000);
    2224:	2f 98       	cbi	0x05, 7	; 5
    2226:	08 c0       	rjmp	.+16     	; 0x2238 <PIN_clr+0x78>
	}
	if(PIN == 29)
    2228:	8d 31       	cpi	r24, 0x1D	; 29
    222a:	11 f4       	brne	.+4      	; 0x2230 <PIN_clr+0x70>
	{
		PORTD &= ~(0b00000001);
    222c:	58 98       	cbi	0x0b, 0	; 11
    222e:	08 95       	ret
	}
	if(PIN == 30)
    2230:	8e 31       	cpi	r24, 0x1E	; 30
    2232:	11 f4       	brne	.+4      	; 0x2238 <PIN_clr+0x78>
	{
		PORTC &= ~(0b00000001);
    2234:	40 98       	cbi	0x08, 0	; 8
    2236:	08 95       	ret
	}
	if(PIN == 32)
    2238:	80 32       	cpi	r24, 0x20	; 32
    223a:	09 f4       	brne	.+2      	; 0x223e <PIN_clr+0x7e>
	{
		PORTD &= ~(0b00000010);
    223c:	59 98       	cbi	0x0b, 1	; 11
    223e:	08 95       	ret

00002240 <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    2240:	85 b7       	in	r24, 0x35	; 53
    2242:	8f 77       	andi	r24, 0x7F	; 127
    2244:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    2246:	83 e5       	ldi	r24, 0x53	; 83
    2248:	8c bd       	out	0x2c, r24	; 44
    224a:	08 95       	ret

0000224c <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    224c:	44 9a       	sbi	0x08, 4	; 8
    224e:	08 95       	ret

00002250 <SS1_set_low>:
	delay_us(1);
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    2250:	44 98       	cbi	0x08, 4	; 8
    2252:	08 95       	ret

00002254 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	8c 01       	movw	r16, r24
    225e:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    2260:	0e 94 28 11 	call	0x2250	; 0x2250 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    2264:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    2266:	80 e8       	ldi	r24, 0x80	; 128
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <delay_ms>
	*high = *reg_ptr;
    226e:	8e b5       	in	r24, 0x2e	; 46
    2270:	f8 01       	movw	r30, r16
    2272:	80 83       	st	Z, r24
	delay_ms(128);
    2274:	80 e8       	ldi	r24, 0x80	; 128
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0e 94 70 11 	call	0x22e0	; 0x22e0 <delay_ms>
	*low = *reg_ptr;	
    227c:	8e b5       	in	r24, 0x2e	; 46
    227e:	88 83       	st	Y, r24
	SS1_set_high();
    2280:	0e 94 26 11 	call	0x224c	; 0x224c <SS1_set_high>
	
	return;
}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	08 95       	ret

0000228e <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    228e:	1f 92       	push	r1
    2290:	0f 92       	push	r0
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	0f 92       	push	r0
    2296:	11 24       	eor	r1, r1
    2298:	8f 93       	push	r24
	CTC_flag = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 9f 03 	sts	0x039F, r24
}
    22a0:	8f 91       	pop	r24
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	0f 90       	pop	r0
    22a8:	1f 90       	pop	r1
    22aa:	18 95       	reti

000022ac <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    22ac:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    22b0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    22b4:	8a e0       	ldi	r24, 0x0A	; 10
    22b6:	80 93 81 00 	sts	0x0081, r24
    22ba:	08 95       	ret

000022bc <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    22bc:	10 92 9f 03 	sts	0x039F, r1
	TCNT1 = 0x0000; //Clear timer
    22c0:	10 92 85 00 	sts	0x0085, r1
    22c4:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    22c8:	90 93 89 00 	sts	0x0089, r25
    22cc:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    22d6:	80 91 9f 03 	lds	r24, 0x039F
    22da:	88 23       	and	r24, r24
    22dc:	e1 f3       	breq	.-8      	; 0x22d6 <delay_us+0x1a>
}
    22de:	08 95       	ret

000022e0 <delay_ms>:

void delay_ms(uint16_t ms) {
    22e0:	0f 93       	push	r16
    22e2:	1f 93       	push	r17
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	51 f0       	breq	.+20     	; 0x2302 <delay_ms+0x22>
    22ee:	c0 e0       	ldi	r28, 0x00	; 0
    22f0:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    22f2:	88 ee       	ldi	r24, 0xE8	; 232
    22f4:	93 e0       	ldi	r25, 0x03	; 3
    22f6:	0e 94 5e 11 	call	0x22bc	; 0x22bc <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    22fa:	21 96       	adiw	r28, 0x01	; 1
    22fc:	c0 17       	cp	r28, r16
    22fe:	d1 07       	cpc	r29, r17
    2300:	c1 f7       	brne	.-16     	; 0x22f2 <delay_ms+0x12>
		delay_us(1000);
	}
}
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	08 95       	ret

0000230c <__tablejump2__>:
    230c:	ee 0f       	add	r30, r30
    230e:	ff 1f       	adc	r31, r31

00002310 <__tablejump__>:
    2310:	05 90       	lpm	r0, Z+
    2312:	f4 91       	lpm	r31, Z
    2314:	e0 2d       	mov	r30, r0
    2316:	09 94       	ijmp

00002318 <_exit>:
    2318:	f8 94       	cli

0000231a <__stop_program>:
    231a:	ff cf       	rjmp	.-2      	; 0x231a <__stop_program>
