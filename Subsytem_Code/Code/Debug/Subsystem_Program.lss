
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001294  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000052  00800100  00800100  00001308  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001b0  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000192e  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ac5  00000000  00000000  00002e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c44  00000000  00000000  000038db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000340  00000000  00000000  00004520  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005ee  00000000  00000000  00004860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000012cc  00000000  00000000  00004e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000178  00000000  00000000  0000611a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	3b 01       	movw	r6, r22
      7e:	cd 01       	movw	r24, r26
      80:	57 02       	muls	r21, r23
      82:	cb 02       	muls	r28, r27
      84:	0b 03       	fmul	r16, r19
      86:	87 03       	fmuls	r16, r23
      88:	04 04       	cpc	r0, r4
      8a:	a1 04       	cpc	r10, r1
      8c:	47 05       	cpc	r20, r7
      8e:	35 01       	movw	r6, r10
      90:	50 06       	cpc	r5, r16

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 35       	cpi	r26, 0x52	; 82
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 2c 08 	call	0x1058	; 0x1058 <main>
      b2:	0c 94 48 09 	jmp	0x1290	; 0x1290 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      ce:	e8 e7       	ldi	r30, 0x78	; 120
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	20 81       	ld	r18, Z
      d4:	dc 01       	movw	r26, r24
      d6:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
      d8:	21 81       	ldd	r18, Z+1	; 0x01
      da:	11 96       	adiw	r26, 0x01	; 1
      dc:	2c 93       	st	X, r18
      de:	08 95       	ret

000000e0 <can_send_message>:
				LED_toggle(LED3);
				delay_ms(100);
				send_now = 1;
			}
			
			if ((receive_arr[0] == 0x55) && (receive_arr[1] == 0x55) && (receive_arr[2] == 0x55) && (receive_arr[3] == 0x55)
      e0:	28 e1       	ldi	r18, 0x18	; 24
      e2:	31 e0       	ldi	r19, 0x01	; 1
      e4:	30 93 28 01 	sts	0x0128, r19
      e8:	20 93 27 01 	sts	0x0127, r18
      ec:	10 92 2b 01 	sts	0x012B, r1
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	70 93 23 01 	sts	0x0123, r23
      f6:	60 93 22 01 	sts	0x0122, r22
      fa:	22 e0       	ldi	r18, 0x02	; 2
			&& (receive_arr[4] == 0x55) && (receive_arr[5] == 0x55) && (receive_arr[6] == 0x55) && (receive_arr[7] == 0x55))
      fc:	20 93 21 01 	sts	0x0121, r18
     100:	28 e0       	ldi	r18, 0x08	; 8
     102:	20 93 26 01 	sts	0x0126, r18
     106:	24 e0       	ldi	r18, 0x04	; 4
     108:	20 93 4f 01 	sts	0x014F, r18
     10c:	dc 01       	movw	r26, r24
     10e:	e8 e1       	ldi	r30, 0x18	; 24
     110:	f1 e0       	ldi	r31, 0x01	; 1
     112:	80 e2       	ldi	r24, 0x20	; 32
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	2d 91       	ld	r18, X+
     118:	21 93       	st	Z+, r18
     11a:	e8 17       	cp	r30, r24
     11c:	f9 07       	cpc	r31, r25
			{
				LED_toggle(LED7);	//Toggle LED7 when the appropriate message is received.
     11e:	d9 f7       	brne	.-10     	; 0x116 <can_send_message+0x36>
     120:	60 91 4f 01 	lds	r22, 0x014F
				delay_ms(100);
     124:	80 e2       	ldi	r24, 0x20	; 32
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <can_cmd>
				LED_toggle(LED7);
     12c:	81 11       	cpse	r24, r1
     12e:	f8 cf       	rjmp	.-16     	; 0x120 <can_send_message+0x40>
     130:	60 91 4f 01 	lds	r22, 0x014F
				delay_ms(100);
     134:	80 e2       	ldi	r24, 0x20	; 32
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 1d 07 	call	0xe3a	; 0xe3a <can_get_status>
				send_data = 1;
     13c:	81 30       	cpi	r24, 0x01	; 1
     13e:	c1 f3       	breq	.-16     	; 0x130 <can_send_message+0x50>
     140:	08 95       	ret

00000142 <can_clear_all_mob>:

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
        {
            Can_reset();
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	ad ee       	ldi	r26, 0xED	; 237
     146:	b0 e0       	ldi	r27, 0x00	; 0
     148:	3e ee       	ldi	r19, 0xEE	; 238
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	98 2f       	mov	r25, r24
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     14e:	92 95       	swap	r25
     150:	90 7f       	andi	r25, 0xF0	; 240
     152:	9c 93       	st	X, r25
     154:	e3 2f       	mov	r30, r19
     156:	f2 2f       	mov	r31, r18
    {
        if (try_conf == 1)
        {
            Can_reset();
            conf_index++;
            ovrtim_flag=0;
     158:	11 92       	st	Z+, r1
                {
                    if (ovrtim_flag==0)
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
                        ovrtim_flag++;
     15a:	e8 3f       	cpi	r30, 0xF8	; 248
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     15c:	f1 05       	cpc	r31, r1

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
     15e:	e1 f7       	brne	.-8      	; 0x158 <can_clear_all_mob+0x16>
     160:	8f 5f       	subi	r24, 0xFF	; 255
     162:	86 30       	cpi	r24, 0x06	; 6
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
                else
                {
                    ntq = NTQ_MIN;
     164:	99 f7       	brne	.-26     	; 0x14c <can_clear_all_mob+0xa>
     166:	08 95       	ret

00000168 <can_get_mob_status>:
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
     168:	80 91 ef 00 	lds	r24, 0x00EF
     16c:	80 7c       	andi	r24, 0xC0	; 192
     16e:	61 f0       	breq	.+24     	; 0x188 <can_get_mob_status+0x20>
        {
            Can_reset();
     170:	80 91 ee 00 	lds	r24, 0x00EE
            conf_index++;
     174:	98 2f       	mov	r25, r24
     176:	90 7e       	andi	r25, 0xE0	; 224
     178:	28 2f       	mov	r18, r24
     17a:	20 76       	andi	r18, 0x60	; 96
     17c:	20 32       	cpi	r18, 0x20	; 32
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
     17e:	31 f0       	breq	.+12     	; 0x18c <can_get_mob_status+0x24>
     180:	90 34       	cpi	r25, 0x40	; 64
     182:	31 f0       	breq	.+12     	; 0x190 <can_get_mob_status+0x28>
     184:	8f 71       	andi	r24, 0x1F	; 31
     186:	08 95       	ret
     188:	8f ef       	ldi	r24, 0xFF	; 255
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
     18a:	08 95       	ret
     18c:	89 2f       	mov	r24, r25
     18e:	08 95       	ret
     190:	89 2f       	mov	r24, r25
     192:	08 95       	ret

00000194 <can_get_data>:
     194:	fc 01       	movw	r30, r24
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	aa ef       	ldi	r26, 0xFA	; 250
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	9c 91       	ld	r25, X
     19e:	91 93       	st	Z+, r25
     1a0:	8f 5f       	subi	r24, 0xFF	; 255
     1a2:	88 30       	cpi	r24, 0x08	; 8
     1a4:	d9 f7       	brne	.-10     	; 0x19c <can_get_data+0x8>
     1a6:	08 95       	ret

000001a8 <can_fixed_baudrate>:
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	80 93 d8 00 	sts	0x00D8, r24
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	80 93 e2 00 	sts	0x00E2, r24
     1b4:	8c e0       	ldi	r24, 0x0C	; 12
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     1b6:	80 93 e3 00 	sts	0x00E3, r24
     1ba:	87 e3       	ldi	r24, 0x37	; 55
     1bc:	80 93 e4 00 	sts	0x00E4, r24
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	08 95       	ret

000001c4 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     1c4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <can_fixed_baudrate>
     1c8:	88 23       	and	r24, r24
     1ca:	49 f0       	breq	.+18     	; 0x1de <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     1cc:	0e 94 a1 00 	call	0x142	; 0x142 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     1d0:	e8 ed       	ldi	r30, 0xD8	; 216
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	82 60       	ori	r24, 0x02	; 2
     1d8:	80 83       	st	Z, r24
    return (1);
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     1de:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     1e0:	08 95       	ret

000001e2 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	1f 92       	push	r1
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     1ee:	11 96       	adiw	r26, 0x01	; 1
     1f0:	8c 91       	ld	r24, X
     1f2:	11 97       	sbiw	r26, 0x01	; 1
     1f4:	8c 30       	cpi	r24, 0x0C	; 12
     1f6:	b1 f4       	brne	.+44     	; 0x224 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     1f8:	19 96       	adiw	r26, 0x09	; 9
     1fa:	8c 91       	ld	r24, X
     1fc:	19 97       	sbiw	r26, 0x09	; 9
     1fe:	80 36       	cpi	r24, 0x60	; 96
     200:	69 f4       	brne	.+26     	; 0x21c <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     202:	86 2f       	mov	r24, r22
     204:	82 95       	swap	r24
     206:	80 7f       	andi	r24, 0xF0	; 240
     208:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     20c:	ef ee       	ldi	r30, 0xEF	; 239
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	8f 73       	andi	r24, 0x3F	; 63
     214:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     216:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     21a:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     21c:	19 96       	adiw	r26, 0x09	; 9
     21e:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	07 c6       	rjmp	.+3086   	; 0xe32 <__stack+0x533>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     224:	86 2f       	mov	r24, r22
     226:	82 95       	swap	r24
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     22e:	80 91 ef 00 	lds	r24, 0x00EF
     232:	80 7c       	andi	r24, 0xC0	; 192
     234:	09 f0       	breq	.+2      	; 0x238 <can_cmd+0x56>
     236:	f9 c5       	rjmp	.+3058   	; 0xe2a <__stack+0x52b>
    {
      cmd->status = MOB_PENDING; 
     238:	80 e6       	ldi	r24, 0x60	; 96
     23a:	19 96       	adiw	r26, 0x09	; 9
     23c:	8c 93       	st	X, r24
     23e:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     240:	6c 93       	st	X, r22
      Can_clear_mob();
     242:	ee ee       	ldi	r30, 0xEE	; 238
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	11 92       	st	Z+, r1
     248:	e8 3f       	cpi	r30, 0xF8	; 248
     24a:	f1 05       	cpc	r31, r1
     24c:	e1 f7       	brne	.-8      	; 0x246 <can_cmd+0x64>
          
      switch (cmd->cmd)
     24e:	11 96       	adiw	r26, 0x01	; 1
     250:	4c 91       	ld	r20, X
     252:	11 97       	sbiw	r26, 0x01	; 1
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	fa 01       	movw	r30, r20
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	eb 30       	cpi	r30, 0x0B	; 11
     25c:	f1 05       	cpc	r31, r1
     25e:	08 f0       	brcs	.+2      	; 0x262 <can_cmd+0x80>
     260:	e0 c5       	rjmp	.+3008   	; 0xe22 <__stack+0x523>
     262:	e2 5c       	subi	r30, 0xC2	; 194
     264:	ff 4f       	sbci	r31, 0xFF	; 255
     266:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     26a:	16 96       	adiw	r26, 0x06	; 6
     26c:	8c 91       	ld	r24, X
     26e:	16 97       	sbiw	r26, 0x06	; 6
     270:	81 11       	cpse	r24, r1
     272:	b7 c4       	rjmp	.+2414   	; 0xbe2 <__stack+0x2e3>
     274:	c8 c4       	rjmp	.+2448   	; 0xc06 <__stack+0x307>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     276:	1b 96       	adiw	r26, 0x0b	; 11
     278:	8c 91       	ld	r24, X
     27a:	1b 97       	sbiw	r26, 0x0b	; 11
     27c:	88 23       	and	r24, r24
     27e:	d9 f1       	breq	.+118    	; 0x2f6 <can_cmd+0x114>
     280:	14 96       	adiw	r26, 0x04	; 4
     282:	9c 91       	ld	r25, X
     284:	14 97       	sbiw	r26, 0x04	; 4
     286:	92 95       	swap	r25
     288:	96 95       	lsr	r25
     28a:	97 70       	andi	r25, 0x07	; 7
     28c:	15 96       	adiw	r26, 0x05	; 5
     28e:	8c 91       	ld	r24, X
     290:	15 97       	sbiw	r26, 0x05	; 5
     292:	88 0f       	add	r24, r24
     294:	88 0f       	add	r24, r24
     296:	88 0f       	add	r24, r24
     298:	89 0f       	add	r24, r25
     29a:	80 93 f3 00 	sts	0x00F3, r24
     29e:	13 96       	adiw	r26, 0x03	; 3
     2a0:	9c 91       	ld	r25, X
     2a2:	13 97       	sbiw	r26, 0x03	; 3
     2a4:	92 95       	swap	r25
     2a6:	96 95       	lsr	r25
     2a8:	97 70       	andi	r25, 0x07	; 7
     2aa:	14 96       	adiw	r26, 0x04	; 4
     2ac:	8c 91       	ld	r24, X
     2ae:	14 97       	sbiw	r26, 0x04	; 4
     2b0:	88 0f       	add	r24, r24
     2b2:	88 0f       	add	r24, r24
     2b4:	88 0f       	add	r24, r24
     2b6:	89 0f       	add	r24, r25
     2b8:	80 93 f2 00 	sts	0x00F2, r24
     2bc:	12 96       	adiw	r26, 0x02	; 2
     2be:	9c 91       	ld	r25, X
     2c0:	12 97       	sbiw	r26, 0x02	; 2
     2c2:	92 95       	swap	r25
     2c4:	96 95       	lsr	r25
     2c6:	97 70       	andi	r25, 0x07	; 7
     2c8:	13 96       	adiw	r26, 0x03	; 3
     2ca:	8c 91       	ld	r24, X
     2cc:	13 97       	sbiw	r26, 0x03	; 3
     2ce:	88 0f       	add	r24, r24
     2d0:	88 0f       	add	r24, r24
     2d2:	88 0f       	add	r24, r24
     2d4:	89 0f       	add	r24, r25
     2d6:	80 93 f1 00 	sts	0x00F1, r24
     2da:	12 96       	adiw	r26, 0x02	; 2
     2dc:	8c 91       	ld	r24, X
     2de:	12 97       	sbiw	r26, 0x02	; 2
     2e0:	88 0f       	add	r24, r24
     2e2:	88 0f       	add	r24, r24
     2e4:	88 0f       	add	r24, r24
     2e6:	80 93 f0 00 	sts	0x00F0, r24
     2ea:	ef ee       	ldi	r30, 0xEF	; 239
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	80 61       	ori	r24, 0x10	; 16
     2f2:	80 83       	st	Z, r24
     2f4:	1c c0       	rjmp	.+56     	; 0x32e <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     2f6:	12 96       	adiw	r26, 0x02	; 2
     2f8:	8c 91       	ld	r24, X
     2fa:	12 97       	sbiw	r26, 0x02	; 2
     2fc:	86 95       	lsr	r24
     2fe:	86 95       	lsr	r24
     300:	86 95       	lsr	r24
     302:	13 96       	adiw	r26, 0x03	; 3
     304:	9c 91       	ld	r25, X
     306:	13 97       	sbiw	r26, 0x03	; 3
     308:	20 e2       	ldi	r18, 0x20	; 32
     30a:	92 9f       	mul	r25, r18
     30c:	80 0d       	add	r24, r0
     30e:	11 24       	eor	r1, r1
     310:	80 93 f3 00 	sts	0x00F3, r24
     314:	12 96       	adiw	r26, 0x02	; 2
     316:	8c 91       	ld	r24, X
     318:	12 97       	sbiw	r26, 0x02	; 2
     31a:	82 95       	swap	r24
     31c:	88 0f       	add	r24, r24
     31e:	80 7e       	andi	r24, 0xE0	; 224
     320:	80 93 f2 00 	sts	0x00F2, r24
     324:	ef ee       	ldi	r30, 0xEF	; 239
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	8f 7e       	andi	r24, 0xEF	; 239
     32c:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     32e:	16 96       	adiw	r26, 0x06	; 6
     330:	8c 91       	ld	r24, X
     332:	16 97       	sbiw	r26, 0x06	; 6
     334:	88 23       	and	r24, r24
     336:	91 f0       	breq	.+36     	; 0x35c <can_cmd+0x17a>
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	8a ef       	ldi	r24, 0xFA	; 250
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	17 96       	adiw	r26, 0x07	; 7
     340:	ed 91       	ld	r30, X+
     342:	fc 91       	ld	r31, X
     344:	18 97       	sbiw	r26, 0x08	; 8
     346:	e2 0f       	add	r30, r18
     348:	f1 1d       	adc	r31, r1
     34a:	30 81       	ld	r19, Z
     34c:	fc 01       	movw	r30, r24
     34e:	30 83       	st	Z, r19
     350:	2f 5f       	subi	r18, 0xFF	; 255
     352:	16 96       	adiw	r26, 0x06	; 6
     354:	3c 91       	ld	r19, X
     356:	16 97       	sbiw	r26, 0x06	; 6
     358:	23 17       	cp	r18, r19
     35a:	88 f3       	brcs	.-30     	; 0x33e <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     35c:	1a 96       	adiw	r26, 0x0a	; 10
     35e:	8c 91       	ld	r24, X
     360:	1a 97       	sbiw	r26, 0x0a	; 10
     362:	88 23       	and	r24, r24
     364:	31 f0       	breq	.+12     	; 0x372 <can_cmd+0x190>
     366:	e0 ef       	ldi	r30, 0xF0	; 240
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	84 60       	ori	r24, 0x04	; 4
     36e:	80 83       	st	Z, r24
     370:	05 c0       	rjmp	.+10     	; 0x37c <can_cmd+0x19a>
            else Can_clear_rtr();    
     372:	e0 ef       	ldi	r30, 0xF0	; 240
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	8b 7f       	andi	r24, 0xFB	; 251
     37a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     37c:	ef ee       	ldi	r30, 0xEF	; 239
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	90 81       	ld	r25, Z
     382:	16 96       	adiw	r26, 0x06	; 6
     384:	8c 91       	ld	r24, X
     386:	89 2b       	or	r24, r25
     388:	80 83       	st	Z, r24
          Can_config_tx();
     38a:	80 81       	ld	r24, Z
     38c:	8f 73       	andi	r24, 0x3F	; 63
     38e:	80 83       	st	Z, r24
     390:	80 81       	ld	r24, Z
     392:	80 64       	ori	r24, 0x40	; 64
     394:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     396:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     398:	4c c5       	rjmp	.+2712   	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     39a:	1b 96       	adiw	r26, 0x0b	; 11
     39c:	8c 91       	ld	r24, X
     39e:	1b 97       	sbiw	r26, 0x0b	; 11
     3a0:	88 23       	and	r24, r24
     3a2:	d9 f1       	breq	.+118    	; 0x41a <can_cmd+0x238>
     3a4:	14 96       	adiw	r26, 0x04	; 4
     3a6:	9c 91       	ld	r25, X
     3a8:	14 97       	sbiw	r26, 0x04	; 4
     3aa:	92 95       	swap	r25
     3ac:	96 95       	lsr	r25
     3ae:	97 70       	andi	r25, 0x07	; 7
     3b0:	15 96       	adiw	r26, 0x05	; 5
     3b2:	8c 91       	ld	r24, X
     3b4:	15 97       	sbiw	r26, 0x05	; 5
     3b6:	88 0f       	add	r24, r24
     3b8:	88 0f       	add	r24, r24
     3ba:	88 0f       	add	r24, r24
     3bc:	89 0f       	add	r24, r25
     3be:	80 93 f3 00 	sts	0x00F3, r24
     3c2:	13 96       	adiw	r26, 0x03	; 3
     3c4:	9c 91       	ld	r25, X
     3c6:	13 97       	sbiw	r26, 0x03	; 3
     3c8:	92 95       	swap	r25
     3ca:	96 95       	lsr	r25
     3cc:	97 70       	andi	r25, 0x07	; 7
     3ce:	14 96       	adiw	r26, 0x04	; 4
     3d0:	8c 91       	ld	r24, X
     3d2:	14 97       	sbiw	r26, 0x04	; 4
     3d4:	88 0f       	add	r24, r24
     3d6:	88 0f       	add	r24, r24
     3d8:	88 0f       	add	r24, r24
     3da:	89 0f       	add	r24, r25
     3dc:	80 93 f2 00 	sts	0x00F2, r24
     3e0:	12 96       	adiw	r26, 0x02	; 2
     3e2:	9c 91       	ld	r25, X
     3e4:	12 97       	sbiw	r26, 0x02	; 2
     3e6:	92 95       	swap	r25
     3e8:	96 95       	lsr	r25
     3ea:	97 70       	andi	r25, 0x07	; 7
     3ec:	13 96       	adiw	r26, 0x03	; 3
     3ee:	8c 91       	ld	r24, X
     3f0:	13 97       	sbiw	r26, 0x03	; 3
     3f2:	88 0f       	add	r24, r24
     3f4:	88 0f       	add	r24, r24
     3f6:	88 0f       	add	r24, r24
     3f8:	89 0f       	add	r24, r25
     3fa:	80 93 f1 00 	sts	0x00F1, r24
     3fe:	12 96       	adiw	r26, 0x02	; 2
     400:	8c 91       	ld	r24, X
     402:	12 97       	sbiw	r26, 0x02	; 2
     404:	88 0f       	add	r24, r24
     406:	88 0f       	add	r24, r24
     408:	88 0f       	add	r24, r24
     40a:	80 93 f0 00 	sts	0x00F0, r24
     40e:	ef ee       	ldi	r30, 0xEF	; 239
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	80 81       	ld	r24, Z
     414:	80 61       	ori	r24, 0x10	; 16
     416:	80 83       	st	Z, r24
     418:	1c c0       	rjmp	.+56     	; 0x452 <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     41a:	12 96       	adiw	r26, 0x02	; 2
     41c:	8c 91       	ld	r24, X
     41e:	12 97       	sbiw	r26, 0x02	; 2
     420:	86 95       	lsr	r24
     422:	86 95       	lsr	r24
     424:	86 95       	lsr	r24
     426:	13 96       	adiw	r26, 0x03	; 3
     428:	9c 91       	ld	r25, X
     42a:	13 97       	sbiw	r26, 0x03	; 3
     42c:	f0 e2       	ldi	r31, 0x20	; 32
     42e:	9f 9f       	mul	r25, r31
     430:	80 0d       	add	r24, r0
     432:	11 24       	eor	r1, r1
     434:	80 93 f3 00 	sts	0x00F3, r24
     438:	12 96       	adiw	r26, 0x02	; 2
     43a:	8c 91       	ld	r24, X
     43c:	12 97       	sbiw	r26, 0x02	; 2
     43e:	82 95       	swap	r24
     440:	88 0f       	add	r24, r24
     442:	80 7e       	andi	r24, 0xE0	; 224
     444:	80 93 f2 00 	sts	0x00F2, r24
     448:	ef ee       	ldi	r30, 0xEF	; 239
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	8f 7e       	andi	r24, 0xEF	; 239
     450:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     452:	16 96       	adiw	r26, 0x06	; 6
     454:	8c 91       	ld	r24, X
     456:	16 97       	sbiw	r26, 0x06	; 6
     458:	88 23       	and	r24, r24
     45a:	91 f0       	breq	.+36     	; 0x480 <can_cmd+0x29e>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	8a ef       	ldi	r24, 0xFA	; 250
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	17 96       	adiw	r26, 0x07	; 7
     464:	ed 91       	ld	r30, X+
     466:	fc 91       	ld	r31, X
     468:	18 97       	sbiw	r26, 0x08	; 8
     46a:	e2 0f       	add	r30, r18
     46c:	f1 1d       	adc	r31, r1
     46e:	30 81       	ld	r19, Z
     470:	fc 01       	movw	r30, r24
     472:	30 83       	st	Z, r19
     474:	2f 5f       	subi	r18, 0xFF	; 255
     476:	16 96       	adiw	r26, 0x06	; 6
     478:	3c 91       	ld	r19, X
     47a:	16 97       	sbiw	r26, 0x06	; 6
     47c:	23 17       	cp	r18, r19
     47e:	88 f3       	brcs	.-30     	; 0x462 <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     480:	1a 96       	adiw	r26, 0x0a	; 10
     482:	1c 92       	st	X, r1
     484:	1a 97       	sbiw	r26, 0x0a	; 10
     486:	e0 ef       	ldi	r30, 0xF0	; 240
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8b 7f       	andi	r24, 0xFB	; 251
     48e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     490:	ef ee       	ldi	r30, 0xEF	; 239
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	90 81       	ld	r25, Z
     496:	16 96       	adiw	r26, 0x06	; 6
     498:	8c 91       	ld	r24, X
     49a:	89 2b       	or	r24, r25
     49c:	80 83       	st	Z, r24
          Can_config_tx();
     49e:	80 81       	ld	r24, Z
     4a0:	8f 73       	andi	r24, 0x3F	; 63
     4a2:	80 83       	st	Z, r24
     4a4:	80 81       	ld	r24, Z
     4a6:	80 64       	ori	r24, 0x40	; 64
     4a8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     4aa:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     4ac:	c2 c4       	rjmp	.+2436   	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     4ae:	1b 96       	adiw	r26, 0x0b	; 11
     4b0:	8c 91       	ld	r24, X
     4b2:	1b 97       	sbiw	r26, 0x0b	; 11
     4b4:	88 23       	and	r24, r24
     4b6:	d9 f1       	breq	.+118    	; 0x52e <can_cmd+0x34c>
     4b8:	14 96       	adiw	r26, 0x04	; 4
     4ba:	9c 91       	ld	r25, X
     4bc:	14 97       	sbiw	r26, 0x04	; 4
     4be:	92 95       	swap	r25
     4c0:	96 95       	lsr	r25
     4c2:	97 70       	andi	r25, 0x07	; 7
     4c4:	15 96       	adiw	r26, 0x05	; 5
     4c6:	8c 91       	ld	r24, X
     4c8:	15 97       	sbiw	r26, 0x05	; 5
     4ca:	88 0f       	add	r24, r24
     4cc:	88 0f       	add	r24, r24
     4ce:	88 0f       	add	r24, r24
     4d0:	89 0f       	add	r24, r25
     4d2:	80 93 f3 00 	sts	0x00F3, r24
     4d6:	13 96       	adiw	r26, 0x03	; 3
     4d8:	9c 91       	ld	r25, X
     4da:	13 97       	sbiw	r26, 0x03	; 3
     4dc:	92 95       	swap	r25
     4de:	96 95       	lsr	r25
     4e0:	97 70       	andi	r25, 0x07	; 7
     4e2:	14 96       	adiw	r26, 0x04	; 4
     4e4:	8c 91       	ld	r24, X
     4e6:	14 97       	sbiw	r26, 0x04	; 4
     4e8:	88 0f       	add	r24, r24
     4ea:	88 0f       	add	r24, r24
     4ec:	88 0f       	add	r24, r24
     4ee:	89 0f       	add	r24, r25
     4f0:	80 93 f2 00 	sts	0x00F2, r24
     4f4:	12 96       	adiw	r26, 0x02	; 2
     4f6:	9c 91       	ld	r25, X
     4f8:	12 97       	sbiw	r26, 0x02	; 2
     4fa:	92 95       	swap	r25
     4fc:	96 95       	lsr	r25
     4fe:	97 70       	andi	r25, 0x07	; 7
     500:	13 96       	adiw	r26, 0x03	; 3
     502:	8c 91       	ld	r24, X
     504:	13 97       	sbiw	r26, 0x03	; 3
     506:	88 0f       	add	r24, r24
     508:	88 0f       	add	r24, r24
     50a:	88 0f       	add	r24, r24
     50c:	89 0f       	add	r24, r25
     50e:	80 93 f1 00 	sts	0x00F1, r24
     512:	12 96       	adiw	r26, 0x02	; 2
     514:	8c 91       	ld	r24, X
     516:	12 97       	sbiw	r26, 0x02	; 2
     518:	88 0f       	add	r24, r24
     51a:	88 0f       	add	r24, r24
     51c:	88 0f       	add	r24, r24
     51e:	80 93 f0 00 	sts	0x00F0, r24
     522:	ef ee       	ldi	r30, 0xEF	; 239
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	80 61       	ori	r24, 0x10	; 16
     52a:	80 83       	st	Z, r24
     52c:	1c c0       	rjmp	.+56     	; 0x566 <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     52e:	12 96       	adiw	r26, 0x02	; 2
     530:	8c 91       	ld	r24, X
     532:	12 97       	sbiw	r26, 0x02	; 2
     534:	86 95       	lsr	r24
     536:	86 95       	lsr	r24
     538:	86 95       	lsr	r24
     53a:	13 96       	adiw	r26, 0x03	; 3
     53c:	9c 91       	ld	r25, X
     53e:	13 97       	sbiw	r26, 0x03	; 3
     540:	f0 e2       	ldi	r31, 0x20	; 32
     542:	9f 9f       	mul	r25, r31
     544:	80 0d       	add	r24, r0
     546:	11 24       	eor	r1, r1
     548:	80 93 f3 00 	sts	0x00F3, r24
     54c:	12 96       	adiw	r26, 0x02	; 2
     54e:	8c 91       	ld	r24, X
     550:	12 97       	sbiw	r26, 0x02	; 2
     552:	82 95       	swap	r24
     554:	88 0f       	add	r24, r24
     556:	80 7e       	andi	r24, 0xE0	; 224
     558:	80 93 f2 00 	sts	0x00F2, r24
     55c:	ef ee       	ldi	r30, 0xEF	; 239
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	8f 7e       	andi	r24, 0xEF	; 239
     564:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	1a 96       	adiw	r26, 0x0a	; 10
     56a:	8c 93       	st	X, r24
     56c:	1a 97       	sbiw	r26, 0x0a	; 10
     56e:	e0 ef       	ldi	r30, 0xF0	; 240
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	80 81       	ld	r24, Z
     574:	84 60       	ori	r24, 0x04	; 4
     576:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     578:	ef ee       	ldi	r30, 0xEF	; 239
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	90 81       	ld	r25, Z
     57e:	16 96       	adiw	r26, 0x06	; 6
     580:	8c 91       	ld	r24, X
     582:	89 2b       	or	r24, r25
     584:	80 83       	st	Z, r24
          Can_config_tx();
     586:	80 81       	ld	r24, Z
     588:	8f 73       	andi	r24, 0x3F	; 63
     58a:	80 83       	st	Z, r24
     58c:	80 81       	ld	r24, Z
     58e:	80 64       	ori	r24, 0x40	; 64
     590:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     592:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     594:	4e c4       	rjmp	.+2204   	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     596:	19 82       	std	Y+1, r1	; 0x01
     598:	9b 81       	ldd	r25, Y+3	; 0x03
     59a:	92 95       	swap	r25
     59c:	96 95       	lsr	r25
     59e:	97 70       	andi	r25, 0x07	; 7
     5a0:	8c 81       	ldd	r24, Y+4	; 0x04
     5a2:	88 0f       	add	r24, r24
     5a4:	88 0f       	add	r24, r24
     5a6:	88 0f       	add	r24, r24
     5a8:	89 0f       	add	r24, r25
     5aa:	80 93 f7 00 	sts	0x00F7, r24
     5ae:	9a 81       	ldd	r25, Y+2	; 0x02
     5b0:	92 95       	swap	r25
     5b2:	96 95       	lsr	r25
     5b4:	97 70       	andi	r25, 0x07	; 7
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	88 0f       	add	r24, r24
     5ba:	88 0f       	add	r24, r24
     5bc:	88 0f       	add	r24, r24
     5be:	89 0f       	add	r24, r25
     5c0:	80 93 f6 00 	sts	0x00F6, r24
     5c4:	99 81       	ldd	r25, Y+1	; 0x01
     5c6:	92 95       	swap	r25
     5c8:	96 95       	lsr	r25
     5ca:	97 70       	andi	r25, 0x07	; 7
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
     5ce:	88 0f       	add	r24, r24
     5d0:	88 0f       	add	r24, r24
     5d2:	88 0f       	add	r24, r24
     5d4:	89 0f       	add	r24, r25
     5d6:	80 93 f5 00 	sts	0x00F5, r24
     5da:	29 81       	ldd	r18, Y+1	; 0x01
     5dc:	22 0f       	add	r18, r18
     5de:	22 0f       	add	r18, r18
     5e0:	22 0f       	add	r18, r18
     5e2:	84 ef       	ldi	r24, 0xF4	; 244
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     5ea:	ef ee       	ldi	r30, 0xEF	; 239
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	30 81       	ld	r19, Z
     5f0:	16 96       	adiw	r26, 0x06	; 6
     5f2:	2c 91       	ld	r18, X
     5f4:	23 2b       	or	r18, r19
     5f6:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     5f8:	dc 01       	movw	r26, r24
     5fa:	2c 91       	ld	r18, X
     5fc:	2b 7f       	andi	r18, 0xFB	; 251
     5fe:	2c 93       	st	X, r18
          Can_clear_idemsk();
     600:	2c 91       	ld	r18, X
     602:	2e 7f       	andi	r18, 0xFE	; 254
     604:	2c 93       	st	X, r18
          Can_config_rx();       
     606:	80 81       	ld	r24, Z
     608:	8f 73       	andi	r24, 0x3F	; 63
     60a:	80 83       	st	Z, r24
     60c:	80 81       	ld	r24, Z
     60e:	80 68       	ori	r24, 0x80	; 128
     610:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     612:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     614:	0e c4       	rjmp	.+2076   	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     61a:	8a 81       	ldd	r24, Y+2	; 0x02
     61c:	82 95       	swap	r24
     61e:	88 0f       	add	r24, r24
     620:	80 7e       	andi	r24, 0xE0	; 224
     622:	81 5e       	subi	r24, 0xE1	; 225
     624:	27 ef       	ldi	r18, 0xF7	; 247
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	f9 01       	movw	r30, r18
     62a:	80 83       	st	Z, r24
     62c:	49 81       	ldd	r20, Y+1	; 0x01
     62e:	42 95       	swap	r20
     630:	44 0f       	add	r20, r20
     632:	40 7e       	andi	r20, 0xE0	; 224
     634:	86 ef       	ldi	r24, 0xF6	; 246
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	fc 01       	movw	r30, r24
     63a:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     63c:	12 96       	adiw	r26, 0x02	; 2
     63e:	4c 91       	ld	r20, X
     640:	12 97       	sbiw	r26, 0x02	; 2
     642:	46 95       	lsr	r20
     644:	46 95       	lsr	r20
     646:	46 95       	lsr	r20
     648:	13 96       	adiw	r26, 0x03	; 3
     64a:	5c 91       	ld	r21, X
     64c:	13 97       	sbiw	r26, 0x03	; 3
     64e:	f0 e2       	ldi	r31, 0x20	; 32
     650:	5f 9f       	mul	r21, r31
     652:	40 0d       	add	r20, r0
     654:	11 24       	eor	r1, r1
     656:	40 93 f3 00 	sts	0x00F3, r20
     65a:	12 96       	adiw	r26, 0x02	; 2
     65c:	4c 91       	ld	r20, X
     65e:	12 97       	sbiw	r26, 0x02	; 2
     660:	42 95       	swap	r20
     662:	44 0f       	add	r20, r20
     664:	40 7e       	andi	r20, 0xE0	; 224
     666:	40 93 f2 00 	sts	0x00F2, r20
     66a:	6f ee       	ldi	r22, 0xEF	; 239
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	fb 01       	movw	r30, r22
     670:	40 81       	ld	r20, Z
     672:	4f 7e       	andi	r20, 0xEF	; 239
     674:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     676:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     678:	5b 81       	ldd	r21, Y+3	; 0x03
     67a:	52 95       	swap	r21
     67c:	56 95       	lsr	r21
     67e:	57 70       	andi	r21, 0x07	; 7
     680:	4c 81       	ldd	r20, Y+4	; 0x04
     682:	44 0f       	add	r20, r20
     684:	44 0f       	add	r20, r20
     686:	44 0f       	add	r20, r20
     688:	45 0f       	add	r20, r21
     68a:	f9 01       	movw	r30, r18
     68c:	40 83       	st	Z, r20
     68e:	3a 81       	ldd	r19, Y+2	; 0x02
     690:	32 95       	swap	r19
     692:	36 95       	lsr	r19
     694:	37 70       	andi	r19, 0x07	; 7
     696:	2b 81       	ldd	r18, Y+3	; 0x03
     698:	22 0f       	add	r18, r18
     69a:	22 0f       	add	r18, r18
     69c:	22 0f       	add	r18, r18
     69e:	23 0f       	add	r18, r19
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
     6a4:	99 81       	ldd	r25, Y+1	; 0x01
     6a6:	92 95       	swap	r25
     6a8:	96 95       	lsr	r25
     6aa:	97 70       	andi	r25, 0x07	; 7
     6ac:	8a 81       	ldd	r24, Y+2	; 0x02
     6ae:	88 0f       	add	r24, r24
     6b0:	88 0f       	add	r24, r24
     6b2:	88 0f       	add	r24, r24
     6b4:	89 0f       	add	r24, r25
     6b6:	80 93 f5 00 	sts	0x00F5, r24
     6ba:	29 81       	ldd	r18, Y+1	; 0x01
     6bc:	22 0f       	add	r18, r18
     6be:	22 0f       	add	r18, r18
     6c0:	22 0f       	add	r18, r18
     6c2:	84 ef       	ldi	r24, 0xF4	; 244
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     6ca:	fb 01       	movw	r30, r22
     6cc:	30 81       	ld	r19, Z
     6ce:	16 96       	adiw	r26, 0x06	; 6
     6d0:	2c 91       	ld	r18, X
     6d2:	16 97       	sbiw	r26, 0x06	; 6
     6d4:	23 2b       	or	r18, r19
     6d6:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     6d8:	1a 96       	adiw	r26, 0x0a	; 10
     6da:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     6dc:	dc 01       	movw	r26, r24
     6de:	2c 91       	ld	r18, X
     6e0:	24 60       	ori	r18, 0x04	; 4
     6e2:	2c 93       	st	X, r18
		  Can_clear_rtr();
     6e4:	a0 ef       	ldi	r26, 0xF0	; 240
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	2c 91       	ld	r18, X
     6ea:	2b 7f       	andi	r18, 0xFB	; 251
     6ec:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     6ee:	20 81       	ld	r18, Z
     6f0:	2f 7e       	andi	r18, 0xEF	; 239
     6f2:	20 83       	st	Z, r18
          Can_clear_idemsk();
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 81       	ld	r18, Z
     6f8:	2e 7f       	andi	r18, 0xFE	; 254
     6fa:	20 83       	st	Z, r18
          Can_config_rx();       
     6fc:	db 01       	movw	r26, r22
     6fe:	8c 91       	ld	r24, X
     700:	8f 73       	andi	r24, 0x3F	; 63
     702:	8c 93       	st	X, r24
     704:	8c 91       	ld	r24, X
     706:	80 68       	ori	r24, 0x80	; 128
     708:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     70a:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     70c:	92 c3       	rjmp	.+1828   	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	82 95       	swap	r24
     716:	88 0f       	add	r24, r24
     718:	80 7e       	andi	r24, 0xE0	; 224
     71a:	81 5e       	subi	r24, 0xE1	; 225
     71c:	27 ef       	ldi	r18, 0xF7	; 247
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	f9 01       	movw	r30, r18
     722:	80 83       	st	Z, r24
     724:	49 81       	ldd	r20, Y+1	; 0x01
     726:	42 95       	swap	r20
     728:	44 0f       	add	r20, r20
     72a:	40 7e       	andi	r20, 0xE0	; 224
     72c:	86 ef       	ldi	r24, 0xF6	; 246
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	fc 01       	movw	r30, r24
     732:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     734:	12 96       	adiw	r26, 0x02	; 2
     736:	4c 91       	ld	r20, X
     738:	12 97       	sbiw	r26, 0x02	; 2
     73a:	46 95       	lsr	r20
     73c:	46 95       	lsr	r20
     73e:	46 95       	lsr	r20
     740:	13 96       	adiw	r26, 0x03	; 3
     742:	5c 91       	ld	r21, X
     744:	13 97       	sbiw	r26, 0x03	; 3
     746:	f0 e2       	ldi	r31, 0x20	; 32
     748:	5f 9f       	mul	r21, r31
     74a:	40 0d       	add	r20, r0
     74c:	11 24       	eor	r1, r1
     74e:	40 93 f3 00 	sts	0x00F3, r20
     752:	12 96       	adiw	r26, 0x02	; 2
     754:	4c 91       	ld	r20, X
     756:	12 97       	sbiw	r26, 0x02	; 2
     758:	42 95       	swap	r20
     75a:	44 0f       	add	r20, r20
     75c:	40 7e       	andi	r20, 0xE0	; 224
     75e:	40 93 f2 00 	sts	0x00F2, r20
     762:	6f ee       	ldi	r22, 0xEF	; 239
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	fb 01       	movw	r30, r22
     768:	40 81       	ld	r20, Z
     76a:	4f 7e       	andi	r20, 0xEF	; 239
     76c:	40 83       	st	Z, r20
		
          u8_temp=0; 
     76e:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     770:	5b 81       	ldd	r21, Y+3	; 0x03
     772:	52 95       	swap	r21
     774:	56 95       	lsr	r21
     776:	57 70       	andi	r21, 0x07	; 7
     778:	4c 81       	ldd	r20, Y+4	; 0x04
     77a:	44 0f       	add	r20, r20
     77c:	44 0f       	add	r20, r20
     77e:	44 0f       	add	r20, r20
     780:	45 0f       	add	r20, r21
     782:	f9 01       	movw	r30, r18
     784:	40 83       	st	Z, r20
     786:	3a 81       	ldd	r19, Y+2	; 0x02
     788:	32 95       	swap	r19
     78a:	36 95       	lsr	r19
     78c:	37 70       	andi	r19, 0x07	; 7
     78e:	2b 81       	ldd	r18, Y+3	; 0x03
     790:	22 0f       	add	r18, r18
     792:	22 0f       	add	r18, r18
     794:	22 0f       	add	r18, r18
     796:	23 0f       	add	r18, r19
     798:	fc 01       	movw	r30, r24
     79a:	20 83       	st	Z, r18
     79c:	99 81       	ldd	r25, Y+1	; 0x01
     79e:	92 95       	swap	r25
     7a0:	96 95       	lsr	r25
     7a2:	97 70       	andi	r25, 0x07	; 7
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	88 0f       	add	r24, r24
     7a8:	88 0f       	add	r24, r24
     7aa:	88 0f       	add	r24, r24
     7ac:	89 0f       	add	r24, r25
     7ae:	80 93 f5 00 	sts	0x00F5, r24
     7b2:	29 81       	ldd	r18, Y+1	; 0x01
     7b4:	22 0f       	add	r18, r18
     7b6:	22 0f       	add	r18, r18
     7b8:	22 0f       	add	r18, r18
     7ba:	84 ef       	ldi	r24, 0xF4	; 244
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     7c2:	fb 01       	movw	r30, r22
     7c4:	30 81       	ld	r19, Z
     7c6:	16 96       	adiw	r26, 0x06	; 6
     7c8:	2c 91       	ld	r18, X
     7ca:	16 97       	sbiw	r26, 0x06	; 6
     7cc:	23 2b       	or	r18, r19
     7ce:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	1a 96       	adiw	r26, 0x0a	; 10
     7d4:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     7d6:	dc 01       	movw	r26, r24
     7d8:	2c 91       	ld	r18, X
     7da:	24 60       	ori	r18, 0x04	; 4
     7dc:	2c 93       	st	X, r18
		  Can_set_rtr();
     7de:	a0 ef       	ldi	r26, 0xF0	; 240
     7e0:	b0 e0       	ldi	r27, 0x00	; 0
     7e2:	2c 91       	ld	r18, X
     7e4:	24 60       	ori	r18, 0x04	; 4
     7e6:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     7e8:	20 81       	ld	r18, Z
     7ea:	2f 7d       	andi	r18, 0xDF	; 223
     7ec:	20 83       	st	Z, r18
          Can_clear_idemsk();
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 81       	ld	r18, Z
     7f2:	2e 7f       	andi	r18, 0xFE	; 254
     7f4:	20 83       	st	Z, r18
          Can_config_rx();       
     7f6:	db 01       	movw	r26, r22
     7f8:	8c 91       	ld	r24, X
     7fa:	8f 73       	andi	r24, 0x3F	; 63
     7fc:	8c 93       	st	X, r24
     7fe:	8c 91       	ld	r24, X
     800:	80 68       	ori	r24, 0x80	; 128
     802:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     804:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     806:	15 c3       	rjmp	.+1578   	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     808:	1b 96       	adiw	r26, 0x0b	; 11
     80a:	8c 91       	ld	r24, X
     80c:	1b 97       	sbiw	r26, 0x0b	; 11
     80e:	88 23       	and	r24, r24
     810:	d9 f1       	breq	.+118    	; 0x888 <can_cmd+0x6a6>
     812:	14 96       	adiw	r26, 0x04	; 4
     814:	9c 91       	ld	r25, X
     816:	14 97       	sbiw	r26, 0x04	; 4
     818:	92 95       	swap	r25
     81a:	96 95       	lsr	r25
     81c:	97 70       	andi	r25, 0x07	; 7
     81e:	15 96       	adiw	r26, 0x05	; 5
     820:	8c 91       	ld	r24, X
     822:	15 97       	sbiw	r26, 0x05	; 5
     824:	88 0f       	add	r24, r24
     826:	88 0f       	add	r24, r24
     828:	88 0f       	add	r24, r24
     82a:	89 0f       	add	r24, r25
     82c:	80 93 f3 00 	sts	0x00F3, r24
     830:	13 96       	adiw	r26, 0x03	; 3
     832:	9c 91       	ld	r25, X
     834:	13 97       	sbiw	r26, 0x03	; 3
     836:	92 95       	swap	r25
     838:	96 95       	lsr	r25
     83a:	97 70       	andi	r25, 0x07	; 7
     83c:	14 96       	adiw	r26, 0x04	; 4
     83e:	8c 91       	ld	r24, X
     840:	14 97       	sbiw	r26, 0x04	; 4
     842:	88 0f       	add	r24, r24
     844:	88 0f       	add	r24, r24
     846:	88 0f       	add	r24, r24
     848:	89 0f       	add	r24, r25
     84a:	80 93 f2 00 	sts	0x00F2, r24
     84e:	12 96       	adiw	r26, 0x02	; 2
     850:	9c 91       	ld	r25, X
     852:	12 97       	sbiw	r26, 0x02	; 2
     854:	92 95       	swap	r25
     856:	96 95       	lsr	r25
     858:	97 70       	andi	r25, 0x07	; 7
     85a:	13 96       	adiw	r26, 0x03	; 3
     85c:	8c 91       	ld	r24, X
     85e:	13 97       	sbiw	r26, 0x03	; 3
     860:	88 0f       	add	r24, r24
     862:	88 0f       	add	r24, r24
     864:	88 0f       	add	r24, r24
     866:	89 0f       	add	r24, r25
     868:	80 93 f1 00 	sts	0x00F1, r24
     86c:	12 96       	adiw	r26, 0x02	; 2
     86e:	8c 91       	ld	r24, X
     870:	12 97       	sbiw	r26, 0x02	; 2
     872:	88 0f       	add	r24, r24
     874:	88 0f       	add	r24, r24
     876:	88 0f       	add	r24, r24
     878:	80 93 f0 00 	sts	0x00F0, r24
     87c:	ef ee       	ldi	r30, 0xEF	; 239
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	80 61       	ori	r24, 0x10	; 16
     884:	80 83       	st	Z, r24
     886:	1c c0       	rjmp	.+56     	; 0x8c0 <can_cmd+0x6de>
          else              { Can_set_std_id(cmd->id.std);}
     888:	12 96       	adiw	r26, 0x02	; 2
     88a:	8c 91       	ld	r24, X
     88c:	12 97       	sbiw	r26, 0x02	; 2
     88e:	86 95       	lsr	r24
     890:	86 95       	lsr	r24
     892:	86 95       	lsr	r24
     894:	13 96       	adiw	r26, 0x03	; 3
     896:	9c 91       	ld	r25, X
     898:	13 97       	sbiw	r26, 0x03	; 3
     89a:	e0 e2       	ldi	r30, 0x20	; 32
     89c:	9e 9f       	mul	r25, r30
     89e:	80 0d       	add	r24, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	80 93 f3 00 	sts	0x00F3, r24
     8a6:	12 96       	adiw	r26, 0x02	; 2
     8a8:	8c 91       	ld	r24, X
     8aa:	12 97       	sbiw	r26, 0x02	; 2
     8ac:	82 95       	swap	r24
     8ae:	88 0f       	add	r24, r24
     8b0:	80 7e       	andi	r24, 0xE0	; 224
     8b2:	80 93 f2 00 	sts	0x00F2, r24
     8b6:	ef ee       	ldi	r30, 0xEF	; 239
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	8f 7e       	andi	r24, 0xEF	; 239
     8be:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	9b 81       	ldd	r25, Y+3	; 0x03
     8c6:	92 95       	swap	r25
     8c8:	96 95       	lsr	r25
     8ca:	97 70       	andi	r25, 0x07	; 7
     8cc:	8c 81       	ldd	r24, Y+4	; 0x04
     8ce:	88 0f       	add	r24, r24
     8d0:	88 0f       	add	r24, r24
     8d2:	88 0f       	add	r24, r24
     8d4:	89 0f       	add	r24, r25
     8d6:	80 93 f7 00 	sts	0x00F7, r24
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	92 95       	swap	r25
     8de:	96 95       	lsr	r25
     8e0:	97 70       	andi	r25, 0x07	; 7
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	88 0f       	add	r24, r24
     8e6:	88 0f       	add	r24, r24
     8e8:	88 0f       	add	r24, r24
     8ea:	89 0f       	add	r24, r25
     8ec:	80 93 f6 00 	sts	0x00F6, r24
     8f0:	99 81       	ldd	r25, Y+1	; 0x01
     8f2:	92 95       	swap	r25
     8f4:	96 95       	lsr	r25
     8f6:	97 70       	andi	r25, 0x07	; 7
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	88 0f       	add	r24, r24
     8fc:	88 0f       	add	r24, r24
     8fe:	88 0f       	add	r24, r24
     900:	89 0f       	add	r24, r25
     902:	80 93 f5 00 	sts	0x00F5, r24
     906:	29 81       	ldd	r18, Y+1	; 0x01
     908:	22 0f       	add	r18, r18
     90a:	22 0f       	add	r18, r18
     90c:	22 0f       	add	r18, r18
     90e:	84 ef       	ldi	r24, 0xF4	; 244
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     916:	ef ee       	ldi	r30, 0xEF	; 239
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	30 81       	ld	r19, Z
     91c:	16 96       	adiw	r26, 0x06	; 6
     91e:	2c 91       	ld	r18, X
     920:	23 2b       	or	r18, r19
     922:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     924:	dc 01       	movw	r26, r24
     926:	2c 91       	ld	r18, X
     928:	2b 7f       	andi	r18, 0xFB	; 251
     92a:	2c 93       	st	X, r18
          Can_set_idemsk();
     92c:	2c 91       	ld	r18, X
     92e:	21 60       	ori	r18, 0x01	; 1
     930:	2c 93       	st	X, r18
          Can_config_rx();       
     932:	80 81       	ld	r24, Z
     934:	8f 73       	andi	r24, 0x3F	; 63
     936:	80 83       	st	Z, r24
     938:	80 81       	ld	r24, Z
     93a:	80 68       	ori	r24, 0x80	; 128
     93c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     93e:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     940:	78 c2       	rjmp	.+1264   	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     942:	1b 96       	adiw	r26, 0x0b	; 11
     944:	8c 91       	ld	r24, X
     946:	1b 97       	sbiw	r26, 0x0b	; 11
     948:	88 23       	and	r24, r24
     94a:	d9 f1       	breq	.+118    	; 0x9c2 <__stack+0xc3>
     94c:	14 96       	adiw	r26, 0x04	; 4
     94e:	9c 91       	ld	r25, X
     950:	14 97       	sbiw	r26, 0x04	; 4
     952:	92 95       	swap	r25
     954:	96 95       	lsr	r25
     956:	97 70       	andi	r25, 0x07	; 7
     958:	15 96       	adiw	r26, 0x05	; 5
     95a:	8c 91       	ld	r24, X
     95c:	15 97       	sbiw	r26, 0x05	; 5
     95e:	88 0f       	add	r24, r24
     960:	88 0f       	add	r24, r24
     962:	88 0f       	add	r24, r24
     964:	89 0f       	add	r24, r25
     966:	80 93 f3 00 	sts	0x00F3, r24
     96a:	13 96       	adiw	r26, 0x03	; 3
     96c:	9c 91       	ld	r25, X
     96e:	13 97       	sbiw	r26, 0x03	; 3
     970:	92 95       	swap	r25
     972:	96 95       	lsr	r25
     974:	97 70       	andi	r25, 0x07	; 7
     976:	14 96       	adiw	r26, 0x04	; 4
     978:	8c 91       	ld	r24, X
     97a:	14 97       	sbiw	r26, 0x04	; 4
     97c:	88 0f       	add	r24, r24
     97e:	88 0f       	add	r24, r24
     980:	88 0f       	add	r24, r24
     982:	89 0f       	add	r24, r25
     984:	80 93 f2 00 	sts	0x00F2, r24
     988:	12 96       	adiw	r26, 0x02	; 2
     98a:	9c 91       	ld	r25, X
     98c:	12 97       	sbiw	r26, 0x02	; 2
     98e:	92 95       	swap	r25
     990:	96 95       	lsr	r25
     992:	97 70       	andi	r25, 0x07	; 7
     994:	13 96       	adiw	r26, 0x03	; 3
     996:	8c 91       	ld	r24, X
     998:	13 97       	sbiw	r26, 0x03	; 3
     99a:	88 0f       	add	r24, r24
     99c:	88 0f       	add	r24, r24
     99e:	88 0f       	add	r24, r24
     9a0:	89 0f       	add	r24, r25
     9a2:	80 93 f1 00 	sts	0x00F1, r24
     9a6:	12 96       	adiw	r26, 0x02	; 2
     9a8:	8c 91       	ld	r24, X
     9aa:	12 97       	sbiw	r26, 0x02	; 2
     9ac:	88 0f       	add	r24, r24
     9ae:	88 0f       	add	r24, r24
     9b0:	88 0f       	add	r24, r24
     9b2:	80 93 f0 00 	sts	0x00F0, r24
     9b6:	ef ee       	ldi	r30, 0xEF	; 239
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	80 61       	ori	r24, 0x10	; 16
     9be:	80 83       	st	Z, r24
     9c0:	1c c0       	rjmp	.+56     	; 0x9fa <__stack+0xfb>
          else              { Can_set_std_id(cmd->id.std);}
     9c2:	12 96       	adiw	r26, 0x02	; 2
     9c4:	8c 91       	ld	r24, X
     9c6:	12 97       	sbiw	r26, 0x02	; 2
     9c8:	86 95       	lsr	r24
     9ca:	86 95       	lsr	r24
     9cc:	86 95       	lsr	r24
     9ce:	13 96       	adiw	r26, 0x03	; 3
     9d0:	9c 91       	ld	r25, X
     9d2:	13 97       	sbiw	r26, 0x03	; 3
     9d4:	e0 e2       	ldi	r30, 0x20	; 32
     9d6:	9e 9f       	mul	r25, r30
     9d8:	80 0d       	add	r24, r0
     9da:	11 24       	eor	r1, r1
     9dc:	80 93 f3 00 	sts	0x00F3, r24
     9e0:	12 96       	adiw	r26, 0x02	; 2
     9e2:	8c 91       	ld	r24, X
     9e4:	12 97       	sbiw	r26, 0x02	; 2
     9e6:	82 95       	swap	r24
     9e8:	88 0f       	add	r24, r24
     9ea:	80 7e       	andi	r24, 0xE0	; 224
     9ec:	80 93 f2 00 	sts	0x00F2, r24
     9f0:	ef ee       	ldi	r30, 0xEF	; 239
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8f 7e       	andi	r24, 0xEF	; 239
     9f8:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	9b 81       	ldd	r25, Y+3	; 0x03
     a00:	92 95       	swap	r25
     a02:	96 95       	lsr	r25
     a04:	97 70       	andi	r25, 0x07	; 7
     a06:	8c 81       	ldd	r24, Y+4	; 0x04
     a08:	88 0f       	add	r24, r24
     a0a:	88 0f       	add	r24, r24
     a0c:	88 0f       	add	r24, r24
     a0e:	89 0f       	add	r24, r25
     a10:	80 93 f7 00 	sts	0x00F7, r24
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	92 95       	swap	r25
     a18:	96 95       	lsr	r25
     a1a:	97 70       	andi	r25, 0x07	; 7
     a1c:	8b 81       	ldd	r24, Y+3	; 0x03
     a1e:	88 0f       	add	r24, r24
     a20:	88 0f       	add	r24, r24
     a22:	88 0f       	add	r24, r24
     a24:	89 0f       	add	r24, r25
     a26:	80 93 f6 00 	sts	0x00F6, r24
     a2a:	99 81       	ldd	r25, Y+1	; 0x01
     a2c:	92 95       	swap	r25
     a2e:	96 95       	lsr	r25
     a30:	97 70       	andi	r25, 0x07	; 7
     a32:	8a 81       	ldd	r24, Y+2	; 0x02
     a34:	88 0f       	add	r24, r24
     a36:	88 0f       	add	r24, r24
     a38:	88 0f       	add	r24, r24
     a3a:	89 0f       	add	r24, r25
     a3c:	80 93 f5 00 	sts	0x00F5, r24
     a40:	29 81       	ldd	r18, Y+1	; 0x01
     a42:	22 0f       	add	r18, r18
     a44:	22 0f       	add	r18, r18
     a46:	22 0f       	add	r18, r18
     a48:	84 ef       	ldi	r24, 0xF4	; 244
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a50:	ef ee       	ldi	r30, 0xEF	; 239
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	30 81       	ld	r19, Z
     a56:	16 96       	adiw	r26, 0x06	; 6
     a58:	2c 91       	ld	r18, X
     a5a:	16 97       	sbiw	r26, 0x06	; 6
     a5c:	23 2b       	or	r18, r19
     a5e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     a60:	1a 96       	adiw	r26, 0x0a	; 10
     a62:	1c 92       	st	X, r1
     a64:	dc 01       	movw	r26, r24
     a66:	2c 91       	ld	r18, X
     a68:	24 60       	ori	r18, 0x04	; 4
     a6a:	2c 93       	st	X, r18
     a6c:	a0 ef       	ldi	r26, 0xF0	; 240
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	2c 91       	ld	r18, X
     a72:	2b 7f       	andi	r18, 0xFB	; 251
     a74:	2c 93       	st	X, r18
          Can_set_idemsk();
     a76:	dc 01       	movw	r26, r24
     a78:	2c 91       	ld	r18, X
     a7a:	21 60       	ori	r18, 0x01	; 1
     a7c:	2c 93       	st	X, r18
          Can_config_rx();       
     a7e:	80 81       	ld	r24, Z
     a80:	8f 73       	andi	r24, 0x3F	; 63
     a82:	80 83       	st	Z, r24
     a84:	80 81       	ld	r24, Z
     a86:	80 68       	ori	r24, 0x80	; 128
     a88:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a8a:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     a8c:	d2 c1       	rjmp	.+932    	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a8e:	1b 96       	adiw	r26, 0x0b	; 11
     a90:	8c 91       	ld	r24, X
     a92:	1b 97       	sbiw	r26, 0x0b	; 11
     a94:	88 23       	and	r24, r24
     a96:	d9 f1       	breq	.+118    	; 0xb0e <__stack+0x20f>
     a98:	14 96       	adiw	r26, 0x04	; 4
     a9a:	9c 91       	ld	r25, X
     a9c:	14 97       	sbiw	r26, 0x04	; 4
     a9e:	92 95       	swap	r25
     aa0:	96 95       	lsr	r25
     aa2:	97 70       	andi	r25, 0x07	; 7
     aa4:	15 96       	adiw	r26, 0x05	; 5
     aa6:	8c 91       	ld	r24, X
     aa8:	15 97       	sbiw	r26, 0x05	; 5
     aaa:	88 0f       	add	r24, r24
     aac:	88 0f       	add	r24, r24
     aae:	88 0f       	add	r24, r24
     ab0:	89 0f       	add	r24, r25
     ab2:	80 93 f3 00 	sts	0x00F3, r24
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 91       	ld	r25, X
     aba:	13 97       	sbiw	r26, 0x03	; 3
     abc:	92 95       	swap	r25
     abe:	96 95       	lsr	r25
     ac0:	97 70       	andi	r25, 0x07	; 7
     ac2:	14 96       	adiw	r26, 0x04	; 4
     ac4:	8c 91       	ld	r24, X
     ac6:	14 97       	sbiw	r26, 0x04	; 4
     ac8:	88 0f       	add	r24, r24
     aca:	88 0f       	add	r24, r24
     acc:	88 0f       	add	r24, r24
     ace:	89 0f       	add	r24, r25
     ad0:	80 93 f2 00 	sts	0x00F2, r24
     ad4:	12 96       	adiw	r26, 0x02	; 2
     ad6:	9c 91       	ld	r25, X
     ad8:	12 97       	sbiw	r26, 0x02	; 2
     ada:	92 95       	swap	r25
     adc:	96 95       	lsr	r25
     ade:	97 70       	andi	r25, 0x07	; 7
     ae0:	13 96       	adiw	r26, 0x03	; 3
     ae2:	8c 91       	ld	r24, X
     ae4:	13 97       	sbiw	r26, 0x03	; 3
     ae6:	88 0f       	add	r24, r24
     ae8:	88 0f       	add	r24, r24
     aea:	88 0f       	add	r24, r24
     aec:	89 0f       	add	r24, r25
     aee:	80 93 f1 00 	sts	0x00F1, r24
     af2:	12 96       	adiw	r26, 0x02	; 2
     af4:	8c 91       	ld	r24, X
     af6:	12 97       	sbiw	r26, 0x02	; 2
     af8:	88 0f       	add	r24, r24
     afa:	88 0f       	add	r24, r24
     afc:	88 0f       	add	r24, r24
     afe:	80 93 f0 00 	sts	0x00F0, r24
     b02:	ef ee       	ldi	r30, 0xEF	; 239
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	80 61       	ori	r24, 0x10	; 16
     b0a:	80 83       	st	Z, r24
     b0c:	1c c0       	rjmp	.+56     	; 0xb46 <__stack+0x247>
          else              { Can_set_std_id(cmd->id.std);}
     b0e:	12 96       	adiw	r26, 0x02	; 2
     b10:	8c 91       	ld	r24, X
     b12:	12 97       	sbiw	r26, 0x02	; 2
     b14:	86 95       	lsr	r24
     b16:	86 95       	lsr	r24
     b18:	86 95       	lsr	r24
     b1a:	13 96       	adiw	r26, 0x03	; 3
     b1c:	9c 91       	ld	r25, X
     b1e:	13 97       	sbiw	r26, 0x03	; 3
     b20:	e0 e2       	ldi	r30, 0x20	; 32
     b22:	9e 9f       	mul	r25, r30
     b24:	80 0d       	add	r24, r0
     b26:	11 24       	eor	r1, r1
     b28:	80 93 f3 00 	sts	0x00F3, r24
     b2c:	12 96       	adiw	r26, 0x02	; 2
     b2e:	8c 91       	ld	r24, X
     b30:	12 97       	sbiw	r26, 0x02	; 2
     b32:	82 95       	swap	r24
     b34:	88 0f       	add	r24, r24
     b36:	80 7e       	andi	r24, 0xE0	; 224
     b38:	80 93 f2 00 	sts	0x00F2, r24
     b3c:	ef ee       	ldi	r30, 0xEF	; 239
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	8f 7e       	andi	r24, 0xEF	; 239
     b44:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	89 83       	std	Y+1, r24	; 0x01
     b4a:	9b 81       	ldd	r25, Y+3	; 0x03
     b4c:	92 95       	swap	r25
     b4e:	96 95       	lsr	r25
     b50:	97 70       	andi	r25, 0x07	; 7
     b52:	8c 81       	ldd	r24, Y+4	; 0x04
     b54:	88 0f       	add	r24, r24
     b56:	88 0f       	add	r24, r24
     b58:	88 0f       	add	r24, r24
     b5a:	89 0f       	add	r24, r25
     b5c:	80 93 f7 00 	sts	0x00F7, r24
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	92 95       	swap	r25
     b64:	96 95       	lsr	r25
     b66:	97 70       	andi	r25, 0x07	; 7
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	88 0f       	add	r24, r24
     b6c:	88 0f       	add	r24, r24
     b6e:	88 0f       	add	r24, r24
     b70:	89 0f       	add	r24, r25
     b72:	80 93 f6 00 	sts	0x00F6, r24
     b76:	99 81       	ldd	r25, Y+1	; 0x01
     b78:	92 95       	swap	r25
     b7a:	96 95       	lsr	r25
     b7c:	97 70       	andi	r25, 0x07	; 7
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	88 0f       	add	r24, r24
     b82:	88 0f       	add	r24, r24
     b84:	88 0f       	add	r24, r24
     b86:	89 0f       	add	r24, r25
     b88:	80 93 f5 00 	sts	0x00F5, r24
     b8c:	29 81       	ldd	r18, Y+1	; 0x01
     b8e:	22 0f       	add	r18, r18
     b90:	22 0f       	add	r18, r18
     b92:	22 0f       	add	r18, r18
     b94:	84 ef       	ldi	r24, 0xF4	; 244
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b9c:	ef ee       	ldi	r30, 0xEF	; 239
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	30 81       	ld	r19, Z
     ba2:	16 96       	adiw	r26, 0x06	; 6
     ba4:	2c 91       	ld	r18, X
     ba6:	16 97       	sbiw	r26, 0x06	; 6
     ba8:	23 2b       	or	r18, r19
     baa:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     bac:	21 e0       	ldi	r18, 0x01	; 1
     bae:	1a 96       	adiw	r26, 0x0a	; 10
     bb0:	2c 93       	st	X, r18
     bb2:	dc 01       	movw	r26, r24
     bb4:	2c 91       	ld	r18, X
     bb6:	24 60       	ori	r18, 0x04	; 4
     bb8:	2c 93       	st	X, r18
     bba:	a0 ef       	ldi	r26, 0xF0	; 240
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	2c 91       	ld	r18, X
     bc0:	24 60       	ori	r18, 0x04	; 4
     bc2:	2c 93       	st	X, r18
          Can_clear_rplv();
     bc4:	20 81       	ld	r18, Z
     bc6:	2f 7d       	andi	r18, 0xDF	; 223
     bc8:	20 83       	st	Z, r18
          Can_set_idemsk();
     bca:	dc 01       	movw	r26, r24
     bcc:	2c 91       	ld	r18, X
     bce:	21 60       	ori	r18, 0x01	; 1
     bd0:	2c 93       	st	X, r18
          Can_config_rx();       
     bd2:	80 81       	ld	r24, Z
     bd4:	8f 73       	andi	r24, 0x3F	; 63
     bd6:	80 83       	st	Z, r24
     bd8:	80 81       	ld	r24, Z
     bda:	80 68       	ori	r24, 0x80	; 128
     bdc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     bde:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     be0:	28 c1       	rjmp	.+592    	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	8a ef       	ldi	r24, 0xFA	; 250
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	17 96       	adiw	r26, 0x07	; 7
     bea:	ed 91       	ld	r30, X+
     bec:	fc 91       	ld	r31, X
     bee:	18 97       	sbiw	r26, 0x08	; 8
     bf0:	e2 0f       	add	r30, r18
     bf2:	f1 1d       	adc	r31, r1
     bf4:	30 81       	ld	r19, Z
     bf6:	fc 01       	movw	r30, r24
     bf8:	30 83       	st	Z, r19
     bfa:	2f 5f       	subi	r18, 0xFF	; 255
     bfc:	16 96       	adiw	r26, 0x06	; 6
     bfe:	3c 91       	ld	r19, X
     c00:	16 97       	sbiw	r26, 0x06	; 6
     c02:	23 17       	cp	r18, r19
     c04:	88 f3       	brcs	.-30     	; 0xbe8 <__stack+0x2e9>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     c06:	19 82       	std	Y+1, r1	; 0x01
     c08:	9b 81       	ldd	r25, Y+3	; 0x03
     c0a:	92 95       	swap	r25
     c0c:	96 95       	lsr	r25
     c0e:	97 70       	andi	r25, 0x07	; 7
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	88 0f       	add	r24, r24
     c14:	88 0f       	add	r24, r24
     c16:	88 0f       	add	r24, r24
     c18:	89 0f       	add	r24, r25
     c1a:	80 93 f7 00 	sts	0x00F7, r24
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	92 95       	swap	r25
     c22:	96 95       	lsr	r25
     c24:	97 70       	andi	r25, 0x07	; 7
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	88 0f       	add	r24, r24
     c2a:	88 0f       	add	r24, r24
     c2c:	88 0f       	add	r24, r24
     c2e:	89 0f       	add	r24, r25
     c30:	80 93 f6 00 	sts	0x00F6, r24
     c34:	99 81       	ldd	r25, Y+1	; 0x01
     c36:	92 95       	swap	r25
     c38:	96 95       	lsr	r25
     c3a:	97 70       	andi	r25, 0x07	; 7
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	88 0f       	add	r24, r24
     c40:	88 0f       	add	r24, r24
     c42:	88 0f       	add	r24, r24
     c44:	89 0f       	add	r24, r25
     c46:	80 93 f5 00 	sts	0x00F5, r24
     c4a:	29 81       	ldd	r18, Y+1	; 0x01
     c4c:	22 0f       	add	r18, r18
     c4e:	22 0f       	add	r18, r18
     c50:	22 0f       	add	r18, r18
     c52:	84 ef       	ldi	r24, 0xF4	; 244
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c5a:	ef ee       	ldi	r30, 0xEF	; 239
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	30 81       	ld	r19, Z
     c60:	16 96       	adiw	r26, 0x06	; 6
     c62:	2c 91       	ld	r18, X
     c64:	16 97       	sbiw	r26, 0x06	; 6
     c66:	23 2b       	or	r18, r19
     c68:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c6a:	21 e0       	ldi	r18, 0x01	; 1
     c6c:	1a 96       	adiw	r26, 0x0a	; 10
     c6e:	2c 93       	st	X, r18
     c70:	dc 01       	movw	r26, r24
     c72:	2c 91       	ld	r18, X
     c74:	24 60       	ori	r18, 0x04	; 4
     c76:	2c 93       	st	X, r18
     c78:	a0 ef       	ldi	r26, 0xF0	; 240
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	2c 91       	ld	r18, X
     c7e:	24 60       	ori	r18, 0x04	; 4
     c80:	2c 93       	st	X, r18
          Can_set_rplv();
     c82:	20 81       	ld	r18, Z
     c84:	20 62       	ori	r18, 0x20	; 32
     c86:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c88:	dc 01       	movw	r26, r24
     c8a:	2c 91       	ld	r18, X
     c8c:	2e 7f       	andi	r18, 0xFE	; 254
     c8e:	2c 93       	st	X, r18
          Can_config_rx();       
     c90:	80 81       	ld	r24, Z
     c92:	8f 73       	andi	r24, 0x3F	; 63
     c94:	80 83       	st	Z, r24
     c96:	80 81       	ld	r24, Z
     c98:	80 68       	ori	r24, 0x80	; 128
     c9a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c9c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     c9e:	c9 c0       	rjmp	.+402    	; 0xe32 <__stack+0x533>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ca0:	1b 96       	adiw	r26, 0x0b	; 11
     ca2:	8c 91       	ld	r24, X
     ca4:	1b 97       	sbiw	r26, 0x0b	; 11
     ca6:	88 23       	and	r24, r24
     ca8:	d9 f1       	breq	.+118    	; 0xd20 <__stack+0x421>
     caa:	14 96       	adiw	r26, 0x04	; 4
     cac:	9c 91       	ld	r25, X
     cae:	14 97       	sbiw	r26, 0x04	; 4
     cb0:	92 95       	swap	r25
     cb2:	96 95       	lsr	r25
     cb4:	97 70       	andi	r25, 0x07	; 7
     cb6:	15 96       	adiw	r26, 0x05	; 5
     cb8:	8c 91       	ld	r24, X
     cba:	15 97       	sbiw	r26, 0x05	; 5
     cbc:	88 0f       	add	r24, r24
     cbe:	88 0f       	add	r24, r24
     cc0:	88 0f       	add	r24, r24
     cc2:	89 0f       	add	r24, r25
     cc4:	80 93 f3 00 	sts	0x00F3, r24
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	9c 91       	ld	r25, X
     ccc:	13 97       	sbiw	r26, 0x03	; 3
     cce:	92 95       	swap	r25
     cd0:	96 95       	lsr	r25
     cd2:	97 70       	andi	r25, 0x07	; 7
     cd4:	14 96       	adiw	r26, 0x04	; 4
     cd6:	8c 91       	ld	r24, X
     cd8:	14 97       	sbiw	r26, 0x04	; 4
     cda:	88 0f       	add	r24, r24
     cdc:	88 0f       	add	r24, r24
     cde:	88 0f       	add	r24, r24
     ce0:	89 0f       	add	r24, r25
     ce2:	80 93 f2 00 	sts	0x00F2, r24
     ce6:	12 96       	adiw	r26, 0x02	; 2
     ce8:	9c 91       	ld	r25, X
     cea:	12 97       	sbiw	r26, 0x02	; 2
     cec:	92 95       	swap	r25
     cee:	96 95       	lsr	r25
     cf0:	97 70       	andi	r25, 0x07	; 7
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	8c 91       	ld	r24, X
     cf6:	13 97       	sbiw	r26, 0x03	; 3
     cf8:	88 0f       	add	r24, r24
     cfa:	88 0f       	add	r24, r24
     cfc:	88 0f       	add	r24, r24
     cfe:	89 0f       	add	r24, r25
     d00:	80 93 f1 00 	sts	0x00F1, r24
     d04:	12 96       	adiw	r26, 0x02	; 2
     d06:	8c 91       	ld	r24, X
     d08:	12 97       	sbiw	r26, 0x02	; 2
     d0a:	88 0f       	add	r24, r24
     d0c:	88 0f       	add	r24, r24
     d0e:	88 0f       	add	r24, r24
     d10:	80 93 f0 00 	sts	0x00F0, r24
     d14:	ef ee       	ldi	r30, 0xEF	; 239
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 61       	ori	r24, 0x10	; 16
     d1c:	80 83       	st	Z, r24
     d1e:	1c c0       	rjmp	.+56     	; 0xd58 <__stack+0x459>
          else              { Can_set_std_id(cmd->id.std);}
     d20:	12 96       	adiw	r26, 0x02	; 2
     d22:	8c 91       	ld	r24, X
     d24:	12 97       	sbiw	r26, 0x02	; 2
     d26:	86 95       	lsr	r24
     d28:	86 95       	lsr	r24
     d2a:	86 95       	lsr	r24
     d2c:	13 96       	adiw	r26, 0x03	; 3
     d2e:	9c 91       	ld	r25, X
     d30:	13 97       	sbiw	r26, 0x03	; 3
     d32:	e0 e2       	ldi	r30, 0x20	; 32
     d34:	9e 9f       	mul	r25, r30
     d36:	80 0d       	add	r24, r0
     d38:	11 24       	eor	r1, r1
     d3a:	80 93 f3 00 	sts	0x00F3, r24
     d3e:	12 96       	adiw	r26, 0x02	; 2
     d40:	8c 91       	ld	r24, X
     d42:	12 97       	sbiw	r26, 0x02	; 2
     d44:	82 95       	swap	r24
     d46:	88 0f       	add	r24, r24
     d48:	80 7e       	andi	r24, 0xE0	; 224
     d4a:	80 93 f2 00 	sts	0x00F2, r24
     d4e:	ef ee       	ldi	r30, 0xEF	; 239
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 7e       	andi	r24, 0xEF	; 239
     d56:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     d58:	16 96       	adiw	r26, 0x06	; 6
     d5a:	8c 91       	ld	r24, X
     d5c:	16 97       	sbiw	r26, 0x06	; 6
     d5e:	88 23       	and	r24, r24
     d60:	91 f0       	breq	.+36     	; 0xd86 <__stack+0x487>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	8a ef       	ldi	r24, 0xFA	; 250
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	17 96       	adiw	r26, 0x07	; 7
     d6a:	ed 91       	ld	r30, X+
     d6c:	fc 91       	ld	r31, X
     d6e:	18 97       	sbiw	r26, 0x08	; 8
     d70:	e2 0f       	add	r30, r18
     d72:	f1 1d       	adc	r31, r1
     d74:	30 81       	ld	r19, Z
     d76:	fc 01       	movw	r30, r24
     d78:	30 83       	st	Z, r19
     d7a:	2f 5f       	subi	r18, 0xFF	; 255
     d7c:	16 96       	adiw	r26, 0x06	; 6
     d7e:	3c 91       	ld	r19, X
     d80:	16 97       	sbiw	r26, 0x06	; 6
     d82:	23 17       	cp	r18, r19
     d84:	88 f3       	brcs	.-30     	; 0xd68 <__stack+0x469>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	9b 81       	ldd	r25, Y+3	; 0x03
     d8c:	92 95       	swap	r25
     d8e:	96 95       	lsr	r25
     d90:	97 70       	andi	r25, 0x07	; 7
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	88 0f       	add	r24, r24
     d96:	88 0f       	add	r24, r24
     d98:	88 0f       	add	r24, r24
     d9a:	89 0f       	add	r24, r25
     d9c:	80 93 f7 00 	sts	0x00F7, r24
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	92 95       	swap	r25
     da4:	96 95       	lsr	r25
     da6:	97 70       	andi	r25, 0x07	; 7
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	88 0f       	add	r24, r24
     dac:	88 0f       	add	r24, r24
     dae:	88 0f       	add	r24, r24
     db0:	89 0f       	add	r24, r25
     db2:	80 93 f6 00 	sts	0x00F6, r24
     db6:	99 81       	ldd	r25, Y+1	; 0x01
     db8:	92 95       	swap	r25
     dba:	96 95       	lsr	r25
     dbc:	97 70       	andi	r25, 0x07	; 7
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	88 0f       	add	r24, r24
     dc2:	88 0f       	add	r24, r24
     dc4:	88 0f       	add	r24, r24
     dc6:	89 0f       	add	r24, r25
     dc8:	80 93 f5 00 	sts	0x00F5, r24
     dcc:	29 81       	ldd	r18, Y+1	; 0x01
     dce:	22 0f       	add	r18, r18
     dd0:	22 0f       	add	r18, r18
     dd2:	22 0f       	add	r18, r18
     dd4:	84 ef       	ldi	r24, 0xF4	; 244
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ddc:	ef ee       	ldi	r30, 0xEF	; 239
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	30 81       	ld	r19, Z
     de2:	16 96       	adiw	r26, 0x06	; 6
     de4:	2c 91       	ld	r18, X
     de6:	16 97       	sbiw	r26, 0x06	; 6
     de8:	23 2b       	or	r18, r19
     dea:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	1a 96       	adiw	r26, 0x0a	; 10
     df0:	2c 93       	st	X, r18
     df2:	dc 01       	movw	r26, r24
     df4:	2c 91       	ld	r18, X
     df6:	24 60       	ori	r18, 0x04	; 4
     df8:	2c 93       	st	X, r18
     dfa:	a0 ef       	ldi	r26, 0xF0	; 240
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	2c 91       	ld	r18, X
     e00:	24 60       	ori	r18, 0x04	; 4
     e02:	2c 93       	st	X, r18
          Can_set_rplv();
     e04:	20 81       	ld	r18, Z
     e06:	20 62       	ori	r18, 0x20	; 32
     e08:	20 83       	st	Z, r18
          Can_set_idemsk();
     e0a:	dc 01       	movw	r26, r24
     e0c:	2c 91       	ld	r18, X
     e0e:	21 60       	ori	r18, 0x01	; 1
     e10:	2c 93       	st	X, r18
          Can_config_rx();       
     e12:	80 81       	ld	r24, Z
     e14:	8f 73       	andi	r24, 0x3F	; 63
     e16:	80 83       	st	Z, r24
     e18:	80 81       	ld	r24, Z
     e1a:	80 68       	ori	r24, 0x80	; 128
     e1c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e1e:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     e20:	08 c0       	rjmp	.+16     	; 0xe32 <__stack+0x533>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
     e22:	19 96       	adiw	r26, 0x09	; 9
     e24:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e26:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <__stack+0x533>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
     e2a:	8f e1       	ldi	r24, 0x1F	; 31
     e2c:	19 96       	adiw	r26, 0x09	; 9
     e2e:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
     e30:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
     e32:	0f 90       	pop	r0
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
     e40:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
     e42:	88 23       	and	r24, r24
     e44:	09 f4       	brne	.+2      	; 0xe48 <can_get_status+0xe>
     e46:	e3 c0       	rjmp	.+454    	; 0x100e <can_get_status+0x1d4>
     e48:	8f 31       	cpi	r24, 0x1F	; 31
     e4a:	09 f4       	brne	.+2      	; 0xe4e <can_get_status+0x14>
     e4c:	e2 c0       	rjmp	.+452    	; 0x1012 <can_get_status+0x1d8>
     e4e:	8f 3f       	cpi	r24, 0xFF	; 255
     e50:	09 f4       	brne	.+2      	; 0xe54 <can_get_status+0x1a>
     e52:	e1 c0       	rjmp	.+450    	; 0x1016 <can_get_status+0x1dc>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
     e54:	62 95       	swap	r22
     e56:	60 7f       	andi	r22, 0xF0	; 240
     e58:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
     e5c:	0e 94 b4 00 	call	0x168	; 0x168 <can_get_mob_status>
    
    switch (a_status)
     e60:	80 32       	cpi	r24, 0x20	; 32
     e62:	61 f0       	breq	.+24     	; 0xe7c <can_get_status+0x42>
     e64:	20 f4       	brcc	.+8      	; 0xe6e <can_get_status+0x34>
     e66:	88 23       	and	r24, r24
     e68:	09 f4       	brne	.+2      	; 0xe6c <can_get_status+0x32>
     e6a:	d7 c0       	rjmp	.+430    	; 0x101a <can_get_status+0x1e0>
     e6c:	c6 c0       	rjmp	.+396    	; 0xffa <can_get_status+0x1c0>
     e6e:	80 34       	cpi	r24, 0x40	; 64
     e70:	09 f4       	brne	.+2      	; 0xe74 <can_get_status+0x3a>
     e72:	b8 c0       	rjmp	.+368    	; 0xfe4 <can_get_status+0x1aa>
     e74:	80 3a       	cpi	r24, 0xA0	; 160
     e76:	09 f4       	brne	.+2      	; 0xe7a <can_get_status+0x40>
     e78:	5c c0       	rjmp	.+184    	; 0xf32 <can_get_status+0xf8>
     e7a:	bf c0       	rjmp	.+382    	; 0xffa <can_get_status+0x1c0>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_toggle(LED7);	//Toggle LED0 when the appropriate message is received.
     e7c:	87 e0       	ldi	r24, 0x07	; 7
     e7e:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
			delay_ms(100);
     e82:	84 e6       	ldi	r24, 0x64	; 100
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
			LED_toggle(LED7);
     e8a:	87 e0       	ldi	r24, 0x07	; 7
     e8c:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
			delay_ms(100);
     e90:	84 e6       	ldi	r24, 0x64	; 100
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
	    
            cmd->ctrl.rtr = Can_get_rtr();
     e98:	80 91 f0 00 	lds	r24, 0x00F0
     e9c:	82 fb       	bst	r24, 2
     e9e:	88 27       	eor	r24, r24
     ea0:	80 f9       	bld	r24, 0
     ea2:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     ea4:	80 91 ef 00 	lds	r24, 0x00EF
     ea8:	84 ff       	sbrs	r24, 4
     eaa:	2d c0       	rjmp	.+90     	; 0xf06 <can_get_status+0xcc>
            {
	            cmd->ctrl.ide = 1; // extended frame
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
     eb0:	e3 ef       	ldi	r30, 0xF3	; 243
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	86 95       	lsr	r24
     eb8:	86 95       	lsr	r24
     eba:	86 95       	lsr	r24
     ebc:	8d 83       	std	Y+5, r24	; 0x05
     ebe:	a2 ef       	ldi	r26, 0xF2	; 242
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	8c 91       	ld	r24, X
     ec4:	90 81       	ld	r25, Z
     ec6:	86 95       	lsr	r24
     ec8:	86 95       	lsr	r24
     eca:	86 95       	lsr	r24
     ecc:	20 e2       	ldi	r18, 0x20	; 32
     ece:	92 9f       	mul	r25, r18
     ed0:	80 0d       	add	r24, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	8c 83       	std	Y+4, r24	; 0x04
     ed6:	e1 ef       	ldi	r30, 0xF1	; 241
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	9c 91       	ld	r25, X
     ede:	86 95       	lsr	r24
     ee0:	86 95       	lsr	r24
     ee2:	86 95       	lsr	r24
     ee4:	20 e2       	ldi	r18, 0x20	; 32
     ee6:	92 9f       	mul	r25, r18
     ee8:	80 0d       	add	r24, r0
     eea:	11 24       	eor	r1, r1
     eec:	8b 83       	std	Y+3, r24	; 0x03
     eee:	80 91 f0 00 	lds	r24, 0x00F0
     ef2:	90 81       	ld	r25, Z
     ef4:	86 95       	lsr	r24
     ef6:	86 95       	lsr	r24
     ef8:	86 95       	lsr	r24
     efa:	20 e2       	ldi	r18, 0x20	; 32
     efc:	92 9f       	mul	r25, r18
     efe:	80 0d       	add	r24, r0
     f00:	11 24       	eor	r1, r1
     f02:	8a 83       	std	Y+2, r24	; 0x02
     f04:	07 c0       	rjmp	.+14     	; 0xf14 <can_get_status+0xda>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
     f06:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
     f08:	e3 ef       	ldi	r30, 0xF3	; 243
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 91 f2 00 	lds	r24, 0x00F2
     f12:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
     f14:	80 e2       	ldi	r24, 0x20	; 32
     f16:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
     f18:	8f 81       	ldd	r24, Y+7	; 0x07
     f1a:	98 85       	ldd	r25, Y+8	; 0x08
     f1c:	0e 94 ca 00 	call	0x194	; 0x194 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
     f20:	ef ee       	ldi	r30, 0xEF	; 239
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8f 73       	andi	r24, 0x3F	; 63
     f28:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
     f2a:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
     f2e:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
     f30:	75 c0       	rjmp	.+234    	; 0x101c <can_get_status+0x1e2>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
     f32:	80 91 f0 00 	lds	r24, 0x00F0
     f36:	82 fb       	bst	r24, 2
     f38:	88 27       	eor	r24, r24
     f3a:	80 f9       	bld	r24, 0
     f3c:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     f3e:	80 91 ef 00 	lds	r24, 0x00EF
     f42:	84 ff       	sbrs	r24, 4
     f44:	2d c0       	rjmp	.+90     	; 0xfa0 <can_get_status+0x166>
            {
                cmd->ctrl.ide = 1; // extended frame
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
     f4a:	e3 ef       	ldi	r30, 0xF3	; 243
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	86 95       	lsr	r24
     f52:	86 95       	lsr	r24
     f54:	86 95       	lsr	r24
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	a2 ef       	ldi	r26, 0xF2	; 242
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	8c 91       	ld	r24, X
     f5e:	90 81       	ld	r25, Z
     f60:	86 95       	lsr	r24
     f62:	86 95       	lsr	r24
     f64:	86 95       	lsr	r24
     f66:	20 e2       	ldi	r18, 0x20	; 32
     f68:	92 9f       	mul	r25, r18
     f6a:	80 0d       	add	r24, r0
     f6c:	11 24       	eor	r1, r1
     f6e:	8c 83       	std	Y+4, r24	; 0x04
     f70:	e1 ef       	ldi	r30, 0xF1	; 241
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	9c 91       	ld	r25, X
     f78:	86 95       	lsr	r24
     f7a:	86 95       	lsr	r24
     f7c:	86 95       	lsr	r24
     f7e:	20 e2       	ldi	r18, 0x20	; 32
     f80:	92 9f       	mul	r25, r18
     f82:	80 0d       	add	r24, r0
     f84:	11 24       	eor	r1, r1
     f86:	8b 83       	std	Y+3, r24	; 0x03
     f88:	80 91 f0 00 	lds	r24, 0x00F0
     f8c:	90 81       	ld	r25, Z
     f8e:	86 95       	lsr	r24
     f90:	86 95       	lsr	r24
     f92:	86 95       	lsr	r24
     f94:	20 e2       	ldi	r18, 0x20	; 32
     f96:	92 9f       	mul	r25, r18
     f98:	80 0d       	add	r24, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	8a 83       	std	Y+2, r24	; 0x02
     f9e:	13 c0       	rjmp	.+38     	; 0xfc6 <can_get_status+0x18c>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
     fa0:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
     fa2:	e3 ef       	ldi	r30, 0xF3	; 243
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	82 95       	swap	r24
     faa:	86 95       	lsr	r24
     fac:	87 70       	andi	r24, 0x07	; 7
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	80 91 f2 00 	lds	r24, 0x00F2
     fb4:	90 81       	ld	r25, Z
     fb6:	99 0f       	add	r25, r25
     fb8:	99 0f       	add	r25, r25
     fba:	99 0f       	add	r25, r25
     fbc:	82 95       	swap	r24
     fbe:	86 95       	lsr	r24
     fc0:	87 70       	andi	r24, 0x07	; 7
     fc2:	89 0f       	add	r24, r25
     fc4:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
     fc6:	80 ea       	ldi	r24, 0xA0	; 160
     fc8:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
     fca:	8f 81       	ldd	r24, Y+7	; 0x07
     fcc:	98 85       	ldd	r25, Y+8	; 0x08
     fce:	0e 94 ca 00 	call	0x194	; 0x194 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
     fd2:	ef ee       	ldi	r30, 0xEF	; 239
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8f 73       	andi	r24, 0x3F	; 63
     fda:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
     fdc:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
     fe0:	80 ea       	ldi	r24, 0xA0	; 160
            break;
     fe2:	1c c0       	rjmp	.+56     	; 0x101c <can_get_status+0x1e2>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
     fe4:	80 e4       	ldi	r24, 0x40	; 64
     fe6:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
     fe8:	ef ee       	ldi	r30, 0xEF	; 239
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8f 73       	andi	r24, 0x3F	; 63
     ff0:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     ff2:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
     ff6:	80 e4       	ldi	r24, 0x40	; 64
            break;
     ff8:	11 c0       	rjmp	.+34     	; 0x101c <can_get_status+0x1e2>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
     ffa:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
     ffc:	ef ee       	ldi	r30, 0xEF	; 239
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	8f 73       	andi	r24, 0x3F	; 63
    1004:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1006:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    100a:	82 e0       	ldi	r24, 0x02	; 2
            break;
    100c:	07 c0       	rjmp	.+14     	; 0x101c <can_get_status+0x1e2>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	05 c0       	rjmp	.+10     	; 0x101c <can_get_status+0x1e2>
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	03 c0       	rjmp	.+6      	; 0x101c <can_get_status+0x1e2>
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	01 c0       	rjmp	.+2      	; 0x101c <can_get_status+0x1e2>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    101a:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <LED_toggle>:
	LEDPORT |= (1 << LED);
}

void LED_toggle(uint8_t LED) {
	
	if(LED == 7)
    1022:	87 30       	cpi	r24, 0x07	; 7
    1024:	29 f4       	brne	.+10     	; 0x1030 <LED_toggle+0xe>
	{
		PORTD ^= 0x01;
    1026:	2b b1       	in	r18, 0x0b	; 11
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	92 27       	eor	r25, r18
    102c:	9b b9       	out	0x0b, r25	; 11
    102e:	07 c0       	rjmp	.+14     	; 0x103e <LED_toggle+0x1c>
	}
	if(LED == 3)
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	29 f4       	brne	.+10     	; 0x103e <LED_toggle+0x1c>
	{
		PORTC ^= 0x01;
    1034:	98 b1       	in	r25, 0x08	; 8
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	89 27       	eor	r24, r25
    103a:	88 b9       	out	0x08, r24	; 8
    103c:	08 95       	ret
	}
	else
		LEDPORT ^= (1 << LED);
    103e:	45 b1       	in	r20, 0x05	; 5
    1040:	21 e0       	ldi	r18, 0x01	; 1
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	b9 01       	movw	r22, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <LED_toggle+0x2a>
    1048:	66 0f       	add	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <LED_toggle+0x26>
    1050:	cb 01       	movw	r24, r22
    1052:	84 27       	eor	r24, r20
    1054:	85 b9       	out	0x05, r24	; 5
    1056:	08 95       	ret

00001058 <main>:
	}
}

void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    1058:	e1 e6       	ldi	r30, 0x61	; 97
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 e8       	ldi	r24, 0x80	; 128
    105e:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1060:	10 82       	st	Z, r1
}

void io_init(void) {
	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1062:	8e ef       	ldi	r24, 0xFE	; 254
    1064:	84 b9       	out	0x04, r24	; 4
	//LED_Reg_Write(0x00); // clear all LEDs
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x01;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    106a:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communicatons.
    106c:	99 e0       	ldi	r25, 0x09	; 9
    106e:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    1070:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    1072:	1d b8       	out	0x0d, r1	; 13
	PORTD = 0x00;
    1074:	1b b8       	out	0x0b, r1	; 11
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    1076:	0e 94 12 09 	call	0x1224	; 0x1224 <timer_init>
	can_init(0);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <can_init>
	adc_initialize();
    1080:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	uint8_t spi_flag = 0;	// 0 = sending, 1 = receiving.

	spi_s_message = 0xAA;
	
	// Enable global interrupts for Timer execution
	sei();
    1084:	78 94       	sei
	
	// Flash LEDs to indicate program startup
	LED_toggle(LED3);
    1086:	83 e0       	ldi	r24, 0x03	; 3
    1088:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
	delay_ms(500);
    108c:	84 ef       	ldi	r24, 0xF4	; 244
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
	LED_toggle(LED3);
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
	delay_ms(250);
    109a:	8a ef       	ldi	r24, 0xFA	; 250
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
    10a2:	e6 e3       	ldi	r30, 0x36	; 54
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	8e e3       	ldi	r24, 0x3E	; 62
    10a8:	91 e0       	ldi	r25, 0x01	; 1
	//LED_toggle(LED6);
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
    10aa:	11 92       	st	Z+, r1
	delay_ms(500);
	LED_toggle(LED3);
	delay_ms(250);
	//LED_toggle(LED6);
	
	for (i = 0; i < 8; i ++)
    10ac:	e8 17       	cp	r30, r24
    10ae:	f9 07       	cpc	r31, r25
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <main+0x52>
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
	}
			
	send_now = 0;
    10b2:	10 92 2c 01 	sts	0x012C, r1
	send_hk = 0;
    10b6:	10 92 35 01 	sts	0x0135, r1
	send_data = 0;	
    10ba:	10 92 46 01 	sts	0x0146, r1
	
	/*		Initialize CAN Message Objects			*/
	//can_init_mobs();
	
	/*		Initialize SPI communications			*/
	spi_initialize();
    10be:	0e 94 e7 08 	call	0x11ce	; 0x11ce <spi_initialize>
    10c2:	0f 2e       	mov	r0, r31
    10c4:	f0 e1       	ldi	r31, 0x10	; 16
    10c6:	6f 2e       	mov	r6, r31
    10c8:	f1 e0       	ldi	r31, 0x01	; 1
    10ca:	7f 2e       	mov	r7, r31
    10cc:	f0 2d       	mov	r31, r0
    10ce:	c8 e1       	ldi	r28, 0x18	; 24
    10d0:	d1 e0       	ldi	r29, 0x01	; 1
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    10d2:	0f 2e       	mov	r0, r31
    10d4:	fb ea       	ldi	r31, 0xAB	; 171
    10d6:	bf 2e       	mov	r11, r31
    10d8:	f0 2d       	mov	r31, r0
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    10da:	0f 2e       	mov	r0, r31
    10dc:	f0 ef       	ldi	r31, 0xF0	; 240
    10de:	cf 2e       	mov	r12, r31
    10e0:	f0 2d       	mov	r31, r0
    10e2:	96 2c       	mov	r9, r6
    10e4:	a7 2c       	mov	r10, r7
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
			send_arr[3] = 0x55;
    10e6:	0f 2e       	mov	r0, r31
    10e8:	f3 e1       	ldi	r31, 0x13	; 19
    10ea:	ef 2e       	mov	r14, r31
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
    10ee:	ff 2e       	mov	r15, r31
    10f0:	f0 2d       	mov	r31, r0
    10f2:	0f 2e       	mov	r0, r31
    10f4:	f5 e5       	ldi	r31, 0x55	; 85
    10f6:	8f 2e       	mov	r8, r31
    10f8:	f0 2d       	mov	r31, r0
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 */
		//can_check_general();
		
		/* CHECK FOR HOUSEKEEPING REQUEST */
		//can_check_housekeep();
		LED_toggle(LED7);
    10fa:	87 e0       	ldi	r24, 0x07	; 7
    10fc:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
		delay_ms(125);
    1100:	8d e7       	ldi	r24, 0x7D	; 125
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
		LED_toggle(LED7);
    1108:	87 e0       	ldi	r24, 0x07	; 7
    110a:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
		delay_ms(125);
    110e:	8d e7       	ldi	r24, 0x7D	; 125
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
		//
		//if(!spi_flag)
		//{
			spi_char = spi_transfer(spi_s_message);		// Send a character to the slave.
    1116:	8a ea       	ldi	r24, 0xAA	; 170
    1118:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <spi_transfer>
    111c:	18 2f       	mov	r17, r24
			if(spi_char)
    111e:	88 23       	and	r24, r24
    1120:	f1 f0       	breq	.+60     	; 0x115e <main+0x106>
			{
				LED_toggle(LED3);					// Toggle LED3 when a character was sent properly.
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
				delay_ms(125);
    1128:	8d e7       	ldi	r24, 0x7D	; 125
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
				LED_toggle(LED3);
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
				delay_ms(125);
    1136:	8d e7       	ldi	r24, 0x7D	; 125
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
				spi_flag = 1;
			}
			
			if(spi_char == 0xFF)
    113e:	1f 3f       	cpi	r17, 0xFF	; 255
    1140:	71 f4       	brne	.+28     	; 0x115e <main+0x106>
			{				
				LED_toggle(LED6);					// Toggle LED6 when the correct character was received.
    1142:	86 e0       	ldi	r24, 0x06	; 6
    1144:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
				delay_ms(125);
    1148:	8d e7       	ldi	r24, 0x7D	; 125
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
				LED_toggle(LED6);
    1150:	86 e0       	ldi	r24, 0x06	; 6
    1152:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_toggle>
				delay_ms(125);
    1156:	8d e7       	ldi	r24, 0x7D	; 125
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 2c 09 	call	0x1258	; 0x1258 <delay_ms>
		/* CHECK FOR AN INCOMING SPI BYTE */

		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    115e:	80 91 2c 01 	lds	r24, 0x012C
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	69 f4       	brne	.+26     	; 0x1180 <main+0x128>
    1166:	e9 2d       	mov	r30, r9
    1168:	fa 2d       	mov	r31, r10
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    116a:	b1 92       	st	Z+, r11
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
    116c:	ec 17       	cp	r30, r28
    116e:	fd 07       	cpc	r31, r29
    1170:	e1 f7       	brne	.-8      	; 0x116a <main+0x112>
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1172:	61 e1       	ldi	r22, 0x11	; 17
    1174:	89 2d       	mov	r24, r9
    1176:	9a 2d       	mov	r25, r10
    1178:	0e 94 70 00 	call	0xe0	; 0xe0 <can_send_message>
			send_now = 0;
    117c:	10 92 2c 01 	sts	0x012C, r1
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
    1180:	80 91 35 01 	lds	r24, 0x0135
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	69 f4       	brne	.+26     	; 0x11a2 <main+0x14a>
    1188:	e9 2d       	mov	r30, r9
    118a:	fa 2d       	mov	r31, r10
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    118c:	c1 92       	st	Z+, r12
			send_now = 0;
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    118e:	ec 17       	cp	r30, r28
    1190:	fd 07       	cpc	r31, r29
    1192:	e1 f7       	brne	.-8      	; 0x118c <main+0x134>
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1194:	60 e1       	ldi	r22, 0x10	; 16
    1196:	89 2d       	mov	r24, r9
    1198:	9a 2d       	mov	r25, r10
    119a:	0e 94 70 00 	call	0xe0	; 0xe0 <can_send_message>
			send_hk = 0;
    119e:	10 92 35 01 	sts	0x0135, r1
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
    11a2:	80 91 46 01 	lds	r24, 0x0146
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	09 f0       	breq	.+2      	; 0x11ac <main+0x154>
    11aa:	a7 cf       	rjmp	.-178    	; 0x10fa <main+0xa2>
    11ac:	f3 01       	movw	r30, r6
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    11ae:	11 92       	st	Z+, r1
			send_hk = 0;
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    11b0:	ec 17       	cp	r30, r28
    11b2:	fd 07       	cpc	r31, r29
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <main+0x156>
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
    11b6:	c3 01       	movw	r24, r6
    11b8:	0e 94 67 00 	call	0xce	; 0xce <adc_read>
			send_arr[3] = 0x55;
    11bc:	f7 01       	movw	r30, r14
    11be:	80 82       	st	Z, r8
			
			can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    11c0:	6a e0       	ldi	r22, 0x0A	; 10
    11c2:	c3 01       	movw	r24, r6
    11c4:	0e 94 70 00 	call	0xe0	; 0xe0 <can_send_message>
			send_data = 0;
    11c8:	10 92 46 01 	sts	0x0146, r1
    11cc:	96 cf       	rjmp	.-212    	; 0x10fa <main+0xa2>

000011ce <spi_initialize>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    11ce:	85 b7       	in	r24, 0x35	; 53
    11d0:	8f 77       	andi	r24, 0x7F	; 127
    11d2:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle)
	temp = 0b01011111;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    11d4:	8f e5       	ldi	r24, 0x5F	; 95
    11d6:	8c bd       	out	0x2c, r24	; 44
    11d8:	08 95       	ret

000011da <SS_set_high>:
/*																		*/
/************************************************************************/

void SS_set_high(void) 
{
	PORTD &= (1 << 3);
    11da:	8b b1       	in	r24, 0x0b	; 11
    11dc:	88 70       	andi	r24, 0x08	; 8
    11de:	8b b9       	out	0x0b, r24	; 11
    11e0:	08 95       	ret

000011e2 <SS_set_low>:
/*																		*/
/************************************************************************/

void SS_set_low(void)
{
	PORTD &= (0 << 3);
    11e2:	8b b1       	in	r24, 0x0b	; 11
    11e4:	1b b8       	out	0x0b, r1	; 11
    11e6:	08 95       	ret

000011e8 <spi_transfer>:
/*		is completed. If the transmission times out, it returns 0.		*/
/*		A successful transmission corresponds to a return value of 1.	*/
/*																		*/
/************************************************************************/
uint8_t spi_transfer(uint8_t message)
{
    11e8:	cf 93       	push	r28
    11ea:	c8 2f       	mov	r28, r24
	uint8_t receive_char;
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	SS_set_high();
    11ec:	0e 94 ed 08 	call	0x11da	; 0x11da <SS_set_high>
	*reg_ptr = message;
    11f0:	ce bd       	out	0x2e, r28	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    11f2:	0d b4       	in	r0, 0x2d	; 45
    11f4:	07 fe       	sbrs	r0, 7
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <spi_transfer+0x18>
	{
		if(!timeout--)
			SS_set_low();
			return 0;						// Something went wrong, so the function times out.
	}	
	SS_set_low();
    11f8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <SS_set_low>
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    11fc:	8e b5       	in	r24, 0x2e	; 46
	
	return receive_char;					// Transmission was successful, return the character that was received.
    11fe:	01 c0       	rjmp	.+2      	; 0x1202 <spi_transfer+0x1a>

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
	{
		if(!timeout--)
			SS_set_low();
			return 0;						// Something went wrong, so the function times out.
    1200:	80 e0       	ldi	r24, 0x00	; 0
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
	
	return receive_char;					// Transmission was successful, return the character that was received.
}
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	8f 93       	push	r24
	CTC_flag = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 51 01 	sts	0x0151, r24
}
    1218:	8f 91       	pop	r24
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	0f 90       	pop	r0
    1220:	1f 90       	pop	r1
    1222:	18 95       	reti

00001224 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    1224:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    1228:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    122c:	8a e0       	ldi	r24, 0x0A	; 10
    122e:	80 93 81 00 	sts	0x0081, r24
    1232:	08 95       	ret

00001234 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    1234:	10 92 51 01 	sts	0x0151, r1
	TCNT1 = 0x0000; //Clear timer
    1238:	10 92 85 00 	sts	0x0085, r1
    123c:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    1240:	90 93 89 00 	sts	0x0089, r25
    1244:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    124e:	80 91 51 01 	lds	r24, 0x0151
    1252:	88 23       	and	r24, r24
    1254:	e1 f3       	breq	.-8      	; 0x124e <delay_us+0x1a>
}
    1256:	08 95       	ret

00001258 <delay_ms>:

void delay_ms(uint16_t ms) {
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	51 f0       	breq	.+20     	; 0x127a <delay_ms+0x22>
    1266:	c0 e0       	ldi	r28, 0x00	; 0
    1268:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    126a:	88 ee       	ldi	r24, 0xE8	; 232
    126c:	93 e0       	ldi	r25, 0x03	; 3
    126e:	0e 94 1a 09 	call	0x1234	; 0x1234 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    1272:	21 96       	adiw	r28, 0x01	; 1
    1274:	c0 17       	cp	r28, r16
    1276:	d1 07       	cpc	r29, r17
    1278:	c1 f7       	brne	.-16     	; 0x126a <delay_ms+0x12>
		delay_us(1000);
	}
}
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <__tablejump2__>:
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31

00001288 <__tablejump__>:
    1288:	05 90       	lpm	r0, Z+
    128a:	f4 91       	lpm	r31, Z
    128c:	e0 2d       	mov	r30, r0
    128e:	09 94       	ijmp

00001290 <_exit>:
    1290:	f8 94       	cli

00001292 <__stop_program>:
    1292:	ff cf       	rjmp	.-2      	; 0x1292 <__stop_program>
