
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000236c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002bb  00800100  00800100  000023e0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000002e0  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000445e  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000011f6  00000000  00000000  00006b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000013f0  00000000  00000000  00007d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000720  00000000  00000000  00009134  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b40  00000000  00000000  00009854  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000023c4  00000000  00000000  0000a394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000278  00000000  00000000  0000c758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__vector_12>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 43 10 	jmp	0x2086	; 0x2086 <__vector_15>
      40:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__vector_16>
      44:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__vector_17>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      7c:	d8 00       	.word	0x00d8	; ????
      7e:	db 00       	.word	0x00db	; ????
      80:	e8 00       	.word	0x00e8	; ????
      82:	5f 01       	movw	r10, r30
      84:	eb 00       	.word	0x00eb	; ????
      86:	5f 01       	movw	r10, r30
      88:	f8 00       	.word	0x00f8	; ????
      8a:	5f 01       	movw	r10, r30
      8c:	05 01       	movw	r0, r10
      8e:	12 01       	movw	r2, r4
      90:	1f 01       	movw	r2, r30
      92:	2c 01       	movw	r4, r24
      94:	2f 01       	movw	r4, r30
      96:	5f 01       	movw	r10, r30
      98:	3c 01       	movw	r6, r24
      9a:	5f 01       	movw	r10, r30
      9c:	5f 01       	movw	r10, r30
      9e:	5c 01       	movw	r10, r24
      a0:	5f 01       	movw	r10, r30
      a2:	59 01       	movw	r10, r18
      a4:	bc 04       	cpc	r11, r12
      a6:	4e 05       	cpc	r20, r14
      a8:	d8 05       	cpc	r29, r8
      aa:	4c 06       	cpc	r4, r28
      ac:	8c 06       	cpc	r8, r28
      ae:	08 07       	cpc	r16, r24
      b0:	85 07       	cpc	r24, r21
      b2:	22 08       	sbc	r2, r2
      b4:	c8 08       	sbc	r12, r8
      b6:	b6 04       	cpc	r11, r6
      b8:	d1 09       	sbc	r29, r1

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
      c6:	23 e0       	ldi	r18, 0x03	; 3
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ab 3b       	cpi	r26, 0xBB	; 187
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <main>
      da:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      e8:	82 ee       	ldi	r24, 0xE2	; 226
      ea:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      ee:	80 ea       	ldi	r24, 0xA0	; 160
      f0:	80 93 7b 00 	sts	0x007B, r24
      f4:	08 95       	ret

000000f6 <run_battBalance>:
//if the flag is set from commands, then flip the pin that controls the battBalance on.
//batt balance pins are 23 and 24 

void run_battBalance()
{
	if (balance_l == 1)
      f6:	80 91 ec 01 	lds	r24, 0x01EC
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	19 f4       	brne	.+6      	; 0x104 <run_battBalance+0xe>
	{
		PIN_set(BALANCE_L_P);
      fe:	87 e1       	ldi	r24, 0x17	; 23
     100:	0e 94 c8 10 	call	0x2190	; 0x2190 <PIN_set>
	}
	if (balance_l == 0)
     104:	80 91 ec 01 	lds	r24, 0x01EC
     108:	81 11       	cpse	r24, r1
     10a:	03 c0       	rjmp	.+6      	; 0x112 <run_battBalance+0x1c>
	{
		PIN_clr(BALANCE_L_P);
     10c:	87 e1       	ldi	r24, 0x17	; 23
     10e:	0e 94 08 11 	call	0x2210	; 0x2210 <PIN_clr>
	}
	if (balance_h == 1)
     112:	80 91 d4 01 	lds	r24, 0x01D4
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	19 f4       	brne	.+6      	; 0x120 <run_battBalance+0x2a>
	{
		PIN_set(BALANCE_H_P);
     11a:	88 e1       	ldi	r24, 0x18	; 24
     11c:	0e 94 c8 10 	call	0x2190	; 0x2190 <PIN_set>
	}
	if (balance_h == 0)
     120:	80 91 d4 01 	lds	r24, 0x01D4
     124:	81 11       	cpse	r24, r1
     126:	03 c0       	rjmp	.+6      	; 0x12e <run_battBalance+0x38>
	{
		PIN_clr(BALANCE_H_P);
     128:	88 e1       	ldi	r24, 0x18	; 24
     12a:	0e 94 08 11 	call	0x2210	; 0x2210 <PIN_clr>
     12e:	08 95       	ret

00000130 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     130:	2a ec       	ldi	r18, 0xCA	; 202
     132:	31 e0       	ldi	r19, 0x01	; 1
     134:	30 93 f9 01 	sts	0x01F9, r19
     138:	20 93 f8 01 	sts	0x01F8, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     13c:	10 92 fc 01 	sts	0x01FC, r1
	message.id.std = id;  // populate ID field with ID Tag
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	70 93 f4 01 	sts	0x01F4, r23
     146:	60 93 f3 01 	sts	0x01F3, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     14a:	22 e0       	ldi	r18, 0x02	; 2
     14c:	20 93 f2 01 	sts	0x01F2, r18
	message.dlc = 8;			 // Max length of a CAN message.
     150:	28 e0       	ldi	r18, 0x08	; 8
     152:	20 93 f7 01 	sts	0x01F7, r18
	mob_number = 4;
     156:	24 e0       	ldi	r18, 0x04	; 4
     158:	20 93 fc 02 	sts	0x02FC, r18
     15c:	dc 01       	movw	r26, r24
     15e:	ea ec       	ldi	r30, 0xCA	; 202
     160:	f1 e0       	ldi	r31, 0x01	; 1
     162:	82 ed       	ldi	r24, 0xD2	; 210
     164:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     166:	2d 91       	ld	r18, X+
     168:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     16a:	e8 17       	cp	r30, r24
     16c:	f9 07       	cpc	r31, r25
     16e:	d9 f7       	brne	.-10     	; 0x166 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     170:	60 91 fc 02 	lds	r22, 0x02FC
     174:	81 ef       	ldi	r24, 0xF1	; 241
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     17c:	81 11       	cpse	r24, r1
     17e:	f8 cf       	rjmp	.-16     	; 0x170 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     180:	60 91 fc 02 	lds	r22, 0x02FC
     184:	81 ef       	ldi	r24, 0xF1	; 241
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	0e 94 9e 0a 	call	0x153c	; 0x153c <can_get_status>
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	c1 f3       	breq	.-16     	; 0x180 <can_send_message+0x50>

	return;
}
     190:	08 95       	ret

00000192 <decode_command>:

void decode_command(uint8_t* command_array)
{		
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	ec 01       	movw	r28, r24
	uint8_t i, command  = *(command_array + 5);
	uint8_t req_by = (*(command_array + 7)) >> 4;

	switch(command)
     198:	4d 81       	ldd	r20, Y+5	; 0x05
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	fa 01       	movw	r30, r20
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	e4 31       	cpi	r30, 0x14	; 20
     1a2:	f1 05       	cpc	r31, r1
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <decode_command+0x16>
     1a6:	8b c0       	rjmp	.+278    	; 0x2be <decode_command+0x12c>
     1a8:	e2 5c       	subi	r30, 0xC2	; 194
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__tablejump2__>
		case REQ_RESPONSE :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED3);
			}
			send_now = 1;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	80 93 10 02 	sts	0x0210, r24
		case REQ_DATA :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
			send_data = 1;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	80 93 df 02 	sts	0x02DF, r24
     1bc:	de 01       	movw	r26, r28
     1be:	ed ef       	ldi	r30, 0xFD	; 253
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	85 e0       	ldi	r24, 0x05	; 5
     1c4:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     1c6:	2d 91       	ld	r18, X+
     1c8:	21 93       	st	Z+, r18
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
			send_data = 1;
			for (i = 0; i < 8; i ++)
     1ca:	e8 17       	cp	r30, r24
     1cc:	f9 07       	cpc	r31, r25
     1ce:	d9 f7       	brne	.-10     	; 0x1c6 <decode_command+0x34>
		case REQ_HK :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED2);
			}
			send_hk = 1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 bd 02 	sts	0x02BD, r24
		case REQ_READ:
			read_response = 1;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 1b 02 	sts	0x021B, r24
     1dc:	de 01       	movw	r26, r28
     1de:	e2 eb       	ldi	r30, 0xB2	; 178
     1e0:	f3 e0       	ldi	r31, 0x03	; 3
     1e2:	8a eb       	ldi	r24, 0xBA	; 186
     1e4:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     1e6:	2d 91       	ld	r18, X+
     1e8:	21 93       	st	Z+, r18
				PIN_toggle(LED2);
			}
			send_hk = 1;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1ea:	e8 17       	cp	r30, r24
     1ec:	f9 07       	cpc	r31, r25
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <decode_command+0x54>
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	80 93 e1 01 	sts	0x01E1, r24
     1f6:	de 01       	movw	r26, r28
     1f8:	e1 e0       	ldi	r30, 0x01	; 1
     1fa:	f1 e0       	ldi	r31, 0x01	; 1
     1fc:	89 e0       	ldi	r24, 0x09	; 9
     1fe:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     200:	2d 91       	ld	r18, X+
     202:	21 93       	st	Z+, r18
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     204:	e8 17       	cp	r30, r24
     206:	f9 07       	cpc	r31, r25
     208:	d9 f7       	brne	.-10     	; 0x200 <decode_command+0x6e>
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 dc 02 	sts	0x02DC, r24
     210:	de 01       	movw	r26, r28
     212:	e2 ee       	ldi	r30, 0xE2	; 226
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	8a ee       	ldi	r24, 0xEA	; 234
     218:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				sensh_arr[i] = *(command_array + i);
     21a:	2d 91       	ld	r18, X+
     21c:	21 93       	st	Z+, r18
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
			for (i = 0; i < 8; i ++)
     21e:	e8 17       	cp	r30, r24
     220:	f9 07       	cpc	r31, r25
     222:	d9 f7       	brne	.-10     	; 0x21a <decode_command+0x88>
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 93 e1 02 	sts	0x02E1, r24
     22a:	de 01       	movw	r26, r28
     22c:	ec e0       	ldi	r30, 0x0C	; 12
     22e:	f3 e0       	ldi	r31, 0x03	; 3
     230:	84 e1       	ldi	r24, 0x14	; 20
     232:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				sensl_arr[i] = *(command_array + i);
     234:	2d 91       	ld	r18, X+
     236:	21 93       	st	Z+, r18
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
			for (i = 0; i < 8; i ++)
     238:	e8 17       	cp	r30, r24
     23a:	f9 07       	cpc	r31, r25
     23c:	d9 f7       	brne	.-10     	; 0x234 <decode_command+0xa2>
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 e0 02 	sts	0x02E0, r24
     244:	de 01       	movw	r26, r28
     246:	e5 ed       	ldi	r30, 0xD5	; 213
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	8d ed       	ldi	r24, 0xDD	; 221
     24c:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				setv_arr[i] = *(command_array + i);
     24e:	2d 91       	ld	r18, X+
     250:	21 93       	st	Z+, r18
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
			for (i = 0; i < 8; i ++)
     252:	e8 17       	cp	r30, r24
     254:	f9 07       	cpc	r31, r25
     256:	d9 f7       	brne	.-10     	; 0x24e <decode_command+0xbc>
			{
				setv_arr[i] = *(command_array + i);
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
     258:	88 81       	ld	r24, Y
     25a:	80 93 0c 02 	sts	0x020C, r24
		case SEND_TM:
			new_tm_msgf = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	80 93 12 02 	sts	0x0212, r24
     264:	de 01       	movw	r26, r28
     266:	e2 ee       	ldi	r30, 0xE2	; 226
     268:	f2 e0       	ldi	r31, 0x02	; 2
     26a:	8a ee       	ldi	r24, 0xEA	; 234
     26c:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				new_tm_msg[i] = *(command_array + i);
     26e:	2d 91       	ld	r18, X+
     270:	21 93       	st	Z+, r18
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
		case SEND_TM:
			new_tm_msgf = 1;
			for (i = 0; i < 8; i ++)
     272:	e8 17       	cp	r30, r24
     274:	f9 07       	cpc	r31, r25
     276:	d9 f7       	brne	.-10     	; 0x26e <decode_command+0xdc>
			{
				new_tm_msg[i] = *(command_array + i);
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
     278:	80 91 de 02 	lds	r24, 0x02DE
     27c:	81 11       	cpse	r24, r1
     27e:	19 c0       	rjmp	.+50     	; 0x2b2 <decode_command+0x120>
     280:	80 91 01 03 	lds	r24, 0x0301
     284:	81 11       	cpse	r24, r1
     286:	15 c0       	rjmp	.+42     	; 0x2b2 <decode_command+0x120>
}

// Let the OBC know that you are ready to receive TM packet.
static void start_tm_packet(void)
{
	send_arr[7] = (SELF_ID << 4)|COMS_TASK_ID;
     288:	87 e1       	ldi	r24, 0x17	; 23
     28a:	80 93 c5 01 	sts	0x01C5, r24
	send_arr[6] = MT_COM;
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	80 93 c4 01 	sts	0x01C4, r24
	send_arr[5] = OK_START_TM_PACKET;
     294:	80 e1       	ldi	r24, 0x10	; 16
     296:	80 93 c3 01 	sts	0x01C3, r24
	send_arr[4] = CURRENT_MINUTE;
     29a:	80 91 0c 02 	lds	r24, 0x020C
     29e:	80 93 c2 01 	sts	0x01C2, r24
	receiving_tmf = 1;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	80 93 01 03 	sts	0x0301, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
     2a8:	61 e1       	ldi	r22, 0x11	; 17
     2aa:	8e eb       	ldi	r24, 0xBE	; 190
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
				start_tm_packet();
		case TC_TRANSACTION_RESP:
			tc_transfer_completef = *command_array;
     2b2:	88 81       	ld	r24, Y
     2b4:	80 93 ee 01 	sts	0x01EE, r24
		case OK_START_TC_PACKET:
			start_tc_transferf = 1;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 ed 01 	sts	0x01ED, r24
		default:
			return;
	}
	return;
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <set_up_msg>:

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2c4:	10 92 fc 01 	sts	0x01FC, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2c8:	95 e0       	ldi	r25, 0x05	; 5
     2ca:	90 93 f2 01 	sts	0x01F2, r25
	message.dlc = 8;			 // Max length of a CAN message.
     2ce:	98 e0       	ldi	r25, 0x08	; 8
     2d0:	90 93 f7 01 	sts	0x01F7, r25
	mob_number = mailbox;
     2d4:	80 93 fc 02 	sts	0x02FC, r24
	
	if(mailbox == 0)
     2d8:	81 11       	cpse	r24, r1
     2da:	0e c0       	rjmp	.+28     	; 0x2f8 <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     2dc:	85 eb       	ldi	r24, 0xB5	; 181
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	90 93 f9 01 	sts	0x01F9, r25
     2e4:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     2e8:	80 91 cc 02 	lds	r24, 0x02CC
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 f4 01 	sts	0x01F4, r25
     2f2:	80 93 f3 01 	sts	0x01F3, r24
		return;
     2f6:	08 95       	ret
	}
	if(mailbox == 1)
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	71 f4       	brne	.+28     	; 0x318 <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     2fc:	8e ea       	ldi	r24, 0xAE	; 174
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	90 93 f9 01 	sts	0x01F9, r25
     304:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = id_array[1];
     308:	80 91 cd 02 	lds	r24, 0x02CD
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	90 93 f4 01 	sts	0x01F4, r25
     312:	80 93 f3 01 	sts	0x01F3, r24
		return;
     316:	08 95       	ret
	}
	if(mailbox == 2)
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	71 f4       	brne	.+28     	; 0x338 <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     31c:	86 eb       	ldi	r24, 0xB6	; 182
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	90 93 f9 01 	sts	0x01F9, r25
     324:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = id_array[2];
     328:	80 91 ce 02 	lds	r24, 0x02CE
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	90 93 f4 01 	sts	0x01F4, r25
     332:	80 93 f3 01 	sts	0x01F3, r24
		return;
     336:	08 95       	ret
	}
	if(mailbox == 3)
     338:	83 30       	cpi	r24, 0x03	; 3
     33a:	71 f4       	brne	.+28     	; 0x358 <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     33c:	84 ed       	ldi	r24, 0xD4	; 212
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	90 93 f9 01 	sts	0x01F9, r25
     344:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = id_array[3];
     348:	80 91 cf 02 	lds	r24, 0x02CF
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 f4 01 	sts	0x01F4, r25
     352:	80 93 f3 01 	sts	0x01F3, r24
		return;
     356:	08 95       	ret
	}
	if(mailbox == 5)
     358:	85 30       	cpi	r24, 0x05	; 5
     35a:	69 f4       	brne	.+26     	; 0x376 <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     35c:	80 ef       	ldi	r24, 0xF0	; 240
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	90 93 f9 01 	sts	0x01F9, r25
     364:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = id_array[5];
     368:	80 91 d1 02 	lds	r24, 0x02D1
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	90 93 f4 01 	sts	0x01F4, r25
     372:	80 93 f3 01 	sts	0x01F3, r24
     376:	08 95       	ret

00000378 <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     378:	81 11       	cpse	r24, r1
     37a:	20 c0       	rjmp	.+64     	; 0x3bc <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     37c:	10 92 fc 01 	sts	0x01FC, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     380:	85 e0       	ldi	r24, 0x05	; 5
     382:	80 93 f2 01 	sts	0x01F2, r24
		message.dlc = 8;			 // Max length of a CAN message.
     386:	88 e0       	ldi	r24, 0x08	; 8
     388:	80 93 f7 01 	sts	0x01F7, r24
		mob_number = mailbox;
     38c:	10 92 fc 02 	sts	0x02FC, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     390:	85 eb       	ldi	r24, 0xB5	; 181
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	90 93 f9 01 	sts	0x01F9, r25
     398:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     39c:	80 91 cc 02 	lds	r24, 0x02CC
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 f4 01 	sts	0x01F4, r25
     3a6:	80 93 f3 01 	sts	0x01F3, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     3aa:	60 91 fc 02 	lds	r22, 0x02FC
     3ae:	81 ef       	ldi	r24, 0xF1	; 241
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     3b6:	81 11       	cpse	r24, r1
     3b8:	f8 cf       	rjmp	.-16     	; 0x3aa <clean_up_msg+0x32>
     3ba:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	01 f5       	brne	.+64     	; 0x400 <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3c0:	10 92 fc 01 	sts	0x01FC, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3c4:	85 e0       	ldi	r24, 0x05	; 5
     3c6:	80 93 f2 01 	sts	0x01F2, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	80 93 f7 01 	sts	0x01F7, r24
		mob_number = mailbox;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	80 93 fc 02 	sts	0x02FC, r24
		message.pt_data = &data1[0];
     3d6:	8e ea       	ldi	r24, 0xAE	; 174
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	90 93 f9 01 	sts	0x01F9, r25
     3de:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = SUB0_ID1;
     3e2:	85 e1       	ldi	r24, 0x15	; 21
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 f4 01 	sts	0x01F4, r25
     3ea:	80 93 f3 01 	sts	0x01F3, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3ee:	60 91 fc 02 	lds	r22, 0x02FC
     3f2:	81 ef       	ldi	r24, 0xF1	; 241
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     3fa:	81 11       	cpse	r24, r1
     3fc:	f8 cf       	rjmp	.-16     	; 0x3ee <clean_up_msg+0x76>
     3fe:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	09 f5       	brne	.+66     	; 0x446 <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     404:	10 92 fc 01 	sts	0x01FC, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     408:	85 e0       	ldi	r24, 0x05	; 5
     40a:	80 93 f2 01 	sts	0x01F2, r24
		message.dlc = 8;			 // Max length of a CAN message.
     40e:	88 e0       	ldi	r24, 0x08	; 8
     410:	80 93 f7 01 	sts	0x01F7, r24
		mob_number = mailbox;
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	80 93 fc 02 	sts	0x02FC, r24
		message.pt_data = &data2[0];
     41a:	86 eb       	ldi	r24, 0xB6	; 182
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	90 93 f9 01 	sts	0x01F9, r25
     422:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = id_array[2];
     426:	80 91 ce 02 	lds	r24, 0x02CE
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	90 93 f4 01 	sts	0x01F4, r25
     430:	80 93 f3 01 	sts	0x01F3, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     434:	60 91 fc 02 	lds	r22, 0x02FC
     438:	81 ef       	ldi	r24, 0xF1	; 241
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     440:	81 11       	cpse	r24, r1
     442:	f8 cf       	rjmp	.-16     	; 0x434 <clean_up_msg+0xbc>
     444:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     446:	83 30       	cpi	r24, 0x03	; 3
     448:	09 f5       	brne	.+66     	; 0x48c <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     44a:	10 92 fc 01 	sts	0x01FC, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     44e:	85 e0       	ldi	r24, 0x05	; 5
     450:	80 93 f2 01 	sts	0x01F2, r24
		message.dlc = 8;			 // Max length of a CAN message.
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	80 93 f7 01 	sts	0x01F7, r24
		mob_number = mailbox;
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	80 93 fc 02 	sts	0x02FC, r24
		message.pt_data = &data3[0];
     460:	84 ed       	ldi	r24, 0xD4	; 212
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	90 93 f9 01 	sts	0x01F9, r25
     468:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = id_array[3];
     46c:	80 91 cf 02 	lds	r24, 0x02CF
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	90 93 f4 01 	sts	0x01F4, r25
     476:	80 93 f3 01 	sts	0x01F3, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     47a:	60 91 fc 02 	lds	r22, 0x02FC
     47e:	81 ef       	ldi	r24, 0xF1	; 241
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     486:	81 11       	cpse	r24, r1
     488:	f8 cf       	rjmp	.-16     	; 0x47a <clean_up_msg+0x102>
     48a:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     48c:	85 30       	cpi	r24, 0x05	; 5
     48e:	f1 f4       	brne	.+60     	; 0x4cc <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     490:	10 92 fc 01 	sts	0x01FC, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     494:	80 93 f2 01 	sts	0x01F2, r24
		message.dlc = 8;			 // Max length of a CAN message.
     498:	98 e0       	ldi	r25, 0x08	; 8
     49a:	90 93 f7 01 	sts	0x01F7, r25
		mob_number = mailbox;
     49e:	80 93 fc 02 	sts	0x02FC, r24
		message.pt_data = &data5[0];
     4a2:	80 ef       	ldi	r24, 0xF0	; 240
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	90 93 f9 01 	sts	0x01F9, r25
     4aa:	80 93 f8 01 	sts	0x01F8, r24
		message.id.std = id_array[5];
     4ae:	80 91 d1 02 	lds	r24, 0x02D1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	90 93 f4 01 	sts	0x01F4, r25
     4b8:	80 93 f3 01 	sts	0x01F3, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     4bc:	60 91 fc 02 	lds	r22, 0x02FC
     4c0:	81 ef       	ldi	r24, 0xF1	; 241
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     4c8:	81 11       	cpse	r24, r1
     4ca:	f8 cf       	rjmp	.-16     	; 0x4bc <clean_up_msg+0x144>
     4cc:	08 95       	ret

000004ce <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     4d8:	60 91 fc 02 	lds	r22, 0x02FC
     4dc:	81 ef       	ldi	r24, 0xF1	; 241
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 9e 0a 	call	0x153c	; 0x153c <can_get_status>
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	11 f1       	breq	.+68     	; 0x52c <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     4e8:	80 91 fa 01 	lds	r24, 0x01FA
     4ec:	80 32       	cpi	r24, 0x20	; 32
     4ee:	d9 f4       	brne	.+54     	; 0x526 <can_check_housekeep+0x58>
     4f0:	a0 91 f8 01 	lds	r26, 0x01F8
     4f4:	b0 91 f9 01 	lds	r27, 0x01F9
     4f8:	cc ec       	ldi	r28, 0xCC	; 204
     4fa:	d2 e0       	ldi	r29, 0x02	; 2
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     4fc:	e4 ec       	ldi	r30, 0xC4	; 196
     4fe:	f2 e0       	ldi	r31, 0x02	; 2
     500:	8d 91       	ld	r24, X+
     502:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     504:	ec 17       	cp	r30, r28
     506:	fd 07       	cpc	r31, r29
     508:	d9 f7       	brne	.-10     	; 0x500 <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     50a:	80 91 ca 02 	lds	r24, 0x02CA
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	21 f4       	brne	.+8      	; 0x51a <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     512:	84 ec       	ldi	r24, 0xC4	; 196
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	0e 94 c9 00 	call	0x192	; 0x192 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     51a:	e4 ec       	ldi	r30, 0xC4	; 196
     51c:	f2 e0       	ldi	r31, 0x02	; 2
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     51e:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     520:	ec 17       	cp	r30, r28
     522:	fd 07       	cpc	r31, r29
     524:	e1 f7       	brne	.-8      	; 0x51e <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	0e 94 bc 01 	call	0x378	; 0x378 <clean_up_msg>
	}	
	return;
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <can_check_general>:
#include "can_api.h"

static void start_tm_packet(void);

void can_check_general(void)
{
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     548:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     54a:	0a ef       	ldi	r16, 0xFA	; 250
     54c:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     54e:	0f 2e       	mov	r0, r31
     550:	f8 ef       	ldi	r31, 0xF8	; 248
     552:	af 2e       	mov	r10, r31
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	bf 2e       	mov	r11, r31
     558:	f0 2d       	mov	r31, r0
     55a:	cc ec       	ldi	r28, 0xCC	; 204
     55c:	d2 e0       	ldi	r29, 0x02	; 2
     55e:	0f 2e       	mov	r0, r31
     560:	f4 ec       	ldi	r31, 0xC4	; 196
     562:	ef 2e       	mov	r14, r31
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	ff 2e       	mov	r15, r31
     568:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     56a:	0f 2e       	mov	r0, r31
     56c:	fa ec       	ldi	r31, 0xCA	; 202
     56e:	cf 2e       	mov	r12, r31
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	df 2e       	mov	r13, r31
     574:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     576:	89 2d       	mov	r24, r9
     578:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     57c:	60 91 fc 02 	lds	r22, 0x02FC
     580:	81 ef       	ldi	r24, 0xF1	; 241
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 9e 0a 	call	0x153c	; 0x153c <can_get_status>
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	e1 f0       	breq	.+56     	; 0x5c4 <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     58c:	f8 01       	movw	r30, r16
     58e:	80 81       	ld	r24, Z
     590:	80 32       	cpi	r24, 0x20	; 32
     592:	a9 f4       	brne	.+42     	; 0x5be <can_check_general+0x8c>
     594:	f5 01       	movw	r30, r10
     596:	a0 81       	ld	r26, Z
     598:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     59a:	f7 01       	movw	r30, r14
     59c:	8d 91       	ld	r24, X+
     59e:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     5a0:	ec 17       	cp	r30, r28
     5a2:	fd 07       	cpc	r31, r29
     5a4:	d9 f7       	brne	.-10     	; 0x59c <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     5a6:	f6 01       	movw	r30, r12
     5a8:	80 81       	ld	r24, Z
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	19 f4       	brne	.+6      	; 0x5b4 <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     5ae:	c7 01       	movw	r24, r14
     5b0:	0e 94 c9 00 	call	0x192	; 0x192 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     5b4:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     5b6:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     5b8:	ec 17       	cp	r30, r28
     5ba:	fd 07       	cpc	r31, r29
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     5be:	89 2d       	mov	r24, r9
     5c0:	0e 94 bc 01 	call	0x378	; 0x378 <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     5c4:	93 94       	inc	r9
     5c6:	f4 e0       	ldi	r31, 0x04	; 4
     5c8:	9f 12       	cpse	r9, r31
     5ca:	d5 cf       	rjmp	.-86     	; 0x576 <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     5cc:	0e 94 67 02 	call	0x4ce	; 0x4ce <can_check_housekeep>
	
	return;
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	bf 90       	pop	r11
     5e2:	af 90       	pop	r10
     5e4:	9f 90       	pop	r9
     5e6:	08 95       	ret

000005e8 <can_init_mobs>:
/*		This function initializes our can message objects with their ID	*/
/*		and sets whether or not they are in transmit mode or receive.	*/
/************************************************************************/

void can_init_mobs(void)
{
     5e8:	8f 92       	push	r8
     5ea:	9f 92       	push	r9
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
		id_array[5] = SUB0_ID5;
	}
	
	if(SELF_ID == 1)
	{
		id_array[0] = SUB1_ID0;
     5fe:	8a e1       	ldi	r24, 0x1A	; 26
     600:	80 93 cc 02 	sts	0x02CC, r24
		id_array[1] = SUB1_ID1;
     604:	8b e1       	ldi	r24, 0x1B	; 27
     606:	80 93 cd 02 	sts	0x02CD, r24
		id_array[2] = SUB1_ID2;
     60a:	8c e1       	ldi	r24, 0x1C	; 28
     60c:	80 93 ce 02 	sts	0x02CE, r24
		id_array[3] = SUB1_ID3;
     610:	8d e1       	ldi	r24, 0x1D	; 29
     612:	80 93 cf 02 	sts	0x02CF, r24
		id_array[4] = SUB1_ID4;
     616:	8e e1       	ldi	r24, 0x1E	; 30
     618:	80 93 d0 02 	sts	0x02D0, r24
		id_array[5] = SUB1_ID5;
     61c:	8f e1       	ldi	r24, 0x1F	; 31
     61e:	80 93 d1 02 	sts	0x02D1, r24
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     622:	85 eb       	ldi	r24, 0xB5	; 181
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	90 93 f9 01 	sts	0x01F9, r25
     62a:	80 93 f8 01 	sts	0x01F8, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     62e:	10 92 fc 01 	sts	0x01FC, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     632:	8a e1       	ldi	r24, 0x1A	; 26
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	90 93 f4 01 	sts	0x01F4, r25
     63a:	80 93 f3 01 	sts	0x01F3, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	80 93 f2 01 	sts	0x01F2, r24
	message.dlc = 8;			 // Max length of a CAN message.
     644:	88 e0       	ldi	r24, 0x08	; 8
     646:	80 93 f7 01 	sts	0x01F7, r24
	mob_number = 0;
     64a:	10 92 fc 02 	sts	0x02FC, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     64e:	60 91 fc 02 	lds	r22, 0x02FC
     652:	81 ef       	ldi	r24, 0xF1	; 241
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     65a:	81 11       	cpse	r24, r1
     65c:	f8 cf       	rjmp	.-16     	; 0x64e <can_init_mobs+0x66>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     65e:	8e ea       	ldi	r24, 0xAE	; 174
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	90 93 f9 01 	sts	0x01F9, r25
     666:	80 93 f8 01 	sts	0x01F8, r24
	message.ctrl.ide = 0;
     66a:	10 92 fc 01 	sts	0x01FC, r1
	message.id.std = id_array[1];
     66e:	80 91 cd 02 	lds	r24, 0x02CD
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	90 93 f4 01 	sts	0x01F4, r25
     678:	80 93 f3 01 	sts	0x01F3, r24
	message.cmd = CMD_RX_DATA;
     67c:	85 e0       	ldi	r24, 0x05	; 5
     67e:	80 93 f2 01 	sts	0x01F2, r24
	message.dlc = 8;
     682:	88 e0       	ldi	r24, 0x08	; 8
     684:	80 93 f7 01 	sts	0x01F7, r24
	mob_number = 1;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 fc 02 	sts	0x02FC, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     68e:	60 91 fc 02 	lds	r22, 0x02FC
     692:	81 ef       	ldi	r24, 0xF1	; 241
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     69a:	81 11       	cpse	r24, r1
     69c:	f8 cf       	rjmp	.-16     	; 0x68e <can_init_mobs+0xa6>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     69e:	86 eb       	ldi	r24, 0xB6	; 182
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	90 93 f9 01 	sts	0x01F9, r25
     6a6:	80 93 f8 01 	sts	0x01F8, r24
	message.ctrl.ide = 0;
     6aa:	10 92 fc 01 	sts	0x01FC, r1
	message.id.std = id_array[2];
     6ae:	80 91 ce 02 	lds	r24, 0x02CE
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	90 93 f4 01 	sts	0x01F4, r25
     6b8:	80 93 f3 01 	sts	0x01F3, r24
	message.cmd = CMD_RX_DATA;
     6bc:	85 e0       	ldi	r24, 0x05	; 5
     6be:	80 93 f2 01 	sts	0x01F2, r24
	message.dlc = 8;
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	80 93 f7 01 	sts	0x01F7, r24
	mob_number = 2;
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	80 93 fc 02 	sts	0x02FC, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     6ce:	60 91 fc 02 	lds	r22, 0x02FC
     6d2:	81 ef       	ldi	r24, 0xF1	; 241
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     6da:	81 11       	cpse	r24, r1
     6dc:	f8 cf       	rjmp	.-16     	; 0x6ce <can_init_mobs+0xe6>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     6de:	84 ed       	ldi	r24, 0xD4	; 212
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	90 93 f9 01 	sts	0x01F9, r25
     6e6:	80 93 f8 01 	sts	0x01F8, r24
	message.ctrl.ide = 0;
     6ea:	10 92 fc 01 	sts	0x01FC, r1
	message.id.std = id_array[3];
     6ee:	80 91 cf 02 	lds	r24, 0x02CF
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	90 93 f4 01 	sts	0x01F4, r25
     6f8:	80 93 f3 01 	sts	0x01F3, r24
	message.cmd = CMD_RX_DATA;
     6fc:	85 e0       	ldi	r24, 0x05	; 5
     6fe:	80 93 f2 01 	sts	0x01F2, r24
	message.dlc = 8;
     702:	88 e0       	ldi	r24, 0x08	; 8
     704:	80 93 f7 01 	sts	0x01F7, r24
	mob_number = 3;
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	80 93 fc 02 	sts	0x02FC, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     70e:	60 91 fc 02 	lds	r22, 0x02FC
     712:	81 ef       	ldi	r24, 0xF1	; 241
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     71a:	81 11       	cpse	r24, r1
     71c:	f8 cf       	rjmp	.-16     	; 0x70e <can_init_mobs+0x126>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     71e:	80 ef       	ldi	r24, 0xF0	; 240
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	90 93 f9 01 	sts	0x01F9, r25
     726:	80 93 f8 01 	sts	0x01F8, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     72a:	10 92 fc 01 	sts	0x01FC, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     72e:	80 91 d1 02 	lds	r24, 0x02D1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	90 93 f4 01 	sts	0x01F4, r25
     738:	80 93 f3 01 	sts	0x01F3, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     73c:	85 e0       	ldi	r24, 0x05	; 5
     73e:	80 93 f2 01 	sts	0x01F2, r24
	message.dlc = 8;				// Max length of a CAN message.
     742:	98 e0       	ldi	r25, 0x08	; 8
     744:	90 93 f7 01 	sts	0x01F7, r25
	mob_number = 5;
     748:	80 93 fc 02 	sts	0x02FC, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     74c:	60 91 fc 02 	lds	r22, 0x02FC
     750:	81 ef       	ldi	r24, 0xF1	; 241
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 72 04 	call	0x8e4	; 0x8e4 <can_cmd>
     758:	81 11       	cpse	r24, r1
     75a:	f8 cf       	rjmp	.-16     	; 0x74c <can_init_mobs+0x164>
     75c:	0f 2e       	mov	r0, r31
     75e:	f4 ec       	ldi	r31, 0xC4	; 196
     760:	cf 2e       	mov	r12, r31
     762:	f2 e0       	ldi	r31, 0x02	; 2
     764:	df 2e       	mov	r13, r31
     766:	f0 2d       	mov	r31, r0
     768:	0f 2e       	mov	r0, r31
     76a:	fe eb       	ldi	r31, 0xBE	; 190
     76c:	ef 2e       	mov	r14, r31
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	ff 2e       	mov	r15, r31
     772:	f0 2d       	mov	r31, r0
     774:	02 eb       	ldi	r16, 0xB2	; 178
     776:	13 e0       	ldi	r17, 0x03	; 3
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	71 e0       	ldi	r23, 0x01	; 1
     77c:	4d ef       	ldi	r20, 0xFD	; 253
     77e:	51 e0       	ldi	r21, 0x01	; 1
     780:	22 ee       	ldi	r18, 0xE2	; 226
     782:	31 e0       	ldi	r19, 0x01	; 1
     784:	8c e0       	ldi	r24, 0x0C	; 12
     786:	93 e0       	ldi	r25, 0x03	; 3
     788:	c5 ed       	ldi	r28, 0xD5	; 213
     78a:	d1 e0       	ldi	r29, 0x01	; 1
     78c:	a2 ee       	ldi	r26, 0xE2	; 226
     78e:	b2 e0       	ldi	r27, 0x02	; 2
     790:	0f 2e       	mov	r0, r31
     792:	f2 e0       	ldi	r31, 0x02	; 2
     794:	8f 2e       	mov	r8, r31
     796:	f3 e0       	ldi	r31, 0x03	; 3
     798:	9f 2e       	mov	r9, r31
     79a:	f0 2d       	mov	r31, r0
     79c:	68 94       	set
     79e:	bb 24       	eor	r11, r11
     7a0:	b3 f8       	bld	r11, 3
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     7a2:	f6 01       	movw	r30, r12
     7a4:	11 92       	st	Z+, r1
     7a6:	6f 01       	movw	r12, r30
		send_arr[i] = 0;
     7a8:	f7 01       	movw	r30, r14
     7aa:	11 92       	st	Z+, r1
     7ac:	7f 01       	movw	r14, r30
		read_arr[i] = 0;
     7ae:	f8 01       	movw	r30, r16
     7b0:	11 92       	st	Z+, r1
     7b2:	8f 01       	movw	r16, r30
		write_arr[i] = 0;
     7b4:	fb 01       	movw	r30, r22
     7b6:	11 92       	st	Z+, r1
     7b8:	bf 01       	movw	r22, r30
		data_req_arr[i] = 0;
     7ba:	fa 01       	movw	r30, r20
     7bc:	11 92       	st	Z+, r1
     7be:	af 01       	movw	r20, r30
		sensh_arr[i] = 0;
     7c0:	f9 01       	movw	r30, r18
     7c2:	11 92       	st	Z+, r1
     7c4:	9f 01       	movw	r18, r30
		sensl_arr[i] = 0;
     7c6:	fc 01       	movw	r30, r24
     7c8:	11 92       	st	Z+, r1
     7ca:	cf 01       	movw	r24, r30
		setv_arr[i] = 0;
     7cc:	19 92       	st	Y+, r1
		new_tm_msg[i] = 0;
     7ce:	1d 92       	st	X+, r1
		new_tc_msg[i] = 0;
     7d0:	f4 01       	movw	r30, r8
     7d2:	11 92       	st	Z+, r1
     7d4:	4f 01       	movw	r8, r30
     7d6:	ba 94       	dec	r11
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     7d8:	21 f7       	brne	.-56     	; 0x7a2 <can_init_mobs+0x1ba>
     7da:	ec e1       	ldi	r30, 0x1C	; 28
     7dc:	f2 e0       	ldi	r31, 0x02	; 2
     7de:	a7 e1       	ldi	r26, 0x17	; 23
     7e0:	b3 e0       	ldi	r27, 0x03	; 3
     7e2:	8b ea       	ldi	r24, 0xAB	; 171
     7e4:	92 e0       	ldi	r25, 0x02	; 2
		new_tc_msg[i] = 0;
	}
	
	for (i = 0; i < 143; i++)		// Initialize the TM/TC Packet arrays.
	{
		current_tm[i] = 0;
     7e6:	11 92       	st	Z+, r1
		current_tc[i] = 0;
     7e8:	1d 92       	st	X+, r1
		setv_arr[i] = 0;
		new_tm_msg[i] = 0;
		new_tc_msg[i] = 0;
	}
	
	for (i = 0; i < 143; i++)		// Initialize the TM/TC Packet arrays.
     7ea:	e8 17       	cp	r30, r24
     7ec:	f9 07       	cpc	r31, r25
     7ee:	d9 f7       	brne	.-10     	; 0x7e6 <can_init_mobs+0x1fe>
		current_tm[i] = 0;
		current_tc[i] = 0;
	}
	
	/* Initialize Global Command Flags to zero */
	send_now = 0;
     7f0:	10 92 10 02 	sts	0x0210, r1
	send_hk = 0;
     7f4:	10 92 bd 02 	sts	0x02BD, r1
	send_data = 0;
     7f8:	10 92 df 02 	sts	0x02DF, r1
	read_response = 0;
     7fc:	10 92 1b 02 	sts	0x021B, r1
	write_response = 0;
     800:	10 92 e1 01 	sts	0x01E1, r1
	set_sens_h = 0;
     804:	10 92 dc 02 	sts	0x02DC, r1
	set_sens_l = 0;
     808:	10 92 e1 02 	sts	0x02E1, r1
	set_varf = 0;
     80c:	10 92 e0 02 	sts	0x02E0, r1
	new_tm_msgf = 0;
     810:	10 92 12 02 	sts	0x0212, r1
	tm_sequence_count = 0;
     814:	10 92 00 01 	sts	0x0100, r1
	current_tm_fullf = 0;
     818:	10 92 de 02 	sts	0x02DE, r1
	tc_packet_readyf = 0;
     81c:	10 92 dd 02 	sts	0x02DD, r1
	tc_transfer_completef = 0;
     820:	10 92 ee 01 	sts	0x01EE, r1
	start_tc_transferf = 0;
     824:	10 92 ed 01 	sts	0x01ED, r1
	receiving_tmf = 0;
     828:	10 92 01 03 	sts	0x0301, r1
	
	return;
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	1f 91       	pop	r17
     832:	0f 91       	pop	r16
     834:	ff 90       	pop	r15
     836:	ef 90       	pop	r14
     838:	df 90       	pop	r13
     83a:	cf 90       	pop	r12
     83c:	bf 90       	pop	r11
     83e:	9f 90       	pop	r9
     840:	8f 90       	pop	r8
     842:	08 95       	ret

00000844 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     844:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     846:	ad ee       	ldi	r26, 0xED	; 237
     848:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     84a:	3e ee       	ldi	r19, 0xEE	; 238
     84c:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     84e:	98 2f       	mov	r25, r24
     850:	92 95       	swap	r25
     852:	90 7f       	andi	r25, 0xF0	; 240
     854:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     856:	e3 2f       	mov	r30, r19
     858:	f2 2f       	mov	r31, r18
     85a:	11 92       	st	Z+, r1
     85c:	e8 3f       	cpi	r30, 0xF8	; 248
     85e:	f1 05       	cpc	r31, r1
     860:	e1 f7       	brne	.-8      	; 0x85a <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     862:	8f 5f       	subi	r24, 0xFF	; 255
     864:	86 30       	cpi	r24, 0x06	; 6
     866:	99 f7       	brne	.-26     	; 0x84e <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     868:	08 95       	ret

0000086a <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     86a:	80 91 ef 00 	lds	r24, 0x00EF
     86e:	80 7c       	andi	r24, 0xC0	; 192
     870:	61 f0       	breq	.+24     	; 0x88a <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     872:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     876:	98 2f       	mov	r25, r24
     878:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     87a:	28 2f       	mov	r18, r24
     87c:	20 76       	andi	r18, 0x60	; 96
     87e:	20 32       	cpi	r18, 0x20	; 32
     880:	31 f0       	breq	.+12     	; 0x88e <can_get_mob_status+0x24>
     882:	90 34       	cpi	r25, 0x40	; 64
     884:	31 f0       	breq	.+12     	; 0x892 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     886:	8f 71       	andi	r24, 0x1F	; 31
     888:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     88e:	89 2f       	mov	r24, r25
     890:	08 95       	ret
     892:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     894:	08 95       	ret

00000896 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     896:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     898:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     89a:	aa ef       	ldi	r26, 0xFA	; 250
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	9c 91       	ld	r25, X
     8a0:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     8a2:	8f 5f       	subi	r24, 0xFF	; 255
     8a4:	88 30       	cpi	r24, 0x08	; 8
     8a6:	d9 f7       	brne	.-10     	; 0x89e <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     8a8:	08 95       	ret

000008aa <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     8b0:	82 e0       	ldi	r24, 0x02	; 2
     8b2:	80 93 e2 00 	sts	0x00E2, r24
     8b6:	8c e0       	ldi	r24, 0x0C	; 12
     8b8:	80 93 e3 00 	sts	0x00E3, r24
     8bc:	87 e3       	ldi	r24, 0x37	; 55
     8be:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	08 95       	ret

000008c6 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     8c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <can_fixed_baudrate>
     8ca:	88 23       	and	r24, r24
     8cc:	49 f0       	breq	.+18     	; 0x8e0 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     8ce:	0e 94 22 04 	call	0x844	; 0x844 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     8d2:	e8 ed       	ldi	r30, 0xD8	; 216
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	82 60       	ori	r24, 0x02	; 2
     8da:	80 83       	st	Z, r24
    return (1);
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     8e0:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     8e2:	08 95       	ret

000008e4 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	1f 92       	push	r1
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     8f0:	11 96       	adiw	r26, 0x01	; 1
     8f2:	8c 91       	ld	r24, X
     8f4:	11 97       	sbiw	r26, 0x01	; 1
     8f6:	8c 30       	cpi	r24, 0x0C	; 12
     8f8:	b1 f4       	brne	.+44     	; 0x926 <__stack+0x27>
  {
    if (cmd->status == MOB_PENDING)
     8fa:	19 96       	adiw	r26, 0x09	; 9
     8fc:	8c 91       	ld	r24, X
     8fe:	19 97       	sbiw	r26, 0x09	; 9
     900:	80 36       	cpi	r24, 0x60	; 96
     902:	69 f4       	brne	.+26     	; 0x91e <__stack+0x1f>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     904:	86 2f       	mov	r24, r22
     906:	82 95       	swap	r24
     908:	80 7f       	andi	r24, 0xF0	; 240
     90a:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     90e:	ef ee       	ldi	r30, 0xEF	; 239
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	8f 73       	andi	r24, 0x3F	; 63
     916:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     918:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     91c:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     91e:	19 96       	adiw	r26, 0x09	; 9
     920:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	07 c6       	rjmp	.+3086   	; 0x1534 <__stack+0xc35>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     926:	86 2f       	mov	r24, r22
     928:	82 95       	swap	r24
     92a:	80 7f       	andi	r24, 0xF0	; 240
     92c:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     930:	80 91 ef 00 	lds	r24, 0x00EF
     934:	80 7c       	andi	r24, 0xC0	; 192
     936:	09 f0       	breq	.+2      	; 0x93a <__stack+0x3b>
     938:	f9 c5       	rjmp	.+3058   	; 0x152c <__stack+0xc2d>
    {
      cmd->status = MOB_PENDING; 
     93a:	80 e6       	ldi	r24, 0x60	; 96
     93c:	19 96       	adiw	r26, 0x09	; 9
     93e:	8c 93       	st	X, r24
     940:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     942:	6c 93       	st	X, r22
      Can_clear_mob();
     944:	ee ee       	ldi	r30, 0xEE	; 238
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	11 92       	st	Z+, r1
     94a:	e8 3f       	cpi	r30, 0xF8	; 248
     94c:	f1 05       	cpc	r31, r1
     94e:	e1 f7       	brne	.-8      	; 0x948 <__stack+0x49>
          
      switch (cmd->cmd)
     950:	11 96       	adiw	r26, 0x01	; 1
     952:	4c 91       	ld	r20, X
     954:	11 97       	sbiw	r26, 0x01	; 1
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	fa 01       	movw	r30, r20
     95a:	31 97       	sbiw	r30, 0x01	; 1
     95c:	eb 30       	cpi	r30, 0x0B	; 11
     95e:	f1 05       	cpc	r31, r1
     960:	08 f0       	brcs	.+2      	; 0x964 <__stack+0x65>
     962:	e0 c5       	rjmp	.+3008   	; 0x1524 <__stack+0xc25>
     964:	ee 5a       	subi	r30, 0xAE	; 174
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     96c:	16 96       	adiw	r26, 0x06	; 6
     96e:	8c 91       	ld	r24, X
     970:	16 97       	sbiw	r26, 0x06	; 6
     972:	81 11       	cpse	r24, r1
     974:	b7 c4       	rjmp	.+2414   	; 0x12e4 <__stack+0x9e5>
     976:	c8 c4       	rjmp	.+2448   	; 0x1308 <__stack+0xa09>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     978:	1b 96       	adiw	r26, 0x0b	; 11
     97a:	8c 91       	ld	r24, X
     97c:	1b 97       	sbiw	r26, 0x0b	; 11
     97e:	88 23       	and	r24, r24
     980:	d9 f1       	breq	.+118    	; 0x9f8 <__stack+0xf9>
     982:	14 96       	adiw	r26, 0x04	; 4
     984:	9c 91       	ld	r25, X
     986:	14 97       	sbiw	r26, 0x04	; 4
     988:	92 95       	swap	r25
     98a:	96 95       	lsr	r25
     98c:	97 70       	andi	r25, 0x07	; 7
     98e:	15 96       	adiw	r26, 0x05	; 5
     990:	8c 91       	ld	r24, X
     992:	15 97       	sbiw	r26, 0x05	; 5
     994:	88 0f       	add	r24, r24
     996:	88 0f       	add	r24, r24
     998:	88 0f       	add	r24, r24
     99a:	89 0f       	add	r24, r25
     99c:	80 93 f3 00 	sts	0x00F3, r24
     9a0:	13 96       	adiw	r26, 0x03	; 3
     9a2:	9c 91       	ld	r25, X
     9a4:	13 97       	sbiw	r26, 0x03	; 3
     9a6:	92 95       	swap	r25
     9a8:	96 95       	lsr	r25
     9aa:	97 70       	andi	r25, 0x07	; 7
     9ac:	14 96       	adiw	r26, 0x04	; 4
     9ae:	8c 91       	ld	r24, X
     9b0:	14 97       	sbiw	r26, 0x04	; 4
     9b2:	88 0f       	add	r24, r24
     9b4:	88 0f       	add	r24, r24
     9b6:	88 0f       	add	r24, r24
     9b8:	89 0f       	add	r24, r25
     9ba:	80 93 f2 00 	sts	0x00F2, r24
     9be:	12 96       	adiw	r26, 0x02	; 2
     9c0:	9c 91       	ld	r25, X
     9c2:	12 97       	sbiw	r26, 0x02	; 2
     9c4:	92 95       	swap	r25
     9c6:	96 95       	lsr	r25
     9c8:	97 70       	andi	r25, 0x07	; 7
     9ca:	13 96       	adiw	r26, 0x03	; 3
     9cc:	8c 91       	ld	r24, X
     9ce:	13 97       	sbiw	r26, 0x03	; 3
     9d0:	88 0f       	add	r24, r24
     9d2:	88 0f       	add	r24, r24
     9d4:	88 0f       	add	r24, r24
     9d6:	89 0f       	add	r24, r25
     9d8:	80 93 f1 00 	sts	0x00F1, r24
     9dc:	12 96       	adiw	r26, 0x02	; 2
     9de:	8c 91       	ld	r24, X
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	88 0f       	add	r24, r24
     9e4:	88 0f       	add	r24, r24
     9e6:	88 0f       	add	r24, r24
     9e8:	80 93 f0 00 	sts	0x00F0, r24
     9ec:	ef ee       	ldi	r30, 0xEF	; 239
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	80 61       	ori	r24, 0x10	; 16
     9f4:	80 83       	st	Z, r24
     9f6:	1c c0       	rjmp	.+56     	; 0xa30 <__stack+0x131>
          else              { Can_set_std_id(cmd->id.std);}
     9f8:	12 96       	adiw	r26, 0x02	; 2
     9fa:	8c 91       	ld	r24, X
     9fc:	12 97       	sbiw	r26, 0x02	; 2
     9fe:	86 95       	lsr	r24
     a00:	86 95       	lsr	r24
     a02:	86 95       	lsr	r24
     a04:	13 96       	adiw	r26, 0x03	; 3
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	20 e2       	ldi	r18, 0x20	; 32
     a0c:	92 9f       	mul	r25, r18
     a0e:	80 0d       	add	r24, r0
     a10:	11 24       	eor	r1, r1
     a12:	80 93 f3 00 	sts	0x00F3, r24
     a16:	12 96       	adiw	r26, 0x02	; 2
     a18:	8c 91       	ld	r24, X
     a1a:	12 97       	sbiw	r26, 0x02	; 2
     a1c:	82 95       	swap	r24
     a1e:	88 0f       	add	r24, r24
     a20:	80 7e       	andi	r24, 0xE0	; 224
     a22:	80 93 f2 00 	sts	0x00F2, r24
     a26:	ef ee       	ldi	r30, 0xEF	; 239
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	8f 7e       	andi	r24, 0xEF	; 239
     a2e:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     a30:	16 96       	adiw	r26, 0x06	; 6
     a32:	8c 91       	ld	r24, X
     a34:	16 97       	sbiw	r26, 0x06	; 6
     a36:	88 23       	and	r24, r24
     a38:	91 f0       	breq	.+36     	; 0xa5e <__stack+0x15f>
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	8a ef       	ldi	r24, 0xFA	; 250
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	17 96       	adiw	r26, 0x07	; 7
     a42:	ed 91       	ld	r30, X+
     a44:	fc 91       	ld	r31, X
     a46:	18 97       	sbiw	r26, 0x08	; 8
     a48:	e2 0f       	add	r30, r18
     a4a:	f1 1d       	adc	r31, r1
     a4c:	30 81       	ld	r19, Z
     a4e:	fc 01       	movw	r30, r24
     a50:	30 83       	st	Z, r19
     a52:	2f 5f       	subi	r18, 0xFF	; 255
     a54:	16 96       	adiw	r26, 0x06	; 6
     a56:	3c 91       	ld	r19, X
     a58:	16 97       	sbiw	r26, 0x06	; 6
     a5a:	23 17       	cp	r18, r19
     a5c:	88 f3       	brcs	.-30     	; 0xa40 <__stack+0x141>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     a5e:	1a 96       	adiw	r26, 0x0a	; 10
     a60:	8c 91       	ld	r24, X
     a62:	1a 97       	sbiw	r26, 0x0a	; 10
     a64:	88 23       	and	r24, r24
     a66:	31 f0       	breq	.+12     	; 0xa74 <__stack+0x175>
     a68:	e0 ef       	ldi	r30, 0xF0	; 240
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	84 60       	ori	r24, 0x04	; 4
     a70:	80 83       	st	Z, r24
     a72:	05 c0       	rjmp	.+10     	; 0xa7e <__stack+0x17f>
            else Can_clear_rtr();    
     a74:	e0 ef       	ldi	r30, 0xF0	; 240
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	8b 7f       	andi	r24, 0xFB	; 251
     a7c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     a7e:	ef ee       	ldi	r30, 0xEF	; 239
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	90 81       	ld	r25, Z
     a84:	16 96       	adiw	r26, 0x06	; 6
     a86:	8c 91       	ld	r24, X
     a88:	89 2b       	or	r24, r25
     a8a:	80 83       	st	Z, r24
          Can_config_tx();
     a8c:	80 81       	ld	r24, Z
     a8e:	8f 73       	andi	r24, 0x3F	; 63
     a90:	80 83       	st	Z, r24
     a92:	80 81       	ld	r24, Z
     a94:	80 64       	ori	r24, 0x40	; 64
     a96:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a98:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a9a:	4c c5       	rjmp	.+2712   	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a9c:	1b 96       	adiw	r26, 0x0b	; 11
     a9e:	8c 91       	ld	r24, X
     aa0:	1b 97       	sbiw	r26, 0x0b	; 11
     aa2:	88 23       	and	r24, r24
     aa4:	d9 f1       	breq	.+118    	; 0xb1c <__stack+0x21d>
     aa6:	14 96       	adiw	r26, 0x04	; 4
     aa8:	9c 91       	ld	r25, X
     aaa:	14 97       	sbiw	r26, 0x04	; 4
     aac:	92 95       	swap	r25
     aae:	96 95       	lsr	r25
     ab0:	97 70       	andi	r25, 0x07	; 7
     ab2:	15 96       	adiw	r26, 0x05	; 5
     ab4:	8c 91       	ld	r24, X
     ab6:	15 97       	sbiw	r26, 0x05	; 5
     ab8:	88 0f       	add	r24, r24
     aba:	88 0f       	add	r24, r24
     abc:	88 0f       	add	r24, r24
     abe:	89 0f       	add	r24, r25
     ac0:	80 93 f3 00 	sts	0x00F3, r24
     ac4:	13 96       	adiw	r26, 0x03	; 3
     ac6:	9c 91       	ld	r25, X
     ac8:	13 97       	sbiw	r26, 0x03	; 3
     aca:	92 95       	swap	r25
     acc:	96 95       	lsr	r25
     ace:	97 70       	andi	r25, 0x07	; 7
     ad0:	14 96       	adiw	r26, 0x04	; 4
     ad2:	8c 91       	ld	r24, X
     ad4:	14 97       	sbiw	r26, 0x04	; 4
     ad6:	88 0f       	add	r24, r24
     ad8:	88 0f       	add	r24, r24
     ada:	88 0f       	add	r24, r24
     adc:	89 0f       	add	r24, r25
     ade:	80 93 f2 00 	sts	0x00F2, r24
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	9c 91       	ld	r25, X
     ae6:	12 97       	sbiw	r26, 0x02	; 2
     ae8:	92 95       	swap	r25
     aea:	96 95       	lsr	r25
     aec:	97 70       	andi	r25, 0x07	; 7
     aee:	13 96       	adiw	r26, 0x03	; 3
     af0:	8c 91       	ld	r24, X
     af2:	13 97       	sbiw	r26, 0x03	; 3
     af4:	88 0f       	add	r24, r24
     af6:	88 0f       	add	r24, r24
     af8:	88 0f       	add	r24, r24
     afa:	89 0f       	add	r24, r25
     afc:	80 93 f1 00 	sts	0x00F1, r24
     b00:	12 96       	adiw	r26, 0x02	; 2
     b02:	8c 91       	ld	r24, X
     b04:	12 97       	sbiw	r26, 0x02	; 2
     b06:	88 0f       	add	r24, r24
     b08:	88 0f       	add	r24, r24
     b0a:	88 0f       	add	r24, r24
     b0c:	80 93 f0 00 	sts	0x00F0, r24
     b10:	ef ee       	ldi	r30, 0xEF	; 239
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	80 61       	ori	r24, 0x10	; 16
     b18:	80 83       	st	Z, r24
     b1a:	1c c0       	rjmp	.+56     	; 0xb54 <__stack+0x255>
          else              { Can_set_std_id(cmd->id.std);}
     b1c:	12 96       	adiw	r26, 0x02	; 2
     b1e:	8c 91       	ld	r24, X
     b20:	12 97       	sbiw	r26, 0x02	; 2
     b22:	86 95       	lsr	r24
     b24:	86 95       	lsr	r24
     b26:	86 95       	lsr	r24
     b28:	13 96       	adiw	r26, 0x03	; 3
     b2a:	9c 91       	ld	r25, X
     b2c:	13 97       	sbiw	r26, 0x03	; 3
     b2e:	f0 e2       	ldi	r31, 0x20	; 32
     b30:	9f 9f       	mul	r25, r31
     b32:	80 0d       	add	r24, r0
     b34:	11 24       	eor	r1, r1
     b36:	80 93 f3 00 	sts	0x00F3, r24
     b3a:	12 96       	adiw	r26, 0x02	; 2
     b3c:	8c 91       	ld	r24, X
     b3e:	12 97       	sbiw	r26, 0x02	; 2
     b40:	82 95       	swap	r24
     b42:	88 0f       	add	r24, r24
     b44:	80 7e       	andi	r24, 0xE0	; 224
     b46:	80 93 f2 00 	sts	0x00F2, r24
     b4a:	ef ee       	ldi	r30, 0xEF	; 239
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	8f 7e       	andi	r24, 0xEF	; 239
     b52:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     b54:	16 96       	adiw	r26, 0x06	; 6
     b56:	8c 91       	ld	r24, X
     b58:	16 97       	sbiw	r26, 0x06	; 6
     b5a:	88 23       	and	r24, r24
     b5c:	91 f0       	breq	.+36     	; 0xb82 <__stack+0x283>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	8a ef       	ldi	r24, 0xFA	; 250
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	17 96       	adiw	r26, 0x07	; 7
     b66:	ed 91       	ld	r30, X+
     b68:	fc 91       	ld	r31, X
     b6a:	18 97       	sbiw	r26, 0x08	; 8
     b6c:	e2 0f       	add	r30, r18
     b6e:	f1 1d       	adc	r31, r1
     b70:	30 81       	ld	r19, Z
     b72:	fc 01       	movw	r30, r24
     b74:	30 83       	st	Z, r19
     b76:	2f 5f       	subi	r18, 0xFF	; 255
     b78:	16 96       	adiw	r26, 0x06	; 6
     b7a:	3c 91       	ld	r19, X
     b7c:	16 97       	sbiw	r26, 0x06	; 6
     b7e:	23 17       	cp	r18, r19
     b80:	88 f3       	brcs	.-30     	; 0xb64 <__stack+0x265>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     b82:	1a 96       	adiw	r26, 0x0a	; 10
     b84:	1c 92       	st	X, r1
     b86:	1a 97       	sbiw	r26, 0x0a	; 10
     b88:	e0 ef       	ldi	r30, 0xF0	; 240
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8b 7f       	andi	r24, 0xFB	; 251
     b90:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     b92:	ef ee       	ldi	r30, 0xEF	; 239
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	90 81       	ld	r25, Z
     b98:	16 96       	adiw	r26, 0x06	; 6
     b9a:	8c 91       	ld	r24, X
     b9c:	89 2b       	or	r24, r25
     b9e:	80 83       	st	Z, r24
          Can_config_tx();
     ba0:	80 81       	ld	r24, Z
     ba2:	8f 73       	andi	r24, 0x3F	; 63
     ba4:	80 83       	st	Z, r24
     ba6:	80 81       	ld	r24, Z
     ba8:	80 64       	ori	r24, 0x40	; 64
     baa:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     bac:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     bae:	c2 c4       	rjmp	.+2436   	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     bb0:	1b 96       	adiw	r26, 0x0b	; 11
     bb2:	8c 91       	ld	r24, X
     bb4:	1b 97       	sbiw	r26, 0x0b	; 11
     bb6:	88 23       	and	r24, r24
     bb8:	d9 f1       	breq	.+118    	; 0xc30 <__stack+0x331>
     bba:	14 96       	adiw	r26, 0x04	; 4
     bbc:	9c 91       	ld	r25, X
     bbe:	14 97       	sbiw	r26, 0x04	; 4
     bc0:	92 95       	swap	r25
     bc2:	96 95       	lsr	r25
     bc4:	97 70       	andi	r25, 0x07	; 7
     bc6:	15 96       	adiw	r26, 0x05	; 5
     bc8:	8c 91       	ld	r24, X
     bca:	15 97       	sbiw	r26, 0x05	; 5
     bcc:	88 0f       	add	r24, r24
     bce:	88 0f       	add	r24, r24
     bd0:	88 0f       	add	r24, r24
     bd2:	89 0f       	add	r24, r25
     bd4:	80 93 f3 00 	sts	0x00F3, r24
     bd8:	13 96       	adiw	r26, 0x03	; 3
     bda:	9c 91       	ld	r25, X
     bdc:	13 97       	sbiw	r26, 0x03	; 3
     bde:	92 95       	swap	r25
     be0:	96 95       	lsr	r25
     be2:	97 70       	andi	r25, 0x07	; 7
     be4:	14 96       	adiw	r26, 0x04	; 4
     be6:	8c 91       	ld	r24, X
     be8:	14 97       	sbiw	r26, 0x04	; 4
     bea:	88 0f       	add	r24, r24
     bec:	88 0f       	add	r24, r24
     bee:	88 0f       	add	r24, r24
     bf0:	89 0f       	add	r24, r25
     bf2:	80 93 f2 00 	sts	0x00F2, r24
     bf6:	12 96       	adiw	r26, 0x02	; 2
     bf8:	9c 91       	ld	r25, X
     bfa:	12 97       	sbiw	r26, 0x02	; 2
     bfc:	92 95       	swap	r25
     bfe:	96 95       	lsr	r25
     c00:	97 70       	andi	r25, 0x07	; 7
     c02:	13 96       	adiw	r26, 0x03	; 3
     c04:	8c 91       	ld	r24, X
     c06:	13 97       	sbiw	r26, 0x03	; 3
     c08:	88 0f       	add	r24, r24
     c0a:	88 0f       	add	r24, r24
     c0c:	88 0f       	add	r24, r24
     c0e:	89 0f       	add	r24, r25
     c10:	80 93 f1 00 	sts	0x00F1, r24
     c14:	12 96       	adiw	r26, 0x02	; 2
     c16:	8c 91       	ld	r24, X
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	88 0f       	add	r24, r24
     c1c:	88 0f       	add	r24, r24
     c1e:	88 0f       	add	r24, r24
     c20:	80 93 f0 00 	sts	0x00F0, r24
     c24:	ef ee       	ldi	r30, 0xEF	; 239
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 61       	ori	r24, 0x10	; 16
     c2c:	80 83       	st	Z, r24
     c2e:	1c c0       	rjmp	.+56     	; 0xc68 <__stack+0x369>
          else              { Can_set_std_id(cmd->id.std);}
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	8c 91       	ld	r24, X
     c34:	12 97       	sbiw	r26, 0x02	; 2
     c36:	86 95       	lsr	r24
     c38:	86 95       	lsr	r24
     c3a:	86 95       	lsr	r24
     c3c:	13 96       	adiw	r26, 0x03	; 3
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	f0 e2       	ldi	r31, 0x20	; 32
     c44:	9f 9f       	mul	r25, r31
     c46:	80 0d       	add	r24, r0
     c48:	11 24       	eor	r1, r1
     c4a:	80 93 f3 00 	sts	0x00F3, r24
     c4e:	12 96       	adiw	r26, 0x02	; 2
     c50:	8c 91       	ld	r24, X
     c52:	12 97       	sbiw	r26, 0x02	; 2
     c54:	82 95       	swap	r24
     c56:	88 0f       	add	r24, r24
     c58:	80 7e       	andi	r24, 0xE0	; 224
     c5a:	80 93 f2 00 	sts	0x00F2, r24
     c5e:	ef ee       	ldi	r30, 0xEF	; 239
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8f 7e       	andi	r24, 0xEF	; 239
     c66:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	1a 96       	adiw	r26, 0x0a	; 10
     c6c:	8c 93       	st	X, r24
     c6e:	1a 97       	sbiw	r26, 0x0a	; 10
     c70:	e0 ef       	ldi	r30, 0xF0	; 240
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	84 60       	ori	r24, 0x04	; 4
     c78:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     c7a:	ef ee       	ldi	r30, 0xEF	; 239
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	90 81       	ld	r25, Z
     c80:	16 96       	adiw	r26, 0x06	; 6
     c82:	8c 91       	ld	r24, X
     c84:	89 2b       	or	r24, r25
     c86:	80 83       	st	Z, r24
          Can_config_tx();
     c88:	80 81       	ld	r24, Z
     c8a:	8f 73       	andi	r24, 0x3F	; 63
     c8c:	80 83       	st	Z, r24
     c8e:	80 81       	ld	r24, Z
     c90:	80 64       	ori	r24, 0x40	; 64
     c92:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c94:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     c96:	4e c4       	rjmp	.+2204   	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     c98:	19 82       	std	Y+1, r1	; 0x01
     c9a:	9b 81       	ldd	r25, Y+3	; 0x03
     c9c:	92 95       	swap	r25
     c9e:	96 95       	lsr	r25
     ca0:	97 70       	andi	r25, 0x07	; 7
     ca2:	8c 81       	ldd	r24, Y+4	; 0x04
     ca4:	88 0f       	add	r24, r24
     ca6:	88 0f       	add	r24, r24
     ca8:	88 0f       	add	r24, r24
     caa:	89 0f       	add	r24, r25
     cac:	80 93 f7 00 	sts	0x00F7, r24
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	92 95       	swap	r25
     cb4:	96 95       	lsr	r25
     cb6:	97 70       	andi	r25, 0x07	; 7
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	88 0f       	add	r24, r24
     cbc:	88 0f       	add	r24, r24
     cbe:	88 0f       	add	r24, r24
     cc0:	89 0f       	add	r24, r25
     cc2:	80 93 f6 00 	sts	0x00F6, r24
     cc6:	99 81       	ldd	r25, Y+1	; 0x01
     cc8:	92 95       	swap	r25
     cca:	96 95       	lsr	r25
     ccc:	97 70       	andi	r25, 0x07	; 7
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	88 0f       	add	r24, r24
     cd2:	88 0f       	add	r24, r24
     cd4:	88 0f       	add	r24, r24
     cd6:	89 0f       	add	r24, r25
     cd8:	80 93 f5 00 	sts	0x00F5, r24
     cdc:	29 81       	ldd	r18, Y+1	; 0x01
     cde:	22 0f       	add	r18, r18
     ce0:	22 0f       	add	r18, r18
     ce2:	22 0f       	add	r18, r18
     ce4:	84 ef       	ldi	r24, 0xF4	; 244
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	fc 01       	movw	r30, r24
     cea:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     cec:	ef ee       	ldi	r30, 0xEF	; 239
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	30 81       	ld	r19, Z
     cf2:	16 96       	adiw	r26, 0x06	; 6
     cf4:	2c 91       	ld	r18, X
     cf6:	23 2b       	or	r18, r19
     cf8:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     cfa:	dc 01       	movw	r26, r24
     cfc:	2c 91       	ld	r18, X
     cfe:	2b 7f       	andi	r18, 0xFB	; 251
     d00:	2c 93       	st	X, r18
          Can_clear_idemsk();
     d02:	2c 91       	ld	r18, X
     d04:	2e 7f       	andi	r18, 0xFE	; 254
     d06:	2c 93       	st	X, r18
          Can_config_rx();       
     d08:	80 81       	ld	r24, Z
     d0a:	8f 73       	andi	r24, 0x3F	; 63
     d0c:	80 83       	st	Z, r24
     d0e:	80 81       	ld	r24, Z
     d10:	80 68       	ori	r24, 0x80	; 128
     d12:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d14:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     d16:	0e c4       	rjmp	.+2076   	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	82 95       	swap	r24
     d20:	88 0f       	add	r24, r24
     d22:	80 7e       	andi	r24, 0xE0	; 224
     d24:	81 5e       	subi	r24, 0xE1	; 225
     d26:	27 ef       	ldi	r18, 0xF7	; 247
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	f9 01       	movw	r30, r18
     d2c:	80 83       	st	Z, r24
     d2e:	49 81       	ldd	r20, Y+1	; 0x01
     d30:	42 95       	swap	r20
     d32:	44 0f       	add	r20, r20
     d34:	40 7e       	andi	r20, 0xE0	; 224
     d36:	86 ef       	ldi	r24, 0xF6	; 246
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	fc 01       	movw	r30, r24
     d3c:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     d3e:	12 96       	adiw	r26, 0x02	; 2
     d40:	4c 91       	ld	r20, X
     d42:	12 97       	sbiw	r26, 0x02	; 2
     d44:	46 95       	lsr	r20
     d46:	46 95       	lsr	r20
     d48:	46 95       	lsr	r20
     d4a:	13 96       	adiw	r26, 0x03	; 3
     d4c:	5c 91       	ld	r21, X
     d4e:	13 97       	sbiw	r26, 0x03	; 3
     d50:	f0 e2       	ldi	r31, 0x20	; 32
     d52:	5f 9f       	mul	r21, r31
     d54:	40 0d       	add	r20, r0
     d56:	11 24       	eor	r1, r1
     d58:	40 93 f3 00 	sts	0x00F3, r20
     d5c:	12 96       	adiw	r26, 0x02	; 2
     d5e:	4c 91       	ld	r20, X
     d60:	12 97       	sbiw	r26, 0x02	; 2
     d62:	42 95       	swap	r20
     d64:	44 0f       	add	r20, r20
     d66:	40 7e       	andi	r20, 0xE0	; 224
     d68:	40 93 f2 00 	sts	0x00F2, r20
     d6c:	6f ee       	ldi	r22, 0xEF	; 239
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	fb 01       	movw	r30, r22
     d72:	40 81       	ld	r20, Z
     d74:	4f 7e       	andi	r20, 0xEF	; 239
     d76:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     d78:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     d7a:	5b 81       	ldd	r21, Y+3	; 0x03
     d7c:	52 95       	swap	r21
     d7e:	56 95       	lsr	r21
     d80:	57 70       	andi	r21, 0x07	; 7
     d82:	4c 81       	ldd	r20, Y+4	; 0x04
     d84:	44 0f       	add	r20, r20
     d86:	44 0f       	add	r20, r20
     d88:	44 0f       	add	r20, r20
     d8a:	45 0f       	add	r20, r21
     d8c:	f9 01       	movw	r30, r18
     d8e:	40 83       	st	Z, r20
     d90:	3a 81       	ldd	r19, Y+2	; 0x02
     d92:	32 95       	swap	r19
     d94:	36 95       	lsr	r19
     d96:	37 70       	andi	r19, 0x07	; 7
     d98:	2b 81       	ldd	r18, Y+3	; 0x03
     d9a:	22 0f       	add	r18, r18
     d9c:	22 0f       	add	r18, r18
     d9e:	22 0f       	add	r18, r18
     da0:	23 0f       	add	r18, r19
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
     da6:	99 81       	ldd	r25, Y+1	; 0x01
     da8:	92 95       	swap	r25
     daa:	96 95       	lsr	r25
     dac:	97 70       	andi	r25, 0x07	; 7
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	88 0f       	add	r24, r24
     db2:	88 0f       	add	r24, r24
     db4:	88 0f       	add	r24, r24
     db6:	89 0f       	add	r24, r25
     db8:	80 93 f5 00 	sts	0x00F5, r24
     dbc:	29 81       	ldd	r18, Y+1	; 0x01
     dbe:	22 0f       	add	r18, r18
     dc0:	22 0f       	add	r18, r18
     dc2:	22 0f       	add	r18, r18
     dc4:	84 ef       	ldi	r24, 0xF4	; 244
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     dcc:	fb 01       	movw	r30, r22
     dce:	30 81       	ld	r19, Z
     dd0:	16 96       	adiw	r26, 0x06	; 6
     dd2:	2c 91       	ld	r18, X
     dd4:	16 97       	sbiw	r26, 0x06	; 6
     dd6:	23 2b       	or	r18, r19
     dd8:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     dda:	1a 96       	adiw	r26, 0x0a	; 10
     ddc:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     dde:	dc 01       	movw	r26, r24
     de0:	2c 91       	ld	r18, X
     de2:	24 60       	ori	r18, 0x04	; 4
     de4:	2c 93       	st	X, r18
		  Can_clear_rtr();
     de6:	a0 ef       	ldi	r26, 0xF0	; 240
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	2c 91       	ld	r18, X
     dec:	2b 7f       	andi	r18, 0xFB	; 251
     dee:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     df0:	20 81       	ld	r18, Z
     df2:	2f 7e       	andi	r18, 0xEF	; 239
     df4:	20 83       	st	Z, r18
          Can_clear_idemsk();
     df6:	fc 01       	movw	r30, r24
     df8:	20 81       	ld	r18, Z
     dfa:	2e 7f       	andi	r18, 0xFE	; 254
     dfc:	20 83       	st	Z, r18
          Can_config_rx();       
     dfe:	db 01       	movw	r26, r22
     e00:	8c 91       	ld	r24, X
     e02:	8f 73       	andi	r24, 0x3F	; 63
     e04:	8c 93       	st	X, r24
     e06:	8c 91       	ld	r24, X
     e08:	80 68       	ori	r24, 0x80	; 128
     e0a:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e0c:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     e0e:	92 c3       	rjmp	.+1828   	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	82 95       	swap	r24
     e18:	88 0f       	add	r24, r24
     e1a:	80 7e       	andi	r24, 0xE0	; 224
     e1c:	81 5e       	subi	r24, 0xE1	; 225
     e1e:	27 ef       	ldi	r18, 0xF7	; 247
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	f9 01       	movw	r30, r18
     e24:	80 83       	st	Z, r24
     e26:	49 81       	ldd	r20, Y+1	; 0x01
     e28:	42 95       	swap	r20
     e2a:	44 0f       	add	r20, r20
     e2c:	40 7e       	andi	r20, 0xE0	; 224
     e2e:	86 ef       	ldi	r24, 0xF6	; 246
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	fc 01       	movw	r30, r24
     e34:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     e36:	12 96       	adiw	r26, 0x02	; 2
     e38:	4c 91       	ld	r20, X
     e3a:	12 97       	sbiw	r26, 0x02	; 2
     e3c:	46 95       	lsr	r20
     e3e:	46 95       	lsr	r20
     e40:	46 95       	lsr	r20
     e42:	13 96       	adiw	r26, 0x03	; 3
     e44:	5c 91       	ld	r21, X
     e46:	13 97       	sbiw	r26, 0x03	; 3
     e48:	f0 e2       	ldi	r31, 0x20	; 32
     e4a:	5f 9f       	mul	r21, r31
     e4c:	40 0d       	add	r20, r0
     e4e:	11 24       	eor	r1, r1
     e50:	40 93 f3 00 	sts	0x00F3, r20
     e54:	12 96       	adiw	r26, 0x02	; 2
     e56:	4c 91       	ld	r20, X
     e58:	12 97       	sbiw	r26, 0x02	; 2
     e5a:	42 95       	swap	r20
     e5c:	44 0f       	add	r20, r20
     e5e:	40 7e       	andi	r20, 0xE0	; 224
     e60:	40 93 f2 00 	sts	0x00F2, r20
     e64:	6f ee       	ldi	r22, 0xEF	; 239
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	fb 01       	movw	r30, r22
     e6a:	40 81       	ld	r20, Z
     e6c:	4f 7e       	andi	r20, 0xEF	; 239
     e6e:	40 83       	st	Z, r20
		
          u8_temp=0; 
     e70:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     e72:	5b 81       	ldd	r21, Y+3	; 0x03
     e74:	52 95       	swap	r21
     e76:	56 95       	lsr	r21
     e78:	57 70       	andi	r21, 0x07	; 7
     e7a:	4c 81       	ldd	r20, Y+4	; 0x04
     e7c:	44 0f       	add	r20, r20
     e7e:	44 0f       	add	r20, r20
     e80:	44 0f       	add	r20, r20
     e82:	45 0f       	add	r20, r21
     e84:	f9 01       	movw	r30, r18
     e86:	40 83       	st	Z, r20
     e88:	3a 81       	ldd	r19, Y+2	; 0x02
     e8a:	32 95       	swap	r19
     e8c:	36 95       	lsr	r19
     e8e:	37 70       	andi	r19, 0x07	; 7
     e90:	2b 81       	ldd	r18, Y+3	; 0x03
     e92:	22 0f       	add	r18, r18
     e94:	22 0f       	add	r18, r18
     e96:	22 0f       	add	r18, r18
     e98:	23 0f       	add	r18, r19
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 83       	st	Z, r18
     e9e:	99 81       	ldd	r25, Y+1	; 0x01
     ea0:	92 95       	swap	r25
     ea2:	96 95       	lsr	r25
     ea4:	97 70       	andi	r25, 0x07	; 7
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	88 0f       	add	r24, r24
     eaa:	88 0f       	add	r24, r24
     eac:	88 0f       	add	r24, r24
     eae:	89 0f       	add	r24, r25
     eb0:	80 93 f5 00 	sts	0x00F5, r24
     eb4:	29 81       	ldd	r18, Y+1	; 0x01
     eb6:	22 0f       	add	r18, r18
     eb8:	22 0f       	add	r18, r18
     eba:	22 0f       	add	r18, r18
     ebc:	84 ef       	ldi	r24, 0xF4	; 244
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ec4:	fb 01       	movw	r30, r22
     ec6:	30 81       	ld	r19, Z
     ec8:	16 96       	adiw	r26, 0x06	; 6
     eca:	2c 91       	ld	r18, X
     ecc:	16 97       	sbiw	r26, 0x06	; 6
     ece:	23 2b       	or	r18, r19
     ed0:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	1a 96       	adiw	r26, 0x0a	; 10
     ed6:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     ed8:	dc 01       	movw	r26, r24
     eda:	2c 91       	ld	r18, X
     edc:	24 60       	ori	r18, 0x04	; 4
     ede:	2c 93       	st	X, r18
		  Can_set_rtr();
     ee0:	a0 ef       	ldi	r26, 0xF0	; 240
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	2c 91       	ld	r18, X
     ee6:	24 60       	ori	r18, 0x04	; 4
     ee8:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     eea:	20 81       	ld	r18, Z
     eec:	2f 7d       	andi	r18, 0xDF	; 223
     eee:	20 83       	st	Z, r18
          Can_clear_idemsk();
     ef0:	fc 01       	movw	r30, r24
     ef2:	20 81       	ld	r18, Z
     ef4:	2e 7f       	andi	r18, 0xFE	; 254
     ef6:	20 83       	st	Z, r18
          Can_config_rx();       
     ef8:	db 01       	movw	r26, r22
     efa:	8c 91       	ld	r24, X
     efc:	8f 73       	andi	r24, 0x3F	; 63
     efe:	8c 93       	st	X, r24
     f00:	8c 91       	ld	r24, X
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     f06:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     f08:	15 c3       	rjmp	.+1578   	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f0a:	1b 96       	adiw	r26, 0x0b	; 11
     f0c:	8c 91       	ld	r24, X
     f0e:	1b 97       	sbiw	r26, 0x0b	; 11
     f10:	88 23       	and	r24, r24
     f12:	d9 f1       	breq	.+118    	; 0xf8a <__stack+0x68b>
     f14:	14 96       	adiw	r26, 0x04	; 4
     f16:	9c 91       	ld	r25, X
     f18:	14 97       	sbiw	r26, 0x04	; 4
     f1a:	92 95       	swap	r25
     f1c:	96 95       	lsr	r25
     f1e:	97 70       	andi	r25, 0x07	; 7
     f20:	15 96       	adiw	r26, 0x05	; 5
     f22:	8c 91       	ld	r24, X
     f24:	15 97       	sbiw	r26, 0x05	; 5
     f26:	88 0f       	add	r24, r24
     f28:	88 0f       	add	r24, r24
     f2a:	88 0f       	add	r24, r24
     f2c:	89 0f       	add	r24, r25
     f2e:	80 93 f3 00 	sts	0x00F3, r24
     f32:	13 96       	adiw	r26, 0x03	; 3
     f34:	9c 91       	ld	r25, X
     f36:	13 97       	sbiw	r26, 0x03	; 3
     f38:	92 95       	swap	r25
     f3a:	96 95       	lsr	r25
     f3c:	97 70       	andi	r25, 0x07	; 7
     f3e:	14 96       	adiw	r26, 0x04	; 4
     f40:	8c 91       	ld	r24, X
     f42:	14 97       	sbiw	r26, 0x04	; 4
     f44:	88 0f       	add	r24, r24
     f46:	88 0f       	add	r24, r24
     f48:	88 0f       	add	r24, r24
     f4a:	89 0f       	add	r24, r25
     f4c:	80 93 f2 00 	sts	0x00F2, r24
     f50:	12 96       	adiw	r26, 0x02	; 2
     f52:	9c 91       	ld	r25, X
     f54:	12 97       	sbiw	r26, 0x02	; 2
     f56:	92 95       	swap	r25
     f58:	96 95       	lsr	r25
     f5a:	97 70       	andi	r25, 0x07	; 7
     f5c:	13 96       	adiw	r26, 0x03	; 3
     f5e:	8c 91       	ld	r24, X
     f60:	13 97       	sbiw	r26, 0x03	; 3
     f62:	88 0f       	add	r24, r24
     f64:	88 0f       	add	r24, r24
     f66:	88 0f       	add	r24, r24
     f68:	89 0f       	add	r24, r25
     f6a:	80 93 f1 00 	sts	0x00F1, r24
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	8c 91       	ld	r24, X
     f72:	12 97       	sbiw	r26, 0x02	; 2
     f74:	88 0f       	add	r24, r24
     f76:	88 0f       	add	r24, r24
     f78:	88 0f       	add	r24, r24
     f7a:	80 93 f0 00 	sts	0x00F0, r24
     f7e:	ef ee       	ldi	r30, 0xEF	; 239
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	80 61       	ori	r24, 0x10	; 16
     f86:	80 83       	st	Z, r24
     f88:	1c c0       	rjmp	.+56     	; 0xfc2 <__stack+0x6c3>
          else              { Can_set_std_id(cmd->id.std);}
     f8a:	12 96       	adiw	r26, 0x02	; 2
     f8c:	8c 91       	ld	r24, X
     f8e:	12 97       	sbiw	r26, 0x02	; 2
     f90:	86 95       	lsr	r24
     f92:	86 95       	lsr	r24
     f94:	86 95       	lsr	r24
     f96:	13 96       	adiw	r26, 0x03	; 3
     f98:	9c 91       	ld	r25, X
     f9a:	13 97       	sbiw	r26, 0x03	; 3
     f9c:	e0 e2       	ldi	r30, 0x20	; 32
     f9e:	9e 9f       	mul	r25, r30
     fa0:	80 0d       	add	r24, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	80 93 f3 00 	sts	0x00F3, r24
     fa8:	12 96       	adiw	r26, 0x02	; 2
     faa:	8c 91       	ld	r24, X
     fac:	12 97       	sbiw	r26, 0x02	; 2
     fae:	82 95       	swap	r24
     fb0:	88 0f       	add	r24, r24
     fb2:	80 7e       	andi	r24, 0xE0	; 224
     fb4:	80 93 f2 00 	sts	0x00F2, r24
     fb8:	ef ee       	ldi	r30, 0xEF	; 239
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 7e       	andi	r24, 0xEF	; 239
     fc0:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	9b 81       	ldd	r25, Y+3	; 0x03
     fc8:	92 95       	swap	r25
     fca:	96 95       	lsr	r25
     fcc:	97 70       	andi	r25, 0x07	; 7
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	88 0f       	add	r24, r24
     fd2:	88 0f       	add	r24, r24
     fd4:	88 0f       	add	r24, r24
     fd6:	89 0f       	add	r24, r25
     fd8:	80 93 f7 00 	sts	0x00F7, r24
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	92 95       	swap	r25
     fe0:	96 95       	lsr	r25
     fe2:	97 70       	andi	r25, 0x07	; 7
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 0f       	add	r24, r24
     fe8:	88 0f       	add	r24, r24
     fea:	88 0f       	add	r24, r24
     fec:	89 0f       	add	r24, r25
     fee:	80 93 f6 00 	sts	0x00F6, r24
     ff2:	99 81       	ldd	r25, Y+1	; 0x01
     ff4:	92 95       	swap	r25
     ff6:	96 95       	lsr	r25
     ff8:	97 70       	andi	r25, 0x07	; 7
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	88 0f       	add	r24, r24
     ffe:	88 0f       	add	r24, r24
    1000:	88 0f       	add	r24, r24
    1002:	89 0f       	add	r24, r25
    1004:	80 93 f5 00 	sts	0x00F5, r24
    1008:	29 81       	ldd	r18, Y+1	; 0x01
    100a:	22 0f       	add	r18, r18
    100c:	22 0f       	add	r18, r18
    100e:	22 0f       	add	r18, r18
    1010:	84 ef       	ldi	r24, 0xF4	; 244
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
    1018:	ef ee       	ldi	r30, 0xEF	; 239
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	30 81       	ld	r19, Z
    101e:	16 96       	adiw	r26, 0x06	; 6
    1020:	2c 91       	ld	r18, X
    1022:	23 2b       	or	r18, r19
    1024:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
    1026:	dc 01       	movw	r26, r24
    1028:	2c 91       	ld	r18, X
    102a:	2b 7f       	andi	r18, 0xFB	; 251
    102c:	2c 93       	st	X, r18
          Can_set_idemsk();
    102e:	2c 91       	ld	r18, X
    1030:	21 60       	ori	r18, 0x01	; 1
    1032:	2c 93       	st	X, r18
          Can_config_rx();       
    1034:	80 81       	ld	r24, Z
    1036:	8f 73       	andi	r24, 0x3F	; 63
    1038:	80 83       	st	Z, r24
    103a:	80 81       	ld	r24, Z
    103c:	80 68       	ori	r24, 0x80	; 128
    103e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1040:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1042:	78 c2       	rjmp	.+1264   	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1044:	1b 96       	adiw	r26, 0x0b	; 11
    1046:	8c 91       	ld	r24, X
    1048:	1b 97       	sbiw	r26, 0x0b	; 11
    104a:	88 23       	and	r24, r24
    104c:	d9 f1       	breq	.+118    	; 0x10c4 <__stack+0x7c5>
    104e:	14 96       	adiw	r26, 0x04	; 4
    1050:	9c 91       	ld	r25, X
    1052:	14 97       	sbiw	r26, 0x04	; 4
    1054:	92 95       	swap	r25
    1056:	96 95       	lsr	r25
    1058:	97 70       	andi	r25, 0x07	; 7
    105a:	15 96       	adiw	r26, 0x05	; 5
    105c:	8c 91       	ld	r24, X
    105e:	15 97       	sbiw	r26, 0x05	; 5
    1060:	88 0f       	add	r24, r24
    1062:	88 0f       	add	r24, r24
    1064:	88 0f       	add	r24, r24
    1066:	89 0f       	add	r24, r25
    1068:	80 93 f3 00 	sts	0x00F3, r24
    106c:	13 96       	adiw	r26, 0x03	; 3
    106e:	9c 91       	ld	r25, X
    1070:	13 97       	sbiw	r26, 0x03	; 3
    1072:	92 95       	swap	r25
    1074:	96 95       	lsr	r25
    1076:	97 70       	andi	r25, 0x07	; 7
    1078:	14 96       	adiw	r26, 0x04	; 4
    107a:	8c 91       	ld	r24, X
    107c:	14 97       	sbiw	r26, 0x04	; 4
    107e:	88 0f       	add	r24, r24
    1080:	88 0f       	add	r24, r24
    1082:	88 0f       	add	r24, r24
    1084:	89 0f       	add	r24, r25
    1086:	80 93 f2 00 	sts	0x00F2, r24
    108a:	12 96       	adiw	r26, 0x02	; 2
    108c:	9c 91       	ld	r25, X
    108e:	12 97       	sbiw	r26, 0x02	; 2
    1090:	92 95       	swap	r25
    1092:	96 95       	lsr	r25
    1094:	97 70       	andi	r25, 0x07	; 7
    1096:	13 96       	adiw	r26, 0x03	; 3
    1098:	8c 91       	ld	r24, X
    109a:	13 97       	sbiw	r26, 0x03	; 3
    109c:	88 0f       	add	r24, r24
    109e:	88 0f       	add	r24, r24
    10a0:	88 0f       	add	r24, r24
    10a2:	89 0f       	add	r24, r25
    10a4:	80 93 f1 00 	sts	0x00F1, r24
    10a8:	12 96       	adiw	r26, 0x02	; 2
    10aa:	8c 91       	ld	r24, X
    10ac:	12 97       	sbiw	r26, 0x02	; 2
    10ae:	88 0f       	add	r24, r24
    10b0:	88 0f       	add	r24, r24
    10b2:	88 0f       	add	r24, r24
    10b4:	80 93 f0 00 	sts	0x00F0, r24
    10b8:	ef ee       	ldi	r30, 0xEF	; 239
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 61       	ori	r24, 0x10	; 16
    10c0:	80 83       	st	Z, r24
    10c2:	1c c0       	rjmp	.+56     	; 0x10fc <__stack+0x7fd>
          else              { Can_set_std_id(cmd->id.std);}
    10c4:	12 96       	adiw	r26, 0x02	; 2
    10c6:	8c 91       	ld	r24, X
    10c8:	12 97       	sbiw	r26, 0x02	; 2
    10ca:	86 95       	lsr	r24
    10cc:	86 95       	lsr	r24
    10ce:	86 95       	lsr	r24
    10d0:	13 96       	adiw	r26, 0x03	; 3
    10d2:	9c 91       	ld	r25, X
    10d4:	13 97       	sbiw	r26, 0x03	; 3
    10d6:	e0 e2       	ldi	r30, 0x20	; 32
    10d8:	9e 9f       	mul	r25, r30
    10da:	80 0d       	add	r24, r0
    10dc:	11 24       	eor	r1, r1
    10de:	80 93 f3 00 	sts	0x00F3, r24
    10e2:	12 96       	adiw	r26, 0x02	; 2
    10e4:	8c 91       	ld	r24, X
    10e6:	12 97       	sbiw	r26, 0x02	; 2
    10e8:	82 95       	swap	r24
    10ea:	88 0f       	add	r24, r24
    10ec:	80 7e       	andi	r24, 0xE0	; 224
    10ee:	80 93 f2 00 	sts	0x00F2, r24
    10f2:	ef ee       	ldi	r30, 0xEF	; 239
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 7e       	andi	r24, 0xEF	; 239
    10fa:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10fc:	8f ef       	ldi	r24, 0xFF	; 255
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	92 95       	swap	r25
    1104:	96 95       	lsr	r25
    1106:	97 70       	andi	r25, 0x07	; 7
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	88 0f       	add	r24, r24
    110c:	88 0f       	add	r24, r24
    110e:	88 0f       	add	r24, r24
    1110:	89 0f       	add	r24, r25
    1112:	80 93 f7 00 	sts	0x00F7, r24
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	92 95       	swap	r25
    111a:	96 95       	lsr	r25
    111c:	97 70       	andi	r25, 0x07	; 7
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 0f       	add	r24, r24
    1122:	88 0f       	add	r24, r24
    1124:	88 0f       	add	r24, r24
    1126:	89 0f       	add	r24, r25
    1128:	80 93 f6 00 	sts	0x00F6, r24
    112c:	99 81       	ldd	r25, Y+1	; 0x01
    112e:	92 95       	swap	r25
    1130:	96 95       	lsr	r25
    1132:	97 70       	andi	r25, 0x07	; 7
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	88 0f       	add	r24, r24
    1138:	88 0f       	add	r24, r24
    113a:	88 0f       	add	r24, r24
    113c:	89 0f       	add	r24, r25
    113e:	80 93 f5 00 	sts	0x00F5, r24
    1142:	29 81       	ldd	r18, Y+1	; 0x01
    1144:	22 0f       	add	r18, r18
    1146:	22 0f       	add	r18, r18
    1148:	22 0f       	add	r18, r18
    114a:	84 ef       	ldi	r24, 0xF4	; 244
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1152:	ef ee       	ldi	r30, 0xEF	; 239
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	30 81       	ld	r19, Z
    1158:	16 96       	adiw	r26, 0x06	; 6
    115a:	2c 91       	ld	r18, X
    115c:	16 97       	sbiw	r26, 0x06	; 6
    115e:	23 2b       	or	r18, r19
    1160:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1162:	1a 96       	adiw	r26, 0x0a	; 10
    1164:	1c 92       	st	X, r1
    1166:	dc 01       	movw	r26, r24
    1168:	2c 91       	ld	r18, X
    116a:	24 60       	ori	r18, 0x04	; 4
    116c:	2c 93       	st	X, r18
    116e:	a0 ef       	ldi	r26, 0xF0	; 240
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	2c 91       	ld	r18, X
    1174:	2b 7f       	andi	r18, 0xFB	; 251
    1176:	2c 93       	st	X, r18
          Can_set_idemsk();
    1178:	dc 01       	movw	r26, r24
    117a:	2c 91       	ld	r18, X
    117c:	21 60       	ori	r18, 0x01	; 1
    117e:	2c 93       	st	X, r18
          Can_config_rx();       
    1180:	80 81       	ld	r24, Z
    1182:	8f 73       	andi	r24, 0x3F	; 63
    1184:	80 83       	st	Z, r24
    1186:	80 81       	ld	r24, Z
    1188:	80 68       	ori	r24, 0x80	; 128
    118a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    118c:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    118e:	d2 c1       	rjmp	.+932    	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1190:	1b 96       	adiw	r26, 0x0b	; 11
    1192:	8c 91       	ld	r24, X
    1194:	1b 97       	sbiw	r26, 0x0b	; 11
    1196:	88 23       	and	r24, r24
    1198:	d9 f1       	breq	.+118    	; 0x1210 <__stack+0x911>
    119a:	14 96       	adiw	r26, 0x04	; 4
    119c:	9c 91       	ld	r25, X
    119e:	14 97       	sbiw	r26, 0x04	; 4
    11a0:	92 95       	swap	r25
    11a2:	96 95       	lsr	r25
    11a4:	97 70       	andi	r25, 0x07	; 7
    11a6:	15 96       	adiw	r26, 0x05	; 5
    11a8:	8c 91       	ld	r24, X
    11aa:	15 97       	sbiw	r26, 0x05	; 5
    11ac:	88 0f       	add	r24, r24
    11ae:	88 0f       	add	r24, r24
    11b0:	88 0f       	add	r24, r24
    11b2:	89 0f       	add	r24, r25
    11b4:	80 93 f3 00 	sts	0x00F3, r24
    11b8:	13 96       	adiw	r26, 0x03	; 3
    11ba:	9c 91       	ld	r25, X
    11bc:	13 97       	sbiw	r26, 0x03	; 3
    11be:	92 95       	swap	r25
    11c0:	96 95       	lsr	r25
    11c2:	97 70       	andi	r25, 0x07	; 7
    11c4:	14 96       	adiw	r26, 0x04	; 4
    11c6:	8c 91       	ld	r24, X
    11c8:	14 97       	sbiw	r26, 0x04	; 4
    11ca:	88 0f       	add	r24, r24
    11cc:	88 0f       	add	r24, r24
    11ce:	88 0f       	add	r24, r24
    11d0:	89 0f       	add	r24, r25
    11d2:	80 93 f2 00 	sts	0x00F2, r24
    11d6:	12 96       	adiw	r26, 0x02	; 2
    11d8:	9c 91       	ld	r25, X
    11da:	12 97       	sbiw	r26, 0x02	; 2
    11dc:	92 95       	swap	r25
    11de:	96 95       	lsr	r25
    11e0:	97 70       	andi	r25, 0x07	; 7
    11e2:	13 96       	adiw	r26, 0x03	; 3
    11e4:	8c 91       	ld	r24, X
    11e6:	13 97       	sbiw	r26, 0x03	; 3
    11e8:	88 0f       	add	r24, r24
    11ea:	88 0f       	add	r24, r24
    11ec:	88 0f       	add	r24, r24
    11ee:	89 0f       	add	r24, r25
    11f0:	80 93 f1 00 	sts	0x00F1, r24
    11f4:	12 96       	adiw	r26, 0x02	; 2
    11f6:	8c 91       	ld	r24, X
    11f8:	12 97       	sbiw	r26, 0x02	; 2
    11fa:	88 0f       	add	r24, r24
    11fc:	88 0f       	add	r24, r24
    11fe:	88 0f       	add	r24, r24
    1200:	80 93 f0 00 	sts	0x00F0, r24
    1204:	ef ee       	ldi	r30, 0xEF	; 239
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 61       	ori	r24, 0x10	; 16
    120c:	80 83       	st	Z, r24
    120e:	1c c0       	rjmp	.+56     	; 0x1248 <__stack+0x949>
          else              { Can_set_std_id(cmd->id.std);}
    1210:	12 96       	adiw	r26, 0x02	; 2
    1212:	8c 91       	ld	r24, X
    1214:	12 97       	sbiw	r26, 0x02	; 2
    1216:	86 95       	lsr	r24
    1218:	86 95       	lsr	r24
    121a:	86 95       	lsr	r24
    121c:	13 96       	adiw	r26, 0x03	; 3
    121e:	9c 91       	ld	r25, X
    1220:	13 97       	sbiw	r26, 0x03	; 3
    1222:	e0 e2       	ldi	r30, 0x20	; 32
    1224:	9e 9f       	mul	r25, r30
    1226:	80 0d       	add	r24, r0
    1228:	11 24       	eor	r1, r1
    122a:	80 93 f3 00 	sts	0x00F3, r24
    122e:	12 96       	adiw	r26, 0x02	; 2
    1230:	8c 91       	ld	r24, X
    1232:	12 97       	sbiw	r26, 0x02	; 2
    1234:	82 95       	swap	r24
    1236:	88 0f       	add	r24, r24
    1238:	80 7e       	andi	r24, 0xE0	; 224
    123a:	80 93 f2 00 	sts	0x00F2, r24
    123e:	ef ee       	ldi	r30, 0xEF	; 239
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8f 7e       	andi	r24, 0xEF	; 239
    1246:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	9b 81       	ldd	r25, Y+3	; 0x03
    124e:	92 95       	swap	r25
    1250:	96 95       	lsr	r25
    1252:	97 70       	andi	r25, 0x07	; 7
    1254:	8c 81       	ldd	r24, Y+4	; 0x04
    1256:	88 0f       	add	r24, r24
    1258:	88 0f       	add	r24, r24
    125a:	88 0f       	add	r24, r24
    125c:	89 0f       	add	r24, r25
    125e:	80 93 f7 00 	sts	0x00F7, r24
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	92 95       	swap	r25
    1266:	96 95       	lsr	r25
    1268:	97 70       	andi	r25, 0x07	; 7
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 0f       	add	r24, r24
    126e:	88 0f       	add	r24, r24
    1270:	88 0f       	add	r24, r24
    1272:	89 0f       	add	r24, r25
    1274:	80 93 f6 00 	sts	0x00F6, r24
    1278:	99 81       	ldd	r25, Y+1	; 0x01
    127a:	92 95       	swap	r25
    127c:	96 95       	lsr	r25
    127e:	97 70       	andi	r25, 0x07	; 7
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	88 0f       	add	r24, r24
    1284:	88 0f       	add	r24, r24
    1286:	88 0f       	add	r24, r24
    1288:	89 0f       	add	r24, r25
    128a:	80 93 f5 00 	sts	0x00F5, r24
    128e:	29 81       	ldd	r18, Y+1	; 0x01
    1290:	22 0f       	add	r18, r18
    1292:	22 0f       	add	r18, r18
    1294:	22 0f       	add	r18, r18
    1296:	84 ef       	ldi	r24, 0xF4	; 244
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	fc 01       	movw	r30, r24
    129c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    129e:	ef ee       	ldi	r30, 0xEF	; 239
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	30 81       	ld	r19, Z
    12a4:	16 96       	adiw	r26, 0x06	; 6
    12a6:	2c 91       	ld	r18, X
    12a8:	16 97       	sbiw	r26, 0x06	; 6
    12aa:	23 2b       	or	r18, r19
    12ac:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	1a 96       	adiw	r26, 0x0a	; 10
    12b2:	2c 93       	st	X, r18
    12b4:	dc 01       	movw	r26, r24
    12b6:	2c 91       	ld	r18, X
    12b8:	24 60       	ori	r18, 0x04	; 4
    12ba:	2c 93       	st	X, r18
    12bc:	a0 ef       	ldi	r26, 0xF0	; 240
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	2c 91       	ld	r18, X
    12c2:	24 60       	ori	r18, 0x04	; 4
    12c4:	2c 93       	st	X, r18
          Can_clear_rplv();
    12c6:	20 81       	ld	r18, Z
    12c8:	2f 7d       	andi	r18, 0xDF	; 223
    12ca:	20 83       	st	Z, r18
          Can_set_idemsk();
    12cc:	dc 01       	movw	r26, r24
    12ce:	2c 91       	ld	r18, X
    12d0:	21 60       	ori	r18, 0x01	; 1
    12d2:	2c 93       	st	X, r18
          Can_config_rx();       
    12d4:	80 81       	ld	r24, Z
    12d6:	8f 73       	andi	r24, 0x3F	; 63
    12d8:	80 83       	st	Z, r24
    12da:	80 81       	ld	r24, Z
    12dc:	80 68       	ori	r24, 0x80	; 128
    12de:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    12e0:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    12e2:	28 c1       	rjmp	.+592    	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	8a ef       	ldi	r24, 0xFA	; 250
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	17 96       	adiw	r26, 0x07	; 7
    12ec:	ed 91       	ld	r30, X+
    12ee:	fc 91       	ld	r31, X
    12f0:	18 97       	sbiw	r26, 0x08	; 8
    12f2:	e2 0f       	add	r30, r18
    12f4:	f1 1d       	adc	r31, r1
    12f6:	30 81       	ld	r19, Z
    12f8:	fc 01       	movw	r30, r24
    12fa:	30 83       	st	Z, r19
    12fc:	2f 5f       	subi	r18, 0xFF	; 255
    12fe:	16 96       	adiw	r26, 0x06	; 6
    1300:	3c 91       	ld	r19, X
    1302:	16 97       	sbiw	r26, 0x06	; 6
    1304:	23 17       	cp	r18, r19
    1306:	88 f3       	brcs	.-30     	; 0x12ea <__stack+0x9eb>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	9b 81       	ldd	r25, Y+3	; 0x03
    130c:	92 95       	swap	r25
    130e:	96 95       	lsr	r25
    1310:	97 70       	andi	r25, 0x07	; 7
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	88 0f       	add	r24, r24
    1316:	88 0f       	add	r24, r24
    1318:	88 0f       	add	r24, r24
    131a:	89 0f       	add	r24, r25
    131c:	80 93 f7 00 	sts	0x00F7, r24
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	92 95       	swap	r25
    1324:	96 95       	lsr	r25
    1326:	97 70       	andi	r25, 0x07	; 7
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	88 0f       	add	r24, r24
    132c:	88 0f       	add	r24, r24
    132e:	88 0f       	add	r24, r24
    1330:	89 0f       	add	r24, r25
    1332:	80 93 f6 00 	sts	0x00F6, r24
    1336:	99 81       	ldd	r25, Y+1	; 0x01
    1338:	92 95       	swap	r25
    133a:	96 95       	lsr	r25
    133c:	97 70       	andi	r25, 0x07	; 7
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	88 0f       	add	r24, r24
    1342:	88 0f       	add	r24, r24
    1344:	88 0f       	add	r24, r24
    1346:	89 0f       	add	r24, r25
    1348:	80 93 f5 00 	sts	0x00F5, r24
    134c:	29 81       	ldd	r18, Y+1	; 0x01
    134e:	22 0f       	add	r18, r18
    1350:	22 0f       	add	r18, r18
    1352:	22 0f       	add	r18, r18
    1354:	84 ef       	ldi	r24, 0xF4	; 244
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	fc 01       	movw	r30, r24
    135a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    135c:	ef ee       	ldi	r30, 0xEF	; 239
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	30 81       	ld	r19, Z
    1362:	16 96       	adiw	r26, 0x06	; 6
    1364:	2c 91       	ld	r18, X
    1366:	16 97       	sbiw	r26, 0x06	; 6
    1368:	23 2b       	or	r18, r19
    136a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    136c:	21 e0       	ldi	r18, 0x01	; 1
    136e:	1a 96       	adiw	r26, 0x0a	; 10
    1370:	2c 93       	st	X, r18
    1372:	dc 01       	movw	r26, r24
    1374:	2c 91       	ld	r18, X
    1376:	24 60       	ori	r18, 0x04	; 4
    1378:	2c 93       	st	X, r18
    137a:	a0 ef       	ldi	r26, 0xF0	; 240
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	2c 91       	ld	r18, X
    1380:	24 60       	ori	r18, 0x04	; 4
    1382:	2c 93       	st	X, r18
          Can_set_rplv();
    1384:	20 81       	ld	r18, Z
    1386:	20 62       	ori	r18, 0x20	; 32
    1388:	20 83       	st	Z, r18
          Can_clear_idemsk();
    138a:	dc 01       	movw	r26, r24
    138c:	2c 91       	ld	r18, X
    138e:	2e 7f       	andi	r18, 0xFE	; 254
    1390:	2c 93       	st	X, r18
          Can_config_rx();       
    1392:	80 81       	ld	r24, Z
    1394:	8f 73       	andi	r24, 0x3F	; 63
    1396:	80 83       	st	Z, r24
    1398:	80 81       	ld	r24, Z
    139a:	80 68       	ori	r24, 0x80	; 128
    139c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    139e:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    13a0:	c9 c0       	rjmp	.+402    	; 0x1534 <__stack+0xc35>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    13a2:	1b 96       	adiw	r26, 0x0b	; 11
    13a4:	8c 91       	ld	r24, X
    13a6:	1b 97       	sbiw	r26, 0x0b	; 11
    13a8:	88 23       	and	r24, r24
    13aa:	d9 f1       	breq	.+118    	; 0x1422 <__stack+0xb23>
    13ac:	14 96       	adiw	r26, 0x04	; 4
    13ae:	9c 91       	ld	r25, X
    13b0:	14 97       	sbiw	r26, 0x04	; 4
    13b2:	92 95       	swap	r25
    13b4:	96 95       	lsr	r25
    13b6:	97 70       	andi	r25, 0x07	; 7
    13b8:	15 96       	adiw	r26, 0x05	; 5
    13ba:	8c 91       	ld	r24, X
    13bc:	15 97       	sbiw	r26, 0x05	; 5
    13be:	88 0f       	add	r24, r24
    13c0:	88 0f       	add	r24, r24
    13c2:	88 0f       	add	r24, r24
    13c4:	89 0f       	add	r24, r25
    13c6:	80 93 f3 00 	sts	0x00F3, r24
    13ca:	13 96       	adiw	r26, 0x03	; 3
    13cc:	9c 91       	ld	r25, X
    13ce:	13 97       	sbiw	r26, 0x03	; 3
    13d0:	92 95       	swap	r25
    13d2:	96 95       	lsr	r25
    13d4:	97 70       	andi	r25, 0x07	; 7
    13d6:	14 96       	adiw	r26, 0x04	; 4
    13d8:	8c 91       	ld	r24, X
    13da:	14 97       	sbiw	r26, 0x04	; 4
    13dc:	88 0f       	add	r24, r24
    13de:	88 0f       	add	r24, r24
    13e0:	88 0f       	add	r24, r24
    13e2:	89 0f       	add	r24, r25
    13e4:	80 93 f2 00 	sts	0x00F2, r24
    13e8:	12 96       	adiw	r26, 0x02	; 2
    13ea:	9c 91       	ld	r25, X
    13ec:	12 97       	sbiw	r26, 0x02	; 2
    13ee:	92 95       	swap	r25
    13f0:	96 95       	lsr	r25
    13f2:	97 70       	andi	r25, 0x07	; 7
    13f4:	13 96       	adiw	r26, 0x03	; 3
    13f6:	8c 91       	ld	r24, X
    13f8:	13 97       	sbiw	r26, 0x03	; 3
    13fa:	88 0f       	add	r24, r24
    13fc:	88 0f       	add	r24, r24
    13fe:	88 0f       	add	r24, r24
    1400:	89 0f       	add	r24, r25
    1402:	80 93 f1 00 	sts	0x00F1, r24
    1406:	12 96       	adiw	r26, 0x02	; 2
    1408:	8c 91       	ld	r24, X
    140a:	12 97       	sbiw	r26, 0x02	; 2
    140c:	88 0f       	add	r24, r24
    140e:	88 0f       	add	r24, r24
    1410:	88 0f       	add	r24, r24
    1412:	80 93 f0 00 	sts	0x00F0, r24
    1416:	ef ee       	ldi	r30, 0xEF	; 239
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 61       	ori	r24, 0x10	; 16
    141e:	80 83       	st	Z, r24
    1420:	1c c0       	rjmp	.+56     	; 0x145a <__stack+0xb5b>
          else              { Can_set_std_id(cmd->id.std);}
    1422:	12 96       	adiw	r26, 0x02	; 2
    1424:	8c 91       	ld	r24, X
    1426:	12 97       	sbiw	r26, 0x02	; 2
    1428:	86 95       	lsr	r24
    142a:	86 95       	lsr	r24
    142c:	86 95       	lsr	r24
    142e:	13 96       	adiw	r26, 0x03	; 3
    1430:	9c 91       	ld	r25, X
    1432:	13 97       	sbiw	r26, 0x03	; 3
    1434:	e0 e2       	ldi	r30, 0x20	; 32
    1436:	9e 9f       	mul	r25, r30
    1438:	80 0d       	add	r24, r0
    143a:	11 24       	eor	r1, r1
    143c:	80 93 f3 00 	sts	0x00F3, r24
    1440:	12 96       	adiw	r26, 0x02	; 2
    1442:	8c 91       	ld	r24, X
    1444:	12 97       	sbiw	r26, 0x02	; 2
    1446:	82 95       	swap	r24
    1448:	88 0f       	add	r24, r24
    144a:	80 7e       	andi	r24, 0xE0	; 224
    144c:	80 93 f2 00 	sts	0x00F2, r24
    1450:	ef ee       	ldi	r30, 0xEF	; 239
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	8f 7e       	andi	r24, 0xEF	; 239
    1458:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    145a:	16 96       	adiw	r26, 0x06	; 6
    145c:	8c 91       	ld	r24, X
    145e:	16 97       	sbiw	r26, 0x06	; 6
    1460:	88 23       	and	r24, r24
    1462:	91 f0       	breq	.+36     	; 0x1488 <__stack+0xb89>
    1464:	20 e0       	ldi	r18, 0x00	; 0
    1466:	8a ef       	ldi	r24, 0xFA	; 250
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	17 96       	adiw	r26, 0x07	; 7
    146c:	ed 91       	ld	r30, X+
    146e:	fc 91       	ld	r31, X
    1470:	18 97       	sbiw	r26, 0x08	; 8
    1472:	e2 0f       	add	r30, r18
    1474:	f1 1d       	adc	r31, r1
    1476:	30 81       	ld	r19, Z
    1478:	fc 01       	movw	r30, r24
    147a:	30 83       	st	Z, r19
    147c:	2f 5f       	subi	r18, 0xFF	; 255
    147e:	16 96       	adiw	r26, 0x06	; 6
    1480:	3c 91       	ld	r19, X
    1482:	16 97       	sbiw	r26, 0x06	; 6
    1484:	23 17       	cp	r18, r19
    1486:	88 f3       	brcs	.-30     	; 0x146a <__stack+0xb6b>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1488:	8f ef       	ldi	r24, 0xFF	; 255
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	9b 81       	ldd	r25, Y+3	; 0x03
    148e:	92 95       	swap	r25
    1490:	96 95       	lsr	r25
    1492:	97 70       	andi	r25, 0x07	; 7
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	88 0f       	add	r24, r24
    1498:	88 0f       	add	r24, r24
    149a:	88 0f       	add	r24, r24
    149c:	89 0f       	add	r24, r25
    149e:	80 93 f7 00 	sts	0x00F7, r24
    14a2:	9a 81       	ldd	r25, Y+2	; 0x02
    14a4:	92 95       	swap	r25
    14a6:	96 95       	lsr	r25
    14a8:	97 70       	andi	r25, 0x07	; 7
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	88 0f       	add	r24, r24
    14ae:	88 0f       	add	r24, r24
    14b0:	88 0f       	add	r24, r24
    14b2:	89 0f       	add	r24, r25
    14b4:	80 93 f6 00 	sts	0x00F6, r24
    14b8:	99 81       	ldd	r25, Y+1	; 0x01
    14ba:	92 95       	swap	r25
    14bc:	96 95       	lsr	r25
    14be:	97 70       	andi	r25, 0x07	; 7
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	88 0f       	add	r24, r24
    14c4:	88 0f       	add	r24, r24
    14c6:	88 0f       	add	r24, r24
    14c8:	89 0f       	add	r24, r25
    14ca:	80 93 f5 00 	sts	0x00F5, r24
    14ce:	29 81       	ldd	r18, Y+1	; 0x01
    14d0:	22 0f       	add	r18, r18
    14d2:	22 0f       	add	r18, r18
    14d4:	22 0f       	add	r18, r18
    14d6:	84 ef       	ldi	r24, 0xF4	; 244
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	fc 01       	movw	r30, r24
    14dc:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    14de:	ef ee       	ldi	r30, 0xEF	; 239
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	30 81       	ld	r19, Z
    14e4:	16 96       	adiw	r26, 0x06	; 6
    14e6:	2c 91       	ld	r18, X
    14e8:	16 97       	sbiw	r26, 0x06	; 6
    14ea:	23 2b       	or	r18, r19
    14ec:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    14ee:	21 e0       	ldi	r18, 0x01	; 1
    14f0:	1a 96       	adiw	r26, 0x0a	; 10
    14f2:	2c 93       	st	X, r18
    14f4:	dc 01       	movw	r26, r24
    14f6:	2c 91       	ld	r18, X
    14f8:	24 60       	ori	r18, 0x04	; 4
    14fa:	2c 93       	st	X, r18
    14fc:	a0 ef       	ldi	r26, 0xF0	; 240
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	2c 91       	ld	r18, X
    1502:	24 60       	ori	r18, 0x04	; 4
    1504:	2c 93       	st	X, r18
          Can_set_rplv();
    1506:	20 81       	ld	r18, Z
    1508:	20 62       	ori	r18, 0x20	; 32
    150a:	20 83       	st	Z, r18
          Can_set_idemsk();
    150c:	dc 01       	movw	r26, r24
    150e:	2c 91       	ld	r18, X
    1510:	21 60       	ori	r18, 0x01	; 1
    1512:	2c 93       	st	X, r18
          Can_config_rx();       
    1514:	80 81       	ld	r24, Z
    1516:	8f 73       	andi	r24, 0x3F	; 63
    1518:	80 83       	st	Z, r24
    151a:	80 81       	ld	r24, Z
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1520:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1522:	08 c0       	rjmp	.+16     	; 0x1534 <__stack+0xc35>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1524:	19 96       	adiw	r26, 0x09	; 9
    1526:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1528:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <__stack+0xc35>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    152c:	8f e1       	ldi	r24, 0x1F	; 31
    152e:	19 96       	adiw	r26, 0x09	; 9
    1530:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    1534:	0f 90       	pop	r0
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	08 95       	ret

0000153c <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    1542:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1544:	88 23       	and	r24, r24
    1546:	09 f4       	brne	.+2      	; 0x154a <can_get_status+0xe>
    1548:	d5 c0       	rjmp	.+426    	; 0x16f4 <can_get_status+0x1b8>
    154a:	8f 31       	cpi	r24, 0x1F	; 31
    154c:	09 f4       	brne	.+2      	; 0x1550 <can_get_status+0x14>
    154e:	d4 c0       	rjmp	.+424    	; 0x16f8 <can_get_status+0x1bc>
    1550:	8f 3f       	cpi	r24, 0xFF	; 255
    1552:	09 f4       	brne	.+2      	; 0x1556 <can_get_status+0x1a>
    1554:	d3 c0       	rjmp	.+422    	; 0x16fc <can_get_status+0x1c0>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    1556:	62 95       	swap	r22
    1558:	60 7f       	andi	r22, 0xF0	; 240
    155a:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    155e:	0e 94 35 04 	call	0x86a	; 0x86a <can_get_mob_status>
    
    switch (a_status)
    1562:	80 32       	cpi	r24, 0x20	; 32
    1564:	61 f0       	breq	.+24     	; 0x157e <can_get_status+0x42>
    1566:	20 f4       	brcc	.+8      	; 0x1570 <can_get_status+0x34>
    1568:	88 23       	and	r24, r24
    156a:	09 f4       	brne	.+2      	; 0x156e <can_get_status+0x32>
    156c:	c9 c0       	rjmp	.+402    	; 0x1700 <can_get_status+0x1c4>
    156e:	b8 c0       	rjmp	.+368    	; 0x16e0 <can_get_status+0x1a4>
    1570:	80 34       	cpi	r24, 0x40	; 64
    1572:	09 f4       	brne	.+2      	; 0x1576 <can_get_status+0x3a>
    1574:	aa c0       	rjmp	.+340    	; 0x16ca <can_get_status+0x18e>
    1576:	80 3a       	cpi	r24, 0xA0	; 160
    1578:	09 f4       	brne	.+2      	; 0x157c <can_get_status+0x40>
    157a:	4e c0       	rjmp	.+156    	; 0x1618 <can_get_status+0xdc>
    157c:	b1 c0       	rjmp	.+354    	; 0x16e0 <can_get_status+0x1a4>
        case MOB_RX_COMPLETED:
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
            cmd->ctrl.rtr = Can_get_rtr();
    157e:	80 91 f0 00 	lds	r24, 0x00F0
    1582:	82 fb       	bst	r24, 2
    1584:	88 27       	eor	r24, r24
    1586:	80 f9       	bld	r24, 0
    1588:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    158a:	80 91 ef 00 	lds	r24, 0x00EF
    158e:	84 ff       	sbrs	r24, 4
    1590:	2d c0       	rjmp	.+90     	; 0x15ec <can_get_status+0xb0>
            {
	            cmd->ctrl.ide = 1; // extended frame
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    1596:	e3 ef       	ldi	r30, 0xF3	; 243
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	86 95       	lsr	r24
    159e:	86 95       	lsr	r24
    15a0:	86 95       	lsr	r24
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	a2 ef       	ldi	r26, 0xF2	; 242
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	8c 91       	ld	r24, X
    15aa:	90 81       	ld	r25, Z
    15ac:	86 95       	lsr	r24
    15ae:	86 95       	lsr	r24
    15b0:	86 95       	lsr	r24
    15b2:	20 e2       	ldi	r18, 0x20	; 32
    15b4:	92 9f       	mul	r25, r18
    15b6:	80 0d       	add	r24, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	8c 83       	std	Y+4, r24	; 0x04
    15bc:	e1 ef       	ldi	r30, 0xF1	; 241
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	9c 91       	ld	r25, X
    15c4:	86 95       	lsr	r24
    15c6:	86 95       	lsr	r24
    15c8:	86 95       	lsr	r24
    15ca:	20 e2       	ldi	r18, 0x20	; 32
    15cc:	92 9f       	mul	r25, r18
    15ce:	80 0d       	add	r24, r0
    15d0:	11 24       	eor	r1, r1
    15d2:	8b 83       	std	Y+3, r24	; 0x03
    15d4:	80 91 f0 00 	lds	r24, 0x00F0
    15d8:	90 81       	ld	r25, Z
    15da:	86 95       	lsr	r24
    15dc:	86 95       	lsr	r24
    15de:	86 95       	lsr	r24
    15e0:	20 e2       	ldi	r18, 0x20	; 32
    15e2:	92 9f       	mul	r25, r18
    15e4:	80 0d       	add	r24, r0
    15e6:	11 24       	eor	r1, r1
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	07 c0       	rjmp	.+14     	; 0x15fa <can_get_status+0xbe>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    15ec:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    15ee:	e3 ef       	ldi	r30, 0xF3	; 243
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	80 91 f2 00 	lds	r24, 0x00F2
    15f8:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    15fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1600:	98 85       	ldd	r25, Y+8	; 0x08
    1602:	0e 94 4b 04 	call	0x896	; 0x896 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    1606:	ef ee       	ldi	r30, 0xEF	; 239
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	8f 73       	andi	r24, 0x3F	; 63
    160e:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    1610:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    1614:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    1616:	75 c0       	rjmp	.+234    	; 0x1702 <can_get_status+0x1c6>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    1618:	80 91 f0 00 	lds	r24, 0x00F0
    161c:	82 fb       	bst	r24, 2
    161e:	88 27       	eor	r24, r24
    1620:	80 f9       	bld	r24, 0
    1622:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1624:	80 91 ef 00 	lds	r24, 0x00EF
    1628:	84 ff       	sbrs	r24, 4
    162a:	2d c0       	rjmp	.+90     	; 0x1686 <can_get_status+0x14a>
            {
                cmd->ctrl.ide = 1; // extended frame
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1630:	e3 ef       	ldi	r30, 0xF3	; 243
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	86 95       	lsr	r24
    1638:	86 95       	lsr	r24
    163a:	86 95       	lsr	r24
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	a2 ef       	ldi	r26, 0xF2	; 242
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	8c 91       	ld	r24, X
    1644:	90 81       	ld	r25, Z
    1646:	86 95       	lsr	r24
    1648:	86 95       	lsr	r24
    164a:	86 95       	lsr	r24
    164c:	20 e2       	ldi	r18, 0x20	; 32
    164e:	92 9f       	mul	r25, r18
    1650:	80 0d       	add	r24, r0
    1652:	11 24       	eor	r1, r1
    1654:	8c 83       	std	Y+4, r24	; 0x04
    1656:	e1 ef       	ldi	r30, 0xF1	; 241
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	9c 91       	ld	r25, X
    165e:	86 95       	lsr	r24
    1660:	86 95       	lsr	r24
    1662:	86 95       	lsr	r24
    1664:	20 e2       	ldi	r18, 0x20	; 32
    1666:	92 9f       	mul	r25, r18
    1668:	80 0d       	add	r24, r0
    166a:	11 24       	eor	r1, r1
    166c:	8b 83       	std	Y+3, r24	; 0x03
    166e:	80 91 f0 00 	lds	r24, 0x00F0
    1672:	90 81       	ld	r25, Z
    1674:	86 95       	lsr	r24
    1676:	86 95       	lsr	r24
    1678:	86 95       	lsr	r24
    167a:	20 e2       	ldi	r18, 0x20	; 32
    167c:	92 9f       	mul	r25, r18
    167e:	80 0d       	add	r24, r0
    1680:	11 24       	eor	r1, r1
    1682:	8a 83       	std	Y+2, r24	; 0x02
    1684:	13 c0       	rjmp	.+38     	; 0x16ac <can_get_status+0x170>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1686:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1688:	e3 ef       	ldi	r30, 0xF3	; 243
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	82 95       	swap	r24
    1690:	86 95       	lsr	r24
    1692:	87 70       	andi	r24, 0x07	; 7
    1694:	8b 83       	std	Y+3, r24	; 0x03
    1696:	80 91 f2 00 	lds	r24, 0x00F2
    169a:	90 81       	ld	r25, Z
    169c:	99 0f       	add	r25, r25
    169e:	99 0f       	add	r25, r25
    16a0:	99 0f       	add	r25, r25
    16a2:	82 95       	swap	r24
    16a4:	86 95       	lsr	r24
    16a6:	87 70       	andi	r24, 0x07	; 7
    16a8:	89 0f       	add	r24, r25
    16aa:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    16ac:	80 ea       	ldi	r24, 0xA0	; 160
    16ae:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    16b0:	8f 81       	ldd	r24, Y+7	; 0x07
    16b2:	98 85       	ldd	r25, Y+8	; 0x08
    16b4:	0e 94 4b 04 	call	0x896	; 0x896 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    16b8:	ef ee       	ldi	r30, 0xEF	; 239
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	8f 73       	andi	r24, 0x3F	; 63
    16c0:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    16c2:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    16c6:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    16c8:	1c c0       	rjmp	.+56     	; 0x1702 <can_get_status+0x1c6>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    16ca:	80 e4       	ldi	r24, 0x40	; 64
    16cc:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    16ce:	ef ee       	ldi	r30, 0xEF	; 239
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8f 73       	andi	r24, 0x3F	; 63
    16d6:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    16d8:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    16dc:	80 e4       	ldi	r24, 0x40	; 64
            break;
    16de:	11 c0       	rjmp	.+34     	; 0x1702 <can_get_status+0x1c6>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    16e0:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    16e2:	ef ee       	ldi	r30, 0xEF	; 239
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8f 73       	andi	r24, 0x3F	; 63
    16ea:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    16ec:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    16f0:	82 e0       	ldi	r24, 0x02	; 2
            break;
    16f2:	07 c0       	rjmp	.+14     	; 0x1702 <can_get_status+0x1c6>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <can_get_status+0x1c6>
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <can_get_status+0x1c6>
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <can_get_status+0x1c6>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1700:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <send_tm_transaction_response>:
}

// Helper
static void send_tm_transaction_response(uint8_t req_by, uint8_t code)
{			
	send_arr[7] = (SELF_ID << 4)|req_by;
    1708:	80 61       	ori	r24, 0x10	; 16
    170a:	80 93 c5 01 	sts	0x01C5, r24
	send_arr[6] = MT_COM;
    170e:	82 e0       	ldi	r24, 0x02	; 2
    1710:	80 93 c4 01 	sts	0x01C4, r24
	send_arr[5] = TM_TRANSACTION_RESP;
    1714:	83 e1       	ldi	r24, 0x13	; 19
    1716:	80 93 c3 01 	sts	0x01C3, r24
	send_arr[4] = CURRENT_MINUTE;
    171a:	80 91 0c 02 	lds	r24, 0x020C
    171e:	80 93 c2 01 	sts	0x01C2, r24
	send_arr[3] = 0;
    1722:	10 92 c1 01 	sts	0x01C1, r1
	send_arr[2] = 0;
    1726:	10 92 c0 01 	sts	0x01C0, r1
	send_arr[1] = 0;
    172a:	10 92 bf 01 	sts	0x01BF, r1
	send_arr[0] = code;
    172e:	60 93 be 01 	sts	0x01BE, r22
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1732:	61 e1       	ldi	r22, 0x11	; 17
    1734:	8e eb       	ldi	r24, 0xBE	; 190
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
    173c:	08 95       	ret

0000173e <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    173e:	83 e1       	ldi	r24, 0x13	; 19
    1740:	80 93 c5 01 	sts	0x01C5, r24
	send_arr[6] = MT_COM;
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	80 93 c4 01 	sts	0x01C4, r24
	send_arr[5] = RESPONSE;
    174a:	84 e0       	ldi	r24, 0x04	; 4
    174c:	80 93 c3 01 	sts	0x01C3, r24
	send_arr[4] = CURRENT_MINUTE;
    1750:	80 91 0c 02 	lds	r24, 0x020C
    1754:	80 93 c2 01 	sts	0x01C2, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1758:	61 e1       	ldi	r22, 0x11	; 17
    175a:	8e eb       	ldi	r24, 0xBE	; 190
    175c:	91 e0       	ldi	r25, 0x01	; 1
    175e:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	send_now = 0;
    1762:	10 92 10 02 	sts	0x0210, r1
    1766:	08 95       	ret

00001768 <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|HK_TASK_ID;
    1768:	84 e1       	ldi	r24, 0x14	; 20
    176a:	80 93 c5 01 	sts	0x01C5, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	80 93 c4 01 	sts	0x01C4, r24
	send_arr[4] = CURRENT_MINUTE;
    1774:	80 91 0c 02 	lds	r24, 0x020C
    1778:	80 93 c2 01 	sts	0x01C2, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    177c:	60 e1       	ldi	r22, 0x10	; 16
    177e:	8e eb       	ldi	r24, 0xBE	; 190
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	send_hk = 0;
    1786:	10 92 bd 02 	sts	0x02BD, r1
    178a:	08 95       	ret

0000178c <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	00 d0       	rcall	.+0      	; 0x1796 <send_sensor_data+0xa>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[4];
    179a:	10 91 01 02 	lds	r17, 0x0201
	req_by = data_req_arr[7] >> 4;
    179e:	00 91 04 02 	lds	r16, 0x0204
    17a2:	02 95       	swap	r16
    17a4:	0f 70       	andi	r16, 0x0F	; 15
	send_arr[3] = 0;
    17a6:	10 92 c1 01 	sts	0x01C1, r1
	send_arr[2] = 0;
    17aa:	10 92 c0 01 	sts	0x01C0, r1
	send_arr[1] = 0;
    17ae:	10 92 bf 01 	sts	0x01BF, r1
	send_arr[0] = 0;
    17b2:	10 92 be 01 	sts	0x01BE, r1
	
	if(sensor_name == EPS_TEMP)
    17b6:	1a 30       	cpi	r17, 0x0A	; 10
    17b8:	71 f4       	brne	.+28     	; 0x17d6 <send_sensor_data+0x4a>
	{
		spi_retrieve_temp(&high, &low);
    17ba:	be 01       	movw	r22, r28
    17bc:	6e 5f       	subi	r22, 0xFE	; 254
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	ce 01       	movw	r24, r28
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	80 93 bf 01 	sts	0x01BF, r24
		send_arr[0] = low;
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	80 93 be 01 	sts	0x01BE, r24
    17d4:	0e c0       	rjmp	.+28     	; 0x17f2 <send_sensor_data+0x66>
	}
	
	if(sensor_name == PANELX_V)
    17d6:	11 30       	cpi	r17, 0x01	; 1
    17d8:	29 f4       	brne	.+10     	; 0x17e4 <send_sensor_data+0x58>
	{
		send_arr[0] = pxv;
    17da:	80 91 ea 02 	lds	r24, 0x02EA
    17de:	80 93 be 01 	sts	0x01BE, r24
    17e2:	0e c0       	rjmp	.+28     	; 0x1800 <send_sensor_data+0x74>
	}
	if(sensor_name == PANELX_I)
    17e4:	12 30       	cpi	r17, 0x02	; 2
    17e6:	29 f4       	brne	.+10     	; 0x17f2 <send_sensor_data+0x66>
	{
		send_arr[0] = pxi;
    17e8:	80 91 eb 02 	lds	r24, 0x02EB
    17ec:	80 93 be 01 	sts	0x01BE, r24
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_V)
    17f2:	13 30       	cpi	r17, 0x03	; 3
    17f4:	29 f4       	brne	.+10     	; 0x1800 <send_sensor_data+0x74>
	{
		send_arr[0] = pyv;
    17f6:	80 91 0f 02 	lds	r24, 0x020F
    17fa:	80 93 be 01 	sts	0x01BE, r24
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_I)
    1800:	14 30       	cpi	r17, 0x04	; 4
    1802:	21 f4       	brne	.+8      	; 0x180c <send_sensor_data+0x80>
	{
		send_arr[0] = pyi;
    1804:	80 91 09 01 	lds	r24, 0x0109
    1808:	80 93 be 01 	sts	0x01BE, r24
	//}
	//if(sensor_name == OBC_I)
	//{
	//}

	send_arr[7] = (SELF_ID << 4)|req_by;
    180c:	00 61       	ori	r16, 0x10	; 16
    180e:	00 93 c5 01 	sts	0x01C5, r16
	send_arr[6] = MT_DATA;
    1812:	10 92 c4 01 	sts	0x01C4, r1
	send_arr[5] = sensor_name;
    1816:	10 93 c3 01 	sts	0x01C3, r17
	send_arr[4] = CURRENT_MINUTE;			
    181a:	80 91 0c 02 	lds	r24, 0x020C
    181e:	80 93 c2 01 	sts	0x01C2, r24
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1822:	6a e0       	ldi	r22, 0x0A	; 10
    1824:	8e eb       	ldi	r24, 0xBE	; 190
    1826:	91 e0       	ldi	r25, 0x01	; 1
    1828:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	send_data = 0;
    182c:	10 92 df 02 	sts	0x02DF, r1
	
	return;
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	08 95       	ret

0000183e <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    183e:	83 e1       	ldi	r24, 0x13	; 19
    1840:	80 93 c5 01 	sts	0x01C5, r24
	send_arr[6] = MT_DATA;
    1844:	10 92 c4 01 	sts	0x01C4, r1
	send_arr[5] = COMS_PACKET;
    1848:	8e ef       	ldi	r24, 0xFE	; 254
    184a:	80 93 c3 01 	sts	0x01C3, r24
	send_arr[4] = CURRENT_MINUTE;
    184e:	80 91 0c 02 	lds	r24, 0x020C
    1852:	80 93 c2 01 	sts	0x01C2, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    1856:	80 91 15 02 	lds	r24, 0x0215
    185a:	80 93 be 01 	sts	0x01BE, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    185e:	6a e0       	ldi	r22, 0x0A	; 10
    1860:	8e eb       	ldi	r24, 0xBE	; 190
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	msg_received = 0;
    1868:	10 92 0e 01 	sts	0x010E, r1
    186c:	08 95       	ret

0000186e <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    186e:	90 91 b5 03 	lds	r25, 0x03B5
	read_ptr = read_arr[0];
    1872:	e0 91 b2 03 	lds	r30, 0x03B2
    1876:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    1878:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    187a:	20 91 b9 03 	lds	r18, 0x03B9
    187e:	20 61       	ori	r18, 0x10	; 16
    1880:	20 93 c5 01 	sts	0x01C5, r18
	send_arr[6] = MT_COM;
    1884:	22 e0       	ldi	r18, 0x02	; 2
    1886:	20 93 c4 01 	sts	0x01C4, r18
	send_arr[5] = ACK_READ;
    188a:	26 e0       	ldi	r18, 0x06	; 6
    188c:	20 93 c3 01 	sts	0x01C3, r18
	send_arr[4] = CURRENT_MINUTE;
    1890:	20 91 0c 02 	lds	r18, 0x020C
    1894:	20 93 c2 01 	sts	0x01C2, r18
	send_arr[3] = passkey;
    1898:	90 93 c1 01 	sts	0x01C1, r25
	send_arr[0] = read_val;
    189c:	80 93 be 01 	sts	0x01BE, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    18a0:	61 e1       	ldi	r22, 0x11	; 17
    18a2:	8e eb       	ldi	r24, 0xBE	; 190
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	read_response = 0;
    18aa:	10 92 1b 02 	sts	0x021B, r1
    18ae:	08 95       	ret

000018b0 <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    18b0:	80 91 04 01 	lds	r24, 0x0104
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    18b4:	20 91 01 01 	lds	r18, 0x0101
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    18b8:	90 91 b9 03 	lds	r25, 0x03B9
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    18bc:	e0 91 02 01 	lds	r30, 0x0102
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    18c2:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    18c4:	90 61       	ori	r25, 0x10	; 16
    18c6:	90 93 c5 01 	sts	0x01C5, r25
	send_arr[6] = MT_COM;
    18ca:	92 e0       	ldi	r25, 0x02	; 2
    18cc:	90 93 c4 01 	sts	0x01C4, r25
	send_arr[5] = ACK_WRITE;
    18d0:	98 e0       	ldi	r25, 0x08	; 8
    18d2:	90 93 c3 01 	sts	0x01C3, r25
	send_arr[4] = CURRENT_MINUTE;
    18d6:	90 91 0c 02 	lds	r25, 0x020C
    18da:	90 93 c2 01 	sts	0x01C2, r25
	send_arr[3] = passkey;
    18de:	80 93 c1 01 	sts	0x01C1, r24
	send_arr[0] = ret_val;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	80 93 be 01 	sts	0x01BE, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    18e8:	61 e1       	ldi	r22, 0x11	; 17
    18ea:	8e eb       	ldi	r24, 0xBE	; 190
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	write_response = 0;
    18f2:	10 92 e1 01 	sts	0x01E1, r1
    18f6:	08 95       	ret

000018f8 <set_sensor_high>:

void set_sensor_high(void)
{
	uint8_t sensor_name, req_by;
	uint16_t high = 0;
	sensor_name = sensh_arr[3];
    18f8:	20 91 e5 01 	lds	r18, 0x01E5
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    18fc:	2a 30       	cpi	r18, 0x0A	; 10
    18fe:	69 f4       	brne	.+26     	; 0x191a <set_sensor_high+0x22>
	{
		epstemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1900:	80 91 e3 01 	lds	r24, 0x01E3
    1904:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_high |= (high << 8);
    1906:	98 2f       	mov	r25, r24
    1908:	88 27       	eor	r24, r24
	sensor_name = sensh_arr[3];
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_high = sensh_arr[0];
    190a:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		epstemp_high |= (high << 8);
    190e:	83 2b       	or	r24, r19
    1910:	90 93 c7 01 	sts	0x01C7, r25
    1914:	80 93 c6 01 	sts	0x01C6, r24
    1918:	1e c0       	rjmp	.+60     	; 0x1956 <set_sensor_high+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    191a:	21 30       	cpi	r18, 0x01	; 1
    191c:	69 f4       	brne	.+26     	; 0x1938 <set_sensor_high+0x40>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    191e:	80 91 e3 01 	lds	r24, 0x01E3
    1922:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);		
    1924:	98 2f       	mov	r25, r24
    1926:	88 27       	eor	r24, r24
		epstemp_high |= (high << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_high = sensh_arr[0];
    1928:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);		
    192c:	83 2b       	or	r24, r19
    192e:	90 93 0e 02 	sts	0x020E, r25
    1932:	80 93 0d 02 	sts	0x020D, r24
    1936:	1e c0       	rjmp	.+60     	; 0x1974 <set_sensor_high+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    1938:	22 30       	cpi	r18, 0x02	; 2
    193a:	69 f4       	brne	.+26     	; 0x1956 <set_sensor_high+0x5e>
	{
		pxi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    193c:	80 91 e3 01 	lds	r24, 0x01E3
    1940:	90 e0       	ldi	r25, 0x00	; 0
		pxi_high |= (high << 8);
    1942:	98 2f       	mov	r25, r24
    1944:	88 27       	eor	r24, r24
		pxv_high |= (high << 8);		
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_high = sensh_arr[0];
    1946:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
    194a:	83 2b       	or	r24, r19
    194c:	90 93 16 03 	sts	0x0316, r25
    1950:	80 93 15 03 	sts	0x0315, r24
    1954:	1e c0       	rjmp	.+60     	; 0x1992 <set_sensor_high+0x9a>
	}
	if(sensor_name == PANELY_V)
    1956:	23 30       	cpi	r18, 0x03	; 3
    1958:	69 f4       	brne	.+26     	; 0x1974 <set_sensor_high+0x7c>
	{
		pyv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    195a:	80 91 e3 01 	lds	r24, 0x01E3
    195e:	90 e0       	ldi	r25, 0x00	; 0
		pyv_high |= (high << 8);
    1960:	98 2f       	mov	r25, r24
    1962:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_high = sensh_arr[0];
    1964:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
    1968:	83 2b       	or	r24, r19
    196a:	90 93 ab 01 	sts	0x01AB, r25
    196e:	80 93 aa 01 	sts	0x01AA, r24
    1972:	1e c0       	rjmp	.+60     	; 0x19b0 <set_sensor_high+0xb8>
	}
	if(sensor_name == PANELY_I)
    1974:	24 30       	cpi	r18, 0x04	; 4
    1976:	69 f4       	brne	.+26     	; 0x1992 <set_sensor_high+0x9a>
	{
		pyi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1978:	80 91 e3 01 	lds	r24, 0x01E3
    197c:	90 e0       	ldi	r25, 0x00	; 0
		pyi_high |= (high << 8);
    197e:	98 2f       	mov	r25, r24
    1980:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_high = sensh_arr[0];
    1982:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
    1986:	83 2b       	or	r24, r19
    1988:	90 93 b1 03 	sts	0x03B1, r25
    198c:	80 93 b0 03 	sts	0x03B0, r24
    1990:	1e c0       	rjmp	.+60     	; 0x19ce <set_sensor_high+0xd6>
	}
	if(sensor_name == BATTM_V)
    1992:	25 30       	cpi	r18, 0x05	; 5
    1994:	69 f4       	brne	.+26     	; 0x19b0 <set_sensor_high+0xb8>
	{
		battmv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1996:	80 91 e3 01 	lds	r24, 0x01E3
    199a:	90 e0       	ldi	r25, 0x00	; 0
		battmv_high |= (high << 8);
    199c:	98 2f       	mov	r25, r24
    199e:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_high = sensh_arr[0];
    19a0:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
    19a4:	83 2b       	or	r24, r19
    19a6:	90 93 0b 02 	sts	0x020B, r25
    19aa:	80 93 0a 02 	sts	0x020A, r24
    19ae:	1e c0       	rjmp	.+60     	; 0x19ec <set_sensor_high+0xf4>
	}
	if(sensor_name == BATT_V)
    19b0:	26 30       	cpi	r18, 0x06	; 6
    19b2:	69 f4       	brne	.+26     	; 0x19ce <set_sensor_high+0xd6>
	{
		battv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19b4:	80 91 e3 01 	lds	r24, 0x01E3
    19b8:	90 e0       	ldi	r25, 0x00	; 0
		battv_high |= (high << 8);
    19ba:	98 2f       	mov	r25, r24
    19bc:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_high = sensh_arr[0];
    19be:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
    19c2:	83 2b       	or	r24, r19
    19c4:	90 93 ed 02 	sts	0x02ED, r25
    19c8:	80 93 ec 02 	sts	0x02EC, r24
    19cc:	1e c0       	rjmp	.+60     	; 0x1a0a <set_sensor_high+0x112>
	}
	if(sensor_name == BATT_I)
    19ce:	21 31       	cpi	r18, 0x11	; 17
    19d0:	69 f4       	brne	.+26     	; 0x19ec <set_sensor_high+0xf4>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19d2:	80 91 e3 01 	lds	r24, 0x01E3
    19d6:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);
    19d8:	98 2f       	mov	r25, r24
    19da:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_high = sensh_arr[0];
    19dc:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
    19e0:	83 2b       	or	r24, r19
    19e2:	90 93 0e 02 	sts	0x020E, r25
    19e6:	80 93 0d 02 	sts	0x020D, r24
    19ea:	1e c0       	rjmp	.+60     	; 0x1a28 <set_sensor_high+0x130>
	}
	if(sensor_name == BATT_TEMP)
    19ec:	29 30       	cpi	r18, 0x09	; 9
    19ee:	69 f4       	brne	.+26     	; 0x1a0a <set_sensor_high+0x112>
	{
		battemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19f0:	80 91 e3 01 	lds	r24, 0x01E3
    19f4:	90 e0       	ldi	r25, 0x00	; 0
		battemp_high |= (high << 8);
    19f6:	98 2f       	mov	r25, r24
    19f8:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_high = sensh_arr[0];
    19fa:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
    19fe:	83 2b       	or	r24, r19
    1a00:	90 93 ad 01 	sts	0x01AD, r25
    1a04:	80 93 ac 01 	sts	0x01AC, r24
    1a08:	1e c0       	rjmp	.+60     	; 0x1a46 <set_sensor_high+0x14e>
	}
	if(sensor_name == COMS_V)
    1a0a:	2b 30       	cpi	r18, 0x0B	; 11
    1a0c:	69 f4       	brne	.+26     	; 0x1a28 <set_sensor_high+0x130>
	{
		comsv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a0e:	80 91 e3 01 	lds	r24, 0x01E3
    1a12:	90 e0       	ldi	r25, 0x00	; 0
		comsv_high |= (high << 8);
    1a14:	98 2f       	mov	r25, r24
    1a16:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_high = sensh_arr[0];
    1a18:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
    1a1c:	83 2b       	or	r24, r19
    1a1e:	90 93 f0 01 	sts	0x01F0, r25
    1a22:	80 93 ef 01 	sts	0x01EF, r24
    1a26:	1e c0       	rjmp	.+60     	; 0x1a64 <set_sensor_high+0x16c>
	}
	if(sensor_name == COMS_I)
    1a28:	2c 30       	cpi	r18, 0x0C	; 12
    1a2a:	69 f4       	brne	.+26     	; 0x1a46 <set_sensor_high+0x14e>
	{
		comsi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a2c:	80 91 e3 01 	lds	r24, 0x01E3
    1a30:	90 e0       	ldi	r25, 0x00	; 0
		comsi_high |= (high << 8);
    1a32:	98 2f       	mov	r25, r24
    1a34:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_high = sensh_arr[0];
    1a36:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
    1a3a:	83 2b       	or	r24, r19
    1a3c:	90 93 d3 01 	sts	0x01D3, r25
    1a40:	80 93 d2 01 	sts	0x01D2, r24
    1a44:	1e c0       	rjmp	.+60     	; 0x1a82 <set_sensor_high+0x18a>
	}
	if(sensor_name == PAY_V)
    1a46:	2d 30       	cpi	r18, 0x0D	; 13
    1a48:	69 f4       	brne	.+26     	; 0x1a64 <set_sensor_high+0x16c>
	{
		payv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a4a:	80 91 e3 01 	lds	r24, 0x01E3
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
		payv_high |= (high << 8);
    1a50:	98 2f       	mov	r25, r24
    1a52:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_high = sensh_arr[0];
    1a54:	30 91 e2 01 	lds	r19, 0x01E2
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
    1a58:	83 2b       	or	r24, r19
    1a5a:	90 93 a9 01 	sts	0x01A9, r25
    1a5e:	80 93 a8 01 	sts	0x01A8, r24
    1a62:	1e c0       	rjmp	.+60     	; 0x1aa0 <set_sensor_high+0x1a8>
	}
	if(sensor_name == PAY_I)
    1a64:	2e 30       	cpi	r18, 0x0E	; 14
    1a66:	69 f4       	brne	.+26     	; 0x1a82 <set_sensor_high+0x18a>
	{
		payi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a68:	80 91 e3 01 	lds	r24, 0x01E3
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
		payi_high |= (high << 8);
    1a6e:	98 2f       	mov	r25, r24
    1a70:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_high = sensh_arr[0];
    1a72:	20 91 e2 01 	lds	r18, 0x01E2
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
    1a76:	82 2b       	or	r24, r18
    1a78:	90 93 00 03 	sts	0x0300, r25
    1a7c:	80 93 ff 02 	sts	0x02FF, r24
    1a80:	1d c0       	rjmp	.+58     	; 0x1abc <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_V)
    1a82:	2f 30       	cpi	r18, 0x0F	; 15
    1a84:	69 f4       	brne	.+26     	; 0x1aa0 <set_sensor_high+0x1a8>
	{
		obcv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a86:	80 91 e3 01 	lds	r24, 0x01E3
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
		obcv_high |= (high << 8);
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_high = sensh_arr[0];
    1a90:	20 91 e2 01 	lds	r18, 0x01E2
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
    1a94:	82 2b       	or	r24, r18
    1a96:	90 93 e0 01 	sts	0x01E0, r25
    1a9a:	80 93 df 01 	sts	0x01DF, r24
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_I)
    1aa0:	20 31       	cpi	r18, 0x10	; 16
    1aa2:	61 f4       	brne	.+24     	; 0x1abc <set_sensor_high+0x1c4>
	{
		obci_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1aa4:	80 91 e3 01 	lds	r24, 0x01E3
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
		obci_high |= (high << 8);
    1aaa:	98 2f       	mov	r25, r24
    1aac:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_high = sensh_arr[0];
    1aae:	20 91 e2 01 	lds	r18, 0x01E2
		high = (uint16_t)sensh_arr[1];
		obci_high |= (high << 8);
    1ab2:	82 2b       	or	r24, r18
    1ab4:	90 93 bf 02 	sts	0x02BF, r25
    1ab8:	80 93 be 02 	sts	0x02BE, r24
	}
	
	set_sens_h = 0;
    1abc:	10 92 dc 02 	sts	0x02DC, r1
    1ac0:	08 95       	ret

00001ac2 <set_sensor_low>:

void set_sensor_low(void)
{
	uint8_t sensor_name, req_by;
	uint16_t low = 0;
	sensor_name = sensl_arr[3];
    1ac2:	20 91 0f 03 	lds	r18, 0x030F
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    1ac6:	2a 30       	cpi	r18, 0x0A	; 10
    1ac8:	69 f4       	brne	.+26     	; 0x1ae4 <set_sensor_low+0x22>
	{
		epstemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1aca:	80 91 0d 03 	lds	r24, 0x030D
    1ace:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_low |= (low << 8);
    1ad0:	98 2f       	mov	r25, r24
    1ad2:	88 27       	eor	r24, r24
	sensor_name = sensl_arr[3];
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_low = sensl_arr[0];
    1ad4:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		epstemp_low |= (low << 8);
    1ad8:	83 2b       	or	r24, r19
    1ada:	90 93 c9 01 	sts	0x01C9, r25
    1ade:	80 93 c8 01 	sts	0x01C8, r24
    1ae2:	1e c0       	rjmp	.+60     	; 0x1b20 <set_sensor_low+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    1ae4:	21 30       	cpi	r18, 0x01	; 1
    1ae6:	69 f4       	brne	.+26     	; 0x1b02 <set_sensor_low+0x40>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1ae8:	80 91 0d 03 	lds	r24, 0x030D
    1aec:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1aee:	98 2f       	mov	r25, r24
    1af0:	88 27       	eor	r24, r24
		epstemp_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_low = sensl_arr[0];
    1af2:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1af6:	83 2b       	or	r24, r19
    1af8:	90 93 c1 02 	sts	0x02C1, r25
    1afc:	80 93 c0 02 	sts	0x02C0, r24
    1b00:	1e c0       	rjmp	.+60     	; 0x1b3e <set_sensor_low+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	69 f4       	brne	.+26     	; 0x1b20 <set_sensor_low+0x5e>
	{
		pxi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b06:	80 91 0d 03 	lds	r24, 0x030D
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
		pxi_low |= (low << 8);
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	88 27       	eor	r24, r24
		pxv_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_low = sensl_arr[0];
    1b10:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
    1b14:	83 2b       	or	r24, r19
    1b16:	90 93 de 01 	sts	0x01DE, r25
    1b1a:	80 93 dd 01 	sts	0x01DD, r24
    1b1e:	1e c0       	rjmp	.+60     	; 0x1b5c <set_sensor_low+0x9a>
	}
	if(sensor_name == PANELY_V)
    1b20:	23 30       	cpi	r18, 0x03	; 3
    1b22:	69 f4       	brne	.+26     	; 0x1b3e <set_sensor_low+0x7c>
	{
		pyv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b24:	80 91 0d 03 	lds	r24, 0x030D
    1b28:	90 e0       	ldi	r25, 0x00	; 0
		pyv_low |= (low << 8);
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_low = sensl_arr[0];
    1b2e:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
    1b32:	83 2b       	or	r24, r19
    1b34:	90 93 c3 02 	sts	0x02C3, r25
    1b38:	80 93 c2 02 	sts	0x02C2, r24
    1b3c:	1e c0       	rjmp	.+60     	; 0x1b7a <set_sensor_low+0xb8>
	}
	if(sensor_name == PANELY_I)
    1b3e:	24 30       	cpi	r18, 0x04	; 4
    1b40:	69 f4       	brne	.+26     	; 0x1b5c <set_sensor_low+0x9a>
	{
		pyi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b42:	80 91 0d 03 	lds	r24, 0x030D
    1b46:	90 e0       	ldi	r25, 0x00	; 0
		pyi_low |= (low << 8);
    1b48:	98 2f       	mov	r25, r24
    1b4a:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_low = sensl_arr[0];
    1b4c:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
    1b50:	83 2b       	or	r24, r19
    1b52:	90 93 d3 02 	sts	0x02D3, r25
    1b56:	80 93 d2 02 	sts	0x02D2, r24
    1b5a:	1e c0       	rjmp	.+60     	; 0x1b98 <set_sensor_low+0xd6>
	}
	if(sensor_name == BATTM_V)
    1b5c:	25 30       	cpi	r18, 0x05	; 5
    1b5e:	69 f4       	brne	.+26     	; 0x1b7a <set_sensor_low+0xb8>
	{
		battmv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b60:	80 91 0d 03 	lds	r24, 0x030D
    1b64:	90 e0       	ldi	r25, 0x00	; 0
		battmv_low |= (low << 8);
    1b66:	98 2f       	mov	r25, r24
    1b68:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_low = sensl_arr[0];
    1b6a:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
    1b6e:	83 2b       	or	r24, r19
    1b70:	90 93 08 02 	sts	0x0208, r25
    1b74:	80 93 07 02 	sts	0x0207, r24
    1b78:	1e c0       	rjmp	.+60     	; 0x1bb6 <set_sensor_low+0xf4>
	}
	if(sensor_name == BATT_V)
    1b7a:	26 30       	cpi	r18, 0x06	; 6
    1b7c:	69 f4       	brne	.+26     	; 0x1b98 <set_sensor_low+0xd6>
	{
		battv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b7e:	80 91 0d 03 	lds	r24, 0x030D
    1b82:	90 e0       	ldi	r25, 0x00	; 0
		battv_low |= (low << 8);
    1b84:	98 2f       	mov	r25, r24
    1b86:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_low = sensl_arr[0];
    1b88:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
    1b8c:	83 2b       	or	r24, r19
    1b8e:	90 93 0b 01 	sts	0x010B, r25
    1b92:	80 93 0a 01 	sts	0x010A, r24
    1b96:	1e c0       	rjmp	.+60     	; 0x1bd4 <set_sensor_low+0x112>
	}
	if(sensor_name == BATT_I)
    1b98:	21 31       	cpi	r18, 0x11	; 17
    1b9a:	69 f4       	brne	.+26     	; 0x1bb6 <set_sensor_low+0xf4>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b9c:	80 91 0d 03 	lds	r24, 0x030D
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1ba2:	98 2f       	mov	r25, r24
    1ba4:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_low = sensl_arr[0];
    1ba6:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1baa:	83 2b       	or	r24, r19
    1bac:	90 93 c1 02 	sts	0x02C1, r25
    1bb0:	80 93 c0 02 	sts	0x02C0, r24
    1bb4:	1e c0       	rjmp	.+60     	; 0x1bf2 <set_sensor_low+0x130>
	}
	if(sensor_name == BATT_TEMP)
    1bb6:	29 30       	cpi	r18, 0x09	; 9
    1bb8:	69 f4       	brne	.+26     	; 0x1bd4 <set_sensor_low+0x112>
	{
		battemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bba:	80 91 0d 03 	lds	r24, 0x030D
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
		battemp_low |= (low << 8);
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_low = sensl_arr[0];
    1bc4:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
    1bc8:	83 2b       	or	r24, r19
    1bca:	90 93 ef 02 	sts	0x02EF, r25
    1bce:	80 93 ee 02 	sts	0x02EE, r24
    1bd2:	1e c0       	rjmp	.+60     	; 0x1c10 <set_sensor_low+0x14e>
	}
	if(sensor_name == COMS_V)
    1bd4:	2b 30       	cpi	r18, 0x0B	; 11
    1bd6:	69 f4       	brne	.+26     	; 0x1bf2 <set_sensor_low+0x130>
	{
		comsv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bd8:	80 91 0d 03 	lds	r24, 0x030D
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
		comsv_low |= (low << 8);
    1bde:	98 2f       	mov	r25, r24
    1be0:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_low = sensl_arr[0];
    1be2:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
    1be6:	83 2b       	or	r24, r19
    1be8:	90 93 06 02 	sts	0x0206, r25
    1bec:	80 93 05 02 	sts	0x0205, r24
    1bf0:	1e c0       	rjmp	.+60     	; 0x1c2e <set_sensor_low+0x16c>
	}
	if(sensor_name == COMS_I)
    1bf2:	2c 30       	cpi	r18, 0x0C	; 12
    1bf4:	69 f4       	brne	.+26     	; 0x1c10 <set_sensor_low+0x14e>
	{
		comsi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bf6:	80 91 0d 03 	lds	r24, 0x030D
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
		comsi_low |= (low << 8);
    1bfc:	98 2f       	mov	r25, r24
    1bfe:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_low = sensl_arr[0];
    1c00:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
    1c04:	83 2b       	or	r24, r19
    1c06:	90 93 fe 02 	sts	0x02FE, r25
    1c0a:	80 93 fd 02 	sts	0x02FD, r24
    1c0e:	1e c0       	rjmp	.+60     	; 0x1c4c <set_sensor_low+0x18a>
	}
	if(sensor_name == PAY_V)
    1c10:	2d 30       	cpi	r18, 0x0D	; 13
    1c12:	69 f4       	brne	.+26     	; 0x1c2e <set_sensor_low+0x16c>
	{
		payv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1c14:	80 91 0d 03 	lds	r24, 0x030D
    1c18:	90 e0       	ldi	r25, 0x00	; 0
		payv_low |= (low << 8);
    1c1a:	98 2f       	mov	r25, r24
    1c1c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_low = sensl_arr[0];
    1c1e:	30 91 0c 03 	lds	r19, 0x030C
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
    1c22:	83 2b       	or	r24, r19
    1c24:	90 93 0d 01 	sts	0x010D, r25
    1c28:	80 93 0c 01 	sts	0x010C, r24
    1c2c:	1e c0       	rjmp	.+60     	; 0x1c6a <set_sensor_low+0x1a8>
	}
	if(sensor_name == PAY_I)
    1c2e:	2e 30       	cpi	r18, 0x0E	; 14
    1c30:	69 f4       	brne	.+26     	; 0x1c4c <set_sensor_low+0x18a>
	{
		payi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1c32:	80 91 0d 03 	lds	r24, 0x030D
    1c36:	90 e0       	ldi	r25, 0x00	; 0
		payi_low |= (low << 8);
    1c38:	98 2f       	mov	r25, r24
    1c3a:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_low = sensl_arr[0];
    1c3c:	20 91 0c 03 	lds	r18, 0x030C
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
    1c40:	82 2b       	or	r24, r18
    1c42:	90 93 14 02 	sts	0x0214, r25
    1c46:	80 93 13 02 	sts	0x0213, r24
    1c4a:	1d c0       	rjmp	.+58     	; 0x1c86 <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_V)
    1c4c:	2f 30       	cpi	r18, 0x0F	; 15
    1c4e:	69 f4       	brne	.+26     	; 0x1c6a <set_sensor_low+0x1a8>
	{
		obcv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1c50:	80 91 0d 03 	lds	r24, 0x030D
    1c54:	90 e0       	ldi	r25, 0x00	; 0
		obcv_low |= (low << 8);
    1c56:	98 2f       	mov	r25, r24
    1c58:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_low = sensl_arr[0];
    1c5a:	20 91 0c 03 	lds	r18, 0x030C
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
    1c5e:	82 2b       	or	r24, r18
    1c60:	90 93 0b 03 	sts	0x030B, r25
    1c64:	80 93 0a 03 	sts	0x030A, r24
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_I)
    1c6a:	20 31       	cpi	r18, 0x10	; 16
    1c6c:	61 f4       	brne	.+24     	; 0x1c86 <set_sensor_low+0x1c4>
	{
		obci_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1c6e:	80 91 0d 03 	lds	r24, 0x030D
    1c72:	90 e0       	ldi	r25, 0x00	; 0
		obci_low |= (low << 8);
    1c74:	98 2f       	mov	r25, r24
    1c76:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_low = sensl_arr[0];
    1c78:	20 91 0c 03 	lds	r18, 0x030C
		low = (uint16_t)sensl_arr[1];
		obci_low |= (low << 8);
    1c7c:	82 2b       	or	r24, r18
    1c7e:	90 93 f9 02 	sts	0x02F9, r25
    1c82:	80 93 f8 02 	sts	0x02F8, r24
	}
	
	set_sens_l = 0;
    1c86:	10 92 e1 02 	sts	0x02E1, r1
    1c8a:	08 95       	ret

00001c8c <set_var>:
}

void set_var(void)
{
	uint8_t var_name;
	var_name = setv_arr[3];
    1c8c:	80 91 d8 01 	lds	r24, 0x01D8
	
	if(var_name == MPPTX)
    1c90:	8f 3f       	cpi	r24, 0xFF	; 255
    1c92:	29 f4       	brne	.+10     	; 0x1c9e <set_var+0x12>
	{
		mpptx = setv_arr[0];
    1c94:	90 91 d5 01 	lds	r25, 0x01D5
    1c98:	90 93 11 02 	sts	0x0211, r25
    1c9c:	0e c0       	rjmp	.+28     	; 0x1cba <set_var+0x2e>
	}
	if(var_name == MPPTY)
    1c9e:	8e 3f       	cpi	r24, 0xFE	; 254
    1ca0:	29 f4       	brne	.+10     	; 0x1cac <set_var+0x20>
	{
		mppty = setv_arr[0];
    1ca2:	80 91 d5 01 	lds	r24, 0x01D5
    1ca6:	80 93 09 02 	sts	0x0209, r24
    1caa:	0d c0       	rjmp	.+26     	; 0x1cc6 <set_var+0x3a>
	}
	if(var_name == BALANCE_H)
    1cac:	80 3f       	cpi	r24, 0xF0	; 240
    1cae:	29 f4       	brne	.+10     	; 0x1cba <set_var+0x2e>
	{
		balance_l = setv_arr[0];
    1cb0:	80 91 d5 01 	lds	r24, 0x01D5
    1cb4:	80 93 ec 01 	sts	0x01EC, r24
    1cb8:	06 c0       	rjmp	.+12     	; 0x1cc6 <set_var+0x3a>
	}
	if(var_name == BALANCE_L)
    1cba:	81 3f       	cpi	r24, 0xF1	; 241
    1cbc:	21 f4       	brne	.+8      	; 0x1cc6 <set_var+0x3a>
	{
		balance_h = setv_arr[0];
    1cbe:	80 91 d5 01 	lds	r24, 0x01D5
    1cc2:	80 93 d4 01 	sts	0x01D4, r24
	}
	set_varf = 0;
    1cc6:	10 92 e0 02 	sts	0x02E0, r1
    1cca:	08 95       	ret

00001ccc <receive_tm_msg>:
}

void receive_tm_msg(void)
{
	uint8_t req_by, obc_seq_count;
	req_by = new_tm_msg[7] >> 4;
    1ccc:	80 91 e9 02 	lds	r24, 0x02E9
    1cd0:	82 95       	swap	r24
    1cd2:	8f 70       	andi	r24, 0x0F	; 15
	obc_seq_count = new_tm_msg[4];
    1cd4:	90 91 e6 02 	lds	r25, 0x02E6

	if(obc_seq_count > (tm_sequence_count + 1))
    1cd8:	29 2f       	mov	r18, r25
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	60 91 00 01 	lds	r22, 0x0100
    1ce0:	46 2f       	mov	r20, r22
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	4f 5f       	subi	r20, 0xFF	; 255
    1ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce8:	42 17       	cp	r20, r18
    1cea:	53 07       	cpc	r21, r19
    1cec:	94 f4       	brge	.+36     	; 0x1d12 <receive_tm_msg+0x46>
	{
		send_tm_transaction_response(req_by, 0xFF);		// Let the OBC know that the transaction failed.
    1cee:	6f ef       	ldi	r22, 0xFF	; 255
    1cf0:	0e 94 84 0b 	call	0x1708	; 0x1708 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1cf4:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1cf8:	10 92 12 02 	sts	0x0212, r1
		receiving_tmf = 0;
    1cfc:	10 92 01 03 	sts	0x0301, r1
    1d00:	ec e1       	ldi	r30, 0x1C	; 28
    1d02:	f2 e0       	ldi	r31, 0x02	; 2
    1d04:	8b ea       	ldi	r24, 0xAB	; 171
    1d06:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1d08:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1d0a:	e8 17       	cp	r30, r24
    1d0c:	f9 07       	cpc	r31, r25
    1d0e:	e1 f7       	brne	.-8      	; 0x1d08 <receive_tm_msg+0x3c>
    1d10:	08 95       	ret
		new_tm_msgf = 0;
		receiving_tmf = 0;
		clear_current_tm();
		return;
	}
	if(current_tm_fullf)
    1d12:	70 91 de 02 	lds	r23, 0x02DE
    1d16:	77 23       	and	r23, r23
    1d18:	51 f0       	breq	.+20     	; 0x1d2e <receive_tm_msg+0x62>
	{
		send_tm_transaction_response(req_by, 0xFF);
    1d1a:	6f ef       	ldi	r22, 0xFF	; 255
    1d1c:	0e 94 84 0b 	call	0x1708	; 0x1708 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1d20:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1d24:	10 92 12 02 	sts	0x0212, r1
		receiving_tmf = 0;
    1d28:	10 92 01 03 	sts	0x0301, r1
		return;
    1d2c:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
    1d2e:	91 11       	cpse	r25, r1
    1d30:	03 c0       	rjmp	.+6      	; 0x1d38 <receive_tm_msg+0x6c>
    1d32:	66 23       	and	r22, r22
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <receive_tm_msg+0x6c>
    1d36:	47 c0       	rjmp	.+142    	; 0x1dc6 <receive_tm_msg+0xfa>
    1d38:	24 17       	cp	r18, r20
    1d3a:	35 07       	cpc	r19, r21
    1d3c:	91 f5       	brne	.+100    	; 0x1da2 <receive_tm_msg+0xd6>
	{
		tm_sequence_count = obc_seq_count;
    1d3e:	90 93 00 01 	sts	0x0100, r25
		receiving_tmf = 1;
    1d42:	41 e0       	ldi	r20, 0x01	; 1
    1d44:	40 93 01 03 	sts	0x0301, r20
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1d48:	f9 01       	movw	r30, r18
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	ee 0f       	add	r30, r30
    1d50:	ff 1f       	adc	r31, r31
    1d52:	e4 5e       	subi	r30, 0xE4	; 228
    1d54:	fd 4f       	sbci	r31, 0xFD	; 253
    1d56:	20 91 e2 02 	lds	r18, 0x02E2
    1d5a:	20 83       	st	Z, r18
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1d5c:	20 91 e3 02 	lds	r18, 0x02E3
    1d60:	21 83       	std	Z+1, r18	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1d62:	20 91 e4 02 	lds	r18, 0x02E4
    1d66:	22 83       	std	Z+2, r18	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1d68:	20 91 e5 02 	lds	r18, 0x02E5
    1d6c:	23 83       	std	Z+3, r18	; 0x03
		if(obc_seq_count == 35)
    1d6e:	93 32       	cpi	r25, 0x23	; 35
    1d70:	a9 f4       	brne	.+42     	; 0x1d9c <receive_tm_msg+0xd0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
    1d72:	10 92 00 01 	sts	0x0100, r1
			receiving_tmf = 0;
    1d76:	10 92 01 03 	sts	0x0301, r1
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	90 93 de 02 	sts	0x02DE, r25
    1d80:	ec e1       	ldi	r30, 0x1C	; 28
    1d82:	f2 e0       	ldi	r31, 0x02	; 2
    1d84:	af e0       	ldi	r26, 0x0F	; 15
    1d86:	b1 e0       	ldi	r27, 0x01	; 1
    1d88:	2b ea       	ldi	r18, 0xAB	; 171
    1d8a:	32 e0       	ldi	r19, 0x02	; 2
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
	{
		tm_to_downlink[i] = current_tm[i];
    1d8c:	91 91       	ld	r25, Z+
    1d8e:	9d 93       	st	X+, r25

// This function is necessary so that we can simply trash current_tm if a new transaction fails.
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
    1d90:	e2 17       	cp	r30, r18
    1d92:	f3 07       	cpc	r31, r19
    1d94:	d9 f7       	brne	.-10     	; 0x1d8c <receive_tm_msg+0xc0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
			receiving_tmf = 0;
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
			store_current_tm();										// Put current_tm[] into tm_to_downlink[]
			send_tm_transaction_response(req_by, obc_seq_count);	// Let the OBC know that the transaction succeeded.
    1d96:	63 e2       	ldi	r22, 0x23	; 35
    1d98:	0e 94 84 0b 	call	0x1708	; 0x1708 <send_tm_transaction_response>
		}
		new_tm_msgf = 0;
    1d9c:	10 92 12 02 	sts	0x0212, r1
		return;
    1da0:	08 95       	ret
	}
	else
	{
		send_tm_transaction_response(req_by, 0xFF);
    1da2:	6f ef       	ldi	r22, 0xFF	; 255
    1da4:	0e 94 84 0b 	call	0x1708	; 0x1708 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1da8:	10 92 00 01 	sts	0x0100, r1
		receiving_tmf = 0;
    1dac:	10 92 01 03 	sts	0x0301, r1
		new_tm_msgf = 0;
    1db0:	10 92 12 02 	sts	0x0212, r1
    1db4:	ec e1       	ldi	r30, 0x1C	; 28
    1db6:	f2 e0       	ldi	r31, 0x02	; 2
    1db8:	8b ea       	ldi	r24, 0xAB	; 171
    1dba:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1dbc:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1dbe:	e8 17       	cp	r30, r24
    1dc0:	f9 07       	cpc	r31, r25
    1dc2:	e1 f7       	brne	.-8      	; 0x1dbc <receive_tm_msg+0xf0>
    1dc4:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
	{
		tm_sequence_count = obc_seq_count;
		receiving_tmf = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	80 93 01 03 	sts	0x0301, r24
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1dcc:	f9 01       	movw	r30, r18
    1dce:	ee 0f       	add	r30, r30
    1dd0:	ff 1f       	adc	r31, r31
    1dd2:	ee 0f       	add	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	e4 5e       	subi	r30, 0xE4	; 228
    1dd8:	fd 4f       	sbci	r31, 0xFD	; 253
    1dda:	80 91 e2 02 	lds	r24, 0x02E2
    1dde:	80 83       	st	Z, r24
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1de0:	80 91 e3 02 	lds	r24, 0x02E3
    1de4:	81 83       	std	Z+1, r24	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1de6:	80 91 e4 02 	lds	r24, 0x02E4
    1dea:	82 83       	std	Z+2, r24	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1dec:	80 91 e5 02 	lds	r24, 0x02E5
    1df0:	83 83       	std	Z+3, r24	; 0x03
    1df2:	d4 cf       	rjmp	.-88     	; 0x1d9c <receive_tm_msg+0xd0>

00001df4 <alert_obc_tcp_ready>:


// Lets the OBC know that we have a TC packet ready.
void alert_obc_tcp_ready(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1df4:	8a e1       	ldi	r24, 0x1A	; 26
    1df6:	80 93 c5 01 	sts	0x01C5, r24
	send_arr[6] = MT_COM;
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	80 93 c4 01 	sts	0x01C4, r24
	send_arr[5] = TC_PACKET_READY;
    1e00:	81 e1       	ldi	r24, 0x11	; 17
    1e02:	80 93 c3 01 	sts	0x01C3, r24
	send_arr[4] = CURRENT_MINUTE;
    1e06:	80 91 0c 02 	lds	r24, 0x020C
    1e0a:	80 93 c2 01 	sts	0x01C2, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1e0e:	61 e1       	ldi	r22, 0x11	; 17
    1e10:	8e eb       	ldi	r24, 0xBE	; 190
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
    1e18:	08 95       	ret

00001e1a <send_pus_packet_tc>:
	}
	return;
}

void send_pus_packet_tc(void)
{
    1e1a:	2f 92       	push	r2
    1e1c:	3f 92       	push	r3
    1e1e:	4f 92       	push	r4
    1e20:	5f 92       	push	r5
    1e22:	6f 92       	push	r6
    1e24:	7f 92       	push	r7
    1e26:	8f 92       	push	r8
    1e28:	9f 92       	push	r9
    1e2a:	af 92       	push	r10
    1e2c:	bf 92       	push	r11
    1e2e:	cf 92       	push	r12
    1e30:	df 92       	push	r13
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
	uint8_t i, timeout = 250;
	uint8_t num_transfers = PACKET_LENGTH / 4;
	
	tc_transfer_completef = 0;
    1e3e:	10 92 ee 01 	sts	0x01EE, r1
	start_tc_transferf = 0;
    1e42:	10 92 ed 01 	sts	0x01ED, r1
	alert_obc_tcp_ready();
    1e46:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <alert_obc_tcp_ready>
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1e4a:	80 91 ed 01 	lds	r24, 0x01ED
    1e4e:	81 11       	cpse	r24, r1
    1e50:	0d c0       	rjmp	.+26     	; 0x1e6c <send_pus_packet_tc+0x52>
    1e52:	ca ef       	ldi	r28, 0xFA	; 250
    1e54:	03 c0       	rjmp	.+6      	; 0x1e5c <send_pus_packet_tc+0x42>
    1e56:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <send_pus_packet_tc+0x42>
    1e5a:	86 c0       	rjmp	.+268    	; 0x1f68 <send_pus_packet_tc+0x14e>
		{
			return;
		}
		delay_us(10);
    1e5c:	8a e0       	ldi	r24, 0x0A	; 10
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 86 11 	call	0x230c	; 0x230c <delay_us>
	uint8_t num_transfers = PACKET_LENGTH / 4;
	
	tc_transfer_completef = 0;
	start_tc_transferf = 0;
	alert_obc_tcp_ready();
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1e64:	80 91 ed 01 	lds	r24, 0x01ED
    1e68:	88 23       	and	r24, r24
    1e6a:	a9 f3       	breq	.-22     	; 0x1e56 <send_pus_packet_tc+0x3c>
		{
			return;
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
    1e6c:	10 92 ed 01 	sts	0x01ED, r1
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1e70:	80 91 ee 01 	lds	r24, 0x01EE
    1e74:	8f 3f       	cpi	r24, 0xFF	; 255
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <send_pus_packet_tc+0x60>
    1e78:	77 c0       	rjmp	.+238    	; 0x1f68 <send_pus_packet_tc+0x14e>
    1e7a:	0f 2e       	mov	r0, r31
    1e7c:	fa e1       	ldi	r31, 0x1A	; 26
    1e7e:	4f 2e       	mov	r4, r31
    1e80:	f3 e0       	ldi	r31, 0x03	; 3
    1e82:	5f 2e       	mov	r5, r31
    1e84:	f0 2d       	mov	r31, r0
		delay_us(10);
	}				
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
    1e86:	31 2c       	mov	r3, r1
	{
		if(tc_transfer_completef == 0xFF)
			return;
		send_arr[0] = current_tc[(i * 4)];
    1e88:	ce eb       	ldi	r28, 0xBE	; 190
    1e8a:	d1 e0       	ldi	r29, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1e8c:	0f 2e       	mov	r0, r31
    1e8e:	ff eb       	ldi	r31, 0xBF	; 191
    1e90:	af 2e       	mov	r10, r31
    1e92:	f1 e0       	ldi	r31, 0x01	; 1
    1e94:	bf 2e       	mov	r11, r31
    1e96:	f0 2d       	mov	r31, r0
		send_arr[2] = current_tc[(i * 4) + 2];
    1e98:	0f 2e       	mov	r0, r31
    1e9a:	f0 ec       	ldi	r31, 0xC0	; 192
    1e9c:	cf 2e       	mov	r12, r31
    1e9e:	f1 e0       	ldi	r31, 0x01	; 1
    1ea0:	df 2e       	mov	r13, r31
    1ea2:	f0 2d       	mov	r31, r0
		send_arr[3] = current_tc[(i * 4) + 3];
    1ea4:	0f 2e       	mov	r0, r31
    1ea6:	f1 ec       	ldi	r31, 0xC1	; 193
    1ea8:	ef 2e       	mov	r14, r31
    1eaa:	f1 e0       	ldi	r31, 0x01	; 1
    1eac:	ff 2e       	mov	r15, r31
    1eae:	f0 2d       	mov	r31, r0
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1eb0:	05 ec       	ldi	r16, 0xC5	; 197
    1eb2:	11 e0       	ldi	r17, 0x01	; 1
    1eb4:	0f 2e       	mov	r0, r31
    1eb6:	fa e1       	ldi	r31, 0x1A	; 26
    1eb8:	2f 2e       	mov	r2, r31
    1eba:	f0 2d       	mov	r31, r0
	send_arr[6] = MT_COM;
    1ebc:	0f 2e       	mov	r0, r31
    1ebe:	f4 ec       	ldi	r31, 0xC4	; 196
    1ec0:	8f 2e       	mov	r8, r31
    1ec2:	f1 e0       	ldi	r31, 0x01	; 1
    1ec4:	9f 2e       	mov	r9, r31
    1ec6:	f0 2d       	mov	r31, r0
	send_arr[5] = SEND_TC;
    1ec8:	0f 2e       	mov	r0, r31
    1eca:	f3 ec       	ldi	r31, 0xC3	; 195
    1ecc:	6f 2e       	mov	r6, r31
    1ece:	f1 e0       	ldi	r31, 0x01	; 1
    1ed0:	7f 2e       	mov	r7, r31
    1ed2:	f0 2d       	mov	r31, r0
    1ed4:	08 c0       	rjmp	.+16     	; 0x1ee6 <send_pus_packet_tc+0xcc>
    1ed6:	84 e0       	ldi	r24, 0x04	; 4
    1ed8:	48 0e       	add	r4, r24
    1eda:	51 1c       	adc	r5, r1
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1edc:	80 91 ee 01 	lds	r24, 0x01EE
    1ee0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <send_pus_packet_tc+0xcc>
    1ee4:	41 c0       	rjmp	.+130    	; 0x1f68 <send_pus_packet_tc+0x14e>
    1ee6:	f2 01       	movw	r30, r4
    1ee8:	33 97       	sbiw	r30, 0x03	; 3
			return;
		send_arr[0] = current_tc[(i * 4)];
    1eea:	80 81       	ld	r24, Z
    1eec:	88 83       	st	Y, r24
    1eee:	31 96       	adiw	r30, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1ef0:	80 81       	ld	r24, Z
    1ef2:	f5 01       	movw	r30, r10
    1ef4:	80 83       	st	Z, r24
    1ef6:	f2 01       	movw	r30, r4
    1ef8:	31 97       	sbiw	r30, 0x01	; 1
		send_arr[2] = current_tc[(i * 4) + 2];
    1efa:	80 81       	ld	r24, Z
    1efc:	f6 01       	movw	r30, r12
    1efe:	80 83       	st	Z, r24
		send_arr[3] = current_tc[(i * 4) + 3];
    1f00:	f2 01       	movw	r30, r4
    1f02:	80 81       	ld	r24, Z
    1f04:	f7 01       	movw	r30, r14
    1f06:	80 83       	st	Z, r24
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1f08:	f8 01       	movw	r30, r16
    1f0a:	20 82       	st	Z, r2
	send_arr[6] = MT_COM;
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	f4 01       	movw	r30, r8
    1f10:	80 83       	st	Z, r24
	send_arr[5] = SEND_TC;
    1f12:	8e e0       	ldi	r24, 0x0E	; 14
    1f14:	f3 01       	movw	r30, r6
    1f16:	80 83       	st	Z, r24
	send_arr[4] = packet_count;
    1f18:	e2 ec       	ldi	r30, 0xC2	; 194
    1f1a:	f1 e0       	ldi	r31, 0x01	; 1
    1f1c:	30 82       	st	Z, r3
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1f1e:	61 e1       	ldi	r22, 0x11	; 17
    1f20:	ce 01       	movw	r24, r28
    1f22:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
		send_arr[0] = current_tc[(i * 4)];
		send_arr[1] = current_tc[(i * 4) + 1];
		send_arr[2] = current_tc[(i * 4) + 2];
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 98 11 	call	0x2330	; 0x2330 <delay_ms>
		delay_us(10);
	}				
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
    1f2e:	33 94       	inc	r3
    1f30:	f6 e2       	ldi	r31, 0x26	; 38
    1f32:	3f 12       	cpse	r3, r31
    1f34:	d0 cf       	rjmp	.-96     	; 0x1ed6 <send_pus_packet_tc+0xbc>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1f36:	80 91 ee 01 	lds	r24, 0x01EE
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	0c c0       	rjmp	.+24     	; 0x1f56 <send_pus_packet_tc+0x13c>
    1f3e:	c4 e6       	ldi	r28, 0x64	; 100
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <send_pus_packet_tc+0x12c>
    1f42:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1f44:	89 f0       	breq	.+34     	; 0x1f68 <send_pus_packet_tc+0x14e>
		{
			return;
		}
		delay_us(100);
    1f46:	84 e6       	ldi	r24, 0x64	; 100
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	0e 94 86 11 	call	0x230c	; 0x230c <delay_us>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1f4e:	80 91 ee 01 	lds	r24, 0x01EE
    1f52:	88 23       	and	r24, r24
    1f54:	b1 f3       	breq	.-20     	; 0x1f42 <send_pus_packet_tc+0x128>
			return;
		}
		delay_us(100);
	}
	
	if(tc_transfer_completef != 35)
    1f56:	83 32       	cpi	r24, 0x23	; 35
    1f58:	19 f0       	breq	.+6      	; 0x1f60 <send_pus_packet_tc+0x146>
	{
		tc_transfer_completef = 0;
    1f5a:	10 92 ee 01 	sts	0x01EE, r1
		return;
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <send_pus_packet_tc+0x14e>
	}
	else
	{
		tc_transfer_completef = 0;
    1f60:	10 92 ee 01 	sts	0x01EE, r1
		tc_packet_readyf = 0;
    1f64:	10 92 dd 02 	sts	0x02DD, r1
		return;
	}
}
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	bf 90       	pop	r11
    1f7a:	af 90       	pop	r10
    1f7c:	9f 90       	pop	r9
    1f7e:	8f 90       	pop	r8
    1f80:	7f 90       	pop	r7
    1f82:	6f 90       	pop	r6
    1f84:	5f 90       	pop	r5
    1f86:	4f 90       	pop	r4
    1f88:	3f 90       	pop	r3
    1f8a:	2f 90       	pop	r2
    1f8c:	08 95       	ret

00001f8e <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now)
    1f8e:	80 91 10 02 	lds	r24, 0x0210
    1f92:	81 11       	cpse	r24, r1
		send_response();
    1f94:	0e 94 9f 0b 	call	0x173e	; 0x173e <send_response>
	if (send_hk)
    1f98:	80 91 bd 02 	lds	r24, 0x02BD
    1f9c:	81 11       	cpse	r24, r1
		send_housekeeping();
    1f9e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <send_housekeeping>
	if (send_data)
    1fa2:	80 91 df 02 	lds	r24, 0x02DF
    1fa6:	81 11       	cpse	r24, r1
		send_sensor_data();
    1fa8:	0e 94 c6 0b 	call	0x178c	; 0x178c <send_sensor_data>
	if (msg_received)
    1fac:	80 91 0e 01 	lds	r24, 0x010E
    1fb0:	81 11       	cpse	r24, r1
		send_coms_packet();
    1fb2:	0e 94 1f 0c 	call	0x183e	; 0x183e <send_coms_packet>
	if (read_response)
    1fb6:	80 91 1b 02 	lds	r24, 0x021B
    1fba:	81 11       	cpse	r24, r1
		send_read_response();
    1fbc:	0e 94 37 0c 	call	0x186e	; 0x186e <send_read_response>
	if (write_response)
    1fc0:	80 91 e1 01 	lds	r24, 0x01E1
    1fc4:	81 11       	cpse	r24, r1
		send_write_response();
    1fc6:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <send_write_response>
	if (set_sens_h)
    1fca:	80 91 dc 02 	lds	r24, 0x02DC
    1fce:	81 11       	cpse	r24, r1
		set_sensor_high();
    1fd0:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <set_sensor_high>
	if (set_sens_l)
    1fd4:	80 91 e1 02 	lds	r24, 0x02E1
    1fd8:	81 11       	cpse	r24, r1
		set_sensor_low();
    1fda:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <set_sensor_low>
	if (set_varf)
    1fde:	80 91 e0 02 	lds	r24, 0x02E0
    1fe2:	81 11       	cpse	r24, r1
		set_var();
    1fe4:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <set_var>
	if (new_tm_msgf)
    1fe8:	80 91 12 02 	lds	r24, 0x0212
    1fec:	81 11       	cpse	r24, r1
		receive_tm_msg();
    1fee:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <receive_tm_msg>
	if (tc_packet_readyf)
    1ff2:	80 91 dd 02 	lds	r24, 0x02DD
    1ff6:	81 11       	cpse	r24, r1
		send_pus_packet_tc();
    1ff8:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <send_pus_packet_tc>
    1ffc:	08 95       	ret

00001ffe <main>:
	uint8_t high = 0, low = 0;
	
	uint8_t msg = 0x66;
	
	uint8_t* adc_result;
	*adc_result = 0;
    1ffe:	10 92 00 00 	sts	0x0000, r1
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    2002:	e1 e6       	ldi	r30, 0x61	; 97
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 e8       	ldi	r24, 0x80	; 128
    2008:	80 83       	st	Z, r24
	CLKPR = 0x00;
    200a:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    200c:	8e ef       	ldi	r24, 0xFE	; 254
    200e:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    2010:	81 e1       	ldi	r24, 0x11	; 17
    2012:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    2014:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    2016:	89 e0       	ldi	r24, 0x09	; 9
    2018:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    201a:	c1 e0       	ldi	r28, 0x01	; 1
    201c:	cb b9       	out	0x0b, r28	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    201e:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    2020:	1e b8       	out	0x0e, r1	; 14
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    2022:	0e 94 7e 11 	call	0x22fc	; 0x22fc <timer_init>

	adc_initialize();
    2026:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_initialize>
	can_init(0);
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <can_init>
	can_init_mobs();
    2030:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <can_init_mobs>
	spi_initialize_master();
    2034:	0e 94 48 11 	call	0x2290	; 0x2290 <spi_initialize_master>

	// Enable the timer for mppt
	if(SELF_ID == 1)
	{
		PIN_set(LED1);
    2038:	8d e1       	ldi	r24, 0x1D	; 29
    203a:	0e 94 c8 10 	call	0x2190	; 0x2190 <PIN_set>
		mppt_timer_init();
    203e:	0e 94 b5 10 	call	0x216a	; 0x216a <mppt_timer_init>
		mpptx = 0x3F;
    2042:	8f e3       	ldi	r24, 0x3F	; 63
    2044:	80 93 11 02 	sts	0x0211, r24
		mppty = 0x1F;
    2048:	8f e1       	ldi	r24, 0x1F	; 31
    204a:	80 93 09 02 	sts	0x0209, r24
		balance_l = 1;
    204e:	c0 93 ec 01 	sts	0x01EC, r28
		balance_h = 1;
    2052:	c0 93 d4 01 	sts	0x01D4, r28
		pxv = 0xBF;
    2056:	8f eb       	ldi	r24, 0xBF	; 191
    2058:	80 93 ea 02 	sts	0x02EA, r24
		pxi	= 0x0F;
    205c:	8f e0       	ldi	r24, 0x0F	; 15
    205e:	80 93 eb 02 	sts	0x02EB, r24
		pyv = 0x5F;
    2062:	8f e5       	ldi	r24, 0x5F	; 95
    2064:	80 93 0f 02 	sts	0x020F, r24
		pyi = 0x2F;
    2068:	8f e2       	ldi	r24, 0x2F	; 47
    206a:	80 93 09 01 	sts	0x0109, r24
	}
	
	// Enable global interrupts for Timer execution
	sei();
    206e:	78 94       	sei
	{
		transceiver_initialize();
		coms_timer_init();
	}

	SS1_set_high();		// SPI Temp Sensor.
    2070:	0e 94 4e 11 	call	0x229c	; 0x229c <SS1_set_high>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    2074:	0e 94 99 02 	call	0x532	; 0x532 <can_check_general>
			//check_obc_alive();
		}

		if(SELF_ID == 1)
		{
			run_mppt();
    2078:	0e 94 c1 10 	call	0x2182	; 0x2182 <run_mppt>
			run_battBalance();
    207c:	0e 94 7b 00 	call	0xf6	; 0xf6 <run_battBalance>
		}
		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    2080:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <run_commands>
    2084:	f7 cf       	rjmp	.-18     	; 0x2074 <main+0x76>

00002086 <__vector_15>:


//Section to deal with timer interrupts
#if (SELF_ID == 1)
//When the A compare register is reached, turn on the MPPTX signal
ISR(TIMER0_COMPA_vect) {
    2086:	1f 92       	push	r1
    2088:	0f 92       	push	r0
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	0f 92       	push	r0
    208e:	11 24       	eor	r1, r1
    2090:	2f 93       	push	r18
    2092:	3f 93       	push	r19
    2094:	4f 93       	push	r20
    2096:	5f 93       	push	r21
    2098:	6f 93       	push	r22
    209a:	7f 93       	push	r23
    209c:	8f 93       	push	r24
    209e:	9f 93       	push	r25
    20a0:	af 93       	push	r26
    20a2:	bf 93       	push	r27
    20a4:	ef 93       	push	r30
    20a6:	ff 93       	push	r31
	PIN_clr(LED2);
    20a8:	8b e1       	ldi	r24, 0x1B	; 27
    20aa:	0e 94 08 11 	call	0x2210	; 0x2210 <PIN_clr>
}
    20ae:	ff 91       	pop	r31
    20b0:	ef 91       	pop	r30
    20b2:	bf 91       	pop	r27
    20b4:	af 91       	pop	r26
    20b6:	9f 91       	pop	r25
    20b8:	8f 91       	pop	r24
    20ba:	7f 91       	pop	r23
    20bc:	6f 91       	pop	r22
    20be:	5f 91       	pop	r21
    20c0:	4f 91       	pop	r20
    20c2:	3f 91       	pop	r19
    20c4:	2f 91       	pop	r18
    20c6:	0f 90       	pop	r0
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	0f 90       	pop	r0
    20cc:	1f 90       	pop	r1
    20ce:	18 95       	reti

000020d0 <__vector_16>:

//When the B compare register is reached, turn on the MPPTY signal
ISR(TIMER0_COMPB_vect) {
    20d0:	1f 92       	push	r1
    20d2:	0f 92       	push	r0
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	0f 92       	push	r0
    20d8:	11 24       	eor	r1, r1
    20da:	2f 93       	push	r18
    20dc:	3f 93       	push	r19
    20de:	4f 93       	push	r20
    20e0:	5f 93       	push	r21
    20e2:	6f 93       	push	r22
    20e4:	7f 93       	push	r23
    20e6:	8f 93       	push	r24
    20e8:	9f 93       	push	r25
    20ea:	af 93       	push	r26
    20ec:	bf 93       	push	r27
    20ee:	ef 93       	push	r30
    20f0:	ff 93       	push	r31
	PIN_clr(LED3);
    20f2:	8e e1       	ldi	r24, 0x1E	; 30
    20f4:	0e 94 08 11 	call	0x2210	; 0x2210 <PIN_clr>
}
    20f8:	ff 91       	pop	r31
    20fa:	ef 91       	pop	r30
    20fc:	bf 91       	pop	r27
    20fe:	af 91       	pop	r26
    2100:	9f 91       	pop	r25
    2102:	8f 91       	pop	r24
    2104:	7f 91       	pop	r23
    2106:	6f 91       	pop	r22
    2108:	5f 91       	pop	r21
    210a:	4f 91       	pop	r20
    210c:	3f 91       	pop	r19
    210e:	2f 91       	pop	r18
    2110:	0f 90       	pop	r0
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	0f 90       	pop	r0
    2116:	1f 90       	pop	r1
    2118:	18 95       	reti

0000211a <__vector_17>:

//When the timer overflows, turn off both signals
ISR(TIMER0_OVF_vect) {
    211a:	1f 92       	push	r1
    211c:	0f 92       	push	r0
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	0f 92       	push	r0
    2122:	11 24       	eor	r1, r1
    2124:	2f 93       	push	r18
    2126:	3f 93       	push	r19
    2128:	4f 93       	push	r20
    212a:	5f 93       	push	r21
    212c:	6f 93       	push	r22
    212e:	7f 93       	push	r23
    2130:	8f 93       	push	r24
    2132:	9f 93       	push	r25
    2134:	af 93       	push	r26
    2136:	bf 93       	push	r27
    2138:	ef 93       	push	r30
    213a:	ff 93       	push	r31
	PIN_set(LED2);
    213c:	8b e1       	ldi	r24, 0x1B	; 27
    213e:	0e 94 c8 10 	call	0x2190	; 0x2190 <PIN_set>
	PIN_set(LED3);
    2142:	8e e1       	ldi	r24, 0x1E	; 30
    2144:	0e 94 c8 10 	call	0x2190	; 0x2190 <PIN_set>
}
    2148:	ff 91       	pop	r31
    214a:	ef 91       	pop	r30
    214c:	bf 91       	pop	r27
    214e:	af 91       	pop	r26
    2150:	9f 91       	pop	r25
    2152:	8f 91       	pop	r24
    2154:	7f 91       	pop	r23
    2156:	6f 91       	pop	r22
    2158:	5f 91       	pop	r21
    215a:	4f 91       	pop	r20
    215c:	3f 91       	pop	r19
    215e:	2f 91       	pop	r18
    2160:	0f 90       	pop	r0
    2162:	0f be       	out	0x3f, r0	; 63
    2164:	0f 90       	pop	r0
    2166:	1f 90       	pop	r1
    2168:	18 95       	reti

0000216a <mppt_timer_init>:

// This function initializes a 8-bit timer used for generating PWM for mppt.
// NOTE: I cannot run this after global interrupts have been turned on
void mppt_timer_init(void) {
	
	TCNT0 = 0x0000; //Clear timer
    216a:	16 bc       	out	0x26, r1	; 38
	//For now, hard code in the values that the "duty cycle" registers will be set to. This will be updated later by the algorithm
	OCR0A = 0x3F; // b00111111
    216c:	8f e3       	ldi	r24, 0x3F	; 63
    216e:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xBF; // b10111111
    2170:	8f eb       	ldi	r24, 0xBF	; 191
    2172:	88 bd       	out	0x28, r24	; 40
	
	TCCR0A = 0x00; // b00000000 Don't connect any pins, but set to normal mode as a test
    2174:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; // b00000101 Set clock pre-scaling to 1024 for now, will be 1 later for "fast" output
    2176:	85 e0       	ldi	r24, 0x05	; 5
    2178:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x07; // b00000111 Enable the A and B compare match interrupts. Also enable the timer overflow interrupt
    217a:	87 e0       	ldi	r24, 0x07	; 7
    217c:	80 93 6e 00 	sts	0x006E, r24
    2180:	08 95       	ret

00002182 <run_mppt>:
void set_duty_cycleY(uint8_t duty){
	OCR0B = duty;
}

void run_mppt(void) {
	set_duty_cycleX(mpptx);
    2182:	80 91 11 02 	lds	r24, 0x0211
}

//This function will set the duty cycle of MPPTA
//Duty is an 8 bit number, so 0x7F is a duty cycle of 0.5
void set_duty_cycleX(uint8_t duty){
	OCR0A = duty;
    2186:	87 bd       	out	0x27, r24	; 39
	OCR0B = duty;
}

void run_mppt(void) {
	set_duty_cycleX(mpptx);
	set_duty_cycleY(mppty);	
    2188:	80 91 09 02 	lds	r24, 0x0209
	OCR0A = duty;
}

//This function will set the duty cycle of MPPTB
void set_duty_cycleY(uint8_t duty){
	OCR0B = duty;
    218c:	88 bd       	out	0x28, r24	; 40
    218e:	08 95       	ret

00002190 <PIN_set>:
	return;
}

void PIN_set(uint8_t PIN)
{
	if(PIN == 13)
    2190:	8d 30       	cpi	r24, 0x0D	; 13
    2192:	11 f4       	brne	.+4      	; 0x2198 <PIN_set+0x8>
	{
		PORTD |= 0b00100000;
    2194:	5d 9a       	sbi	0x0b, 5	; 11
    2196:	08 c0       	rjmp	.+16     	; 0x21a8 <PIN_set+0x18>
	}
	if(PIN == 14)
    2198:	8e 30       	cpi	r24, 0x0E	; 14
    219a:	11 f4       	brne	.+4      	; 0x21a0 <PIN_set+0x10>
	{
		PORTD |= 0b01000000;
    219c:	5e 9a       	sbi	0x0b, 6	; 11
    219e:	08 c0       	rjmp	.+16     	; 0x21b0 <PIN_set+0x20>
	}
	if(PIN == 15)
    21a0:	8f 30       	cpi	r24, 0x0F	; 15
    21a2:	11 f4       	brne	.+4      	; 0x21a8 <PIN_set+0x18>
	{
		PORTD |= 0b10000000;
    21a4:	5f 9a       	sbi	0x0b, 7	; 11
    21a6:	08 c0       	rjmp	.+16     	; 0x21b8 <PIN_set+0x28>
	}
	if(PIN == 16)
    21a8:	80 31       	cpi	r24, 0x10	; 16
    21aa:	11 f4       	brne	.+4      	; 0x21b0 <PIN_set+0x20>
	{
		PORTB |= 0b00000100;
    21ac:	2a 9a       	sbi	0x05, 2	; 5
    21ae:	08 c0       	rjmp	.+16     	; 0x21c0 <PIN_set+0x30>
	}
	if(PIN == 17)
    21b0:	81 31       	cpi	r24, 0x11	; 17
    21b2:	11 f4       	brne	.+4      	; 0x21b8 <PIN_set+0x28>
	{
		PORTC |= 0b00010000;
    21b4:	44 9a       	sbi	0x08, 4	; 8
    21b6:	08 c0       	rjmp	.+16     	; 0x21c8 <PIN_set+0x38>
	}
	if(PIN == 18)
    21b8:	82 31       	cpi	r24, 0x12	; 18
    21ba:	11 f4       	brne	.+4      	; 0x21c0 <PIN_set+0x30>
	{
		PORTC |= 0b00100000;
    21bc:	45 9a       	sbi	0x08, 5	; 8
    21be:	08 c0       	rjmp	.+16     	; 0x21d0 <PIN_set+0x40>
	}
	if(PIN == 22)
    21c0:	86 31       	cpi	r24, 0x16	; 22
    21c2:	11 f4       	brne	.+4      	; 0x21c8 <PIN_set+0x38>
	{
		PORTC |= 0b01000000;
    21c4:	46 9a       	sbi	0x08, 6	; 8
    21c6:	08 c0       	rjmp	.+16     	; 0x21d8 <PIN_set+0x48>
	}
	if(PIN == 23)
    21c8:	87 31       	cpi	r24, 0x17	; 23
    21ca:	11 f4       	brne	.+4      	; 0x21d0 <PIN_set+0x40>
	{
		PORTB |= 0b00001000;
    21cc:	2b 9a       	sbi	0x05, 3	; 5
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <PIN_set+0x50>
	}
	if(PIN == 24)
    21d0:	88 31       	cpi	r24, 0x18	; 24
    21d2:	11 f4       	brne	.+4      	; 0x21d8 <PIN_set+0x48>
	{
		PORTB |= 0b00010000;
    21d4:	2c 9a       	sbi	0x05, 4	; 5
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <PIN_set+0x58>
	}
	if(PIN == 25)
    21d8:	89 31       	cpi	r24, 0x19	; 25
    21da:	11 f4       	brne	.+4      	; 0x21e0 <PIN_set+0x50>
	{
		PORTC |= 0b10000000;
    21dc:	47 9a       	sbi	0x08, 7	; 8
    21de:	08 c0       	rjmp	.+16     	; 0x21f0 <PIN_set+0x60>
	}
	if(PIN == 26)
    21e0:	8a 31       	cpi	r24, 0x1A	; 26
    21e2:	11 f4       	brne	.+4      	; 0x21e8 <PIN_set+0x58>
	{
		PORTB |= 0b00100000;
    21e4:	2d 9a       	sbi	0x05, 5	; 5
    21e6:	08 c0       	rjmp	.+16     	; 0x21f8 <PIN_set+0x68>
	}
	if(PIN == 27)
    21e8:	8b 31       	cpi	r24, 0x1B	; 27
    21ea:	11 f4       	brne	.+4      	; 0x21f0 <PIN_set+0x60>
	{
		PORTB |= 0b01000000;
    21ec:	2e 9a       	sbi	0x05, 6	; 5
    21ee:	08 c0       	rjmp	.+16     	; 0x2200 <PIN_set+0x70>
	}
	if(PIN == 28)
    21f0:	8c 31       	cpi	r24, 0x1C	; 28
    21f2:	11 f4       	brne	.+4      	; 0x21f8 <PIN_set+0x68>
	{
		PORTB |= 0b10000000;
    21f4:	2f 9a       	sbi	0x05, 7	; 5
    21f6:	08 c0       	rjmp	.+16     	; 0x2208 <PIN_set+0x78>
	}
	if(PIN == 29)
    21f8:	8d 31       	cpi	r24, 0x1D	; 29
    21fa:	11 f4       	brne	.+4      	; 0x2200 <PIN_set+0x70>
	{
		PORTD |= 0b00000001;
    21fc:	58 9a       	sbi	0x0b, 0	; 11
    21fe:	08 95       	ret
	}
	if(PIN == 30)
    2200:	8e 31       	cpi	r24, 0x1E	; 30
    2202:	11 f4       	brne	.+4      	; 0x2208 <PIN_set+0x78>
	{
		PORTC |= 0b00000001;
    2204:	40 9a       	sbi	0x08, 0	; 8
    2206:	08 95       	ret
	}
	if(PIN == 32)
    2208:	80 32       	cpi	r24, 0x20	; 32
    220a:	09 f4       	brne	.+2      	; 0x220e <PIN_set+0x7e>
	{
		PORTD |= 0b00000010;
    220c:	59 9a       	sbi	0x0b, 1	; 11
    220e:	08 95       	ret

00002210 <PIN_clr>:
	return;
}

void PIN_clr(uint8_t PIN)
{
	if(PIN == 13)
    2210:	8d 30       	cpi	r24, 0x0D	; 13
    2212:	11 f4       	brne	.+4      	; 0x2218 <PIN_clr+0x8>
	{
		PORTD &= ~(0b00100000);
    2214:	5d 98       	cbi	0x0b, 5	; 11
    2216:	08 c0       	rjmp	.+16     	; 0x2228 <PIN_clr+0x18>
	}
	if(PIN == 14)
    2218:	8e 30       	cpi	r24, 0x0E	; 14
    221a:	11 f4       	brne	.+4      	; 0x2220 <PIN_clr+0x10>
	{
		PORTD &= ~(0b01000000);
    221c:	5e 98       	cbi	0x0b, 6	; 11
    221e:	08 c0       	rjmp	.+16     	; 0x2230 <PIN_clr+0x20>
	}
	if(PIN == 15)
    2220:	8f 30       	cpi	r24, 0x0F	; 15
    2222:	11 f4       	brne	.+4      	; 0x2228 <PIN_clr+0x18>
	{
		PORTD &= ~(0b10000000);
    2224:	5f 98       	cbi	0x0b, 7	; 11
    2226:	08 c0       	rjmp	.+16     	; 0x2238 <PIN_clr+0x28>
	}
	if(PIN == 16)
    2228:	80 31       	cpi	r24, 0x10	; 16
    222a:	11 f4       	brne	.+4      	; 0x2230 <PIN_clr+0x20>
	{
		PORTB &= ~(0b00000100);
    222c:	2a 98       	cbi	0x05, 2	; 5
    222e:	08 c0       	rjmp	.+16     	; 0x2240 <PIN_clr+0x30>
	}
	if(PIN == 17)
    2230:	81 31       	cpi	r24, 0x11	; 17
    2232:	11 f4       	brne	.+4      	; 0x2238 <PIN_clr+0x28>
	{
		PORTC &= ~(0b00010000);
    2234:	44 98       	cbi	0x08, 4	; 8
    2236:	08 c0       	rjmp	.+16     	; 0x2248 <PIN_clr+0x38>
	}
	if(PIN == 18)
    2238:	82 31       	cpi	r24, 0x12	; 18
    223a:	11 f4       	brne	.+4      	; 0x2240 <PIN_clr+0x30>
	{
		PORTC &= ~(0b00100000);
    223c:	45 98       	cbi	0x08, 5	; 8
    223e:	08 c0       	rjmp	.+16     	; 0x2250 <PIN_clr+0x40>
	}
	if(PIN == 22)
    2240:	86 31       	cpi	r24, 0x16	; 22
    2242:	11 f4       	brne	.+4      	; 0x2248 <PIN_clr+0x38>
	{
		PORTC &= ~(0b01000000);
    2244:	46 98       	cbi	0x08, 6	; 8
    2246:	08 c0       	rjmp	.+16     	; 0x2258 <PIN_clr+0x48>
	}
	if(PIN == 23)
    2248:	87 31       	cpi	r24, 0x17	; 23
    224a:	11 f4       	brne	.+4      	; 0x2250 <PIN_clr+0x40>
	{
		PORTB &= ~(0b00001000);
    224c:	2b 98       	cbi	0x05, 3	; 5
    224e:	08 c0       	rjmp	.+16     	; 0x2260 <PIN_clr+0x50>
	}
	if(PIN == 24)
    2250:	88 31       	cpi	r24, 0x18	; 24
    2252:	11 f4       	brne	.+4      	; 0x2258 <PIN_clr+0x48>
	{
		PORTB &= ~(0b00010000);
    2254:	2c 98       	cbi	0x05, 4	; 5
    2256:	08 c0       	rjmp	.+16     	; 0x2268 <PIN_clr+0x58>
	}
	if(PIN == 25)
    2258:	89 31       	cpi	r24, 0x19	; 25
    225a:	11 f4       	brne	.+4      	; 0x2260 <PIN_clr+0x50>
	{
		PORTC &= ~(0b10000000);
    225c:	47 98       	cbi	0x08, 7	; 8
    225e:	08 c0       	rjmp	.+16     	; 0x2270 <PIN_clr+0x60>
	}
	if(PIN == 26)
    2260:	8a 31       	cpi	r24, 0x1A	; 26
    2262:	11 f4       	brne	.+4      	; 0x2268 <PIN_clr+0x58>
	{
		PORTB &= ~(0b00100000);
    2264:	2d 98       	cbi	0x05, 5	; 5
    2266:	08 c0       	rjmp	.+16     	; 0x2278 <PIN_clr+0x68>
	}
	if(PIN == 27)
    2268:	8b 31       	cpi	r24, 0x1B	; 27
    226a:	11 f4       	brne	.+4      	; 0x2270 <PIN_clr+0x60>
	{
		PORTB &= ~(0b01000000);
    226c:	2e 98       	cbi	0x05, 6	; 5
    226e:	08 c0       	rjmp	.+16     	; 0x2280 <PIN_clr+0x70>
	}
	if(PIN == 28)
    2270:	8c 31       	cpi	r24, 0x1C	; 28
    2272:	11 f4       	brne	.+4      	; 0x2278 <PIN_clr+0x68>
	{
		PORTB &= ~(0b10000000);
    2274:	2f 98       	cbi	0x05, 7	; 5
    2276:	08 c0       	rjmp	.+16     	; 0x2288 <PIN_clr+0x78>
	}
	if(PIN == 29)
    2278:	8d 31       	cpi	r24, 0x1D	; 29
    227a:	11 f4       	brne	.+4      	; 0x2280 <PIN_clr+0x70>
	{
		PORTD &= ~(0b00000001);
    227c:	58 98       	cbi	0x0b, 0	; 11
    227e:	08 95       	ret
	}
	if(PIN == 30)
    2280:	8e 31       	cpi	r24, 0x1E	; 30
    2282:	11 f4       	brne	.+4      	; 0x2288 <PIN_clr+0x78>
	{
		PORTC &= ~(0b00000001);
    2284:	40 98       	cbi	0x08, 0	; 8
    2286:	08 95       	ret
	}
	if(PIN == 32)
    2288:	80 32       	cpi	r24, 0x20	; 32
    228a:	09 f4       	brne	.+2      	; 0x228e <PIN_clr+0x7e>
	{
		PORTD &= ~(0b00000010);
    228c:	59 98       	cbi	0x0b, 1	; 11
    228e:	08 95       	ret

00002290 <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    2290:	85 b7       	in	r24, 0x35	; 53
    2292:	8f 77       	andi	r24, 0x7F	; 127
    2294:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    2296:	83 e5       	ldi	r24, 0x53	; 83
    2298:	8c bd       	out	0x2c, r24	; 44
    229a:	08 95       	ret

0000229c <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    229c:	44 9a       	sbi	0x08, 4	; 8
    229e:	08 95       	ret

000022a0 <SS1_set_low>:
	delay_us(1);
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    22a0:	44 98       	cbi	0x08, 4	; 8
    22a2:	08 95       	ret

000022a4 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	8c 01       	movw	r16, r24
    22ae:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    22b0:	0e 94 50 11 	call	0x22a0	; 0x22a0 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    22b4:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    22b6:	80 e8       	ldi	r24, 0x80	; 128
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 98 11 	call	0x2330	; 0x2330 <delay_ms>
	*high = *reg_ptr;
    22be:	8e b5       	in	r24, 0x2e	; 46
    22c0:	f8 01       	movw	r30, r16
    22c2:	80 83       	st	Z, r24
	delay_ms(128);
    22c4:	80 e8       	ldi	r24, 0x80	; 128
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 94 98 11 	call	0x2330	; 0x2330 <delay_ms>
	*low = *reg_ptr;	
    22cc:	8e b5       	in	r24, 0x2e	; 46
    22ce:	88 83       	st	Y, r24
	SS1_set_high();
    22d0:	0e 94 4e 11 	call	0x229c	; 0x229c <SS1_set_high>
	
	return;
}
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	08 95       	ret

000022de <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    22de:	1f 92       	push	r1
    22e0:	0f 92       	push	r0
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	0f 92       	push	r0
    22e6:	11 24       	eor	r1, r1
    22e8:	8f 93       	push	r24
	CTC_flag = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	80 93 ba 03 	sts	0x03BA, r24
}
    22f0:	8f 91       	pop	r24
    22f2:	0f 90       	pop	r0
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	0f 90       	pop	r0
    22f8:	1f 90       	pop	r1
    22fa:	18 95       	reti

000022fc <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    22fc:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    2300:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    2304:	8a e0       	ldi	r24, 0x0A	; 10
    2306:	80 93 81 00 	sts	0x0081, r24
    230a:	08 95       	ret

0000230c <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    230c:	10 92 ba 03 	sts	0x03BA, r1
	TCNT1 = 0x0000; //Clear timer
    2310:	10 92 85 00 	sts	0x0085, r1
    2314:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    2318:	90 93 89 00 	sts	0x0089, r25
    231c:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    2326:	80 91 ba 03 	lds	r24, 0x03BA
    232a:	88 23       	and	r24, r24
    232c:	e1 f3       	breq	.-8      	; 0x2326 <delay_us+0x1a>
}
    232e:	08 95       	ret

00002330 <delay_ms>:

void delay_ms(uint16_t ms) {
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    233a:	00 97       	sbiw	r24, 0x00	; 0
    233c:	51 f0       	breq	.+20     	; 0x2352 <delay_ms+0x22>
    233e:	c0 e0       	ldi	r28, 0x00	; 0
    2340:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    2342:	88 ee       	ldi	r24, 0xE8	; 232
    2344:	93 e0       	ldi	r25, 0x03	; 3
    2346:	0e 94 86 11 	call	0x230c	; 0x230c <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    234a:	21 96       	adiw	r28, 0x01	; 1
    234c:	c0 17       	cp	r28, r16
    234e:	d1 07       	cpc	r29, r17
    2350:	c1 f7       	brne	.-16     	; 0x2342 <delay_ms+0x12>
		delay_us(1000);
	}
}
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	08 95       	ret

0000235c <__tablejump2__>:
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31

00002360 <__tablejump__>:
    2360:	05 90       	lpm	r0, Z+
    2362:	f4 91       	lpm	r31, Z
    2364:	e0 2d       	mov	r30, r0
    2366:	09 94       	ijmp

00002368 <_exit>:
    2368:	f8 94       	cli

0000236a <__stop_program>:
    236a:	ff cf       	rjmp	.-2      	; 0x236a <__stop_program>
