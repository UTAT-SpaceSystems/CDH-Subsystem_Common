
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001492  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000003d  00800100  00800100  00001506  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000130  00000000  00000000  00001536  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000112a  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000765  00000000  00000000  00002790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000009e4  00000000  00000000  00002ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000268  00000000  00000000  000038dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000004eb  00000000  00000000  00003b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000011a8  00000000  00000000  0000402f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000118  00000000  00000000  000051d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	07 01       	movw	r0, r14
      7e:	99 01       	movw	r18, r18
      80:	23 02       	muls	r18, r19
      82:	97 02       	muls	r25, r23
      84:	d7 02       	muls	r29, r23
      86:	53 03       	mulsu	r21, r19
      88:	d0 03       	fmuls	r21, r16
      8a:	6d 04       	cpc	r6, r13
      8c:	13 05       	cpc	r17, r3
      8e:	01 01       	movw	r0, r2
      90:	1c 06       	cpc	r1, r28

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ad 33       	cpi	r26, 0x3D	; 61
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 de 07 	call	0xfbc	; 0xfbc <main>
      b2:	0c 94 47 0a 	jmp	0x148e	; 0x148e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      ba:	82 ee       	ldi	r24, 0xE2	; 226
      bc:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c0:	80 ea       	ldi	r24, 0xA0	; 160
      c2:	80 93 7b 00 	sts	0x007B, r24
      c6:	08 95       	ret

000000c8 <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      c8:	e8 e7       	ldi	r30, 0x78	; 120
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	20 81       	ld	r18, Z
      ce:	dc 01       	movw	r26, r24
      d0:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
      d2:	21 81       	ldd	r18, Z+1	; 0x01
      d4:	11 96       	adiw	r26, 0x01	; 1
      d6:	2c 93       	st	X, r18
      d8:	08 95       	ret

000000da <can_clear_all_mob>:
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	ad ee       	ldi	r26, 0xED	; 237
      de:	b0 e0       	ldi	r27, 0x00	; 0
      e0:	3e ee       	ldi	r19, 0xEE	; 238
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	98 2f       	mov	r25, r24
      e6:	92 95       	swap	r25
      e8:	90 7f       	andi	r25, 0xF0	; 240
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
      ea:	9c 93       	st	X, r25
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
      ec:	e3 2f       	mov	r30, r19
      ee:	f2 2f       	mov	r31, r18
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
      f0:	11 92       	st	Z+, r1
      f2:	e8 3f       	cpi	r30, 0xF8	; 248
    uint8_t  ovrtim_flag=0;                          //! Timer overflow count
    uint16_t conf_index;                             //! Count of bit timing configuration tried
    uint8_t  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
      f4:	f1 05       	cpc	r31, r1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
      f6:	e1 f7       	brne	.-8      	; 0xf0 <can_clear_all_mob+0x16>
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
      f8:	8f 5f       	subi	r24, 0xFF	; 255
    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
      fa:	86 30       	cpi	r24, 0x06	; 6
      fc:	99 f7       	brne	.-26     	; 0xe4 <can_clear_all_mob+0xa>
      fe:	08 95       	ret

00000100 <can_get_mob_status>:
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
     100:	80 91 ef 00 	lds	r24, 0x00EF
     104:	80 7c       	andi	r24, 0xC0	; 192
     106:	61 f0       	breq	.+24     	; 0x120 <can_get_mob_status+0x20>

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
     108:	80 91 ee 00 	lds	r24, 0x00EE
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     10c:	98 2f       	mov	r25, r24
    {
        Can_set_mob(u8_temp0);  //! Page index
     10e:	90 7e       	andi	r25, 0xE0	; 224
     110:	28 2f       	mov	r18, r24
        Can_clear_mob();        //! All MOb Registers = 0x00
     112:	20 76       	andi	r18, 0x60	; 96
     114:	20 32       	cpi	r18, 0x20	; 32
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    {
        Can_set_mob(u8_temp0);  //! Page index
     116:	31 f0       	breq	.+12     	; 0x124 <can_get_mob_status+0x24>
     118:	90 34       	cpi	r25, 0x40	; 64
     11a:	31 f0       	breq	.+12     	; 0x128 <can_get_mob_status+0x28>
     11c:	8f 71       	andi	r24, 0x1F	; 31
        Can_clear_mob();        //! All MOb Registers = 0x00
     11e:	08 95       	ret
     120:	8f ef       	ldi	r24, 0xFF	; 255
     122:	08 95       	ret
     124:	89 2f       	mov	r24, r25
     126:	08 95       	ret
     128:	89 2f       	mov	r24, r25
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     12a:	08 95       	ret

0000012c <can_get_data>:
     12c:	fc 01       	movw	r30, r24
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	aa ef       	ldi	r26, 0xFA	; 250
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	9c 91       	ld	r25, X
     136:	91 93       	st	Z+, r25
     138:	8f 5f       	subi	r24, 0xFF	; 255
     13a:	88 30       	cpi	r24, 0x08	; 8

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
        {
            Can_reset();
     13c:	d9 f7       	brne	.-10     	; 0x134 <can_get_data+0x8>
     13e:	08 95       	ret

00000140 <can_fixed_baudrate>:
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	80 93 d8 00 	sts	0x00D8, r24
     146:	82 e0       	ldi	r24, 0x02	; 2
     148:	80 93 e2 00 	sts	0x00E2, r24
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     14c:	8c e0       	ldi	r24, 0x0C	; 12
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     14e:	80 93 e3 00 	sts	0x00E3, r24
     152:	87 e3       	ldi	r24, 0x37	; 55
     154:	80 93 e4 00 	sts	0x00E4, r24
    {
        if (try_conf == 1)
        {
            Can_reset();
            conf_index++;
            ovrtim_flag=0;
     158:	81 e0       	ldi	r24, 0x01	; 1
                {
                    if (ovrtim_flag==0)
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
                        ovrtim_flag++;
     15a:	08 95       	ret

0000015c <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     15c:	0e 94 a0 00 	call	0x140	; 0x140 <can_fixed_baudrate>
     160:	88 23       	and	r24, r24
     162:	49 f0       	breq	.+18     	; 0x176 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     164:	0e 94 6d 00 	call	0xda	; 0xda <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     168:	e8 ed       	ldi	r30, 0xD8	; 216
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	80 81       	ld	r24, Z
     16e:	82 60       	ori	r24, 0x02	; 2
     170:	80 83       	st	Z, r24
    return (1);
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     176:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     178:	08 95       	ret

0000017a <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	1f 92       	push	r1
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     186:	11 96       	adiw	r26, 0x01	; 1
     188:	8c 91       	ld	r24, X
     18a:	11 97       	sbiw	r26, 0x01	; 1
     18c:	8c 30       	cpi	r24, 0x0C	; 12
     18e:	b1 f4       	brne	.+44     	; 0x1bc <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     190:	19 96       	adiw	r26, 0x09	; 9
     192:	8c 91       	ld	r24, X
     194:	19 97       	sbiw	r26, 0x09	; 9
     196:	80 36       	cpi	r24, 0x60	; 96
     198:	69 f4       	brne	.+26     	; 0x1b4 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     19a:	86 2f       	mov	r24, r22
     19c:	82 95       	swap	r24
     19e:	80 7f       	andi	r24, 0xF0	; 240
     1a0:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     1a4:	ef ee       	ldi	r30, 0xEF	; 239
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	8f 73       	andi	r24, 0x3F	; 63
     1ac:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     1ae:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     1b2:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     1b4:	19 96       	adiw	r26, 0x09	; 9
     1b6:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	07 c6       	rjmp	.+3086   	; 0xdca <__stack+0x4cb>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     1bc:	86 2f       	mov	r24, r22
     1be:	82 95       	swap	r24
     1c0:	80 7f       	andi	r24, 0xF0	; 240
     1c2:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     1c6:	80 91 ef 00 	lds	r24, 0x00EF
     1ca:	80 7c       	andi	r24, 0xC0	; 192
     1cc:	09 f0       	breq	.+2      	; 0x1d0 <can_cmd+0x56>
     1ce:	f9 c5       	rjmp	.+3058   	; 0xdc2 <__stack+0x4c3>
    {
      cmd->status = MOB_PENDING; 
     1d0:	80 e6       	ldi	r24, 0x60	; 96
     1d2:	19 96       	adiw	r26, 0x09	; 9
     1d4:	8c 93       	st	X, r24
     1d6:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     1d8:	6c 93       	st	X, r22
      Can_clear_mob();
     1da:	ee ee       	ldi	r30, 0xEE	; 238
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	11 92       	st	Z+, r1
     1e0:	e8 3f       	cpi	r30, 0xF8	; 248
     1e2:	f1 05       	cpc	r31, r1
     1e4:	e1 f7       	brne	.-8      	; 0x1de <can_cmd+0x64>
          
      switch (cmd->cmd)
     1e6:	11 96       	adiw	r26, 0x01	; 1
     1e8:	4c 91       	ld	r20, X
     1ea:	11 97       	sbiw	r26, 0x01	; 1
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	fa 01       	movw	r30, r20
     1f0:	31 97       	sbiw	r30, 0x01	; 1
     1f2:	eb 30       	cpi	r30, 0x0B	; 11
     1f4:	f1 05       	cpc	r31, r1
     1f6:	08 f0       	brcs	.+2      	; 0x1fa <can_cmd+0x80>
     1f8:	e0 c5       	rjmp	.+3008   	; 0xdba <__stack+0x4bb>
     1fa:	e2 5c       	subi	r30, 0xC2	; 194
     1fc:	ff 4f       	sbci	r31, 0xFF	; 255
     1fe:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     202:	16 96       	adiw	r26, 0x06	; 6
     204:	8c 91       	ld	r24, X
     206:	16 97       	sbiw	r26, 0x06	; 6
     208:	81 11       	cpse	r24, r1
     20a:	b7 c4       	rjmp	.+2414   	; 0xb7a <__stack+0x27b>
     20c:	c8 c4       	rjmp	.+2448   	; 0xb9e <__stack+0x29f>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     20e:	1b 96       	adiw	r26, 0x0b	; 11
     210:	8c 91       	ld	r24, X
     212:	1b 97       	sbiw	r26, 0x0b	; 11
     214:	88 23       	and	r24, r24
     216:	d9 f1       	breq	.+118    	; 0x28e <can_cmd+0x114>
     218:	14 96       	adiw	r26, 0x04	; 4
     21a:	9c 91       	ld	r25, X
     21c:	14 97       	sbiw	r26, 0x04	; 4
     21e:	92 95       	swap	r25
     220:	96 95       	lsr	r25
     222:	97 70       	andi	r25, 0x07	; 7
     224:	15 96       	adiw	r26, 0x05	; 5
     226:	8c 91       	ld	r24, X
     228:	15 97       	sbiw	r26, 0x05	; 5
     22a:	88 0f       	add	r24, r24
     22c:	88 0f       	add	r24, r24
     22e:	88 0f       	add	r24, r24
     230:	89 0f       	add	r24, r25
     232:	80 93 f3 00 	sts	0x00F3, r24
     236:	13 96       	adiw	r26, 0x03	; 3
     238:	9c 91       	ld	r25, X
     23a:	13 97       	sbiw	r26, 0x03	; 3
     23c:	92 95       	swap	r25
     23e:	96 95       	lsr	r25
     240:	97 70       	andi	r25, 0x07	; 7
     242:	14 96       	adiw	r26, 0x04	; 4
     244:	8c 91       	ld	r24, X
     246:	14 97       	sbiw	r26, 0x04	; 4
     248:	88 0f       	add	r24, r24
     24a:	88 0f       	add	r24, r24
     24c:	88 0f       	add	r24, r24
     24e:	89 0f       	add	r24, r25
     250:	80 93 f2 00 	sts	0x00F2, r24
     254:	12 96       	adiw	r26, 0x02	; 2
     256:	9c 91       	ld	r25, X
     258:	12 97       	sbiw	r26, 0x02	; 2
     25a:	92 95       	swap	r25
     25c:	96 95       	lsr	r25
     25e:	97 70       	andi	r25, 0x07	; 7
     260:	13 96       	adiw	r26, 0x03	; 3
     262:	8c 91       	ld	r24, X
     264:	13 97       	sbiw	r26, 0x03	; 3
     266:	88 0f       	add	r24, r24
     268:	88 0f       	add	r24, r24
     26a:	88 0f       	add	r24, r24
     26c:	89 0f       	add	r24, r25
     26e:	80 93 f1 00 	sts	0x00F1, r24
     272:	12 96       	adiw	r26, 0x02	; 2
     274:	8c 91       	ld	r24, X
     276:	12 97       	sbiw	r26, 0x02	; 2
     278:	88 0f       	add	r24, r24
     27a:	88 0f       	add	r24, r24
     27c:	88 0f       	add	r24, r24
     27e:	80 93 f0 00 	sts	0x00F0, r24
     282:	ef ee       	ldi	r30, 0xEF	; 239
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	80 61       	ori	r24, 0x10	; 16
     28a:	80 83       	st	Z, r24
     28c:	1c c0       	rjmp	.+56     	; 0x2c6 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     28e:	12 96       	adiw	r26, 0x02	; 2
     290:	8c 91       	ld	r24, X
     292:	12 97       	sbiw	r26, 0x02	; 2
     294:	86 95       	lsr	r24
     296:	86 95       	lsr	r24
     298:	86 95       	lsr	r24
     29a:	13 96       	adiw	r26, 0x03	; 3
     29c:	9c 91       	ld	r25, X
     29e:	13 97       	sbiw	r26, 0x03	; 3
     2a0:	20 e2       	ldi	r18, 0x20	; 32
     2a2:	92 9f       	mul	r25, r18
     2a4:	80 0d       	add	r24, r0
     2a6:	11 24       	eor	r1, r1
     2a8:	80 93 f3 00 	sts	0x00F3, r24
     2ac:	12 96       	adiw	r26, 0x02	; 2
     2ae:	8c 91       	ld	r24, X
     2b0:	12 97       	sbiw	r26, 0x02	; 2
     2b2:	82 95       	swap	r24
     2b4:	88 0f       	add	r24, r24
     2b6:	80 7e       	andi	r24, 0xE0	; 224
     2b8:	80 93 f2 00 	sts	0x00F2, r24
     2bc:	ef ee       	ldi	r30, 0xEF	; 239
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8f 7e       	andi	r24, 0xEF	; 239
     2c4:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     2c6:	16 96       	adiw	r26, 0x06	; 6
     2c8:	8c 91       	ld	r24, X
     2ca:	16 97       	sbiw	r26, 0x06	; 6
     2cc:	88 23       	and	r24, r24
     2ce:	91 f0       	breq	.+36     	; 0x2f4 <can_cmd+0x17a>
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	8a ef       	ldi	r24, 0xFA	; 250
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	17 96       	adiw	r26, 0x07	; 7
     2d8:	ed 91       	ld	r30, X+
     2da:	fc 91       	ld	r31, X
     2dc:	18 97       	sbiw	r26, 0x08	; 8
     2de:	e2 0f       	add	r30, r18
     2e0:	f1 1d       	adc	r31, r1
     2e2:	30 81       	ld	r19, Z
     2e4:	fc 01       	movw	r30, r24
     2e6:	30 83       	st	Z, r19
     2e8:	2f 5f       	subi	r18, 0xFF	; 255
     2ea:	16 96       	adiw	r26, 0x06	; 6
     2ec:	3c 91       	ld	r19, X
     2ee:	16 97       	sbiw	r26, 0x06	; 6
     2f0:	23 17       	cp	r18, r19
     2f2:	88 f3       	brcs	.-30     	; 0x2d6 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     2f4:	1a 96       	adiw	r26, 0x0a	; 10
     2f6:	8c 91       	ld	r24, X
     2f8:	1a 97       	sbiw	r26, 0x0a	; 10
     2fa:	88 23       	and	r24, r24
     2fc:	31 f0       	breq	.+12     	; 0x30a <can_cmd+0x190>
     2fe:	e0 ef       	ldi	r30, 0xF0	; 240
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	84 60       	ori	r24, 0x04	; 4
     306:	80 83       	st	Z, r24
     308:	05 c0       	rjmp	.+10     	; 0x314 <can_cmd+0x19a>
            else Can_clear_rtr();    
     30a:	e0 ef       	ldi	r30, 0xF0	; 240
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	8b 7f       	andi	r24, 0xFB	; 251
     312:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     314:	ef ee       	ldi	r30, 0xEF	; 239
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	90 81       	ld	r25, Z
     31a:	16 96       	adiw	r26, 0x06	; 6
     31c:	8c 91       	ld	r24, X
     31e:	89 2b       	or	r24, r25
     320:	80 83       	st	Z, r24
          Can_config_tx();
     322:	80 81       	ld	r24, Z
     324:	8f 73       	andi	r24, 0x3F	; 63
     326:	80 83       	st	Z, r24
     328:	80 81       	ld	r24, Z
     32a:	80 64       	ori	r24, 0x40	; 64
     32c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     32e:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     330:	4c c5       	rjmp	.+2712   	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     332:	1b 96       	adiw	r26, 0x0b	; 11
     334:	8c 91       	ld	r24, X
     336:	1b 97       	sbiw	r26, 0x0b	; 11
     338:	88 23       	and	r24, r24
     33a:	d9 f1       	breq	.+118    	; 0x3b2 <can_cmd+0x238>
     33c:	14 96       	adiw	r26, 0x04	; 4
     33e:	9c 91       	ld	r25, X
     340:	14 97       	sbiw	r26, 0x04	; 4
     342:	92 95       	swap	r25
     344:	96 95       	lsr	r25
     346:	97 70       	andi	r25, 0x07	; 7
     348:	15 96       	adiw	r26, 0x05	; 5
     34a:	8c 91       	ld	r24, X
     34c:	15 97       	sbiw	r26, 0x05	; 5
     34e:	88 0f       	add	r24, r24
     350:	88 0f       	add	r24, r24
     352:	88 0f       	add	r24, r24
     354:	89 0f       	add	r24, r25
     356:	80 93 f3 00 	sts	0x00F3, r24
     35a:	13 96       	adiw	r26, 0x03	; 3
     35c:	9c 91       	ld	r25, X
     35e:	13 97       	sbiw	r26, 0x03	; 3
     360:	92 95       	swap	r25
     362:	96 95       	lsr	r25
     364:	97 70       	andi	r25, 0x07	; 7
     366:	14 96       	adiw	r26, 0x04	; 4
     368:	8c 91       	ld	r24, X
     36a:	14 97       	sbiw	r26, 0x04	; 4
     36c:	88 0f       	add	r24, r24
     36e:	88 0f       	add	r24, r24
     370:	88 0f       	add	r24, r24
     372:	89 0f       	add	r24, r25
     374:	80 93 f2 00 	sts	0x00F2, r24
     378:	12 96       	adiw	r26, 0x02	; 2
     37a:	9c 91       	ld	r25, X
     37c:	12 97       	sbiw	r26, 0x02	; 2
     37e:	92 95       	swap	r25
     380:	96 95       	lsr	r25
     382:	97 70       	andi	r25, 0x07	; 7
     384:	13 96       	adiw	r26, 0x03	; 3
     386:	8c 91       	ld	r24, X
     388:	13 97       	sbiw	r26, 0x03	; 3
     38a:	88 0f       	add	r24, r24
     38c:	88 0f       	add	r24, r24
     38e:	88 0f       	add	r24, r24
     390:	89 0f       	add	r24, r25
     392:	80 93 f1 00 	sts	0x00F1, r24
     396:	12 96       	adiw	r26, 0x02	; 2
     398:	8c 91       	ld	r24, X
     39a:	12 97       	sbiw	r26, 0x02	; 2
     39c:	88 0f       	add	r24, r24
     39e:	88 0f       	add	r24, r24
     3a0:	88 0f       	add	r24, r24
     3a2:	80 93 f0 00 	sts	0x00F0, r24
     3a6:	ef ee       	ldi	r30, 0xEF	; 239
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	80 81       	ld	r24, Z
     3ac:	80 61       	ori	r24, 0x10	; 16
     3ae:	80 83       	st	Z, r24
     3b0:	1c c0       	rjmp	.+56     	; 0x3ea <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     3b2:	12 96       	adiw	r26, 0x02	; 2
     3b4:	8c 91       	ld	r24, X
     3b6:	12 97       	sbiw	r26, 0x02	; 2
     3b8:	86 95       	lsr	r24
     3ba:	86 95       	lsr	r24
     3bc:	86 95       	lsr	r24
     3be:	13 96       	adiw	r26, 0x03	; 3
     3c0:	9c 91       	ld	r25, X
     3c2:	13 97       	sbiw	r26, 0x03	; 3
     3c4:	f0 e2       	ldi	r31, 0x20	; 32
     3c6:	9f 9f       	mul	r25, r31
     3c8:	80 0d       	add	r24, r0
     3ca:	11 24       	eor	r1, r1
     3cc:	80 93 f3 00 	sts	0x00F3, r24
     3d0:	12 96       	adiw	r26, 0x02	; 2
     3d2:	8c 91       	ld	r24, X
     3d4:	12 97       	sbiw	r26, 0x02	; 2
     3d6:	82 95       	swap	r24
     3d8:	88 0f       	add	r24, r24
     3da:	80 7e       	andi	r24, 0xE0	; 224
     3dc:	80 93 f2 00 	sts	0x00F2, r24
     3e0:	ef ee       	ldi	r30, 0xEF	; 239
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	8f 7e       	andi	r24, 0xEF	; 239
     3e8:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     3ea:	16 96       	adiw	r26, 0x06	; 6
     3ec:	8c 91       	ld	r24, X
     3ee:	16 97       	sbiw	r26, 0x06	; 6
     3f0:	88 23       	and	r24, r24
     3f2:	91 f0       	breq	.+36     	; 0x418 <can_cmd+0x29e>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	8a ef       	ldi	r24, 0xFA	; 250
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	17 96       	adiw	r26, 0x07	; 7
     3fc:	ed 91       	ld	r30, X+
     3fe:	fc 91       	ld	r31, X
     400:	18 97       	sbiw	r26, 0x08	; 8
     402:	e2 0f       	add	r30, r18
     404:	f1 1d       	adc	r31, r1
     406:	30 81       	ld	r19, Z
     408:	fc 01       	movw	r30, r24
     40a:	30 83       	st	Z, r19
     40c:	2f 5f       	subi	r18, 0xFF	; 255
     40e:	16 96       	adiw	r26, 0x06	; 6
     410:	3c 91       	ld	r19, X
     412:	16 97       	sbiw	r26, 0x06	; 6
     414:	23 17       	cp	r18, r19
     416:	88 f3       	brcs	.-30     	; 0x3fa <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     418:	1a 96       	adiw	r26, 0x0a	; 10
     41a:	1c 92       	st	X, r1
     41c:	1a 97       	sbiw	r26, 0x0a	; 10
     41e:	e0 ef       	ldi	r30, 0xF0	; 240
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	80 81       	ld	r24, Z
     424:	8b 7f       	andi	r24, 0xFB	; 251
     426:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     428:	ef ee       	ldi	r30, 0xEF	; 239
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	90 81       	ld	r25, Z
     42e:	16 96       	adiw	r26, 0x06	; 6
     430:	8c 91       	ld	r24, X
     432:	89 2b       	or	r24, r25
     434:	80 83       	st	Z, r24
          Can_config_tx();
     436:	80 81       	ld	r24, Z
     438:	8f 73       	andi	r24, 0x3F	; 63
     43a:	80 83       	st	Z, r24
     43c:	80 81       	ld	r24, Z
     43e:	80 64       	ori	r24, 0x40	; 64
     440:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     442:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     444:	c2 c4       	rjmp	.+2436   	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     446:	1b 96       	adiw	r26, 0x0b	; 11
     448:	8c 91       	ld	r24, X
     44a:	1b 97       	sbiw	r26, 0x0b	; 11
     44c:	88 23       	and	r24, r24
     44e:	d9 f1       	breq	.+118    	; 0x4c6 <can_cmd+0x34c>
     450:	14 96       	adiw	r26, 0x04	; 4
     452:	9c 91       	ld	r25, X
     454:	14 97       	sbiw	r26, 0x04	; 4
     456:	92 95       	swap	r25
     458:	96 95       	lsr	r25
     45a:	97 70       	andi	r25, 0x07	; 7
     45c:	15 96       	adiw	r26, 0x05	; 5
     45e:	8c 91       	ld	r24, X
     460:	15 97       	sbiw	r26, 0x05	; 5
     462:	88 0f       	add	r24, r24
     464:	88 0f       	add	r24, r24
     466:	88 0f       	add	r24, r24
     468:	89 0f       	add	r24, r25
     46a:	80 93 f3 00 	sts	0x00F3, r24
     46e:	13 96       	adiw	r26, 0x03	; 3
     470:	9c 91       	ld	r25, X
     472:	13 97       	sbiw	r26, 0x03	; 3
     474:	92 95       	swap	r25
     476:	96 95       	lsr	r25
     478:	97 70       	andi	r25, 0x07	; 7
     47a:	14 96       	adiw	r26, 0x04	; 4
     47c:	8c 91       	ld	r24, X
     47e:	14 97       	sbiw	r26, 0x04	; 4
     480:	88 0f       	add	r24, r24
     482:	88 0f       	add	r24, r24
     484:	88 0f       	add	r24, r24
     486:	89 0f       	add	r24, r25
     488:	80 93 f2 00 	sts	0x00F2, r24
     48c:	12 96       	adiw	r26, 0x02	; 2
     48e:	9c 91       	ld	r25, X
     490:	12 97       	sbiw	r26, 0x02	; 2
     492:	92 95       	swap	r25
     494:	96 95       	lsr	r25
     496:	97 70       	andi	r25, 0x07	; 7
     498:	13 96       	adiw	r26, 0x03	; 3
     49a:	8c 91       	ld	r24, X
     49c:	13 97       	sbiw	r26, 0x03	; 3
     49e:	88 0f       	add	r24, r24
     4a0:	88 0f       	add	r24, r24
     4a2:	88 0f       	add	r24, r24
     4a4:	89 0f       	add	r24, r25
     4a6:	80 93 f1 00 	sts	0x00F1, r24
     4aa:	12 96       	adiw	r26, 0x02	; 2
     4ac:	8c 91       	ld	r24, X
     4ae:	12 97       	sbiw	r26, 0x02	; 2
     4b0:	88 0f       	add	r24, r24
     4b2:	88 0f       	add	r24, r24
     4b4:	88 0f       	add	r24, r24
     4b6:	80 93 f0 00 	sts	0x00F0, r24
     4ba:	ef ee       	ldi	r30, 0xEF	; 239
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	80 61       	ori	r24, 0x10	; 16
     4c2:	80 83       	st	Z, r24
     4c4:	1c c0       	rjmp	.+56     	; 0x4fe <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     4c6:	12 96       	adiw	r26, 0x02	; 2
     4c8:	8c 91       	ld	r24, X
     4ca:	12 97       	sbiw	r26, 0x02	; 2
     4cc:	86 95       	lsr	r24
     4ce:	86 95       	lsr	r24
     4d0:	86 95       	lsr	r24
     4d2:	13 96       	adiw	r26, 0x03	; 3
     4d4:	9c 91       	ld	r25, X
     4d6:	13 97       	sbiw	r26, 0x03	; 3
     4d8:	f0 e2       	ldi	r31, 0x20	; 32
     4da:	9f 9f       	mul	r25, r31
     4dc:	80 0d       	add	r24, r0
     4de:	11 24       	eor	r1, r1
     4e0:	80 93 f3 00 	sts	0x00F3, r24
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	8c 91       	ld	r24, X
     4e8:	12 97       	sbiw	r26, 0x02	; 2
     4ea:	82 95       	swap	r24
     4ec:	88 0f       	add	r24, r24
     4ee:	80 7e       	andi	r24, 0xE0	; 224
     4f0:	80 93 f2 00 	sts	0x00F2, r24
     4f4:	ef ee       	ldi	r30, 0xEF	; 239
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	8f 7e       	andi	r24, 0xEF	; 239
     4fc:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	1a 96       	adiw	r26, 0x0a	; 10
     502:	8c 93       	st	X, r24
     504:	1a 97       	sbiw	r26, 0x0a	; 10
     506:	e0 ef       	ldi	r30, 0xF0	; 240
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	84 60       	ori	r24, 0x04	; 4
     50e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     510:	ef ee       	ldi	r30, 0xEF	; 239
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	90 81       	ld	r25, Z
     516:	16 96       	adiw	r26, 0x06	; 6
     518:	8c 91       	ld	r24, X
     51a:	89 2b       	or	r24, r25
     51c:	80 83       	st	Z, r24
          Can_config_tx();
     51e:	80 81       	ld	r24, Z
     520:	8f 73       	andi	r24, 0x3F	; 63
     522:	80 83       	st	Z, r24
     524:	80 81       	ld	r24, Z
     526:	80 64       	ori	r24, 0x40	; 64
     528:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     52a:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     52c:	4e c4       	rjmp	.+2204   	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     52e:	19 82       	std	Y+1, r1	; 0x01
     530:	9b 81       	ldd	r25, Y+3	; 0x03
     532:	92 95       	swap	r25
     534:	96 95       	lsr	r25
     536:	97 70       	andi	r25, 0x07	; 7
     538:	8c 81       	ldd	r24, Y+4	; 0x04
     53a:	88 0f       	add	r24, r24
     53c:	88 0f       	add	r24, r24
     53e:	88 0f       	add	r24, r24
     540:	89 0f       	add	r24, r25
     542:	80 93 f7 00 	sts	0x00F7, r24
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	92 95       	swap	r25
     54a:	96 95       	lsr	r25
     54c:	97 70       	andi	r25, 0x07	; 7
     54e:	8b 81       	ldd	r24, Y+3	; 0x03
     550:	88 0f       	add	r24, r24
     552:	88 0f       	add	r24, r24
     554:	88 0f       	add	r24, r24
     556:	89 0f       	add	r24, r25
     558:	80 93 f6 00 	sts	0x00F6, r24
     55c:	99 81       	ldd	r25, Y+1	; 0x01
     55e:	92 95       	swap	r25
     560:	96 95       	lsr	r25
     562:	97 70       	andi	r25, 0x07	; 7
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	88 0f       	add	r24, r24
     568:	88 0f       	add	r24, r24
     56a:	88 0f       	add	r24, r24
     56c:	89 0f       	add	r24, r25
     56e:	80 93 f5 00 	sts	0x00F5, r24
     572:	29 81       	ldd	r18, Y+1	; 0x01
     574:	22 0f       	add	r18, r18
     576:	22 0f       	add	r18, r18
     578:	22 0f       	add	r18, r18
     57a:	84 ef       	ldi	r24, 0xF4	; 244
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	fc 01       	movw	r30, r24
     580:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     582:	ef ee       	ldi	r30, 0xEF	; 239
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	30 81       	ld	r19, Z
     588:	16 96       	adiw	r26, 0x06	; 6
     58a:	2c 91       	ld	r18, X
     58c:	23 2b       	or	r18, r19
     58e:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     590:	dc 01       	movw	r26, r24
     592:	2c 91       	ld	r18, X
     594:	2b 7f       	andi	r18, 0xFB	; 251
     596:	2c 93       	st	X, r18
          Can_clear_idemsk();
     598:	2c 91       	ld	r18, X
     59a:	2e 7f       	andi	r18, 0xFE	; 254
     59c:	2c 93       	st	X, r18
          Can_config_rx();       
     59e:	80 81       	ld	r24, Z
     5a0:	8f 73       	andi	r24, 0x3F	; 63
     5a2:	80 83       	st	Z, r24
     5a4:	80 81       	ld	r24, Z
     5a6:	80 68       	ori	r24, 0x80	; 128
     5a8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     5aa:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     5ac:	0e c4       	rjmp	.+2076   	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	82 95       	swap	r24
     5b6:	88 0f       	add	r24, r24
     5b8:	80 7e       	andi	r24, 0xE0	; 224
     5ba:	81 5e       	subi	r24, 0xE1	; 225
     5bc:	27 ef       	ldi	r18, 0xF7	; 247
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	f9 01       	movw	r30, r18
     5c2:	80 83       	st	Z, r24
     5c4:	49 81       	ldd	r20, Y+1	; 0x01
     5c6:	42 95       	swap	r20
     5c8:	44 0f       	add	r20, r20
     5ca:	40 7e       	andi	r20, 0xE0	; 224
     5cc:	86 ef       	ldi	r24, 0xF6	; 246
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	fc 01       	movw	r30, r24
     5d2:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     5d4:	12 96       	adiw	r26, 0x02	; 2
     5d6:	4c 91       	ld	r20, X
     5d8:	12 97       	sbiw	r26, 0x02	; 2
     5da:	46 95       	lsr	r20
     5dc:	46 95       	lsr	r20
     5de:	46 95       	lsr	r20
     5e0:	13 96       	adiw	r26, 0x03	; 3
     5e2:	5c 91       	ld	r21, X
     5e4:	13 97       	sbiw	r26, 0x03	; 3
     5e6:	f0 e2       	ldi	r31, 0x20	; 32
     5e8:	5f 9f       	mul	r21, r31
     5ea:	40 0d       	add	r20, r0
     5ec:	11 24       	eor	r1, r1
     5ee:	40 93 f3 00 	sts	0x00F3, r20
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	4c 91       	ld	r20, X
     5f6:	12 97       	sbiw	r26, 0x02	; 2
     5f8:	42 95       	swap	r20
     5fa:	44 0f       	add	r20, r20
     5fc:	40 7e       	andi	r20, 0xE0	; 224
     5fe:	40 93 f2 00 	sts	0x00F2, r20
     602:	6f ee       	ldi	r22, 0xEF	; 239
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	fb 01       	movw	r30, r22
     608:	40 81       	ld	r20, Z
     60a:	4f 7e       	andi	r20, 0xEF	; 239
     60c:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     60e:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     610:	5b 81       	ldd	r21, Y+3	; 0x03
     612:	52 95       	swap	r21
     614:	56 95       	lsr	r21
     616:	57 70       	andi	r21, 0x07	; 7
     618:	4c 81       	ldd	r20, Y+4	; 0x04
     61a:	44 0f       	add	r20, r20
     61c:	44 0f       	add	r20, r20
     61e:	44 0f       	add	r20, r20
     620:	45 0f       	add	r20, r21
     622:	f9 01       	movw	r30, r18
     624:	40 83       	st	Z, r20
     626:	3a 81       	ldd	r19, Y+2	; 0x02
     628:	32 95       	swap	r19
     62a:	36 95       	lsr	r19
     62c:	37 70       	andi	r19, 0x07	; 7
     62e:	2b 81       	ldd	r18, Y+3	; 0x03
     630:	22 0f       	add	r18, r18
     632:	22 0f       	add	r18, r18
     634:	22 0f       	add	r18, r18
     636:	23 0f       	add	r18, r19
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
     63c:	99 81       	ldd	r25, Y+1	; 0x01
     63e:	92 95       	swap	r25
     640:	96 95       	lsr	r25
     642:	97 70       	andi	r25, 0x07	; 7
     644:	8a 81       	ldd	r24, Y+2	; 0x02
     646:	88 0f       	add	r24, r24
     648:	88 0f       	add	r24, r24
     64a:	88 0f       	add	r24, r24
     64c:	89 0f       	add	r24, r25
     64e:	80 93 f5 00 	sts	0x00F5, r24
     652:	29 81       	ldd	r18, Y+1	; 0x01
     654:	22 0f       	add	r18, r18
     656:	22 0f       	add	r18, r18
     658:	22 0f       	add	r18, r18
     65a:	84 ef       	ldi	r24, 0xF4	; 244
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     662:	fb 01       	movw	r30, r22
     664:	30 81       	ld	r19, Z
     666:	16 96       	adiw	r26, 0x06	; 6
     668:	2c 91       	ld	r18, X
     66a:	16 97       	sbiw	r26, 0x06	; 6
     66c:	23 2b       	or	r18, r19
     66e:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     670:	1a 96       	adiw	r26, 0x0a	; 10
     672:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     674:	dc 01       	movw	r26, r24
     676:	2c 91       	ld	r18, X
     678:	24 60       	ori	r18, 0x04	; 4
     67a:	2c 93       	st	X, r18
		  Can_clear_rtr();
     67c:	a0 ef       	ldi	r26, 0xF0	; 240
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	2c 91       	ld	r18, X
     682:	2b 7f       	andi	r18, 0xFB	; 251
     684:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     686:	20 81       	ld	r18, Z
     688:	2f 7e       	andi	r18, 0xEF	; 239
     68a:	20 83       	st	Z, r18
          Can_clear_idemsk();
     68c:	fc 01       	movw	r30, r24
     68e:	20 81       	ld	r18, Z
     690:	2e 7f       	andi	r18, 0xFE	; 254
     692:	20 83       	st	Z, r18
          Can_config_rx();       
     694:	db 01       	movw	r26, r22
     696:	8c 91       	ld	r24, X
     698:	8f 73       	andi	r24, 0x3F	; 63
     69a:	8c 93       	st	X, r24
     69c:	8c 91       	ld	r24, X
     69e:	80 68       	ori	r24, 0x80	; 128
     6a0:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     6a2:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     6a4:	92 c3       	rjmp	.+1828   	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	82 95       	swap	r24
     6ae:	88 0f       	add	r24, r24
     6b0:	80 7e       	andi	r24, 0xE0	; 224
     6b2:	81 5e       	subi	r24, 0xE1	; 225
     6b4:	27 ef       	ldi	r18, 0xF7	; 247
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	80 83       	st	Z, r24
     6bc:	49 81       	ldd	r20, Y+1	; 0x01
     6be:	42 95       	swap	r20
     6c0:	44 0f       	add	r20, r20
     6c2:	40 7e       	andi	r20, 0xE0	; 224
     6c4:	86 ef       	ldi	r24, 0xF6	; 246
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	fc 01       	movw	r30, r24
     6ca:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     6cc:	12 96       	adiw	r26, 0x02	; 2
     6ce:	4c 91       	ld	r20, X
     6d0:	12 97       	sbiw	r26, 0x02	; 2
     6d2:	46 95       	lsr	r20
     6d4:	46 95       	lsr	r20
     6d6:	46 95       	lsr	r20
     6d8:	13 96       	adiw	r26, 0x03	; 3
     6da:	5c 91       	ld	r21, X
     6dc:	13 97       	sbiw	r26, 0x03	; 3
     6de:	f0 e2       	ldi	r31, 0x20	; 32
     6e0:	5f 9f       	mul	r21, r31
     6e2:	40 0d       	add	r20, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	40 93 f3 00 	sts	0x00F3, r20
     6ea:	12 96       	adiw	r26, 0x02	; 2
     6ec:	4c 91       	ld	r20, X
     6ee:	12 97       	sbiw	r26, 0x02	; 2
     6f0:	42 95       	swap	r20
     6f2:	44 0f       	add	r20, r20
     6f4:	40 7e       	andi	r20, 0xE0	; 224
     6f6:	40 93 f2 00 	sts	0x00F2, r20
     6fa:	6f ee       	ldi	r22, 0xEF	; 239
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	fb 01       	movw	r30, r22
     700:	40 81       	ld	r20, Z
     702:	4f 7e       	andi	r20, 0xEF	; 239
     704:	40 83       	st	Z, r20
		
          u8_temp=0; 
     706:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     708:	5b 81       	ldd	r21, Y+3	; 0x03
     70a:	52 95       	swap	r21
     70c:	56 95       	lsr	r21
     70e:	57 70       	andi	r21, 0x07	; 7
     710:	4c 81       	ldd	r20, Y+4	; 0x04
     712:	44 0f       	add	r20, r20
     714:	44 0f       	add	r20, r20
     716:	44 0f       	add	r20, r20
     718:	45 0f       	add	r20, r21
     71a:	f9 01       	movw	r30, r18
     71c:	40 83       	st	Z, r20
     71e:	3a 81       	ldd	r19, Y+2	; 0x02
     720:	32 95       	swap	r19
     722:	36 95       	lsr	r19
     724:	37 70       	andi	r19, 0x07	; 7
     726:	2b 81       	ldd	r18, Y+3	; 0x03
     728:	22 0f       	add	r18, r18
     72a:	22 0f       	add	r18, r18
     72c:	22 0f       	add	r18, r18
     72e:	23 0f       	add	r18, r19
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
     734:	99 81       	ldd	r25, Y+1	; 0x01
     736:	92 95       	swap	r25
     738:	96 95       	lsr	r25
     73a:	97 70       	andi	r25, 0x07	; 7
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	88 0f       	add	r24, r24
     740:	88 0f       	add	r24, r24
     742:	88 0f       	add	r24, r24
     744:	89 0f       	add	r24, r25
     746:	80 93 f5 00 	sts	0x00F5, r24
     74a:	29 81       	ldd	r18, Y+1	; 0x01
     74c:	22 0f       	add	r18, r18
     74e:	22 0f       	add	r18, r18
     750:	22 0f       	add	r18, r18
     752:	84 ef       	ldi	r24, 0xF4	; 244
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	fc 01       	movw	r30, r24
     758:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     75a:	fb 01       	movw	r30, r22
     75c:	30 81       	ld	r19, Z
     75e:	16 96       	adiw	r26, 0x06	; 6
     760:	2c 91       	ld	r18, X
     762:	16 97       	sbiw	r26, 0x06	; 6
     764:	23 2b       	or	r18, r19
     766:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     768:	21 e0       	ldi	r18, 0x01	; 1
     76a:	1a 96       	adiw	r26, 0x0a	; 10
     76c:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     76e:	dc 01       	movw	r26, r24
     770:	2c 91       	ld	r18, X
     772:	24 60       	ori	r18, 0x04	; 4
     774:	2c 93       	st	X, r18
		  Can_set_rtr();
     776:	a0 ef       	ldi	r26, 0xF0	; 240
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	2c 91       	ld	r18, X
     77c:	24 60       	ori	r18, 0x04	; 4
     77e:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     780:	20 81       	ld	r18, Z
     782:	2f 7d       	andi	r18, 0xDF	; 223
     784:	20 83       	st	Z, r18
          Can_clear_idemsk();
     786:	fc 01       	movw	r30, r24
     788:	20 81       	ld	r18, Z
     78a:	2e 7f       	andi	r18, 0xFE	; 254
     78c:	20 83       	st	Z, r18
          Can_config_rx();       
     78e:	db 01       	movw	r26, r22
     790:	8c 91       	ld	r24, X
     792:	8f 73       	andi	r24, 0x3F	; 63
     794:	8c 93       	st	X, r24
     796:	8c 91       	ld	r24, X
     798:	80 68       	ori	r24, 0x80	; 128
     79a:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     79c:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     79e:	15 c3       	rjmp	.+1578   	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7a0:	1b 96       	adiw	r26, 0x0b	; 11
     7a2:	8c 91       	ld	r24, X
     7a4:	1b 97       	sbiw	r26, 0x0b	; 11
     7a6:	88 23       	and	r24, r24
     7a8:	d9 f1       	breq	.+118    	; 0x820 <can_cmd+0x6a6>
     7aa:	14 96       	adiw	r26, 0x04	; 4
     7ac:	9c 91       	ld	r25, X
     7ae:	14 97       	sbiw	r26, 0x04	; 4
     7b0:	92 95       	swap	r25
     7b2:	96 95       	lsr	r25
     7b4:	97 70       	andi	r25, 0x07	; 7
     7b6:	15 96       	adiw	r26, 0x05	; 5
     7b8:	8c 91       	ld	r24, X
     7ba:	15 97       	sbiw	r26, 0x05	; 5
     7bc:	88 0f       	add	r24, r24
     7be:	88 0f       	add	r24, r24
     7c0:	88 0f       	add	r24, r24
     7c2:	89 0f       	add	r24, r25
     7c4:	80 93 f3 00 	sts	0x00F3, r24
     7c8:	13 96       	adiw	r26, 0x03	; 3
     7ca:	9c 91       	ld	r25, X
     7cc:	13 97       	sbiw	r26, 0x03	; 3
     7ce:	92 95       	swap	r25
     7d0:	96 95       	lsr	r25
     7d2:	97 70       	andi	r25, 0x07	; 7
     7d4:	14 96       	adiw	r26, 0x04	; 4
     7d6:	8c 91       	ld	r24, X
     7d8:	14 97       	sbiw	r26, 0x04	; 4
     7da:	88 0f       	add	r24, r24
     7dc:	88 0f       	add	r24, r24
     7de:	88 0f       	add	r24, r24
     7e0:	89 0f       	add	r24, r25
     7e2:	80 93 f2 00 	sts	0x00F2, r24
     7e6:	12 96       	adiw	r26, 0x02	; 2
     7e8:	9c 91       	ld	r25, X
     7ea:	12 97       	sbiw	r26, 0x02	; 2
     7ec:	92 95       	swap	r25
     7ee:	96 95       	lsr	r25
     7f0:	97 70       	andi	r25, 0x07	; 7
     7f2:	13 96       	adiw	r26, 0x03	; 3
     7f4:	8c 91       	ld	r24, X
     7f6:	13 97       	sbiw	r26, 0x03	; 3
     7f8:	88 0f       	add	r24, r24
     7fa:	88 0f       	add	r24, r24
     7fc:	88 0f       	add	r24, r24
     7fe:	89 0f       	add	r24, r25
     800:	80 93 f1 00 	sts	0x00F1, r24
     804:	12 96       	adiw	r26, 0x02	; 2
     806:	8c 91       	ld	r24, X
     808:	12 97       	sbiw	r26, 0x02	; 2
     80a:	88 0f       	add	r24, r24
     80c:	88 0f       	add	r24, r24
     80e:	88 0f       	add	r24, r24
     810:	80 93 f0 00 	sts	0x00F0, r24
     814:	ef ee       	ldi	r30, 0xEF	; 239
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	80 61       	ori	r24, 0x10	; 16
     81c:	80 83       	st	Z, r24
     81e:	1c c0       	rjmp	.+56     	; 0x858 <can_cmd+0x6de>
          else              { Can_set_std_id(cmd->id.std);}
     820:	12 96       	adiw	r26, 0x02	; 2
     822:	8c 91       	ld	r24, X
     824:	12 97       	sbiw	r26, 0x02	; 2
     826:	86 95       	lsr	r24
     828:	86 95       	lsr	r24
     82a:	86 95       	lsr	r24
     82c:	13 96       	adiw	r26, 0x03	; 3
     82e:	9c 91       	ld	r25, X
     830:	13 97       	sbiw	r26, 0x03	; 3
     832:	e0 e2       	ldi	r30, 0x20	; 32
     834:	9e 9f       	mul	r25, r30
     836:	80 0d       	add	r24, r0
     838:	11 24       	eor	r1, r1
     83a:	80 93 f3 00 	sts	0x00F3, r24
     83e:	12 96       	adiw	r26, 0x02	; 2
     840:	8c 91       	ld	r24, X
     842:	12 97       	sbiw	r26, 0x02	; 2
     844:	82 95       	swap	r24
     846:	88 0f       	add	r24, r24
     848:	80 7e       	andi	r24, 0xE0	; 224
     84a:	80 93 f2 00 	sts	0x00F2, r24
     84e:	ef ee       	ldi	r30, 0xEF	; 239
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	8f 7e       	andi	r24, 0xEF	; 239
     856:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	89 83       	std	Y+1, r24	; 0x01
     85c:	9b 81       	ldd	r25, Y+3	; 0x03
     85e:	92 95       	swap	r25
     860:	96 95       	lsr	r25
     862:	97 70       	andi	r25, 0x07	; 7
     864:	8c 81       	ldd	r24, Y+4	; 0x04
     866:	88 0f       	add	r24, r24
     868:	88 0f       	add	r24, r24
     86a:	88 0f       	add	r24, r24
     86c:	89 0f       	add	r24, r25
     86e:	80 93 f7 00 	sts	0x00F7, r24
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	92 95       	swap	r25
     876:	96 95       	lsr	r25
     878:	97 70       	andi	r25, 0x07	; 7
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	88 0f       	add	r24, r24
     87e:	88 0f       	add	r24, r24
     880:	88 0f       	add	r24, r24
     882:	89 0f       	add	r24, r25
     884:	80 93 f6 00 	sts	0x00F6, r24
     888:	99 81       	ldd	r25, Y+1	; 0x01
     88a:	92 95       	swap	r25
     88c:	96 95       	lsr	r25
     88e:	97 70       	andi	r25, 0x07	; 7
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	88 0f       	add	r24, r24
     894:	88 0f       	add	r24, r24
     896:	88 0f       	add	r24, r24
     898:	89 0f       	add	r24, r25
     89a:	80 93 f5 00 	sts	0x00F5, r24
     89e:	29 81       	ldd	r18, Y+1	; 0x01
     8a0:	22 0f       	add	r18, r18
     8a2:	22 0f       	add	r18, r18
     8a4:	22 0f       	add	r18, r18
     8a6:	84 ef       	ldi	r24, 0xF4	; 244
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     8ae:	ef ee       	ldi	r30, 0xEF	; 239
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	30 81       	ld	r19, Z
     8b4:	16 96       	adiw	r26, 0x06	; 6
     8b6:	2c 91       	ld	r18, X
     8b8:	23 2b       	or	r18, r19
     8ba:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     8bc:	dc 01       	movw	r26, r24
     8be:	2c 91       	ld	r18, X
     8c0:	2b 7f       	andi	r18, 0xFB	; 251
     8c2:	2c 93       	st	X, r18
          Can_set_idemsk();
     8c4:	2c 91       	ld	r18, X
     8c6:	21 60       	ori	r18, 0x01	; 1
     8c8:	2c 93       	st	X, r18
          Can_config_rx();       
     8ca:	80 81       	ld	r24, Z
     8cc:	8f 73       	andi	r24, 0x3F	; 63
     8ce:	80 83       	st	Z, r24
     8d0:	80 81       	ld	r24, Z
     8d2:	80 68       	ori	r24, 0x80	; 128
     8d4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     8d8:	78 c2       	rjmp	.+1264   	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8da:	1b 96       	adiw	r26, 0x0b	; 11
     8dc:	8c 91       	ld	r24, X
     8de:	1b 97       	sbiw	r26, 0x0b	; 11
     8e0:	88 23       	and	r24, r24
     8e2:	d9 f1       	breq	.+118    	; 0x95a <__stack+0x5b>
     8e4:	14 96       	adiw	r26, 0x04	; 4
     8e6:	9c 91       	ld	r25, X
     8e8:	14 97       	sbiw	r26, 0x04	; 4
     8ea:	92 95       	swap	r25
     8ec:	96 95       	lsr	r25
     8ee:	97 70       	andi	r25, 0x07	; 7
     8f0:	15 96       	adiw	r26, 0x05	; 5
     8f2:	8c 91       	ld	r24, X
     8f4:	15 97       	sbiw	r26, 0x05	; 5
     8f6:	88 0f       	add	r24, r24
     8f8:	88 0f       	add	r24, r24
     8fa:	88 0f       	add	r24, r24
     8fc:	89 0f       	add	r24, r25
     8fe:	80 93 f3 00 	sts	0x00F3, r24
     902:	13 96       	adiw	r26, 0x03	; 3
     904:	9c 91       	ld	r25, X
     906:	13 97       	sbiw	r26, 0x03	; 3
     908:	92 95       	swap	r25
     90a:	96 95       	lsr	r25
     90c:	97 70       	andi	r25, 0x07	; 7
     90e:	14 96       	adiw	r26, 0x04	; 4
     910:	8c 91       	ld	r24, X
     912:	14 97       	sbiw	r26, 0x04	; 4
     914:	88 0f       	add	r24, r24
     916:	88 0f       	add	r24, r24
     918:	88 0f       	add	r24, r24
     91a:	89 0f       	add	r24, r25
     91c:	80 93 f2 00 	sts	0x00F2, r24
     920:	12 96       	adiw	r26, 0x02	; 2
     922:	9c 91       	ld	r25, X
     924:	12 97       	sbiw	r26, 0x02	; 2
     926:	92 95       	swap	r25
     928:	96 95       	lsr	r25
     92a:	97 70       	andi	r25, 0x07	; 7
     92c:	13 96       	adiw	r26, 0x03	; 3
     92e:	8c 91       	ld	r24, X
     930:	13 97       	sbiw	r26, 0x03	; 3
     932:	88 0f       	add	r24, r24
     934:	88 0f       	add	r24, r24
     936:	88 0f       	add	r24, r24
     938:	89 0f       	add	r24, r25
     93a:	80 93 f1 00 	sts	0x00F1, r24
     93e:	12 96       	adiw	r26, 0x02	; 2
     940:	8c 91       	ld	r24, X
     942:	12 97       	sbiw	r26, 0x02	; 2
     944:	88 0f       	add	r24, r24
     946:	88 0f       	add	r24, r24
     948:	88 0f       	add	r24, r24
     94a:	80 93 f0 00 	sts	0x00F0, r24
     94e:	ef ee       	ldi	r30, 0xEF	; 239
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	80 61       	ori	r24, 0x10	; 16
     956:	80 83       	st	Z, r24
     958:	1c c0       	rjmp	.+56     	; 0x992 <__stack+0x93>
          else              { Can_set_std_id(cmd->id.std);}
     95a:	12 96       	adiw	r26, 0x02	; 2
     95c:	8c 91       	ld	r24, X
     95e:	12 97       	sbiw	r26, 0x02	; 2
     960:	86 95       	lsr	r24
     962:	86 95       	lsr	r24
     964:	86 95       	lsr	r24
     966:	13 96       	adiw	r26, 0x03	; 3
     968:	9c 91       	ld	r25, X
     96a:	13 97       	sbiw	r26, 0x03	; 3
     96c:	e0 e2       	ldi	r30, 0x20	; 32
     96e:	9e 9f       	mul	r25, r30
     970:	80 0d       	add	r24, r0
     972:	11 24       	eor	r1, r1
     974:	80 93 f3 00 	sts	0x00F3, r24
     978:	12 96       	adiw	r26, 0x02	; 2
     97a:	8c 91       	ld	r24, X
     97c:	12 97       	sbiw	r26, 0x02	; 2
     97e:	82 95       	swap	r24
     980:	88 0f       	add	r24, r24
     982:	80 7e       	andi	r24, 0xE0	; 224
     984:	80 93 f2 00 	sts	0x00F2, r24
     988:	ef ee       	ldi	r30, 0xEF	; 239
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	80 81       	ld	r24, Z
     98e:	8f 7e       	andi	r24, 0xEF	; 239
     990:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	9b 81       	ldd	r25, Y+3	; 0x03
     998:	92 95       	swap	r25
     99a:	96 95       	lsr	r25
     99c:	97 70       	andi	r25, 0x07	; 7
     99e:	8c 81       	ldd	r24, Y+4	; 0x04
     9a0:	88 0f       	add	r24, r24
     9a2:	88 0f       	add	r24, r24
     9a4:	88 0f       	add	r24, r24
     9a6:	89 0f       	add	r24, r25
     9a8:	80 93 f7 00 	sts	0x00F7, r24
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	92 95       	swap	r25
     9b0:	96 95       	lsr	r25
     9b2:	97 70       	andi	r25, 0x07	; 7
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	88 0f       	add	r24, r24
     9b8:	88 0f       	add	r24, r24
     9ba:	88 0f       	add	r24, r24
     9bc:	89 0f       	add	r24, r25
     9be:	80 93 f6 00 	sts	0x00F6, r24
     9c2:	99 81       	ldd	r25, Y+1	; 0x01
     9c4:	92 95       	swap	r25
     9c6:	96 95       	lsr	r25
     9c8:	97 70       	andi	r25, 0x07	; 7
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	88 0f       	add	r24, r24
     9ce:	88 0f       	add	r24, r24
     9d0:	88 0f       	add	r24, r24
     9d2:	89 0f       	add	r24, r25
     9d4:	80 93 f5 00 	sts	0x00F5, r24
     9d8:	29 81       	ldd	r18, Y+1	; 0x01
     9da:	22 0f       	add	r18, r18
     9dc:	22 0f       	add	r18, r18
     9de:	22 0f       	add	r18, r18
     9e0:	84 ef       	ldi	r24, 0xF4	; 244
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     9e8:	ef ee       	ldi	r30, 0xEF	; 239
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	30 81       	ld	r19, Z
     9ee:	16 96       	adiw	r26, 0x06	; 6
     9f0:	2c 91       	ld	r18, X
     9f2:	16 97       	sbiw	r26, 0x06	; 6
     9f4:	23 2b       	or	r18, r19
     9f6:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     9f8:	1a 96       	adiw	r26, 0x0a	; 10
     9fa:	1c 92       	st	X, r1
     9fc:	dc 01       	movw	r26, r24
     9fe:	2c 91       	ld	r18, X
     a00:	24 60       	ori	r18, 0x04	; 4
     a02:	2c 93       	st	X, r18
     a04:	a0 ef       	ldi	r26, 0xF0	; 240
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	2c 91       	ld	r18, X
     a0a:	2b 7f       	andi	r18, 0xFB	; 251
     a0c:	2c 93       	st	X, r18
          Can_set_idemsk();
     a0e:	dc 01       	movw	r26, r24
     a10:	2c 91       	ld	r18, X
     a12:	21 60       	ori	r18, 0x01	; 1
     a14:	2c 93       	st	X, r18
          Can_config_rx();       
     a16:	80 81       	ld	r24, Z
     a18:	8f 73       	andi	r24, 0x3F	; 63
     a1a:	80 83       	st	Z, r24
     a1c:	80 81       	ld	r24, Z
     a1e:	80 68       	ori	r24, 0x80	; 128
     a20:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a22:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     a24:	d2 c1       	rjmp	.+932    	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a26:	1b 96       	adiw	r26, 0x0b	; 11
     a28:	8c 91       	ld	r24, X
     a2a:	1b 97       	sbiw	r26, 0x0b	; 11
     a2c:	88 23       	and	r24, r24
     a2e:	d9 f1       	breq	.+118    	; 0xaa6 <__stack+0x1a7>
     a30:	14 96       	adiw	r26, 0x04	; 4
     a32:	9c 91       	ld	r25, X
     a34:	14 97       	sbiw	r26, 0x04	; 4
     a36:	92 95       	swap	r25
     a38:	96 95       	lsr	r25
     a3a:	97 70       	andi	r25, 0x07	; 7
     a3c:	15 96       	adiw	r26, 0x05	; 5
     a3e:	8c 91       	ld	r24, X
     a40:	15 97       	sbiw	r26, 0x05	; 5
     a42:	88 0f       	add	r24, r24
     a44:	88 0f       	add	r24, r24
     a46:	88 0f       	add	r24, r24
     a48:	89 0f       	add	r24, r25
     a4a:	80 93 f3 00 	sts	0x00F3, r24
     a4e:	13 96       	adiw	r26, 0x03	; 3
     a50:	9c 91       	ld	r25, X
     a52:	13 97       	sbiw	r26, 0x03	; 3
     a54:	92 95       	swap	r25
     a56:	96 95       	lsr	r25
     a58:	97 70       	andi	r25, 0x07	; 7
     a5a:	14 96       	adiw	r26, 0x04	; 4
     a5c:	8c 91       	ld	r24, X
     a5e:	14 97       	sbiw	r26, 0x04	; 4
     a60:	88 0f       	add	r24, r24
     a62:	88 0f       	add	r24, r24
     a64:	88 0f       	add	r24, r24
     a66:	89 0f       	add	r24, r25
     a68:	80 93 f2 00 	sts	0x00F2, r24
     a6c:	12 96       	adiw	r26, 0x02	; 2
     a6e:	9c 91       	ld	r25, X
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	92 95       	swap	r25
     a74:	96 95       	lsr	r25
     a76:	97 70       	andi	r25, 0x07	; 7
     a78:	13 96       	adiw	r26, 0x03	; 3
     a7a:	8c 91       	ld	r24, X
     a7c:	13 97       	sbiw	r26, 0x03	; 3
     a7e:	88 0f       	add	r24, r24
     a80:	88 0f       	add	r24, r24
     a82:	88 0f       	add	r24, r24
     a84:	89 0f       	add	r24, r25
     a86:	80 93 f1 00 	sts	0x00F1, r24
     a8a:	12 96       	adiw	r26, 0x02	; 2
     a8c:	8c 91       	ld	r24, X
     a8e:	12 97       	sbiw	r26, 0x02	; 2
     a90:	88 0f       	add	r24, r24
     a92:	88 0f       	add	r24, r24
     a94:	88 0f       	add	r24, r24
     a96:	80 93 f0 00 	sts	0x00F0, r24
     a9a:	ef ee       	ldi	r30, 0xEF	; 239
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	80 61       	ori	r24, 0x10	; 16
     aa2:	80 83       	st	Z, r24
     aa4:	1c c0       	rjmp	.+56     	; 0xade <__stack+0x1df>
          else              { Can_set_std_id(cmd->id.std);}
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	8c 91       	ld	r24, X
     aaa:	12 97       	sbiw	r26, 0x02	; 2
     aac:	86 95       	lsr	r24
     aae:	86 95       	lsr	r24
     ab0:	86 95       	lsr	r24
     ab2:	13 96       	adiw	r26, 0x03	; 3
     ab4:	9c 91       	ld	r25, X
     ab6:	13 97       	sbiw	r26, 0x03	; 3
     ab8:	e0 e2       	ldi	r30, 0x20	; 32
     aba:	9e 9f       	mul	r25, r30
     abc:	80 0d       	add	r24, r0
     abe:	11 24       	eor	r1, r1
     ac0:	80 93 f3 00 	sts	0x00F3, r24
     ac4:	12 96       	adiw	r26, 0x02	; 2
     ac6:	8c 91       	ld	r24, X
     ac8:	12 97       	sbiw	r26, 0x02	; 2
     aca:	82 95       	swap	r24
     acc:	88 0f       	add	r24, r24
     ace:	80 7e       	andi	r24, 0xE0	; 224
     ad0:	80 93 f2 00 	sts	0x00F2, r24
     ad4:	ef ee       	ldi	r30, 0xEF	; 239
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	8f 7e       	andi	r24, 0xEF	; 239
     adc:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	9b 81       	ldd	r25, Y+3	; 0x03
     ae4:	92 95       	swap	r25
     ae6:	96 95       	lsr	r25
     ae8:	97 70       	andi	r25, 0x07	; 7
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	88 0f       	add	r24, r24
     aee:	88 0f       	add	r24, r24
     af0:	88 0f       	add	r24, r24
     af2:	89 0f       	add	r24, r25
     af4:	80 93 f7 00 	sts	0x00F7, r24
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	92 95       	swap	r25
     afc:	96 95       	lsr	r25
     afe:	97 70       	andi	r25, 0x07	; 7
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	88 0f       	add	r24, r24
     b04:	88 0f       	add	r24, r24
     b06:	88 0f       	add	r24, r24
     b08:	89 0f       	add	r24, r25
     b0a:	80 93 f6 00 	sts	0x00F6, r24
     b0e:	99 81       	ldd	r25, Y+1	; 0x01
     b10:	92 95       	swap	r25
     b12:	96 95       	lsr	r25
     b14:	97 70       	andi	r25, 0x07	; 7
     b16:	8a 81       	ldd	r24, Y+2	; 0x02
     b18:	88 0f       	add	r24, r24
     b1a:	88 0f       	add	r24, r24
     b1c:	88 0f       	add	r24, r24
     b1e:	89 0f       	add	r24, r25
     b20:	80 93 f5 00 	sts	0x00F5, r24
     b24:	29 81       	ldd	r18, Y+1	; 0x01
     b26:	22 0f       	add	r18, r18
     b28:	22 0f       	add	r18, r18
     b2a:	22 0f       	add	r18, r18
     b2c:	84 ef       	ldi	r24, 0xF4	; 244
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b34:	ef ee       	ldi	r30, 0xEF	; 239
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	30 81       	ld	r19, Z
     b3a:	16 96       	adiw	r26, 0x06	; 6
     b3c:	2c 91       	ld	r18, X
     b3e:	16 97       	sbiw	r26, 0x06	; 6
     b40:	23 2b       	or	r18, r19
     b42:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     b44:	21 e0       	ldi	r18, 0x01	; 1
     b46:	1a 96       	adiw	r26, 0x0a	; 10
     b48:	2c 93       	st	X, r18
     b4a:	dc 01       	movw	r26, r24
     b4c:	2c 91       	ld	r18, X
     b4e:	24 60       	ori	r18, 0x04	; 4
     b50:	2c 93       	st	X, r18
     b52:	a0 ef       	ldi	r26, 0xF0	; 240
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	2c 91       	ld	r18, X
     b58:	24 60       	ori	r18, 0x04	; 4
     b5a:	2c 93       	st	X, r18
          Can_clear_rplv();
     b5c:	20 81       	ld	r18, Z
     b5e:	2f 7d       	andi	r18, 0xDF	; 223
     b60:	20 83       	st	Z, r18
          Can_set_idemsk();
     b62:	dc 01       	movw	r26, r24
     b64:	2c 91       	ld	r18, X
     b66:	21 60       	ori	r18, 0x01	; 1
     b68:	2c 93       	st	X, r18
          Can_config_rx();       
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 73       	andi	r24, 0x3F	; 63
     b6e:	80 83       	st	Z, r24
     b70:	80 81       	ld	r24, Z
     b72:	80 68       	ori	r24, 0x80	; 128
     b74:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b76:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     b78:	28 c1       	rjmp	.+592    	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	8a ef       	ldi	r24, 0xFA	; 250
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	17 96       	adiw	r26, 0x07	; 7
     b82:	ed 91       	ld	r30, X+
     b84:	fc 91       	ld	r31, X
     b86:	18 97       	sbiw	r26, 0x08	; 8
     b88:	e2 0f       	add	r30, r18
     b8a:	f1 1d       	adc	r31, r1
     b8c:	30 81       	ld	r19, Z
     b8e:	fc 01       	movw	r30, r24
     b90:	30 83       	st	Z, r19
     b92:	2f 5f       	subi	r18, 0xFF	; 255
     b94:	16 96       	adiw	r26, 0x06	; 6
     b96:	3c 91       	ld	r19, X
     b98:	16 97       	sbiw	r26, 0x06	; 6
     b9a:	23 17       	cp	r18, r19
     b9c:	88 f3       	brcs	.-30     	; 0xb80 <__stack+0x281>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     b9e:	19 82       	std	Y+1, r1	; 0x01
     ba0:	9b 81       	ldd	r25, Y+3	; 0x03
     ba2:	92 95       	swap	r25
     ba4:	96 95       	lsr	r25
     ba6:	97 70       	andi	r25, 0x07	; 7
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	88 0f       	add	r24, r24
     bac:	88 0f       	add	r24, r24
     bae:	88 0f       	add	r24, r24
     bb0:	89 0f       	add	r24, r25
     bb2:	80 93 f7 00 	sts	0x00F7, r24
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	92 95       	swap	r25
     bba:	96 95       	lsr	r25
     bbc:	97 70       	andi	r25, 0x07	; 7
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	88 0f       	add	r24, r24
     bc2:	88 0f       	add	r24, r24
     bc4:	88 0f       	add	r24, r24
     bc6:	89 0f       	add	r24, r25
     bc8:	80 93 f6 00 	sts	0x00F6, r24
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	92 95       	swap	r25
     bd0:	96 95       	lsr	r25
     bd2:	97 70       	andi	r25, 0x07	; 7
     bd4:	8a 81       	ldd	r24, Y+2	; 0x02
     bd6:	88 0f       	add	r24, r24
     bd8:	88 0f       	add	r24, r24
     bda:	88 0f       	add	r24, r24
     bdc:	89 0f       	add	r24, r25
     bde:	80 93 f5 00 	sts	0x00F5, r24
     be2:	29 81       	ldd	r18, Y+1	; 0x01
     be4:	22 0f       	add	r18, r18
     be6:	22 0f       	add	r18, r18
     be8:	22 0f       	add	r18, r18
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     bf2:	ef ee       	ldi	r30, 0xEF	; 239
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	30 81       	ld	r19, Z
     bf8:	16 96       	adiw	r26, 0x06	; 6
     bfa:	2c 91       	ld	r18, X
     bfc:	16 97       	sbiw	r26, 0x06	; 6
     bfe:	23 2b       	or	r18, r19
     c00:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	1a 96       	adiw	r26, 0x0a	; 10
     c06:	2c 93       	st	X, r18
     c08:	dc 01       	movw	r26, r24
     c0a:	2c 91       	ld	r18, X
     c0c:	24 60       	ori	r18, 0x04	; 4
     c0e:	2c 93       	st	X, r18
     c10:	a0 ef       	ldi	r26, 0xF0	; 240
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	2c 91       	ld	r18, X
     c16:	24 60       	ori	r18, 0x04	; 4
     c18:	2c 93       	st	X, r18
          Can_set_rplv();
     c1a:	20 81       	ld	r18, Z
     c1c:	20 62       	ori	r18, 0x20	; 32
     c1e:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c20:	dc 01       	movw	r26, r24
     c22:	2c 91       	ld	r18, X
     c24:	2e 7f       	andi	r18, 0xFE	; 254
     c26:	2c 93       	st	X, r18
          Can_config_rx();       
     c28:	80 81       	ld	r24, Z
     c2a:	8f 73       	andi	r24, 0x3F	; 63
     c2c:	80 83       	st	Z, r24
     c2e:	80 81       	ld	r24, Z
     c30:	80 68       	ori	r24, 0x80	; 128
     c32:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c34:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     c36:	c9 c0       	rjmp	.+402    	; 0xdca <__stack+0x4cb>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c38:	1b 96       	adiw	r26, 0x0b	; 11
     c3a:	8c 91       	ld	r24, X
     c3c:	1b 97       	sbiw	r26, 0x0b	; 11
     c3e:	88 23       	and	r24, r24
     c40:	d9 f1       	breq	.+118    	; 0xcb8 <__stack+0x3b9>
     c42:	14 96       	adiw	r26, 0x04	; 4
     c44:	9c 91       	ld	r25, X
     c46:	14 97       	sbiw	r26, 0x04	; 4
     c48:	92 95       	swap	r25
     c4a:	96 95       	lsr	r25
     c4c:	97 70       	andi	r25, 0x07	; 7
     c4e:	15 96       	adiw	r26, 0x05	; 5
     c50:	8c 91       	ld	r24, X
     c52:	15 97       	sbiw	r26, 0x05	; 5
     c54:	88 0f       	add	r24, r24
     c56:	88 0f       	add	r24, r24
     c58:	88 0f       	add	r24, r24
     c5a:	89 0f       	add	r24, r25
     c5c:	80 93 f3 00 	sts	0x00F3, r24
     c60:	13 96       	adiw	r26, 0x03	; 3
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	92 95       	swap	r25
     c68:	96 95       	lsr	r25
     c6a:	97 70       	andi	r25, 0x07	; 7
     c6c:	14 96       	adiw	r26, 0x04	; 4
     c6e:	8c 91       	ld	r24, X
     c70:	14 97       	sbiw	r26, 0x04	; 4
     c72:	88 0f       	add	r24, r24
     c74:	88 0f       	add	r24, r24
     c76:	88 0f       	add	r24, r24
     c78:	89 0f       	add	r24, r25
     c7a:	80 93 f2 00 	sts	0x00F2, r24
     c7e:	12 96       	adiw	r26, 0x02	; 2
     c80:	9c 91       	ld	r25, X
     c82:	12 97       	sbiw	r26, 0x02	; 2
     c84:	92 95       	swap	r25
     c86:	96 95       	lsr	r25
     c88:	97 70       	andi	r25, 0x07	; 7
     c8a:	13 96       	adiw	r26, 0x03	; 3
     c8c:	8c 91       	ld	r24, X
     c8e:	13 97       	sbiw	r26, 0x03	; 3
     c90:	88 0f       	add	r24, r24
     c92:	88 0f       	add	r24, r24
     c94:	88 0f       	add	r24, r24
     c96:	89 0f       	add	r24, r25
     c98:	80 93 f1 00 	sts	0x00F1, r24
     c9c:	12 96       	adiw	r26, 0x02	; 2
     c9e:	8c 91       	ld	r24, X
     ca0:	12 97       	sbiw	r26, 0x02	; 2
     ca2:	88 0f       	add	r24, r24
     ca4:	88 0f       	add	r24, r24
     ca6:	88 0f       	add	r24, r24
     ca8:	80 93 f0 00 	sts	0x00F0, r24
     cac:	ef ee       	ldi	r30, 0xEF	; 239
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	80 61       	ori	r24, 0x10	; 16
     cb4:	80 83       	st	Z, r24
     cb6:	1c c0       	rjmp	.+56     	; 0xcf0 <__stack+0x3f1>
          else              { Can_set_std_id(cmd->id.std);}
     cb8:	12 96       	adiw	r26, 0x02	; 2
     cba:	8c 91       	ld	r24, X
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	86 95       	lsr	r24
     cc0:	86 95       	lsr	r24
     cc2:	86 95       	lsr	r24
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	9c 91       	ld	r25, X
     cc8:	13 97       	sbiw	r26, 0x03	; 3
     cca:	e0 e2       	ldi	r30, 0x20	; 32
     ccc:	9e 9f       	mul	r25, r30
     cce:	80 0d       	add	r24, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	80 93 f3 00 	sts	0x00F3, r24
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	8c 91       	ld	r24, X
     cda:	12 97       	sbiw	r26, 0x02	; 2
     cdc:	82 95       	swap	r24
     cde:	88 0f       	add	r24, r24
     ce0:	80 7e       	andi	r24, 0xE0	; 224
     ce2:	80 93 f2 00 	sts	0x00F2, r24
     ce6:	ef ee       	ldi	r30, 0xEF	; 239
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 7e       	andi	r24, 0xEF	; 239
     cee:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     cf0:	16 96       	adiw	r26, 0x06	; 6
     cf2:	8c 91       	ld	r24, X
     cf4:	16 97       	sbiw	r26, 0x06	; 6
     cf6:	88 23       	and	r24, r24
     cf8:	91 f0       	breq	.+36     	; 0xd1e <__stack+0x41f>
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	8a ef       	ldi	r24, 0xFA	; 250
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	17 96       	adiw	r26, 0x07	; 7
     d02:	ed 91       	ld	r30, X+
     d04:	fc 91       	ld	r31, X
     d06:	18 97       	sbiw	r26, 0x08	; 8
     d08:	e2 0f       	add	r30, r18
     d0a:	f1 1d       	adc	r31, r1
     d0c:	30 81       	ld	r19, Z
     d0e:	fc 01       	movw	r30, r24
     d10:	30 83       	st	Z, r19
     d12:	2f 5f       	subi	r18, 0xFF	; 255
     d14:	16 96       	adiw	r26, 0x06	; 6
     d16:	3c 91       	ld	r19, X
     d18:	16 97       	sbiw	r26, 0x06	; 6
     d1a:	23 17       	cp	r18, r19
     d1c:	88 f3       	brcs	.-30     	; 0xd00 <__stack+0x401>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	9b 81       	ldd	r25, Y+3	; 0x03
     d24:	92 95       	swap	r25
     d26:	96 95       	lsr	r25
     d28:	97 70       	andi	r25, 0x07	; 7
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	88 0f       	add	r24, r24
     d2e:	88 0f       	add	r24, r24
     d30:	88 0f       	add	r24, r24
     d32:	89 0f       	add	r24, r25
     d34:	80 93 f7 00 	sts	0x00F7, r24
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	92 95       	swap	r25
     d3c:	96 95       	lsr	r25
     d3e:	97 70       	andi	r25, 0x07	; 7
     d40:	8b 81       	ldd	r24, Y+3	; 0x03
     d42:	88 0f       	add	r24, r24
     d44:	88 0f       	add	r24, r24
     d46:	88 0f       	add	r24, r24
     d48:	89 0f       	add	r24, r25
     d4a:	80 93 f6 00 	sts	0x00F6, r24
     d4e:	99 81       	ldd	r25, Y+1	; 0x01
     d50:	92 95       	swap	r25
     d52:	96 95       	lsr	r25
     d54:	97 70       	andi	r25, 0x07	; 7
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	88 0f       	add	r24, r24
     d5a:	88 0f       	add	r24, r24
     d5c:	88 0f       	add	r24, r24
     d5e:	89 0f       	add	r24, r25
     d60:	80 93 f5 00 	sts	0x00F5, r24
     d64:	29 81       	ldd	r18, Y+1	; 0x01
     d66:	22 0f       	add	r18, r18
     d68:	22 0f       	add	r18, r18
     d6a:	22 0f       	add	r18, r18
     d6c:	84 ef       	ldi	r24, 0xF4	; 244
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	fc 01       	movw	r30, r24
     d72:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d74:	ef ee       	ldi	r30, 0xEF	; 239
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	30 81       	ld	r19, Z
     d7a:	16 96       	adiw	r26, 0x06	; 6
     d7c:	2c 91       	ld	r18, X
     d7e:	16 97       	sbiw	r26, 0x06	; 6
     d80:	23 2b       	or	r18, r19
     d82:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     d84:	21 e0       	ldi	r18, 0x01	; 1
     d86:	1a 96       	adiw	r26, 0x0a	; 10
     d88:	2c 93       	st	X, r18
     d8a:	dc 01       	movw	r26, r24
     d8c:	2c 91       	ld	r18, X
     d8e:	24 60       	ori	r18, 0x04	; 4
     d90:	2c 93       	st	X, r18
     d92:	a0 ef       	ldi	r26, 0xF0	; 240
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	2c 91       	ld	r18, X
     d98:	24 60       	ori	r18, 0x04	; 4
     d9a:	2c 93       	st	X, r18
          Can_set_rplv();
     d9c:	20 81       	ld	r18, Z
     d9e:	20 62       	ori	r18, 0x20	; 32
     da0:	20 83       	st	Z, r18
          Can_set_idemsk();
     da2:	dc 01       	movw	r26, r24
     da4:	2c 91       	ld	r18, X
     da6:	21 60       	ori	r18, 0x01	; 1
     da8:	2c 93       	st	X, r18
          Can_config_rx();       
     daa:	80 81       	ld	r24, Z
     dac:	8f 73       	andi	r24, 0x3F	; 63
     dae:	80 83       	st	Z, r24
     db0:	80 81       	ld	r24, Z
     db2:	80 68       	ori	r24, 0x80	; 128
     db4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     db6:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     db8:	08 c0       	rjmp	.+16     	; 0xdca <__stack+0x4cb>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
     dba:	19 96       	adiw	r26, 0x09	; 9
     dbc:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dbe:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <__stack+0x4cb>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
     dc2:	8f e1       	ldi	r24, 0x1F	; 31
     dc4:	19 96       	adiw	r26, 0x09	; 9
     dc6:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
     dca:	0f 90       	pop	r0
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
     dd8:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
     dda:	88 23       	and	r24, r24
     ddc:	09 f4       	brne	.+2      	; 0xde0 <can_get_status+0xe>
     dde:	e1 c0       	rjmp	.+450    	; 0xfa2 <can_get_status+0x1d0>
     de0:	8f 31       	cpi	r24, 0x1F	; 31
     de2:	09 f4       	brne	.+2      	; 0xde6 <can_get_status+0x14>
     de4:	e0 c0       	rjmp	.+448    	; 0xfa6 <can_get_status+0x1d4>
     de6:	8f 3f       	cpi	r24, 0xFF	; 255
     de8:	09 f4       	brne	.+2      	; 0xdec <can_get_status+0x1a>
     dea:	df c0       	rjmp	.+446    	; 0xfaa <can_get_status+0x1d8>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
     dec:	62 95       	swap	r22
     dee:	60 7f       	andi	r22, 0xF0	; 240
     df0:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
     df4:	0e 94 80 00 	call	0x100	; 0x100 <can_get_mob_status>
    
    switch (a_status)
     df8:	80 32       	cpi	r24, 0x20	; 32
     dfa:	61 f0       	breq	.+24     	; 0xe14 <can_get_status+0x42>
     dfc:	20 f4       	brcc	.+8      	; 0xe06 <can_get_status+0x34>
     dfe:	88 23       	and	r24, r24
     e00:	09 f4       	brne	.+2      	; 0xe04 <can_get_status+0x32>
     e02:	d5 c0       	rjmp	.+426    	; 0xfae <can_get_status+0x1dc>
     e04:	c4 c0       	rjmp	.+392    	; 0xf8e <can_get_status+0x1bc>
     e06:	80 34       	cpi	r24, 0x40	; 64
     e08:	09 f4       	brne	.+2      	; 0xe0c <can_get_status+0x3a>
     e0a:	b6 c0       	rjmp	.+364    	; 0xf78 <can_get_status+0x1a6>
     e0c:	80 3a       	cpi	r24, 0xA0	; 160
     e0e:	09 f4       	brne	.+2      	; 0xe12 <can_get_status+0x40>
     e10:	5a c0       	rjmp	.+180    	; 0xec6 <can_get_status+0xf4>
     e12:	bd c0       	rjmp	.+378    	; 0xf8e <can_get_status+0x1bc>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
			delay_ms(500);
     e1c:	84 ef       	ldi	r24, 0xF4	; 244
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 2b 0a 	call	0x1456	; 0x1456 <delay_ms>
			LED_Reg_Write(0x00);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
	    
            cmd->ctrl.rtr = Can_get_rtr();
     e2c:	80 91 f0 00 	lds	r24, 0x00F0
     e30:	82 fb       	bst	r24, 2
     e32:	88 27       	eor	r24, r24
     e34:	80 f9       	bld	r24, 0
     e36:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     e38:	80 91 ef 00 	lds	r24, 0x00EF
     e3c:	84 ff       	sbrs	r24, 4
     e3e:	2d c0       	rjmp	.+90     	; 0xe9a <can_get_status+0xc8>
            {
	            cmd->ctrl.ide = 1; // extended frame
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
     e44:	e3 ef       	ldi	r30, 0xF3	; 243
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	86 95       	lsr	r24
     e4c:	86 95       	lsr	r24
     e4e:	86 95       	lsr	r24
     e50:	8d 83       	std	Y+5, r24	; 0x05
     e52:	a2 ef       	ldi	r26, 0xF2	; 242
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	8c 91       	ld	r24, X
     e58:	90 81       	ld	r25, Z
     e5a:	86 95       	lsr	r24
     e5c:	86 95       	lsr	r24
     e5e:	86 95       	lsr	r24
     e60:	20 e2       	ldi	r18, 0x20	; 32
     e62:	92 9f       	mul	r25, r18
     e64:	80 0d       	add	r24, r0
     e66:	11 24       	eor	r1, r1
     e68:	8c 83       	std	Y+4, r24	; 0x04
     e6a:	e1 ef       	ldi	r30, 0xF1	; 241
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	9c 91       	ld	r25, X
     e72:	86 95       	lsr	r24
     e74:	86 95       	lsr	r24
     e76:	86 95       	lsr	r24
     e78:	20 e2       	ldi	r18, 0x20	; 32
     e7a:	92 9f       	mul	r25, r18
     e7c:	80 0d       	add	r24, r0
     e7e:	11 24       	eor	r1, r1
     e80:	8b 83       	std	Y+3, r24	; 0x03
     e82:	80 91 f0 00 	lds	r24, 0x00F0
     e86:	90 81       	ld	r25, Z
     e88:	86 95       	lsr	r24
     e8a:	86 95       	lsr	r24
     e8c:	86 95       	lsr	r24
     e8e:	20 e2       	ldi	r18, 0x20	; 32
     e90:	92 9f       	mul	r25, r18
     e92:	80 0d       	add	r24, r0
     e94:	11 24       	eor	r1, r1
     e96:	8a 83       	std	Y+2, r24	; 0x02
     e98:	07 c0       	rjmp	.+14     	; 0xea8 <can_get_status+0xd6>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
     e9a:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
     e9c:	e3 ef       	ldi	r30, 0xF3	; 243
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 91 f2 00 	lds	r24, 0x00F2
     ea6:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
     ea8:	80 e2       	ldi	r24, 0x20	; 32
     eaa:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	98 85       	ldd	r25, Y+8	; 0x08
     eb0:	0e 94 96 00 	call	0x12c	; 0x12c <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
     eb4:	ef ee       	ldi	r30, 0xEF	; 239
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 73       	andi	r24, 0x3F	; 63
     ebc:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
     ebe:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
     ec2:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
     ec4:	75 c0       	rjmp	.+234    	; 0xfb0 <can_get_status+0x1de>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
     ec6:	80 91 f0 00 	lds	r24, 0x00F0
     eca:	82 fb       	bst	r24, 2
     ecc:	88 27       	eor	r24, r24
     ece:	80 f9       	bld	r24, 0
     ed0:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     ed2:	80 91 ef 00 	lds	r24, 0x00EF
     ed6:	84 ff       	sbrs	r24, 4
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <can_get_status+0x162>
            {
                cmd->ctrl.ide = 1; // extended frame
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
     ede:	e3 ef       	ldi	r30, 0xF3	; 243
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	86 95       	lsr	r24
     ee6:	86 95       	lsr	r24
     ee8:	86 95       	lsr	r24
     eea:	8d 83       	std	Y+5, r24	; 0x05
     eec:	a2 ef       	ldi	r26, 0xF2	; 242
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	8c 91       	ld	r24, X
     ef2:	90 81       	ld	r25, Z
     ef4:	86 95       	lsr	r24
     ef6:	86 95       	lsr	r24
     ef8:	86 95       	lsr	r24
     efa:	20 e2       	ldi	r18, 0x20	; 32
     efc:	92 9f       	mul	r25, r18
     efe:	80 0d       	add	r24, r0
     f00:	11 24       	eor	r1, r1
     f02:	8c 83       	std	Y+4, r24	; 0x04
     f04:	e1 ef       	ldi	r30, 0xF1	; 241
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	9c 91       	ld	r25, X
     f0c:	86 95       	lsr	r24
     f0e:	86 95       	lsr	r24
     f10:	86 95       	lsr	r24
     f12:	20 e2       	ldi	r18, 0x20	; 32
     f14:	92 9f       	mul	r25, r18
     f16:	80 0d       	add	r24, r0
     f18:	11 24       	eor	r1, r1
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	80 91 f0 00 	lds	r24, 0x00F0
     f20:	90 81       	ld	r25, Z
     f22:	86 95       	lsr	r24
     f24:	86 95       	lsr	r24
     f26:	86 95       	lsr	r24
     f28:	20 e2       	ldi	r18, 0x20	; 32
     f2a:	92 9f       	mul	r25, r18
     f2c:	80 0d       	add	r24, r0
     f2e:	11 24       	eor	r1, r1
     f30:	8a 83       	std	Y+2, r24	; 0x02
     f32:	13 c0       	rjmp	.+38     	; 0xf5a <can_get_status+0x188>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
     f34:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
     f36:	e3 ef       	ldi	r30, 0xF3	; 243
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	82 95       	swap	r24
     f3e:	86 95       	lsr	r24
     f40:	87 70       	andi	r24, 0x07	; 7
     f42:	8b 83       	std	Y+3, r24	; 0x03
     f44:	80 91 f2 00 	lds	r24, 0x00F2
     f48:	90 81       	ld	r25, Z
     f4a:	99 0f       	add	r25, r25
     f4c:	99 0f       	add	r25, r25
     f4e:	99 0f       	add	r25, r25
     f50:	82 95       	swap	r24
     f52:	86 95       	lsr	r24
     f54:	87 70       	andi	r24, 0x07	; 7
     f56:	89 0f       	add	r24, r25
     f58:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
     f5a:	80 ea       	ldi	r24, 0xA0	; 160
     f5c:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
     f5e:	8f 81       	ldd	r24, Y+7	; 0x07
     f60:	98 85       	ldd	r25, Y+8	; 0x08
     f62:	0e 94 96 00 	call	0x12c	; 0x12c <can_get_data>
			
			Can_mob_abort();        // Freed the MO
     f66:	ef ee       	ldi	r30, 0xEF	; 239
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 73       	andi	r24, 0x3F	; 63
     f6e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
     f70:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
     f74:	80 ea       	ldi	r24, 0xA0	; 160
            break;
     f76:	1c c0       	rjmp	.+56     	; 0xfb0 <can_get_status+0x1de>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
     f78:	80 e4       	ldi	r24, 0x40	; 64
     f7a:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
     f7c:	ef ee       	ldi	r30, 0xEF	; 239
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f 73       	andi	r24, 0x3F	; 63
     f84:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     f86:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
     f8a:	80 e4       	ldi	r24, 0x40	; 64
            break;
     f8c:	11 c0       	rjmp	.+34     	; 0xfb0 <can_get_status+0x1de>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
     f8e:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
     f90:	ef ee       	ldi	r30, 0xEF	; 239
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8f 73       	andi	r24, 0x3F	; 63
     f98:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     f9a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
     f9e:	82 e0       	ldi	r24, 0x02	; 2
            break;
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <can_get_status+0x1de>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	05 c0       	rjmp	.+10     	; 0xfb0 <can_get_status+0x1de>
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <can_get_status+0x1de>
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <can_get_status+0x1de>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
     fae:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <LED_Reg_Write>:
*/
#include <avr/io.h>
#include "LED.h"

void LED_Reg_Write(uint8_t val) {
	LEDPORT = ~val;
     fb6:	80 95       	com	r24
     fb8:	85 b9       	out	0x05, r24	; 5
     fba:	08 95       	ret

00000fbc <main>:
uint8_t data3[DATA_BUFFER_SIZE];	// Data Buffer for MOb3
uint8_t data4[DATA_BUFFER_SIZE];	// Data Buffer for MOb4
uint8_t data5[DATA_BUFFER_SIZE];	// Data Buffer for MOb5

int main(void)
{		
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	63 97       	sbiw	r28, 0x13	; 19
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
	}
}

void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
     fd0:	e1 e6       	ldi	r30, 0x61	; 97
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 e8       	ldi	r24, 0x80	; 128
     fd6:	80 83       	st	Z, r24
	CLKPR = 0x00;
     fd8:	10 82       	st	Z, r1
}

void io_init(void) {
	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFF;
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	84 b9       	out	0x04, r24	; 4
	LED_Reg_Write(0x00); // clear all LEDs
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x00;
     fe4:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
     fe6:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x00;
     fe8:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
     fea:	1b b8       	out	0x0b, r1	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
     fec:	1d b8       	out	0x0d, r1	; 13
	PORTD = 0x00;
     fee:	1b b8       	out	0x0b, r1	; 11
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
     ff0:	0e 94 11 0a 	call	0x1422	; 0x1422 <timer_init>
	can_init(0);
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	0e 94 ae 00 	call	0x15c	; 0x15c <can_init>
	adc_initialize();
     ffa:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	
	uint8_t	status, i, mob_number, send_now, send_hk, send_data;
	uint8_t message_arr[8];
	
	// Enable global interrupts for Timer execution
	sei();
     ffe:	78 94       	sei
	
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
	delay_ms(250);
    1006:	8a ef       	ldi	r24, 0xFA	; 250
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <delay_ms>
	LED_Reg_Write(0x00);
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
    1014:	8e 01       	movw	r16, r28
    1016:	0f 5f       	subi	r16, 0xFF	; 255
    1018:	1f 4f       	sbci	r17, 0xFF	; 255
    101a:	7e 01       	movw	r14, r28
    101c:	89 e0       	ldi	r24, 0x09	; 9
    101e:	e8 0e       	add	r14, r24
    1020:	f1 1c       	adc	r15, r1
    1022:	f8 01       	movw	r30, r16
	
	for (i = 0; i < 8; i ++)
	{
		message_arr[i] = 0;			// Reset the message array to zero after each message.
    1024:	11 92       	st	Z+, r1
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
	delay_ms(250);
	LED_Reg_Write(0x00);
	
	for (i = 0; i < 8; i ++)
    1026:	ee 15       	cp	r30, r14
    1028:	ff 05       	cpc	r31, r15
    102a:	e1 f7       	brne	.-8      	; 0x1024 <main+0x68>
	send_hk = 0;
	send_data = 0;
	
	/* INITIALIZE MOB0 */

	message.pt_data = &data0[0]; // point message object to first element of data buffer
    102c:	84 e2       	ldi	r24, 0x24	; 36
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	90 93 08 01 	sts	0x0108, r25
    1034:	80 93 07 01 	sts	0x0107, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    1038:	10 92 0b 01 	sts	0x010B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
    103c:	84 e1       	ldi	r24, 0x14	; 20
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	90 93 03 01 	sts	0x0103, r25
    1044:	80 93 02 01 	sts	0x0102, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    1048:	85 e0       	ldi	r24, 0x05	; 5
    104a:	80 93 01 01 	sts	0x0101, r24
	message.dlc = 8;			 // Max length of a CAN message.
    104e:	88 e0       	ldi	r24, 0x08	; 8
    1050:	80 93 06 01 	sts	0x0106, r24
	mob_number = 0;
		
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	91 e0       	ldi	r25, 0x01	; 1
    105a:	0e 94 bd 00 	call	0x17a	; 0x17a <can_cmd>
    105e:	81 11       	cpse	r24, r1
    1060:	f9 cf       	rjmp	.-14     	; 0x1054 <main+0x98>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
    1062:	85 e3       	ldi	r24, 0x35	; 53
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	90 93 08 01 	sts	0x0108, r25
    106a:	80 93 07 01 	sts	0x0107, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
    106e:	10 92 0b 01 	sts	0x010B, r1
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
    1072:	89 e1       	ldi	r24, 0x19	; 25
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	90 93 03 01 	sts	0x0103, r25
    107a:	80 93 02 01 	sts	0x0102, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
    107e:	85 e0       	ldi	r24, 0x05	; 5
    1080:	80 93 01 01 	sts	0x0101, r24
	message.dlc = 8;				// Max length of a CAN message.
    1084:	88 e0       	ldi	r24, 0x08	; 8
    1086:	80 93 06 01 	sts	0x0106, r24
	mob_number = 5;
		
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
    108a:	65 e0       	ldi	r22, 0x05	; 5
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	91 e0       	ldi	r25, 0x01	; 1
    1090:	0e 94 bd 00 	call	0x17a	; 0x17a <can_cmd>
    1094:	81 11       	cpse	r24, r1
    1096:	f9 cf       	rjmp	.-14     	; 0x108a <main+0xce>
    1098:	1b 86       	std	Y+11, r1	; 0x0b
    109a:	1a 86       	std	Y+10, r1	; 0x0a
    109c:	19 86       	std	Y+9, r1	; 0x09
    while(1)
    {
		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 */
		
		message.pt_data = &data0[0]; // point message object to first element of data buffer
    109e:	0f 2e       	mov	r0, r31
    10a0:	f7 e0       	ldi	r31, 0x07	; 7
    10a2:	af 2e       	mov	r10, r31
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	bf 2e       	mov	r11, r31
    10a8:	f0 2d       	mov	r31, r0
    10aa:	a4 e2       	ldi	r26, 0x24	; 36
    10ac:	b1 e0       	ldi	r27, 0x01	; 1
    10ae:	ae 87       	std	Y+14, r26	; 0x0e
    10b0:	bf 87       	std	Y+15, r27	; 0x0f
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    10b2:	0f 2e       	mov	r0, r31
    10b4:	fb e0       	ldi	r31, 0x0B	; 11
    10b6:	8f 2e       	mov	r8, r31
    10b8:	f1 e0       	ldi	r31, 0x01	; 1
    10ba:	9f 2e       	mov	r9, r31
    10bc:	f0 2d       	mov	r31, r0
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
    10be:	0f 2e       	mov	r0, r31
    10c0:	f2 e0       	ldi	r31, 0x02	; 2
    10c2:	cf 2e       	mov	r12, r31
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	df 2e       	mov	r13, r31
    10c8:	f0 2d       	mov	r31, r0
    10ca:	f4 e1       	ldi	r31, 0x14	; 20
    10cc:	f8 8b       	std	Y+16, r31	; 0x10
    10ce:	19 8a       	std	Y+17, r1	; 0x11
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    10d0:	0f 2e       	mov	r0, r31
    10d2:	f1 e0       	ldi	r31, 0x01	; 1
    10d4:	6f 2e       	mov	r6, r31
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	7f 2e       	mov	r7, r31
    10da:	f0 2d       	mov	r31, r0
    10dc:	0f 2e       	mov	r0, r31
    10de:	f5 e0       	ldi	r31, 0x05	; 5
    10e0:	3f 2e       	mov	r3, r31
    10e2:	f0 2d       	mov	r31, r0
    10e4:	3c 86       	std	Y+12, r3	; 0x0c
		message.dlc = 8;			 // Max length of a CAN message.
    10e6:	0f 2e       	mov	r0, r31
    10e8:	f6 e0       	ldi	r31, 0x06	; 6
    10ea:	4f 2e       	mov	r4, r31
    10ec:	f1 e0       	ldi	r31, 0x01	; 1
    10ee:	5f 2e       	mov	r5, r31
    10f0:	f0 2d       	mov	r31, r0
    10f2:	68 94       	set
    10f4:	22 24       	eor	r2, r2
    10f6:	23 f8       	bld	r2, 3
    10f8:	2d 86       	std	Y+13, r2	; 0x0d
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)
				{
					message_arr[i] = *(message.pt_data + i);
    10fa:	0a 8b       	std	Y+18, r16	; 0x12
    10fc:	1b 8b       	std	Y+19, r17	; 0x13
    10fe:	04 e2       	ldi	r16, 0x24	; 36
    1100:	11 e0       	ldi	r17, 0x01	; 1
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <main+0x14a>
			
			while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for mob4 to configure
			
			while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
			
			send_data = 0;
    1104:	1b 86       	std	Y+11, r1	; 0x0b
    while(1)
    {
		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 */
		
		message.pt_data = &data0[0]; // point message object to first element of data buffer
    1106:	ee 85       	ldd	r30, Y+14	; 0x0e
    1108:	d5 01       	movw	r26, r10
    110a:	ec 93       	st	X, r30
    110c:	ff 85       	ldd	r31, Y+15	; 0x0f
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	fc 93       	st	X, r31
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    1112:	d4 01       	movw	r26, r8
    1114:	1c 92       	st	X, r1
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
    1116:	88 89       	ldd	r24, Y+16	; 0x10
    1118:	f6 01       	movw	r30, r12
    111a:	80 83       	st	Z, r24
    111c:	99 89       	ldd	r25, Y+17	; 0x11
    111e:	91 83       	std	Z+1, r25	; 0x01
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    1120:	ec 85       	ldd	r30, Y+12	; 0x0c
    1122:	d3 01       	movw	r26, r6
    1124:	ec 93       	st	X, r30
		message.dlc = 8;			 // Max length of a CAN message.
    1126:	ed 85       	ldd	r30, Y+13	; 0x0d
    1128:	d2 01       	movw	r26, r4
    112a:	ec 93       	st	X, r30
		mob_number = 0;
		
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <can_get_status>
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	09 f4       	brne	.+2      	; 0x113c <main+0x180>
    113a:	76 c0       	rjmp	.+236    	; 0x1228 <main+0x26c>
		{
			if(message.status == MOB_RX_COMPLETED)
    113c:	a9 e0       	ldi	r26, 0x09	; 9
    113e:	b1 e0       	ldi	r27, 0x01	; 1
    1140:	8c 91       	ld	r24, X
    1142:	80 32       	cpi	r24, 0x20	; 32
    1144:	09 f0       	breq	.+2      	; 0x1148 <main+0x18c>
    1146:	5a c0       	rjmp	.+180    	; 0x11fc <main+0x240>
    1148:	f5 01       	movw	r30, r10
    114a:	a0 81       	ld	r26, Z
    114c:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)
				{
					message_arr[i] = *(message.pt_data + i);
    114e:	ea 89       	ldd	r30, Y+18	; 0x12
    1150:	fb 89       	ldd	r31, Y+19	; 0x13
    1152:	8d 91       	ld	r24, X+
    1154:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)
    1156:	ee 16       	cp	r14, r30
    1158:	ff 06       	cpc	r15, r31
    115a:	d9 f7       	brne	.-10     	; 0x1152 <main+0x196>
				{
					message_arr[i] = *(message.pt_data + i);
				}
				
				if ((message_arr[0] == 0xFF) && (message_arr[1] == 0xFF) && (message_arr[2] == 0xFF) && (message_arr[3] == 0xFF)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	8f 3f       	cpi	r24, 0xFF	; 255
    1160:	21 f5       	brne	.+72     	; 0x11aa <main+0x1ee>
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	8f 3f       	cpi	r24, 0xFF	; 255
    1166:	09 f0       	breq	.+2      	; 0x116a <main+0x1ae>
    1168:	43 c0       	rjmp	.+134    	; 0x11f0 <main+0x234>
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	8f 3f       	cpi	r24, 0xFF	; 255
    116e:	09 f0       	breq	.+2      	; 0x1172 <main+0x1b6>
    1170:	3f c0       	rjmp	.+126    	; 0x11f0 <main+0x234>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	8f 3f       	cpi	r24, 0xFF	; 255
    1176:	e1 f5       	brne	.+120    	; 0x11f0 <main+0x234>
				&& (message_arr[4] == 0xFF) && (message_arr[5] == 0xFF) && (message_arr[6] == 0xFF) && (message_arr[7] == 0xFF))
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	8f 3f       	cpi	r24, 0xFF	; 255
    117c:	c9 f5       	brne	.+114    	; 0x11f0 <main+0x234>
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	8f 3f       	cpi	r24, 0xFF	; 255
    1182:	b1 f5       	brne	.+108    	; 0x11f0 <main+0x234>
    1184:	8f 81       	ldd	r24, Y+7	; 0x07
    1186:	8f 3f       	cpi	r24, 0xFF	; 255
    1188:	99 f5       	brne	.+102    	; 0x11f0 <main+0x234>
    118a:	88 85       	ldd	r24, Y+8	; 0x08
    118c:	8f 3f       	cpi	r24, 0xFF	; 255
    118e:	81 f5       	brne	.+96     	; 0x11f0 <main+0x234>
				{
					LED_Reg_Write(0x04);	//Toggle LED2 when the appropriate message is received.
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
					delay_ms(500);
    1196:	84 ef       	ldi	r24, 0xF4	; 244
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <delay_ms>
					LED_Reg_Write(0x00);
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
					send_now = 1;
    11a4:	f1 e0       	ldi	r31, 0x01	; 1
    11a6:	f9 87       	std	Y+9, r31	; 0x09
    11a8:	23 c0       	rjmp	.+70     	; 0x11f0 <main+0x234>
				}
				
				if ((message_arr[0] == 0x55) && (message_arr[1] == 0x55) && (message_arr[2] == 0x55) && (message_arr[3] == 0x55)
    11aa:	85 35       	cpi	r24, 0x55	; 85
    11ac:	09 f5       	brne	.+66     	; 0x11f0 <main+0x234>
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	85 35       	cpi	r24, 0x55	; 85
    11b2:	f1 f4       	brne	.+60     	; 0x11f0 <main+0x234>
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	85 35       	cpi	r24, 0x55	; 85
    11b8:	d9 f4       	brne	.+54     	; 0x11f0 <main+0x234>
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	85 35       	cpi	r24, 0x55	; 85
    11be:	c1 f4       	brne	.+48     	; 0x11f0 <main+0x234>
				&& (message_arr[4] == 0x55) && (message_arr[5] == 0x55) && (message_arr[6] == 0x55) && (message_arr[7] == 0x55))
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	85 35       	cpi	r24, 0x55	; 85
    11c4:	a9 f4       	brne	.+42     	; 0x11f0 <main+0x234>
    11c6:	8e 81       	ldd	r24, Y+6	; 0x06
    11c8:	85 35       	cpi	r24, 0x55	; 85
    11ca:	91 f4       	brne	.+36     	; 0x11f0 <main+0x234>
    11cc:	8f 81       	ldd	r24, Y+7	; 0x07
    11ce:	85 35       	cpi	r24, 0x55	; 85
    11d0:	79 f4       	brne	.+30     	; 0x11f0 <main+0x234>
    11d2:	88 85       	ldd	r24, Y+8	; 0x08
    11d4:	85 35       	cpi	r24, 0x55	; 85
    11d6:	61 f4       	brne	.+24     	; 0x11f0 <main+0x234>
				{
					LED_Reg_Write(0x80);	//Toggle LED7 when the appropriate message is received.
    11d8:	80 e8       	ldi	r24, 0x80	; 128
    11da:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
					delay_ms(500);
    11de:	84 ef       	ldi	r24, 0xF4	; 244
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <delay_ms>
					LED_Reg_Write(0x00);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
					send_data = 1;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	8b 87       	std	Y+11, r24	; 0x0b
    11f0:	ea 89       	ldd	r30, Y+18	; 0x12
    11f2:	fb 89       	ldd	r31, Y+19	; 0x13
				}
								
				for (i = 0; i < 8; i ++)
				{
					message_arr[i] = 0;			// Reset the message array to zero after each message.
    11f4:	11 92       	st	Z+, r1
					delay_ms(500);
					LED_Reg_Write(0x00);
					send_data = 1;
				}
								
				for (i = 0; i < 8; i ++)
    11f6:	ee 16       	cp	r14, r30
    11f8:	ff 06       	cpc	r15, r31
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <main+0x238>
				{
					message_arr[i] = 0;			// Reset the message array to zero after each message.
				}				
			}
			message.pt_data = &data0[0]; // point message object to first element of data buffer
    11fc:	e4 e2       	ldi	r30, 0x24	; 36
    11fe:	f1 e0       	ldi	r31, 0x01	; 1
    1200:	d5 01       	movw	r26, r10
    1202:	ed 93       	st	X+, r30
    1204:	fc 93       	st	X, r31
			message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    1206:	d4 01       	movw	r26, r8
    1208:	1c 92       	st	X, r1
			message.id.std = SUB0_ID0;  // populate ID field with ID Tag
    120a:	84 e1       	ldi	r24, 0x14	; 20
    120c:	f6 01       	movw	r30, r12
    120e:	80 83       	st	Z, r24
    1210:	11 82       	std	Z+1, r1	; 0x01
			message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    1212:	d3 01       	movw	r26, r6
    1214:	3c 92       	st	X, r3
			message.dlc = 8;			 // Max length of a CAN message.
    1216:	f2 01       	movw	r30, r4
    1218:	20 82       	st	Z, r2
			mob_number = 0;
			
			while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure	
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 bd 00 	call	0x17a	; 0x17a <can_cmd>
    1224:	81 11       	cpse	r24, r1
    1226:	f9 cf       	rjmp	.-14     	; 0x121a <main+0x25e>
		}
		
		/* CHECK FOR HOUSEKEEPING REQUEST */
		
			message.pt_data = &data5[0]; // point message object to first element of data buffer
    1228:	e5 e3       	ldi	r30, 0x35	; 53
    122a:	f1 e0       	ldi	r31, 0x01	; 1
    122c:	d5 01       	movw	r26, r10
    122e:	ed 93       	st	X+, r30
    1230:	fc 93       	st	X, r31
			message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    1232:	d4 01       	movw	r26, r8
    1234:	1c 92       	st	X, r1
			message.id.std = SUB0_ID5;  // populate ID field with ID Tag
    1236:	89 e1       	ldi	r24, 0x19	; 25
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	f6 01       	movw	r30, r12
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
			message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    1240:	d3 01       	movw	r26, r6
    1242:	3c 92       	st	X, r3
			message.dlc = 8;			 // Max length of a CAN message.
    1244:	f2 01       	movw	r30, r4
    1246:	20 82       	st	Z, r2
			mob_number = 5;
			
			if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
    1248:	63 2d       	mov	r22, r3
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <can_get_status>
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	09 f4       	brne	.+2      	; 0x1258 <main+0x29c>
    1256:	50 c0       	rjmp	.+160    	; 0x12f8 <main+0x33c>
			{
				if(message.status == MOB_RX_COMPLETED)
    1258:	a9 e0       	ldi	r26, 0x09	; 9
    125a:	b1 e0       	ldi	r27, 0x01	; 1
    125c:	8c 91       	ld	r24, X
    125e:	80 32       	cpi	r24, 0x20	; 32
    1260:	a1 f5       	brne	.+104    	; 0x12ca <main+0x30e>
    1262:	f5 01       	movw	r30, r10
    1264:	a0 81       	ld	r26, Z
    1266:	b1 81       	ldd	r27, Z+1	; 0x01
				{
					for (i = 0; i < 8; i ++)
					{
						message_arr[i] = *(message.pt_data + i);
    1268:	ea 89       	ldd	r30, Y+18	; 0x12
    126a:	fb 89       	ldd	r31, Y+19	; 0x13
    126c:	8d 91       	ld	r24, X+
    126e:	81 93       	st	Z+, r24
			
			if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
			{
				if(message.status == MOB_RX_COMPLETED)
				{
					for (i = 0; i < 8; i ++)
    1270:	ee 16       	cp	r14, r30
    1272:	ff 06       	cpc	r15, r31
    1274:	d9 f7       	brne	.-10     	; 0x126c <main+0x2b0>
					{
						message_arr[i] = *(message.pt_data + i);
					}
					
					if ((message_arr[0] == 0x0F) && (message_arr[1] == 0x0F) && (message_arr[2] == 0x0F) && (message_arr[3] == 0x0F)
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	8f 30       	cpi	r24, 0x0F	; 15
    127a:	09 f5       	brne	.+66     	; 0x12be <main+0x302>
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	8f 30       	cpi	r24, 0x0F	; 15
    1280:	f1 f4       	brne	.+60     	; 0x12be <main+0x302>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	8f 30       	cpi	r24, 0x0F	; 15
    1286:	d9 f4       	brne	.+54     	; 0x12be <main+0x302>
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	8f 30       	cpi	r24, 0x0F	; 15
    128c:	c1 f4       	brne	.+48     	; 0x12be <main+0x302>
					&& (message_arr[4] == 0x0F) && (message_arr[5] == 0x0F) && (message_arr[6] == 0x0F) && (message_arr[7] == 0x0F))
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	8f 30       	cpi	r24, 0x0F	; 15
    1292:	a9 f4       	brne	.+42     	; 0x12be <main+0x302>
    1294:	8e 81       	ldd	r24, Y+6	; 0x06
    1296:	8f 30       	cpi	r24, 0x0F	; 15
    1298:	91 f4       	brne	.+36     	; 0x12be <main+0x302>
    129a:	8f 81       	ldd	r24, Y+7	; 0x07
    129c:	8f 30       	cpi	r24, 0x0F	; 15
    129e:	79 f4       	brne	.+30     	; 0x12be <main+0x302>
    12a0:	88 85       	ldd	r24, Y+8	; 0x08
    12a2:	8f 30       	cpi	r24, 0x0F	; 15
    12a4:	61 f4       	brne	.+24     	; 0x12be <main+0x302>
					{
						LED_Reg_Write(0x08);	//Toggle LED3 when housekeeping was requested.
    12a6:	82 2d       	mov	r24, r2
    12a8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
						delay_ms(500);
    12ac:	84 ef       	ldi	r24, 0xF4	; 244
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <delay_ms>
						LED_Reg_Write(0x00);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <LED_Reg_Write>
						send_hk = 1;
    12ba:	f1 e0       	ldi	r31, 0x01	; 1
    12bc:	fa 87       	std	Y+10, r31	; 0x0a
    12be:	ea 89       	ldd	r30, Y+18	; 0x12
    12c0:	fb 89       	ldd	r31, Y+19	; 0x13
					}
					for (i = 0; i < 8; i ++)
					{
						message_arr[i] = 0;			// Reset the message array to zero after each message.
    12c2:	11 92       	st	Z+, r1
						LED_Reg_Write(0x08);	//Toggle LED3 when housekeeping was requested.
						delay_ms(500);
						LED_Reg_Write(0x00);
						send_hk = 1;
					}
					for (i = 0; i < 8; i ++)
    12c4:	ee 16       	cp	r14, r30
    12c6:	ff 06       	cpc	r15, r31
    12c8:	e1 f7       	brne	.-8      	; 0x12c2 <main+0x306>
					{
						message_arr[i] = 0;			// Reset the message array to zero after each message.
					}
				}
				message.pt_data = &data5[0]; // point message object to first element of data buffer
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	d5 01       	movw	r26, r10
    12d0:	ed 93       	st	X+, r30
    12d2:	fc 93       	st	X, r31
				message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    12d4:	d4 01       	movw	r26, r8
    12d6:	1c 92       	st	X, r1
				message.id.std = SUB0_ID5;  // populate ID field with ID Tag
    12d8:	89 e1       	ldi	r24, 0x19	; 25
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	f6 01       	movw	r30, r12
    12de:	91 83       	std	Z+1, r25	; 0x01
    12e0:	80 83       	st	Z, r24
				message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    12e2:	d3 01       	movw	r26, r6
    12e4:	3c 92       	st	X, r3
				message.dlc = 8;			 // Max length of a CAN message.
    12e6:	f2 01       	movw	r30, r4
    12e8:	20 82       	st	Z, r2
				mob_number = 5;
				
				while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
    12ea:	63 2d       	mov	r22, r3
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	0e 94 bd 00 	call	0x17a	; 0x17a <can_cmd>
    12f4:	81 11       	cpse	r24, r1
    12f6:	f9 cf       	rjmp	.-14     	; 0x12ea <main+0x32e>
			}	
	
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    12f8:	f9 85       	ldd	r31, Y+9	; 0x09
    12fa:	f1 30       	cpi	r31, 0x01	; 1
    12fc:	39 f5       	brne	.+78     	; 0x134c <main+0x390>
		{	
			message.pt_data = &data4[0]; // point message object to first element of data buffer
    12fe:	ec e1       	ldi	r30, 0x1C	; 28
    1300:	f1 e0       	ldi	r31, 0x01	; 1
    1302:	d5 01       	movw	r26, r10
    1304:	ed 93       	st	X+, r30
    1306:	fc 93       	st	X, r31
			message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    1308:	d4 01       	movw	r26, r8
    130a:	1c 92       	st	X, r1
			message.id.std = NODE0_ID;  // populate ID field with ID Tag
    130c:	8a e0       	ldi	r24, 0x0A	; 10
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	f6 01       	movw	r30, r12
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	80 83       	st	Z, r24
			message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	d3 01       	movw	r26, r6
    131a:	8c 93       	st	X, r24
			message.dlc = 8;			 // Max length of a CAN message.
    131c:	f2 01       	movw	r30, r4
    131e:	20 82       	st	Z, r2
    1320:	ec e1       	ldi	r30, 0x1C	; 28
    1322:	f1 e0       	ldi	r31, 0x01	; 1
			mob_number = 4;
		
			for (i = 0; i < 8; i ++)
			{
				data4[i] = 0xAB;		// Message to be sent back to the OBC.
    1324:	8b ea       	ldi	r24, 0xAB	; 171
    1326:	81 93       	st	Z+, r24
			message.id.std = NODE0_ID;  // populate ID field with ID Tag
			message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
			message.dlc = 8;			 // Max length of a CAN message.
			mob_number = 4;
		
			for (i = 0; i < 8; i ++)
    1328:	e0 17       	cp	r30, r16
    132a:	f1 07       	cpc	r31, r17
    132c:	e1 f7       	brne	.-8      	; 0x1326 <main+0x36a>
			{
				data4[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			
			while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
    132e:	64 e0       	ldi	r22, 0x04	; 4
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	0e 94 bd 00 	call	0x17a	; 0x17a <can_cmd>
    1338:	81 11       	cpse	r24, r1
    133a:	f9 cf       	rjmp	.-14     	; 0x132e <main+0x372>

			while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
    133c:	64 e0       	ldi	r22, 0x04	; 4
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <can_get_status>
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	c9 f3       	breq	.-14     	; 0x133c <main+0x380>
			
			send_now = 0;
    134a:	19 86       	std	Y+9, r1	; 0x09
		}
				
		if (send_hk == 1)		// send housekeeping back to the OBC!
    134c:	fa 85       	ldd	r31, Y+10	; 0x0a
    134e:	f1 30       	cpi	r31, 0x01	; 1
    1350:	39 f5       	brne	.+78     	; 0x13a0 <main+0x3e4>
		{
			message.pt_data = &data4[0]; // point message object to first element of data buffer
    1352:	ec e1       	ldi	r30, 0x1C	; 28
    1354:	f1 e0       	ldi	r31, 0x01	; 1
    1356:	d5 01       	movw	r26, r10
    1358:	ed 93       	st	X+, r30
    135a:	fc 93       	st	X, r31
			message.ctrl.ide = 0;		 // standard can frame type (2.0a)
    135c:	d4 01       	movw	r26, r8
    135e:	1c 92       	st	X, r1
			message.id.std = NODE0_ID;  // populate id field with id tag
    1360:	8a e0       	ldi	r24, 0x0A	; 10
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	f6 01       	movw	r30, r12
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
			message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
    136a:	82 e0       	ldi	r24, 0x02	; 2
    136c:	d3 01       	movw	r26, r6
    136e:	8c 93       	st	X, r24
			message.dlc = 8;			 // max length of a can message.
    1370:	f2 01       	movw	r30, r4
    1372:	20 82       	st	Z, r2
    1374:	ec e1       	ldi	r30, 0x1C	; 28
    1376:	f1 e0       	ldi	r31, 0x01	; 1
			mob_number = 4;
		
			for (i = 0; i < 8; i ++)
			{
				data4[i] = 0xF0;		// message to be sent back to the OBC.
    1378:	80 ef       	ldi	r24, 0xF0	; 240
    137a:	81 93       	st	Z+, r24
			message.id.std = NODE0_ID;  // populate id field with id tag
			message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
			message.dlc = 8;			 // max length of a can message.
			mob_number = 4;
		
			for (i = 0; i < 8; i ++)
    137c:	e0 17       	cp	r30, r16
    137e:	f1 07       	cpc	r31, r17
    1380:	e1 f7       	brne	.-8      	; 0x137a <main+0x3be>
			{
				data4[i] = 0xF0;		// message to be sent back to the OBC.
			}
		
			while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for mob4 to configure
    1382:	64 e0       	ldi	r22, 0x04	; 4
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	0e 94 bd 00 	call	0x17a	; 0x17a <can_cmd>
    138c:	81 11       	cpse	r24, r1
    138e:	f9 cf       	rjmp	.-14     	; 0x1382 <main+0x3c6>
		
			while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
    1390:	64 e0       	ldi	r22, 0x04	; 4
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <can_get_status>
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	c9 f3       	breq	.-14     	; 0x1390 <main+0x3d4>
		
			send_hk = 0;
    139e:	1a 86       	std	Y+10, r1	; 0x0a
		}
		
		if (send_data == 1)		// send housekeeping back to the OBC!
    13a0:	fb 85       	ldd	r31, Y+11	; 0x0b
    13a2:	f1 30       	cpi	r31, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <main+0x3ec>
    13a6:	af ce       	rjmp	.-674    	; 0x1106 <main+0x14a>
		{
			message.pt_data = &data4[0]; // point message object to first element of data buffer
    13a8:	ec e1       	ldi	r30, 0x1C	; 28
    13aa:	f1 e0       	ldi	r31, 0x01	; 1
    13ac:	d5 01       	movw	r26, r10
    13ae:	ed 93       	st	X+, r30
    13b0:	fc 93       	st	X, r31
			message.ctrl.ide = 0;		 // standard can frame type (2.0a)
    13b2:	d4 01       	movw	r26, r8
    13b4:	1c 92       	st	X, r1
			message.id.std = NODE0_ID;  // populate id field with id tag
    13b6:	8a e0       	ldi	r24, 0x0A	; 10
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	f6 01       	movw	r30, r12
    13bc:	91 83       	std	Z+1, r25	; 0x01
    13be:	80 83       	st	Z, r24
			message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	d3 01       	movw	r26, r6
    13c4:	8c 93       	st	X, r24
			message.dlc = 8;			 // max length of a can message.
    13c6:	f2 01       	movw	r30, r4
    13c8:	20 82       	st	Z, r2
    13ca:	ec e1       	ldi	r30, 0x1C	; 28
    13cc:	f1 e0       	ldi	r31, 0x01	; 1
			mob_number = 4;
			
			for (i = 0; i < 8; i ++)
			{
				data4[i] = 0x00;		// Rest of the message should be zeros.
    13ce:	11 92       	st	Z+, r1
			message.id.std = NODE0_ID;  // populate id field with id tag
			message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
			message.dlc = 8;			 // max length of a can message.
			mob_number = 4;
			
			for (i = 0; i < 8; i ++)
    13d0:	e0 17       	cp	r30, r16
    13d2:	f1 07       	cpc	r31, r17
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <main+0x412>
			{
				data4[i] = 0x00;		// Rest of the message should be zeros.
			}
			
			adc_read(&data4[0]);		// Read data from the ADC. This will put 10 bits into data4.
    13d6:	8c e1       	ldi	r24, 0x1C	; 28
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 64 00 	call	0xc8	; 0xc8 <adc_read>
			
			data4[3] = 0x55;				// Data message type indicator.
    13de:	85 e5       	ldi	r24, 0x55	; 85
    13e0:	af e1       	ldi	r26, 0x1F	; 31
    13e2:	b1 e0       	ldi	r27, 0x01	; 1
    13e4:	8c 93       	st	X, r24
			
			while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for mob4 to configure
    13e6:	64 e0       	ldi	r22, 0x04	; 4
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 bd 00 	call	0x17a	; 0x17a <can_cmd>
    13f0:	81 11       	cpse	r24, r1
    13f2:	f9 cf       	rjmp	.-14     	; 0x13e6 <main+0x42a>
			
			while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
    13f4:	64 e0       	ldi	r22, 0x04	; 4
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	91 e0       	ldi	r25, 0x01	; 1
    13fa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <can_get_status>
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	c9 f3       	breq	.-14     	; 0x13f4 <main+0x438>
    1402:	80 ce       	rjmp	.-768    	; 0x1104 <main+0x148>

00001404 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	8f 93       	push	r24
	CTC_flag = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 2c 01 	sts	0x012C, r24
}
    1416:	8f 91       	pop	r24
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    1422:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    1426:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	80 93 81 00 	sts	0x0081, r24
    1430:	08 95       	ret

00001432 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    1432:	10 92 2c 01 	sts	0x012C, r1
	TCNT1 = 0x0000; //Clear timer
    1436:	10 92 85 00 	sts	0x0085, r1
    143a:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    143e:	90 93 89 00 	sts	0x0089, r25
    1442:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    144c:	80 91 2c 01 	lds	r24, 0x012C
    1450:	88 23       	and	r24, r24
    1452:	e1 f3       	breq	.-8      	; 0x144c <delay_us+0x1a>
}
    1454:	08 95       	ret

00001456 <delay_ms>:

void delay_ms(uint16_t ms) {
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	51 f0       	breq	.+20     	; 0x1478 <delay_ms+0x22>
    1464:	c0 e0       	ldi	r28, 0x00	; 0
    1466:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    1468:	88 ee       	ldi	r24, 0xE8	; 232
    146a:	93 e0       	ldi	r25, 0x03	; 3
    146c:	0e 94 19 0a 	call	0x1432	; 0x1432 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    1470:	21 96       	adiw	r28, 0x01	; 1
    1472:	c0 17       	cp	r28, r16
    1474:	d1 07       	cpc	r29, r17
    1476:	c1 f7       	brne	.-16     	; 0x1468 <delay_ms+0x12>
		delay_us(1000);
	}
}
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <__tablejump2__>:
    1482:	ee 0f       	add	r30, r30
    1484:	ff 1f       	adc	r31, r31

00001486 <__tablejump__>:
    1486:	05 90       	lpm	r0, Z+
    1488:	f4 91       	lpm	r31, Z
    148a:	e0 2d       	mov	r30, r0
    148c:	09 94       	ijmp

0000148e <_exit>:
    148e:	f8 94       	cli

00001490 <__stop_program>:
    1490:	ff cf       	rjmp	.-2      	; 0x1490 <__stop_program>
