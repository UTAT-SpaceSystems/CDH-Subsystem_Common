
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001976  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000059  00800100  00800100  000019ea  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000019ea  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000248  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002a81  00000000  00000000  00001c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000d45  00000000  00000000  000046e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000f0a  00000000  00000000  00005428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004f8  00000000  00000000  00006334  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000006f2  00000000  00000000  0000682c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001bd7  00000000  00000000  00006f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000200  00000000  00000000  00008af5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	d9 02       	muls	r29, r25
      7e:	6b 03       	fmul	r22, r19
      80:	f5 03       	fmuls	r23, r21
      82:	69 04       	cpc	r6, r9
      84:	a9 04       	cpc	r10, r9
      86:	25 05       	cpc	r18, r5
      88:	a2 05       	cpc	r26, r2
      8a:	3f 06       	cpc	r3, r31
      8c:	e5 06       	cpc	r14, r21
      8e:	d3 02       	muls	r29, r19
      90:	ee 07       	cpc	r30, r30

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a9 35       	cpi	r26, 0x59	; 89
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 ca 09 	call	0x1394	; 0x1394 <main>
      b2:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
	uint8_t i = 0;
	
	message.pt_data = &data0[0]; // point message object to first element of data buffer
      d2:	8d e2       	ldi	r24, 0x2D	; 45
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	90 93 28 01 	sts	0x0128, r25
      da:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      de:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
      e2:	84 e1       	ldi	r24, 0x14	; 20
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	90 93 23 01 	sts	0x0123, r25
      ea:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
      ee:	85 e0       	ldi	r24, 0x05	; 5
      f0:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
      f4:	88 e0       	ldi	r24, 0x08	; 8
      f6:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
      fa:	10 92 4f 01 	sts	0x014F, r1
	
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	80 e2       	ldi	r24, 0x20	; 32
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	0e 94 bb 08 	call	0x1176	; 0x1176 <can_get_status>
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	09 f4       	brne	.+2      	; 0x10e <can_check_general+0x40>
     10c:	a7 c0       	rjmp	.+334    	; 0x25c <can_check_general+0x18e>
	{
		if(message.status == MOB_RX_COMPLETED)
     10e:	80 91 29 01 	lds	r24, 0x0129
     112:	80 32       	cpi	r24, 0x20	; 32
     114:	09 f0       	breq	.+2      	; 0x118 <can_check_general+0x4a>
     116:	80 c0       	rjmp	.+256    	; 0x218 <can_check_general+0x14a>
     118:	a0 91 27 01 	lds	r26, 0x0127
     11c:	b0 91 28 01 	lds	r27, 0x0128
     120:	ce e3       	ldi	r28, 0x3E	; 62
     122:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     124:	e6 e3       	ldi	r30, 0x36	; 54
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	8d 91       	ld	r24, X+
     12a:	81 93       	st	Z+, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
     12c:	ec 17       	cp	r30, r28
     12e:	fd 07       	cpc	r31, r29
     130:	d9 f7       	brne	.-10     	; 0x128 <can_check_general+0x5a>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
			
			if ((receive_arr[0] == 0xFF) && (receive_arr[1] == 0xFF) && (receive_arr[2] == 0xFF) && (receive_arr[3] == 0xFF)
     132:	80 91 36 01 	lds	r24, 0x0136
     136:	8f 3f       	cpi	r24, 0xFF	; 255
     138:	a1 f5       	brne	.+104    	; 0x1a2 <can_check_general+0xd4>
     13a:	80 91 37 01 	lds	r24, 0x0137
     13e:	8f 3f       	cpi	r24, 0xFF	; 255
     140:	09 f0       	breq	.+2      	; 0x144 <can_check_general+0x76>
     142:	89 c0       	rjmp	.+274    	; 0x256 <can_check_general+0x188>
     144:	80 91 38 01 	lds	r24, 0x0138
     148:	8f 3f       	cpi	r24, 0xFF	; 255
     14a:	09 f0       	breq	.+2      	; 0x14e <can_check_general+0x80>
     14c:	84 c0       	rjmp	.+264    	; 0x256 <can_check_general+0x188>
     14e:	80 91 39 01 	lds	r24, 0x0139
     152:	8f 3f       	cpi	r24, 0xFF	; 255
     154:	09 f0       	breq	.+2      	; 0x158 <can_check_general+0x8a>
     156:	7f c0       	rjmp	.+254    	; 0x256 <can_check_general+0x188>
			&& (receive_arr[4] == 0xFF) && (receive_arr[5] == 0xFF) && (receive_arr[6] == 0xFF) && (receive_arr[7] == 0xFF))
     158:	80 91 3a 01 	lds	r24, 0x013A
     15c:	8f 3f       	cpi	r24, 0xFF	; 255
     15e:	09 f0       	breq	.+2      	; 0x162 <can_check_general+0x94>
     160:	7a c0       	rjmp	.+244    	; 0x256 <can_check_general+0x188>
     162:	80 91 3b 01 	lds	r24, 0x013B
     166:	8f 3f       	cpi	r24, 0xFF	; 255
     168:	09 f0       	breq	.+2      	; 0x16c <can_check_general+0x9e>
     16a:	75 c0       	rjmp	.+234    	; 0x256 <can_check_general+0x188>
     16c:	80 91 3c 01 	lds	r24, 0x013C
     170:	8f 3f       	cpi	r24, 0xFF	; 255
     172:	09 f0       	breq	.+2      	; 0x176 <can_check_general+0xa8>
     174:	70 c0       	rjmp	.+224    	; 0x256 <can_check_general+0x188>
     176:	80 91 3d 01 	lds	r24, 0x013D
     17a:	8f 3f       	cpi	r24, 0xFF	; 255
     17c:	09 f0       	breq	.+2      	; 0x180 <can_check_general+0xb2>
     17e:	6b c0       	rjmp	.+214    	; 0x256 <can_check_general+0x188>
			{
				LED_toggle(LED3);	//Toggle LED3 when the appropriate message is received.
     180:	83 e0       	ldi	r24, 0x03	; 3
     182:	0e 94 af 09 	call	0x135e	; 0x135e <LED_toggle>
				delay_ms(100);
     186:	84 e6       	ldi	r24, 0x64	; 100
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
				LED_toggle(LED3);
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	0e 94 af 09 	call	0x135e	; 0x135e <LED_toggle>
				delay_ms(100);
     194:	84 e6       	ldi	r24, 0x64	; 100
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
				send_now = 1;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 93 2c 01 	sts	0x012C, r24
			}
			
			if ((receive_arr[0] == 0x55) && (receive_arr[1] == 0x55) && (receive_arr[2] == 0x55) && (receive_arr[3] == 0x55)
     1a2:	80 91 36 01 	lds	r24, 0x0136
     1a6:	85 35       	cpi	r24, 0x55	; 85
     1a8:	09 f0       	breq	.+2      	; 0x1ac <can_check_general+0xde>
     1aa:	55 c0       	rjmp	.+170    	; 0x256 <can_check_general+0x188>
     1ac:	80 91 37 01 	lds	r24, 0x0137
     1b0:	85 35       	cpi	r24, 0x55	; 85
     1b2:	09 f0       	breq	.+2      	; 0x1b6 <can_check_general+0xe8>
     1b4:	50 c0       	rjmp	.+160    	; 0x256 <can_check_general+0x188>
     1b6:	80 91 38 01 	lds	r24, 0x0138
     1ba:	85 35       	cpi	r24, 0x55	; 85
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <can_check_general+0xf2>
     1be:	4b c0       	rjmp	.+150    	; 0x256 <can_check_general+0x188>
     1c0:	80 91 39 01 	lds	r24, 0x0139
     1c4:	85 35       	cpi	r24, 0x55	; 85
     1c6:	09 f0       	breq	.+2      	; 0x1ca <can_check_general+0xfc>
     1c8:	46 c0       	rjmp	.+140    	; 0x256 <can_check_general+0x188>
			&& (receive_arr[4] == 0x55) && (receive_arr[5] == 0x55) && (receive_arr[6] == 0x55) && (receive_arr[7] == 0x55))
     1ca:	80 91 3a 01 	lds	r24, 0x013A
     1ce:	85 35       	cpi	r24, 0x55	; 85
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <can_check_general+0x106>
     1d2:	41 c0       	rjmp	.+130    	; 0x256 <can_check_general+0x188>
     1d4:	80 91 3b 01 	lds	r24, 0x013B
     1d8:	85 35       	cpi	r24, 0x55	; 85
     1da:	e9 f5       	brne	.+122    	; 0x256 <can_check_general+0x188>
     1dc:	80 91 3c 01 	lds	r24, 0x013C
     1e0:	85 35       	cpi	r24, 0x55	; 85
     1e2:	c9 f5       	brne	.+114    	; 0x256 <can_check_general+0x188>
     1e4:	80 91 3d 01 	lds	r24, 0x013D
     1e8:	85 35       	cpi	r24, 0x55	; 85
     1ea:	a9 f5       	brne	.+106    	; 0x256 <can_check_general+0x188>
			{
				LED_toggle(LED7);	//Toggle LED7 when the appropriate message is received.
     1ec:	87 e0       	ldi	r24, 0x07	; 7
     1ee:	0e 94 af 09 	call	0x135e	; 0x135e <LED_toggle>
				delay_ms(100);
     1f2:	84 e6       	ldi	r24, 0x64	; 100
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
				LED_toggle(LED7);
     1fa:	87 e0       	ldi	r24, 0x07	; 7
     1fc:	0e 94 af 09 	call	0x135e	; 0x135e <LED_toggle>
				delay_ms(100);
     200:	84 e6       	ldi	r24, 0x64	; 100
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
				send_data = 1;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 46 01 	sts	0x0146, r24
     20e:	23 c0       	rjmp	.+70     	; 0x256 <can_check_general+0x188>
			}
			
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     210:	11 92       	st	Z+, r1
				LED_toggle(LED7);
				delay_ms(100);
				send_data = 1;
			}
			
			for (i = 0; i < 8; i ++)
     212:	ec 17       	cp	r30, r28
     214:	fd 07       	cpc	r31, r29
     216:	e1 f7       	brne	.-8      	; 0x210 <can_check_general+0x142>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     218:	8d e2       	ldi	r24, 0x2D	; 45
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	90 93 28 01 	sts	0x0128, r25
     220:	80 93 27 01 	sts	0x0127, r24
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     224:	10 92 2b 01 	sts	0x012B, r1
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     228:	84 e1       	ldi	r24, 0x14	; 20
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	90 93 23 01 	sts	0x0123, r25
     230:	80 93 22 01 	sts	0x0122, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     234:	85 e0       	ldi	r24, 0x05	; 5
     236:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	80 93 26 01 	sts	0x0126, r24
		mob_number = 0;
     240:	10 92 4f 01 	sts	0x014F, r1
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     244:	60 91 4f 01 	lds	r22, 0x014F
     248:	80 e2       	ldi	r24, 0x20	; 32
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 8f 02 	call	0x51e	; 0x51e <can_cmd>
     250:	81 11       	cpse	r24, r1
     252:	f8 cf       	rjmp	.-16     	; 0x244 <can_check_general+0x176>
     254:	03 c0       	rjmp	.+6      	; 0x25c <can_check_general+0x18e>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     256:	e6 e3       	ldi	r30, 0x36	; 54
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	da cf       	rjmp	.-76     	; 0x210 <can_check_general+0x142>
		mob_number = 0;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
	uint8_t i = 0;
	
	message.pt_data = &data5[0]; // point message object to first element of data buffer
     266:	87 e4       	ldi	r24, 0x47	; 71
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	90 93 28 01 	sts	0x0128, r25
     26e:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     272:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;  // populate ID field with ID Tag
     276:	89 e1       	ldi	r24, 0x19	; 25
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	90 93 23 01 	sts	0x0123, r25
     27e:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     282:	85 e0       	ldi	r24, 0x05	; 5
     284:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     288:	98 e0       	ldi	r25, 0x08	; 8
     28a:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     28e:	80 93 4f 01 	sts	0x014F, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
     292:	65 e0       	ldi	r22, 0x05	; 5
     294:	80 e2       	ldi	r24, 0x20	; 32
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0e 94 bb 08 	call	0x1176	; 0x1176 <can_get_status>
     29c:	81 30       	cpi	r24, 0x01	; 1
     29e:	09 f4       	brne	.+2      	; 0x2a2 <can_check_housekeep+0x40>
     2a0:	6f c0       	rjmp	.+222    	; 0x380 <can_check_housekeep+0x11e>
	{
		if(message.status == MOB_RX_COMPLETED)
     2a2:	80 91 29 01 	lds	r24, 0x0129
     2a6:	80 32       	cpi	r24, 0x20	; 32
     2a8:	09 f0       	breq	.+2      	; 0x2ac <can_check_housekeep+0x4a>
     2aa:	48 c0       	rjmp	.+144    	; 0x33c <can_check_housekeep+0xda>
     2ac:	a0 91 27 01 	lds	r26, 0x0127
     2b0:	b0 91 28 01 	lds	r27, 0x0128
     2b4:	ce e3       	ldi	r28, 0x3E	; 62
     2b6:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     2b8:	e6 e3       	ldi	r30, 0x36	; 54
     2ba:	f1 e0       	ldi	r31, 0x01	; 1
     2bc:	8d 91       	ld	r24, X+
     2be:	81 93       	st	Z+, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
     2c0:	ec 17       	cp	r30, r28
     2c2:	fd 07       	cpc	r31, r29
     2c4:	d9 f7       	brne	.-10     	; 0x2bc <can_check_housekeep+0x5a>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
			
			if ((receive_arr[0] == 0x0F) && (receive_arr[1] == 0x0F) && (receive_arr[2] == 0x0F) && (receive_arr[3] == 0x0F)
     2c6:	80 91 36 01 	lds	r24, 0x0136
     2ca:	8f 30       	cpi	r24, 0x0F	; 15
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <can_check_housekeep+0x6e>
     2ce:	55 c0       	rjmp	.+170    	; 0x37a <can_check_housekeep+0x118>
     2d0:	80 91 37 01 	lds	r24, 0x0137
     2d4:	8f 30       	cpi	r24, 0x0F	; 15
     2d6:	09 f0       	breq	.+2      	; 0x2da <can_check_housekeep+0x78>
     2d8:	50 c0       	rjmp	.+160    	; 0x37a <can_check_housekeep+0x118>
     2da:	80 91 38 01 	lds	r24, 0x0138
     2de:	8f 30       	cpi	r24, 0x0F	; 15
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <can_check_housekeep+0x82>
     2e2:	4b c0       	rjmp	.+150    	; 0x37a <can_check_housekeep+0x118>
     2e4:	80 91 39 01 	lds	r24, 0x0139
     2e8:	8f 30       	cpi	r24, 0x0F	; 15
     2ea:	09 f0       	breq	.+2      	; 0x2ee <can_check_housekeep+0x8c>
     2ec:	46 c0       	rjmp	.+140    	; 0x37a <can_check_housekeep+0x118>
			&& (receive_arr[4] == 0x0F) && (receive_arr[5] == 0x0F) && (receive_arr[6] == 0x0F) && (receive_arr[7] == 0x0F))
     2ee:	80 91 3a 01 	lds	r24, 0x013A
     2f2:	8f 30       	cpi	r24, 0x0F	; 15
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <can_check_housekeep+0x96>
     2f6:	41 c0       	rjmp	.+130    	; 0x37a <can_check_housekeep+0x118>
     2f8:	80 91 3b 01 	lds	r24, 0x013B
     2fc:	8f 30       	cpi	r24, 0x0F	; 15
     2fe:	e9 f5       	brne	.+122    	; 0x37a <can_check_housekeep+0x118>
     300:	80 91 3c 01 	lds	r24, 0x013C
     304:	8f 30       	cpi	r24, 0x0F	; 15
     306:	c9 f5       	brne	.+114    	; 0x37a <can_check_housekeep+0x118>
     308:	80 91 3d 01 	lds	r24, 0x013D
     30c:	8f 30       	cpi	r24, 0x0F	; 15
     30e:	a9 f5       	brne	.+106    	; 0x37a <can_check_housekeep+0x118>
			{
				LED_toggle(LED6);	//Toggle LED5 when housekeeping was requested.
     310:	86 e0       	ldi	r24, 0x06	; 6
     312:	0e 94 af 09 	call	0x135e	; 0x135e <LED_toggle>
				delay_ms(100);
     316:	84 e6       	ldi	r24, 0x64	; 100
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
				LED_toggle(LED6);
     31e:	86 e0       	ldi	r24, 0x06	; 6
     320:	0e 94 af 09 	call	0x135e	; 0x135e <LED_toggle>
				delay_ms(100);
     324:	84 e6       	ldi	r24, 0x64	; 100
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
				send_hk = 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 35 01 	sts	0x0135, r24
     332:	23 c0       	rjmp	.+70     	; 0x37a <can_check_housekeep+0x118>
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     334:	11 92       	st	Z+, r1
				delay_ms(100);
				LED_toggle(LED6);
				delay_ms(100);
				send_hk = 1;
			}
			for (i = 0; i < 8; i ++)
     336:	ec 17       	cp	r30, r28
     338:	fd 07       	cpc	r31, r29
     33a:	e1 f7       	brne	.-8      	; 0x334 <can_check_housekeep+0xd2>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data5[0]; // point message object to first element of data buffer
     33c:	87 e4       	ldi	r24, 0x47	; 71
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	90 93 28 01 	sts	0x0128, r25
     344:	80 93 27 01 	sts	0x0127, r24
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     348:	10 92 2b 01 	sts	0x012B, r1
		message.id.std = SUB0_ID5;  // populate ID field with ID Tag
     34c:	89 e1       	ldi	r24, 0x19	; 25
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	90 93 23 01 	sts	0x0123, r25
     354:	80 93 22 01 	sts	0x0122, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     358:	85 e0       	ldi	r24, 0x05	; 5
     35a:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     35e:	98 e0       	ldi	r25, 0x08	; 8
     360:	90 93 26 01 	sts	0x0126, r25
		mob_number = 5;
     364:	80 93 4f 01 	sts	0x014F, r24
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     368:	60 91 4f 01 	lds	r22, 0x014F
     36c:	80 e2       	ldi	r24, 0x20	; 32
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 8f 02 	call	0x51e	; 0x51e <can_cmd>
     374:	81 11       	cpse	r24, r1
     376:	f8 cf       	rjmp	.-16     	; 0x368 <can_check_housekeep+0x106>
     378:	03 c0       	rjmp	.+6      	; 0x380 <can_check_housekeep+0x11e>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     37a:	e6 e3       	ldi	r30, 0x36	; 54
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	da cf       	rjmp	.-76     	; 0x334 <can_check_housekeep+0xd2>
		mob_number = 5;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     386:	28 e1       	ldi	r18, 0x18	; 24
     388:	31 e0       	ldi	r19, 0x01	; 1
     38a:	30 93 28 01 	sts	0x0128, r19
     38e:	20 93 27 01 	sts	0x0127, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     392:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = id;  // populate ID field with ID Tag
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	70 93 23 01 	sts	0x0123, r23
     39c:	60 93 22 01 	sts	0x0122, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     3a0:	22 e0       	ldi	r18, 0x02	; 2
     3a2:	20 93 21 01 	sts	0x0121, r18
	message.dlc = 8;			 // Max length of a CAN message.
     3a6:	28 e0       	ldi	r18, 0x08	; 8
     3a8:	20 93 26 01 	sts	0x0126, r18
	mob_number = 4;
     3ac:	24 e0       	ldi	r18, 0x04	; 4
     3ae:	20 93 4f 01 	sts	0x014F, r18
     3b2:	dc 01       	movw	r26, r24
     3b4:	e8 e1       	ldi	r30, 0x18	; 24
     3b6:	f1 e0       	ldi	r31, 0x01	; 1
     3b8:	80 e2       	ldi	r24, 0x20	; 32
     3ba:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     3bc:	2d 91       	ld	r18, X+
     3be:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     3c0:	e8 17       	cp	r30, r24
     3c2:	f9 07       	cpc	r31, r25
     3c4:	d9 f7       	brne	.-10     	; 0x3bc <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     3c6:	60 91 4f 01 	lds	r22, 0x014F
     3ca:	80 e2       	ldi	r24, 0x20	; 32
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 8f 02 	call	0x51e	; 0x51e <can_cmd>
     3d2:	81 11       	cpse	r24, r1
     3d4:	f8 cf       	rjmp	.-16     	; 0x3c6 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     3d6:	60 91 4f 01 	lds	r22, 0x014F
     3da:	80 e2       	ldi	r24, 0x20	; 32
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 bb 08 	call	0x1176	; 0x1176 <can_get_status>
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	c1 f3       	breq	.-16     	; 0x3d6 <can_send_message+0x50>

	return;
}
     3e6:	08 95       	ret

000003e8 <can_init_mobs>:
void can_init_mobs(void)
{
	/* INITIALIZE MOB0 */
	uint8_t i;

	message.pt_data = &data0[0]; // point message object to first element of data buffer
     3e8:	8d e2       	ldi	r24, 0x2D	; 45
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	90 93 28 01 	sts	0x0128, r25
     3f0:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3f4:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     3f8:	84 e1       	ldi	r24, 0x14	; 20
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	90 93 23 01 	sts	0x0123, r25
     400:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     404:	85 e0       	ldi	r24, 0x05	; 5
     406:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     40a:	88 e0       	ldi	r24, 0x08	; 8
     40c:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
     410:	10 92 4f 01 	sts	0x014F, r1
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     414:	60 91 4f 01 	lds	r22, 0x014F
     418:	80 e2       	ldi	r24, 0x20	; 32
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 8f 02 	call	0x51e	; 0x51e <can_cmd>
     420:	81 11       	cpse	r24, r1
     422:	f8 cf       	rjmp	.-16     	; 0x414 <can_init_mobs+0x2c>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     424:	87 e4       	ldi	r24, 0x47	; 71
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	90 93 28 01 	sts	0x0128, r25
     42c:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     430:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
     434:	89 e1       	ldi	r24, 0x19	; 25
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	90 93 23 01 	sts	0x0123, r25
     43c:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     440:	85 e0       	ldi	r24, 0x05	; 5
     442:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;				// Max length of a CAN message.
     446:	98 e0       	ldi	r25, 0x08	; 8
     448:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     44c:	80 93 4f 01 	sts	0x014F, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     450:	60 91 4f 01 	lds	r22, 0x014F
     454:	80 e2       	ldi	r24, 0x20	; 32
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	0e 94 8f 02 	call	0x51e	; 0x51e <can_cmd>
     45c:	81 11       	cpse	r24, r1
     45e:	f8 cf       	rjmp	.-16     	; 0x450 <can_init_mobs+0x68>
     460:	e6 e3       	ldi	r30, 0x36	; 54
     462:	f1 e0       	ldi	r31, 0x01	; 1
     464:	8e e3       	ldi	r24, 0x3E	; 62
     466:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     468:	11 92       	st	Z+, r1
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     46a:	e8 17       	cp	r30, r24
     46c:	f9 07       	cpc	r31, r25
     46e:	e1 f7       	brne	.-8      	; 0x468 <can_init_mobs+0x80>
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
	}
	
	send_now = 0;
     470:	10 92 2c 01 	sts	0x012C, r1
	send_hk = 0;
     474:	10 92 35 01 	sts	0x0135, r1
	send_data = 0;
     478:	10 92 46 01 	sts	0x0146, r1
     47c:	08 95       	ret

0000047e <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     47e:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     480:	ad ee       	ldi	r26, 0xED	; 237
     482:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     484:	3e ee       	ldi	r19, 0xEE	; 238
     486:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     488:	98 2f       	mov	r25, r24
     48a:	92 95       	swap	r25
     48c:	90 7f       	andi	r25, 0xF0	; 240
     48e:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     490:	e3 2f       	mov	r30, r19
     492:	f2 2f       	mov	r31, r18
     494:	11 92       	st	Z+, r1
     496:	e8 3f       	cpi	r30, 0xF8	; 248
     498:	f1 05       	cpc	r31, r1
     49a:	e1 f7       	brne	.-8      	; 0x494 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     49c:	8f 5f       	subi	r24, 0xFF	; 255
     49e:	86 30       	cpi	r24, 0x06	; 6
     4a0:	99 f7       	brne	.-26     	; 0x488 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     4a2:	08 95       	ret

000004a4 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     4a4:	80 91 ef 00 	lds	r24, 0x00EF
     4a8:	80 7c       	andi	r24, 0xC0	; 192
     4aa:	61 f0       	breq	.+24     	; 0x4c4 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     4ac:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     4b0:	98 2f       	mov	r25, r24
     4b2:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     4b4:	28 2f       	mov	r18, r24
     4b6:	20 76       	andi	r18, 0x60	; 96
     4b8:	20 32       	cpi	r18, 0x20	; 32
     4ba:	31 f0       	breq	.+12     	; 0x4c8 <can_get_mob_status+0x24>
     4bc:	90 34       	cpi	r25, 0x40	; 64
     4be:	31 f0       	breq	.+12     	; 0x4cc <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     4c0:	8f 71       	andi	r24, 0x1F	; 31
     4c2:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     4c8:	89 2f       	mov	r24, r25
     4ca:	08 95       	ret
     4cc:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     4ce:	08 95       	ret

000004d0 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     4d0:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     4d2:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     4d4:	aa ef       	ldi	r26, 0xFA	; 250
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	9c 91       	ld	r25, X
     4da:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     4dc:	8f 5f       	subi	r24, 0xFF	; 255
     4de:	88 30       	cpi	r24, 0x08	; 8
     4e0:	d9 f7       	brne	.-10     	; 0x4d8 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     4e2:	08 95       	ret

000004e4 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	80 93 e2 00 	sts	0x00E2, r24
     4f0:	8c e0       	ldi	r24, 0x0C	; 12
     4f2:	80 93 e3 00 	sts	0x00E3, r24
     4f6:	87 e3       	ldi	r24, 0x37	; 55
     4f8:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	08 95       	ret

00000500 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     500:	0e 94 72 02 	call	0x4e4	; 0x4e4 <can_fixed_baudrate>
     504:	88 23       	and	r24, r24
     506:	49 f0       	breq	.+18     	; 0x51a <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     508:	0e 94 3f 02 	call	0x47e	; 0x47e <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     50c:	e8 ed       	ldi	r30, 0xD8	; 216
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	80 81       	ld	r24, Z
     512:	82 60       	ori	r24, 0x02	; 2
     514:	80 83       	st	Z, r24
    return (1);
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     51a:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     51c:	08 95       	ret

0000051e <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	1f 92       	push	r1
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     52a:	11 96       	adiw	r26, 0x01	; 1
     52c:	8c 91       	ld	r24, X
     52e:	11 97       	sbiw	r26, 0x01	; 1
     530:	8c 30       	cpi	r24, 0x0C	; 12
     532:	b1 f4       	brne	.+44     	; 0x560 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     534:	19 96       	adiw	r26, 0x09	; 9
     536:	8c 91       	ld	r24, X
     538:	19 97       	sbiw	r26, 0x09	; 9
     53a:	80 36       	cpi	r24, 0x60	; 96
     53c:	69 f4       	brne	.+26     	; 0x558 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     53e:	86 2f       	mov	r24, r22
     540:	82 95       	swap	r24
     542:	80 7f       	andi	r24, 0xF0	; 240
     544:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     548:	ef ee       	ldi	r30, 0xEF	; 239
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	8f 73       	andi	r24, 0x3F	; 63
     550:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     552:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     556:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     558:	19 96       	adiw	r26, 0x09	; 9
     55a:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	07 c6       	rjmp	.+3086   	; 0x116e <__stack+0x86f>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     560:	86 2f       	mov	r24, r22
     562:	82 95       	swap	r24
     564:	80 7f       	andi	r24, 0xF0	; 240
     566:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     56a:	80 91 ef 00 	lds	r24, 0x00EF
     56e:	80 7c       	andi	r24, 0xC0	; 192
     570:	09 f0       	breq	.+2      	; 0x574 <can_cmd+0x56>
     572:	f9 c5       	rjmp	.+3058   	; 0x1166 <__stack+0x867>
    {
      cmd->status = MOB_PENDING; 
     574:	80 e6       	ldi	r24, 0x60	; 96
     576:	19 96       	adiw	r26, 0x09	; 9
     578:	8c 93       	st	X, r24
     57a:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     57c:	6c 93       	st	X, r22
      Can_clear_mob();
     57e:	ee ee       	ldi	r30, 0xEE	; 238
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	11 92       	st	Z+, r1
     584:	e8 3f       	cpi	r30, 0xF8	; 248
     586:	f1 05       	cpc	r31, r1
     588:	e1 f7       	brne	.-8      	; 0x582 <can_cmd+0x64>
          
      switch (cmd->cmd)
     58a:	11 96       	adiw	r26, 0x01	; 1
     58c:	4c 91       	ld	r20, X
     58e:	11 97       	sbiw	r26, 0x01	; 1
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	fa 01       	movw	r30, r20
     594:	31 97       	sbiw	r30, 0x01	; 1
     596:	eb 30       	cpi	r30, 0x0B	; 11
     598:	f1 05       	cpc	r31, r1
     59a:	08 f0       	brcs	.+2      	; 0x59e <can_cmd+0x80>
     59c:	e0 c5       	rjmp	.+3008   	; 0x115e <__stack+0x85f>
     59e:	e2 5c       	subi	r30, 0xC2	; 194
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     5a6:	16 96       	adiw	r26, 0x06	; 6
     5a8:	8c 91       	ld	r24, X
     5aa:	16 97       	sbiw	r26, 0x06	; 6
     5ac:	81 11       	cpse	r24, r1
     5ae:	b7 c4       	rjmp	.+2414   	; 0xf1e <__stack+0x61f>
     5b0:	c8 c4       	rjmp	.+2448   	; 0xf42 <__stack+0x643>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     5b2:	1b 96       	adiw	r26, 0x0b	; 11
     5b4:	8c 91       	ld	r24, X
     5b6:	1b 97       	sbiw	r26, 0x0b	; 11
     5b8:	88 23       	and	r24, r24
     5ba:	d9 f1       	breq	.+118    	; 0x632 <can_cmd+0x114>
     5bc:	14 96       	adiw	r26, 0x04	; 4
     5be:	9c 91       	ld	r25, X
     5c0:	14 97       	sbiw	r26, 0x04	; 4
     5c2:	92 95       	swap	r25
     5c4:	96 95       	lsr	r25
     5c6:	97 70       	andi	r25, 0x07	; 7
     5c8:	15 96       	adiw	r26, 0x05	; 5
     5ca:	8c 91       	ld	r24, X
     5cc:	15 97       	sbiw	r26, 0x05	; 5
     5ce:	88 0f       	add	r24, r24
     5d0:	88 0f       	add	r24, r24
     5d2:	88 0f       	add	r24, r24
     5d4:	89 0f       	add	r24, r25
     5d6:	80 93 f3 00 	sts	0x00F3, r24
     5da:	13 96       	adiw	r26, 0x03	; 3
     5dc:	9c 91       	ld	r25, X
     5de:	13 97       	sbiw	r26, 0x03	; 3
     5e0:	92 95       	swap	r25
     5e2:	96 95       	lsr	r25
     5e4:	97 70       	andi	r25, 0x07	; 7
     5e6:	14 96       	adiw	r26, 0x04	; 4
     5e8:	8c 91       	ld	r24, X
     5ea:	14 97       	sbiw	r26, 0x04	; 4
     5ec:	88 0f       	add	r24, r24
     5ee:	88 0f       	add	r24, r24
     5f0:	88 0f       	add	r24, r24
     5f2:	89 0f       	add	r24, r25
     5f4:	80 93 f2 00 	sts	0x00F2, r24
     5f8:	12 96       	adiw	r26, 0x02	; 2
     5fa:	9c 91       	ld	r25, X
     5fc:	12 97       	sbiw	r26, 0x02	; 2
     5fe:	92 95       	swap	r25
     600:	96 95       	lsr	r25
     602:	97 70       	andi	r25, 0x07	; 7
     604:	13 96       	adiw	r26, 0x03	; 3
     606:	8c 91       	ld	r24, X
     608:	13 97       	sbiw	r26, 0x03	; 3
     60a:	88 0f       	add	r24, r24
     60c:	88 0f       	add	r24, r24
     60e:	88 0f       	add	r24, r24
     610:	89 0f       	add	r24, r25
     612:	80 93 f1 00 	sts	0x00F1, r24
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	8c 91       	ld	r24, X
     61a:	12 97       	sbiw	r26, 0x02	; 2
     61c:	88 0f       	add	r24, r24
     61e:	88 0f       	add	r24, r24
     620:	88 0f       	add	r24, r24
     622:	80 93 f0 00 	sts	0x00F0, r24
     626:	ef ee       	ldi	r30, 0xEF	; 239
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	80 61       	ori	r24, 0x10	; 16
     62e:	80 83       	st	Z, r24
     630:	1c c0       	rjmp	.+56     	; 0x66a <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     632:	12 96       	adiw	r26, 0x02	; 2
     634:	8c 91       	ld	r24, X
     636:	12 97       	sbiw	r26, 0x02	; 2
     638:	86 95       	lsr	r24
     63a:	86 95       	lsr	r24
     63c:	86 95       	lsr	r24
     63e:	13 96       	adiw	r26, 0x03	; 3
     640:	9c 91       	ld	r25, X
     642:	13 97       	sbiw	r26, 0x03	; 3
     644:	20 e2       	ldi	r18, 0x20	; 32
     646:	92 9f       	mul	r25, r18
     648:	80 0d       	add	r24, r0
     64a:	11 24       	eor	r1, r1
     64c:	80 93 f3 00 	sts	0x00F3, r24
     650:	12 96       	adiw	r26, 0x02	; 2
     652:	8c 91       	ld	r24, X
     654:	12 97       	sbiw	r26, 0x02	; 2
     656:	82 95       	swap	r24
     658:	88 0f       	add	r24, r24
     65a:	80 7e       	andi	r24, 0xE0	; 224
     65c:	80 93 f2 00 	sts	0x00F2, r24
     660:	ef ee       	ldi	r30, 0xEF	; 239
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	8f 7e       	andi	r24, 0xEF	; 239
     668:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     66a:	16 96       	adiw	r26, 0x06	; 6
     66c:	8c 91       	ld	r24, X
     66e:	16 97       	sbiw	r26, 0x06	; 6
     670:	88 23       	and	r24, r24
     672:	91 f0       	breq	.+36     	; 0x698 <can_cmd+0x17a>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	8a ef       	ldi	r24, 0xFA	; 250
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	17 96       	adiw	r26, 0x07	; 7
     67c:	ed 91       	ld	r30, X+
     67e:	fc 91       	ld	r31, X
     680:	18 97       	sbiw	r26, 0x08	; 8
     682:	e2 0f       	add	r30, r18
     684:	f1 1d       	adc	r31, r1
     686:	30 81       	ld	r19, Z
     688:	fc 01       	movw	r30, r24
     68a:	30 83       	st	Z, r19
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	16 96       	adiw	r26, 0x06	; 6
     690:	3c 91       	ld	r19, X
     692:	16 97       	sbiw	r26, 0x06	; 6
     694:	23 17       	cp	r18, r19
     696:	88 f3       	brcs	.-30     	; 0x67a <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     698:	1a 96       	adiw	r26, 0x0a	; 10
     69a:	8c 91       	ld	r24, X
     69c:	1a 97       	sbiw	r26, 0x0a	; 10
     69e:	88 23       	and	r24, r24
     6a0:	31 f0       	breq	.+12     	; 0x6ae <can_cmd+0x190>
     6a2:	e0 ef       	ldi	r30, 0xF0	; 240
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	84 60       	ori	r24, 0x04	; 4
     6aa:	80 83       	st	Z, r24
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <can_cmd+0x19a>
            else Can_clear_rtr();    
     6ae:	e0 ef       	ldi	r30, 0xF0	; 240
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 81       	ld	r24, Z
     6b4:	8b 7f       	andi	r24, 0xFB	; 251
     6b6:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     6b8:	ef ee       	ldi	r30, 0xEF	; 239
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	90 81       	ld	r25, Z
     6be:	16 96       	adiw	r26, 0x06	; 6
     6c0:	8c 91       	ld	r24, X
     6c2:	89 2b       	or	r24, r25
     6c4:	80 83       	st	Z, r24
          Can_config_tx();
     6c6:	80 81       	ld	r24, Z
     6c8:	8f 73       	andi	r24, 0x3F	; 63
     6ca:	80 83       	st	Z, r24
     6cc:	80 81       	ld	r24, Z
     6ce:	80 64       	ori	r24, 0x40	; 64
     6d0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     6d4:	4c c5       	rjmp	.+2712   	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     6d6:	1b 96       	adiw	r26, 0x0b	; 11
     6d8:	8c 91       	ld	r24, X
     6da:	1b 97       	sbiw	r26, 0x0b	; 11
     6dc:	88 23       	and	r24, r24
     6de:	d9 f1       	breq	.+118    	; 0x756 <can_cmd+0x238>
     6e0:	14 96       	adiw	r26, 0x04	; 4
     6e2:	9c 91       	ld	r25, X
     6e4:	14 97       	sbiw	r26, 0x04	; 4
     6e6:	92 95       	swap	r25
     6e8:	96 95       	lsr	r25
     6ea:	97 70       	andi	r25, 0x07	; 7
     6ec:	15 96       	adiw	r26, 0x05	; 5
     6ee:	8c 91       	ld	r24, X
     6f0:	15 97       	sbiw	r26, 0x05	; 5
     6f2:	88 0f       	add	r24, r24
     6f4:	88 0f       	add	r24, r24
     6f6:	88 0f       	add	r24, r24
     6f8:	89 0f       	add	r24, r25
     6fa:	80 93 f3 00 	sts	0x00F3, r24
     6fe:	13 96       	adiw	r26, 0x03	; 3
     700:	9c 91       	ld	r25, X
     702:	13 97       	sbiw	r26, 0x03	; 3
     704:	92 95       	swap	r25
     706:	96 95       	lsr	r25
     708:	97 70       	andi	r25, 0x07	; 7
     70a:	14 96       	adiw	r26, 0x04	; 4
     70c:	8c 91       	ld	r24, X
     70e:	14 97       	sbiw	r26, 0x04	; 4
     710:	88 0f       	add	r24, r24
     712:	88 0f       	add	r24, r24
     714:	88 0f       	add	r24, r24
     716:	89 0f       	add	r24, r25
     718:	80 93 f2 00 	sts	0x00F2, r24
     71c:	12 96       	adiw	r26, 0x02	; 2
     71e:	9c 91       	ld	r25, X
     720:	12 97       	sbiw	r26, 0x02	; 2
     722:	92 95       	swap	r25
     724:	96 95       	lsr	r25
     726:	97 70       	andi	r25, 0x07	; 7
     728:	13 96       	adiw	r26, 0x03	; 3
     72a:	8c 91       	ld	r24, X
     72c:	13 97       	sbiw	r26, 0x03	; 3
     72e:	88 0f       	add	r24, r24
     730:	88 0f       	add	r24, r24
     732:	88 0f       	add	r24, r24
     734:	89 0f       	add	r24, r25
     736:	80 93 f1 00 	sts	0x00F1, r24
     73a:	12 96       	adiw	r26, 0x02	; 2
     73c:	8c 91       	ld	r24, X
     73e:	12 97       	sbiw	r26, 0x02	; 2
     740:	88 0f       	add	r24, r24
     742:	88 0f       	add	r24, r24
     744:	88 0f       	add	r24, r24
     746:	80 93 f0 00 	sts	0x00F0, r24
     74a:	ef ee       	ldi	r30, 0xEF	; 239
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	80 61       	ori	r24, 0x10	; 16
     752:	80 83       	st	Z, r24
     754:	1c c0       	rjmp	.+56     	; 0x78e <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     756:	12 96       	adiw	r26, 0x02	; 2
     758:	8c 91       	ld	r24, X
     75a:	12 97       	sbiw	r26, 0x02	; 2
     75c:	86 95       	lsr	r24
     75e:	86 95       	lsr	r24
     760:	86 95       	lsr	r24
     762:	13 96       	adiw	r26, 0x03	; 3
     764:	9c 91       	ld	r25, X
     766:	13 97       	sbiw	r26, 0x03	; 3
     768:	f0 e2       	ldi	r31, 0x20	; 32
     76a:	9f 9f       	mul	r25, r31
     76c:	80 0d       	add	r24, r0
     76e:	11 24       	eor	r1, r1
     770:	80 93 f3 00 	sts	0x00F3, r24
     774:	12 96       	adiw	r26, 0x02	; 2
     776:	8c 91       	ld	r24, X
     778:	12 97       	sbiw	r26, 0x02	; 2
     77a:	82 95       	swap	r24
     77c:	88 0f       	add	r24, r24
     77e:	80 7e       	andi	r24, 0xE0	; 224
     780:	80 93 f2 00 	sts	0x00F2, r24
     784:	ef ee       	ldi	r30, 0xEF	; 239
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	8f 7e       	andi	r24, 0xEF	; 239
     78c:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     78e:	16 96       	adiw	r26, 0x06	; 6
     790:	8c 91       	ld	r24, X
     792:	16 97       	sbiw	r26, 0x06	; 6
     794:	88 23       	and	r24, r24
     796:	91 f0       	breq	.+36     	; 0x7bc <can_cmd+0x29e>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	8a ef       	ldi	r24, 0xFA	; 250
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	17 96       	adiw	r26, 0x07	; 7
     7a0:	ed 91       	ld	r30, X+
     7a2:	fc 91       	ld	r31, X
     7a4:	18 97       	sbiw	r26, 0x08	; 8
     7a6:	e2 0f       	add	r30, r18
     7a8:	f1 1d       	adc	r31, r1
     7aa:	30 81       	ld	r19, Z
     7ac:	fc 01       	movw	r30, r24
     7ae:	30 83       	st	Z, r19
     7b0:	2f 5f       	subi	r18, 0xFF	; 255
     7b2:	16 96       	adiw	r26, 0x06	; 6
     7b4:	3c 91       	ld	r19, X
     7b6:	16 97       	sbiw	r26, 0x06	; 6
     7b8:	23 17       	cp	r18, r19
     7ba:	88 f3       	brcs	.-30     	; 0x79e <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     7bc:	1a 96       	adiw	r26, 0x0a	; 10
     7be:	1c 92       	st	X, r1
     7c0:	1a 97       	sbiw	r26, 0x0a	; 10
     7c2:	e0 ef       	ldi	r30, 0xF0	; 240
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	8b 7f       	andi	r24, 0xFB	; 251
     7ca:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     7cc:	ef ee       	ldi	r30, 0xEF	; 239
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	90 81       	ld	r25, Z
     7d2:	16 96       	adiw	r26, 0x06	; 6
     7d4:	8c 91       	ld	r24, X
     7d6:	89 2b       	or	r24, r25
     7d8:	80 83       	st	Z, r24
          Can_config_tx();
     7da:	80 81       	ld	r24, Z
     7dc:	8f 73       	andi	r24, 0x3F	; 63
     7de:	80 83       	st	Z, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	80 64       	ori	r24, 0x40	; 64
     7e4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     7e8:	c2 c4       	rjmp	.+2436   	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7ea:	1b 96       	adiw	r26, 0x0b	; 11
     7ec:	8c 91       	ld	r24, X
     7ee:	1b 97       	sbiw	r26, 0x0b	; 11
     7f0:	88 23       	and	r24, r24
     7f2:	d9 f1       	breq	.+118    	; 0x86a <can_cmd+0x34c>
     7f4:	14 96       	adiw	r26, 0x04	; 4
     7f6:	9c 91       	ld	r25, X
     7f8:	14 97       	sbiw	r26, 0x04	; 4
     7fa:	92 95       	swap	r25
     7fc:	96 95       	lsr	r25
     7fe:	97 70       	andi	r25, 0x07	; 7
     800:	15 96       	adiw	r26, 0x05	; 5
     802:	8c 91       	ld	r24, X
     804:	15 97       	sbiw	r26, 0x05	; 5
     806:	88 0f       	add	r24, r24
     808:	88 0f       	add	r24, r24
     80a:	88 0f       	add	r24, r24
     80c:	89 0f       	add	r24, r25
     80e:	80 93 f3 00 	sts	0x00F3, r24
     812:	13 96       	adiw	r26, 0x03	; 3
     814:	9c 91       	ld	r25, X
     816:	13 97       	sbiw	r26, 0x03	; 3
     818:	92 95       	swap	r25
     81a:	96 95       	lsr	r25
     81c:	97 70       	andi	r25, 0x07	; 7
     81e:	14 96       	adiw	r26, 0x04	; 4
     820:	8c 91       	ld	r24, X
     822:	14 97       	sbiw	r26, 0x04	; 4
     824:	88 0f       	add	r24, r24
     826:	88 0f       	add	r24, r24
     828:	88 0f       	add	r24, r24
     82a:	89 0f       	add	r24, r25
     82c:	80 93 f2 00 	sts	0x00F2, r24
     830:	12 96       	adiw	r26, 0x02	; 2
     832:	9c 91       	ld	r25, X
     834:	12 97       	sbiw	r26, 0x02	; 2
     836:	92 95       	swap	r25
     838:	96 95       	lsr	r25
     83a:	97 70       	andi	r25, 0x07	; 7
     83c:	13 96       	adiw	r26, 0x03	; 3
     83e:	8c 91       	ld	r24, X
     840:	13 97       	sbiw	r26, 0x03	; 3
     842:	88 0f       	add	r24, r24
     844:	88 0f       	add	r24, r24
     846:	88 0f       	add	r24, r24
     848:	89 0f       	add	r24, r25
     84a:	80 93 f1 00 	sts	0x00F1, r24
     84e:	12 96       	adiw	r26, 0x02	; 2
     850:	8c 91       	ld	r24, X
     852:	12 97       	sbiw	r26, 0x02	; 2
     854:	88 0f       	add	r24, r24
     856:	88 0f       	add	r24, r24
     858:	88 0f       	add	r24, r24
     85a:	80 93 f0 00 	sts	0x00F0, r24
     85e:	ef ee       	ldi	r30, 0xEF	; 239
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	80 61       	ori	r24, 0x10	; 16
     866:	80 83       	st	Z, r24
     868:	1c c0       	rjmp	.+56     	; 0x8a2 <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     86a:	12 96       	adiw	r26, 0x02	; 2
     86c:	8c 91       	ld	r24, X
     86e:	12 97       	sbiw	r26, 0x02	; 2
     870:	86 95       	lsr	r24
     872:	86 95       	lsr	r24
     874:	86 95       	lsr	r24
     876:	13 96       	adiw	r26, 0x03	; 3
     878:	9c 91       	ld	r25, X
     87a:	13 97       	sbiw	r26, 0x03	; 3
     87c:	f0 e2       	ldi	r31, 0x20	; 32
     87e:	9f 9f       	mul	r25, r31
     880:	80 0d       	add	r24, r0
     882:	11 24       	eor	r1, r1
     884:	80 93 f3 00 	sts	0x00F3, r24
     888:	12 96       	adiw	r26, 0x02	; 2
     88a:	8c 91       	ld	r24, X
     88c:	12 97       	sbiw	r26, 0x02	; 2
     88e:	82 95       	swap	r24
     890:	88 0f       	add	r24, r24
     892:	80 7e       	andi	r24, 0xE0	; 224
     894:	80 93 f2 00 	sts	0x00F2, r24
     898:	ef ee       	ldi	r30, 0xEF	; 239
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	8f 7e       	andi	r24, 0xEF	; 239
     8a0:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	1a 96       	adiw	r26, 0x0a	; 10
     8a6:	8c 93       	st	X, r24
     8a8:	1a 97       	sbiw	r26, 0x0a	; 10
     8aa:	e0 ef       	ldi	r30, 0xF0	; 240
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	80 81       	ld	r24, Z
     8b0:	84 60       	ori	r24, 0x04	; 4
     8b2:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     8b4:	ef ee       	ldi	r30, 0xEF	; 239
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	90 81       	ld	r25, Z
     8ba:	16 96       	adiw	r26, 0x06	; 6
     8bc:	8c 91       	ld	r24, X
     8be:	89 2b       	or	r24, r25
     8c0:	80 83       	st	Z, r24
          Can_config_tx();
     8c2:	80 81       	ld	r24, Z
     8c4:	8f 73       	andi	r24, 0x3F	; 63
     8c6:	80 83       	st	Z, r24
     8c8:	80 81       	ld	r24, Z
     8ca:	80 64       	ori	r24, 0x40	; 64
     8cc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8ce:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     8d0:	4e c4       	rjmp	.+2204   	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     8d2:	19 82       	std	Y+1, r1	; 0x01
     8d4:	9b 81       	ldd	r25, Y+3	; 0x03
     8d6:	92 95       	swap	r25
     8d8:	96 95       	lsr	r25
     8da:	97 70       	andi	r25, 0x07	; 7
     8dc:	8c 81       	ldd	r24, Y+4	; 0x04
     8de:	88 0f       	add	r24, r24
     8e0:	88 0f       	add	r24, r24
     8e2:	88 0f       	add	r24, r24
     8e4:	89 0f       	add	r24, r25
     8e6:	80 93 f7 00 	sts	0x00F7, r24
     8ea:	9a 81       	ldd	r25, Y+2	; 0x02
     8ec:	92 95       	swap	r25
     8ee:	96 95       	lsr	r25
     8f0:	97 70       	andi	r25, 0x07	; 7
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	88 0f       	add	r24, r24
     8f6:	88 0f       	add	r24, r24
     8f8:	88 0f       	add	r24, r24
     8fa:	89 0f       	add	r24, r25
     8fc:	80 93 f6 00 	sts	0x00F6, r24
     900:	99 81       	ldd	r25, Y+1	; 0x01
     902:	92 95       	swap	r25
     904:	96 95       	lsr	r25
     906:	97 70       	andi	r25, 0x07	; 7
     908:	8a 81       	ldd	r24, Y+2	; 0x02
     90a:	88 0f       	add	r24, r24
     90c:	88 0f       	add	r24, r24
     90e:	88 0f       	add	r24, r24
     910:	89 0f       	add	r24, r25
     912:	80 93 f5 00 	sts	0x00F5, r24
     916:	29 81       	ldd	r18, Y+1	; 0x01
     918:	22 0f       	add	r18, r18
     91a:	22 0f       	add	r18, r18
     91c:	22 0f       	add	r18, r18
     91e:	84 ef       	ldi	r24, 0xF4	; 244
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	fc 01       	movw	r30, r24
     924:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     926:	ef ee       	ldi	r30, 0xEF	; 239
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	30 81       	ld	r19, Z
     92c:	16 96       	adiw	r26, 0x06	; 6
     92e:	2c 91       	ld	r18, X
     930:	23 2b       	or	r18, r19
     932:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     934:	dc 01       	movw	r26, r24
     936:	2c 91       	ld	r18, X
     938:	2b 7f       	andi	r18, 0xFB	; 251
     93a:	2c 93       	st	X, r18
          Can_clear_idemsk();
     93c:	2c 91       	ld	r18, X
     93e:	2e 7f       	andi	r18, 0xFE	; 254
     940:	2c 93       	st	X, r18
          Can_config_rx();       
     942:	80 81       	ld	r24, Z
     944:	8f 73       	andi	r24, 0x3F	; 63
     946:	80 83       	st	Z, r24
     948:	80 81       	ld	r24, Z
     94a:	80 68       	ori	r24, 0x80	; 128
     94c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     94e:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     950:	0e c4       	rjmp	.+2076   	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	82 95       	swap	r24
     95a:	88 0f       	add	r24, r24
     95c:	80 7e       	andi	r24, 0xE0	; 224
     95e:	81 5e       	subi	r24, 0xE1	; 225
     960:	27 ef       	ldi	r18, 0xF7	; 247
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	80 83       	st	Z, r24
     968:	49 81       	ldd	r20, Y+1	; 0x01
     96a:	42 95       	swap	r20
     96c:	44 0f       	add	r20, r20
     96e:	40 7e       	andi	r20, 0xE0	; 224
     970:	86 ef       	ldi	r24, 0xF6	; 246
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	fc 01       	movw	r30, r24
     976:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     978:	12 96       	adiw	r26, 0x02	; 2
     97a:	4c 91       	ld	r20, X
     97c:	12 97       	sbiw	r26, 0x02	; 2
     97e:	46 95       	lsr	r20
     980:	46 95       	lsr	r20
     982:	46 95       	lsr	r20
     984:	13 96       	adiw	r26, 0x03	; 3
     986:	5c 91       	ld	r21, X
     988:	13 97       	sbiw	r26, 0x03	; 3
     98a:	f0 e2       	ldi	r31, 0x20	; 32
     98c:	5f 9f       	mul	r21, r31
     98e:	40 0d       	add	r20, r0
     990:	11 24       	eor	r1, r1
     992:	40 93 f3 00 	sts	0x00F3, r20
     996:	12 96       	adiw	r26, 0x02	; 2
     998:	4c 91       	ld	r20, X
     99a:	12 97       	sbiw	r26, 0x02	; 2
     99c:	42 95       	swap	r20
     99e:	44 0f       	add	r20, r20
     9a0:	40 7e       	andi	r20, 0xE0	; 224
     9a2:	40 93 f2 00 	sts	0x00F2, r20
     9a6:	6f ee       	ldi	r22, 0xEF	; 239
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	fb 01       	movw	r30, r22
     9ac:	40 81       	ld	r20, Z
     9ae:	4f 7e       	andi	r20, 0xEF	; 239
     9b0:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     9b2:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     9b4:	5b 81       	ldd	r21, Y+3	; 0x03
     9b6:	52 95       	swap	r21
     9b8:	56 95       	lsr	r21
     9ba:	57 70       	andi	r21, 0x07	; 7
     9bc:	4c 81       	ldd	r20, Y+4	; 0x04
     9be:	44 0f       	add	r20, r20
     9c0:	44 0f       	add	r20, r20
     9c2:	44 0f       	add	r20, r20
     9c4:	45 0f       	add	r20, r21
     9c6:	f9 01       	movw	r30, r18
     9c8:	40 83       	st	Z, r20
     9ca:	3a 81       	ldd	r19, Y+2	; 0x02
     9cc:	32 95       	swap	r19
     9ce:	36 95       	lsr	r19
     9d0:	37 70       	andi	r19, 0x07	; 7
     9d2:	2b 81       	ldd	r18, Y+3	; 0x03
     9d4:	22 0f       	add	r18, r18
     9d6:	22 0f       	add	r18, r18
     9d8:	22 0f       	add	r18, r18
     9da:	23 0f       	add	r18, r19
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
     9e0:	99 81       	ldd	r25, Y+1	; 0x01
     9e2:	92 95       	swap	r25
     9e4:	96 95       	lsr	r25
     9e6:	97 70       	andi	r25, 0x07	; 7
     9e8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ea:	88 0f       	add	r24, r24
     9ec:	88 0f       	add	r24, r24
     9ee:	88 0f       	add	r24, r24
     9f0:	89 0f       	add	r24, r25
     9f2:	80 93 f5 00 	sts	0x00F5, r24
     9f6:	29 81       	ldd	r18, Y+1	; 0x01
     9f8:	22 0f       	add	r18, r18
     9fa:	22 0f       	add	r18, r18
     9fc:	22 0f       	add	r18, r18
     9fe:	84 ef       	ldi	r24, 0xF4	; 244
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     a06:	fb 01       	movw	r30, r22
     a08:	30 81       	ld	r19, Z
     a0a:	16 96       	adiw	r26, 0x06	; 6
     a0c:	2c 91       	ld	r18, X
     a0e:	16 97       	sbiw	r26, 0x06	; 6
     a10:	23 2b       	or	r18, r19
     a12:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     a14:	1a 96       	adiw	r26, 0x0a	; 10
     a16:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     a18:	dc 01       	movw	r26, r24
     a1a:	2c 91       	ld	r18, X
     a1c:	24 60       	ori	r18, 0x04	; 4
     a1e:	2c 93       	st	X, r18
		  Can_clear_rtr();
     a20:	a0 ef       	ldi	r26, 0xF0	; 240
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	2c 91       	ld	r18, X
     a26:	2b 7f       	andi	r18, 0xFB	; 251
     a28:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     a2a:	20 81       	ld	r18, Z
     a2c:	2f 7e       	andi	r18, 0xEF	; 239
     a2e:	20 83       	st	Z, r18
          Can_clear_idemsk();
     a30:	fc 01       	movw	r30, r24
     a32:	20 81       	ld	r18, Z
     a34:	2e 7f       	andi	r18, 0xFE	; 254
     a36:	20 83       	st	Z, r18
          Can_config_rx();       
     a38:	db 01       	movw	r26, r22
     a3a:	8c 91       	ld	r24, X
     a3c:	8f 73       	andi	r24, 0x3F	; 63
     a3e:	8c 93       	st	X, r24
     a40:	8c 91       	ld	r24, X
     a42:	80 68       	ori	r24, 0x80	; 128
     a44:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a46:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     a48:	92 c3       	rjmp	.+1828   	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     a4e:	8a 81       	ldd	r24, Y+2	; 0x02
     a50:	82 95       	swap	r24
     a52:	88 0f       	add	r24, r24
     a54:	80 7e       	andi	r24, 0xE0	; 224
     a56:	81 5e       	subi	r24, 0xE1	; 225
     a58:	27 ef       	ldi	r18, 0xF7	; 247
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	f9 01       	movw	r30, r18
     a5e:	80 83       	st	Z, r24
     a60:	49 81       	ldd	r20, Y+1	; 0x01
     a62:	42 95       	swap	r20
     a64:	44 0f       	add	r20, r20
     a66:	40 7e       	andi	r20, 0xE0	; 224
     a68:	86 ef       	ldi	r24, 0xF6	; 246
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	fc 01       	movw	r30, r24
     a6e:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     a70:	12 96       	adiw	r26, 0x02	; 2
     a72:	4c 91       	ld	r20, X
     a74:	12 97       	sbiw	r26, 0x02	; 2
     a76:	46 95       	lsr	r20
     a78:	46 95       	lsr	r20
     a7a:	46 95       	lsr	r20
     a7c:	13 96       	adiw	r26, 0x03	; 3
     a7e:	5c 91       	ld	r21, X
     a80:	13 97       	sbiw	r26, 0x03	; 3
     a82:	f0 e2       	ldi	r31, 0x20	; 32
     a84:	5f 9f       	mul	r21, r31
     a86:	40 0d       	add	r20, r0
     a88:	11 24       	eor	r1, r1
     a8a:	40 93 f3 00 	sts	0x00F3, r20
     a8e:	12 96       	adiw	r26, 0x02	; 2
     a90:	4c 91       	ld	r20, X
     a92:	12 97       	sbiw	r26, 0x02	; 2
     a94:	42 95       	swap	r20
     a96:	44 0f       	add	r20, r20
     a98:	40 7e       	andi	r20, 0xE0	; 224
     a9a:	40 93 f2 00 	sts	0x00F2, r20
     a9e:	6f ee       	ldi	r22, 0xEF	; 239
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	fb 01       	movw	r30, r22
     aa4:	40 81       	ld	r20, Z
     aa6:	4f 7e       	andi	r20, 0xEF	; 239
     aa8:	40 83       	st	Z, r20
		
          u8_temp=0; 
     aaa:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     aac:	5b 81       	ldd	r21, Y+3	; 0x03
     aae:	52 95       	swap	r21
     ab0:	56 95       	lsr	r21
     ab2:	57 70       	andi	r21, 0x07	; 7
     ab4:	4c 81       	ldd	r20, Y+4	; 0x04
     ab6:	44 0f       	add	r20, r20
     ab8:	44 0f       	add	r20, r20
     aba:	44 0f       	add	r20, r20
     abc:	45 0f       	add	r20, r21
     abe:	f9 01       	movw	r30, r18
     ac0:	40 83       	st	Z, r20
     ac2:	3a 81       	ldd	r19, Y+2	; 0x02
     ac4:	32 95       	swap	r19
     ac6:	36 95       	lsr	r19
     ac8:	37 70       	andi	r19, 0x07	; 7
     aca:	2b 81       	ldd	r18, Y+3	; 0x03
     acc:	22 0f       	add	r18, r18
     ace:	22 0f       	add	r18, r18
     ad0:	22 0f       	add	r18, r18
     ad2:	23 0f       	add	r18, r19
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
     ad8:	99 81       	ldd	r25, Y+1	; 0x01
     ada:	92 95       	swap	r25
     adc:	96 95       	lsr	r25
     ade:	97 70       	andi	r25, 0x07	; 7
     ae0:	8a 81       	ldd	r24, Y+2	; 0x02
     ae2:	88 0f       	add	r24, r24
     ae4:	88 0f       	add	r24, r24
     ae6:	88 0f       	add	r24, r24
     ae8:	89 0f       	add	r24, r25
     aea:	80 93 f5 00 	sts	0x00F5, r24
     aee:	29 81       	ldd	r18, Y+1	; 0x01
     af0:	22 0f       	add	r18, r18
     af2:	22 0f       	add	r18, r18
     af4:	22 0f       	add	r18, r18
     af6:	84 ef       	ldi	r24, 0xF4	; 244
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     afe:	fb 01       	movw	r30, r22
     b00:	30 81       	ld	r19, Z
     b02:	16 96       	adiw	r26, 0x06	; 6
     b04:	2c 91       	ld	r18, X
     b06:	16 97       	sbiw	r26, 0x06	; 6
     b08:	23 2b       	or	r18, r19
     b0a:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     b0c:	21 e0       	ldi	r18, 0x01	; 1
     b0e:	1a 96       	adiw	r26, 0x0a	; 10
     b10:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     b12:	dc 01       	movw	r26, r24
     b14:	2c 91       	ld	r18, X
     b16:	24 60       	ori	r18, 0x04	; 4
     b18:	2c 93       	st	X, r18
		  Can_set_rtr();
     b1a:	a0 ef       	ldi	r26, 0xF0	; 240
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	2c 91       	ld	r18, X
     b20:	24 60       	ori	r18, 0x04	; 4
     b22:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     b24:	20 81       	ld	r18, Z
     b26:	2f 7d       	andi	r18, 0xDF	; 223
     b28:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 81       	ld	r18, Z
     b2e:	2e 7f       	andi	r18, 0xFE	; 254
     b30:	20 83       	st	Z, r18
          Can_config_rx();       
     b32:	db 01       	movw	r26, r22
     b34:	8c 91       	ld	r24, X
     b36:	8f 73       	andi	r24, 0x3F	; 63
     b38:	8c 93       	st	X, r24
     b3a:	8c 91       	ld	r24, X
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b40:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     b42:	15 c3       	rjmp	.+1578   	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b44:	1b 96       	adiw	r26, 0x0b	; 11
     b46:	8c 91       	ld	r24, X
     b48:	1b 97       	sbiw	r26, 0x0b	; 11
     b4a:	88 23       	and	r24, r24
     b4c:	d9 f1       	breq	.+118    	; 0xbc4 <__stack+0x2c5>
     b4e:	14 96       	adiw	r26, 0x04	; 4
     b50:	9c 91       	ld	r25, X
     b52:	14 97       	sbiw	r26, 0x04	; 4
     b54:	92 95       	swap	r25
     b56:	96 95       	lsr	r25
     b58:	97 70       	andi	r25, 0x07	; 7
     b5a:	15 96       	adiw	r26, 0x05	; 5
     b5c:	8c 91       	ld	r24, X
     b5e:	15 97       	sbiw	r26, 0x05	; 5
     b60:	88 0f       	add	r24, r24
     b62:	88 0f       	add	r24, r24
     b64:	88 0f       	add	r24, r24
     b66:	89 0f       	add	r24, r25
     b68:	80 93 f3 00 	sts	0x00F3, r24
     b6c:	13 96       	adiw	r26, 0x03	; 3
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	92 95       	swap	r25
     b74:	96 95       	lsr	r25
     b76:	97 70       	andi	r25, 0x07	; 7
     b78:	14 96       	adiw	r26, 0x04	; 4
     b7a:	8c 91       	ld	r24, X
     b7c:	14 97       	sbiw	r26, 0x04	; 4
     b7e:	88 0f       	add	r24, r24
     b80:	88 0f       	add	r24, r24
     b82:	88 0f       	add	r24, r24
     b84:	89 0f       	add	r24, r25
     b86:	80 93 f2 00 	sts	0x00F2, r24
     b8a:	12 96       	adiw	r26, 0x02	; 2
     b8c:	9c 91       	ld	r25, X
     b8e:	12 97       	sbiw	r26, 0x02	; 2
     b90:	92 95       	swap	r25
     b92:	96 95       	lsr	r25
     b94:	97 70       	andi	r25, 0x07	; 7
     b96:	13 96       	adiw	r26, 0x03	; 3
     b98:	8c 91       	ld	r24, X
     b9a:	13 97       	sbiw	r26, 0x03	; 3
     b9c:	88 0f       	add	r24, r24
     b9e:	88 0f       	add	r24, r24
     ba0:	88 0f       	add	r24, r24
     ba2:	89 0f       	add	r24, r25
     ba4:	80 93 f1 00 	sts	0x00F1, r24
     ba8:	12 96       	adiw	r26, 0x02	; 2
     baa:	8c 91       	ld	r24, X
     bac:	12 97       	sbiw	r26, 0x02	; 2
     bae:	88 0f       	add	r24, r24
     bb0:	88 0f       	add	r24, r24
     bb2:	88 0f       	add	r24, r24
     bb4:	80 93 f0 00 	sts	0x00F0, r24
     bb8:	ef ee       	ldi	r30, 0xEF	; 239
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	80 61       	ori	r24, 0x10	; 16
     bc0:	80 83       	st	Z, r24
     bc2:	1c c0       	rjmp	.+56     	; 0xbfc <__stack+0x2fd>
          else              { Can_set_std_id(cmd->id.std);}
     bc4:	12 96       	adiw	r26, 0x02	; 2
     bc6:	8c 91       	ld	r24, X
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	86 95       	lsr	r24
     bcc:	86 95       	lsr	r24
     bce:	86 95       	lsr	r24
     bd0:	13 96       	adiw	r26, 0x03	; 3
     bd2:	9c 91       	ld	r25, X
     bd4:	13 97       	sbiw	r26, 0x03	; 3
     bd6:	e0 e2       	ldi	r30, 0x20	; 32
     bd8:	9e 9f       	mul	r25, r30
     bda:	80 0d       	add	r24, r0
     bdc:	11 24       	eor	r1, r1
     bde:	80 93 f3 00 	sts	0x00F3, r24
     be2:	12 96       	adiw	r26, 0x02	; 2
     be4:	8c 91       	ld	r24, X
     be6:	12 97       	sbiw	r26, 0x02	; 2
     be8:	82 95       	swap	r24
     bea:	88 0f       	add	r24, r24
     bec:	80 7e       	andi	r24, 0xE0	; 224
     bee:	80 93 f2 00 	sts	0x00F2, r24
     bf2:	ef ee       	ldi	r30, 0xEF	; 239
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	8f 7e       	andi	r24, 0xEF	; 239
     bfa:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	9b 81       	ldd	r25, Y+3	; 0x03
     c02:	92 95       	swap	r25
     c04:	96 95       	lsr	r25
     c06:	97 70       	andi	r25, 0x07	; 7
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	88 0f       	add	r24, r24
     c0c:	88 0f       	add	r24, r24
     c0e:	88 0f       	add	r24, r24
     c10:	89 0f       	add	r24, r25
     c12:	80 93 f7 00 	sts	0x00F7, r24
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	92 95       	swap	r25
     c1a:	96 95       	lsr	r25
     c1c:	97 70       	andi	r25, 0x07	; 7
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	88 0f       	add	r24, r24
     c22:	88 0f       	add	r24, r24
     c24:	88 0f       	add	r24, r24
     c26:	89 0f       	add	r24, r25
     c28:	80 93 f6 00 	sts	0x00F6, r24
     c2c:	99 81       	ldd	r25, Y+1	; 0x01
     c2e:	92 95       	swap	r25
     c30:	96 95       	lsr	r25
     c32:	97 70       	andi	r25, 0x07	; 7
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	88 0f       	add	r24, r24
     c38:	88 0f       	add	r24, r24
     c3a:	88 0f       	add	r24, r24
     c3c:	89 0f       	add	r24, r25
     c3e:	80 93 f5 00 	sts	0x00F5, r24
     c42:	29 81       	ldd	r18, Y+1	; 0x01
     c44:	22 0f       	add	r18, r18
     c46:	22 0f       	add	r18, r18
     c48:	22 0f       	add	r18, r18
     c4a:	84 ef       	ldi	r24, 0xF4	; 244
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     c52:	ef ee       	ldi	r30, 0xEF	; 239
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	30 81       	ld	r19, Z
     c58:	16 96       	adiw	r26, 0x06	; 6
     c5a:	2c 91       	ld	r18, X
     c5c:	23 2b       	or	r18, r19
     c5e:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     c60:	dc 01       	movw	r26, r24
     c62:	2c 91       	ld	r18, X
     c64:	2b 7f       	andi	r18, 0xFB	; 251
     c66:	2c 93       	st	X, r18
          Can_set_idemsk();
     c68:	2c 91       	ld	r18, X
     c6a:	21 60       	ori	r18, 0x01	; 1
     c6c:	2c 93       	st	X, r18
          Can_config_rx();       
     c6e:	80 81       	ld	r24, Z
     c70:	8f 73       	andi	r24, 0x3F	; 63
     c72:	80 83       	st	Z, r24
     c74:	80 81       	ld	r24, Z
     c76:	80 68       	ori	r24, 0x80	; 128
     c78:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     c7c:	78 c2       	rjmp	.+1264   	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c7e:	1b 96       	adiw	r26, 0x0b	; 11
     c80:	8c 91       	ld	r24, X
     c82:	1b 97       	sbiw	r26, 0x0b	; 11
     c84:	88 23       	and	r24, r24
     c86:	d9 f1       	breq	.+118    	; 0xcfe <__stack+0x3ff>
     c88:	14 96       	adiw	r26, 0x04	; 4
     c8a:	9c 91       	ld	r25, X
     c8c:	14 97       	sbiw	r26, 0x04	; 4
     c8e:	92 95       	swap	r25
     c90:	96 95       	lsr	r25
     c92:	97 70       	andi	r25, 0x07	; 7
     c94:	15 96       	adiw	r26, 0x05	; 5
     c96:	8c 91       	ld	r24, X
     c98:	15 97       	sbiw	r26, 0x05	; 5
     c9a:	88 0f       	add	r24, r24
     c9c:	88 0f       	add	r24, r24
     c9e:	88 0f       	add	r24, r24
     ca0:	89 0f       	add	r24, r25
     ca2:	80 93 f3 00 	sts	0x00F3, r24
     ca6:	13 96       	adiw	r26, 0x03	; 3
     ca8:	9c 91       	ld	r25, X
     caa:	13 97       	sbiw	r26, 0x03	; 3
     cac:	92 95       	swap	r25
     cae:	96 95       	lsr	r25
     cb0:	97 70       	andi	r25, 0x07	; 7
     cb2:	14 96       	adiw	r26, 0x04	; 4
     cb4:	8c 91       	ld	r24, X
     cb6:	14 97       	sbiw	r26, 0x04	; 4
     cb8:	88 0f       	add	r24, r24
     cba:	88 0f       	add	r24, r24
     cbc:	88 0f       	add	r24, r24
     cbe:	89 0f       	add	r24, r25
     cc0:	80 93 f2 00 	sts	0x00F2, r24
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	9c 91       	ld	r25, X
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	92 95       	swap	r25
     ccc:	96 95       	lsr	r25
     cce:	97 70       	andi	r25, 0x07	; 7
     cd0:	13 96       	adiw	r26, 0x03	; 3
     cd2:	8c 91       	ld	r24, X
     cd4:	13 97       	sbiw	r26, 0x03	; 3
     cd6:	88 0f       	add	r24, r24
     cd8:	88 0f       	add	r24, r24
     cda:	88 0f       	add	r24, r24
     cdc:	89 0f       	add	r24, r25
     cde:	80 93 f1 00 	sts	0x00F1, r24
     ce2:	12 96       	adiw	r26, 0x02	; 2
     ce4:	8c 91       	ld	r24, X
     ce6:	12 97       	sbiw	r26, 0x02	; 2
     ce8:	88 0f       	add	r24, r24
     cea:	88 0f       	add	r24, r24
     cec:	88 0f       	add	r24, r24
     cee:	80 93 f0 00 	sts	0x00F0, r24
     cf2:	ef ee       	ldi	r30, 0xEF	; 239
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	80 61       	ori	r24, 0x10	; 16
     cfa:	80 83       	st	Z, r24
     cfc:	1c c0       	rjmp	.+56     	; 0xd36 <__stack+0x437>
          else              { Can_set_std_id(cmd->id.std);}
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	8c 91       	ld	r24, X
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	86 95       	lsr	r24
     d06:	86 95       	lsr	r24
     d08:	86 95       	lsr	r24
     d0a:	13 96       	adiw	r26, 0x03	; 3
     d0c:	9c 91       	ld	r25, X
     d0e:	13 97       	sbiw	r26, 0x03	; 3
     d10:	e0 e2       	ldi	r30, 0x20	; 32
     d12:	9e 9f       	mul	r25, r30
     d14:	80 0d       	add	r24, r0
     d16:	11 24       	eor	r1, r1
     d18:	80 93 f3 00 	sts	0x00F3, r24
     d1c:	12 96       	adiw	r26, 0x02	; 2
     d1e:	8c 91       	ld	r24, X
     d20:	12 97       	sbiw	r26, 0x02	; 2
     d22:	82 95       	swap	r24
     d24:	88 0f       	add	r24, r24
     d26:	80 7e       	andi	r24, 0xE0	; 224
     d28:	80 93 f2 00 	sts	0x00F2, r24
     d2c:	ef ee       	ldi	r30, 0xEF	; 239
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7e       	andi	r24, 0xEF	; 239
     d34:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     d36:	8f ef       	ldi	r24, 0xFF	; 255
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	92 95       	swap	r25
     d3e:	96 95       	lsr	r25
     d40:	97 70       	andi	r25, 0x07	; 7
     d42:	8c 81       	ldd	r24, Y+4	; 0x04
     d44:	88 0f       	add	r24, r24
     d46:	88 0f       	add	r24, r24
     d48:	88 0f       	add	r24, r24
     d4a:	89 0f       	add	r24, r25
     d4c:	80 93 f7 00 	sts	0x00F7, r24
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	92 95       	swap	r25
     d54:	96 95       	lsr	r25
     d56:	97 70       	andi	r25, 0x07	; 7
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	88 0f       	add	r24, r24
     d5c:	88 0f       	add	r24, r24
     d5e:	88 0f       	add	r24, r24
     d60:	89 0f       	add	r24, r25
     d62:	80 93 f6 00 	sts	0x00F6, r24
     d66:	99 81       	ldd	r25, Y+1	; 0x01
     d68:	92 95       	swap	r25
     d6a:	96 95       	lsr	r25
     d6c:	97 70       	andi	r25, 0x07	; 7
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	88 0f       	add	r24, r24
     d72:	88 0f       	add	r24, r24
     d74:	88 0f       	add	r24, r24
     d76:	89 0f       	add	r24, r25
     d78:	80 93 f5 00 	sts	0x00F5, r24
     d7c:	29 81       	ldd	r18, Y+1	; 0x01
     d7e:	22 0f       	add	r18, r18
     d80:	22 0f       	add	r18, r18
     d82:	22 0f       	add	r18, r18
     d84:	84 ef       	ldi	r24, 0xF4	; 244
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d8c:	ef ee       	ldi	r30, 0xEF	; 239
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	30 81       	ld	r19, Z
     d92:	16 96       	adiw	r26, 0x06	; 6
     d94:	2c 91       	ld	r18, X
     d96:	16 97       	sbiw	r26, 0x06	; 6
     d98:	23 2b       	or	r18, r19
     d9a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     d9c:	1a 96       	adiw	r26, 0x0a	; 10
     d9e:	1c 92       	st	X, r1
     da0:	dc 01       	movw	r26, r24
     da2:	2c 91       	ld	r18, X
     da4:	24 60       	ori	r18, 0x04	; 4
     da6:	2c 93       	st	X, r18
     da8:	a0 ef       	ldi	r26, 0xF0	; 240
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	2c 91       	ld	r18, X
     dae:	2b 7f       	andi	r18, 0xFB	; 251
     db0:	2c 93       	st	X, r18
          Can_set_idemsk();
     db2:	dc 01       	movw	r26, r24
     db4:	2c 91       	ld	r18, X
     db6:	21 60       	ori	r18, 0x01	; 1
     db8:	2c 93       	st	X, r18
          Can_config_rx();       
     dba:	80 81       	ld	r24, Z
     dbc:	8f 73       	andi	r24, 0x3F	; 63
     dbe:	80 83       	st	Z, r24
     dc0:	80 81       	ld	r24, Z
     dc2:	80 68       	ori	r24, 0x80	; 128
     dc4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dc6:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     dc8:	d2 c1       	rjmp	.+932    	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     dca:	1b 96       	adiw	r26, 0x0b	; 11
     dcc:	8c 91       	ld	r24, X
     dce:	1b 97       	sbiw	r26, 0x0b	; 11
     dd0:	88 23       	and	r24, r24
     dd2:	d9 f1       	breq	.+118    	; 0xe4a <__stack+0x54b>
     dd4:	14 96       	adiw	r26, 0x04	; 4
     dd6:	9c 91       	ld	r25, X
     dd8:	14 97       	sbiw	r26, 0x04	; 4
     dda:	92 95       	swap	r25
     ddc:	96 95       	lsr	r25
     dde:	97 70       	andi	r25, 0x07	; 7
     de0:	15 96       	adiw	r26, 0x05	; 5
     de2:	8c 91       	ld	r24, X
     de4:	15 97       	sbiw	r26, 0x05	; 5
     de6:	88 0f       	add	r24, r24
     de8:	88 0f       	add	r24, r24
     dea:	88 0f       	add	r24, r24
     dec:	89 0f       	add	r24, r25
     dee:	80 93 f3 00 	sts	0x00F3, r24
     df2:	13 96       	adiw	r26, 0x03	; 3
     df4:	9c 91       	ld	r25, X
     df6:	13 97       	sbiw	r26, 0x03	; 3
     df8:	92 95       	swap	r25
     dfa:	96 95       	lsr	r25
     dfc:	97 70       	andi	r25, 0x07	; 7
     dfe:	14 96       	adiw	r26, 0x04	; 4
     e00:	8c 91       	ld	r24, X
     e02:	14 97       	sbiw	r26, 0x04	; 4
     e04:	88 0f       	add	r24, r24
     e06:	88 0f       	add	r24, r24
     e08:	88 0f       	add	r24, r24
     e0a:	89 0f       	add	r24, r25
     e0c:	80 93 f2 00 	sts	0x00F2, r24
     e10:	12 96       	adiw	r26, 0x02	; 2
     e12:	9c 91       	ld	r25, X
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	92 95       	swap	r25
     e18:	96 95       	lsr	r25
     e1a:	97 70       	andi	r25, 0x07	; 7
     e1c:	13 96       	adiw	r26, 0x03	; 3
     e1e:	8c 91       	ld	r24, X
     e20:	13 97       	sbiw	r26, 0x03	; 3
     e22:	88 0f       	add	r24, r24
     e24:	88 0f       	add	r24, r24
     e26:	88 0f       	add	r24, r24
     e28:	89 0f       	add	r24, r25
     e2a:	80 93 f1 00 	sts	0x00F1, r24
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	8c 91       	ld	r24, X
     e32:	12 97       	sbiw	r26, 0x02	; 2
     e34:	88 0f       	add	r24, r24
     e36:	88 0f       	add	r24, r24
     e38:	88 0f       	add	r24, r24
     e3a:	80 93 f0 00 	sts	0x00F0, r24
     e3e:	ef ee       	ldi	r30, 0xEF	; 239
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 61       	ori	r24, 0x10	; 16
     e46:	80 83       	st	Z, r24
     e48:	1c c0       	rjmp	.+56     	; 0xe82 <__stack+0x583>
          else              { Can_set_std_id(cmd->id.std);}
     e4a:	12 96       	adiw	r26, 0x02	; 2
     e4c:	8c 91       	ld	r24, X
     e4e:	12 97       	sbiw	r26, 0x02	; 2
     e50:	86 95       	lsr	r24
     e52:	86 95       	lsr	r24
     e54:	86 95       	lsr	r24
     e56:	13 96       	adiw	r26, 0x03	; 3
     e58:	9c 91       	ld	r25, X
     e5a:	13 97       	sbiw	r26, 0x03	; 3
     e5c:	e0 e2       	ldi	r30, 0x20	; 32
     e5e:	9e 9f       	mul	r25, r30
     e60:	80 0d       	add	r24, r0
     e62:	11 24       	eor	r1, r1
     e64:	80 93 f3 00 	sts	0x00F3, r24
     e68:	12 96       	adiw	r26, 0x02	; 2
     e6a:	8c 91       	ld	r24, X
     e6c:	12 97       	sbiw	r26, 0x02	; 2
     e6e:	82 95       	swap	r24
     e70:	88 0f       	add	r24, r24
     e72:	80 7e       	andi	r24, 0xE0	; 224
     e74:	80 93 f2 00 	sts	0x00F2, r24
     e78:	ef ee       	ldi	r30, 0xEF	; 239
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 7e       	andi	r24, 0xEF	; 239
     e80:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	9b 81       	ldd	r25, Y+3	; 0x03
     e88:	92 95       	swap	r25
     e8a:	96 95       	lsr	r25
     e8c:	97 70       	andi	r25, 0x07	; 7
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	88 0f       	add	r24, r24
     e92:	88 0f       	add	r24, r24
     e94:	88 0f       	add	r24, r24
     e96:	89 0f       	add	r24, r25
     e98:	80 93 f7 00 	sts	0x00F7, r24
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	92 95       	swap	r25
     ea0:	96 95       	lsr	r25
     ea2:	97 70       	andi	r25, 0x07	; 7
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	88 0f       	add	r24, r24
     ea8:	88 0f       	add	r24, r24
     eaa:	88 0f       	add	r24, r24
     eac:	89 0f       	add	r24, r25
     eae:	80 93 f6 00 	sts	0x00F6, r24
     eb2:	99 81       	ldd	r25, Y+1	; 0x01
     eb4:	92 95       	swap	r25
     eb6:	96 95       	lsr	r25
     eb8:	97 70       	andi	r25, 0x07	; 7
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	88 0f       	add	r24, r24
     ebe:	88 0f       	add	r24, r24
     ec0:	88 0f       	add	r24, r24
     ec2:	89 0f       	add	r24, r25
     ec4:	80 93 f5 00 	sts	0x00F5, r24
     ec8:	29 81       	ldd	r18, Y+1	; 0x01
     eca:	22 0f       	add	r18, r18
     ecc:	22 0f       	add	r18, r18
     ece:	22 0f       	add	r18, r18
     ed0:	84 ef       	ldi	r24, 0xF4	; 244
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	fc 01       	movw	r30, r24
     ed6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ed8:	ef ee       	ldi	r30, 0xEF	; 239
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	30 81       	ld	r19, Z
     ede:	16 96       	adiw	r26, 0x06	; 6
     ee0:	2c 91       	ld	r18, X
     ee2:	16 97       	sbiw	r26, 0x06	; 6
     ee4:	23 2b       	or	r18, r19
     ee6:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     ee8:	21 e0       	ldi	r18, 0x01	; 1
     eea:	1a 96       	adiw	r26, 0x0a	; 10
     eec:	2c 93       	st	X, r18
     eee:	dc 01       	movw	r26, r24
     ef0:	2c 91       	ld	r18, X
     ef2:	24 60       	ori	r18, 0x04	; 4
     ef4:	2c 93       	st	X, r18
     ef6:	a0 ef       	ldi	r26, 0xF0	; 240
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	2c 91       	ld	r18, X
     efc:	24 60       	ori	r18, 0x04	; 4
     efe:	2c 93       	st	X, r18
          Can_clear_rplv();
     f00:	20 81       	ld	r18, Z
     f02:	2f 7d       	andi	r18, 0xDF	; 223
     f04:	20 83       	st	Z, r18
          Can_set_idemsk();
     f06:	dc 01       	movw	r26, r24
     f08:	2c 91       	ld	r18, X
     f0a:	21 60       	ori	r18, 0x01	; 1
     f0c:	2c 93       	st	X, r18
          Can_config_rx();       
     f0e:	80 81       	ld	r24, Z
     f10:	8f 73       	andi	r24, 0x3F	; 63
     f12:	80 83       	st	Z, r24
     f14:	80 81       	ld	r24, Z
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     f1a:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     f1c:	28 c1       	rjmp	.+592    	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	8a ef       	ldi	r24, 0xFA	; 250
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	17 96       	adiw	r26, 0x07	; 7
     f26:	ed 91       	ld	r30, X+
     f28:	fc 91       	ld	r31, X
     f2a:	18 97       	sbiw	r26, 0x08	; 8
     f2c:	e2 0f       	add	r30, r18
     f2e:	f1 1d       	adc	r31, r1
     f30:	30 81       	ld	r19, Z
     f32:	fc 01       	movw	r30, r24
     f34:	30 83       	st	Z, r19
     f36:	2f 5f       	subi	r18, 0xFF	; 255
     f38:	16 96       	adiw	r26, 0x06	; 6
     f3a:	3c 91       	ld	r19, X
     f3c:	16 97       	sbiw	r26, 0x06	; 6
     f3e:	23 17       	cp	r18, r19
     f40:	88 f3       	brcs	.-30     	; 0xf24 <__stack+0x625>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     f42:	19 82       	std	Y+1, r1	; 0x01
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	92 95       	swap	r25
     f48:	96 95       	lsr	r25
     f4a:	97 70       	andi	r25, 0x07	; 7
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	88 0f       	add	r24, r24
     f50:	88 0f       	add	r24, r24
     f52:	88 0f       	add	r24, r24
     f54:	89 0f       	add	r24, r25
     f56:	80 93 f7 00 	sts	0x00F7, r24
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	92 95       	swap	r25
     f5e:	96 95       	lsr	r25
     f60:	97 70       	andi	r25, 0x07	; 7
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 0f       	add	r24, r24
     f66:	88 0f       	add	r24, r24
     f68:	88 0f       	add	r24, r24
     f6a:	89 0f       	add	r24, r25
     f6c:	80 93 f6 00 	sts	0x00F6, r24
     f70:	99 81       	ldd	r25, Y+1	; 0x01
     f72:	92 95       	swap	r25
     f74:	96 95       	lsr	r25
     f76:	97 70       	andi	r25, 0x07	; 7
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	88 0f       	add	r24, r24
     f7c:	88 0f       	add	r24, r24
     f7e:	88 0f       	add	r24, r24
     f80:	89 0f       	add	r24, r25
     f82:	80 93 f5 00 	sts	0x00F5, r24
     f86:	29 81       	ldd	r18, Y+1	; 0x01
     f88:	22 0f       	add	r18, r18
     f8a:	22 0f       	add	r18, r18
     f8c:	22 0f       	add	r18, r18
     f8e:	84 ef       	ldi	r24, 0xF4	; 244
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	fc 01       	movw	r30, r24
     f94:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     f96:	ef ee       	ldi	r30, 0xEF	; 239
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	30 81       	ld	r19, Z
     f9c:	16 96       	adiw	r26, 0x06	; 6
     f9e:	2c 91       	ld	r18, X
     fa0:	16 97       	sbiw	r26, 0x06	; 6
     fa2:	23 2b       	or	r18, r19
     fa4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	1a 96       	adiw	r26, 0x0a	; 10
     faa:	2c 93       	st	X, r18
     fac:	dc 01       	movw	r26, r24
     fae:	2c 91       	ld	r18, X
     fb0:	24 60       	ori	r18, 0x04	; 4
     fb2:	2c 93       	st	X, r18
     fb4:	a0 ef       	ldi	r26, 0xF0	; 240
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	2c 91       	ld	r18, X
     fba:	24 60       	ori	r18, 0x04	; 4
     fbc:	2c 93       	st	X, r18
          Can_set_rplv();
     fbe:	20 81       	ld	r18, Z
     fc0:	20 62       	ori	r18, 0x20	; 32
     fc2:	20 83       	st	Z, r18
          Can_clear_idemsk();
     fc4:	dc 01       	movw	r26, r24
     fc6:	2c 91       	ld	r18, X
     fc8:	2e 7f       	andi	r18, 0xFE	; 254
     fca:	2c 93       	st	X, r18
          Can_config_rx();       
     fcc:	80 81       	ld	r24, Z
     fce:	8f 73       	andi	r24, 0x3F	; 63
     fd0:	80 83       	st	Z, r24
     fd2:	80 81       	ld	r24, Z
     fd4:	80 68       	ori	r24, 0x80	; 128
     fd6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fd8:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     fda:	c9 c0       	rjmp	.+402    	; 0x116e <__stack+0x86f>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fdc:	1b 96       	adiw	r26, 0x0b	; 11
     fde:	8c 91       	ld	r24, X
     fe0:	1b 97       	sbiw	r26, 0x0b	; 11
     fe2:	88 23       	and	r24, r24
     fe4:	d9 f1       	breq	.+118    	; 0x105c <__stack+0x75d>
     fe6:	14 96       	adiw	r26, 0x04	; 4
     fe8:	9c 91       	ld	r25, X
     fea:	14 97       	sbiw	r26, 0x04	; 4
     fec:	92 95       	swap	r25
     fee:	96 95       	lsr	r25
     ff0:	97 70       	andi	r25, 0x07	; 7
     ff2:	15 96       	adiw	r26, 0x05	; 5
     ff4:	8c 91       	ld	r24, X
     ff6:	15 97       	sbiw	r26, 0x05	; 5
     ff8:	88 0f       	add	r24, r24
     ffa:	88 0f       	add	r24, r24
     ffc:	88 0f       	add	r24, r24
     ffe:	89 0f       	add	r24, r25
    1000:	80 93 f3 00 	sts	0x00F3, r24
    1004:	13 96       	adiw	r26, 0x03	; 3
    1006:	9c 91       	ld	r25, X
    1008:	13 97       	sbiw	r26, 0x03	; 3
    100a:	92 95       	swap	r25
    100c:	96 95       	lsr	r25
    100e:	97 70       	andi	r25, 0x07	; 7
    1010:	14 96       	adiw	r26, 0x04	; 4
    1012:	8c 91       	ld	r24, X
    1014:	14 97       	sbiw	r26, 0x04	; 4
    1016:	88 0f       	add	r24, r24
    1018:	88 0f       	add	r24, r24
    101a:	88 0f       	add	r24, r24
    101c:	89 0f       	add	r24, r25
    101e:	80 93 f2 00 	sts	0x00F2, r24
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	9c 91       	ld	r25, X
    1026:	12 97       	sbiw	r26, 0x02	; 2
    1028:	92 95       	swap	r25
    102a:	96 95       	lsr	r25
    102c:	97 70       	andi	r25, 0x07	; 7
    102e:	13 96       	adiw	r26, 0x03	; 3
    1030:	8c 91       	ld	r24, X
    1032:	13 97       	sbiw	r26, 0x03	; 3
    1034:	88 0f       	add	r24, r24
    1036:	88 0f       	add	r24, r24
    1038:	88 0f       	add	r24, r24
    103a:	89 0f       	add	r24, r25
    103c:	80 93 f1 00 	sts	0x00F1, r24
    1040:	12 96       	adiw	r26, 0x02	; 2
    1042:	8c 91       	ld	r24, X
    1044:	12 97       	sbiw	r26, 0x02	; 2
    1046:	88 0f       	add	r24, r24
    1048:	88 0f       	add	r24, r24
    104a:	88 0f       	add	r24, r24
    104c:	80 93 f0 00 	sts	0x00F0, r24
    1050:	ef ee       	ldi	r30, 0xEF	; 239
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 61       	ori	r24, 0x10	; 16
    1058:	80 83       	st	Z, r24
    105a:	1c c0       	rjmp	.+56     	; 0x1094 <__stack+0x795>
          else              { Can_set_std_id(cmd->id.std);}
    105c:	12 96       	adiw	r26, 0x02	; 2
    105e:	8c 91       	ld	r24, X
    1060:	12 97       	sbiw	r26, 0x02	; 2
    1062:	86 95       	lsr	r24
    1064:	86 95       	lsr	r24
    1066:	86 95       	lsr	r24
    1068:	13 96       	adiw	r26, 0x03	; 3
    106a:	9c 91       	ld	r25, X
    106c:	13 97       	sbiw	r26, 0x03	; 3
    106e:	e0 e2       	ldi	r30, 0x20	; 32
    1070:	9e 9f       	mul	r25, r30
    1072:	80 0d       	add	r24, r0
    1074:	11 24       	eor	r1, r1
    1076:	80 93 f3 00 	sts	0x00F3, r24
    107a:	12 96       	adiw	r26, 0x02	; 2
    107c:	8c 91       	ld	r24, X
    107e:	12 97       	sbiw	r26, 0x02	; 2
    1080:	82 95       	swap	r24
    1082:	88 0f       	add	r24, r24
    1084:	80 7e       	andi	r24, 0xE0	; 224
    1086:	80 93 f2 00 	sts	0x00F2, r24
    108a:	ef ee       	ldi	r30, 0xEF	; 239
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8f 7e       	andi	r24, 0xEF	; 239
    1092:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1094:	16 96       	adiw	r26, 0x06	; 6
    1096:	8c 91       	ld	r24, X
    1098:	16 97       	sbiw	r26, 0x06	; 6
    109a:	88 23       	and	r24, r24
    109c:	91 f0       	breq	.+36     	; 0x10c2 <__stack+0x7c3>
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	8a ef       	ldi	r24, 0xFA	; 250
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	17 96       	adiw	r26, 0x07	; 7
    10a6:	ed 91       	ld	r30, X+
    10a8:	fc 91       	ld	r31, X
    10aa:	18 97       	sbiw	r26, 0x08	; 8
    10ac:	e2 0f       	add	r30, r18
    10ae:	f1 1d       	adc	r31, r1
    10b0:	30 81       	ld	r19, Z
    10b2:	fc 01       	movw	r30, r24
    10b4:	30 83       	st	Z, r19
    10b6:	2f 5f       	subi	r18, 0xFF	; 255
    10b8:	16 96       	adiw	r26, 0x06	; 6
    10ba:	3c 91       	ld	r19, X
    10bc:	16 97       	sbiw	r26, 0x06	; 6
    10be:	23 17       	cp	r18, r19
    10c0:	88 f3       	brcs	.-30     	; 0x10a4 <__stack+0x7a5>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	92 95       	swap	r25
    10ca:	96 95       	lsr	r25
    10cc:	97 70       	andi	r25, 0x07	; 7
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	88 0f       	add	r24, r24
    10d2:	88 0f       	add	r24, r24
    10d4:	88 0f       	add	r24, r24
    10d6:	89 0f       	add	r24, r25
    10d8:	80 93 f7 00 	sts	0x00F7, r24
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	92 95       	swap	r25
    10e0:	96 95       	lsr	r25
    10e2:	97 70       	andi	r25, 0x07	; 7
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	88 0f       	add	r24, r24
    10e8:	88 0f       	add	r24, r24
    10ea:	88 0f       	add	r24, r24
    10ec:	89 0f       	add	r24, r25
    10ee:	80 93 f6 00 	sts	0x00F6, r24
    10f2:	99 81       	ldd	r25, Y+1	; 0x01
    10f4:	92 95       	swap	r25
    10f6:	96 95       	lsr	r25
    10f8:	97 70       	andi	r25, 0x07	; 7
    10fa:	8a 81       	ldd	r24, Y+2	; 0x02
    10fc:	88 0f       	add	r24, r24
    10fe:	88 0f       	add	r24, r24
    1100:	88 0f       	add	r24, r24
    1102:	89 0f       	add	r24, r25
    1104:	80 93 f5 00 	sts	0x00F5, r24
    1108:	29 81       	ldd	r18, Y+1	; 0x01
    110a:	22 0f       	add	r18, r18
    110c:	22 0f       	add	r18, r18
    110e:	22 0f       	add	r18, r18
    1110:	84 ef       	ldi	r24, 0xF4	; 244
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	fc 01       	movw	r30, r24
    1116:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1118:	ef ee       	ldi	r30, 0xEF	; 239
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	30 81       	ld	r19, Z
    111e:	16 96       	adiw	r26, 0x06	; 6
    1120:	2c 91       	ld	r18, X
    1122:	16 97       	sbiw	r26, 0x06	; 6
    1124:	23 2b       	or	r18, r19
    1126:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1128:	21 e0       	ldi	r18, 0x01	; 1
    112a:	1a 96       	adiw	r26, 0x0a	; 10
    112c:	2c 93       	st	X, r18
    112e:	dc 01       	movw	r26, r24
    1130:	2c 91       	ld	r18, X
    1132:	24 60       	ori	r18, 0x04	; 4
    1134:	2c 93       	st	X, r18
    1136:	a0 ef       	ldi	r26, 0xF0	; 240
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	2c 91       	ld	r18, X
    113c:	24 60       	ori	r18, 0x04	; 4
    113e:	2c 93       	st	X, r18
          Can_set_rplv();
    1140:	20 81       	ld	r18, Z
    1142:	20 62       	ori	r18, 0x20	; 32
    1144:	20 83       	st	Z, r18
          Can_set_idemsk();
    1146:	dc 01       	movw	r26, r24
    1148:	2c 91       	ld	r18, X
    114a:	21 60       	ori	r18, 0x01	; 1
    114c:	2c 93       	st	X, r18
          Can_config_rx();       
    114e:	80 81       	ld	r24, Z
    1150:	8f 73       	andi	r24, 0x3F	; 63
    1152:	80 83       	st	Z, r24
    1154:	80 81       	ld	r24, Z
    1156:	80 68       	ori	r24, 0x80	; 128
    1158:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    115a:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    115c:	08 c0       	rjmp	.+16     	; 0x116e <__stack+0x86f>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    115e:	19 96       	adiw	r26, 0x09	; 9
    1160:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1162:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    1164:	04 c0       	rjmp	.+8      	; 0x116e <__stack+0x86f>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1166:	8f e1       	ldi	r24, 0x1F	; 31
    1168:	19 96       	adiw	r26, 0x09	; 9
    116a:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    116e:	0f 90       	pop	r0
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	08 95       	ret

00001176 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    117e:	88 23       	and	r24, r24
    1180:	09 f4       	brne	.+2      	; 0x1184 <can_get_status+0xe>
    1182:	e3 c0       	rjmp	.+454    	; 0x134a <can_get_status+0x1d4>
    1184:	8f 31       	cpi	r24, 0x1F	; 31
    1186:	09 f4       	brne	.+2      	; 0x118a <can_get_status+0x14>
    1188:	e2 c0       	rjmp	.+452    	; 0x134e <can_get_status+0x1d8>
    118a:	8f 3f       	cpi	r24, 0xFF	; 255
    118c:	09 f4       	brne	.+2      	; 0x1190 <can_get_status+0x1a>
    118e:	e1 c0       	rjmp	.+450    	; 0x1352 <can_get_status+0x1dc>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    1190:	62 95       	swap	r22
    1192:	60 7f       	andi	r22, 0xF0	; 240
    1194:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    1198:	0e 94 52 02 	call	0x4a4	; 0x4a4 <can_get_mob_status>
    
    switch (a_status)
    119c:	80 32       	cpi	r24, 0x20	; 32
    119e:	61 f0       	breq	.+24     	; 0x11b8 <can_get_status+0x42>
    11a0:	20 f4       	brcc	.+8      	; 0x11aa <can_get_status+0x34>
    11a2:	88 23       	and	r24, r24
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <can_get_status+0x32>
    11a6:	d7 c0       	rjmp	.+430    	; 0x1356 <can_get_status+0x1e0>
    11a8:	c6 c0       	rjmp	.+396    	; 0x1336 <can_get_status+0x1c0>
    11aa:	80 34       	cpi	r24, 0x40	; 64
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <can_get_status+0x3a>
    11ae:	b8 c0       	rjmp	.+368    	; 0x1320 <can_get_status+0x1aa>
    11b0:	80 3a       	cpi	r24, 0xA0	; 160
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <can_get_status+0x40>
    11b4:	5c c0       	rjmp	.+184    	; 0x126e <can_get_status+0xf8>
    11b6:	bf c0       	rjmp	.+382    	; 0x1336 <can_get_status+0x1c0>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_toggle(LED7);	//Toggle LED0 when the appropriate message is received.
    11b8:	87 e0       	ldi	r24, 0x07	; 7
    11ba:	0e 94 af 09 	call	0x135e	; 0x135e <LED_toggle>
			delay_ms(100);
    11be:	84 e6       	ldi	r24, 0x64	; 100
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
			LED_toggle(LED7);
    11c6:	87 e0       	ldi	r24, 0x07	; 7
    11c8:	0e 94 af 09 	call	0x135e	; 0x135e <LED_toggle>
			delay_ms(100);
    11cc:	84 e6       	ldi	r24, 0x64	; 100
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
	    
            cmd->ctrl.rtr = Can_get_rtr();
    11d4:	80 91 f0 00 	lds	r24, 0x00F0
    11d8:	82 fb       	bst	r24, 2
    11da:	88 27       	eor	r24, r24
    11dc:	80 f9       	bld	r24, 0
    11de:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    11e0:	80 91 ef 00 	lds	r24, 0x00EF
    11e4:	84 ff       	sbrs	r24, 4
    11e6:	2d c0       	rjmp	.+90     	; 0x1242 <can_get_status+0xcc>
            {
	            cmd->ctrl.ide = 1; // extended frame
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    11ec:	e3 ef       	ldi	r30, 0xF3	; 243
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	86 95       	lsr	r24
    11f4:	86 95       	lsr	r24
    11f6:	86 95       	lsr	r24
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	a2 ef       	ldi	r26, 0xF2	; 242
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	8c 91       	ld	r24, X
    1200:	90 81       	ld	r25, Z
    1202:	86 95       	lsr	r24
    1204:	86 95       	lsr	r24
    1206:	86 95       	lsr	r24
    1208:	20 e2       	ldi	r18, 0x20	; 32
    120a:	92 9f       	mul	r25, r18
    120c:	80 0d       	add	r24, r0
    120e:	11 24       	eor	r1, r1
    1210:	8c 83       	std	Y+4, r24	; 0x04
    1212:	e1 ef       	ldi	r30, 0xF1	; 241
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	9c 91       	ld	r25, X
    121a:	86 95       	lsr	r24
    121c:	86 95       	lsr	r24
    121e:	86 95       	lsr	r24
    1220:	20 e2       	ldi	r18, 0x20	; 32
    1222:	92 9f       	mul	r25, r18
    1224:	80 0d       	add	r24, r0
    1226:	11 24       	eor	r1, r1
    1228:	8b 83       	std	Y+3, r24	; 0x03
    122a:	80 91 f0 00 	lds	r24, 0x00F0
    122e:	90 81       	ld	r25, Z
    1230:	86 95       	lsr	r24
    1232:	86 95       	lsr	r24
    1234:	86 95       	lsr	r24
    1236:	20 e2       	ldi	r18, 0x20	; 32
    1238:	92 9f       	mul	r25, r18
    123a:	80 0d       	add	r24, r0
    123c:	11 24       	eor	r1, r1
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	07 c0       	rjmp	.+14     	; 0x1250 <can_get_status+0xda>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    1242:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    1244:	e3 ef       	ldi	r30, 0xF3	; 243
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 91 f2 00 	lds	r24, 0x00F2
    124e:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    1250:	80 e2       	ldi	r24, 0x20	; 32
    1252:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1254:	8f 81       	ldd	r24, Y+7	; 0x07
    1256:	98 85       	ldd	r25, Y+8	; 0x08
    1258:	0e 94 68 02 	call	0x4d0	; 0x4d0 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    125c:	ef ee       	ldi	r30, 0xEF	; 239
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	8f 73       	andi	r24, 0x3F	; 63
    1264:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    1266:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    126a:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    126c:	75 c0       	rjmp	.+234    	; 0x1358 <can_get_status+0x1e2>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    126e:	80 91 f0 00 	lds	r24, 0x00F0
    1272:	82 fb       	bst	r24, 2
    1274:	88 27       	eor	r24, r24
    1276:	80 f9       	bld	r24, 0
    1278:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    127a:	80 91 ef 00 	lds	r24, 0x00EF
    127e:	84 ff       	sbrs	r24, 4
    1280:	2d c0       	rjmp	.+90     	; 0x12dc <can_get_status+0x166>
            {
                cmd->ctrl.ide = 1; // extended frame
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1286:	e3 ef       	ldi	r30, 0xF3	; 243
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	86 95       	lsr	r24
    128e:	86 95       	lsr	r24
    1290:	86 95       	lsr	r24
    1292:	8d 83       	std	Y+5, r24	; 0x05
    1294:	a2 ef       	ldi	r26, 0xF2	; 242
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	8c 91       	ld	r24, X
    129a:	90 81       	ld	r25, Z
    129c:	86 95       	lsr	r24
    129e:	86 95       	lsr	r24
    12a0:	86 95       	lsr	r24
    12a2:	20 e2       	ldi	r18, 0x20	; 32
    12a4:	92 9f       	mul	r25, r18
    12a6:	80 0d       	add	r24, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	8c 83       	std	Y+4, r24	; 0x04
    12ac:	e1 ef       	ldi	r30, 0xF1	; 241
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	9c 91       	ld	r25, X
    12b4:	86 95       	lsr	r24
    12b6:	86 95       	lsr	r24
    12b8:	86 95       	lsr	r24
    12ba:	20 e2       	ldi	r18, 0x20	; 32
    12bc:	92 9f       	mul	r25, r18
    12be:	80 0d       	add	r24, r0
    12c0:	11 24       	eor	r1, r1
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	80 91 f0 00 	lds	r24, 0x00F0
    12c8:	90 81       	ld	r25, Z
    12ca:	86 95       	lsr	r24
    12cc:	86 95       	lsr	r24
    12ce:	86 95       	lsr	r24
    12d0:	20 e2       	ldi	r18, 0x20	; 32
    12d2:	92 9f       	mul	r25, r18
    12d4:	80 0d       	add	r24, r0
    12d6:	11 24       	eor	r1, r1
    12d8:	8a 83       	std	Y+2, r24	; 0x02
    12da:	13 c0       	rjmp	.+38     	; 0x1302 <can_get_status+0x18c>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    12dc:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    12de:	e3 ef       	ldi	r30, 0xF3	; 243
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	82 95       	swap	r24
    12e6:	86 95       	lsr	r24
    12e8:	87 70       	andi	r24, 0x07	; 7
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	80 91 f2 00 	lds	r24, 0x00F2
    12f0:	90 81       	ld	r25, Z
    12f2:	99 0f       	add	r25, r25
    12f4:	99 0f       	add	r25, r25
    12f6:	99 0f       	add	r25, r25
    12f8:	82 95       	swap	r24
    12fa:	86 95       	lsr	r24
    12fc:	87 70       	andi	r24, 0x07	; 7
    12fe:	89 0f       	add	r24, r25
    1300:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1302:	80 ea       	ldi	r24, 0xA0	; 160
    1304:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1306:	8f 81       	ldd	r24, Y+7	; 0x07
    1308:	98 85       	ldd	r25, Y+8	; 0x08
    130a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    130e:	ef ee       	ldi	r30, 0xEF	; 239
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8f 73       	andi	r24, 0x3F	; 63
    1316:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    1318:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    131c:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    131e:	1c c0       	rjmp	.+56     	; 0x1358 <can_get_status+0x1e2>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1320:	80 e4       	ldi	r24, 0x40	; 64
    1322:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1324:	ef ee       	ldi	r30, 0xEF	; 239
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8f 73       	andi	r24, 0x3F	; 63
    132c:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    132e:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1332:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1334:	11 c0       	rjmp	.+34     	; 0x1358 <can_get_status+0x1e2>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1336:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    1338:	ef ee       	ldi	r30, 0xEF	; 239
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8f 73       	andi	r24, 0x3F	; 63
    1340:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1342:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1346:	82 e0       	ldi	r24, 0x02	; 2
            break;
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <can_get_status+0x1e2>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <can_get_status+0x1e2>
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <can_get_status+0x1e2>
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <can_get_status+0x1e2>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1356:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <LED_toggle>:
	LEDPORT |= (1 << LED);
}

void LED_toggle(uint8_t LED) {
	
	if(LED == 7)
    135e:	87 30       	cpi	r24, 0x07	; 7
    1360:	29 f4       	brne	.+10     	; 0x136c <LED_toggle+0xe>
	{
		PORTD ^= 0x01;
    1362:	2b b1       	in	r18, 0x0b	; 11
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	92 27       	eor	r25, r18
    1368:	9b b9       	out	0x0b, r25	; 11
    136a:	07 c0       	rjmp	.+14     	; 0x137a <LED_toggle+0x1c>
	}
	if(LED == 3)
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	29 f4       	brne	.+10     	; 0x137a <LED_toggle+0x1c>
	{
		PORTC ^= 0x01;
    1370:	98 b1       	in	r25, 0x08	; 8
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 27       	eor	r24, r25
    1376:	88 b9       	out	0x08, r24	; 8
    1378:	08 95       	ret
	}
	else
		LEDPORT ^= (1 << LED);
    137a:	45 b1       	in	r20, 0x05	; 5
    137c:	21 e0       	ldi	r18, 0x01	; 1
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	b9 01       	movw	r22, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <LED_toggle+0x2a>
    1384:	66 0f       	add	r22, r22
    1386:	77 1f       	adc	r23, r23
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <LED_toggle+0x26>
    138c:	cb 01       	movw	r24, r22
    138e:	84 27       	eor	r24, r20
    1390:	85 b9       	out	0x05, r24	; 5
    1392:	08 95       	ret

00001394 <main>:
/**************************************************/

volatile uint8_t CTC_flag;	// Variable used in timer.c

int main(void)
{		
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	00 d0       	rcall	.+0      	; 0x139a <main+0x6>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
	uint8_t	i = 0;
	
	uint8_t msg_low = 0, msg_high = 0;
	
	uint8_t high = 0, low = 0;
    139e:	19 82       	std	Y+1, r1	; 0x01
    13a0:	1a 82       	std	Y+2, r1	; 0x02
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    13a2:	e1 e6       	ldi	r30, 0x61	; 97
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 e8       	ldi	r24, 0x80	; 128
    13a8:	80 83       	st	Z, r24
	CLKPR = 0x00;
    13aa:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    13ac:	8e ef       	ldi	r24, 0xFE	; 254
    13ae:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    13b0:	81 e1       	ldi	r24, 0x11	; 17
    13b2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    13b4:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    13b6:	89 e0       	ldi	r24, 0x09	; 9
    13b8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    13be:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    13c0:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	
	timer_init();
    13c2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <timer_init>
	adc_initialize();
    13c6:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	0e 94 80 02 	call	0x500	; 0x500 <can_init>
	can_init_mobs();
    13d0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <can_init_mobs>
	spi_initialize_master();
    13d4:	0e 94 8d 0a 	call	0x151a	; 0x151a <spi_initialize_master>
	
	// Enable global interrupts for Timer execution
	sei();
    13d8:	78 94       	sei
	
	transceiver_initialize();
    13da:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <transceiver_initialize>
	
	SS1_set_high();		// SPI Temp Sensor.
    13de:	0e 94 bd 0a 	call	0x157a	; 0x157a <SS1_set_high>
	
	LED_toggle(LED7);
    13e2:	87 e0       	ldi	r24, 0x07	; 7
    13e4:	0e 94 af 09 	call	0x135e	; 0x135e <LED_toggle>
    13e8:	0f 2e       	mov	r0, r31
    13ea:	f0 e1       	ldi	r31, 0x10	; 16
    13ec:	ef 2e       	mov	r14, r31
    13ee:	f1 e0       	ldi	r31, 0x01	; 1
    13f0:	ff 2e       	mov	r15, r31
    13f2:	f0 2d       	mov	r31, r0
    13f4:	08 e1       	ldi	r16, 0x18	; 24
    13f6:	11 e0       	ldi	r17, 0x01	; 1
			spi_retrieve_temp(&high, &low);
				//high += msg_high / 10;
				//low += msg_low / 10;
			//}
			
			send_arr[1] = high;		// SPI temperature sensor readings.
    13f8:	0f 2e       	mov	r0, r31
    13fa:	f1 e1       	ldi	r31, 0x11	; 17
    13fc:	af 2e       	mov	r10, r31
    13fe:	f1 e0       	ldi	r31, 0x01	; 1
    1400:	bf 2e       	mov	r11, r31
    1402:	f0 2d       	mov	r31, r0
			send_arr[0] = low;
			
			send_arr[4] = 0x55;			// Temperature indicator.
    1404:	0f 2e       	mov	r0, r31
    1406:	f4 e1       	ldi	r31, 0x14	; 20
    1408:	cf 2e       	mov	r12, r31
    140a:	f1 e0       	ldi	r31, 0x01	; 1
    140c:	df 2e       	mov	r13, r31
    140e:	f0 2d       	mov	r31, r0
    1410:	4e 2c       	mov	r4, r14
    1412:	5f 2c       	mov	r5, r15
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			send_arr[0] = trans_msg[0];	// ASCII character which was received.
    1414:	0f 2e       	mov	r0, r31
    1416:	f2 e5       	ldi	r31, 0x52	; 82
    1418:	8f 2e       	mov	r8, r31
    141a:	f1 e0       	ldi	r31, 0x01	; 1
    141c:	9f 2e       	mov	r9, r31
    141e:	f0 2d       	mov	r31, r0
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    1420:	0f 2e       	mov	r0, r31
    1422:	fb ea       	ldi	r31, 0xAB	; 171
    1424:	6f 2e       	mov	r6, r31
    1426:	f0 2d       	mov	r31, r0
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    1428:	0f 2e       	mov	r0, r31
    142a:	f0 ef       	ldi	r31, 0xF0	; 240
    142c:	7f 2e       	mov	r7, r31
    142e:	f0 2d       	mov	r31, r0
			//}
			
			send_arr[1] = high;		// SPI temperature sensor readings.
			send_arr[0] = low;
			
			send_arr[4] = 0x55;			// Temperature indicator.
    1430:	0f 2e       	mov	r0, r31
    1432:	f5 e5       	ldi	r31, 0x55	; 85
    1434:	3f 2e       	mov	r3, r31
    1436:	f0 2d       	mov	r31, r0
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 */
		can_check_general();
    1438:	0e 94 67 00 	call	0xce	; 0xce <can_check_general>
		
		/* CHECK FOR HOUSEKEEPING REQUEST */
		can_check_housekeep();
    143c:	0e 94 31 01 	call	0x262	; 0x262 <can_check_housekeep>
		//trans_check();
		
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    1440:	80 91 2c 01 	lds	r24, 0x012C
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	69 f4       	brne	.+26     	; 0x1462 <main+0xce>
    1448:	e4 2d       	mov	r30, r4
    144a:	f5 2d       	mov	r31, r5
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    144c:	61 92       	st	Z+, r6
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
    144e:	e0 17       	cp	r30, r16
    1450:	f1 07       	cpc	r31, r17
    1452:	e1 f7       	brne	.-8      	; 0x144c <main+0xb8>
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1454:	61 e1       	ldi	r22, 0x11	; 17
    1456:	84 2d       	mov	r24, r4
    1458:	95 2d       	mov	r25, r5
    145a:	0e 94 c3 01 	call	0x386	; 0x386 <can_send_message>
			send_now = 0;
    145e:	10 92 2c 01 	sts	0x012C, r1
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
    1462:	80 91 35 01 	lds	r24, 0x0135
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	69 f4       	brne	.+26     	; 0x1484 <main+0xf0>
    146a:	e4 2d       	mov	r30, r4
    146c:	f5 2d       	mov	r31, r5
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    146e:	71 92       	st	Z+, r7
			send_now = 0;
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    1470:	e0 17       	cp	r30, r16
    1472:	f1 07       	cpc	r31, r17
    1474:	e1 f7       	brne	.-8      	; 0x146e <main+0xda>
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1476:	60 e1       	ldi	r22, 0x10	; 16
    1478:	84 2d       	mov	r24, r4
    147a:	95 2d       	mov	r25, r5
    147c:	0e 94 c3 01 	call	0x386	; 0x386 <can_send_message>
			send_hk = 0;
    1480:	10 92 35 01 	sts	0x0135, r1
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
    1484:	80 91 46 01 	lds	r24, 0x0146
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	f1 f4       	brne	.+60     	; 0x14c8 <main+0x134>
    148c:	e4 2d       	mov	r30, r4
    148e:	f5 2d       	mov	r31, r5
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    1490:	11 92       	st	Z+, r1
			send_hk = 0;
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    1492:	e0 17       	cp	r30, r16
    1494:	f1 07       	cpc	r31, r17
    1496:	e1 f7       	brne	.-8      	; 0x1490 <main+0xfc>
			
			//adc_read(&send_arr[0]);

			//for (i = 0; i < 10; i ++)
			//{
			spi_retrieve_temp(&high, &low);
    1498:	be 01       	movw	r22, r28
    149a:	6e 5f       	subi	r22, 0xFE	; 254
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	ce 01       	movw	r24, r28
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	0e 94 c6 0a 	call	0x158c	; 0x158c <spi_retrieve_temp>
				//high += msg_high / 10;
				//low += msg_low / 10;
			//}
			
			send_arr[1] = high;		// SPI temperature sensor readings.
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	f5 01       	movw	r30, r10
    14aa:	80 83       	st	Z, r24
			send_arr[0] = low;
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	f7 01       	movw	r30, r14
    14b0:	80 83       	st	Z, r24
			
			send_arr[4] = 0x55;			// Temperature indicator.
    14b2:	f6 01       	movw	r30, r12
    14b4:	30 82       	st	Z, r3
			
			can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    14b6:	6a e0       	ldi	r22, 0x0A	; 10
    14b8:	84 2d       	mov	r24, r4
    14ba:	95 2d       	mov	r25, r5
    14bc:	0e 94 c3 01 	call	0x386	; 0x386 <can_send_message>
			send_data = 0;
    14c0:	10 92 46 01 	sts	0x0146, r1
			
			low = 0;
    14c4:	1a 82       	std	Y+2, r1	; 0x02
			high = 0;
    14c6:	19 82       	std	Y+1, r1	; 0x01
		}
		
		if (send_coms == 1)		// Send a reply to the message that was received!
    14c8:	80 91 51 01 	lds	r24, 0x0151
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	09 f0       	breq	.+2      	; 0x14d2 <main+0x13e>
    14d0:	b3 cf       	rjmp	.-154    	; 0x1438 <main+0xa4>
    14d2:	f7 01       	movw	r30, r14
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    14d4:	11 92       	st	Z+, r1
			high = 0;
		}
		
		if (send_coms == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    14d6:	e0 17       	cp	r30, r16
    14d8:	f1 07       	cpc	r31, r17
    14da:	e1 f7       	brne	.-8      	; 0x14d4 <main+0x140>
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			send_arr[0] = trans_msg[0];	// ASCII character which was received.
    14dc:	f4 01       	movw	r30, r8
    14de:	80 81       	ld	r24, Z
    14e0:	f7 01       	movw	r30, r14
    14e2:	80 83       	st	Z, r24
			send_arr[1] = trans_msg[1];
    14e4:	80 91 53 01 	lds	r24, 0x0153
    14e8:	f5 01       	movw	r30, r10
    14ea:	80 83       	st	Z, r24
			send_arr[2] = trans_msg[2];
    14ec:	80 91 54 01 	lds	r24, 0x0154
    14f0:	80 93 12 01 	sts	0x0112, r24
			send_arr[3] = trans_msg[3];
    14f4:	80 91 55 01 	lds	r24, 0x0155
    14f8:	80 93 13 01 	sts	0x0113, r24
			send_arr[4] = trans_msg[4];
    14fc:	80 91 56 01 	lds	r24, 0x0156
    1500:	f6 01       	movw	r30, r12
    1502:	80 83       	st	Z, r24
			send_arr[5] = trans_msg[5];
    1504:	80 91 57 01 	lds	r24, 0x0157
    1508:	80 93 15 01 	sts	0x0115, r24
			
			can_send_message(&(send_arr[0]), CAN1_MB5);		//CAN1_MB0 is the data reception MB.
    150c:	6f e0       	ldi	r22, 0x0F	; 15
    150e:	c7 01       	movw	r24, r14
    1510:	0e 94 c3 01 	call	0x386	; 0x386 <can_send_message>
			send_coms = 0;
    1514:	10 92 51 01 	sts	0x0151, r1
    1518:	83 cf       	rjmp	.-250    	; 0x1420 <main+0x8c>

0000151a <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    151a:	85 b7       	in	r24, 0x35	; 53
    151c:	8f 77       	andi	r24, 0x7F	; 127
    151e:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    1520:	83 e5       	ldi	r24, 0x53	; 83
    1522:	8c bd       	out	0x2c, r24	; 44
    1524:	08 95       	ret

00001526 <spi_transfer>:
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	//SS_set_low();
	*reg_ptr = message;
    1526:	8e bd       	out	0x2e, r24	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    1528:	0d b4       	in	r0, 0x2d	; 45
    152a:	07 fc       	sbrc	r0, 7
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <spi_transfer+0x10>
    152e:	89 ee       	ldi	r24, 0xE9	; 233
    1530:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    1532:	f1 f7       	brne	.-4      	; 0x1530 <spi_transfer+0xa>
    1534:	08 95       	ret
			delay_ms(100);
		}
	}	
	//SS_set_high();
	
	delay_cycles(10);
    1536:	8a e0       	ldi	r24, 0x0A	; 10
    1538:	0e 94 22 0b 	call	0x1644	; 0x1644 <delay_cycles>
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    153c:	8e b5       	in	r24, 0x2e	; 46
		//temp2 = temp2 << (7 - i);		
		//temp += temp2;
	//}
	
	return receive_char;					// Transmission was successful, return the character that was received.
}
    153e:	08 95       	ret

00001540 <SS_set_high>:
/************************************************************************/

void SS_set_high(void) 
{
	//PORTD |= (1 << 3);
	delay_us(1);
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
    1548:	08 95       	ret

0000154a <spi_transfer2>:
	
	return receive_char;					// Transmission was successful, return the character that was received.
}

uint8_t spi_transfer2(uint8_t message)
{
    154a:	cf 93       	push	r28
	//cmd_str(SRES);
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	PORTD &= (0xF7);
    154c:	5b 98       	cbi	0x0b, 3	; 11
	//delay_cycles(10);
	*reg_ptr = message;
    154e:	8e bd       	out	0x2e, r24	; 46
	//delay_cycles(10);
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    1550:	0d b4       	in	r0, 0x2d	; 45
    1552:	07 fc       	sbrc	r0, 7
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <spi_transfer2+0x18>
    1556:	c9 ee       	ldi	r28, 0xE9	; 233
    1558:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    155a:	f1 f7       	brne	.-4      	; 0x1558 <spi_transfer2+0xe>
		{
			SS_set_high();
    155c:	0e 94 a0 0a 	call	0x1540	; 0x1540 <SS_set_high>
			return 0x00;						// Something went wrong, so the function times out.
    1560:	09 c0       	rjmp	.+18     	; 0x1574 <spi_transfer2+0x2a>
		}
	}
	delay_cycles(7);
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	0e 94 22 0b 	call	0x1644	; 0x1644 <delay_cycles>
	SS_set_high();
    1568:	0e 94 a0 0a 	call	0x1540	; 0x1540 <SS_set_high>
	
	delay_cycles(10);
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	0e 94 22 0b 	call	0x1644	; 0x1644 <delay_cycles>
		
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    1572:	ce b5       	in	r28, 0x2e	; 46
		
	return receive_char;					// Transmission was successful, return the character that was received.
}
    1574:	8c 2f       	mov	r24, r28
    1576:	cf 91       	pop	r28
    1578:	08 95       	ret

0000157a <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    157a:	44 9a       	sbi	0x08, 4	; 8
    157c:	08 95       	ret

0000157e <SS_set_low>:
/************************************************************************/

void SS_set_low(void)
{
	//PORTD &= (0xF7);
	delay_us(1);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
    1586:	08 95       	ret

00001588 <SS1_set_low>:
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    1588:	44 98       	cbi	0x08, 4	; 8
    158a:	08 95       	ret

0000158c <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	8c 01       	movw	r16, r24
    1596:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    1598:	0e 94 c4 0a 	call	0x1588	; 0x1588 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    159c:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    159e:	80 e8       	ldi	r24, 0x80	; 128
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
	*high = *reg_ptr;
    15a6:	8e b5       	in	r24, 0x2e	; 46
    15a8:	f8 01       	movw	r30, r16
    15aa:	80 83       	st	Z, r24
	delay_ms(128);
    15ac:	80 e8       	ldi	r24, 0x80	; 128
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
	*low = *reg_ptr;	
    15b4:	8e b5       	in	r24, 0x2e	; 46
    15b6:	88 83       	st	Y, r24
	SS1_set_high();
    15b8:	0e 94 bd 0a 	call	0x157a	; 0x157a <SS1_set_high>
	
	return;
}
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	08 95       	ret

000015c6 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	8f 93       	push	r24
	CTC_flag = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 58 01 	sts	0x0158, r24
}
    15d8:	8f 91       	pop	r24
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    15e4:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    15e8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    15ec:	8a e0       	ldi	r24, 0x0A	; 10
    15ee:	80 93 81 00 	sts	0x0081, r24
    15f2:	08 95       	ret

000015f4 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    15f4:	10 92 58 01 	sts	0x0158, r1
	TCNT1 = 0x0000; //Clear timer
    15f8:	10 92 85 00 	sts	0x0085, r1
    15fc:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    1600:	90 93 89 00 	sts	0x0089, r25
    1604:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    160e:	80 91 58 01 	lds	r24, 0x0158
    1612:	88 23       	and	r24, r24
    1614:	e1 f3       	breq	.-8      	; 0x160e <delay_us+0x1a>
}
    1616:	08 95       	ret

00001618 <delay_ms>:

void delay_ms(uint16_t ms) {
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	51 f0       	breq	.+20     	; 0x163a <delay_ms+0x22>
    1626:	c0 e0       	ldi	r28, 0x00	; 0
    1628:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    162a:	88 ee       	ldi	r24, 0xE8	; 232
    162c:	93 e0       	ldi	r25, 0x03	; 3
    162e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    1632:	21 96       	adiw	r28, 0x01	; 1
    1634:	c0 17       	cp	r28, r16
    1636:	d1 07       	cpc	r29, r17
    1638:	c1 f7       	brne	.-16     	; 0x162a <delay_ms+0x12>
		delay_us(1000);
	}
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	08 95       	ret

00001644 <delay_cycles>:

void delay_cycles(uint8_t cycles)	// @ 8 MHz, 1 cycle = 125 ns
{
	uint8_t i;
	
	for (i = 0; i < cycles; i++)
    1644:	88 23       	and	r24, r24
    1646:	21 f0       	breq	.+8      	; 0x1650 <delay_cycles+0xc>
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9f 5f       	subi	r25, 0xFF	; 255
    164c:	98 13       	cpse	r25, r24
    164e:	fd cf       	rjmp	.-6      	; 0x164a <delay_cycles+0x6>
    1650:	08 95       	ret

00001652 <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
    1652:	cf 93       	push	r28
    1654:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
    1656:	0e 94 bf 0a 	call	0x157e	; 0x157e <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
    165a:	80 e8       	ldi	r24, 0x80	; 128
    165c:	8c 0f       	add	r24, r28
    165e:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
	delay_us(1);
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
	msg = spi_transfer(0x00);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
    1670:	c8 2f       	mov	r28, r24

	SS_set_high();
    1672:	0e 94 a0 0a 	call	0x1540	; 0x1540 <SS_set_high>
	
	delay_ms(1);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
	
	return msg;
}
    167e:	8c 2f       	mov	r24, r28
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	d8 2f       	mov	r29, r24
    168a:	c6 2f       	mov	r28, r22
	uint8_t msg, check, i;
	
	SS_set_low();
    168c:	0e 94 bf 0a 	call	0x157e	; 0x157e <SS_set_low>
	msg = spi_transfer(addr);		// Send the desired address
    1690:	8d 2f       	mov	r24, r29
    1692:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
	delay_us(1);
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    169e:	8c 2f       	mov	r24, r28
    16a0:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
	SS_set_high();
    16a4:	0e 94 a0 0a 	call	0x1540	; 0x1540 <SS_set_high>
	
	delay_ms(1);
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>

	return;
}
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
    16b6:	cf 93       	push	r28
    16b8:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
    16ba:	0e 94 bf 0a 	call	0x157e	; 0x157e <SS_set_low>
	msg = spi_transfer(msg);
    16be:	8f ea       	ldi	r24, 0xAF	; 175
    16c0:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
	delay_us(1);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    16cc:	8c 2f       	mov	r24, r28
    16ce:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
	delay_us(1);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
	msg = spi_transfer(0x00);
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
    16e0:	c8 2f       	mov	r28, r24
	SS_set_high();
    16e2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <SS_set_high>
	delay_ms(1);
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
	return msg;
}
    16ee:	8c 2f       	mov	r24, r28
    16f0:	cf 91       	pop	r28
    16f2:	08 95       	ret

000016f4 <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr)
{
    16f4:	cf 93       	push	r28
	uint8_t msg;
	
	msg = spi_transfer2(addr);
    16f6:	0e 94 a5 0a 	call	0x154a	; 0x154a <spi_transfer2>
    16fa:	c8 2f       	mov	r28, r24
	
	delay_us(1);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
	return msg;
}
    1704:	8c 2f       	mov	r24, r28
    1706:	cf 91       	pop	r28
    1708:	08 95       	ret

0000170a <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	d8 2f       	mov	r29, r24
    1710:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    1712:	8d e3       	ldi	r24, 0x3D	; 61
    1714:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <cmd_str>
	uint8_t msg, i, check;
	msg = 0b00101111;
	
	SS_set_low();
    1718:	0e 94 bf 0a 	call	0x157e	; 0x157e <SS_set_low>
	spi_transfer(msg);
    171c:	8f e2       	ldi	r24, 0x2F	; 47
    171e:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
	delay_us(1);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    172a:	8d 2f       	mov	r24, r29
    172c:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
	delay_us(1);
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    1738:	8c 2f       	mov	r24, r28
    173a:	0e 94 93 0a 	call	0x1526	; 0x1526 <spi_transfer>
	SS_set_high();
    173e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <SS_set_high>
	delay_ms(1);
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>

	return;
}
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	c8 2f       	mov	r28, r24
    1758:	d6 2f       	mov	r29, r22
    175a:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
    175c:	0e 94 29 0b 	call	0x1652	; 0x1652 <reg_read>
	if(!data)
    1760:	11 11       	cpse	r17, r1
    1762:	0c c0       	rjmp	.+24     	; 0x177c <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
    1764:	e1 e0       	ldi	r30, 0x01	; 1
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	af 01       	movw	r20, r30
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <reg_write_bit+0x20>
    176c:	44 0f       	add	r20, r20
    176e:	55 1f       	adc	r21, r21
    1770:	da 95       	dec	r29
    1772:	e2 f7       	brpl	.-8      	; 0x176c <reg_write_bit+0x1c>
    1774:	40 95       	com	r20
		msg = temp & msg;
    1776:	68 2f       	mov	r22, r24
    1778:	64 23       	and	r22, r20
    177a:	0a c0       	rjmp	.+20     	; 0x1790 <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	50 e0       	ldi	r21, 0x00	; 0
    1780:	9a 01       	movw	r18, r20
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <reg_write_bit+0x38>
    1784:	22 0f       	add	r18, r18
    1786:	33 1f       	adc	r19, r19
    1788:	da 95       	dec	r29
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <reg_write_bit+0x34>
		msg = temp | msg;
    178c:	68 2f       	mov	r22, r24
    178e:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
    1790:	8c 2f       	mov	r24, r28
    1792:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	return;
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	08 95       	ret

0000179e <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	c8 2f       	mov	r28, r24
    17a6:	d6 2f       	mov	r29, r22
    17a8:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
    17aa:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <reg_read2F>
	if(!data)
    17ae:	11 11       	cpse	r17, r1
    17b0:	0c c0       	rjmp	.+24     	; 0x17ca <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
    17b2:	e1 e0       	ldi	r30, 0x01	; 1
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	af 01       	movw	r20, r30
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <reg_write_bit2F+0x20>
    17ba:	44 0f       	add	r20, r20
    17bc:	55 1f       	adc	r21, r21
    17be:	da 95       	dec	r29
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <reg_write_bit2F+0x1c>
    17c2:	40 95       	com	r20
		msg = temp & msg;
    17c4:	68 2f       	mov	r22, r24
    17c6:	64 23       	and	r22, r20
    17c8:	0a c0       	rjmp	.+20     	; 0x17de <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	9a 01       	movw	r18, r20
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <reg_write_bit2F+0x38>
    17d2:	22 0f       	add	r18, r18
    17d4:	33 1f       	adc	r19, r19
    17d6:	da 95       	dec	r29
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <reg_write_bit2F+0x34>
		msg = temp | msg;
    17da:	68 2f       	mov	r22, r24
    17dc:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
    17de:	8c 2f       	mov	r24, r28
    17e0:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	return;
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	08 95       	ret

000017ec <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    17ec:	0e 94 bf 0a 	call	0x157e	; 0x157e <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	  
	//RESET 
    cmd_str(SRES);             //SRES                  reset chip
    17f0:	80 e3       	ldi	r24, 0x30	; 48
    17f2:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <cmd_str>
      
    //Reset RX FIFO
    cmd_str(SFRX);             //SFRX                  flush RX FIFO
    17f6:	8a e3       	ldi	r24, 0x3A	; 58
    17f8:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <cmd_str>
      
    //Reset TX FIFO
    cmd_str(SFTX);             //SFTX                  flush TX FIFO
    17fc:	8b e3       	ldi	r24, 0x3B	; 59
    17fe:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <cmd_str>

	//**************SET UP RX****************//
  
	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	82 e1       	ldi	r24, 0x12	; 18
    1806:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    180a:	6f e5       	ldi	r22, 0x5F	; 95
    180c:	83 e1       	ldi	r24, 0x13	; 19
    180e:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    1812:	60 e4       	ldi	r22, 0x40	; 64
    1814:	86 e1       	ldi	r24, 0x16	; 22
    1816:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    181a:	6e e0       	ldi	r22, 0x0E	; 14
    181c:	87 e1       	ldi	r24, 0x17	; 23
    181e:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    1822:	63 e0       	ldi	r22, 0x03	; 3
    1824:	89 e1       	ldi	r24, 0x19	; 25
    1826:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    182a:	63 e3       	ldi	r22, 0x33	; 51
    182c:	8b e1       	ldi	r24, 0x1B	; 27
    182e:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    1832:	67 e1       	ldi	r22, 0x17	; 23
    1834:	8d e1       	ldi	r24, 0x1D	; 29
    1836:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    183a:	60 e5       	ldi	r22, 0x50	; 80
    183c:	8f e1       	ldi	r24, 0x1F	; 31
    183e:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
//  reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
  
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    1842:	64 e1       	ldi	r22, 0x14	; 20
    1844:	81 e2       	ldi	r24, 0x21	; 33
    1846:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    184a:	6c ea       	ldi	r22, 0xAC	; 172
    184c:	82 e2       	ldi	r24, 0x22	; 34
    184e:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	//reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
	//reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
	//reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
  
	cmd_str(SNOP);
    1852:	8d e3       	ldi	r24, 0x3D	; 61
    1854:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <cmd_str>
	//For test purposes only, (2nd block, deleted first one) use values from SmartRF for some bits
	reg_write(0x08, 0x0B);            //*Changed on line 152
    1858:	6b e0       	ldi	r22, 0x0B	; 11
    185a:	88 e0       	ldi	r24, 0x08	; 8
    185c:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x13, 0x0D);            //
    1860:	6d e0       	ldi	r22, 0x0D	; 13
    1862:	83 e1       	ldi	r24, 0x13	; 19
    1864:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x26, 0x04);            //*Changed on line 144
    1868:	64 e0       	ldi	r22, 0x04	; 4
    186a:	86 e2       	ldi	r24, 0x26	; 38
    186c:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
  
	//High performance RX
	reg_write(0x08, 0x0B);            //
    1870:	6b e0       	ldi	r22, 0x0B	; 11
    1872:	88 e0       	ldi	r24, 0x08	; 8
    1874:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x0C, 0x1C);            //
    1878:	6c e1       	ldi	r22, 0x1C	; 28
    187a:	8c e0       	ldi	r24, 0x0C	; 12
    187c:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x10, 0x00);            //
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	80 e1       	ldi	r24, 0x10	; 16
    1884:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x11, 0x04);            //
    1888:	64 e0       	ldi	r22, 0x04	; 4
    188a:	81 e1       	ldi	r24, 0x11	; 17
    188c:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x13, 0x05);            //
    1890:	65 e0       	ldi	r22, 0x05	; 5
    1892:	83 e1       	ldi	r24, 0x13	; 19
    1894:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x1C, 0xA9);            //
    1898:	69 ea       	ldi	r22, 0xA9	; 169
    189a:	8c e1       	ldi	r24, 0x1C	; 28
    189c:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x1D, 0xCF);            //
    18a0:	6f ec       	ldi	r22, 0xCF	; 207
    18a2:	8d e1       	ldi	r24, 0x1D	; 29
    18a4:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x1E, 0x00);            //
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	8e e1       	ldi	r24, 0x1E	; 30
    18ac:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x20, 0x03);            //
    18b0:	63 e0       	ldi	r22, 0x03	; 3
    18b2:	80 e2       	ldi	r24, 0x20	; 32
    18b4:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x2E, 0x00);            //
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	8e e2       	ldi	r24, 0x2E	; 46
    18bc:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write2F(0x00, 0x00);          //
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>

	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    18c8:	68 e4       	ldi	r22, 0x48	; 72
    18ca:	8a e0       	ldi	r24, 0x0A	; 10
    18cc:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    18d0:	65 e0       	ldi	r22, 0x05	; 5
    18d2:	8b e0       	ldi	r24, 0x0B	; 11
    18d4:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: 0x14           set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector enabled
    18d8:	64 e0       	ldi	r22, 0x04	; 4
    18da:	81 e2       	ldi	r24, 0x21	; 33
    18dc:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
  
	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	8d e0       	ldi	r24, 0x0D	; 13
    18e4:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	65 e0       	ldi	r22, 0x05	; 5
    18ec:	8e e0       	ldi	r24, 0x0E	; 14
    18ee:	0e 94 a8 0b 	call	0x1750	; 0x1750 <reg_write_bit>
  
	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	67 e0       	ldi	r22, 0x07	; 7
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	0e 94 cf 0b 	call	0x179e	; 0x179e <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	66 e0       	ldi	r22, 0x06	; 6
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	0e 94 cf 0b 	call	0x179e	; 0x179e <reg_write_bit2F>
  
	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	66 e0       	ldi	r22, 0x06	; 6
    190a:	88 e0       	ldi	r24, 0x08	; 8
    190c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <reg_write_bit>
	reg_write(0x09, 0x17);            //SYNC_CFG0: 0x17        32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    1910:	67 e1       	ldi	r22, 0x17	; 23
    1912:	89 e0       	ldi	r24, 0x09	; 9
    1914:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
  
	//set packets
	reg_write(0x26, 0x00);            //PKT_CFG2: 0x00         set FIFO mode
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	86 e2       	ldi	r24, 0x26	; 38
    191c:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
	reg_write(0x2E, 0xFF);            //PKT_LEN: 0xFF          set packet length to 0xFF (max)  
    1920:	6f ef       	ldi	r22, 0xFF	; 255
    1922:	8e e2       	ldi	r24, 0x2E	; 46
    1924:	0e 94 42 0b 	call	0x1684	; 0x1684 <reg_write>
    
	//Frequency setting
	cmd_str(SNOP);
    1928:	8d e3       	ldi	r24, 0x3D	; 61
    192a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <cmd_str>
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    192e:	6c e6       	ldi	r22, 0x6C	; 108
    1930:	8c e0       	ldi	r24, 0x0C	; 12
    1932:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    1936:	60 e8       	ldi	r22, 0x80	; 128
    1938:	8d e0       	ldi	r24, 0x0D	; 13
    193a:	0e 94 85 0b 	call	0x170a	; 0x170a <reg_write2F>

	//set up GPIO1 to 17
	//reg_write(0x00, 17);
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    193e:	83 e3       	ldi	r24, 0x33	; 51
    1940:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <cmd_str>
	delay_ms(250);
    1944:	8a ef       	ldi	r24, 0xFA	; 250
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>

	cmd_str(SAFC);					 // Automatic frequency control
    194c:	87 e3       	ldi	r24, 0x37	; 55
    194e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <cmd_str>
	delay_ms(250);
    1952:	8a ef       	ldi	r24, 0xFA	; 250
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 0c 0b 	call	0x1618	; 0x1618 <delay_ms>
	
	//reg_write2F(0xD2, 0x00);
	//reg_write2F(0xD4, 0xFF);
	
	send_coms = 0;
    195a:	10 92 51 01 	sts	0x0151, r1

	cmd_str(SRX);                    // Put in RX mode
    195e:	84 e3       	ldi	r24, 0x34	; 52
    1960:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <cmd_str>
    1964:	08 95       	ret

00001966 <__tablejump2__>:
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31

0000196a <__tablejump__>:
    196a:	05 90       	lpm	r0, Z+
    196c:	f4 91       	lpm	r31, Z
    196e:	e0 2d       	mov	r30, r0
    1970:	09 94       	ijmp

00001972 <_exit>:
    1972:	f8 94       	cli

00001974 <__stop_program>:
    1974:	ff cf       	rjmp	.-2      	; 0x1974 <__stop_program>
