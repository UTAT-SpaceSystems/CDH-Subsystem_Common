
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001372  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000003d  00800100  00800100  000013e6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000108  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000f29  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006c4  00000000  00000000  00002447  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008cb  00000000  00000000  00002b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000234  00000000  00000000  000033d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000004a8  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000108c  00000000  00000000  00003ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000100  00000000  00000000  00004b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	f7 00       	.word	0x00f7	; ????
      7e:	89 01       	movw	r16, r18
      80:	13 02       	muls	r17, r19
      82:	87 02       	muls	r24, r23
      84:	c7 02       	muls	r28, r23
      86:	43 03       	mulsu	r20, r19
      88:	c0 03       	fmuls	r20, r16
      8a:	5d 04       	cpc	r5, r13
      8c:	03 05       	cpc	r16, r3
      8e:	f1 00       	.word	0x00f1	; ????
      90:	0c 06       	cpc	r0, r28

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ad 33       	cpi	r26, 0x3D	; 61
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 ce 07 	call	0xf9c	; 0xf9c <main>
      b2:	0c 94 b7 09 	jmp	0x136e	; 0x136e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <can_clear_all_mob>:
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	ad ee       	ldi	r26, 0xED	; 237
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	3e ee       	ldi	r19, 0xEE	; 238
      c2:	20 e0       	ldi	r18, 0x00	; 0
      c4:	98 2f       	mov	r25, r24
      c6:	92 95       	swap	r25
      c8:	90 7f       	andi	r25, 0xF0	; 240
      ca:	9c 93       	st	X, r25
      cc:	e3 2f       	mov	r30, r19
      ce:	f2 2f       	mov	r31, r18
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
      d0:	11 92       	st	Z+, r1
      d2:	e8 3f       	cpi	r30, 0xF8	; 248
      d4:	f1 05       	cpc	r31, r1
      d6:	e1 f7       	brne	.-8      	; 0xd0 <can_clear_all_mob+0x16>
      d8:	8f 5f       	subi	r24, 0xFF	; 255
      da:	86 30       	cpi	r24, 0x06	; 6
      dc:	99 f7       	brne	.-26     	; 0xc4 <can_clear_all_mob+0xa>
      de:	08 95       	ret

000000e0 <can_get_mob_status>:
      e0:	80 91 ef 00 	lds	r24, 0x00EF
      e4:	80 7c       	andi	r24, 0xC0	; 192
      e6:	61 f0       	breq	.+24     	; 0x100 <can_get_mob_status+0x20>
      e8:	80 91 ee 00 	lds	r24, 0x00EE
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
      ec:	98 2f       	mov	r25, r24
      ee:	90 7e       	andi	r25, 0xE0	; 224
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
      f0:	28 2f       	mov	r18, r24
      f2:	20 76       	andi	r18, 0x60	; 96
    uint8_t  ovrtim_flag=0;                          //! Timer overflow count
    uint16_t conf_index;                             //! Count of bit timing configuration tried
    uint8_t  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
      f4:	20 32       	cpi	r18, 0x20	; 32
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
      f6:	31 f0       	breq	.+12     	; 0x104 <can_get_mob_status+0x24>
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
      f8:	90 34       	cpi	r25, 0x40	; 64
    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
      fa:	31 f0       	breq	.+12     	; 0x108 <can_get_mob_status+0x28>
      fc:	8f 71       	andi	r24, 0x1F	; 31
      fe:	08 95       	ret
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
     100:	8f ef       	ldi	r24, 0xFF	; 255
     102:	08 95       	ret
     104:	89 2f       	mov	r24, r25
     106:	08 95       	ret

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
     108:	89 2f       	mov	r24, r25
     10a:	08 95       	ret

0000010c <can_get_data>:
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     10c:	fc 01       	movw	r30, r24
    {
        Can_set_mob(u8_temp0);  //! Page index
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	aa ef       	ldi	r26, 0xFA	; 250
        Can_clear_mob();        //! All MOb Registers = 0x00
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	9c 91       	ld	r25, X
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    {
        Can_set_mob(u8_temp0);  //! Page index
     116:	91 93       	st	Z+, r25
     118:	8f 5f       	subi	r24, 0xFF	; 255
     11a:	88 30       	cpi	r24, 0x08	; 8
     11c:	d9 f7       	brne	.-10     	; 0x114 <can_get_data+0x8>
        Can_clear_mob();        //! All MOb Registers = 0x00
     11e:	08 95       	ret

00000120 <can_fixed_baudrate>:
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	80 93 d8 00 	sts	0x00D8, r24
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	80 93 e2 00 	sts	0x00E2, r24
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     12c:	8c e0       	ldi	r24, 0x0C	; 12
     12e:	80 93 e3 00 	sts	0x00E3, r24
     132:	87 e3       	ldi	r24, 0x37	; 55
     134:	80 93 e4 00 	sts	0x00E4, r24
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	08 95       	ret

0000013c <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     13c:	0e 94 90 00 	call	0x120	; 0x120 <can_fixed_baudrate>
     140:	88 23       	and	r24, r24
     142:	49 f0       	breq	.+18     	; 0x156 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     144:	0e 94 5d 00 	call	0xba	; 0xba <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     148:	e8 ed       	ldi	r30, 0xD8	; 216
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	82 60       	ori	r24, 0x02	; 2
     150:	80 83       	st	Z, r24
    return (1);
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     156:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     158:	08 95       	ret

0000015a <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	1f 92       	push	r1
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     166:	11 96       	adiw	r26, 0x01	; 1
     168:	8c 91       	ld	r24, X
     16a:	11 97       	sbiw	r26, 0x01	; 1
     16c:	8c 30       	cpi	r24, 0x0C	; 12
     16e:	b1 f4       	brne	.+44     	; 0x19c <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     170:	19 96       	adiw	r26, 0x09	; 9
     172:	8c 91       	ld	r24, X
     174:	19 97       	sbiw	r26, 0x09	; 9
     176:	80 36       	cpi	r24, 0x60	; 96
     178:	69 f4       	brne	.+26     	; 0x194 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     17a:	86 2f       	mov	r24, r22
     17c:	82 95       	swap	r24
     17e:	80 7f       	andi	r24, 0xF0	; 240
     180:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     184:	ef ee       	ldi	r30, 0xEF	; 239
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	8f 73       	andi	r24, 0x3F	; 63
     18c:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     18e:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     192:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     194:	19 96       	adiw	r26, 0x09	; 9
     196:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     198:	80 e0       	ldi	r24, 0x00	; 0
     19a:	07 c6       	rjmp	.+3086   	; 0xdaa <__stack+0x4ab>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     19c:	86 2f       	mov	r24, r22
     19e:	82 95       	swap	r24
     1a0:	80 7f       	andi	r24, 0xF0	; 240
     1a2:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     1a6:	80 91 ef 00 	lds	r24, 0x00EF
     1aa:	80 7c       	andi	r24, 0xC0	; 192
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <can_cmd+0x56>
     1ae:	f9 c5       	rjmp	.+3058   	; 0xda2 <__stack+0x4a3>
    {
      cmd->status = MOB_PENDING; 
     1b0:	80 e6       	ldi	r24, 0x60	; 96
     1b2:	19 96       	adiw	r26, 0x09	; 9
     1b4:	8c 93       	st	X, r24
     1b6:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     1b8:	6c 93       	st	X, r22
      Can_clear_mob();
     1ba:	ee ee       	ldi	r30, 0xEE	; 238
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	11 92       	st	Z+, r1
     1c0:	e8 3f       	cpi	r30, 0xF8	; 248
     1c2:	f1 05       	cpc	r31, r1
     1c4:	e1 f7       	brne	.-8      	; 0x1be <can_cmd+0x64>
          
      switch (cmd->cmd)
     1c6:	11 96       	adiw	r26, 0x01	; 1
     1c8:	4c 91       	ld	r20, X
     1ca:	11 97       	sbiw	r26, 0x01	; 1
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	fa 01       	movw	r30, r20
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	eb 30       	cpi	r30, 0x0B	; 11
     1d4:	f1 05       	cpc	r31, r1
     1d6:	08 f0       	brcs	.+2      	; 0x1da <can_cmd+0x80>
     1d8:	e0 c5       	rjmp	.+3008   	; 0xd9a <__stack+0x49b>
     1da:	e2 5c       	subi	r30, 0xC2	; 194
     1dc:	ff 4f       	sbci	r31, 0xFF	; 255
     1de:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     1e2:	16 96       	adiw	r26, 0x06	; 6
     1e4:	8c 91       	ld	r24, X
     1e6:	16 97       	sbiw	r26, 0x06	; 6
     1e8:	81 11       	cpse	r24, r1
     1ea:	b7 c4       	rjmp	.+2414   	; 0xb5a <__stack+0x25b>
     1ec:	c8 c4       	rjmp	.+2448   	; 0xb7e <__stack+0x27f>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     1ee:	1b 96       	adiw	r26, 0x0b	; 11
     1f0:	8c 91       	ld	r24, X
     1f2:	1b 97       	sbiw	r26, 0x0b	; 11
     1f4:	88 23       	and	r24, r24
     1f6:	d9 f1       	breq	.+118    	; 0x26e <can_cmd+0x114>
     1f8:	14 96       	adiw	r26, 0x04	; 4
     1fa:	9c 91       	ld	r25, X
     1fc:	14 97       	sbiw	r26, 0x04	; 4
     1fe:	92 95       	swap	r25
     200:	96 95       	lsr	r25
     202:	97 70       	andi	r25, 0x07	; 7
     204:	15 96       	adiw	r26, 0x05	; 5
     206:	8c 91       	ld	r24, X
     208:	15 97       	sbiw	r26, 0x05	; 5
     20a:	88 0f       	add	r24, r24
     20c:	88 0f       	add	r24, r24
     20e:	88 0f       	add	r24, r24
     210:	89 0f       	add	r24, r25
     212:	80 93 f3 00 	sts	0x00F3, r24
     216:	13 96       	adiw	r26, 0x03	; 3
     218:	9c 91       	ld	r25, X
     21a:	13 97       	sbiw	r26, 0x03	; 3
     21c:	92 95       	swap	r25
     21e:	96 95       	lsr	r25
     220:	97 70       	andi	r25, 0x07	; 7
     222:	14 96       	adiw	r26, 0x04	; 4
     224:	8c 91       	ld	r24, X
     226:	14 97       	sbiw	r26, 0x04	; 4
     228:	88 0f       	add	r24, r24
     22a:	88 0f       	add	r24, r24
     22c:	88 0f       	add	r24, r24
     22e:	89 0f       	add	r24, r25
     230:	80 93 f2 00 	sts	0x00F2, r24
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	9c 91       	ld	r25, X
     238:	12 97       	sbiw	r26, 0x02	; 2
     23a:	92 95       	swap	r25
     23c:	96 95       	lsr	r25
     23e:	97 70       	andi	r25, 0x07	; 7
     240:	13 96       	adiw	r26, 0x03	; 3
     242:	8c 91       	ld	r24, X
     244:	13 97       	sbiw	r26, 0x03	; 3
     246:	88 0f       	add	r24, r24
     248:	88 0f       	add	r24, r24
     24a:	88 0f       	add	r24, r24
     24c:	89 0f       	add	r24, r25
     24e:	80 93 f1 00 	sts	0x00F1, r24
     252:	12 96       	adiw	r26, 0x02	; 2
     254:	8c 91       	ld	r24, X
     256:	12 97       	sbiw	r26, 0x02	; 2
     258:	88 0f       	add	r24, r24
     25a:	88 0f       	add	r24, r24
     25c:	88 0f       	add	r24, r24
     25e:	80 93 f0 00 	sts	0x00F0, r24
     262:	ef ee       	ldi	r30, 0xEF	; 239
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	80 61       	ori	r24, 0x10	; 16
     26a:	80 83       	st	Z, r24
     26c:	1c c0       	rjmp	.+56     	; 0x2a6 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     26e:	12 96       	adiw	r26, 0x02	; 2
     270:	8c 91       	ld	r24, X
     272:	12 97       	sbiw	r26, 0x02	; 2
     274:	86 95       	lsr	r24
     276:	86 95       	lsr	r24
     278:	86 95       	lsr	r24
     27a:	13 96       	adiw	r26, 0x03	; 3
     27c:	9c 91       	ld	r25, X
     27e:	13 97       	sbiw	r26, 0x03	; 3
     280:	20 e2       	ldi	r18, 0x20	; 32
     282:	92 9f       	mul	r25, r18
     284:	80 0d       	add	r24, r0
     286:	11 24       	eor	r1, r1
     288:	80 93 f3 00 	sts	0x00F3, r24
     28c:	12 96       	adiw	r26, 0x02	; 2
     28e:	8c 91       	ld	r24, X
     290:	12 97       	sbiw	r26, 0x02	; 2
     292:	82 95       	swap	r24
     294:	88 0f       	add	r24, r24
     296:	80 7e       	andi	r24, 0xE0	; 224
     298:	80 93 f2 00 	sts	0x00F2, r24
     29c:	ef ee       	ldi	r30, 0xEF	; 239
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	8f 7e       	andi	r24, 0xEF	; 239
     2a4:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     2a6:	16 96       	adiw	r26, 0x06	; 6
     2a8:	8c 91       	ld	r24, X
     2aa:	16 97       	sbiw	r26, 0x06	; 6
     2ac:	88 23       	and	r24, r24
     2ae:	91 f0       	breq	.+36     	; 0x2d4 <can_cmd+0x17a>
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	8a ef       	ldi	r24, 0xFA	; 250
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	17 96       	adiw	r26, 0x07	; 7
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	18 97       	sbiw	r26, 0x08	; 8
     2be:	e2 0f       	add	r30, r18
     2c0:	f1 1d       	adc	r31, r1
     2c2:	30 81       	ld	r19, Z
     2c4:	fc 01       	movw	r30, r24
     2c6:	30 83       	st	Z, r19
     2c8:	2f 5f       	subi	r18, 0xFF	; 255
     2ca:	16 96       	adiw	r26, 0x06	; 6
     2cc:	3c 91       	ld	r19, X
     2ce:	16 97       	sbiw	r26, 0x06	; 6
     2d0:	23 17       	cp	r18, r19
     2d2:	88 f3       	brcs	.-30     	; 0x2b6 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     2d4:	1a 96       	adiw	r26, 0x0a	; 10
     2d6:	8c 91       	ld	r24, X
     2d8:	1a 97       	sbiw	r26, 0x0a	; 10
     2da:	88 23       	and	r24, r24
     2dc:	31 f0       	breq	.+12     	; 0x2ea <can_cmd+0x190>
     2de:	e0 ef       	ldi	r30, 0xF0	; 240
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	84 60       	ori	r24, 0x04	; 4
     2e6:	80 83       	st	Z, r24
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <can_cmd+0x19a>
            else Can_clear_rtr();    
     2ea:	e0 ef       	ldi	r30, 0xF0	; 240
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8b 7f       	andi	r24, 0xFB	; 251
     2f2:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     2f4:	ef ee       	ldi	r30, 0xEF	; 239
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	90 81       	ld	r25, Z
     2fa:	16 96       	adiw	r26, 0x06	; 6
     2fc:	8c 91       	ld	r24, X
     2fe:	89 2b       	or	r24, r25
     300:	80 83       	st	Z, r24
          Can_config_tx();
     302:	80 81       	ld	r24, Z
     304:	8f 73       	andi	r24, 0x3F	; 63
     306:	80 83       	st	Z, r24
     308:	80 81       	ld	r24, Z
     30a:	80 64       	ori	r24, 0x40	; 64
     30c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     30e:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     310:	4c c5       	rjmp	.+2712   	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     312:	1b 96       	adiw	r26, 0x0b	; 11
     314:	8c 91       	ld	r24, X
     316:	1b 97       	sbiw	r26, 0x0b	; 11
     318:	88 23       	and	r24, r24
     31a:	d9 f1       	breq	.+118    	; 0x392 <can_cmd+0x238>
     31c:	14 96       	adiw	r26, 0x04	; 4
     31e:	9c 91       	ld	r25, X
     320:	14 97       	sbiw	r26, 0x04	; 4
     322:	92 95       	swap	r25
     324:	96 95       	lsr	r25
     326:	97 70       	andi	r25, 0x07	; 7
     328:	15 96       	adiw	r26, 0x05	; 5
     32a:	8c 91       	ld	r24, X
     32c:	15 97       	sbiw	r26, 0x05	; 5
     32e:	88 0f       	add	r24, r24
     330:	88 0f       	add	r24, r24
     332:	88 0f       	add	r24, r24
     334:	89 0f       	add	r24, r25
     336:	80 93 f3 00 	sts	0x00F3, r24
     33a:	13 96       	adiw	r26, 0x03	; 3
     33c:	9c 91       	ld	r25, X
     33e:	13 97       	sbiw	r26, 0x03	; 3
     340:	92 95       	swap	r25
     342:	96 95       	lsr	r25
     344:	97 70       	andi	r25, 0x07	; 7
     346:	14 96       	adiw	r26, 0x04	; 4
     348:	8c 91       	ld	r24, X
     34a:	14 97       	sbiw	r26, 0x04	; 4
     34c:	88 0f       	add	r24, r24
     34e:	88 0f       	add	r24, r24
     350:	88 0f       	add	r24, r24
     352:	89 0f       	add	r24, r25
     354:	80 93 f2 00 	sts	0x00F2, r24
     358:	12 96       	adiw	r26, 0x02	; 2
     35a:	9c 91       	ld	r25, X
     35c:	12 97       	sbiw	r26, 0x02	; 2
     35e:	92 95       	swap	r25
     360:	96 95       	lsr	r25
     362:	97 70       	andi	r25, 0x07	; 7
     364:	13 96       	adiw	r26, 0x03	; 3
     366:	8c 91       	ld	r24, X
     368:	13 97       	sbiw	r26, 0x03	; 3
     36a:	88 0f       	add	r24, r24
     36c:	88 0f       	add	r24, r24
     36e:	88 0f       	add	r24, r24
     370:	89 0f       	add	r24, r25
     372:	80 93 f1 00 	sts	0x00F1, r24
     376:	12 96       	adiw	r26, 0x02	; 2
     378:	8c 91       	ld	r24, X
     37a:	12 97       	sbiw	r26, 0x02	; 2
     37c:	88 0f       	add	r24, r24
     37e:	88 0f       	add	r24, r24
     380:	88 0f       	add	r24, r24
     382:	80 93 f0 00 	sts	0x00F0, r24
     386:	ef ee       	ldi	r30, 0xEF	; 239
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	80 61       	ori	r24, 0x10	; 16
     38e:	80 83       	st	Z, r24
     390:	1c c0       	rjmp	.+56     	; 0x3ca <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     392:	12 96       	adiw	r26, 0x02	; 2
     394:	8c 91       	ld	r24, X
     396:	12 97       	sbiw	r26, 0x02	; 2
     398:	86 95       	lsr	r24
     39a:	86 95       	lsr	r24
     39c:	86 95       	lsr	r24
     39e:	13 96       	adiw	r26, 0x03	; 3
     3a0:	9c 91       	ld	r25, X
     3a2:	13 97       	sbiw	r26, 0x03	; 3
     3a4:	f0 e2       	ldi	r31, 0x20	; 32
     3a6:	9f 9f       	mul	r25, r31
     3a8:	80 0d       	add	r24, r0
     3aa:	11 24       	eor	r1, r1
     3ac:	80 93 f3 00 	sts	0x00F3, r24
     3b0:	12 96       	adiw	r26, 0x02	; 2
     3b2:	8c 91       	ld	r24, X
     3b4:	12 97       	sbiw	r26, 0x02	; 2
     3b6:	82 95       	swap	r24
     3b8:	88 0f       	add	r24, r24
     3ba:	80 7e       	andi	r24, 0xE0	; 224
     3bc:	80 93 f2 00 	sts	0x00F2, r24
     3c0:	ef ee       	ldi	r30, 0xEF	; 239
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	8f 7e       	andi	r24, 0xEF	; 239
     3c8:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     3ca:	16 96       	adiw	r26, 0x06	; 6
     3cc:	8c 91       	ld	r24, X
     3ce:	16 97       	sbiw	r26, 0x06	; 6
     3d0:	88 23       	and	r24, r24
     3d2:	91 f0       	breq	.+36     	; 0x3f8 <can_cmd+0x29e>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	8a ef       	ldi	r24, 0xFA	; 250
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	17 96       	adiw	r26, 0x07	; 7
     3dc:	ed 91       	ld	r30, X+
     3de:	fc 91       	ld	r31, X
     3e0:	18 97       	sbiw	r26, 0x08	; 8
     3e2:	e2 0f       	add	r30, r18
     3e4:	f1 1d       	adc	r31, r1
     3e6:	30 81       	ld	r19, Z
     3e8:	fc 01       	movw	r30, r24
     3ea:	30 83       	st	Z, r19
     3ec:	2f 5f       	subi	r18, 0xFF	; 255
     3ee:	16 96       	adiw	r26, 0x06	; 6
     3f0:	3c 91       	ld	r19, X
     3f2:	16 97       	sbiw	r26, 0x06	; 6
     3f4:	23 17       	cp	r18, r19
     3f6:	88 f3       	brcs	.-30     	; 0x3da <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     3f8:	1a 96       	adiw	r26, 0x0a	; 10
     3fa:	1c 92       	st	X, r1
     3fc:	1a 97       	sbiw	r26, 0x0a	; 10
     3fe:	e0 ef       	ldi	r30, 0xF0	; 240
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	8b 7f       	andi	r24, 0xFB	; 251
     406:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     408:	ef ee       	ldi	r30, 0xEF	; 239
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	90 81       	ld	r25, Z
     40e:	16 96       	adiw	r26, 0x06	; 6
     410:	8c 91       	ld	r24, X
     412:	89 2b       	or	r24, r25
     414:	80 83       	st	Z, r24
          Can_config_tx();
     416:	80 81       	ld	r24, Z
     418:	8f 73       	andi	r24, 0x3F	; 63
     41a:	80 83       	st	Z, r24
     41c:	80 81       	ld	r24, Z
     41e:	80 64       	ori	r24, 0x40	; 64
     420:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     422:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     424:	c2 c4       	rjmp	.+2436   	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     426:	1b 96       	adiw	r26, 0x0b	; 11
     428:	8c 91       	ld	r24, X
     42a:	1b 97       	sbiw	r26, 0x0b	; 11
     42c:	88 23       	and	r24, r24
     42e:	d9 f1       	breq	.+118    	; 0x4a6 <can_cmd+0x34c>
     430:	14 96       	adiw	r26, 0x04	; 4
     432:	9c 91       	ld	r25, X
     434:	14 97       	sbiw	r26, 0x04	; 4
     436:	92 95       	swap	r25
     438:	96 95       	lsr	r25
     43a:	97 70       	andi	r25, 0x07	; 7
     43c:	15 96       	adiw	r26, 0x05	; 5
     43e:	8c 91       	ld	r24, X
     440:	15 97       	sbiw	r26, 0x05	; 5
     442:	88 0f       	add	r24, r24
     444:	88 0f       	add	r24, r24
     446:	88 0f       	add	r24, r24
     448:	89 0f       	add	r24, r25
     44a:	80 93 f3 00 	sts	0x00F3, r24
     44e:	13 96       	adiw	r26, 0x03	; 3
     450:	9c 91       	ld	r25, X
     452:	13 97       	sbiw	r26, 0x03	; 3
     454:	92 95       	swap	r25
     456:	96 95       	lsr	r25
     458:	97 70       	andi	r25, 0x07	; 7
     45a:	14 96       	adiw	r26, 0x04	; 4
     45c:	8c 91       	ld	r24, X
     45e:	14 97       	sbiw	r26, 0x04	; 4
     460:	88 0f       	add	r24, r24
     462:	88 0f       	add	r24, r24
     464:	88 0f       	add	r24, r24
     466:	89 0f       	add	r24, r25
     468:	80 93 f2 00 	sts	0x00F2, r24
     46c:	12 96       	adiw	r26, 0x02	; 2
     46e:	9c 91       	ld	r25, X
     470:	12 97       	sbiw	r26, 0x02	; 2
     472:	92 95       	swap	r25
     474:	96 95       	lsr	r25
     476:	97 70       	andi	r25, 0x07	; 7
     478:	13 96       	adiw	r26, 0x03	; 3
     47a:	8c 91       	ld	r24, X
     47c:	13 97       	sbiw	r26, 0x03	; 3
     47e:	88 0f       	add	r24, r24
     480:	88 0f       	add	r24, r24
     482:	88 0f       	add	r24, r24
     484:	89 0f       	add	r24, r25
     486:	80 93 f1 00 	sts	0x00F1, r24
     48a:	12 96       	adiw	r26, 0x02	; 2
     48c:	8c 91       	ld	r24, X
     48e:	12 97       	sbiw	r26, 0x02	; 2
     490:	88 0f       	add	r24, r24
     492:	88 0f       	add	r24, r24
     494:	88 0f       	add	r24, r24
     496:	80 93 f0 00 	sts	0x00F0, r24
     49a:	ef ee       	ldi	r30, 0xEF	; 239
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	80 61       	ori	r24, 0x10	; 16
     4a2:	80 83       	st	Z, r24
     4a4:	1c c0       	rjmp	.+56     	; 0x4de <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     4a6:	12 96       	adiw	r26, 0x02	; 2
     4a8:	8c 91       	ld	r24, X
     4aa:	12 97       	sbiw	r26, 0x02	; 2
     4ac:	86 95       	lsr	r24
     4ae:	86 95       	lsr	r24
     4b0:	86 95       	lsr	r24
     4b2:	13 96       	adiw	r26, 0x03	; 3
     4b4:	9c 91       	ld	r25, X
     4b6:	13 97       	sbiw	r26, 0x03	; 3
     4b8:	f0 e2       	ldi	r31, 0x20	; 32
     4ba:	9f 9f       	mul	r25, r31
     4bc:	80 0d       	add	r24, r0
     4be:	11 24       	eor	r1, r1
     4c0:	80 93 f3 00 	sts	0x00F3, r24
     4c4:	12 96       	adiw	r26, 0x02	; 2
     4c6:	8c 91       	ld	r24, X
     4c8:	12 97       	sbiw	r26, 0x02	; 2
     4ca:	82 95       	swap	r24
     4cc:	88 0f       	add	r24, r24
     4ce:	80 7e       	andi	r24, 0xE0	; 224
     4d0:	80 93 f2 00 	sts	0x00F2, r24
     4d4:	ef ee       	ldi	r30, 0xEF	; 239
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	8f 7e       	andi	r24, 0xEF	; 239
     4dc:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	1a 96       	adiw	r26, 0x0a	; 10
     4e2:	8c 93       	st	X, r24
     4e4:	1a 97       	sbiw	r26, 0x0a	; 10
     4e6:	e0 ef       	ldi	r30, 0xF0	; 240
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	84 60       	ori	r24, 0x04	; 4
     4ee:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     4f0:	ef ee       	ldi	r30, 0xEF	; 239
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	90 81       	ld	r25, Z
     4f6:	16 96       	adiw	r26, 0x06	; 6
     4f8:	8c 91       	ld	r24, X
     4fa:	89 2b       	or	r24, r25
     4fc:	80 83       	st	Z, r24
          Can_config_tx();
     4fe:	80 81       	ld	r24, Z
     500:	8f 73       	andi	r24, 0x3F	; 63
     502:	80 83       	st	Z, r24
     504:	80 81       	ld	r24, Z
     506:	80 64       	ori	r24, 0x40	; 64
     508:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     50a:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     50c:	4e c4       	rjmp	.+2204   	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     50e:	19 82       	std	Y+1, r1	; 0x01
     510:	9b 81       	ldd	r25, Y+3	; 0x03
     512:	92 95       	swap	r25
     514:	96 95       	lsr	r25
     516:	97 70       	andi	r25, 0x07	; 7
     518:	8c 81       	ldd	r24, Y+4	; 0x04
     51a:	88 0f       	add	r24, r24
     51c:	88 0f       	add	r24, r24
     51e:	88 0f       	add	r24, r24
     520:	89 0f       	add	r24, r25
     522:	80 93 f7 00 	sts	0x00F7, r24
     526:	9a 81       	ldd	r25, Y+2	; 0x02
     528:	92 95       	swap	r25
     52a:	96 95       	lsr	r25
     52c:	97 70       	andi	r25, 0x07	; 7
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	88 0f       	add	r24, r24
     532:	88 0f       	add	r24, r24
     534:	88 0f       	add	r24, r24
     536:	89 0f       	add	r24, r25
     538:	80 93 f6 00 	sts	0x00F6, r24
     53c:	99 81       	ldd	r25, Y+1	; 0x01
     53e:	92 95       	swap	r25
     540:	96 95       	lsr	r25
     542:	97 70       	andi	r25, 0x07	; 7
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	88 0f       	add	r24, r24
     548:	88 0f       	add	r24, r24
     54a:	88 0f       	add	r24, r24
     54c:	89 0f       	add	r24, r25
     54e:	80 93 f5 00 	sts	0x00F5, r24
     552:	29 81       	ldd	r18, Y+1	; 0x01
     554:	22 0f       	add	r18, r18
     556:	22 0f       	add	r18, r18
     558:	22 0f       	add	r18, r18
     55a:	84 ef       	ldi	r24, 0xF4	; 244
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	fc 01       	movw	r30, r24
     560:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     562:	ef ee       	ldi	r30, 0xEF	; 239
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	30 81       	ld	r19, Z
     568:	16 96       	adiw	r26, 0x06	; 6
     56a:	2c 91       	ld	r18, X
     56c:	23 2b       	or	r18, r19
     56e:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     570:	dc 01       	movw	r26, r24
     572:	2c 91       	ld	r18, X
     574:	2b 7f       	andi	r18, 0xFB	; 251
     576:	2c 93       	st	X, r18
          Can_clear_idemsk();
     578:	2c 91       	ld	r18, X
     57a:	2e 7f       	andi	r18, 0xFE	; 254
     57c:	2c 93       	st	X, r18
          Can_config_rx();       
     57e:	80 81       	ld	r24, Z
     580:	8f 73       	andi	r24, 0x3F	; 63
     582:	80 83       	st	Z, r24
     584:	80 81       	ld	r24, Z
     586:	80 68       	ori	r24, 0x80	; 128
     588:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     58a:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     58c:	0e c4       	rjmp	.+2076   	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	82 95       	swap	r24
     596:	88 0f       	add	r24, r24
     598:	80 7e       	andi	r24, 0xE0	; 224
     59a:	81 5e       	subi	r24, 0xE1	; 225
     59c:	27 ef       	ldi	r18, 0xF7	; 247
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	f9 01       	movw	r30, r18
     5a2:	80 83       	st	Z, r24
     5a4:	49 81       	ldd	r20, Y+1	; 0x01
     5a6:	42 95       	swap	r20
     5a8:	44 0f       	add	r20, r20
     5aa:	40 7e       	andi	r20, 0xE0	; 224
     5ac:	86 ef       	ldi	r24, 0xF6	; 246
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	fc 01       	movw	r30, r24
     5b2:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     5b4:	12 96       	adiw	r26, 0x02	; 2
     5b6:	4c 91       	ld	r20, X
     5b8:	12 97       	sbiw	r26, 0x02	; 2
     5ba:	46 95       	lsr	r20
     5bc:	46 95       	lsr	r20
     5be:	46 95       	lsr	r20
     5c0:	13 96       	adiw	r26, 0x03	; 3
     5c2:	5c 91       	ld	r21, X
     5c4:	13 97       	sbiw	r26, 0x03	; 3
     5c6:	f0 e2       	ldi	r31, 0x20	; 32
     5c8:	5f 9f       	mul	r21, r31
     5ca:	40 0d       	add	r20, r0
     5cc:	11 24       	eor	r1, r1
     5ce:	40 93 f3 00 	sts	0x00F3, r20
     5d2:	12 96       	adiw	r26, 0x02	; 2
     5d4:	4c 91       	ld	r20, X
     5d6:	12 97       	sbiw	r26, 0x02	; 2
     5d8:	42 95       	swap	r20
     5da:	44 0f       	add	r20, r20
     5dc:	40 7e       	andi	r20, 0xE0	; 224
     5de:	40 93 f2 00 	sts	0x00F2, r20
     5e2:	6f ee       	ldi	r22, 0xEF	; 239
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	fb 01       	movw	r30, r22
     5e8:	40 81       	ld	r20, Z
     5ea:	4f 7e       	andi	r20, 0xEF	; 239
     5ec:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     5ee:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     5f0:	5b 81       	ldd	r21, Y+3	; 0x03
     5f2:	52 95       	swap	r21
     5f4:	56 95       	lsr	r21
     5f6:	57 70       	andi	r21, 0x07	; 7
     5f8:	4c 81       	ldd	r20, Y+4	; 0x04
     5fa:	44 0f       	add	r20, r20
     5fc:	44 0f       	add	r20, r20
     5fe:	44 0f       	add	r20, r20
     600:	45 0f       	add	r20, r21
     602:	f9 01       	movw	r30, r18
     604:	40 83       	st	Z, r20
     606:	3a 81       	ldd	r19, Y+2	; 0x02
     608:	32 95       	swap	r19
     60a:	36 95       	lsr	r19
     60c:	37 70       	andi	r19, 0x07	; 7
     60e:	2b 81       	ldd	r18, Y+3	; 0x03
     610:	22 0f       	add	r18, r18
     612:	22 0f       	add	r18, r18
     614:	22 0f       	add	r18, r18
     616:	23 0f       	add	r18, r19
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
     61c:	99 81       	ldd	r25, Y+1	; 0x01
     61e:	92 95       	swap	r25
     620:	96 95       	lsr	r25
     622:	97 70       	andi	r25, 0x07	; 7
     624:	8a 81       	ldd	r24, Y+2	; 0x02
     626:	88 0f       	add	r24, r24
     628:	88 0f       	add	r24, r24
     62a:	88 0f       	add	r24, r24
     62c:	89 0f       	add	r24, r25
     62e:	80 93 f5 00 	sts	0x00F5, r24
     632:	29 81       	ldd	r18, Y+1	; 0x01
     634:	22 0f       	add	r18, r18
     636:	22 0f       	add	r18, r18
     638:	22 0f       	add	r18, r18
     63a:	84 ef       	ldi	r24, 0xF4	; 244
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     642:	fb 01       	movw	r30, r22
     644:	30 81       	ld	r19, Z
     646:	16 96       	adiw	r26, 0x06	; 6
     648:	2c 91       	ld	r18, X
     64a:	16 97       	sbiw	r26, 0x06	; 6
     64c:	23 2b       	or	r18, r19
     64e:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     650:	1a 96       	adiw	r26, 0x0a	; 10
     652:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     654:	dc 01       	movw	r26, r24
     656:	2c 91       	ld	r18, X
     658:	24 60       	ori	r18, 0x04	; 4
     65a:	2c 93       	st	X, r18
		  Can_clear_rtr();
     65c:	a0 ef       	ldi	r26, 0xF0	; 240
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	2c 91       	ld	r18, X
     662:	2b 7f       	andi	r18, 0xFB	; 251
     664:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     666:	20 81       	ld	r18, Z
     668:	2f 7e       	andi	r18, 0xEF	; 239
     66a:	20 83       	st	Z, r18
          Can_clear_idemsk();
     66c:	fc 01       	movw	r30, r24
     66e:	20 81       	ld	r18, Z
     670:	2e 7f       	andi	r18, 0xFE	; 254
     672:	20 83       	st	Z, r18
          Can_config_rx();       
     674:	db 01       	movw	r26, r22
     676:	8c 91       	ld	r24, X
     678:	8f 73       	andi	r24, 0x3F	; 63
     67a:	8c 93       	st	X, r24
     67c:	8c 91       	ld	r24, X
     67e:	80 68       	ori	r24, 0x80	; 128
     680:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     682:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     684:	92 c3       	rjmp	.+1828   	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     686:	8f ef       	ldi	r24, 0xFF	; 255
     688:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     68a:	8a 81       	ldd	r24, Y+2	; 0x02
     68c:	82 95       	swap	r24
     68e:	88 0f       	add	r24, r24
     690:	80 7e       	andi	r24, 0xE0	; 224
     692:	81 5e       	subi	r24, 0xE1	; 225
     694:	27 ef       	ldi	r18, 0xF7	; 247
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	f9 01       	movw	r30, r18
     69a:	80 83       	st	Z, r24
     69c:	49 81       	ldd	r20, Y+1	; 0x01
     69e:	42 95       	swap	r20
     6a0:	44 0f       	add	r20, r20
     6a2:	40 7e       	andi	r20, 0xE0	; 224
     6a4:	86 ef       	ldi	r24, 0xF6	; 246
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	fc 01       	movw	r30, r24
     6aa:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     6ac:	12 96       	adiw	r26, 0x02	; 2
     6ae:	4c 91       	ld	r20, X
     6b0:	12 97       	sbiw	r26, 0x02	; 2
     6b2:	46 95       	lsr	r20
     6b4:	46 95       	lsr	r20
     6b6:	46 95       	lsr	r20
     6b8:	13 96       	adiw	r26, 0x03	; 3
     6ba:	5c 91       	ld	r21, X
     6bc:	13 97       	sbiw	r26, 0x03	; 3
     6be:	f0 e2       	ldi	r31, 0x20	; 32
     6c0:	5f 9f       	mul	r21, r31
     6c2:	40 0d       	add	r20, r0
     6c4:	11 24       	eor	r1, r1
     6c6:	40 93 f3 00 	sts	0x00F3, r20
     6ca:	12 96       	adiw	r26, 0x02	; 2
     6cc:	4c 91       	ld	r20, X
     6ce:	12 97       	sbiw	r26, 0x02	; 2
     6d0:	42 95       	swap	r20
     6d2:	44 0f       	add	r20, r20
     6d4:	40 7e       	andi	r20, 0xE0	; 224
     6d6:	40 93 f2 00 	sts	0x00F2, r20
     6da:	6f ee       	ldi	r22, 0xEF	; 239
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	fb 01       	movw	r30, r22
     6e0:	40 81       	ld	r20, Z
     6e2:	4f 7e       	andi	r20, 0xEF	; 239
     6e4:	40 83       	st	Z, r20
		
          u8_temp=0; 
     6e6:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     6e8:	5b 81       	ldd	r21, Y+3	; 0x03
     6ea:	52 95       	swap	r21
     6ec:	56 95       	lsr	r21
     6ee:	57 70       	andi	r21, 0x07	; 7
     6f0:	4c 81       	ldd	r20, Y+4	; 0x04
     6f2:	44 0f       	add	r20, r20
     6f4:	44 0f       	add	r20, r20
     6f6:	44 0f       	add	r20, r20
     6f8:	45 0f       	add	r20, r21
     6fa:	f9 01       	movw	r30, r18
     6fc:	40 83       	st	Z, r20
     6fe:	3a 81       	ldd	r19, Y+2	; 0x02
     700:	32 95       	swap	r19
     702:	36 95       	lsr	r19
     704:	37 70       	andi	r19, 0x07	; 7
     706:	2b 81       	ldd	r18, Y+3	; 0x03
     708:	22 0f       	add	r18, r18
     70a:	22 0f       	add	r18, r18
     70c:	22 0f       	add	r18, r18
     70e:	23 0f       	add	r18, r19
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
     714:	99 81       	ldd	r25, Y+1	; 0x01
     716:	92 95       	swap	r25
     718:	96 95       	lsr	r25
     71a:	97 70       	andi	r25, 0x07	; 7
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	88 0f       	add	r24, r24
     720:	88 0f       	add	r24, r24
     722:	88 0f       	add	r24, r24
     724:	89 0f       	add	r24, r25
     726:	80 93 f5 00 	sts	0x00F5, r24
     72a:	29 81       	ldd	r18, Y+1	; 0x01
     72c:	22 0f       	add	r18, r18
     72e:	22 0f       	add	r18, r18
     730:	22 0f       	add	r18, r18
     732:	84 ef       	ldi	r24, 0xF4	; 244
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     73a:	fb 01       	movw	r30, r22
     73c:	30 81       	ld	r19, Z
     73e:	16 96       	adiw	r26, 0x06	; 6
     740:	2c 91       	ld	r18, X
     742:	16 97       	sbiw	r26, 0x06	; 6
     744:	23 2b       	or	r18, r19
     746:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	1a 96       	adiw	r26, 0x0a	; 10
     74c:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     74e:	dc 01       	movw	r26, r24
     750:	2c 91       	ld	r18, X
     752:	24 60       	ori	r18, 0x04	; 4
     754:	2c 93       	st	X, r18
		  Can_set_rtr();
     756:	a0 ef       	ldi	r26, 0xF0	; 240
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	2c 91       	ld	r18, X
     75c:	24 60       	ori	r18, 0x04	; 4
     75e:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     760:	20 81       	ld	r18, Z
     762:	2f 7d       	andi	r18, 0xDF	; 223
     764:	20 83       	st	Z, r18
          Can_clear_idemsk();
     766:	fc 01       	movw	r30, r24
     768:	20 81       	ld	r18, Z
     76a:	2e 7f       	andi	r18, 0xFE	; 254
     76c:	20 83       	st	Z, r18
          Can_config_rx();       
     76e:	db 01       	movw	r26, r22
     770:	8c 91       	ld	r24, X
     772:	8f 73       	andi	r24, 0x3F	; 63
     774:	8c 93       	st	X, r24
     776:	8c 91       	ld	r24, X
     778:	80 68       	ori	r24, 0x80	; 128
     77a:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     77c:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     77e:	15 c3       	rjmp	.+1578   	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     780:	1b 96       	adiw	r26, 0x0b	; 11
     782:	8c 91       	ld	r24, X
     784:	1b 97       	sbiw	r26, 0x0b	; 11
     786:	88 23       	and	r24, r24
     788:	d9 f1       	breq	.+118    	; 0x800 <can_cmd+0x6a6>
     78a:	14 96       	adiw	r26, 0x04	; 4
     78c:	9c 91       	ld	r25, X
     78e:	14 97       	sbiw	r26, 0x04	; 4
     790:	92 95       	swap	r25
     792:	96 95       	lsr	r25
     794:	97 70       	andi	r25, 0x07	; 7
     796:	15 96       	adiw	r26, 0x05	; 5
     798:	8c 91       	ld	r24, X
     79a:	15 97       	sbiw	r26, 0x05	; 5
     79c:	88 0f       	add	r24, r24
     79e:	88 0f       	add	r24, r24
     7a0:	88 0f       	add	r24, r24
     7a2:	89 0f       	add	r24, r25
     7a4:	80 93 f3 00 	sts	0x00F3, r24
     7a8:	13 96       	adiw	r26, 0x03	; 3
     7aa:	9c 91       	ld	r25, X
     7ac:	13 97       	sbiw	r26, 0x03	; 3
     7ae:	92 95       	swap	r25
     7b0:	96 95       	lsr	r25
     7b2:	97 70       	andi	r25, 0x07	; 7
     7b4:	14 96       	adiw	r26, 0x04	; 4
     7b6:	8c 91       	ld	r24, X
     7b8:	14 97       	sbiw	r26, 0x04	; 4
     7ba:	88 0f       	add	r24, r24
     7bc:	88 0f       	add	r24, r24
     7be:	88 0f       	add	r24, r24
     7c0:	89 0f       	add	r24, r25
     7c2:	80 93 f2 00 	sts	0x00F2, r24
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	9c 91       	ld	r25, X
     7ca:	12 97       	sbiw	r26, 0x02	; 2
     7cc:	92 95       	swap	r25
     7ce:	96 95       	lsr	r25
     7d0:	97 70       	andi	r25, 0x07	; 7
     7d2:	13 96       	adiw	r26, 0x03	; 3
     7d4:	8c 91       	ld	r24, X
     7d6:	13 97       	sbiw	r26, 0x03	; 3
     7d8:	88 0f       	add	r24, r24
     7da:	88 0f       	add	r24, r24
     7dc:	88 0f       	add	r24, r24
     7de:	89 0f       	add	r24, r25
     7e0:	80 93 f1 00 	sts	0x00F1, r24
     7e4:	12 96       	adiw	r26, 0x02	; 2
     7e6:	8c 91       	ld	r24, X
     7e8:	12 97       	sbiw	r26, 0x02	; 2
     7ea:	88 0f       	add	r24, r24
     7ec:	88 0f       	add	r24, r24
     7ee:	88 0f       	add	r24, r24
     7f0:	80 93 f0 00 	sts	0x00F0, r24
     7f4:	ef ee       	ldi	r30, 0xEF	; 239
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
     7f8:	80 81       	ld	r24, Z
     7fa:	80 61       	ori	r24, 0x10	; 16
     7fc:	80 83       	st	Z, r24
     7fe:	1c c0       	rjmp	.+56     	; 0x838 <can_cmd+0x6de>
          else              { Can_set_std_id(cmd->id.std);}
     800:	12 96       	adiw	r26, 0x02	; 2
     802:	8c 91       	ld	r24, X
     804:	12 97       	sbiw	r26, 0x02	; 2
     806:	86 95       	lsr	r24
     808:	86 95       	lsr	r24
     80a:	86 95       	lsr	r24
     80c:	13 96       	adiw	r26, 0x03	; 3
     80e:	9c 91       	ld	r25, X
     810:	13 97       	sbiw	r26, 0x03	; 3
     812:	e0 e2       	ldi	r30, 0x20	; 32
     814:	9e 9f       	mul	r25, r30
     816:	80 0d       	add	r24, r0
     818:	11 24       	eor	r1, r1
     81a:	80 93 f3 00 	sts	0x00F3, r24
     81e:	12 96       	adiw	r26, 0x02	; 2
     820:	8c 91       	ld	r24, X
     822:	12 97       	sbiw	r26, 0x02	; 2
     824:	82 95       	swap	r24
     826:	88 0f       	add	r24, r24
     828:	80 7e       	andi	r24, 0xE0	; 224
     82a:	80 93 f2 00 	sts	0x00F2, r24
     82e:	ef ee       	ldi	r30, 0xEF	; 239
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
     834:	8f 7e       	andi	r24, 0xEF	; 239
     836:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	89 83       	std	Y+1, r24	; 0x01
     83c:	9b 81       	ldd	r25, Y+3	; 0x03
     83e:	92 95       	swap	r25
     840:	96 95       	lsr	r25
     842:	97 70       	andi	r25, 0x07	; 7
     844:	8c 81       	ldd	r24, Y+4	; 0x04
     846:	88 0f       	add	r24, r24
     848:	88 0f       	add	r24, r24
     84a:	88 0f       	add	r24, r24
     84c:	89 0f       	add	r24, r25
     84e:	80 93 f7 00 	sts	0x00F7, r24
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	92 95       	swap	r25
     856:	96 95       	lsr	r25
     858:	97 70       	andi	r25, 0x07	; 7
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	88 0f       	add	r24, r24
     85e:	88 0f       	add	r24, r24
     860:	88 0f       	add	r24, r24
     862:	89 0f       	add	r24, r25
     864:	80 93 f6 00 	sts	0x00F6, r24
     868:	99 81       	ldd	r25, Y+1	; 0x01
     86a:	92 95       	swap	r25
     86c:	96 95       	lsr	r25
     86e:	97 70       	andi	r25, 0x07	; 7
     870:	8a 81       	ldd	r24, Y+2	; 0x02
     872:	88 0f       	add	r24, r24
     874:	88 0f       	add	r24, r24
     876:	88 0f       	add	r24, r24
     878:	89 0f       	add	r24, r25
     87a:	80 93 f5 00 	sts	0x00F5, r24
     87e:	29 81       	ldd	r18, Y+1	; 0x01
     880:	22 0f       	add	r18, r18
     882:	22 0f       	add	r18, r18
     884:	22 0f       	add	r18, r18
     886:	84 ef       	ldi	r24, 0xF4	; 244
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     88e:	ef ee       	ldi	r30, 0xEF	; 239
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	30 81       	ld	r19, Z
     894:	16 96       	adiw	r26, 0x06	; 6
     896:	2c 91       	ld	r18, X
     898:	23 2b       	or	r18, r19
     89a:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     89c:	dc 01       	movw	r26, r24
     89e:	2c 91       	ld	r18, X
     8a0:	2b 7f       	andi	r18, 0xFB	; 251
     8a2:	2c 93       	st	X, r18
          Can_set_idemsk();
     8a4:	2c 91       	ld	r18, X
     8a6:	21 60       	ori	r18, 0x01	; 1
     8a8:	2c 93       	st	X, r18
          Can_config_rx();       
     8aa:	80 81       	ld	r24, Z
     8ac:	8f 73       	andi	r24, 0x3F	; 63
     8ae:	80 83       	st	Z, r24
     8b0:	80 81       	ld	r24, Z
     8b2:	80 68       	ori	r24, 0x80	; 128
     8b4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     8b8:	78 c2       	rjmp	.+1264   	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8ba:	1b 96       	adiw	r26, 0x0b	; 11
     8bc:	8c 91       	ld	r24, X
     8be:	1b 97       	sbiw	r26, 0x0b	; 11
     8c0:	88 23       	and	r24, r24
     8c2:	d9 f1       	breq	.+118    	; 0x93a <__stack+0x3b>
     8c4:	14 96       	adiw	r26, 0x04	; 4
     8c6:	9c 91       	ld	r25, X
     8c8:	14 97       	sbiw	r26, 0x04	; 4
     8ca:	92 95       	swap	r25
     8cc:	96 95       	lsr	r25
     8ce:	97 70       	andi	r25, 0x07	; 7
     8d0:	15 96       	adiw	r26, 0x05	; 5
     8d2:	8c 91       	ld	r24, X
     8d4:	15 97       	sbiw	r26, 0x05	; 5
     8d6:	88 0f       	add	r24, r24
     8d8:	88 0f       	add	r24, r24
     8da:	88 0f       	add	r24, r24
     8dc:	89 0f       	add	r24, r25
     8de:	80 93 f3 00 	sts	0x00F3, r24
     8e2:	13 96       	adiw	r26, 0x03	; 3
     8e4:	9c 91       	ld	r25, X
     8e6:	13 97       	sbiw	r26, 0x03	; 3
     8e8:	92 95       	swap	r25
     8ea:	96 95       	lsr	r25
     8ec:	97 70       	andi	r25, 0x07	; 7
     8ee:	14 96       	adiw	r26, 0x04	; 4
     8f0:	8c 91       	ld	r24, X
     8f2:	14 97       	sbiw	r26, 0x04	; 4
     8f4:	88 0f       	add	r24, r24
     8f6:	88 0f       	add	r24, r24
     8f8:	88 0f       	add	r24, r24
     8fa:	89 0f       	add	r24, r25
     8fc:	80 93 f2 00 	sts	0x00F2, r24
     900:	12 96       	adiw	r26, 0x02	; 2
     902:	9c 91       	ld	r25, X
     904:	12 97       	sbiw	r26, 0x02	; 2
     906:	92 95       	swap	r25
     908:	96 95       	lsr	r25
     90a:	97 70       	andi	r25, 0x07	; 7
     90c:	13 96       	adiw	r26, 0x03	; 3
     90e:	8c 91       	ld	r24, X
     910:	13 97       	sbiw	r26, 0x03	; 3
     912:	88 0f       	add	r24, r24
     914:	88 0f       	add	r24, r24
     916:	88 0f       	add	r24, r24
     918:	89 0f       	add	r24, r25
     91a:	80 93 f1 00 	sts	0x00F1, r24
     91e:	12 96       	adiw	r26, 0x02	; 2
     920:	8c 91       	ld	r24, X
     922:	12 97       	sbiw	r26, 0x02	; 2
     924:	88 0f       	add	r24, r24
     926:	88 0f       	add	r24, r24
     928:	88 0f       	add	r24, r24
     92a:	80 93 f0 00 	sts	0x00F0, r24
     92e:	ef ee       	ldi	r30, 0xEF	; 239
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	80 61       	ori	r24, 0x10	; 16
     936:	80 83       	st	Z, r24
     938:	1c c0       	rjmp	.+56     	; 0x972 <__stack+0x73>
          else              { Can_set_std_id(cmd->id.std);}
     93a:	12 96       	adiw	r26, 0x02	; 2
     93c:	8c 91       	ld	r24, X
     93e:	12 97       	sbiw	r26, 0x02	; 2
     940:	86 95       	lsr	r24
     942:	86 95       	lsr	r24
     944:	86 95       	lsr	r24
     946:	13 96       	adiw	r26, 0x03	; 3
     948:	9c 91       	ld	r25, X
     94a:	13 97       	sbiw	r26, 0x03	; 3
     94c:	e0 e2       	ldi	r30, 0x20	; 32
     94e:	9e 9f       	mul	r25, r30
     950:	80 0d       	add	r24, r0
     952:	11 24       	eor	r1, r1
     954:	80 93 f3 00 	sts	0x00F3, r24
     958:	12 96       	adiw	r26, 0x02	; 2
     95a:	8c 91       	ld	r24, X
     95c:	12 97       	sbiw	r26, 0x02	; 2
     95e:	82 95       	swap	r24
     960:	88 0f       	add	r24, r24
     962:	80 7e       	andi	r24, 0xE0	; 224
     964:	80 93 f2 00 	sts	0x00F2, r24
     968:	ef ee       	ldi	r30, 0xEF	; 239
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	8f 7e       	andi	r24, 0xEF	; 239
     970:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	9b 81       	ldd	r25, Y+3	; 0x03
     978:	92 95       	swap	r25
     97a:	96 95       	lsr	r25
     97c:	97 70       	andi	r25, 0x07	; 7
     97e:	8c 81       	ldd	r24, Y+4	; 0x04
     980:	88 0f       	add	r24, r24
     982:	88 0f       	add	r24, r24
     984:	88 0f       	add	r24, r24
     986:	89 0f       	add	r24, r25
     988:	80 93 f7 00 	sts	0x00F7, r24
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	92 95       	swap	r25
     990:	96 95       	lsr	r25
     992:	97 70       	andi	r25, 0x07	; 7
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	88 0f       	add	r24, r24
     998:	88 0f       	add	r24, r24
     99a:	88 0f       	add	r24, r24
     99c:	89 0f       	add	r24, r25
     99e:	80 93 f6 00 	sts	0x00F6, r24
     9a2:	99 81       	ldd	r25, Y+1	; 0x01
     9a4:	92 95       	swap	r25
     9a6:	96 95       	lsr	r25
     9a8:	97 70       	andi	r25, 0x07	; 7
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	88 0f       	add	r24, r24
     9ae:	88 0f       	add	r24, r24
     9b0:	88 0f       	add	r24, r24
     9b2:	89 0f       	add	r24, r25
     9b4:	80 93 f5 00 	sts	0x00F5, r24
     9b8:	29 81       	ldd	r18, Y+1	; 0x01
     9ba:	22 0f       	add	r18, r18
     9bc:	22 0f       	add	r18, r18
     9be:	22 0f       	add	r18, r18
     9c0:	84 ef       	ldi	r24, 0xF4	; 244
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     9c8:	ef ee       	ldi	r30, 0xEF	; 239
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	30 81       	ld	r19, Z
     9ce:	16 96       	adiw	r26, 0x06	; 6
     9d0:	2c 91       	ld	r18, X
     9d2:	16 97       	sbiw	r26, 0x06	; 6
     9d4:	23 2b       	or	r18, r19
     9d6:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     9d8:	1a 96       	adiw	r26, 0x0a	; 10
     9da:	1c 92       	st	X, r1
     9dc:	dc 01       	movw	r26, r24
     9de:	2c 91       	ld	r18, X
     9e0:	24 60       	ori	r18, 0x04	; 4
     9e2:	2c 93       	st	X, r18
     9e4:	a0 ef       	ldi	r26, 0xF0	; 240
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	2c 91       	ld	r18, X
     9ea:	2b 7f       	andi	r18, 0xFB	; 251
     9ec:	2c 93       	st	X, r18
          Can_set_idemsk();
     9ee:	dc 01       	movw	r26, r24
     9f0:	2c 91       	ld	r18, X
     9f2:	21 60       	ori	r18, 0x01	; 1
     9f4:	2c 93       	st	X, r18
          Can_config_rx();       
     9f6:	80 81       	ld	r24, Z
     9f8:	8f 73       	andi	r24, 0x3F	; 63
     9fa:	80 83       	st	Z, r24
     9fc:	80 81       	ld	r24, Z
     9fe:	80 68       	ori	r24, 0x80	; 128
     a00:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a02:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     a04:	d2 c1       	rjmp	.+932    	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a06:	1b 96       	adiw	r26, 0x0b	; 11
     a08:	8c 91       	ld	r24, X
     a0a:	1b 97       	sbiw	r26, 0x0b	; 11
     a0c:	88 23       	and	r24, r24
     a0e:	d9 f1       	breq	.+118    	; 0xa86 <__stack+0x187>
     a10:	14 96       	adiw	r26, 0x04	; 4
     a12:	9c 91       	ld	r25, X
     a14:	14 97       	sbiw	r26, 0x04	; 4
     a16:	92 95       	swap	r25
     a18:	96 95       	lsr	r25
     a1a:	97 70       	andi	r25, 0x07	; 7
     a1c:	15 96       	adiw	r26, 0x05	; 5
     a1e:	8c 91       	ld	r24, X
     a20:	15 97       	sbiw	r26, 0x05	; 5
     a22:	88 0f       	add	r24, r24
     a24:	88 0f       	add	r24, r24
     a26:	88 0f       	add	r24, r24
     a28:	89 0f       	add	r24, r25
     a2a:	80 93 f3 00 	sts	0x00F3, r24
     a2e:	13 96       	adiw	r26, 0x03	; 3
     a30:	9c 91       	ld	r25, X
     a32:	13 97       	sbiw	r26, 0x03	; 3
     a34:	92 95       	swap	r25
     a36:	96 95       	lsr	r25
     a38:	97 70       	andi	r25, 0x07	; 7
     a3a:	14 96       	adiw	r26, 0x04	; 4
     a3c:	8c 91       	ld	r24, X
     a3e:	14 97       	sbiw	r26, 0x04	; 4
     a40:	88 0f       	add	r24, r24
     a42:	88 0f       	add	r24, r24
     a44:	88 0f       	add	r24, r24
     a46:	89 0f       	add	r24, r25
     a48:	80 93 f2 00 	sts	0x00F2, r24
     a4c:	12 96       	adiw	r26, 0x02	; 2
     a4e:	9c 91       	ld	r25, X
     a50:	12 97       	sbiw	r26, 0x02	; 2
     a52:	92 95       	swap	r25
     a54:	96 95       	lsr	r25
     a56:	97 70       	andi	r25, 0x07	; 7
     a58:	13 96       	adiw	r26, 0x03	; 3
     a5a:	8c 91       	ld	r24, X
     a5c:	13 97       	sbiw	r26, 0x03	; 3
     a5e:	88 0f       	add	r24, r24
     a60:	88 0f       	add	r24, r24
     a62:	88 0f       	add	r24, r24
     a64:	89 0f       	add	r24, r25
     a66:	80 93 f1 00 	sts	0x00F1, r24
     a6a:	12 96       	adiw	r26, 0x02	; 2
     a6c:	8c 91       	ld	r24, X
     a6e:	12 97       	sbiw	r26, 0x02	; 2
     a70:	88 0f       	add	r24, r24
     a72:	88 0f       	add	r24, r24
     a74:	88 0f       	add	r24, r24
     a76:	80 93 f0 00 	sts	0x00F0, r24
     a7a:	ef ee       	ldi	r30, 0xEF	; 239
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	80 61       	ori	r24, 0x10	; 16
     a82:	80 83       	st	Z, r24
     a84:	1c c0       	rjmp	.+56     	; 0xabe <__stack+0x1bf>
          else              { Can_set_std_id(cmd->id.std);}
     a86:	12 96       	adiw	r26, 0x02	; 2
     a88:	8c 91       	ld	r24, X
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	86 95       	lsr	r24
     a8e:	86 95       	lsr	r24
     a90:	86 95       	lsr	r24
     a92:	13 96       	adiw	r26, 0x03	; 3
     a94:	9c 91       	ld	r25, X
     a96:	13 97       	sbiw	r26, 0x03	; 3
     a98:	e0 e2       	ldi	r30, 0x20	; 32
     a9a:	9e 9f       	mul	r25, r30
     a9c:	80 0d       	add	r24, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	80 93 f3 00 	sts	0x00F3, r24
     aa4:	12 96       	adiw	r26, 0x02	; 2
     aa6:	8c 91       	ld	r24, X
     aa8:	12 97       	sbiw	r26, 0x02	; 2
     aaa:	82 95       	swap	r24
     aac:	88 0f       	add	r24, r24
     aae:	80 7e       	andi	r24, 0xE0	; 224
     ab0:	80 93 f2 00 	sts	0x00F2, r24
     ab4:	ef ee       	ldi	r30, 0xEF	; 239
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	8f 7e       	andi	r24, 0xEF	; 239
     abc:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	89 83       	std	Y+1, r24	; 0x01
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	92 95       	swap	r25
     ac6:	96 95       	lsr	r25
     ac8:	97 70       	andi	r25, 0x07	; 7
     aca:	8c 81       	ldd	r24, Y+4	; 0x04
     acc:	88 0f       	add	r24, r24
     ace:	88 0f       	add	r24, r24
     ad0:	88 0f       	add	r24, r24
     ad2:	89 0f       	add	r24, r25
     ad4:	80 93 f7 00 	sts	0x00F7, r24
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	92 95       	swap	r25
     adc:	96 95       	lsr	r25
     ade:	97 70       	andi	r25, 0x07	; 7
     ae0:	8b 81       	ldd	r24, Y+3	; 0x03
     ae2:	88 0f       	add	r24, r24
     ae4:	88 0f       	add	r24, r24
     ae6:	88 0f       	add	r24, r24
     ae8:	89 0f       	add	r24, r25
     aea:	80 93 f6 00 	sts	0x00F6, r24
     aee:	99 81       	ldd	r25, Y+1	; 0x01
     af0:	92 95       	swap	r25
     af2:	96 95       	lsr	r25
     af4:	97 70       	andi	r25, 0x07	; 7
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	88 0f       	add	r24, r24
     afa:	88 0f       	add	r24, r24
     afc:	88 0f       	add	r24, r24
     afe:	89 0f       	add	r24, r25
     b00:	80 93 f5 00 	sts	0x00F5, r24
     b04:	29 81       	ldd	r18, Y+1	; 0x01
     b06:	22 0f       	add	r18, r18
     b08:	22 0f       	add	r18, r18
     b0a:	22 0f       	add	r18, r18
     b0c:	84 ef       	ldi	r24, 0xF4	; 244
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b14:	ef ee       	ldi	r30, 0xEF	; 239
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	30 81       	ld	r19, Z
     b1a:	16 96       	adiw	r26, 0x06	; 6
     b1c:	2c 91       	ld	r18, X
     b1e:	16 97       	sbiw	r26, 0x06	; 6
     b20:	23 2b       	or	r18, r19
     b22:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	1a 96       	adiw	r26, 0x0a	; 10
     b28:	2c 93       	st	X, r18
     b2a:	dc 01       	movw	r26, r24
     b2c:	2c 91       	ld	r18, X
     b2e:	24 60       	ori	r18, 0x04	; 4
     b30:	2c 93       	st	X, r18
     b32:	a0 ef       	ldi	r26, 0xF0	; 240
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	2c 91       	ld	r18, X
     b38:	24 60       	ori	r18, 0x04	; 4
     b3a:	2c 93       	st	X, r18
          Can_clear_rplv();
     b3c:	20 81       	ld	r18, Z
     b3e:	2f 7d       	andi	r18, 0xDF	; 223
     b40:	20 83       	st	Z, r18
          Can_set_idemsk();
     b42:	dc 01       	movw	r26, r24
     b44:	2c 91       	ld	r18, X
     b46:	21 60       	ori	r18, 0x01	; 1
     b48:	2c 93       	st	X, r18
          Can_config_rx();       
     b4a:	80 81       	ld	r24, Z
     b4c:	8f 73       	andi	r24, 0x3F	; 63
     b4e:	80 83       	st	Z, r24
     b50:	80 81       	ld	r24, Z
     b52:	80 68       	ori	r24, 0x80	; 128
     b54:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b56:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     b58:	28 c1       	rjmp	.+592    	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	8a ef       	ldi	r24, 0xFA	; 250
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	17 96       	adiw	r26, 0x07	; 7
     b62:	ed 91       	ld	r30, X+
     b64:	fc 91       	ld	r31, X
     b66:	18 97       	sbiw	r26, 0x08	; 8
     b68:	e2 0f       	add	r30, r18
     b6a:	f1 1d       	adc	r31, r1
     b6c:	30 81       	ld	r19, Z
     b6e:	fc 01       	movw	r30, r24
     b70:	30 83       	st	Z, r19
     b72:	2f 5f       	subi	r18, 0xFF	; 255
     b74:	16 96       	adiw	r26, 0x06	; 6
     b76:	3c 91       	ld	r19, X
     b78:	16 97       	sbiw	r26, 0x06	; 6
     b7a:	23 17       	cp	r18, r19
     b7c:	88 f3       	brcs	.-30     	; 0xb60 <__stack+0x261>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     b7e:	19 82       	std	Y+1, r1	; 0x01
     b80:	9b 81       	ldd	r25, Y+3	; 0x03
     b82:	92 95       	swap	r25
     b84:	96 95       	lsr	r25
     b86:	97 70       	andi	r25, 0x07	; 7
     b88:	8c 81       	ldd	r24, Y+4	; 0x04
     b8a:	88 0f       	add	r24, r24
     b8c:	88 0f       	add	r24, r24
     b8e:	88 0f       	add	r24, r24
     b90:	89 0f       	add	r24, r25
     b92:	80 93 f7 00 	sts	0x00F7, r24
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	92 95       	swap	r25
     b9a:	96 95       	lsr	r25
     b9c:	97 70       	andi	r25, 0x07	; 7
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	88 0f       	add	r24, r24
     ba2:	88 0f       	add	r24, r24
     ba4:	88 0f       	add	r24, r24
     ba6:	89 0f       	add	r24, r25
     ba8:	80 93 f6 00 	sts	0x00F6, r24
     bac:	99 81       	ldd	r25, Y+1	; 0x01
     bae:	92 95       	swap	r25
     bb0:	96 95       	lsr	r25
     bb2:	97 70       	andi	r25, 0x07	; 7
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	88 0f       	add	r24, r24
     bb8:	88 0f       	add	r24, r24
     bba:	88 0f       	add	r24, r24
     bbc:	89 0f       	add	r24, r25
     bbe:	80 93 f5 00 	sts	0x00F5, r24
     bc2:	29 81       	ldd	r18, Y+1	; 0x01
     bc4:	22 0f       	add	r18, r18
     bc6:	22 0f       	add	r18, r18
     bc8:	22 0f       	add	r18, r18
     bca:	84 ef       	ldi	r24, 0xF4	; 244
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	fc 01       	movw	r30, r24
     bd0:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     bd2:	ef ee       	ldi	r30, 0xEF	; 239
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	30 81       	ld	r19, Z
     bd8:	16 96       	adiw	r26, 0x06	; 6
     bda:	2c 91       	ld	r18, X
     bdc:	16 97       	sbiw	r26, 0x06	; 6
     bde:	23 2b       	or	r18, r19
     be0:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	1a 96       	adiw	r26, 0x0a	; 10
     be6:	2c 93       	st	X, r18
     be8:	dc 01       	movw	r26, r24
     bea:	2c 91       	ld	r18, X
     bec:	24 60       	ori	r18, 0x04	; 4
     bee:	2c 93       	st	X, r18
     bf0:	a0 ef       	ldi	r26, 0xF0	; 240
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	2c 91       	ld	r18, X
     bf6:	24 60       	ori	r18, 0x04	; 4
     bf8:	2c 93       	st	X, r18
          Can_set_rplv();
     bfa:	20 81       	ld	r18, Z
     bfc:	20 62       	ori	r18, 0x20	; 32
     bfe:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c00:	dc 01       	movw	r26, r24
     c02:	2c 91       	ld	r18, X
     c04:	2e 7f       	andi	r18, 0xFE	; 254
     c06:	2c 93       	st	X, r18
          Can_config_rx();       
     c08:	80 81       	ld	r24, Z
     c0a:	8f 73       	andi	r24, 0x3F	; 63
     c0c:	80 83       	st	Z, r24
     c0e:	80 81       	ld	r24, Z
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c14:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     c16:	c9 c0       	rjmp	.+402    	; 0xdaa <__stack+0x4ab>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c18:	1b 96       	adiw	r26, 0x0b	; 11
     c1a:	8c 91       	ld	r24, X
     c1c:	1b 97       	sbiw	r26, 0x0b	; 11
     c1e:	88 23       	and	r24, r24
     c20:	d9 f1       	breq	.+118    	; 0xc98 <__stack+0x399>
     c22:	14 96       	adiw	r26, 0x04	; 4
     c24:	9c 91       	ld	r25, X
     c26:	14 97       	sbiw	r26, 0x04	; 4
     c28:	92 95       	swap	r25
     c2a:	96 95       	lsr	r25
     c2c:	97 70       	andi	r25, 0x07	; 7
     c2e:	15 96       	adiw	r26, 0x05	; 5
     c30:	8c 91       	ld	r24, X
     c32:	15 97       	sbiw	r26, 0x05	; 5
     c34:	88 0f       	add	r24, r24
     c36:	88 0f       	add	r24, r24
     c38:	88 0f       	add	r24, r24
     c3a:	89 0f       	add	r24, r25
     c3c:	80 93 f3 00 	sts	0x00F3, r24
     c40:	13 96       	adiw	r26, 0x03	; 3
     c42:	9c 91       	ld	r25, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	92 95       	swap	r25
     c48:	96 95       	lsr	r25
     c4a:	97 70       	andi	r25, 0x07	; 7
     c4c:	14 96       	adiw	r26, 0x04	; 4
     c4e:	8c 91       	ld	r24, X
     c50:	14 97       	sbiw	r26, 0x04	; 4
     c52:	88 0f       	add	r24, r24
     c54:	88 0f       	add	r24, r24
     c56:	88 0f       	add	r24, r24
     c58:	89 0f       	add	r24, r25
     c5a:	80 93 f2 00 	sts	0x00F2, r24
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	9c 91       	ld	r25, X
     c62:	12 97       	sbiw	r26, 0x02	; 2
     c64:	92 95       	swap	r25
     c66:	96 95       	lsr	r25
     c68:	97 70       	andi	r25, 0x07	; 7
     c6a:	13 96       	adiw	r26, 0x03	; 3
     c6c:	8c 91       	ld	r24, X
     c6e:	13 97       	sbiw	r26, 0x03	; 3
     c70:	88 0f       	add	r24, r24
     c72:	88 0f       	add	r24, r24
     c74:	88 0f       	add	r24, r24
     c76:	89 0f       	add	r24, r25
     c78:	80 93 f1 00 	sts	0x00F1, r24
     c7c:	12 96       	adiw	r26, 0x02	; 2
     c7e:	8c 91       	ld	r24, X
     c80:	12 97       	sbiw	r26, 0x02	; 2
     c82:	88 0f       	add	r24, r24
     c84:	88 0f       	add	r24, r24
     c86:	88 0f       	add	r24, r24
     c88:	80 93 f0 00 	sts	0x00F0, r24
     c8c:	ef ee       	ldi	r30, 0xEF	; 239
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	80 61       	ori	r24, 0x10	; 16
     c94:	80 83       	st	Z, r24
     c96:	1c c0       	rjmp	.+56     	; 0xcd0 <__stack+0x3d1>
          else              { Can_set_std_id(cmd->id.std);}
     c98:	12 96       	adiw	r26, 0x02	; 2
     c9a:	8c 91       	ld	r24, X
     c9c:	12 97       	sbiw	r26, 0x02	; 2
     c9e:	86 95       	lsr	r24
     ca0:	86 95       	lsr	r24
     ca2:	86 95       	lsr	r24
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 91       	ld	r25, X
     ca8:	13 97       	sbiw	r26, 0x03	; 3
     caa:	e0 e2       	ldi	r30, 0x20	; 32
     cac:	9e 9f       	mul	r25, r30
     cae:	80 0d       	add	r24, r0
     cb0:	11 24       	eor	r1, r1
     cb2:	80 93 f3 00 	sts	0x00F3, r24
     cb6:	12 96       	adiw	r26, 0x02	; 2
     cb8:	8c 91       	ld	r24, X
     cba:	12 97       	sbiw	r26, 0x02	; 2
     cbc:	82 95       	swap	r24
     cbe:	88 0f       	add	r24, r24
     cc0:	80 7e       	andi	r24, 0xE0	; 224
     cc2:	80 93 f2 00 	sts	0x00F2, r24
     cc6:	ef ee       	ldi	r30, 0xEF	; 239
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7e       	andi	r24, 0xEF	; 239
     cce:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     cd0:	16 96       	adiw	r26, 0x06	; 6
     cd2:	8c 91       	ld	r24, X
     cd4:	16 97       	sbiw	r26, 0x06	; 6
     cd6:	88 23       	and	r24, r24
     cd8:	91 f0       	breq	.+36     	; 0xcfe <__stack+0x3ff>
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	8a ef       	ldi	r24, 0xFA	; 250
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	17 96       	adiw	r26, 0x07	; 7
     ce2:	ed 91       	ld	r30, X+
     ce4:	fc 91       	ld	r31, X
     ce6:	18 97       	sbiw	r26, 0x08	; 8
     ce8:	e2 0f       	add	r30, r18
     cea:	f1 1d       	adc	r31, r1
     cec:	30 81       	ld	r19, Z
     cee:	fc 01       	movw	r30, r24
     cf0:	30 83       	st	Z, r19
     cf2:	2f 5f       	subi	r18, 0xFF	; 255
     cf4:	16 96       	adiw	r26, 0x06	; 6
     cf6:	3c 91       	ld	r19, X
     cf8:	16 97       	sbiw	r26, 0x06	; 6
     cfa:	23 17       	cp	r18, r19
     cfc:	88 f3       	brcs	.-30     	; 0xce0 <__stack+0x3e1>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	9b 81       	ldd	r25, Y+3	; 0x03
     d04:	92 95       	swap	r25
     d06:	96 95       	lsr	r25
     d08:	97 70       	andi	r25, 0x07	; 7
     d0a:	8c 81       	ldd	r24, Y+4	; 0x04
     d0c:	88 0f       	add	r24, r24
     d0e:	88 0f       	add	r24, r24
     d10:	88 0f       	add	r24, r24
     d12:	89 0f       	add	r24, r25
     d14:	80 93 f7 00 	sts	0x00F7, r24
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	92 95       	swap	r25
     d1c:	96 95       	lsr	r25
     d1e:	97 70       	andi	r25, 0x07	; 7
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	88 0f       	add	r24, r24
     d24:	88 0f       	add	r24, r24
     d26:	88 0f       	add	r24, r24
     d28:	89 0f       	add	r24, r25
     d2a:	80 93 f6 00 	sts	0x00F6, r24
     d2e:	99 81       	ldd	r25, Y+1	; 0x01
     d30:	92 95       	swap	r25
     d32:	96 95       	lsr	r25
     d34:	97 70       	andi	r25, 0x07	; 7
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	88 0f       	add	r24, r24
     d3a:	88 0f       	add	r24, r24
     d3c:	88 0f       	add	r24, r24
     d3e:	89 0f       	add	r24, r25
     d40:	80 93 f5 00 	sts	0x00F5, r24
     d44:	29 81       	ldd	r18, Y+1	; 0x01
     d46:	22 0f       	add	r18, r18
     d48:	22 0f       	add	r18, r18
     d4a:	22 0f       	add	r18, r18
     d4c:	84 ef       	ldi	r24, 0xF4	; 244
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	fc 01       	movw	r30, r24
     d52:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d54:	ef ee       	ldi	r30, 0xEF	; 239
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	30 81       	ld	r19, Z
     d5a:	16 96       	adiw	r26, 0x06	; 6
     d5c:	2c 91       	ld	r18, X
     d5e:	16 97       	sbiw	r26, 0x06	; 6
     d60:	23 2b       	or	r18, r19
     d62:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	1a 96       	adiw	r26, 0x0a	; 10
     d68:	2c 93       	st	X, r18
     d6a:	dc 01       	movw	r26, r24
     d6c:	2c 91       	ld	r18, X
     d6e:	24 60       	ori	r18, 0x04	; 4
     d70:	2c 93       	st	X, r18
     d72:	a0 ef       	ldi	r26, 0xF0	; 240
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	2c 91       	ld	r18, X
     d78:	24 60       	ori	r18, 0x04	; 4
     d7a:	2c 93       	st	X, r18
          Can_set_rplv();
     d7c:	20 81       	ld	r18, Z
     d7e:	20 62       	ori	r18, 0x20	; 32
     d80:	20 83       	st	Z, r18
          Can_set_idemsk();
     d82:	dc 01       	movw	r26, r24
     d84:	2c 91       	ld	r18, X
     d86:	21 60       	ori	r18, 0x01	; 1
     d88:	2c 93       	st	X, r18
          Can_config_rx();       
     d8a:	80 81       	ld	r24, Z
     d8c:	8f 73       	andi	r24, 0x3F	; 63
     d8e:	80 83       	st	Z, r24
     d90:	80 81       	ld	r24, Z
     d92:	80 68       	ori	r24, 0x80	; 128
     d94:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d96:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     d98:	08 c0       	rjmp	.+16     	; 0xdaa <__stack+0x4ab>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
     d9a:	19 96       	adiw	r26, 0x09	; 9
     d9c:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <__stack+0x4ab>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
     da2:	8f e1       	ldi	r24, 0x1F	; 31
     da4:	19 96       	adiw	r26, 0x09	; 9
     da6:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
     da8:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
     daa:	0f 90       	pop	r0
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
     db8:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
     dba:	88 23       	and	r24, r24
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <can_get_status+0xe>
     dbe:	e1 c0       	rjmp	.+450    	; 0xf82 <can_get_status+0x1d0>
     dc0:	8f 31       	cpi	r24, 0x1F	; 31
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <can_get_status+0x14>
     dc4:	e0 c0       	rjmp	.+448    	; 0xf86 <can_get_status+0x1d4>
     dc6:	8f 3f       	cpi	r24, 0xFF	; 255
     dc8:	09 f4       	brne	.+2      	; 0xdcc <can_get_status+0x1a>
     dca:	df c0       	rjmp	.+446    	; 0xf8a <can_get_status+0x1d8>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
     dcc:	62 95       	swap	r22
     dce:	60 7f       	andi	r22, 0xF0	; 240
     dd0:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
     dd4:	0e 94 70 00 	call	0xe0	; 0xe0 <can_get_mob_status>
    
    switch (a_status)
     dd8:	80 32       	cpi	r24, 0x20	; 32
     dda:	61 f0       	breq	.+24     	; 0xdf4 <can_get_status+0x42>
     ddc:	20 f4       	brcc	.+8      	; 0xde6 <can_get_status+0x34>
     dde:	88 23       	and	r24, r24
     de0:	09 f4       	brne	.+2      	; 0xde4 <can_get_status+0x32>
     de2:	d5 c0       	rjmp	.+426    	; 0xf8e <can_get_status+0x1dc>
     de4:	c4 c0       	rjmp	.+392    	; 0xf6e <can_get_status+0x1bc>
     de6:	80 34       	cpi	r24, 0x40	; 64
     de8:	09 f4       	brne	.+2      	; 0xdec <can_get_status+0x3a>
     dea:	b6 c0       	rjmp	.+364    	; 0xf58 <can_get_status+0x1a6>
     dec:	80 3a       	cpi	r24, 0xA0	; 160
     dee:	09 f4       	brne	.+2      	; 0xdf2 <can_get_status+0x40>
     df0:	5a c0       	rjmp	.+180    	; 0xea6 <can_get_status+0xf4>
     df2:	bd c0       	rjmp	.+378    	; 0xf6e <can_get_status+0x1bc>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_Reg_Write>
			delay_ms(500);
     dfc:	84 ef       	ldi	r24, 0xF4	; 244
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 9b 09 	call	0x1336	; 0x1336 <delay_ms>
			LED_Reg_Write(0x00);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_Reg_Write>
	    
            cmd->ctrl.rtr = Can_get_rtr();
     e0c:	80 91 f0 00 	lds	r24, 0x00F0
     e10:	82 fb       	bst	r24, 2
     e12:	88 27       	eor	r24, r24
     e14:	80 f9       	bld	r24, 0
     e16:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     e18:	80 91 ef 00 	lds	r24, 0x00EF
     e1c:	84 ff       	sbrs	r24, 4
     e1e:	2d c0       	rjmp	.+90     	; 0xe7a <can_get_status+0xc8>
            {
	            cmd->ctrl.ide = 1; // extended frame
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
     e24:	e3 ef       	ldi	r30, 0xF3	; 243
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	86 95       	lsr	r24
     e2c:	86 95       	lsr	r24
     e2e:	86 95       	lsr	r24
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	a2 ef       	ldi	r26, 0xF2	; 242
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	8c 91       	ld	r24, X
     e38:	90 81       	ld	r25, Z
     e3a:	86 95       	lsr	r24
     e3c:	86 95       	lsr	r24
     e3e:	86 95       	lsr	r24
     e40:	20 e2       	ldi	r18, 0x20	; 32
     e42:	92 9f       	mul	r25, r18
     e44:	80 0d       	add	r24, r0
     e46:	11 24       	eor	r1, r1
     e48:	8c 83       	std	Y+4, r24	; 0x04
     e4a:	e1 ef       	ldi	r30, 0xF1	; 241
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	9c 91       	ld	r25, X
     e52:	86 95       	lsr	r24
     e54:	86 95       	lsr	r24
     e56:	86 95       	lsr	r24
     e58:	20 e2       	ldi	r18, 0x20	; 32
     e5a:	92 9f       	mul	r25, r18
     e5c:	80 0d       	add	r24, r0
     e5e:	11 24       	eor	r1, r1
     e60:	8b 83       	std	Y+3, r24	; 0x03
     e62:	80 91 f0 00 	lds	r24, 0x00F0
     e66:	90 81       	ld	r25, Z
     e68:	86 95       	lsr	r24
     e6a:	86 95       	lsr	r24
     e6c:	86 95       	lsr	r24
     e6e:	20 e2       	ldi	r18, 0x20	; 32
     e70:	92 9f       	mul	r25, r18
     e72:	80 0d       	add	r24, r0
     e74:	11 24       	eor	r1, r1
     e76:	8a 83       	std	Y+2, r24	; 0x02
     e78:	07 c0       	rjmp	.+14     	; 0xe88 <can_get_status+0xd6>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
     e7a:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
     e7c:	e3 ef       	ldi	r30, 0xF3	; 243
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	80 91 f2 00 	lds	r24, 0x00F2
     e86:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
     e88:	80 e2       	ldi	r24, 0x20	; 32
     e8a:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
     e8c:	8f 81       	ldd	r24, Y+7	; 0x07
     e8e:	98 85       	ldd	r25, Y+8	; 0x08
     e90:	0e 94 86 00 	call	0x10c	; 0x10c <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
     e94:	ef ee       	ldi	r30, 0xEF	; 239
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8f 73       	andi	r24, 0x3F	; 63
     e9c:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
     e9e:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
     ea2:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
     ea4:	75 c0       	rjmp	.+234    	; 0xf90 <can_get_status+0x1de>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
     ea6:	80 91 f0 00 	lds	r24, 0x00F0
     eaa:	82 fb       	bst	r24, 2
     eac:	88 27       	eor	r24, r24
     eae:	80 f9       	bld	r24, 0
     eb0:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     eb2:	80 91 ef 00 	lds	r24, 0x00EF
     eb6:	84 ff       	sbrs	r24, 4
     eb8:	2d c0       	rjmp	.+90     	; 0xf14 <can_get_status+0x162>
            {
                cmd->ctrl.ide = 1; // extended frame
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
     ebe:	e3 ef       	ldi	r30, 0xF3	; 243
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	86 95       	lsr	r24
     ec6:	86 95       	lsr	r24
     ec8:	86 95       	lsr	r24
     eca:	8d 83       	std	Y+5, r24	; 0x05
     ecc:	a2 ef       	ldi	r26, 0xF2	; 242
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	8c 91       	ld	r24, X
     ed2:	90 81       	ld	r25, Z
     ed4:	86 95       	lsr	r24
     ed6:	86 95       	lsr	r24
     ed8:	86 95       	lsr	r24
     eda:	20 e2       	ldi	r18, 0x20	; 32
     edc:	92 9f       	mul	r25, r18
     ede:	80 0d       	add	r24, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	8c 83       	std	Y+4, r24	; 0x04
     ee4:	e1 ef       	ldi	r30, 0xF1	; 241
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	9c 91       	ld	r25, X
     eec:	86 95       	lsr	r24
     eee:	86 95       	lsr	r24
     ef0:	86 95       	lsr	r24
     ef2:	20 e2       	ldi	r18, 0x20	; 32
     ef4:	92 9f       	mul	r25, r18
     ef6:	80 0d       	add	r24, r0
     ef8:	11 24       	eor	r1, r1
     efa:	8b 83       	std	Y+3, r24	; 0x03
     efc:	80 91 f0 00 	lds	r24, 0x00F0
     f00:	90 81       	ld	r25, Z
     f02:	86 95       	lsr	r24
     f04:	86 95       	lsr	r24
     f06:	86 95       	lsr	r24
     f08:	20 e2       	ldi	r18, 0x20	; 32
     f0a:	92 9f       	mul	r25, r18
     f0c:	80 0d       	add	r24, r0
     f0e:	11 24       	eor	r1, r1
     f10:	8a 83       	std	Y+2, r24	; 0x02
     f12:	13 c0       	rjmp	.+38     	; 0xf3a <can_get_status+0x188>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
     f14:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
     f16:	e3 ef       	ldi	r30, 0xF3	; 243
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	82 95       	swap	r24
     f1e:	86 95       	lsr	r24
     f20:	87 70       	andi	r24, 0x07	; 7
     f22:	8b 83       	std	Y+3, r24	; 0x03
     f24:	80 91 f2 00 	lds	r24, 0x00F2
     f28:	90 81       	ld	r25, Z
     f2a:	99 0f       	add	r25, r25
     f2c:	99 0f       	add	r25, r25
     f2e:	99 0f       	add	r25, r25
     f30:	82 95       	swap	r24
     f32:	86 95       	lsr	r24
     f34:	87 70       	andi	r24, 0x07	; 7
     f36:	89 0f       	add	r24, r25
     f38:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
     f3a:	80 ea       	ldi	r24, 0xA0	; 160
     f3c:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
     f3e:	8f 81       	ldd	r24, Y+7	; 0x07
     f40:	98 85       	ldd	r25, Y+8	; 0x08
     f42:	0e 94 86 00 	call	0x10c	; 0x10c <can_get_data>
			
			Can_mob_abort();        // Freed the MO
     f46:	ef ee       	ldi	r30, 0xEF	; 239
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 73       	andi	r24, 0x3F	; 63
     f4e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
     f50:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
     f54:	80 ea       	ldi	r24, 0xA0	; 160
            break;
     f56:	1c c0       	rjmp	.+56     	; 0xf90 <can_get_status+0x1de>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
     f58:	80 e4       	ldi	r24, 0x40	; 64
     f5a:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
     f5c:	ef ee       	ldi	r30, 0xEF	; 239
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8f 73       	andi	r24, 0x3F	; 63
     f64:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     f66:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
     f6a:	80 e4       	ldi	r24, 0x40	; 64
            break;
     f6c:	11 c0       	rjmp	.+34     	; 0xf90 <can_get_status+0x1de>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
     f6e:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
     f70:	ef ee       	ldi	r30, 0xEF	; 239
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 73       	andi	r24, 0x3F	; 63
     f78:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
     f7a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
     f7e:	82 e0       	ldi	r24, 0x02	; 2
            break;
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <can_get_status+0x1de>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <can_get_status+0x1de>
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <can_get_status+0x1de>
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <can_get_status+0x1de>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <LED_Reg_Write>:
*/
#include <avr/io.h>
#include "LED.h"

void LED_Reg_Write(uint8_t val) {
	LEDPORT = ~val;
     f96:	80 95       	com	r24
     f98:	85 b9       	out	0x05, r24	; 5
     f9a:	08 95       	ret

00000f9c <main>:
uint8_t data3[DATA_BUFFER_SIZE];	// Data Buffer for MOb3
uint8_t data4[DATA_BUFFER_SIZE];	// Data Buffer for MOb4
uint8_t data5[DATA_BUFFER_SIZE];	// Data Buffer for MOb5

int main(void)
{		
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	63 97       	sbiw	r28, 0x13	; 19
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
	}
}

void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
     fb0:	e1 e6       	ldi	r30, 0x61	; 97
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 e8       	ldi	r24, 0x80	; 128
     fb6:	80 83       	st	Z, r24
	CLKPR = 0x00;
     fb8:	10 82       	st	Z, r1
}

void io_init(void) {
	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFF;
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	84 b9       	out	0x04, r24	; 4
	LED_Reg_Write(0x00); // clear all LEDs
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_Reg_Write>
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x00;
     fc4:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
     fc6:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x00;
     fc8:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
     fca:	1b b8       	out	0x0b, r1	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
     fcc:	1d b8       	out	0x0d, r1	; 13
	PORTD = 0x00;
     fce:	1b b8       	out	0x0b, r1	; 11
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
     fd0:	0e 94 81 09 	call	0x1302	; 0x1302 <timer_init>
	can_init(0);
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	0e 94 9e 00 	call	0x13c	; 0x13c <can_init>
	
	uint8_t	status, i, mob_number, send_now, send_hk;
	uint8_t message_arr[8];
	
	// Enable global interrupts for Timer execution
	sei();
     fda:	78 94       	sei
	
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_Reg_Write>
	delay_ms(250);
     fe2:	8a ef       	ldi	r24, 0xFA	; 250
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 9b 09 	call	0x1336	; 0x1336 <delay_ms>
	LED_Reg_Write(0x00);
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_Reg_Write>
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	9a 87       	std	Y+10, r25	; 0x0a
     ff6:	89 87       	std	Y+9, r24	; 0x09
     ff8:	8e 01       	movw	r16, r28
     ffa:	07 5f       	subi	r16, 0xF7	; 247
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	fc 01       	movw	r30, r24
	
	for (i = 0; i < 8; i ++)
	{
		message_arr[i] = 0;			// Reset the message array to zero after each message.
    1000:	11 92       	st	Z+, r1
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
	delay_ms(250);
	LED_Reg_Write(0x00);
	
	for (i = 0; i < 8; i ++)
    1002:	e0 17       	cp	r30, r16
    1004:	f1 07       	cpc	r31, r17
    1006:	e1 f7       	brne	.-8      	; 0x1000 <main+0x64>
	send_now = 0;
	send_hk = 0;
	
	/* INITIALIZE MOB0 */

	message.pt_data = &data0[0]; // point message object to first element of data buffer
    1008:	84 e2       	ldi	r24, 0x24	; 36
    100a:	91 e0       	ldi	r25, 0x01	; 1
    100c:	90 93 08 01 	sts	0x0108, r25
    1010:	80 93 07 01 	sts	0x0107, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    1014:	10 92 0b 01 	sts	0x010B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
    1018:	84 e1       	ldi	r24, 0x14	; 20
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	90 93 03 01 	sts	0x0103, r25
    1020:	80 93 02 01 	sts	0x0102, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    1024:	85 e0       	ldi	r24, 0x05	; 5
    1026:	80 93 01 01 	sts	0x0101, r24
	message.dlc = 8;			 // Max length of a CAN message.
    102a:	88 e0       	ldi	r24, 0x08	; 8
    102c:	80 93 06 01 	sts	0x0106, r24
	mob_number = 0;
		
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 ad 00 	call	0x15a	; 0x15a <can_cmd>
    103a:	81 11       	cpse	r24, r1
    103c:	f9 cf       	rjmp	.-14     	; 0x1030 <main+0x94>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
    103e:	85 e3       	ldi	r24, 0x35	; 53
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	90 93 08 01 	sts	0x0108, r25
    1046:	80 93 07 01 	sts	0x0107, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
    104a:	10 92 0b 01 	sts	0x010B, r1
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
    104e:	89 e1       	ldi	r24, 0x19	; 25
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	90 93 03 01 	sts	0x0103, r25
    1056:	80 93 02 01 	sts	0x0102, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
    105a:	85 e0       	ldi	r24, 0x05	; 5
    105c:	80 93 01 01 	sts	0x0101, r24
	message.dlc = 8;				// Max length of a CAN message.
    1060:	88 e0       	ldi	r24, 0x08	; 8
    1062:	80 93 06 01 	sts	0x0106, r24
	mob_number = 5;
		
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
    1066:	65 e0       	ldi	r22, 0x05	; 5
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	0e 94 ad 00 	call	0x15a	; 0x15a <can_cmd>
    1070:	81 11       	cpse	r24, r1
    1072:	f9 cf       	rjmp	.-14     	; 0x1066 <main+0xca>

	
    while(1)
    {
		
		message.pt_data = &data0[0]; // point message object to first element of data buffer
    1074:	0f 2e       	mov	r0, r31
    1076:	f7 e0       	ldi	r31, 0x07	; 7
    1078:	cf 2e       	mov	r12, r31
    107a:	f1 e0       	ldi	r31, 0x01	; 1
    107c:	df 2e       	mov	r13, r31
    107e:	f0 2d       	mov	r31, r0
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    1080:	0f 2e       	mov	r0, r31
    1082:	fb e0       	ldi	r31, 0x0B	; 11
    1084:	4f 2e       	mov	r4, r31
    1086:	f1 e0       	ldi	r31, 0x01	; 1
    1088:	5f 2e       	mov	r5, r31
    108a:	f0 2d       	mov	r31, r0
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
    108c:	0f 2e       	mov	r0, r31
    108e:	f2 e0       	ldi	r31, 0x02	; 2
    1090:	ef 2e       	mov	r14, r31
    1092:	f1 e0       	ldi	r31, 0x01	; 1
    1094:	ff 2e       	mov	r15, r31
    1096:	f0 2d       	mov	r31, r0
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    1098:	0f 2e       	mov	r0, r31
    109a:	f1 e0       	ldi	r31, 0x01	; 1
    109c:	6f 2e       	mov	r6, r31
    109e:	f1 e0       	ldi	r31, 0x01	; 1
    10a0:	7f 2e       	mov	r7, r31
    10a2:	f0 2d       	mov	r31, r0
		message.dlc = 8;			 // Max length of a CAN message.
    10a4:	0f 2e       	mov	r0, r31
    10a6:	f6 e0       	ldi	r31, 0x06	; 6
    10a8:	2f 2e       	mov	r2, r31
    10aa:	f1 e0       	ldi	r31, 0x01	; 1
    10ac:	3f 2e       	mov	r3, r31
    10ae:	f0 2d       	mov	r31, r0

	
    while(1)
    {
		
		message.pt_data = &data0[0]; // point message object to first element of data buffer
    10b0:	a4 e2       	ldi	r26, 0x24	; 36
    10b2:	b1 e0       	ldi	r27, 0x01	; 1
    10b4:	ad 87       	std	Y+13, r26	; 0x0d
    10b6:	be 87       	std	Y+14, r27	; 0x0e
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
    10b8:	f4 e1       	ldi	r31, 0x14	; 20
    10ba:	ff 87       	std	Y+15, r31	; 0x0f
    10bc:	18 8a       	std	Y+16, r1	; 0x10
	sei();
	
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
	delay_ms(250);
	LED_Reg_Write(0x00);
    10be:	a1 2c       	mov	r10, r1
    {
		
		message.pt_data = &data0[0]; // point message object to first element of data buffer
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    10c0:	0f 2e       	mov	r0, r31
    10c2:	f5 e0       	ldi	r31, 0x05	; 5
    10c4:	bf 2e       	mov	r11, r31
    10c6:	f0 2d       	mov	r31, r0
    10c8:	bb 8a       	std	Y+19, r11	; 0x13
		message.dlc = 8;			 // Max length of a CAN message.
    10ca:	88 e0       	ldi	r24, 0x08	; 8
    10cc:	8c 87       	std	Y+12, r24	; 0x0c
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)
				{
					message_arr[i] = *(message.pt_data + i);
    10ce:	99 85       	ldd	r25, Y+9	; 0x09
    10d0:	99 8b       	std	Y+17, r25	; 0x11
    10d2:	aa 85       	ldd	r26, Y+10	; 0x0a
    10d4:	aa 8b       	std	Y+18, r26	; 0x12
			while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure	
		}
		
			message.pt_data = &data5[0]; // point message object to first element of data buffer
			message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
			message.id.std = SUB0_ID5;  // populate ID field with ID Tag
    10d6:	0f 2e       	mov	r0, r31
    10d8:	f9 e1       	ldi	r31, 0x19	; 25
    10da:	8f 2e       	mov	r8, r31
    10dc:	91 2c       	mov	r9, r1
    10de:	f0 2d       	mov	r31, r0
    10e0:	ab 86       	std	Y+11, r10	; 0x0b
    10e2:	0f 2e       	mov	r0, r31
    10e4:	f5 e0       	ldi	r31, 0x05	; 5
    10e6:	af 2e       	mov	r10, r31
    10e8:	f0 2d       	mov	r31, r0

	
    while(1)
    {
		
		message.pt_data = &data0[0]; // point message object to first element of data buffer
    10ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ec:	f6 01       	movw	r30, r12
    10ee:	80 83       	st	Z, r24
    10f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f2:	91 83       	std	Z+1, r25	; 0x01
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    10f4:	d2 01       	movw	r26, r4
    10f6:	1c 92       	st	X, r1
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
    10f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10fa:	f7 01       	movw	r30, r14
    10fc:	80 83       	st	Z, r24
    10fe:	98 89       	ldd	r25, Y+16	; 0x10
    1100:	91 83       	std	Z+1, r25	; 0x01
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    1102:	d3 01       	movw	r26, r6
    1104:	ac 92       	st	X, r10
		message.dlc = 8;			 // Max length of a CAN message.
    1106:	8c 85       	ldd	r24, Y+12	; 0x0c
    1108:	f1 01       	movw	r30, r2
    110a:	80 83       	st	Z, r24
		mob_number = 0;
		
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <can_get_status>
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	09 f4       	brne	.+2      	; 0x111c <main+0x180>
    111a:	50 c0       	rjmp	.+160    	; 0x11bc <main+0x220>
		{
			if(message.status == MOB_RX_COMPLETED)
    111c:	a9 e0       	ldi	r26, 0x09	; 9
    111e:	b1 e0       	ldi	r27, 0x01	; 1
    1120:	8c 91       	ld	r24, X
    1122:	80 32       	cpi	r24, 0x20	; 32
    1124:	a1 f5       	brne	.+104    	; 0x118e <main+0x1f2>
    1126:	f6 01       	movw	r30, r12
    1128:	a0 81       	ld	r26, Z
    112a:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)
				{
					message_arr[i] = *(message.pt_data + i);
    112c:	e9 89       	ldd	r30, Y+17	; 0x11
    112e:	fa 89       	ldd	r31, Y+18	; 0x12
    1130:	8d 91       	ld	r24, X+
    1132:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)
    1134:	0e 17       	cp	r16, r30
    1136:	1f 07       	cpc	r17, r31
    1138:	d9 f7       	brne	.-10     	; 0x1130 <main+0x194>
				{
					message_arr[i] = *(message.pt_data + i);
				}
				
				if ((message_arr[0] == 0xFF) && (message_arr[1] == 0xFF) && (message_arr[2] == 0xFF) && (message_arr[3] == 0xFF)
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	8f 3f       	cpi	r24, 0xFF	; 255
    113e:	09 f5       	brne	.+66     	; 0x1182 <main+0x1e6>
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	8f 3f       	cpi	r24, 0xFF	; 255
    1144:	f1 f4       	brne	.+60     	; 0x1182 <main+0x1e6>
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	8f 3f       	cpi	r24, 0xFF	; 255
    114a:	d9 f4       	brne	.+54     	; 0x1182 <main+0x1e6>
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	8f 3f       	cpi	r24, 0xFF	; 255
    1150:	c1 f4       	brne	.+48     	; 0x1182 <main+0x1e6>
				&& (message_arr[4] == 0xFF) && (message_arr[5] == 0xFF) && (message_arr[6] == 0xFF) && (message_arr[7] == 0xFF))
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	8f 3f       	cpi	r24, 0xFF	; 255
    1156:	a9 f4       	brne	.+42     	; 0x1182 <main+0x1e6>
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	91 f4       	brne	.+36     	; 0x1182 <main+0x1e6>
    115e:	8f 81       	ldd	r24, Y+7	; 0x07
    1160:	8f 3f       	cpi	r24, 0xFF	; 255
    1162:	79 f4       	brne	.+30     	; 0x1182 <main+0x1e6>
    1164:	88 85       	ldd	r24, Y+8	; 0x08
    1166:	8f 3f       	cpi	r24, 0xFF	; 255
    1168:	61 f4       	brne	.+24     	; 0x1182 <main+0x1e6>
				{
					LED_Reg_Write(0x04);	//Toggle LED2 when the appropriate message is received.
    116a:	84 e0       	ldi	r24, 0x04	; 4
    116c:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_Reg_Write>
					delay_ms(500);
    1170:	84 ef       	ldi	r24, 0xF4	; 244
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 9b 09 	call	0x1336	; 0x1336 <delay_ms>
					LED_Reg_Write(0x00);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_Reg_Write>
					send_now = 1;
    117e:	f1 e0       	ldi	r31, 0x01	; 1
    1180:	fb 87       	std	Y+11, r31	; 0x0b
    1182:	e9 89       	ldd	r30, Y+17	; 0x11
    1184:	fa 89       	ldd	r31, Y+18	; 0x12
				}
				for (i = 0; i < 8; i ++)
				{
					message_arr[i] = 0;			// Reset the message array to zero after each message.
    1186:	11 92       	st	Z+, r1
					LED_Reg_Write(0x04);	//Toggle LED2 when the appropriate message is received.
					delay_ms(500);
					LED_Reg_Write(0x00);
					send_now = 1;
				}
				for (i = 0; i < 8; i ++)
    1188:	0e 17       	cp	r16, r30
    118a:	1f 07       	cpc	r17, r31
    118c:	e1 f7       	brne	.-8      	; 0x1186 <main+0x1ea>
				{
					message_arr[i] = 0;			// Reset the message array to zero after each message.
				}				
			}
			message.pt_data = &data0[0]; // point message object to first element of data buffer
    118e:	e4 e2       	ldi	r30, 0x24	; 36
    1190:	f1 e0       	ldi	r31, 0x01	; 1
    1192:	d6 01       	movw	r26, r12
    1194:	ed 93       	st	X+, r30
    1196:	fc 93       	st	X, r31
			message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    1198:	d2 01       	movw	r26, r4
    119a:	1c 92       	st	X, r1
			message.id.std = SUB0_ID0;  // populate ID field with ID Tag
    119c:	84 e1       	ldi	r24, 0x14	; 20
    119e:	f7 01       	movw	r30, r14
    11a0:	80 83       	st	Z, r24
    11a2:	11 82       	std	Z+1, r1	; 0x01
			message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    11a4:	d3 01       	movw	r26, r6
    11a6:	bc 92       	st	X, r11
			message.dlc = 8;			 // Max length of a CAN message.
    11a8:	88 e0       	ldi	r24, 0x08	; 8
    11aa:	f1 01       	movw	r30, r2
    11ac:	80 83       	st	Z, r24
			mob_number = 0;
			
			while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure	
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	0e 94 ad 00 	call	0x15a	; 0x15a <can_cmd>
    11b8:	81 11       	cpse	r24, r1
    11ba:	f9 cf       	rjmp	.-14     	; 0x11ae <main+0x212>
		}
		
			message.pt_data = &data5[0]; // point message object to first element of data buffer
    11bc:	e5 e3       	ldi	r30, 0x35	; 53
    11be:	f1 e0       	ldi	r31, 0x01	; 1
    11c0:	d6 01       	movw	r26, r12
    11c2:	ed 93       	st	X+, r30
    11c4:	fc 93       	st	X, r31
			message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    11c6:	d2 01       	movw	r26, r4
    11c8:	1c 92       	st	X, r1
			message.id.std = SUB0_ID5;  // populate ID field with ID Tag
    11ca:	f7 01       	movw	r30, r14
    11cc:	91 82       	std	Z+1, r9	; 0x01
    11ce:	80 82       	st	Z, r8
			message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    11d0:	d3 01       	movw	r26, r6
    11d2:	bc 92       	st	X, r11
			message.dlc = 8;			 // Max length of a CAN message.
    11d4:	88 e0       	ldi	r24, 0x08	; 8
    11d6:	f1 01       	movw	r30, r2
    11d8:	80 83       	st	Z, r24
			mob_number = 5;
			
			
			if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
    11da:	6b 2d       	mov	r22, r11
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <can_get_status>
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <main+0x24e>
    11e8:	4f c0       	rjmp	.+158    	; 0x1288 <main+0x2ec>
			{
				if(message.status == MOB_RX_COMPLETED)
    11ea:	a9 e0       	ldi	r26, 0x09	; 9
    11ec:	b1 e0       	ldi	r27, 0x01	; 1
    11ee:	8c 91       	ld	r24, X
    11f0:	80 32       	cpi	r24, 0x20	; 32
    11f2:	a1 f5       	brne	.+104    	; 0x125c <main+0x2c0>
    11f4:	f6 01       	movw	r30, r12
    11f6:	a0 81       	ld	r26, Z
    11f8:	b1 81       	ldd	r27, Z+1	; 0x01
				{
					for (i = 0; i < 8; i ++)
					{
						message_arr[i] = *(message.pt_data + i);
    11fa:	e9 89       	ldd	r30, Y+17	; 0x11
    11fc:	fa 89       	ldd	r31, Y+18	; 0x12
    11fe:	8d 91       	ld	r24, X+
    1200:	81 93       	st	Z+, r24
			
			if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
			{
				if(message.status == MOB_RX_COMPLETED)
				{
					for (i = 0; i < 8; i ++)
    1202:	0e 17       	cp	r16, r30
    1204:	1f 07       	cpc	r17, r31
    1206:	d9 f7       	brne	.-10     	; 0x11fe <main+0x262>
					{
						message_arr[i] = *(message.pt_data + i);
					}
					
					if ((message_arr[0] == 0x0F) && (message_arr[1] == 0x0F) && (message_arr[2] == 0x0F) && (message_arr[3] == 0x0F)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	8f 30       	cpi	r24, 0x0F	; 15
    120c:	09 f5       	brne	.+66     	; 0x1250 <main+0x2b4>
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	8f 30       	cpi	r24, 0x0F	; 15
    1212:	f1 f4       	brne	.+60     	; 0x1250 <main+0x2b4>
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	8f 30       	cpi	r24, 0x0F	; 15
    1218:	d9 f4       	brne	.+54     	; 0x1250 <main+0x2b4>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	8f 30       	cpi	r24, 0x0F	; 15
    121e:	c1 f4       	brne	.+48     	; 0x1250 <main+0x2b4>
					&& (message_arr[4] == 0x0F) && (message_arr[5] == 0x0F) && (message_arr[6] == 0x0F) && (message_arr[7] == 0x0F))
    1220:	8d 81       	ldd	r24, Y+5	; 0x05
    1222:	8f 30       	cpi	r24, 0x0F	; 15
    1224:	a9 f4       	brne	.+42     	; 0x1250 <main+0x2b4>
    1226:	8e 81       	ldd	r24, Y+6	; 0x06
    1228:	8f 30       	cpi	r24, 0x0F	; 15
    122a:	91 f4       	brne	.+36     	; 0x1250 <main+0x2b4>
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	8f 30       	cpi	r24, 0x0F	; 15
    1230:	79 f4       	brne	.+30     	; 0x1250 <main+0x2b4>
    1232:	88 85       	ldd	r24, Y+8	; 0x08
    1234:	8f 30       	cpi	r24, 0x0F	; 15
    1236:	61 f4       	brne	.+24     	; 0x1250 <main+0x2b4>
					{
						LED_Reg_Write(0x08);	//Toggle LED3 when housekeeping was requested.
    1238:	88 e0       	ldi	r24, 0x08	; 8
    123a:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_Reg_Write>
						delay_ms(500);
    123e:	84 ef       	ldi	r24, 0xF4	; 244
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 9b 09 	call	0x1336	; 0x1336 <delay_ms>
						LED_Reg_Write(0x00);
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	0e 94 cb 07 	call	0xf96	; 0xf96 <LED_Reg_Write>
						send_now = 1;
    124c:	f1 e0       	ldi	r31, 0x01	; 1
    124e:	fb 87       	std	Y+11, r31	; 0x0b
    1250:	e9 89       	ldd	r30, Y+17	; 0x11
    1252:	fa 89       	ldd	r31, Y+18	; 0x12
					}
					for (i = 0; i < 8; i ++)
					{
						message_arr[i] = 0;			// Reset the message array to zero after each message.
    1254:	11 92       	st	Z+, r1
						LED_Reg_Write(0x08);	//Toggle LED3 when housekeeping was requested.
						delay_ms(500);
						LED_Reg_Write(0x00);
						send_now = 1;
					}
					for (i = 0; i < 8; i ++)
    1256:	0e 17       	cp	r16, r30
    1258:	1f 07       	cpc	r17, r31
    125a:	e1 f7       	brne	.-8      	; 0x1254 <main+0x2b8>
					{
						message_arr[i] = 0;			// Reset the message array to zero after each message.
					}
				}
				message.pt_data = &data5[0]; // point message object to first element of data buffer
    125c:	e5 e3       	ldi	r30, 0x35	; 53
    125e:	f1 e0       	ldi	r31, 0x01	; 1
    1260:	d6 01       	movw	r26, r12
    1262:	ed 93       	st	X+, r30
    1264:	fc 93       	st	X, r31
				message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    1266:	d2 01       	movw	r26, r4
    1268:	1c 92       	st	X, r1
				message.id.std = SUB0_ID5;  // populate ID field with ID Tag
    126a:	f7 01       	movw	r30, r14
    126c:	91 82       	std	Z+1, r9	; 0x01
    126e:	80 82       	st	Z, r8
				message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
    1270:	d3 01       	movw	r26, r6
    1272:	bc 92       	st	X, r11
				message.dlc = 8;			 // Max length of a CAN message.
    1274:	88 e0       	ldi	r24, 0x08	; 8
    1276:	f1 01       	movw	r30, r2
    1278:	80 83       	st	Z, r24
				mob_number = 5;
				
				while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
    127a:	6b 2d       	mov	r22, r11
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	0e 94 ad 00 	call	0x15a	; 0x15a <can_cmd>
    1284:	81 11       	cpse	r24, r1
    1286:	f9 cf       	rjmp	.-14     	; 0x127a <main+0x2de>
			}	
	
		
		/*	Message Object 4  */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    1288:	9b 85       	ldd	r25, Y+11	; 0x0b
    128a:	91 30       	cpi	r25, 0x01	; 1
    128c:	09 f0       	breq	.+2      	; 0x1290 <main+0x2f4>
    128e:	2d cf       	rjmp	.-422    	; 0x10ea <main+0x14e>
		{	
			message.pt_data = &data4[0]; // point message object to first element of data buffer
    1290:	8c e1       	ldi	r24, 0x1C	; 28
    1292:	91 e0       	ldi	r25, 0x01	; 1
    1294:	d6 01       	movw	r26, r12
    1296:	8d 93       	st	X+, r24
    1298:	9c 93       	st	X, r25
			message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
    129a:	f2 01       	movw	r30, r4
    129c:	10 82       	st	Z, r1
			message.id.std = NODE0_ID;  // populate ID field with ID Tag
    129e:	8a e0       	ldi	r24, 0x0A	; 10
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	d7 01       	movw	r26, r14
    12a4:	8d 93       	st	X+, r24
    12a6:	9c 93       	st	X, r25
			message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	f3 01       	movw	r30, r6
    12ac:	80 83       	st	Z, r24
			message.dlc = 8;			 // Max length of a CAN message.
    12ae:	88 e0       	ldi	r24, 0x08	; 8
    12b0:	d1 01       	movw	r26, r2
    12b2:	8c 93       	st	X, r24
    12b4:	ec e1       	ldi	r30, 0x1C	; 28
    12b6:	f1 e0       	ldi	r31, 0x01	; 1
    12b8:	84 e2       	ldi	r24, 0x24	; 36
    12ba:	91 e0       	ldi	r25, 0x01	; 1
			mob_number = 4;
		
			for (i = 0; i < 8; i ++)
			{
				data4[i] = 0xAB;		// Message to be sent back to the OBC.
    12bc:	2b ea       	ldi	r18, 0xAB	; 171
    12be:	21 93       	st	Z+, r18
			message.id.std = NODE0_ID;  // populate ID field with ID Tag
			message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
			message.dlc = 8;			 // Max length of a CAN message.
			mob_number = 4;
		
			for (i = 0; i < 8; i ++)
    12c0:	e8 17       	cp	r30, r24
    12c2:	f9 07       	cpc	r31, r25
    12c4:	e1 f7       	brne	.-8      	; 0x12be <main+0x322>
			{
				data4[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			
			while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
    12c6:	64 e0       	ldi	r22, 0x04	; 4
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	0e 94 ad 00 	call	0x15a	; 0x15a <can_cmd>
    12d0:	81 11       	cpse	r24, r1
    12d2:	f9 cf       	rjmp	.-14     	; 0x12c6 <main+0x32a>

			while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
    12d4:	64 e0       	ldi	r22, 0x04	; 4
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <can_get_status>
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	c9 f3       	breq	.-14     	; 0x12d4 <main+0x338>
    12e2:	ed ce       	rjmp	.-550    	; 0x10be <main+0x122>

000012e4 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    12e4:	1f 92       	push	r1
    12e6:	0f 92       	push	r0
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	0f 92       	push	r0
    12ec:	11 24       	eor	r1, r1
    12ee:	8f 93       	push	r24
	CTC_flag = 1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 93 2c 01 	sts	0x012C, r24
}
    12f6:	8f 91       	pop	r24
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    1302:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    1306:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    130a:	8a e0       	ldi	r24, 0x0A	; 10
    130c:	80 93 81 00 	sts	0x0081, r24
    1310:	08 95       	ret

00001312 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    1312:	10 92 2c 01 	sts	0x012C, r1
	TCNT1 = 0x0000; //Clear timer
    1316:	10 92 85 00 	sts	0x0085, r1
    131a:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    131e:	90 93 89 00 	sts	0x0089, r25
    1322:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    132c:	80 91 2c 01 	lds	r24, 0x012C
    1330:	88 23       	and	r24, r24
    1332:	e1 f3       	breq	.-8      	; 0x132c <delay_us+0x1a>
}
    1334:	08 95       	ret

00001336 <delay_ms>:

void delay_ms(uint16_t ms) {
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	51 f0       	breq	.+20     	; 0x1358 <delay_ms+0x22>
    1344:	c0 e0       	ldi	r28, 0x00	; 0
    1346:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    1348:	88 ee       	ldi	r24, 0xE8	; 232
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	0e 94 89 09 	call	0x1312	; 0x1312 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    1350:	21 96       	adiw	r28, 0x01	; 1
    1352:	c0 17       	cp	r28, r16
    1354:	d1 07       	cpc	r29, r17
    1356:	c1 f7       	brne	.-16     	; 0x1348 <delay_ms+0x12>
		delay_us(1000);
	}
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <__tablejump2__>:
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31

00001366 <__tablejump__>:
    1366:	05 90       	lpm	r0, Z+
    1368:	f4 91       	lpm	r31, Z
    136a:	e0 2d       	mov	r30, r0
    136c:	09 94       	ijmp

0000136e <_exit>:
    136e:	f8 94       	cli

00001370 <__stop_program>:
    1370:	ff cf       	rjmp	.-2      	; 0x1370 <__stop_program>
