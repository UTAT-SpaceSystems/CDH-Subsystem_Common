
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fbc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000205  00800100  00800100  00002030  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000002a8  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000033c0  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000fde  00000000  00000000  000056c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000011b5  00000000  00000000  000066a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000005a0  00000000  00000000  0000785c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000a49  00000000  00000000  00007dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001f20  00000000  00000000  00008845  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000238  00000000  00000000  0000a765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
       c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__vector_12>
      34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      7c:	c9 00       	.word	0x00c9	; ????
      7e:	cc 00       	.word	0x00cc	; ????
      80:	d9 00       	.word	0x00d9	; ????
      82:	3e 01       	movw	r6, r28
      84:	dc 00       	.word	0x00dc	; ????
      86:	3e 01       	movw	r6, r28
      88:	e9 00       	.word	0x00e9	; ????
      8a:	3e 01       	movw	r6, r28
      8c:	f6 00       	.word	0x00f6	; ????
      8e:	03 01       	movw	r0, r6
      90:	10 01       	movw	r2, r0
      92:	1d 01       	movw	r2, r26
      94:	20 01       	movw	r4, r0
      96:	3e 01       	movw	r6, r28
      98:	2c 01       	movw	r4, r24
      9a:	95 04       	cpc	r9, r5
      9c:	27 05       	cpc	r18, r7
      9e:	b1 05       	cpc	r27, r1
      a0:	25 06       	cpc	r2, r21
      a2:	65 06       	cpc	r6, r21
      a4:	e1 06       	cpc	r14, r17
      a6:	5e 07       	cpc	r21, r30
      a8:	fb 07       	cpc	r31, r27
      aa:	a1 08       	sbc	r10, r1
      ac:	8f 04       	cpc	r8, r15
      ae:	aa 09       	sbc	r26, r10

000000b0 <__ctors_end>:
      b0:	11 24       	eor	r1, r1
      b2:	1f be       	out	0x3f, r1	; 63
      b4:	cf ef       	ldi	r28, 0xFF	; 255
      b6:	d8 e0       	ldi	r29, 0x08	; 8
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_clear_bss>:
      bc:	23 e0       	ldi	r18, 0x03	; 3
      be:	a0 e0       	ldi	r26, 0x00	; 0
      c0:	b1 e0       	ldi	r27, 0x01	; 1
      c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
      c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
      c6:	a5 30       	cpi	r26, 0x05	; 5
      c8:	b2 07       	cpc	r27, r18
      ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
      cc:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <main>
      d0:	0c 94 dc 0f 	jmp	0x1fb8	; 0x1fb8 <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      d8:	82 e0       	ldi	r24, 0x02	; 2
      da:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      de:	82 ee       	ldi	r24, 0xE2	; 226
      e0:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      e4:	80 ea       	ldi	r24, 0xA0	; 160
      e6:	80 93 7b 00 	sts	0x007B, r24
      ea:	08 95       	ret

000000ec <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      ec:	e8 e7       	ldi	r30, 0x78	; 120
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	20 81       	ld	r18, Z
      f2:	dc 01       	movw	r26, r24
      f4:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
      f6:	21 81       	ldd	r18, Z+1	; 0x01
      f8:	11 96       	adiw	r26, 0x01	; 1
      fa:	2c 93       	st	X, r18
      fc:	08 95       	ret

000000fe <adc_set_pin>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = ADC_num;
	*ptr = x;
      fe:	80 93 7c 00 	sts	0x007C, r24
     102:	08 95       	ret

00000104 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     104:	22 e3       	ldi	r18, 0x32	; 50
     106:	31 e0       	ldi	r19, 0x01	; 1
     108:	30 93 5d 01 	sts	0x015D, r19
     10c:	20 93 5c 01 	sts	0x015C, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     110:	10 92 60 01 	sts	0x0160, r1
	message.id.std = id;  // populate ID field with ID Tag
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	70 93 58 01 	sts	0x0158, r23
     11a:	60 93 57 01 	sts	0x0157, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     11e:	22 e0       	ldi	r18, 0x02	; 2
     120:	20 93 56 01 	sts	0x0156, r18
	message.dlc = 8;			 // Max length of a CAN message.
     124:	28 e0       	ldi	r18, 0x08	; 8
     126:	20 93 5b 01 	sts	0x015B, r18
	mob_number = 4;
     12a:	24 e0       	ldi	r18, 0x04	; 4
     12c:	20 93 50 02 	sts	0x0250, r18
     130:	dc 01       	movw	r26, r24
     132:	e2 e3       	ldi	r30, 0x32	; 50
     134:	f1 e0       	ldi	r31, 0x01	; 1
     136:	8a e3       	ldi	r24, 0x3A	; 58
     138:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     13a:	2d 91       	ld	r18, X+
     13c:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     13e:	e8 17       	cp	r30, r24
     140:	f9 07       	cpc	r31, r25
     142:	d9 f7       	brne	.-10     	; 0x13a <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     144:	60 91 50 02 	lds	r22, 0x0250
     148:	85 e5       	ldi	r24, 0x55	; 85
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     150:	81 11       	cpse	r24, r1
     152:	f8 cf       	rjmp	.-16     	; 0x144 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     154:	60 91 50 02 	lds	r22, 0x0250
     158:	85 e5       	ldi	r24, 0x55	; 85
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <can_get_status>
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	c1 f3       	breq	.-16     	; 0x154 <can_send_message+0x50>

	return;
}
     164:	08 95       	ret

00000166 <decode_command>:

void decode_command(uint8_t* command_array)
{		
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	dc 01       	movw	r26, r24
	uint8_t i, command  = *(command_array + 5);
	uint8_t req_by = (*(command_array + 7)) >> 4;
     16c:	17 96       	adiw	r26, 0x07	; 7
     16e:	2c 91       	ld	r18, X
     170:	17 97       	sbiw	r26, 0x07	; 7
     172:	22 95       	swap	r18
     174:	2f 70       	andi	r18, 0x0F	; 15

	switch(command)
     176:	15 96       	adiw	r26, 0x05	; 5
     178:	4c 91       	ld	r20, X
     17a:	15 97       	sbiw	r26, 0x05	; 5
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	fa 01       	movw	r30, r20
     180:	31 97       	sbiw	r30, 0x01	; 1
     182:	ef 30       	cpi	r30, 0x0F	; 15
     184:	f1 05       	cpc	r31, r1
     186:	08 f0       	brcs	.+2      	; 0x18a <decode_command+0x24>
     188:	79 c0       	rjmp	.+242    	; 0x27c <decode_command+0x116>
     18a:	e2 5c       	subi	r30, 0xC2	; 194
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__tablejump2__>
		case REQ_RESPONSE :
			if(SELF_ID != 1)
			{
				LED_toggle(LED3);
			}
			send_now = 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 72 01 	sts	0x0172, r24
		case REQ_DATA :
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
			send_data = 1;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	80 93 36 02 	sts	0x0236, r24
     19e:	ed 01       	movw	r28, r26
     1a0:	e1 e6       	ldi	r30, 0x61	; 97
     1a2:	f1 e0       	ldi	r31, 0x01	; 1
     1a4:	89 e6       	ldi	r24, 0x69	; 105
     1a6:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     1a8:	39 91       	ld	r19, Y+
     1aa:	31 93       	st	Z+, r19
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
			send_data = 1;
			for (i = 0; i < 8; i ++)
     1ac:	e8 17       	cp	r30, r24
     1ae:	f9 07       	cpc	r31, r25
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <decode_command+0x42>
		case REQ_HK :
			if(SELF_ID != 1)
			{
				LED_toggle(LED2);
			}
			send_hk = 1;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	80 93 14 02 	sts	0x0214, r24
		case REQ_READ:
			read_response = 1;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 7c 01 	sts	0x017C, r24
     1be:	ed 01       	movw	r28, r26
     1c0:	ec ef       	ldi	r30, 0xFC	; 252
     1c2:	f2 e0       	ldi	r31, 0x02	; 2
     1c4:	84 e0       	ldi	r24, 0x04	; 4
     1c6:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     1c8:	39 91       	ld	r19, Y+
     1ca:	31 93       	st	Z+, r19
				LED_toggle(LED2);
			}
			send_hk = 1;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1cc:	e8 17       	cp	r30, r24
     1ce:	f9 07       	cpc	r31, r25
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <decode_command+0x62>
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 48 01 	sts	0x0148, r24
     1d8:	ed 01       	movw	r28, r26
     1da:	e1 e0       	ldi	r30, 0x01	; 1
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	89 e0       	ldi	r24, 0x09	; 9
     1e0:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     1e2:	39 91       	ld	r19, Y+
     1e4:	31 93       	st	Z+, r19
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     1e6:	e8 17       	cp	r30, r24
     1e8:	f9 07       	cpc	r31, r25
     1ea:	d9 f7       	brne	.-10     	; 0x1e2 <decode_command+0x7c>
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 33 02 	sts	0x0233, r24
     1f2:	ed 01       	movw	r28, r26
     1f4:	e9 e4       	ldi	r30, 0x49	; 73
     1f6:	f1 e0       	ldi	r31, 0x01	; 1
     1f8:	81 e5       	ldi	r24, 0x51	; 81
     1fa:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				sensh_arr[i] = *(command_array + i);
     1fc:	39 91       	ld	r19, Y+
     1fe:	31 93       	st	Z+, r19
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
			for (i = 0; i < 8; i ++)
     200:	e8 17       	cp	r30, r24
     202:	f9 07       	cpc	r31, r25
     204:	d9 f7       	brne	.-10     	; 0x1fc <decode_command+0x96>
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 37 02 	sts	0x0237, r24
     20c:	ed 01       	movw	r28, r26
     20e:	e0 e6       	ldi	r30, 0x60	; 96
     210:	f2 e0       	ldi	r31, 0x02	; 2
     212:	88 e6       	ldi	r24, 0x68	; 104
     214:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				sensl_arr[i] = *(command_array + i);
     216:	39 91       	ld	r19, Y+
     218:	31 93       	st	Z+, r19
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
			for (i = 0; i < 8; i ++)
     21a:	e8 17       	cp	r30, r24
     21c:	f9 07       	cpc	r31, r25
     21e:	d9 f7       	brne	.-10     	; 0x216 <decode_command+0xb0>
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_var = 1;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	80 93 24 01 	sts	0x0124, r24
     226:	ed 01       	movw	r28, r26
     228:	ec e3       	ldi	r30, 0x3C	; 60
     22a:	f1 e0       	ldi	r31, 0x01	; 1
     22c:	84 e4       	ldi	r24, 0x44	; 68
     22e:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				setv_arr[i] = *(command_array + i);
     230:	39 91       	ld	r19, Y+
     232:	31 93       	st	Z+, r19
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_var = 1;
			for (i = 0; i < 8; i ++)
     234:	e8 17       	cp	r30, r24
     236:	f9 07       	cpc	r31, r25
     238:	d9 f7       	brne	.-10     	; 0x230 <decode_command+0xca>
			{
				setv_arr[i] = *(command_array + i);
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
     23a:	8c 91       	ld	r24, X
     23c:	80 93 6f 01 	sts	0x016F, r24
		case SEND_TM:
			new_tm_msgf = 1;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 73 01 	sts	0x0173, r24
     246:	e8 e3       	ldi	r30, 0x38	; 56
     248:	f2 e0       	ldi	r31, 0x02	; 2
     24a:	80 e4       	ldi	r24, 0x40	; 64
     24c:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				new_tm_msg[i] = *(command_array + i);
     24e:	3d 91       	ld	r19, X+
     250:	31 93       	st	Z+, r19
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
		case SEND_TM:
			new_tm_msgf = 1;
			for (i = 0; i < 8; i ++)
     252:	e8 17       	cp	r30, r24
     254:	f9 07       	cpc	r31, r25
     256:	d9 f7       	brne	.-10     	; 0x24e <decode_command+0xe8>
			{
				new_tm_msg[i] = *(command_array + i);
			}
		case TM_PACKET_READY:
			send_arr[7] = (SELF_ID << 4)|req_by;			// Let the OBC know that you are ready to receive TM packet.
     258:	20 61       	ori	r18, 0x10	; 16
     25a:	20 93 2d 01 	sts	0x012D, r18
			send_arr[6] = MT_COM;
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	80 93 2c 01 	sts	0x012C, r24
			send_arr[5] = OK_START_TM_PACKET;
     264:	80 e1       	ldi	r24, 0x10	; 16
     266:	80 93 2b 01 	sts	0x012B, r24
			send_arr[4] = CURRENT_MINUTE;
     26a:	80 91 6f 01 	lds	r24, 0x016F
     26e:	80 93 2a 01 	sts	0x012A, r24
			can_send_message(&(send_arr[0]), CAN1_MB7);
     272:	61 e1       	ldi	r22, 0x11	; 17
     274:	86 e2       	ldi	r24, 0x26	; 38
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	0e 94 82 00 	call	0x104	; 0x104 <can_send_message>
		default:
			return;
	}
	return;
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <set_up_msg>:

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     282:	10 92 60 01 	sts	0x0160, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     286:	95 e0       	ldi	r25, 0x05	; 5
     288:	90 93 56 01 	sts	0x0156, r25
	message.dlc = 8;			 // Max length of a CAN message.
     28c:	98 e0       	ldi	r25, 0x08	; 8
     28e:	90 93 5b 01 	sts	0x015B, r25
	mob_number = mailbox;
     292:	80 93 50 02 	sts	0x0250, r24
	
	if(mailbox == 0)
     296:	81 11       	cpse	r24, r1
     298:	0e c0       	rjmp	.+28     	; 0x2b6 <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     29a:	8c e0       	ldi	r24, 0x0C	; 12
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	90 93 5d 01 	sts	0x015D, r25
     2a2:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     2a6:	80 91 23 02 	lds	r24, 0x0223
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	90 93 58 01 	sts	0x0158, r25
     2b0:	80 93 57 01 	sts	0x0157, r24
		return;
     2b4:	08 95       	ret
	}
	if(mailbox == 1)
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	71 f4       	brne	.+28     	; 0x2d6 <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     2ba:	84 e1       	ldi	r24, 0x14	; 20
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	90 93 5d 01 	sts	0x015D, r25
     2c2:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = id_array[1];
     2c6:	80 91 24 02 	lds	r24, 0x0224
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	90 93 58 01 	sts	0x0158, r25
     2d0:	80 93 57 01 	sts	0x0157, r24
		return;
     2d4:	08 95       	ret
	}
	if(mailbox == 2)
     2d6:	82 30       	cpi	r24, 0x02	; 2
     2d8:	71 f4       	brne	.+28     	; 0x2f6 <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     2da:	8c e1       	ldi	r24, 0x1C	; 28
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	90 93 5d 01 	sts	0x015D, r25
     2e2:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = id_array[2];
     2e6:	80 91 25 02 	lds	r24, 0x0225
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	90 93 58 01 	sts	0x0158, r25
     2f0:	80 93 57 01 	sts	0x0157, r24
		return;
     2f4:	08 95       	ret
	}
	if(mailbox == 3)
     2f6:	83 30       	cpi	r24, 0x03	; 3
     2f8:	71 f4       	brne	.+28     	; 0x316 <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     2fa:	8b e2       	ldi	r24, 0x2B	; 43
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	90 93 5d 01 	sts	0x015D, r25
     302:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = id_array[3];
     306:	80 91 26 02 	lds	r24, 0x0226
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	90 93 58 01 	sts	0x0158, r25
     310:	80 93 57 01 	sts	0x0157, r24
		return;
     314:	08 95       	ret
	}
	if(mailbox == 5)
     316:	85 30       	cpi	r24, 0x05	; 5
     318:	69 f4       	brne	.+26     	; 0x334 <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     31a:	84 e4       	ldi	r24, 0x44	; 68
     31c:	92 e0       	ldi	r25, 0x02	; 2
     31e:	90 93 5d 01 	sts	0x015D, r25
     322:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = id_array[5];
     326:	80 91 28 02 	lds	r24, 0x0228
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	90 93 58 01 	sts	0x0158, r25
     330:	80 93 57 01 	sts	0x0157, r24
     334:	08 95       	ret

00000336 <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     336:	81 11       	cpse	r24, r1
     338:	20 c0       	rjmp	.+64     	; 0x37a <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     33a:	10 92 60 01 	sts	0x0160, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     33e:	85 e0       	ldi	r24, 0x05	; 5
     340:	80 93 56 01 	sts	0x0156, r24
		message.dlc = 8;			 // Max length of a CAN message.
     344:	88 e0       	ldi	r24, 0x08	; 8
     346:	80 93 5b 01 	sts	0x015B, r24
		mob_number = mailbox;
     34a:	10 92 50 02 	sts	0x0250, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     34e:	8c e0       	ldi	r24, 0x0C	; 12
     350:	92 e0       	ldi	r25, 0x02	; 2
     352:	90 93 5d 01 	sts	0x015D, r25
     356:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     35a:	80 91 23 02 	lds	r24, 0x0223
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	90 93 58 01 	sts	0x0158, r25
     364:	80 93 57 01 	sts	0x0157, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     368:	60 91 50 02 	lds	r22, 0x0250
     36c:	85 e5       	ldi	r24, 0x55	; 85
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     374:	81 11       	cpse	r24, r1
     376:	f8 cf       	rjmp	.-16     	; 0x368 <clean_up_msg+0x32>
     378:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	01 f5       	brne	.+64     	; 0x3be <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     37e:	10 92 60 01 	sts	0x0160, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     382:	85 e0       	ldi	r24, 0x05	; 5
     384:	80 93 56 01 	sts	0x0156, r24
		message.dlc = 8;			 // Max length of a CAN message.
     388:	88 e0       	ldi	r24, 0x08	; 8
     38a:	80 93 5b 01 	sts	0x015B, r24
		mob_number = mailbox;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	80 93 50 02 	sts	0x0250, r24
		message.pt_data = &data1[0];
     394:	84 e1       	ldi	r24, 0x14	; 20
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	90 93 5d 01 	sts	0x015D, r25
     39c:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = SUB0_ID1;
     3a0:	85 e1       	ldi	r24, 0x15	; 21
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	90 93 58 01 	sts	0x0158, r25
     3a8:	80 93 57 01 	sts	0x0157, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3ac:	60 91 50 02 	lds	r22, 0x0250
     3b0:	85 e5       	ldi	r24, 0x55	; 85
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     3b8:	81 11       	cpse	r24, r1
     3ba:	f8 cf       	rjmp	.-16     	; 0x3ac <clean_up_msg+0x76>
     3bc:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	09 f5       	brne	.+66     	; 0x404 <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3c2:	10 92 60 01 	sts	0x0160, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3c6:	85 e0       	ldi	r24, 0x05	; 5
     3c8:	80 93 56 01 	sts	0x0156, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3cc:	88 e0       	ldi	r24, 0x08	; 8
     3ce:	80 93 5b 01 	sts	0x015B, r24
		mob_number = mailbox;
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	80 93 50 02 	sts	0x0250, r24
		message.pt_data = &data2[0];
     3d8:	8c e1       	ldi	r24, 0x1C	; 28
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	90 93 5d 01 	sts	0x015D, r25
     3e0:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = id_array[2];
     3e4:	80 91 25 02 	lds	r24, 0x0225
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	90 93 58 01 	sts	0x0158, r25
     3ee:	80 93 57 01 	sts	0x0157, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3f2:	60 91 50 02 	lds	r22, 0x0250
     3f6:	85 e5       	ldi	r24, 0x55	; 85
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     3fe:	81 11       	cpse	r24, r1
     400:	f8 cf       	rjmp	.-16     	; 0x3f2 <clean_up_msg+0xbc>
     402:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     404:	83 30       	cpi	r24, 0x03	; 3
     406:	09 f5       	brne	.+66     	; 0x44a <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     408:	10 92 60 01 	sts	0x0160, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     40c:	85 e0       	ldi	r24, 0x05	; 5
     40e:	80 93 56 01 	sts	0x0156, r24
		message.dlc = 8;			 // Max length of a CAN message.
     412:	88 e0       	ldi	r24, 0x08	; 8
     414:	80 93 5b 01 	sts	0x015B, r24
		mob_number = mailbox;
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	80 93 50 02 	sts	0x0250, r24
		message.pt_data = &data3[0];
     41e:	8b e2       	ldi	r24, 0x2B	; 43
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	90 93 5d 01 	sts	0x015D, r25
     426:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = id_array[3];
     42a:	80 91 26 02 	lds	r24, 0x0226
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	90 93 58 01 	sts	0x0158, r25
     434:	80 93 57 01 	sts	0x0157, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     438:	60 91 50 02 	lds	r22, 0x0250
     43c:	85 e5       	ldi	r24, 0x55	; 85
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     444:	81 11       	cpse	r24, r1
     446:	f8 cf       	rjmp	.-16     	; 0x438 <clean_up_msg+0x102>
     448:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     44a:	85 30       	cpi	r24, 0x05	; 5
     44c:	f1 f4       	brne	.+60     	; 0x48a <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     44e:	10 92 60 01 	sts	0x0160, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     452:	80 93 56 01 	sts	0x0156, r24
		message.dlc = 8;			 // Max length of a CAN message.
     456:	98 e0       	ldi	r25, 0x08	; 8
     458:	90 93 5b 01 	sts	0x015B, r25
		mob_number = mailbox;
     45c:	80 93 50 02 	sts	0x0250, r24
		message.pt_data = &data5[0];
     460:	84 e4       	ldi	r24, 0x44	; 68
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	90 93 5d 01 	sts	0x015D, r25
     468:	80 93 5c 01 	sts	0x015C, r24
		message.id.std = id_array[5];
     46c:	80 91 28 02 	lds	r24, 0x0228
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	90 93 58 01 	sts	0x0158, r25
     476:	80 93 57 01 	sts	0x0157, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     47a:	60 91 50 02 	lds	r22, 0x0250
     47e:	85 e5       	ldi	r24, 0x55	; 85
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     486:	81 11       	cpse	r24, r1
     488:	f8 cf       	rjmp	.-16     	; 0x47a <clean_up_msg+0x144>
     48a:	08 95       	ret

0000048c <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     490:	85 e0       	ldi	r24, 0x05	; 5
     492:	0e 94 41 01 	call	0x282	; 0x282 <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     496:	60 91 50 02 	lds	r22, 0x0250
     49a:	85 e5       	ldi	r24, 0x55	; 85
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <can_get_status>
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	11 f1       	breq	.+68     	; 0x4ea <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     4a6:	80 91 5e 01 	lds	r24, 0x015E
     4aa:	80 32       	cpi	r24, 0x20	; 32
     4ac:	d9 f4       	brne	.+54     	; 0x4e4 <can_check_housekeep+0x58>
     4ae:	a0 91 5c 01 	lds	r26, 0x015C
     4b2:	b0 91 5d 01 	lds	r27, 0x015D
     4b6:	c3 e2       	ldi	r28, 0x23	; 35
     4b8:	d2 e0       	ldi	r29, 0x02	; 2
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     4ba:	eb e1       	ldi	r30, 0x1B	; 27
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
     4be:	8d 91       	ld	r24, X+
     4c0:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     4c2:	ec 17       	cp	r30, r28
     4c4:	fd 07       	cpc	r31, r29
     4c6:	d9 f7       	brne	.-10     	; 0x4be <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     4c8:	80 91 21 02 	lds	r24, 0x0221
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	21 f4       	brne	.+8      	; 0x4d8 <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     4d0:	8b e1       	ldi	r24, 0x1B	; 27
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	0e 94 b3 00 	call	0x166	; 0x166 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     4d8:	eb e1       	ldi	r30, 0x1B	; 27
     4da:	f2 e0       	ldi	r31, 0x02	; 2
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     4dc:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     4de:	ec 17       	cp	r30, r28
     4e0:	fd 07       	cpc	r31, r29
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     4e4:	85 e0       	ldi	r24, 0x05	; 5
     4e6:	0e 94 9b 01 	call	0x336	; 0x336 <clean_up_msg>
	}	
	return;
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
     4f0:	9f 92       	push	r9
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     506:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     508:	0e e5       	ldi	r16, 0x5E	; 94
     50a:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     50c:	0f 2e       	mov	r0, r31
     50e:	fc e5       	ldi	r31, 0x5C	; 92
     510:	af 2e       	mov	r10, r31
     512:	f1 e0       	ldi	r31, 0x01	; 1
     514:	bf 2e       	mov	r11, r31
     516:	f0 2d       	mov	r31, r0
     518:	c3 e2       	ldi	r28, 0x23	; 35
     51a:	d2 e0       	ldi	r29, 0x02	; 2
     51c:	0f 2e       	mov	r0, r31
     51e:	fb e1       	ldi	r31, 0x1B	; 27
     520:	ef 2e       	mov	r14, r31
     522:	f2 e0       	ldi	r31, 0x02	; 2
     524:	ff 2e       	mov	r15, r31
     526:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     528:	0f 2e       	mov	r0, r31
     52a:	f1 e2       	ldi	r31, 0x21	; 33
     52c:	cf 2e       	mov	r12, r31
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	df 2e       	mov	r13, r31
     532:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     534:	89 2d       	mov	r24, r9
     536:	0e 94 41 01 	call	0x282	; 0x282 <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     53a:	60 91 50 02 	lds	r22, 0x0250
     53e:	85 e5       	ldi	r24, 0x55	; 85
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 77 0a 	call	0x14ee	; 0x14ee <can_get_status>
     546:	81 30       	cpi	r24, 0x01	; 1
     548:	e1 f0       	breq	.+56     	; 0x582 <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     54a:	f8 01       	movw	r30, r16
     54c:	80 81       	ld	r24, Z
     54e:	80 32       	cpi	r24, 0x20	; 32
     550:	a9 f4       	brne	.+42     	; 0x57c <can_check_general+0x8c>
     552:	f5 01       	movw	r30, r10
     554:	a0 81       	ld	r26, Z
     556:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     558:	f7 01       	movw	r30, r14
     55a:	8d 91       	ld	r24, X+
     55c:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     55e:	ec 17       	cp	r30, r28
     560:	fd 07       	cpc	r31, r29
     562:	d9 f7       	brne	.-10     	; 0x55a <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     564:	f6 01       	movw	r30, r12
     566:	80 81       	ld	r24, Z
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	19 f4       	brne	.+6      	; 0x572 <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     56c:	c7 01       	movw	r24, r14
     56e:	0e 94 b3 00 	call	0x166	; 0x166 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     572:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     574:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     576:	ec 17       	cp	r30, r28
     578:	fd 07       	cpc	r31, r29
     57a:	e1 f7       	brne	.-8      	; 0x574 <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     57c:	89 2d       	mov	r24, r9
     57e:	0e 94 9b 01 	call	0x336	; 0x336 <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     582:	93 94       	inc	r9
     584:	f4 e0       	ldi	r31, 0x04	; 4
     586:	9f 12       	cpse	r9, r31
     588:	d5 cf       	rjmp	.-86     	; 0x534 <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     58a:	0e 94 46 02 	call	0x48c	; 0x48c <can_check_housekeep>
	
	return;
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	ef 90       	pop	r14
     59a:	df 90       	pop	r13
     59c:	cf 90       	pop	r12
     59e:	bf 90       	pop	r11
     5a0:	af 90       	pop	r10
     5a2:	9f 90       	pop	r9
     5a4:	08 95       	ret

000005a6 <can_init_mobs>:
/*		This function initializes our can message objects with their ID	*/
/*		and sets whether or not they are in transmit mode or receive.	*/
/************************************************************************/

void can_init_mobs(void)
{
     5a6:	8f 92       	push	r8
     5a8:	9f 92       	push	r9
     5aa:	bf 92       	push	r11
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
		id_array[5] = SUB0_ID5;
	}
	
	if(SELF_ID == 1)
	{
		id_array[0] = SUB1_ID0;
     5bc:	8a e1       	ldi	r24, 0x1A	; 26
     5be:	80 93 23 02 	sts	0x0223, r24
		id_array[1] = SUB1_ID1;
     5c2:	8b e1       	ldi	r24, 0x1B	; 27
     5c4:	80 93 24 02 	sts	0x0224, r24
		id_array[2] = SUB1_ID2;
     5c8:	8c e1       	ldi	r24, 0x1C	; 28
     5ca:	80 93 25 02 	sts	0x0225, r24
		id_array[3] = SUB1_ID3;
     5ce:	8d e1       	ldi	r24, 0x1D	; 29
     5d0:	80 93 26 02 	sts	0x0226, r24
		id_array[4] = SUB1_ID4;
     5d4:	8e e1       	ldi	r24, 0x1E	; 30
     5d6:	80 93 27 02 	sts	0x0227, r24
		id_array[5] = SUB1_ID5;
     5da:	8f e1       	ldi	r24, 0x1F	; 31
     5dc:	80 93 28 02 	sts	0x0228, r24
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     5e0:	8c e0       	ldi	r24, 0x0C	; 12
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	90 93 5d 01 	sts	0x015D, r25
     5e8:	80 93 5c 01 	sts	0x015C, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     5ec:	10 92 60 01 	sts	0x0160, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     5f0:	8a e1       	ldi	r24, 0x1A	; 26
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	90 93 58 01 	sts	0x0158, r25
     5f8:	80 93 57 01 	sts	0x0157, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     5fc:	85 e0       	ldi	r24, 0x05	; 5
     5fe:	80 93 56 01 	sts	0x0156, r24
	message.dlc = 8;			 // Max length of a CAN message.
     602:	88 e0       	ldi	r24, 0x08	; 8
     604:	80 93 5b 01 	sts	0x015B, r24
	mob_number = 0;
     608:	10 92 50 02 	sts	0x0250, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     60c:	60 91 50 02 	lds	r22, 0x0250
     610:	85 e5       	ldi	r24, 0x55	; 85
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     618:	81 11       	cpse	r24, r1
     61a:	f8 cf       	rjmp	.-16     	; 0x60c <can_init_mobs+0x66>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     61c:	84 e1       	ldi	r24, 0x14	; 20
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	90 93 5d 01 	sts	0x015D, r25
     624:	80 93 5c 01 	sts	0x015C, r24
	message.ctrl.ide = 0;
     628:	10 92 60 01 	sts	0x0160, r1
	message.id.std = id_array[1];
     62c:	80 91 24 02 	lds	r24, 0x0224
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	90 93 58 01 	sts	0x0158, r25
     636:	80 93 57 01 	sts	0x0157, r24
	message.cmd = CMD_RX_DATA;
     63a:	85 e0       	ldi	r24, 0x05	; 5
     63c:	80 93 56 01 	sts	0x0156, r24
	message.dlc = 8;
     640:	88 e0       	ldi	r24, 0x08	; 8
     642:	80 93 5b 01 	sts	0x015B, r24
	mob_number = 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	80 93 50 02 	sts	0x0250, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     64c:	60 91 50 02 	lds	r22, 0x0250
     650:	85 e5       	ldi	r24, 0x55	; 85
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     658:	81 11       	cpse	r24, r1
     65a:	f8 cf       	rjmp	.-16     	; 0x64c <can_init_mobs+0xa6>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     65c:	8c e1       	ldi	r24, 0x1C	; 28
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	90 93 5d 01 	sts	0x015D, r25
     664:	80 93 5c 01 	sts	0x015C, r24
	message.ctrl.ide = 0;
     668:	10 92 60 01 	sts	0x0160, r1
	message.id.std = id_array[2];
     66c:	80 91 25 02 	lds	r24, 0x0225
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	90 93 58 01 	sts	0x0158, r25
     676:	80 93 57 01 	sts	0x0157, r24
	message.cmd = CMD_RX_DATA;
     67a:	85 e0       	ldi	r24, 0x05	; 5
     67c:	80 93 56 01 	sts	0x0156, r24
	message.dlc = 8;
     680:	88 e0       	ldi	r24, 0x08	; 8
     682:	80 93 5b 01 	sts	0x015B, r24
	mob_number = 2;
     686:	82 e0       	ldi	r24, 0x02	; 2
     688:	80 93 50 02 	sts	0x0250, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     68c:	60 91 50 02 	lds	r22, 0x0250
     690:	85 e5       	ldi	r24, 0x55	; 85
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     698:	81 11       	cpse	r24, r1
     69a:	f8 cf       	rjmp	.-16     	; 0x68c <can_init_mobs+0xe6>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     69c:	8b e2       	ldi	r24, 0x2B	; 43
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	90 93 5d 01 	sts	0x015D, r25
     6a4:	80 93 5c 01 	sts	0x015C, r24
	message.ctrl.ide = 0;
     6a8:	10 92 60 01 	sts	0x0160, r1
	message.id.std = id_array[3];
     6ac:	80 91 26 02 	lds	r24, 0x0226
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	90 93 58 01 	sts	0x0158, r25
     6b6:	80 93 57 01 	sts	0x0157, r24
	message.cmd = CMD_RX_DATA;
     6ba:	85 e0       	ldi	r24, 0x05	; 5
     6bc:	80 93 56 01 	sts	0x0156, r24
	message.dlc = 8;
     6c0:	88 e0       	ldi	r24, 0x08	; 8
     6c2:	80 93 5b 01 	sts	0x015B, r24
	mob_number = 3;
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	80 93 50 02 	sts	0x0250, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     6cc:	60 91 50 02 	lds	r22, 0x0250
     6d0:	85 e5       	ldi	r24, 0x55	; 85
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     6d8:	81 11       	cpse	r24, r1
     6da:	f8 cf       	rjmp	.-16     	; 0x6cc <can_init_mobs+0x126>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     6dc:	84 e4       	ldi	r24, 0x44	; 68
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	90 93 5d 01 	sts	0x015D, r25
     6e4:	80 93 5c 01 	sts	0x015C, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     6e8:	10 92 60 01 	sts	0x0160, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     6ec:	80 91 28 02 	lds	r24, 0x0228
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	90 93 58 01 	sts	0x0158, r25
     6f6:	80 93 57 01 	sts	0x0157, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     6fa:	85 e0       	ldi	r24, 0x05	; 5
     6fc:	80 93 56 01 	sts	0x0156, r24
	message.dlc = 8;				// Max length of a CAN message.
     700:	98 e0       	ldi	r25, 0x08	; 8
     702:	90 93 5b 01 	sts	0x015B, r25
	mob_number = 5;
     706:	80 93 50 02 	sts	0x0250, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     70a:	60 91 50 02 	lds	r22, 0x0250
     70e:	85 e5       	ldi	r24, 0x55	; 85
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 4b 04 	call	0x896	; 0x896 <can_cmd>
     716:	81 11       	cpse	r24, r1
     718:	f8 cf       	rjmp	.-16     	; 0x70a <can_init_mobs+0x164>
     71a:	0f 2e       	mov	r0, r31
     71c:	fb e1       	ldi	r31, 0x1B	; 27
     71e:	cf 2e       	mov	r12, r31
     720:	f2 e0       	ldi	r31, 0x02	; 2
     722:	df 2e       	mov	r13, r31
     724:	f0 2d       	mov	r31, r0
     726:	0f 2e       	mov	r0, r31
     728:	f6 e2       	ldi	r31, 0x26	; 38
     72a:	ef 2e       	mov	r14, r31
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	ff 2e       	mov	r15, r31
     730:	f0 2d       	mov	r31, r0
     732:	0c ef       	ldi	r16, 0xFC	; 252
     734:	12 e0       	ldi	r17, 0x02	; 2
     736:	61 e0       	ldi	r22, 0x01	; 1
     738:	71 e0       	ldi	r23, 0x01	; 1
     73a:	41 e6       	ldi	r20, 0x61	; 97
     73c:	51 e0       	ldi	r21, 0x01	; 1
     73e:	29 e4       	ldi	r18, 0x49	; 73
     740:	31 e0       	ldi	r19, 0x01	; 1
     742:	80 e6       	ldi	r24, 0x60	; 96
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	cc e3       	ldi	r28, 0x3C	; 60
     748:	d1 e0       	ldi	r29, 0x01	; 1
     74a:	a8 e3       	ldi	r26, 0x38	; 56
     74c:	b2 e0       	ldi	r27, 0x02	; 2
     74e:	0f 2e       	mov	r0, r31
     750:	f6 e5       	ldi	r31, 0x56	; 86
     752:	8f 2e       	mov	r8, r31
     754:	f2 e0       	ldi	r31, 0x02	; 2
     756:	9f 2e       	mov	r9, r31
     758:	f0 2d       	mov	r31, r0
     75a:	68 94       	set
     75c:	bb 24       	eor	r11, r11
     75e:	b3 f8       	bld	r11, 3
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     760:	f6 01       	movw	r30, r12
     762:	11 92       	st	Z+, r1
     764:	6f 01       	movw	r12, r30
		send_arr[i] = 0;
     766:	f7 01       	movw	r30, r14
     768:	11 92       	st	Z+, r1
     76a:	7f 01       	movw	r14, r30
		read_arr[i] = 0;
     76c:	f8 01       	movw	r30, r16
     76e:	11 92       	st	Z+, r1
     770:	8f 01       	movw	r16, r30
		write_arr[i] = 0;
     772:	fb 01       	movw	r30, r22
     774:	11 92       	st	Z+, r1
     776:	bf 01       	movw	r22, r30
		data_req_arr[i] = 0;
     778:	fa 01       	movw	r30, r20
     77a:	11 92       	st	Z+, r1
     77c:	af 01       	movw	r20, r30
		sensh_arr[i] = 0;
     77e:	f9 01       	movw	r30, r18
     780:	11 92       	st	Z+, r1
     782:	9f 01       	movw	r18, r30
		sensl_arr[i] = 0;
     784:	fc 01       	movw	r30, r24
     786:	11 92       	st	Z+, r1
     788:	cf 01       	movw	r24, r30
		setv_arr[i] = 0;
     78a:	19 92       	st	Y+, r1
		new_tm_msg[i] = 0;
     78c:	1d 92       	st	X+, r1
		new_tc_msg[i] = 0;
     78e:	f4 01       	movw	r30, r8
     790:	11 92       	st	Z+, r1
     792:	4f 01       	movw	r8, r30
     794:	ba 94       	dec	r11
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     796:	21 f7       	brne	.-56     	; 0x760 <can_init_mobs+0x1ba>
     798:	ed e7       	ldi	r30, 0x7D	; 125
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	ab e6       	ldi	r26, 0x6B	; 107
     79e:	b2 e0       	ldi	r27, 0x02	; 2
     7a0:	8c e0       	ldi	r24, 0x0C	; 12
     7a2:	92 e0       	ldi	r25, 0x02	; 2
		new_tc_msg[i] = 0;
	}
	
	for (i = 0; i < 143; i++)		// Initialize the TM/TC Packet arrays.
	{
		current_tm[i] = 0;
     7a4:	11 92       	st	Z+, r1
		current_tc[i] = 0;
     7a6:	1d 92       	st	X+, r1
		setv_arr[i] = 0;
		new_tm_msg[i] = 0;
		new_tc_msg[i] = 0;
	}
	
	for (i = 0; i < 143; i++)		// Initialize the TM/TC Packet arrays.
     7a8:	e8 17       	cp	r30, r24
     7aa:	f9 07       	cpc	r31, r25
     7ac:	d9 f7       	brne	.-10     	; 0x7a4 <can_init_mobs+0x1fe>
		current_tm[i] = 0;
		current_tc[i] = 0;
	}
	
	/* Initialize Global Command Flags to zero */
	send_now = 0;
     7ae:	10 92 72 01 	sts	0x0172, r1
	send_hk = 0;
     7b2:	10 92 14 02 	sts	0x0214, r1
	send_data = 0;
     7b6:	10 92 36 02 	sts	0x0236, r1
	read_response = 0;
     7ba:	10 92 7c 01 	sts	0x017C, r1
	write_response = 0;
     7be:	10 92 48 01 	sts	0x0148, r1
	set_sens_h = 0;
     7c2:	10 92 33 02 	sts	0x0233, r1
	set_sens_l = 0;
     7c6:	10 92 37 02 	sts	0x0237, r1
	set_var = 0;
     7ca:	10 92 24 01 	sts	0x0124, r1
	new_tm_msgf = 0;
     7ce:	10 92 73 01 	sts	0x0173, r1
	tm_sequence_count = 0;
     7d2:	10 92 00 01 	sts	0x0100, r1
	current_tm_fullf = 0;
     7d6:	10 92 35 02 	sts	0x0235, r1
	tc_packet_readyf = 0;
     7da:	10 92 34 02 	sts	0x0234, r1
	
	return;
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	9f 90       	pop	r9
     7f2:	8f 90       	pop	r8
     7f4:	08 95       	ret

000007f6 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     7f6:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     7f8:	ad ee       	ldi	r26, 0xED	; 237
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     7fc:	3e ee       	ldi	r19, 0xEE	; 238
     7fe:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     800:	98 2f       	mov	r25, r24
     802:	92 95       	swap	r25
     804:	90 7f       	andi	r25, 0xF0	; 240
     806:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     808:	e3 2f       	mov	r30, r19
     80a:	f2 2f       	mov	r31, r18
     80c:	11 92       	st	Z+, r1
     80e:	e8 3f       	cpi	r30, 0xF8	; 248
     810:	f1 05       	cpc	r31, r1
     812:	e1 f7       	brne	.-8      	; 0x80c <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     814:	8f 5f       	subi	r24, 0xFF	; 255
     816:	86 30       	cpi	r24, 0x06	; 6
     818:	99 f7       	brne	.-26     	; 0x800 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     81a:	08 95       	ret

0000081c <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     81c:	80 91 ef 00 	lds	r24, 0x00EF
     820:	80 7c       	andi	r24, 0xC0	; 192
     822:	61 f0       	breq	.+24     	; 0x83c <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     824:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     828:	98 2f       	mov	r25, r24
     82a:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     82c:	28 2f       	mov	r18, r24
     82e:	20 76       	andi	r18, 0x60	; 96
     830:	20 32       	cpi	r18, 0x20	; 32
     832:	31 f0       	breq	.+12     	; 0x840 <can_get_mob_status+0x24>
     834:	90 34       	cpi	r25, 0x40	; 64
     836:	31 f0       	breq	.+12     	; 0x844 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     838:	8f 71       	andi	r24, 0x1F	; 31
     83a:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     840:	89 2f       	mov	r24, r25
     842:	08 95       	ret
     844:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     846:	08 95       	ret

00000848 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     848:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     84a:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     84c:	aa ef       	ldi	r26, 0xFA	; 250
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	9c 91       	ld	r25, X
     852:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     854:	8f 5f       	subi	r24, 0xFF	; 255
     856:	88 30       	cpi	r24, 0x08	; 8
     858:	d9 f7       	brne	.-10     	; 0x850 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     85a:	08 95       	ret

0000085c <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     862:	82 e0       	ldi	r24, 0x02	; 2
     864:	80 93 e2 00 	sts	0x00E2, r24
     868:	8c e0       	ldi	r24, 0x0C	; 12
     86a:	80 93 e3 00 	sts	0x00E3, r24
     86e:	87 e3       	ldi	r24, 0x37	; 55
     870:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	08 95       	ret

00000878 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     878:	0e 94 2e 04 	call	0x85c	; 0x85c <can_fixed_baudrate>
     87c:	88 23       	and	r24, r24
     87e:	49 f0       	breq	.+18     	; 0x892 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     880:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     884:	e8 ed       	ldi	r30, 0xD8	; 216
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	82 60       	ori	r24, 0x02	; 2
     88c:	80 83       	st	Z, r24
    return (1);
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     892:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     894:	08 95       	ret

00000896 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	1f 92       	push	r1
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     8a2:	11 96       	adiw	r26, 0x01	; 1
     8a4:	8c 91       	ld	r24, X
     8a6:	11 97       	sbiw	r26, 0x01	; 1
     8a8:	8c 30       	cpi	r24, 0x0C	; 12
     8aa:	b1 f4       	brne	.+44     	; 0x8d8 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     8ac:	19 96       	adiw	r26, 0x09	; 9
     8ae:	8c 91       	ld	r24, X
     8b0:	19 97       	sbiw	r26, 0x09	; 9
     8b2:	80 36       	cpi	r24, 0x60	; 96
     8b4:	69 f4       	brne	.+26     	; 0x8d0 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     8b6:	86 2f       	mov	r24, r22
     8b8:	82 95       	swap	r24
     8ba:	80 7f       	andi	r24, 0xF0	; 240
     8bc:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     8c0:	ef ee       	ldi	r30, 0xEF	; 239
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	80 81       	ld	r24, Z
     8c6:	8f 73       	andi	r24, 0x3F	; 63
     8c8:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     8ca:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     8ce:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     8d0:	19 96       	adiw	r26, 0x09	; 9
     8d2:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	07 c6       	rjmp	.+3086   	; 0x14e6 <__stack+0xbe7>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     8d8:	86 2f       	mov	r24, r22
     8da:	82 95       	swap	r24
     8dc:	80 7f       	andi	r24, 0xF0	; 240
     8de:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     8e2:	80 91 ef 00 	lds	r24, 0x00EF
     8e6:	80 7c       	andi	r24, 0xC0	; 192
     8e8:	09 f0       	breq	.+2      	; 0x8ec <can_cmd+0x56>
     8ea:	f9 c5       	rjmp	.+3058   	; 0x14de <__stack+0xbdf>
    {
      cmd->status = MOB_PENDING; 
     8ec:	80 e6       	ldi	r24, 0x60	; 96
     8ee:	19 96       	adiw	r26, 0x09	; 9
     8f0:	8c 93       	st	X, r24
     8f2:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     8f4:	6c 93       	st	X, r22
      Can_clear_mob();
     8f6:	ee ee       	ldi	r30, 0xEE	; 238
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	11 92       	st	Z+, r1
     8fc:	e8 3f       	cpi	r30, 0xF8	; 248
     8fe:	f1 05       	cpc	r31, r1
     900:	e1 f7       	brne	.-8      	; 0x8fa <can_cmd+0x64>
          
      switch (cmd->cmd)
     902:	11 96       	adiw	r26, 0x01	; 1
     904:	4c 91       	ld	r20, X
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	fa 01       	movw	r30, r20
     90c:	31 97       	sbiw	r30, 0x01	; 1
     90e:	eb 30       	cpi	r30, 0x0B	; 11
     910:	f1 05       	cpc	r31, r1
     912:	08 f0       	brcs	.+2      	; 0x916 <__stack+0x17>
     914:	e0 c5       	rjmp	.+3008   	; 0x14d6 <__stack+0xbd7>
     916:	e3 5b       	subi	r30, 0xB3	; 179
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     91e:	16 96       	adiw	r26, 0x06	; 6
     920:	8c 91       	ld	r24, X
     922:	16 97       	sbiw	r26, 0x06	; 6
     924:	81 11       	cpse	r24, r1
     926:	b7 c4       	rjmp	.+2414   	; 0x1296 <__stack+0x997>
     928:	c8 c4       	rjmp	.+2448   	; 0x12ba <__stack+0x9bb>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     92a:	1b 96       	adiw	r26, 0x0b	; 11
     92c:	8c 91       	ld	r24, X
     92e:	1b 97       	sbiw	r26, 0x0b	; 11
     930:	88 23       	and	r24, r24
     932:	d9 f1       	breq	.+118    	; 0x9aa <__stack+0xab>
     934:	14 96       	adiw	r26, 0x04	; 4
     936:	9c 91       	ld	r25, X
     938:	14 97       	sbiw	r26, 0x04	; 4
     93a:	92 95       	swap	r25
     93c:	96 95       	lsr	r25
     93e:	97 70       	andi	r25, 0x07	; 7
     940:	15 96       	adiw	r26, 0x05	; 5
     942:	8c 91       	ld	r24, X
     944:	15 97       	sbiw	r26, 0x05	; 5
     946:	88 0f       	add	r24, r24
     948:	88 0f       	add	r24, r24
     94a:	88 0f       	add	r24, r24
     94c:	89 0f       	add	r24, r25
     94e:	80 93 f3 00 	sts	0x00F3, r24
     952:	13 96       	adiw	r26, 0x03	; 3
     954:	9c 91       	ld	r25, X
     956:	13 97       	sbiw	r26, 0x03	; 3
     958:	92 95       	swap	r25
     95a:	96 95       	lsr	r25
     95c:	97 70       	andi	r25, 0x07	; 7
     95e:	14 96       	adiw	r26, 0x04	; 4
     960:	8c 91       	ld	r24, X
     962:	14 97       	sbiw	r26, 0x04	; 4
     964:	88 0f       	add	r24, r24
     966:	88 0f       	add	r24, r24
     968:	88 0f       	add	r24, r24
     96a:	89 0f       	add	r24, r25
     96c:	80 93 f2 00 	sts	0x00F2, r24
     970:	12 96       	adiw	r26, 0x02	; 2
     972:	9c 91       	ld	r25, X
     974:	12 97       	sbiw	r26, 0x02	; 2
     976:	92 95       	swap	r25
     978:	96 95       	lsr	r25
     97a:	97 70       	andi	r25, 0x07	; 7
     97c:	13 96       	adiw	r26, 0x03	; 3
     97e:	8c 91       	ld	r24, X
     980:	13 97       	sbiw	r26, 0x03	; 3
     982:	88 0f       	add	r24, r24
     984:	88 0f       	add	r24, r24
     986:	88 0f       	add	r24, r24
     988:	89 0f       	add	r24, r25
     98a:	80 93 f1 00 	sts	0x00F1, r24
     98e:	12 96       	adiw	r26, 0x02	; 2
     990:	8c 91       	ld	r24, X
     992:	12 97       	sbiw	r26, 0x02	; 2
     994:	88 0f       	add	r24, r24
     996:	88 0f       	add	r24, r24
     998:	88 0f       	add	r24, r24
     99a:	80 93 f0 00 	sts	0x00F0, r24
     99e:	ef ee       	ldi	r30, 0xEF	; 239
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	80 81       	ld	r24, Z
     9a4:	80 61       	ori	r24, 0x10	; 16
     9a6:	80 83       	st	Z, r24
     9a8:	1c c0       	rjmp	.+56     	; 0x9e2 <__stack+0xe3>
          else              { Can_set_std_id(cmd->id.std);}
     9aa:	12 96       	adiw	r26, 0x02	; 2
     9ac:	8c 91       	ld	r24, X
     9ae:	12 97       	sbiw	r26, 0x02	; 2
     9b0:	86 95       	lsr	r24
     9b2:	86 95       	lsr	r24
     9b4:	86 95       	lsr	r24
     9b6:	13 96       	adiw	r26, 0x03	; 3
     9b8:	9c 91       	ld	r25, X
     9ba:	13 97       	sbiw	r26, 0x03	; 3
     9bc:	20 e2       	ldi	r18, 0x20	; 32
     9be:	92 9f       	mul	r25, r18
     9c0:	80 0d       	add	r24, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	80 93 f3 00 	sts	0x00F3, r24
     9c8:	12 96       	adiw	r26, 0x02	; 2
     9ca:	8c 91       	ld	r24, X
     9cc:	12 97       	sbiw	r26, 0x02	; 2
     9ce:	82 95       	swap	r24
     9d0:	88 0f       	add	r24, r24
     9d2:	80 7e       	andi	r24, 0xE0	; 224
     9d4:	80 93 f2 00 	sts	0x00F2, r24
     9d8:	ef ee       	ldi	r30, 0xEF	; 239
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	8f 7e       	andi	r24, 0xEF	; 239
     9e0:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     9e2:	16 96       	adiw	r26, 0x06	; 6
     9e4:	8c 91       	ld	r24, X
     9e6:	16 97       	sbiw	r26, 0x06	; 6
     9e8:	88 23       	and	r24, r24
     9ea:	91 f0       	breq	.+36     	; 0xa10 <__stack+0x111>
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	8a ef       	ldi	r24, 0xFA	; 250
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	17 96       	adiw	r26, 0x07	; 7
     9f4:	ed 91       	ld	r30, X+
     9f6:	fc 91       	ld	r31, X
     9f8:	18 97       	sbiw	r26, 0x08	; 8
     9fa:	e2 0f       	add	r30, r18
     9fc:	f1 1d       	adc	r31, r1
     9fe:	30 81       	ld	r19, Z
     a00:	fc 01       	movw	r30, r24
     a02:	30 83       	st	Z, r19
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	16 96       	adiw	r26, 0x06	; 6
     a08:	3c 91       	ld	r19, X
     a0a:	16 97       	sbiw	r26, 0x06	; 6
     a0c:	23 17       	cp	r18, r19
     a0e:	88 f3       	brcs	.-30     	; 0x9f2 <__stack+0xf3>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     a10:	1a 96       	adiw	r26, 0x0a	; 10
     a12:	8c 91       	ld	r24, X
     a14:	1a 97       	sbiw	r26, 0x0a	; 10
     a16:	88 23       	and	r24, r24
     a18:	31 f0       	breq	.+12     	; 0xa26 <__stack+0x127>
     a1a:	e0 ef       	ldi	r30, 0xF0	; 240
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	84 60       	ori	r24, 0x04	; 4
     a22:	80 83       	st	Z, r24
     a24:	05 c0       	rjmp	.+10     	; 0xa30 <__stack+0x131>
            else Can_clear_rtr();    
     a26:	e0 ef       	ldi	r30, 0xF0	; 240
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	8b 7f       	andi	r24, 0xFB	; 251
     a2e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     a30:	ef ee       	ldi	r30, 0xEF	; 239
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	90 81       	ld	r25, Z
     a36:	16 96       	adiw	r26, 0x06	; 6
     a38:	8c 91       	ld	r24, X
     a3a:	89 2b       	or	r24, r25
     a3c:	80 83       	st	Z, r24
          Can_config_tx();
     a3e:	80 81       	ld	r24, Z
     a40:	8f 73       	andi	r24, 0x3F	; 63
     a42:	80 83       	st	Z, r24
     a44:	80 81       	ld	r24, Z
     a46:	80 64       	ori	r24, 0x40	; 64
     a48:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a4c:	4c c5       	rjmp	.+2712   	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a4e:	1b 96       	adiw	r26, 0x0b	; 11
     a50:	8c 91       	ld	r24, X
     a52:	1b 97       	sbiw	r26, 0x0b	; 11
     a54:	88 23       	and	r24, r24
     a56:	d9 f1       	breq	.+118    	; 0xace <__stack+0x1cf>
     a58:	14 96       	adiw	r26, 0x04	; 4
     a5a:	9c 91       	ld	r25, X
     a5c:	14 97       	sbiw	r26, 0x04	; 4
     a5e:	92 95       	swap	r25
     a60:	96 95       	lsr	r25
     a62:	97 70       	andi	r25, 0x07	; 7
     a64:	15 96       	adiw	r26, 0x05	; 5
     a66:	8c 91       	ld	r24, X
     a68:	15 97       	sbiw	r26, 0x05	; 5
     a6a:	88 0f       	add	r24, r24
     a6c:	88 0f       	add	r24, r24
     a6e:	88 0f       	add	r24, r24
     a70:	89 0f       	add	r24, r25
     a72:	80 93 f3 00 	sts	0x00F3, r24
     a76:	13 96       	adiw	r26, 0x03	; 3
     a78:	9c 91       	ld	r25, X
     a7a:	13 97       	sbiw	r26, 0x03	; 3
     a7c:	92 95       	swap	r25
     a7e:	96 95       	lsr	r25
     a80:	97 70       	andi	r25, 0x07	; 7
     a82:	14 96       	adiw	r26, 0x04	; 4
     a84:	8c 91       	ld	r24, X
     a86:	14 97       	sbiw	r26, 0x04	; 4
     a88:	88 0f       	add	r24, r24
     a8a:	88 0f       	add	r24, r24
     a8c:	88 0f       	add	r24, r24
     a8e:	89 0f       	add	r24, r25
     a90:	80 93 f2 00 	sts	0x00F2, r24
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	9c 91       	ld	r25, X
     a98:	12 97       	sbiw	r26, 0x02	; 2
     a9a:	92 95       	swap	r25
     a9c:	96 95       	lsr	r25
     a9e:	97 70       	andi	r25, 0x07	; 7
     aa0:	13 96       	adiw	r26, 0x03	; 3
     aa2:	8c 91       	ld	r24, X
     aa4:	13 97       	sbiw	r26, 0x03	; 3
     aa6:	88 0f       	add	r24, r24
     aa8:	88 0f       	add	r24, r24
     aaa:	88 0f       	add	r24, r24
     aac:	89 0f       	add	r24, r25
     aae:	80 93 f1 00 	sts	0x00F1, r24
     ab2:	12 96       	adiw	r26, 0x02	; 2
     ab4:	8c 91       	ld	r24, X
     ab6:	12 97       	sbiw	r26, 0x02	; 2
     ab8:	88 0f       	add	r24, r24
     aba:	88 0f       	add	r24, r24
     abc:	88 0f       	add	r24, r24
     abe:	80 93 f0 00 	sts	0x00F0, r24
     ac2:	ef ee       	ldi	r30, 0xEF	; 239
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	80 61       	ori	r24, 0x10	; 16
     aca:	80 83       	st	Z, r24
     acc:	1c c0       	rjmp	.+56     	; 0xb06 <__stack+0x207>
          else              { Can_set_std_id(cmd->id.std);}
     ace:	12 96       	adiw	r26, 0x02	; 2
     ad0:	8c 91       	ld	r24, X
     ad2:	12 97       	sbiw	r26, 0x02	; 2
     ad4:	86 95       	lsr	r24
     ad6:	86 95       	lsr	r24
     ad8:	86 95       	lsr	r24
     ada:	13 96       	adiw	r26, 0x03	; 3
     adc:	9c 91       	ld	r25, X
     ade:	13 97       	sbiw	r26, 0x03	; 3
     ae0:	f0 e2       	ldi	r31, 0x20	; 32
     ae2:	9f 9f       	mul	r25, r31
     ae4:	80 0d       	add	r24, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	80 93 f3 00 	sts	0x00F3, r24
     aec:	12 96       	adiw	r26, 0x02	; 2
     aee:	8c 91       	ld	r24, X
     af0:	12 97       	sbiw	r26, 0x02	; 2
     af2:	82 95       	swap	r24
     af4:	88 0f       	add	r24, r24
     af6:	80 7e       	andi	r24, 0xE0	; 224
     af8:	80 93 f2 00 	sts	0x00F2, r24
     afc:	ef ee       	ldi	r30, 0xEF	; 239
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	8f 7e       	andi	r24, 0xEF	; 239
     b04:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     b06:	16 96       	adiw	r26, 0x06	; 6
     b08:	8c 91       	ld	r24, X
     b0a:	16 97       	sbiw	r26, 0x06	; 6
     b0c:	88 23       	and	r24, r24
     b0e:	91 f0       	breq	.+36     	; 0xb34 <__stack+0x235>
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	8a ef       	ldi	r24, 0xFA	; 250
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	17 96       	adiw	r26, 0x07	; 7
     b18:	ed 91       	ld	r30, X+
     b1a:	fc 91       	ld	r31, X
     b1c:	18 97       	sbiw	r26, 0x08	; 8
     b1e:	e2 0f       	add	r30, r18
     b20:	f1 1d       	adc	r31, r1
     b22:	30 81       	ld	r19, Z
     b24:	fc 01       	movw	r30, r24
     b26:	30 83       	st	Z, r19
     b28:	2f 5f       	subi	r18, 0xFF	; 255
     b2a:	16 96       	adiw	r26, 0x06	; 6
     b2c:	3c 91       	ld	r19, X
     b2e:	16 97       	sbiw	r26, 0x06	; 6
     b30:	23 17       	cp	r18, r19
     b32:	88 f3       	brcs	.-30     	; 0xb16 <__stack+0x217>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     b34:	1a 96       	adiw	r26, 0x0a	; 10
     b36:	1c 92       	st	X, r1
     b38:	1a 97       	sbiw	r26, 0x0a	; 10
     b3a:	e0 ef       	ldi	r30, 0xF0	; 240
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	8b 7f       	andi	r24, 0xFB	; 251
     b42:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     b44:	ef ee       	ldi	r30, 0xEF	; 239
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	90 81       	ld	r25, Z
     b4a:	16 96       	adiw	r26, 0x06	; 6
     b4c:	8c 91       	ld	r24, X
     b4e:	89 2b       	or	r24, r25
     b50:	80 83       	st	Z, r24
          Can_config_tx();
     b52:	80 81       	ld	r24, Z
     b54:	8f 73       	andi	r24, 0x3F	; 63
     b56:	80 83       	st	Z, r24
     b58:	80 81       	ld	r24, Z
     b5a:	80 64       	ori	r24, 0x40	; 64
     b5c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b5e:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     b60:	c2 c4       	rjmp	.+2436   	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b62:	1b 96       	adiw	r26, 0x0b	; 11
     b64:	8c 91       	ld	r24, X
     b66:	1b 97       	sbiw	r26, 0x0b	; 11
     b68:	88 23       	and	r24, r24
     b6a:	d9 f1       	breq	.+118    	; 0xbe2 <__stack+0x2e3>
     b6c:	14 96       	adiw	r26, 0x04	; 4
     b6e:	9c 91       	ld	r25, X
     b70:	14 97       	sbiw	r26, 0x04	; 4
     b72:	92 95       	swap	r25
     b74:	96 95       	lsr	r25
     b76:	97 70       	andi	r25, 0x07	; 7
     b78:	15 96       	adiw	r26, 0x05	; 5
     b7a:	8c 91       	ld	r24, X
     b7c:	15 97       	sbiw	r26, 0x05	; 5
     b7e:	88 0f       	add	r24, r24
     b80:	88 0f       	add	r24, r24
     b82:	88 0f       	add	r24, r24
     b84:	89 0f       	add	r24, r25
     b86:	80 93 f3 00 	sts	0x00F3, r24
     b8a:	13 96       	adiw	r26, 0x03	; 3
     b8c:	9c 91       	ld	r25, X
     b8e:	13 97       	sbiw	r26, 0x03	; 3
     b90:	92 95       	swap	r25
     b92:	96 95       	lsr	r25
     b94:	97 70       	andi	r25, 0x07	; 7
     b96:	14 96       	adiw	r26, 0x04	; 4
     b98:	8c 91       	ld	r24, X
     b9a:	14 97       	sbiw	r26, 0x04	; 4
     b9c:	88 0f       	add	r24, r24
     b9e:	88 0f       	add	r24, r24
     ba0:	88 0f       	add	r24, r24
     ba2:	89 0f       	add	r24, r25
     ba4:	80 93 f2 00 	sts	0x00F2, r24
     ba8:	12 96       	adiw	r26, 0x02	; 2
     baa:	9c 91       	ld	r25, X
     bac:	12 97       	sbiw	r26, 0x02	; 2
     bae:	92 95       	swap	r25
     bb0:	96 95       	lsr	r25
     bb2:	97 70       	andi	r25, 0x07	; 7
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	8c 91       	ld	r24, X
     bb8:	13 97       	sbiw	r26, 0x03	; 3
     bba:	88 0f       	add	r24, r24
     bbc:	88 0f       	add	r24, r24
     bbe:	88 0f       	add	r24, r24
     bc0:	89 0f       	add	r24, r25
     bc2:	80 93 f1 00 	sts	0x00F1, r24
     bc6:	12 96       	adiw	r26, 0x02	; 2
     bc8:	8c 91       	ld	r24, X
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	88 0f       	add	r24, r24
     bce:	88 0f       	add	r24, r24
     bd0:	88 0f       	add	r24, r24
     bd2:	80 93 f0 00 	sts	0x00F0, r24
     bd6:	ef ee       	ldi	r30, 0xEF	; 239
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 61       	ori	r24, 0x10	; 16
     bde:	80 83       	st	Z, r24
     be0:	1c c0       	rjmp	.+56     	; 0xc1a <__stack+0x31b>
          else              { Can_set_std_id(cmd->id.std);}
     be2:	12 96       	adiw	r26, 0x02	; 2
     be4:	8c 91       	ld	r24, X
     be6:	12 97       	sbiw	r26, 0x02	; 2
     be8:	86 95       	lsr	r24
     bea:	86 95       	lsr	r24
     bec:	86 95       	lsr	r24
     bee:	13 96       	adiw	r26, 0x03	; 3
     bf0:	9c 91       	ld	r25, X
     bf2:	13 97       	sbiw	r26, 0x03	; 3
     bf4:	f0 e2       	ldi	r31, 0x20	; 32
     bf6:	9f 9f       	mul	r25, r31
     bf8:	80 0d       	add	r24, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	80 93 f3 00 	sts	0x00F3, r24
     c00:	12 96       	adiw	r26, 0x02	; 2
     c02:	8c 91       	ld	r24, X
     c04:	12 97       	sbiw	r26, 0x02	; 2
     c06:	82 95       	swap	r24
     c08:	88 0f       	add	r24, r24
     c0a:	80 7e       	andi	r24, 0xE0	; 224
     c0c:	80 93 f2 00 	sts	0x00F2, r24
     c10:	ef ee       	ldi	r30, 0xEF	; 239
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	8f 7e       	andi	r24, 0xEF	; 239
     c18:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	1a 96       	adiw	r26, 0x0a	; 10
     c1e:	8c 93       	st	X, r24
     c20:	1a 97       	sbiw	r26, 0x0a	; 10
     c22:	e0 ef       	ldi	r30, 0xF0	; 240
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	84 60       	ori	r24, 0x04	; 4
     c2a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     c2c:	ef ee       	ldi	r30, 0xEF	; 239
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	90 81       	ld	r25, Z
     c32:	16 96       	adiw	r26, 0x06	; 6
     c34:	8c 91       	ld	r24, X
     c36:	89 2b       	or	r24, r25
     c38:	80 83       	st	Z, r24
          Can_config_tx();
     c3a:	80 81       	ld	r24, Z
     c3c:	8f 73       	andi	r24, 0x3F	; 63
     c3e:	80 83       	st	Z, r24
     c40:	80 81       	ld	r24, Z
     c42:	80 64       	ori	r24, 0x40	; 64
     c44:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c46:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     c48:	4e c4       	rjmp	.+2204   	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     c4a:	19 82       	std	Y+1, r1	; 0x01
     c4c:	9b 81       	ldd	r25, Y+3	; 0x03
     c4e:	92 95       	swap	r25
     c50:	96 95       	lsr	r25
     c52:	97 70       	andi	r25, 0x07	; 7
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	88 0f       	add	r24, r24
     c58:	88 0f       	add	r24, r24
     c5a:	88 0f       	add	r24, r24
     c5c:	89 0f       	add	r24, r25
     c5e:	80 93 f7 00 	sts	0x00F7, r24
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	92 95       	swap	r25
     c66:	96 95       	lsr	r25
     c68:	97 70       	andi	r25, 0x07	; 7
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	88 0f       	add	r24, r24
     c6e:	88 0f       	add	r24, r24
     c70:	88 0f       	add	r24, r24
     c72:	89 0f       	add	r24, r25
     c74:	80 93 f6 00 	sts	0x00F6, r24
     c78:	99 81       	ldd	r25, Y+1	; 0x01
     c7a:	92 95       	swap	r25
     c7c:	96 95       	lsr	r25
     c7e:	97 70       	andi	r25, 0x07	; 7
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	88 0f       	add	r24, r24
     c84:	88 0f       	add	r24, r24
     c86:	88 0f       	add	r24, r24
     c88:	89 0f       	add	r24, r25
     c8a:	80 93 f5 00 	sts	0x00F5, r24
     c8e:	29 81       	ldd	r18, Y+1	; 0x01
     c90:	22 0f       	add	r18, r18
     c92:	22 0f       	add	r18, r18
     c94:	22 0f       	add	r18, r18
     c96:	84 ef       	ldi	r24, 0xF4	; 244
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	fc 01       	movw	r30, r24
     c9c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c9e:	ef ee       	ldi	r30, 0xEF	; 239
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	30 81       	ld	r19, Z
     ca4:	16 96       	adiw	r26, 0x06	; 6
     ca6:	2c 91       	ld	r18, X
     ca8:	23 2b       	or	r18, r19
     caa:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     cac:	dc 01       	movw	r26, r24
     cae:	2c 91       	ld	r18, X
     cb0:	2b 7f       	andi	r18, 0xFB	; 251
     cb2:	2c 93       	st	X, r18
          Can_clear_idemsk();
     cb4:	2c 91       	ld	r18, X
     cb6:	2e 7f       	andi	r18, 0xFE	; 254
     cb8:	2c 93       	st	X, r18
          Can_config_rx();       
     cba:	80 81       	ld	r24, Z
     cbc:	8f 73       	andi	r24, 0x3F	; 63
     cbe:	80 83       	st	Z, r24
     cc0:	80 81       	ld	r24, Z
     cc2:	80 68       	ori	r24, 0x80	; 128
     cc4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     cc6:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     cc8:	0e c4       	rjmp	.+2076   	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	82 95       	swap	r24
     cd2:	88 0f       	add	r24, r24
     cd4:	80 7e       	andi	r24, 0xE0	; 224
     cd6:	81 5e       	subi	r24, 0xE1	; 225
     cd8:	27 ef       	ldi	r18, 0xF7	; 247
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	f9 01       	movw	r30, r18
     cde:	80 83       	st	Z, r24
     ce0:	49 81       	ldd	r20, Y+1	; 0x01
     ce2:	42 95       	swap	r20
     ce4:	44 0f       	add	r20, r20
     ce6:	40 7e       	andi	r20, 0xE0	; 224
     ce8:	86 ef       	ldi	r24, 0xF6	; 246
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	fc 01       	movw	r30, r24
     cee:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	4c 91       	ld	r20, X
     cf4:	12 97       	sbiw	r26, 0x02	; 2
     cf6:	46 95       	lsr	r20
     cf8:	46 95       	lsr	r20
     cfa:	46 95       	lsr	r20
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	5c 91       	ld	r21, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	f0 e2       	ldi	r31, 0x20	; 32
     d04:	5f 9f       	mul	r21, r31
     d06:	40 0d       	add	r20, r0
     d08:	11 24       	eor	r1, r1
     d0a:	40 93 f3 00 	sts	0x00F3, r20
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	4c 91       	ld	r20, X
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	42 95       	swap	r20
     d16:	44 0f       	add	r20, r20
     d18:	40 7e       	andi	r20, 0xE0	; 224
     d1a:	40 93 f2 00 	sts	0x00F2, r20
     d1e:	6f ee       	ldi	r22, 0xEF	; 239
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	fb 01       	movw	r30, r22
     d24:	40 81       	ld	r20, Z
     d26:	4f 7e       	andi	r20, 0xEF	; 239
     d28:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     d2a:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     d2c:	5b 81       	ldd	r21, Y+3	; 0x03
     d2e:	52 95       	swap	r21
     d30:	56 95       	lsr	r21
     d32:	57 70       	andi	r21, 0x07	; 7
     d34:	4c 81       	ldd	r20, Y+4	; 0x04
     d36:	44 0f       	add	r20, r20
     d38:	44 0f       	add	r20, r20
     d3a:	44 0f       	add	r20, r20
     d3c:	45 0f       	add	r20, r21
     d3e:	f9 01       	movw	r30, r18
     d40:	40 83       	st	Z, r20
     d42:	3a 81       	ldd	r19, Y+2	; 0x02
     d44:	32 95       	swap	r19
     d46:	36 95       	lsr	r19
     d48:	37 70       	andi	r19, 0x07	; 7
     d4a:	2b 81       	ldd	r18, Y+3	; 0x03
     d4c:	22 0f       	add	r18, r18
     d4e:	22 0f       	add	r18, r18
     d50:	22 0f       	add	r18, r18
     d52:	23 0f       	add	r18, r19
     d54:	fc 01       	movw	r30, r24
     d56:	20 83       	st	Z, r18
     d58:	99 81       	ldd	r25, Y+1	; 0x01
     d5a:	92 95       	swap	r25
     d5c:	96 95       	lsr	r25
     d5e:	97 70       	andi	r25, 0x07	; 7
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	88 0f       	add	r24, r24
     d64:	88 0f       	add	r24, r24
     d66:	88 0f       	add	r24, r24
     d68:	89 0f       	add	r24, r25
     d6a:	80 93 f5 00 	sts	0x00F5, r24
     d6e:	29 81       	ldd	r18, Y+1	; 0x01
     d70:	22 0f       	add	r18, r18
     d72:	22 0f       	add	r18, r18
     d74:	22 0f       	add	r18, r18
     d76:	84 ef       	ldi	r24, 0xF4	; 244
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     d7e:	fb 01       	movw	r30, r22
     d80:	30 81       	ld	r19, Z
     d82:	16 96       	adiw	r26, 0x06	; 6
     d84:	2c 91       	ld	r18, X
     d86:	16 97       	sbiw	r26, 0x06	; 6
     d88:	23 2b       	or	r18, r19
     d8a:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     d8c:	1a 96       	adiw	r26, 0x0a	; 10
     d8e:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     d90:	dc 01       	movw	r26, r24
     d92:	2c 91       	ld	r18, X
     d94:	24 60       	ori	r18, 0x04	; 4
     d96:	2c 93       	st	X, r18
		  Can_clear_rtr();
     d98:	a0 ef       	ldi	r26, 0xF0	; 240
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	2c 91       	ld	r18, X
     d9e:	2b 7f       	andi	r18, 0xFB	; 251
     da0:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     da2:	20 81       	ld	r18, Z
     da4:	2f 7e       	andi	r18, 0xEF	; 239
     da6:	20 83       	st	Z, r18
          Can_clear_idemsk();
     da8:	fc 01       	movw	r30, r24
     daa:	20 81       	ld	r18, Z
     dac:	2e 7f       	andi	r18, 0xFE	; 254
     dae:	20 83       	st	Z, r18
          Can_config_rx();       
     db0:	db 01       	movw	r26, r22
     db2:	8c 91       	ld	r24, X
     db4:	8f 73       	andi	r24, 0x3F	; 63
     db6:	8c 93       	st	X, r24
     db8:	8c 91       	ld	r24, X
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dbe:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     dc0:	92 c3       	rjmp	.+1828   	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	82 95       	swap	r24
     dca:	88 0f       	add	r24, r24
     dcc:	80 7e       	andi	r24, 0xE0	; 224
     dce:	81 5e       	subi	r24, 0xE1	; 225
     dd0:	27 ef       	ldi	r18, 0xF7	; 247
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	f9 01       	movw	r30, r18
     dd6:	80 83       	st	Z, r24
     dd8:	49 81       	ldd	r20, Y+1	; 0x01
     dda:	42 95       	swap	r20
     ddc:	44 0f       	add	r20, r20
     dde:	40 7e       	andi	r20, 0xE0	; 224
     de0:	86 ef       	ldi	r24, 0xF6	; 246
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	fc 01       	movw	r30, r24
     de6:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	4c 91       	ld	r20, X
     dec:	12 97       	sbiw	r26, 0x02	; 2
     dee:	46 95       	lsr	r20
     df0:	46 95       	lsr	r20
     df2:	46 95       	lsr	r20
     df4:	13 96       	adiw	r26, 0x03	; 3
     df6:	5c 91       	ld	r21, X
     df8:	13 97       	sbiw	r26, 0x03	; 3
     dfa:	f0 e2       	ldi	r31, 0x20	; 32
     dfc:	5f 9f       	mul	r21, r31
     dfe:	40 0d       	add	r20, r0
     e00:	11 24       	eor	r1, r1
     e02:	40 93 f3 00 	sts	0x00F3, r20
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	4c 91       	ld	r20, X
     e0a:	12 97       	sbiw	r26, 0x02	; 2
     e0c:	42 95       	swap	r20
     e0e:	44 0f       	add	r20, r20
     e10:	40 7e       	andi	r20, 0xE0	; 224
     e12:	40 93 f2 00 	sts	0x00F2, r20
     e16:	6f ee       	ldi	r22, 0xEF	; 239
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	fb 01       	movw	r30, r22
     e1c:	40 81       	ld	r20, Z
     e1e:	4f 7e       	andi	r20, 0xEF	; 239
     e20:	40 83       	st	Z, r20
		
          u8_temp=0; 
     e22:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     e24:	5b 81       	ldd	r21, Y+3	; 0x03
     e26:	52 95       	swap	r21
     e28:	56 95       	lsr	r21
     e2a:	57 70       	andi	r21, 0x07	; 7
     e2c:	4c 81       	ldd	r20, Y+4	; 0x04
     e2e:	44 0f       	add	r20, r20
     e30:	44 0f       	add	r20, r20
     e32:	44 0f       	add	r20, r20
     e34:	45 0f       	add	r20, r21
     e36:	f9 01       	movw	r30, r18
     e38:	40 83       	st	Z, r20
     e3a:	3a 81       	ldd	r19, Y+2	; 0x02
     e3c:	32 95       	swap	r19
     e3e:	36 95       	lsr	r19
     e40:	37 70       	andi	r19, 0x07	; 7
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	22 0f       	add	r18, r18
     e46:	22 0f       	add	r18, r18
     e48:	22 0f       	add	r18, r18
     e4a:	23 0f       	add	r18, r19
     e4c:	fc 01       	movw	r30, r24
     e4e:	20 83       	st	Z, r18
     e50:	99 81       	ldd	r25, Y+1	; 0x01
     e52:	92 95       	swap	r25
     e54:	96 95       	lsr	r25
     e56:	97 70       	andi	r25, 0x07	; 7
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	88 0f       	add	r24, r24
     e5c:	88 0f       	add	r24, r24
     e5e:	88 0f       	add	r24, r24
     e60:	89 0f       	add	r24, r25
     e62:	80 93 f5 00 	sts	0x00F5, r24
     e66:	29 81       	ldd	r18, Y+1	; 0x01
     e68:	22 0f       	add	r18, r18
     e6a:	22 0f       	add	r18, r18
     e6c:	22 0f       	add	r18, r18
     e6e:	84 ef       	ldi	r24, 0xF4	; 244
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	fc 01       	movw	r30, r24
     e74:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e76:	fb 01       	movw	r30, r22
     e78:	30 81       	ld	r19, Z
     e7a:	16 96       	adiw	r26, 0x06	; 6
     e7c:	2c 91       	ld	r18, X
     e7e:	16 97       	sbiw	r26, 0x06	; 6
     e80:	23 2b       	or	r18, r19
     e82:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	1a 96       	adiw	r26, 0x0a	; 10
     e88:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     e8a:	dc 01       	movw	r26, r24
     e8c:	2c 91       	ld	r18, X
     e8e:	24 60       	ori	r18, 0x04	; 4
     e90:	2c 93       	st	X, r18
		  Can_set_rtr();
     e92:	a0 ef       	ldi	r26, 0xF0	; 240
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	2c 91       	ld	r18, X
     e98:	24 60       	ori	r18, 0x04	; 4
     e9a:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     e9c:	20 81       	ld	r18, Z
     e9e:	2f 7d       	andi	r18, 0xDF	; 223
     ea0:	20 83       	st	Z, r18
          Can_clear_idemsk();
     ea2:	fc 01       	movw	r30, r24
     ea4:	20 81       	ld	r18, Z
     ea6:	2e 7f       	andi	r18, 0xFE	; 254
     ea8:	20 83       	st	Z, r18
          Can_config_rx();       
     eaa:	db 01       	movw	r26, r22
     eac:	8c 91       	ld	r24, X
     eae:	8f 73       	andi	r24, 0x3F	; 63
     eb0:	8c 93       	st	X, r24
     eb2:	8c 91       	ld	r24, X
     eb4:	80 68       	ori	r24, 0x80	; 128
     eb6:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     eb8:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     eba:	15 c3       	rjmp	.+1578   	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ebc:	1b 96       	adiw	r26, 0x0b	; 11
     ebe:	8c 91       	ld	r24, X
     ec0:	1b 97       	sbiw	r26, 0x0b	; 11
     ec2:	88 23       	and	r24, r24
     ec4:	d9 f1       	breq	.+118    	; 0xf3c <__stack+0x63d>
     ec6:	14 96       	adiw	r26, 0x04	; 4
     ec8:	9c 91       	ld	r25, X
     eca:	14 97       	sbiw	r26, 0x04	; 4
     ecc:	92 95       	swap	r25
     ece:	96 95       	lsr	r25
     ed0:	97 70       	andi	r25, 0x07	; 7
     ed2:	15 96       	adiw	r26, 0x05	; 5
     ed4:	8c 91       	ld	r24, X
     ed6:	15 97       	sbiw	r26, 0x05	; 5
     ed8:	88 0f       	add	r24, r24
     eda:	88 0f       	add	r24, r24
     edc:	88 0f       	add	r24, r24
     ede:	89 0f       	add	r24, r25
     ee0:	80 93 f3 00 	sts	0x00F3, r24
     ee4:	13 96       	adiw	r26, 0x03	; 3
     ee6:	9c 91       	ld	r25, X
     ee8:	13 97       	sbiw	r26, 0x03	; 3
     eea:	92 95       	swap	r25
     eec:	96 95       	lsr	r25
     eee:	97 70       	andi	r25, 0x07	; 7
     ef0:	14 96       	adiw	r26, 0x04	; 4
     ef2:	8c 91       	ld	r24, X
     ef4:	14 97       	sbiw	r26, 0x04	; 4
     ef6:	88 0f       	add	r24, r24
     ef8:	88 0f       	add	r24, r24
     efa:	88 0f       	add	r24, r24
     efc:	89 0f       	add	r24, r25
     efe:	80 93 f2 00 	sts	0x00F2, r24
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	9c 91       	ld	r25, X
     f06:	12 97       	sbiw	r26, 0x02	; 2
     f08:	92 95       	swap	r25
     f0a:	96 95       	lsr	r25
     f0c:	97 70       	andi	r25, 0x07	; 7
     f0e:	13 96       	adiw	r26, 0x03	; 3
     f10:	8c 91       	ld	r24, X
     f12:	13 97       	sbiw	r26, 0x03	; 3
     f14:	88 0f       	add	r24, r24
     f16:	88 0f       	add	r24, r24
     f18:	88 0f       	add	r24, r24
     f1a:	89 0f       	add	r24, r25
     f1c:	80 93 f1 00 	sts	0x00F1, r24
     f20:	12 96       	adiw	r26, 0x02	; 2
     f22:	8c 91       	ld	r24, X
     f24:	12 97       	sbiw	r26, 0x02	; 2
     f26:	88 0f       	add	r24, r24
     f28:	88 0f       	add	r24, r24
     f2a:	88 0f       	add	r24, r24
     f2c:	80 93 f0 00 	sts	0x00F0, r24
     f30:	ef ee       	ldi	r30, 0xEF	; 239
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 61       	ori	r24, 0x10	; 16
     f38:	80 83       	st	Z, r24
     f3a:	1c c0       	rjmp	.+56     	; 0xf74 <__stack+0x675>
          else              { Can_set_std_id(cmd->id.std);}
     f3c:	12 96       	adiw	r26, 0x02	; 2
     f3e:	8c 91       	ld	r24, X
     f40:	12 97       	sbiw	r26, 0x02	; 2
     f42:	86 95       	lsr	r24
     f44:	86 95       	lsr	r24
     f46:	86 95       	lsr	r24
     f48:	13 96       	adiw	r26, 0x03	; 3
     f4a:	9c 91       	ld	r25, X
     f4c:	13 97       	sbiw	r26, 0x03	; 3
     f4e:	e0 e2       	ldi	r30, 0x20	; 32
     f50:	9e 9f       	mul	r25, r30
     f52:	80 0d       	add	r24, r0
     f54:	11 24       	eor	r1, r1
     f56:	80 93 f3 00 	sts	0x00F3, r24
     f5a:	12 96       	adiw	r26, 0x02	; 2
     f5c:	8c 91       	ld	r24, X
     f5e:	12 97       	sbiw	r26, 0x02	; 2
     f60:	82 95       	swap	r24
     f62:	88 0f       	add	r24, r24
     f64:	80 7e       	andi	r24, 0xE0	; 224
     f66:	80 93 f2 00 	sts	0x00F2, r24
     f6a:	ef ee       	ldi	r30, 0xEF	; 239
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	8f 7e       	andi	r24, 0xEF	; 239
     f72:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	9b 81       	ldd	r25, Y+3	; 0x03
     f7a:	92 95       	swap	r25
     f7c:	96 95       	lsr	r25
     f7e:	97 70       	andi	r25, 0x07	; 7
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	88 0f       	add	r24, r24
     f84:	88 0f       	add	r24, r24
     f86:	88 0f       	add	r24, r24
     f88:	89 0f       	add	r24, r25
     f8a:	80 93 f7 00 	sts	0x00F7, r24
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	92 95       	swap	r25
     f92:	96 95       	lsr	r25
     f94:	97 70       	andi	r25, 0x07	; 7
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	88 0f       	add	r24, r24
     f9a:	88 0f       	add	r24, r24
     f9c:	88 0f       	add	r24, r24
     f9e:	89 0f       	add	r24, r25
     fa0:	80 93 f6 00 	sts	0x00F6, r24
     fa4:	99 81       	ldd	r25, Y+1	; 0x01
     fa6:	92 95       	swap	r25
     fa8:	96 95       	lsr	r25
     faa:	97 70       	andi	r25, 0x07	; 7
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	88 0f       	add	r24, r24
     fb0:	88 0f       	add	r24, r24
     fb2:	88 0f       	add	r24, r24
     fb4:	89 0f       	add	r24, r25
     fb6:	80 93 f5 00 	sts	0x00F5, r24
     fba:	29 81       	ldd	r18, Y+1	; 0x01
     fbc:	22 0f       	add	r18, r18
     fbe:	22 0f       	add	r18, r18
     fc0:	22 0f       	add	r18, r18
     fc2:	84 ef       	ldi	r24, 0xF4	; 244
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     fca:	ef ee       	ldi	r30, 0xEF	; 239
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	30 81       	ld	r19, Z
     fd0:	16 96       	adiw	r26, 0x06	; 6
     fd2:	2c 91       	ld	r18, X
     fd4:	23 2b       	or	r18, r19
     fd6:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     fd8:	dc 01       	movw	r26, r24
     fda:	2c 91       	ld	r18, X
     fdc:	2b 7f       	andi	r18, 0xFB	; 251
     fde:	2c 93       	st	X, r18
          Can_set_idemsk();
     fe0:	2c 91       	ld	r18, X
     fe2:	21 60       	ori	r18, 0x01	; 1
     fe4:	2c 93       	st	X, r18
          Can_config_rx();       
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 73       	andi	r24, 0x3F	; 63
     fea:	80 83       	st	Z, r24
     fec:	80 81       	ld	r24, Z
     fee:	80 68       	ori	r24, 0x80	; 128
     ff0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ff2:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     ff4:	78 c2       	rjmp	.+1264   	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ff6:	1b 96       	adiw	r26, 0x0b	; 11
     ff8:	8c 91       	ld	r24, X
     ffa:	1b 97       	sbiw	r26, 0x0b	; 11
     ffc:	88 23       	and	r24, r24
     ffe:	d9 f1       	breq	.+118    	; 0x1076 <__stack+0x777>
    1000:	14 96       	adiw	r26, 0x04	; 4
    1002:	9c 91       	ld	r25, X
    1004:	14 97       	sbiw	r26, 0x04	; 4
    1006:	92 95       	swap	r25
    1008:	96 95       	lsr	r25
    100a:	97 70       	andi	r25, 0x07	; 7
    100c:	15 96       	adiw	r26, 0x05	; 5
    100e:	8c 91       	ld	r24, X
    1010:	15 97       	sbiw	r26, 0x05	; 5
    1012:	88 0f       	add	r24, r24
    1014:	88 0f       	add	r24, r24
    1016:	88 0f       	add	r24, r24
    1018:	89 0f       	add	r24, r25
    101a:	80 93 f3 00 	sts	0x00F3, r24
    101e:	13 96       	adiw	r26, 0x03	; 3
    1020:	9c 91       	ld	r25, X
    1022:	13 97       	sbiw	r26, 0x03	; 3
    1024:	92 95       	swap	r25
    1026:	96 95       	lsr	r25
    1028:	97 70       	andi	r25, 0x07	; 7
    102a:	14 96       	adiw	r26, 0x04	; 4
    102c:	8c 91       	ld	r24, X
    102e:	14 97       	sbiw	r26, 0x04	; 4
    1030:	88 0f       	add	r24, r24
    1032:	88 0f       	add	r24, r24
    1034:	88 0f       	add	r24, r24
    1036:	89 0f       	add	r24, r25
    1038:	80 93 f2 00 	sts	0x00F2, r24
    103c:	12 96       	adiw	r26, 0x02	; 2
    103e:	9c 91       	ld	r25, X
    1040:	12 97       	sbiw	r26, 0x02	; 2
    1042:	92 95       	swap	r25
    1044:	96 95       	lsr	r25
    1046:	97 70       	andi	r25, 0x07	; 7
    1048:	13 96       	adiw	r26, 0x03	; 3
    104a:	8c 91       	ld	r24, X
    104c:	13 97       	sbiw	r26, 0x03	; 3
    104e:	88 0f       	add	r24, r24
    1050:	88 0f       	add	r24, r24
    1052:	88 0f       	add	r24, r24
    1054:	89 0f       	add	r24, r25
    1056:	80 93 f1 00 	sts	0x00F1, r24
    105a:	12 96       	adiw	r26, 0x02	; 2
    105c:	8c 91       	ld	r24, X
    105e:	12 97       	sbiw	r26, 0x02	; 2
    1060:	88 0f       	add	r24, r24
    1062:	88 0f       	add	r24, r24
    1064:	88 0f       	add	r24, r24
    1066:	80 93 f0 00 	sts	0x00F0, r24
    106a:	ef ee       	ldi	r30, 0xEF	; 239
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 61       	ori	r24, 0x10	; 16
    1072:	80 83       	st	Z, r24
    1074:	1c c0       	rjmp	.+56     	; 0x10ae <__stack+0x7af>
          else              { Can_set_std_id(cmd->id.std);}
    1076:	12 96       	adiw	r26, 0x02	; 2
    1078:	8c 91       	ld	r24, X
    107a:	12 97       	sbiw	r26, 0x02	; 2
    107c:	86 95       	lsr	r24
    107e:	86 95       	lsr	r24
    1080:	86 95       	lsr	r24
    1082:	13 96       	adiw	r26, 0x03	; 3
    1084:	9c 91       	ld	r25, X
    1086:	13 97       	sbiw	r26, 0x03	; 3
    1088:	e0 e2       	ldi	r30, 0x20	; 32
    108a:	9e 9f       	mul	r25, r30
    108c:	80 0d       	add	r24, r0
    108e:	11 24       	eor	r1, r1
    1090:	80 93 f3 00 	sts	0x00F3, r24
    1094:	12 96       	adiw	r26, 0x02	; 2
    1096:	8c 91       	ld	r24, X
    1098:	12 97       	sbiw	r26, 0x02	; 2
    109a:	82 95       	swap	r24
    109c:	88 0f       	add	r24, r24
    109e:	80 7e       	andi	r24, 0xE0	; 224
    10a0:	80 93 f2 00 	sts	0x00F2, r24
    10a4:	ef ee       	ldi	r30, 0xEF	; 239
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8f 7e       	andi	r24, 0xEF	; 239
    10ac:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	9b 81       	ldd	r25, Y+3	; 0x03
    10b4:	92 95       	swap	r25
    10b6:	96 95       	lsr	r25
    10b8:	97 70       	andi	r25, 0x07	; 7
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	88 0f       	add	r24, r24
    10be:	88 0f       	add	r24, r24
    10c0:	88 0f       	add	r24, r24
    10c2:	89 0f       	add	r24, r25
    10c4:	80 93 f7 00 	sts	0x00F7, r24
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	92 95       	swap	r25
    10cc:	96 95       	lsr	r25
    10ce:	97 70       	andi	r25, 0x07	; 7
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 0f       	add	r24, r24
    10d4:	88 0f       	add	r24, r24
    10d6:	88 0f       	add	r24, r24
    10d8:	89 0f       	add	r24, r25
    10da:	80 93 f6 00 	sts	0x00F6, r24
    10de:	99 81       	ldd	r25, Y+1	; 0x01
    10e0:	92 95       	swap	r25
    10e2:	96 95       	lsr	r25
    10e4:	97 70       	andi	r25, 0x07	; 7
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 0f       	add	r24, r24
    10ea:	88 0f       	add	r24, r24
    10ec:	88 0f       	add	r24, r24
    10ee:	89 0f       	add	r24, r25
    10f0:	80 93 f5 00 	sts	0x00F5, r24
    10f4:	29 81       	ldd	r18, Y+1	; 0x01
    10f6:	22 0f       	add	r18, r18
    10f8:	22 0f       	add	r18, r18
    10fa:	22 0f       	add	r18, r18
    10fc:	84 ef       	ldi	r24, 0xF4	; 244
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1104:	ef ee       	ldi	r30, 0xEF	; 239
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	30 81       	ld	r19, Z
    110a:	16 96       	adiw	r26, 0x06	; 6
    110c:	2c 91       	ld	r18, X
    110e:	16 97       	sbiw	r26, 0x06	; 6
    1110:	23 2b       	or	r18, r19
    1112:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1114:	1a 96       	adiw	r26, 0x0a	; 10
    1116:	1c 92       	st	X, r1
    1118:	dc 01       	movw	r26, r24
    111a:	2c 91       	ld	r18, X
    111c:	24 60       	ori	r18, 0x04	; 4
    111e:	2c 93       	st	X, r18
    1120:	a0 ef       	ldi	r26, 0xF0	; 240
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	2c 91       	ld	r18, X
    1126:	2b 7f       	andi	r18, 0xFB	; 251
    1128:	2c 93       	st	X, r18
          Can_set_idemsk();
    112a:	dc 01       	movw	r26, r24
    112c:	2c 91       	ld	r18, X
    112e:	21 60       	ori	r18, 0x01	; 1
    1130:	2c 93       	st	X, r18
          Can_config_rx();       
    1132:	80 81       	ld	r24, Z
    1134:	8f 73       	andi	r24, 0x3F	; 63
    1136:	80 83       	st	Z, r24
    1138:	80 81       	ld	r24, Z
    113a:	80 68       	ori	r24, 0x80	; 128
    113c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    113e:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1140:	d2 c1       	rjmp	.+932    	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1142:	1b 96       	adiw	r26, 0x0b	; 11
    1144:	8c 91       	ld	r24, X
    1146:	1b 97       	sbiw	r26, 0x0b	; 11
    1148:	88 23       	and	r24, r24
    114a:	d9 f1       	breq	.+118    	; 0x11c2 <__stack+0x8c3>
    114c:	14 96       	adiw	r26, 0x04	; 4
    114e:	9c 91       	ld	r25, X
    1150:	14 97       	sbiw	r26, 0x04	; 4
    1152:	92 95       	swap	r25
    1154:	96 95       	lsr	r25
    1156:	97 70       	andi	r25, 0x07	; 7
    1158:	15 96       	adiw	r26, 0x05	; 5
    115a:	8c 91       	ld	r24, X
    115c:	15 97       	sbiw	r26, 0x05	; 5
    115e:	88 0f       	add	r24, r24
    1160:	88 0f       	add	r24, r24
    1162:	88 0f       	add	r24, r24
    1164:	89 0f       	add	r24, r25
    1166:	80 93 f3 00 	sts	0x00F3, r24
    116a:	13 96       	adiw	r26, 0x03	; 3
    116c:	9c 91       	ld	r25, X
    116e:	13 97       	sbiw	r26, 0x03	; 3
    1170:	92 95       	swap	r25
    1172:	96 95       	lsr	r25
    1174:	97 70       	andi	r25, 0x07	; 7
    1176:	14 96       	adiw	r26, 0x04	; 4
    1178:	8c 91       	ld	r24, X
    117a:	14 97       	sbiw	r26, 0x04	; 4
    117c:	88 0f       	add	r24, r24
    117e:	88 0f       	add	r24, r24
    1180:	88 0f       	add	r24, r24
    1182:	89 0f       	add	r24, r25
    1184:	80 93 f2 00 	sts	0x00F2, r24
    1188:	12 96       	adiw	r26, 0x02	; 2
    118a:	9c 91       	ld	r25, X
    118c:	12 97       	sbiw	r26, 0x02	; 2
    118e:	92 95       	swap	r25
    1190:	96 95       	lsr	r25
    1192:	97 70       	andi	r25, 0x07	; 7
    1194:	13 96       	adiw	r26, 0x03	; 3
    1196:	8c 91       	ld	r24, X
    1198:	13 97       	sbiw	r26, 0x03	; 3
    119a:	88 0f       	add	r24, r24
    119c:	88 0f       	add	r24, r24
    119e:	88 0f       	add	r24, r24
    11a0:	89 0f       	add	r24, r25
    11a2:	80 93 f1 00 	sts	0x00F1, r24
    11a6:	12 96       	adiw	r26, 0x02	; 2
    11a8:	8c 91       	ld	r24, X
    11aa:	12 97       	sbiw	r26, 0x02	; 2
    11ac:	88 0f       	add	r24, r24
    11ae:	88 0f       	add	r24, r24
    11b0:	88 0f       	add	r24, r24
    11b2:	80 93 f0 00 	sts	0x00F0, r24
    11b6:	ef ee       	ldi	r30, 0xEF	; 239
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	80 61       	ori	r24, 0x10	; 16
    11be:	80 83       	st	Z, r24
    11c0:	1c c0       	rjmp	.+56     	; 0x11fa <__stack+0x8fb>
          else              { Can_set_std_id(cmd->id.std);}
    11c2:	12 96       	adiw	r26, 0x02	; 2
    11c4:	8c 91       	ld	r24, X
    11c6:	12 97       	sbiw	r26, 0x02	; 2
    11c8:	86 95       	lsr	r24
    11ca:	86 95       	lsr	r24
    11cc:	86 95       	lsr	r24
    11ce:	13 96       	adiw	r26, 0x03	; 3
    11d0:	9c 91       	ld	r25, X
    11d2:	13 97       	sbiw	r26, 0x03	; 3
    11d4:	e0 e2       	ldi	r30, 0x20	; 32
    11d6:	9e 9f       	mul	r25, r30
    11d8:	80 0d       	add	r24, r0
    11da:	11 24       	eor	r1, r1
    11dc:	80 93 f3 00 	sts	0x00F3, r24
    11e0:	12 96       	adiw	r26, 0x02	; 2
    11e2:	8c 91       	ld	r24, X
    11e4:	12 97       	sbiw	r26, 0x02	; 2
    11e6:	82 95       	swap	r24
    11e8:	88 0f       	add	r24, r24
    11ea:	80 7e       	andi	r24, 0xE0	; 224
    11ec:	80 93 f2 00 	sts	0x00F2, r24
    11f0:	ef ee       	ldi	r30, 0xEF	; 239
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 7e       	andi	r24, 0xEF	; 239
    11f8:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1200:	92 95       	swap	r25
    1202:	96 95       	lsr	r25
    1204:	97 70       	andi	r25, 0x07	; 7
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	88 0f       	add	r24, r24
    120a:	88 0f       	add	r24, r24
    120c:	88 0f       	add	r24, r24
    120e:	89 0f       	add	r24, r25
    1210:	80 93 f7 00 	sts	0x00F7, r24
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	92 95       	swap	r25
    1218:	96 95       	lsr	r25
    121a:	97 70       	andi	r25, 0x07	; 7
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	88 0f       	add	r24, r24
    1220:	88 0f       	add	r24, r24
    1222:	88 0f       	add	r24, r24
    1224:	89 0f       	add	r24, r25
    1226:	80 93 f6 00 	sts	0x00F6, r24
    122a:	99 81       	ldd	r25, Y+1	; 0x01
    122c:	92 95       	swap	r25
    122e:	96 95       	lsr	r25
    1230:	97 70       	andi	r25, 0x07	; 7
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	88 0f       	add	r24, r24
    1236:	88 0f       	add	r24, r24
    1238:	88 0f       	add	r24, r24
    123a:	89 0f       	add	r24, r25
    123c:	80 93 f5 00 	sts	0x00F5, r24
    1240:	29 81       	ldd	r18, Y+1	; 0x01
    1242:	22 0f       	add	r18, r18
    1244:	22 0f       	add	r18, r18
    1246:	22 0f       	add	r18, r18
    1248:	84 ef       	ldi	r24, 0xF4	; 244
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	fc 01       	movw	r30, r24
    124e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1250:	ef ee       	ldi	r30, 0xEF	; 239
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	30 81       	ld	r19, Z
    1256:	16 96       	adiw	r26, 0x06	; 6
    1258:	2c 91       	ld	r18, X
    125a:	16 97       	sbiw	r26, 0x06	; 6
    125c:	23 2b       	or	r18, r19
    125e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	1a 96       	adiw	r26, 0x0a	; 10
    1264:	2c 93       	st	X, r18
    1266:	dc 01       	movw	r26, r24
    1268:	2c 91       	ld	r18, X
    126a:	24 60       	ori	r18, 0x04	; 4
    126c:	2c 93       	st	X, r18
    126e:	a0 ef       	ldi	r26, 0xF0	; 240
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	2c 91       	ld	r18, X
    1274:	24 60       	ori	r18, 0x04	; 4
    1276:	2c 93       	st	X, r18
          Can_clear_rplv();
    1278:	20 81       	ld	r18, Z
    127a:	2f 7d       	andi	r18, 0xDF	; 223
    127c:	20 83       	st	Z, r18
          Can_set_idemsk();
    127e:	dc 01       	movw	r26, r24
    1280:	2c 91       	ld	r18, X
    1282:	21 60       	ori	r18, 0x01	; 1
    1284:	2c 93       	st	X, r18
          Can_config_rx();       
    1286:	80 81       	ld	r24, Z
    1288:	8f 73       	andi	r24, 0x3F	; 63
    128a:	80 83       	st	Z, r24
    128c:	80 81       	ld	r24, Z
    128e:	80 68       	ori	r24, 0x80	; 128
    1290:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1292:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1294:	28 c1       	rjmp	.+592    	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	8a ef       	ldi	r24, 0xFA	; 250
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	17 96       	adiw	r26, 0x07	; 7
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	18 97       	sbiw	r26, 0x08	; 8
    12a4:	e2 0f       	add	r30, r18
    12a6:	f1 1d       	adc	r31, r1
    12a8:	30 81       	ld	r19, Z
    12aa:	fc 01       	movw	r30, r24
    12ac:	30 83       	st	Z, r19
    12ae:	2f 5f       	subi	r18, 0xFF	; 255
    12b0:	16 96       	adiw	r26, 0x06	; 6
    12b2:	3c 91       	ld	r19, X
    12b4:	16 97       	sbiw	r26, 0x06	; 6
    12b6:	23 17       	cp	r18, r19
    12b8:	88 f3       	brcs	.-30     	; 0x129c <__stack+0x99d>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    12ba:	19 82       	std	Y+1, r1	; 0x01
    12bc:	9b 81       	ldd	r25, Y+3	; 0x03
    12be:	92 95       	swap	r25
    12c0:	96 95       	lsr	r25
    12c2:	97 70       	andi	r25, 0x07	; 7
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	88 0f       	add	r24, r24
    12c8:	88 0f       	add	r24, r24
    12ca:	88 0f       	add	r24, r24
    12cc:	89 0f       	add	r24, r25
    12ce:	80 93 f7 00 	sts	0x00F7, r24
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	92 95       	swap	r25
    12d6:	96 95       	lsr	r25
    12d8:	97 70       	andi	r25, 0x07	; 7
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	88 0f       	add	r24, r24
    12de:	88 0f       	add	r24, r24
    12e0:	88 0f       	add	r24, r24
    12e2:	89 0f       	add	r24, r25
    12e4:	80 93 f6 00 	sts	0x00F6, r24
    12e8:	99 81       	ldd	r25, Y+1	; 0x01
    12ea:	92 95       	swap	r25
    12ec:	96 95       	lsr	r25
    12ee:	97 70       	andi	r25, 0x07	; 7
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	88 0f       	add	r24, r24
    12f4:	88 0f       	add	r24, r24
    12f6:	88 0f       	add	r24, r24
    12f8:	89 0f       	add	r24, r25
    12fa:	80 93 f5 00 	sts	0x00F5, r24
    12fe:	29 81       	ldd	r18, Y+1	; 0x01
    1300:	22 0f       	add	r18, r18
    1302:	22 0f       	add	r18, r18
    1304:	22 0f       	add	r18, r18
    1306:	84 ef       	ldi	r24, 0xF4	; 244
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    130e:	ef ee       	ldi	r30, 0xEF	; 239
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	30 81       	ld	r19, Z
    1314:	16 96       	adiw	r26, 0x06	; 6
    1316:	2c 91       	ld	r18, X
    1318:	16 97       	sbiw	r26, 0x06	; 6
    131a:	23 2b       	or	r18, r19
    131c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    131e:	21 e0       	ldi	r18, 0x01	; 1
    1320:	1a 96       	adiw	r26, 0x0a	; 10
    1322:	2c 93       	st	X, r18
    1324:	dc 01       	movw	r26, r24
    1326:	2c 91       	ld	r18, X
    1328:	24 60       	ori	r18, 0x04	; 4
    132a:	2c 93       	st	X, r18
    132c:	a0 ef       	ldi	r26, 0xF0	; 240
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	2c 91       	ld	r18, X
    1332:	24 60       	ori	r18, 0x04	; 4
    1334:	2c 93       	st	X, r18
          Can_set_rplv();
    1336:	20 81       	ld	r18, Z
    1338:	20 62       	ori	r18, 0x20	; 32
    133a:	20 83       	st	Z, r18
          Can_clear_idemsk();
    133c:	dc 01       	movw	r26, r24
    133e:	2c 91       	ld	r18, X
    1340:	2e 7f       	andi	r18, 0xFE	; 254
    1342:	2c 93       	st	X, r18
          Can_config_rx();       
    1344:	80 81       	ld	r24, Z
    1346:	8f 73       	andi	r24, 0x3F	; 63
    1348:	80 83       	st	Z, r24
    134a:	80 81       	ld	r24, Z
    134c:	80 68       	ori	r24, 0x80	; 128
    134e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1350:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    1352:	c9 c0       	rjmp	.+402    	; 0x14e6 <__stack+0xbe7>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1354:	1b 96       	adiw	r26, 0x0b	; 11
    1356:	8c 91       	ld	r24, X
    1358:	1b 97       	sbiw	r26, 0x0b	; 11
    135a:	88 23       	and	r24, r24
    135c:	d9 f1       	breq	.+118    	; 0x13d4 <__stack+0xad5>
    135e:	14 96       	adiw	r26, 0x04	; 4
    1360:	9c 91       	ld	r25, X
    1362:	14 97       	sbiw	r26, 0x04	; 4
    1364:	92 95       	swap	r25
    1366:	96 95       	lsr	r25
    1368:	97 70       	andi	r25, 0x07	; 7
    136a:	15 96       	adiw	r26, 0x05	; 5
    136c:	8c 91       	ld	r24, X
    136e:	15 97       	sbiw	r26, 0x05	; 5
    1370:	88 0f       	add	r24, r24
    1372:	88 0f       	add	r24, r24
    1374:	88 0f       	add	r24, r24
    1376:	89 0f       	add	r24, r25
    1378:	80 93 f3 00 	sts	0x00F3, r24
    137c:	13 96       	adiw	r26, 0x03	; 3
    137e:	9c 91       	ld	r25, X
    1380:	13 97       	sbiw	r26, 0x03	; 3
    1382:	92 95       	swap	r25
    1384:	96 95       	lsr	r25
    1386:	97 70       	andi	r25, 0x07	; 7
    1388:	14 96       	adiw	r26, 0x04	; 4
    138a:	8c 91       	ld	r24, X
    138c:	14 97       	sbiw	r26, 0x04	; 4
    138e:	88 0f       	add	r24, r24
    1390:	88 0f       	add	r24, r24
    1392:	88 0f       	add	r24, r24
    1394:	89 0f       	add	r24, r25
    1396:	80 93 f2 00 	sts	0x00F2, r24
    139a:	12 96       	adiw	r26, 0x02	; 2
    139c:	9c 91       	ld	r25, X
    139e:	12 97       	sbiw	r26, 0x02	; 2
    13a0:	92 95       	swap	r25
    13a2:	96 95       	lsr	r25
    13a4:	97 70       	andi	r25, 0x07	; 7
    13a6:	13 96       	adiw	r26, 0x03	; 3
    13a8:	8c 91       	ld	r24, X
    13aa:	13 97       	sbiw	r26, 0x03	; 3
    13ac:	88 0f       	add	r24, r24
    13ae:	88 0f       	add	r24, r24
    13b0:	88 0f       	add	r24, r24
    13b2:	89 0f       	add	r24, r25
    13b4:	80 93 f1 00 	sts	0x00F1, r24
    13b8:	12 96       	adiw	r26, 0x02	; 2
    13ba:	8c 91       	ld	r24, X
    13bc:	12 97       	sbiw	r26, 0x02	; 2
    13be:	88 0f       	add	r24, r24
    13c0:	88 0f       	add	r24, r24
    13c2:	88 0f       	add	r24, r24
    13c4:	80 93 f0 00 	sts	0x00F0, r24
    13c8:	ef ee       	ldi	r30, 0xEF	; 239
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	80 61       	ori	r24, 0x10	; 16
    13d0:	80 83       	st	Z, r24
    13d2:	1c c0       	rjmp	.+56     	; 0x140c <__stack+0xb0d>
          else              { Can_set_std_id(cmd->id.std);}
    13d4:	12 96       	adiw	r26, 0x02	; 2
    13d6:	8c 91       	ld	r24, X
    13d8:	12 97       	sbiw	r26, 0x02	; 2
    13da:	86 95       	lsr	r24
    13dc:	86 95       	lsr	r24
    13de:	86 95       	lsr	r24
    13e0:	13 96       	adiw	r26, 0x03	; 3
    13e2:	9c 91       	ld	r25, X
    13e4:	13 97       	sbiw	r26, 0x03	; 3
    13e6:	e0 e2       	ldi	r30, 0x20	; 32
    13e8:	9e 9f       	mul	r25, r30
    13ea:	80 0d       	add	r24, r0
    13ec:	11 24       	eor	r1, r1
    13ee:	80 93 f3 00 	sts	0x00F3, r24
    13f2:	12 96       	adiw	r26, 0x02	; 2
    13f4:	8c 91       	ld	r24, X
    13f6:	12 97       	sbiw	r26, 0x02	; 2
    13f8:	82 95       	swap	r24
    13fa:	88 0f       	add	r24, r24
    13fc:	80 7e       	andi	r24, 0xE0	; 224
    13fe:	80 93 f2 00 	sts	0x00F2, r24
    1402:	ef ee       	ldi	r30, 0xEF	; 239
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	8f 7e       	andi	r24, 0xEF	; 239
    140a:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    140c:	16 96       	adiw	r26, 0x06	; 6
    140e:	8c 91       	ld	r24, X
    1410:	16 97       	sbiw	r26, 0x06	; 6
    1412:	88 23       	and	r24, r24
    1414:	91 f0       	breq	.+36     	; 0x143a <__stack+0xb3b>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	8a ef       	ldi	r24, 0xFA	; 250
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	17 96       	adiw	r26, 0x07	; 7
    141e:	ed 91       	ld	r30, X+
    1420:	fc 91       	ld	r31, X
    1422:	18 97       	sbiw	r26, 0x08	; 8
    1424:	e2 0f       	add	r30, r18
    1426:	f1 1d       	adc	r31, r1
    1428:	30 81       	ld	r19, Z
    142a:	fc 01       	movw	r30, r24
    142c:	30 83       	st	Z, r19
    142e:	2f 5f       	subi	r18, 0xFF	; 255
    1430:	16 96       	adiw	r26, 0x06	; 6
    1432:	3c 91       	ld	r19, X
    1434:	16 97       	sbiw	r26, 0x06	; 6
    1436:	23 17       	cp	r18, r19
    1438:	88 f3       	brcs	.-30     	; 0x141c <__stack+0xb1d>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	9b 81       	ldd	r25, Y+3	; 0x03
    1440:	92 95       	swap	r25
    1442:	96 95       	lsr	r25
    1444:	97 70       	andi	r25, 0x07	; 7
    1446:	8c 81       	ldd	r24, Y+4	; 0x04
    1448:	88 0f       	add	r24, r24
    144a:	88 0f       	add	r24, r24
    144c:	88 0f       	add	r24, r24
    144e:	89 0f       	add	r24, r25
    1450:	80 93 f7 00 	sts	0x00F7, r24
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	92 95       	swap	r25
    1458:	96 95       	lsr	r25
    145a:	97 70       	andi	r25, 0x07	; 7
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 0f       	add	r24, r24
    1460:	88 0f       	add	r24, r24
    1462:	88 0f       	add	r24, r24
    1464:	89 0f       	add	r24, r25
    1466:	80 93 f6 00 	sts	0x00F6, r24
    146a:	99 81       	ldd	r25, Y+1	; 0x01
    146c:	92 95       	swap	r25
    146e:	96 95       	lsr	r25
    1470:	97 70       	andi	r25, 0x07	; 7
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	88 0f       	add	r24, r24
    1476:	88 0f       	add	r24, r24
    1478:	88 0f       	add	r24, r24
    147a:	89 0f       	add	r24, r25
    147c:	80 93 f5 00 	sts	0x00F5, r24
    1480:	29 81       	ldd	r18, Y+1	; 0x01
    1482:	22 0f       	add	r18, r18
    1484:	22 0f       	add	r18, r18
    1486:	22 0f       	add	r18, r18
    1488:	84 ef       	ldi	r24, 0xF4	; 244
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	fc 01       	movw	r30, r24
    148e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1490:	ef ee       	ldi	r30, 0xEF	; 239
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	30 81       	ld	r19, Z
    1496:	16 96       	adiw	r26, 0x06	; 6
    1498:	2c 91       	ld	r18, X
    149a:	16 97       	sbiw	r26, 0x06	; 6
    149c:	23 2b       	or	r18, r19
    149e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    14a0:	21 e0       	ldi	r18, 0x01	; 1
    14a2:	1a 96       	adiw	r26, 0x0a	; 10
    14a4:	2c 93       	st	X, r18
    14a6:	dc 01       	movw	r26, r24
    14a8:	2c 91       	ld	r18, X
    14aa:	24 60       	ori	r18, 0x04	; 4
    14ac:	2c 93       	st	X, r18
    14ae:	a0 ef       	ldi	r26, 0xF0	; 240
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	2c 91       	ld	r18, X
    14b4:	24 60       	ori	r18, 0x04	; 4
    14b6:	2c 93       	st	X, r18
          Can_set_rplv();
    14b8:	20 81       	ld	r18, Z
    14ba:	20 62       	ori	r18, 0x20	; 32
    14bc:	20 83       	st	Z, r18
          Can_set_idemsk();
    14be:	dc 01       	movw	r26, r24
    14c0:	2c 91       	ld	r18, X
    14c2:	21 60       	ori	r18, 0x01	; 1
    14c4:	2c 93       	st	X, r18
          Can_config_rx();       
    14c6:	80 81       	ld	r24, Z
    14c8:	8f 73       	andi	r24, 0x3F	; 63
    14ca:	80 83       	st	Z, r24
    14cc:	80 81       	ld	r24, Z
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    14d2:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    14d4:	08 c0       	rjmp	.+16     	; 0x14e6 <__stack+0xbe7>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    14d6:	19 96       	adiw	r26, 0x09	; 9
    14d8:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    14da:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <__stack+0xbe7>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    14de:	8f e1       	ldi	r24, 0x1F	; 31
    14e0:	19 96       	adiw	r26, 0x09	; 9
    14e2:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    14e6:	0f 90       	pop	r0
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    14f4:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    14f6:	88 23       	and	r24, r24
    14f8:	09 f4       	brne	.+2      	; 0x14fc <can_get_status+0xe>
    14fa:	d5 c0       	rjmp	.+426    	; 0x16a6 <can_get_status+0x1b8>
    14fc:	8f 31       	cpi	r24, 0x1F	; 31
    14fe:	09 f4       	brne	.+2      	; 0x1502 <can_get_status+0x14>
    1500:	d4 c0       	rjmp	.+424    	; 0x16aa <can_get_status+0x1bc>
    1502:	8f 3f       	cpi	r24, 0xFF	; 255
    1504:	09 f4       	brne	.+2      	; 0x1508 <can_get_status+0x1a>
    1506:	d3 c0       	rjmp	.+422    	; 0x16ae <can_get_status+0x1c0>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    1508:	62 95       	swap	r22
    150a:	60 7f       	andi	r22, 0xF0	; 240
    150c:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    1510:	0e 94 0e 04 	call	0x81c	; 0x81c <can_get_mob_status>
    
    switch (a_status)
    1514:	80 32       	cpi	r24, 0x20	; 32
    1516:	61 f0       	breq	.+24     	; 0x1530 <can_get_status+0x42>
    1518:	20 f4       	brcc	.+8      	; 0x1522 <can_get_status+0x34>
    151a:	88 23       	and	r24, r24
    151c:	09 f4       	brne	.+2      	; 0x1520 <can_get_status+0x32>
    151e:	c9 c0       	rjmp	.+402    	; 0x16b2 <can_get_status+0x1c4>
    1520:	b8 c0       	rjmp	.+368    	; 0x1692 <can_get_status+0x1a4>
    1522:	80 34       	cpi	r24, 0x40	; 64
    1524:	09 f4       	brne	.+2      	; 0x1528 <can_get_status+0x3a>
    1526:	aa c0       	rjmp	.+340    	; 0x167c <can_get_status+0x18e>
    1528:	80 3a       	cpi	r24, 0xA0	; 160
    152a:	09 f4       	brne	.+2      	; 0x152e <can_get_status+0x40>
    152c:	4e c0       	rjmp	.+156    	; 0x15ca <can_get_status+0xdc>
    152e:	b1 c0       	rjmp	.+354    	; 0x1692 <can_get_status+0x1a4>
        case MOB_RX_COMPLETED:
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
            cmd->ctrl.rtr = Can_get_rtr();
    1530:	80 91 f0 00 	lds	r24, 0x00F0
    1534:	82 fb       	bst	r24, 2
    1536:	88 27       	eor	r24, r24
    1538:	80 f9       	bld	r24, 0
    153a:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    153c:	80 91 ef 00 	lds	r24, 0x00EF
    1540:	84 ff       	sbrs	r24, 4
    1542:	2d c0       	rjmp	.+90     	; 0x159e <can_get_status+0xb0>
            {
	            cmd->ctrl.ide = 1; // extended frame
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    1548:	e3 ef       	ldi	r30, 0xF3	; 243
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	86 95       	lsr	r24
    1550:	86 95       	lsr	r24
    1552:	86 95       	lsr	r24
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	a2 ef       	ldi	r26, 0xF2	; 242
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	8c 91       	ld	r24, X
    155c:	90 81       	ld	r25, Z
    155e:	86 95       	lsr	r24
    1560:	86 95       	lsr	r24
    1562:	86 95       	lsr	r24
    1564:	20 e2       	ldi	r18, 0x20	; 32
    1566:	92 9f       	mul	r25, r18
    1568:	80 0d       	add	r24, r0
    156a:	11 24       	eor	r1, r1
    156c:	8c 83       	std	Y+4, r24	; 0x04
    156e:	e1 ef       	ldi	r30, 0xF1	; 241
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	9c 91       	ld	r25, X
    1576:	86 95       	lsr	r24
    1578:	86 95       	lsr	r24
    157a:	86 95       	lsr	r24
    157c:	20 e2       	ldi	r18, 0x20	; 32
    157e:	92 9f       	mul	r25, r18
    1580:	80 0d       	add	r24, r0
    1582:	11 24       	eor	r1, r1
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	80 91 f0 00 	lds	r24, 0x00F0
    158a:	90 81       	ld	r25, Z
    158c:	86 95       	lsr	r24
    158e:	86 95       	lsr	r24
    1590:	86 95       	lsr	r24
    1592:	20 e2       	ldi	r18, 0x20	; 32
    1594:	92 9f       	mul	r25, r18
    1596:	80 0d       	add	r24, r0
    1598:	11 24       	eor	r1, r1
    159a:	8a 83       	std	Y+2, r24	; 0x02
    159c:	07 c0       	rjmp	.+14     	; 0x15ac <can_get_status+0xbe>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    159e:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    15a0:	e3 ef       	ldi	r30, 0xF3	; 243
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	80 91 f2 00 	lds	r24, 0x00F2
    15aa:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    15ac:	80 e2       	ldi	r24, 0x20	; 32
    15ae:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    15b0:	8f 81       	ldd	r24, Y+7	; 0x07
    15b2:	98 85       	ldd	r25, Y+8	; 0x08
    15b4:	0e 94 24 04 	call	0x848	; 0x848 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    15b8:	ef ee       	ldi	r30, 0xEF	; 239
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	8f 73       	andi	r24, 0x3F	; 63
    15c0:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    15c2:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    15c6:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    15c8:	75 c0       	rjmp	.+234    	; 0x16b4 <can_get_status+0x1c6>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    15ca:	80 91 f0 00 	lds	r24, 0x00F0
    15ce:	82 fb       	bst	r24, 2
    15d0:	88 27       	eor	r24, r24
    15d2:	80 f9       	bld	r24, 0
    15d4:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    15d6:	80 91 ef 00 	lds	r24, 0x00EF
    15da:	84 ff       	sbrs	r24, 4
    15dc:	2d c0       	rjmp	.+90     	; 0x1638 <can_get_status+0x14a>
            {
                cmd->ctrl.ide = 1; // extended frame
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    15e2:	e3 ef       	ldi	r30, 0xF3	; 243
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	86 95       	lsr	r24
    15ea:	86 95       	lsr	r24
    15ec:	86 95       	lsr	r24
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	a2 ef       	ldi	r26, 0xF2	; 242
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	8c 91       	ld	r24, X
    15f6:	90 81       	ld	r25, Z
    15f8:	86 95       	lsr	r24
    15fa:	86 95       	lsr	r24
    15fc:	86 95       	lsr	r24
    15fe:	20 e2       	ldi	r18, 0x20	; 32
    1600:	92 9f       	mul	r25, r18
    1602:	80 0d       	add	r24, r0
    1604:	11 24       	eor	r1, r1
    1606:	8c 83       	std	Y+4, r24	; 0x04
    1608:	e1 ef       	ldi	r30, 0xF1	; 241
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	9c 91       	ld	r25, X
    1610:	86 95       	lsr	r24
    1612:	86 95       	lsr	r24
    1614:	86 95       	lsr	r24
    1616:	20 e2       	ldi	r18, 0x20	; 32
    1618:	92 9f       	mul	r25, r18
    161a:	80 0d       	add	r24, r0
    161c:	11 24       	eor	r1, r1
    161e:	8b 83       	std	Y+3, r24	; 0x03
    1620:	80 91 f0 00 	lds	r24, 0x00F0
    1624:	90 81       	ld	r25, Z
    1626:	86 95       	lsr	r24
    1628:	86 95       	lsr	r24
    162a:	86 95       	lsr	r24
    162c:	20 e2       	ldi	r18, 0x20	; 32
    162e:	92 9f       	mul	r25, r18
    1630:	80 0d       	add	r24, r0
    1632:	11 24       	eor	r1, r1
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	13 c0       	rjmp	.+38     	; 0x165e <can_get_status+0x170>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1638:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    163a:	e3 ef       	ldi	r30, 0xF3	; 243
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	82 95       	swap	r24
    1642:	86 95       	lsr	r24
    1644:	87 70       	andi	r24, 0x07	; 7
    1646:	8b 83       	std	Y+3, r24	; 0x03
    1648:	80 91 f2 00 	lds	r24, 0x00F2
    164c:	90 81       	ld	r25, Z
    164e:	99 0f       	add	r25, r25
    1650:	99 0f       	add	r25, r25
    1652:	99 0f       	add	r25, r25
    1654:	82 95       	swap	r24
    1656:	86 95       	lsr	r24
    1658:	87 70       	andi	r24, 0x07	; 7
    165a:	89 0f       	add	r24, r25
    165c:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    165e:	80 ea       	ldi	r24, 0xA0	; 160
    1660:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1662:	8f 81       	ldd	r24, Y+7	; 0x07
    1664:	98 85       	ldd	r25, Y+8	; 0x08
    1666:	0e 94 24 04 	call	0x848	; 0x848 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    166a:	ef ee       	ldi	r30, 0xEF	; 239
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8f 73       	andi	r24, 0x3F	; 63
    1672:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    1674:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    1678:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    167a:	1c c0       	rjmp	.+56     	; 0x16b4 <can_get_status+0x1c6>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    167c:	80 e4       	ldi	r24, 0x40	; 64
    167e:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1680:	ef ee       	ldi	r30, 0xEF	; 239
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8f 73       	andi	r24, 0x3F	; 63
    1688:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    168a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    168e:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1690:	11 c0       	rjmp	.+34     	; 0x16b4 <can_get_status+0x1c6>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1692:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    1694:	ef ee       	ldi	r30, 0xEF	; 239
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8f 73       	andi	r24, 0x3F	; 63
    169c:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    169e:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    16a2:	82 e0       	ldi	r24, 0x02	; 2
            break;
    16a4:	07 c0       	rjmp	.+14     	; 0x16b4 <can_get_status+0x1c6>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	05 c0       	rjmp	.+10     	; 0x16b4 <can_get_status+0x1c6>
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <can_get_status+0x1c6>
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	01 c0       	rjmp	.+2      	; 0x16b4 <can_get_status+0x1c6>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <send_tm_transaction_response>:
}

// Helper
static void send_tm_transaction_response(uint8_t req_by, uint8_t code)
{			
	send_arr[7] = (SELF_ID << 4)|req_by;
    16ba:	80 61       	ori	r24, 0x10	; 16
    16bc:	80 93 2d 01 	sts	0x012D, r24
	send_arr[6] = MT_COM;
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	80 93 2c 01 	sts	0x012C, r24
	send_arr[5] = TM_TRANSACTION_RESP;
    16c6:	83 e1       	ldi	r24, 0x13	; 19
    16c8:	80 93 2b 01 	sts	0x012B, r24
	send_arr[4] = CURRENT_MINUTE;
    16cc:	80 91 6f 01 	lds	r24, 0x016F
    16d0:	80 93 2a 01 	sts	0x012A, r24
	send_arr[3] = 0;
    16d4:	10 92 29 01 	sts	0x0129, r1
	send_arr[2] = 0;
    16d8:	10 92 28 01 	sts	0x0128, r1
	send_arr[1] = 0;
    16dc:	10 92 27 01 	sts	0x0127, r1
	send_arr[0] = code;
    16e0:	60 93 26 01 	sts	0x0126, r22
	can_send_message(&(send_arr[0]), CAN1_MB7);
    16e4:	61 e1       	ldi	r22, 0x11	; 17
    16e6:	86 e2       	ldi	r24, 0x26	; 38
    16e8:	91 e0       	ldi	r25, 0x01	; 1
    16ea:	0e 94 82 00 	call	0x104	; 0x104 <can_send_message>
    16ee:	08 95       	ret

000016f0 <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    16f0:	83 e1       	ldi	r24, 0x13	; 19
    16f2:	80 93 2d 01 	sts	0x012D, r24
	send_arr[6] = MT_COM;
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	80 93 2c 01 	sts	0x012C, r24
	send_arr[5] = RESPONSE;
    16fc:	84 e0       	ldi	r24, 0x04	; 4
    16fe:	80 93 2b 01 	sts	0x012B, r24
	send_arr[4] = CURRENT_MINUTE;
    1702:	80 91 6f 01 	lds	r24, 0x016F
    1706:	80 93 2a 01 	sts	0x012A, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    170a:	61 e1       	ldi	r22, 0x11	; 17
    170c:	86 e2       	ldi	r24, 0x26	; 38
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	0e 94 82 00 	call	0x104	; 0x104 <can_send_message>
	send_now = 0;
    1714:	10 92 72 01 	sts	0x0172, r1
    1718:	08 95       	ret

0000171a <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|HK_TASK_ID;
    171a:	84 e1       	ldi	r24, 0x14	; 20
    171c:	80 93 2d 01 	sts	0x012D, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	80 93 2c 01 	sts	0x012C, r24
	send_arr[4] = CURRENT_MINUTE;
    1726:	80 91 6f 01 	lds	r24, 0x016F
    172a:	80 93 2a 01 	sts	0x012A, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    172e:	60 e1       	ldi	r22, 0x10	; 16
    1730:	86 e2       	ldi	r24, 0x26	; 38
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	0e 94 82 00 	call	0x104	; 0x104 <can_send_message>
	send_hk = 0;
    1738:	10 92 14 02 	sts	0x0214, r1
    173c:	08 95       	ret

0000173e <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	00 d0       	rcall	.+0      	; 0x1748 <send_sensor_data+0xa>
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[3];
    174c:	10 91 64 01 	lds	r17, 0x0164
	req_by = data_req_arr[7] >> 4;
    1750:	00 91 68 01 	lds	r16, 0x0168
    1754:	02 95       	swap	r16
    1756:	0f 70       	andi	r16, 0x0F	; 15
	
	if(sensor_name == EPS_TEMP)
    1758:	1a 30       	cpi	r17, 0x0A	; 10
    175a:	69 f4       	brne	.+26     	; 0x1776 <send_sensor_data+0x38>
	{
		spi_retrieve_temp(&high, &low);
    175c:	be 01       	movw	r22, r28
    175e:	6e 5f       	subi	r22, 0xFE	; 254
    1760:	7f 4f       	sbci	r23, 0xFF	; 255
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	80 93 27 01 	sts	0x0127, r24
		send_arr[0] = low;
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	80 93 26 01 	sts	0x0126, r24
	//}
	//if(sensor_name == OBC_I)
	//{
	//}

	send_arr[7] = (SELF_ID << 4)|req_by;
    1776:	00 61       	ori	r16, 0x10	; 16
    1778:	00 93 2d 01 	sts	0x012D, r16
	send_arr[6] = MT_DATA;
    177c:	10 92 2c 01 	sts	0x012C, r1
	send_arr[5] = sensor_name;
    1780:	10 93 2b 01 	sts	0x012B, r17
	send_arr[4] = CURRENT_MINUTE;			
    1784:	80 91 6f 01 	lds	r24, 0x016F
    1788:	80 93 2a 01 	sts	0x012A, r24
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    178c:	6a e0       	ldi	r22, 0x0A	; 10
    178e:	86 e2       	ldi	r24, 0x26	; 38
    1790:	91 e0       	ldi	r25, 0x01	; 1
    1792:	0e 94 82 00 	call	0x104	; 0x104 <can_send_message>
	send_data = 0;
    1796:	10 92 36 02 	sts	0x0236, r1
	
	return;
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	0f 91       	pop	r16
    17a6:	08 95       	ret

000017a8 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    17a8:	83 e1       	ldi	r24, 0x13	; 19
    17aa:	80 93 2d 01 	sts	0x012D, r24
	send_arr[6] = MT_DATA;
    17ae:	10 92 2c 01 	sts	0x012C, r1
	send_arr[5] = COMS_PACKET;
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	80 93 2b 01 	sts	0x012B, r24
	send_arr[4] = CURRENT_MINUTE;
    17b8:	80 91 6f 01 	lds	r24, 0x016F
    17bc:	80 93 2a 01 	sts	0x012A, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    17c0:	80 91 76 01 	lds	r24, 0x0176
    17c4:	80 93 26 01 	sts	0x0126, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    17c8:	6a e0       	ldi	r22, 0x0A	; 10
    17ca:	86 e2       	ldi	r24, 0x26	; 38
    17cc:	91 e0       	ldi	r25, 0x01	; 1
    17ce:	0e 94 82 00 	call	0x104	; 0x104 <can_send_message>
	msg_received = 0;
    17d2:	10 92 0d 01 	sts	0x010D, r1
    17d6:	08 95       	ret

000017d8 <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    17d8:	90 91 ff 02 	lds	r25, 0x02FF
	read_ptr = read_arr[0];
    17dc:	e0 91 fc 02 	lds	r30, 0x02FC
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    17e2:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    17e4:	20 91 03 03 	lds	r18, 0x0303
    17e8:	20 61       	ori	r18, 0x10	; 16
    17ea:	20 93 2d 01 	sts	0x012D, r18
	send_arr[6] = MT_COM;
    17ee:	22 e0       	ldi	r18, 0x02	; 2
    17f0:	20 93 2c 01 	sts	0x012C, r18
	send_arr[5] = ACK_READ;
    17f4:	26 e0       	ldi	r18, 0x06	; 6
    17f6:	20 93 2b 01 	sts	0x012B, r18
	send_arr[4] = CURRENT_MINUTE;
    17fa:	20 91 6f 01 	lds	r18, 0x016F
    17fe:	20 93 2a 01 	sts	0x012A, r18
	send_arr[3] = passkey;
    1802:	90 93 29 01 	sts	0x0129, r25
	send_arr[0] = read_val;
    1806:	80 93 26 01 	sts	0x0126, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    180a:	61 e1       	ldi	r22, 0x11	; 17
    180c:	86 e2       	ldi	r24, 0x26	; 38
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	0e 94 82 00 	call	0x104	; 0x104 <can_send_message>
	read_response = 0;
    1814:	10 92 7c 01 	sts	0x017C, r1
    1818:	08 95       	ret

0000181a <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    181a:	80 91 04 01 	lds	r24, 0x0104
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    181e:	20 91 01 01 	lds	r18, 0x0101
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    1822:	90 91 03 03 	lds	r25, 0x0303
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    1826:	e0 91 02 01 	lds	r30, 0x0102
    182a:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    182c:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    182e:	90 61       	ori	r25, 0x10	; 16
    1830:	90 93 2d 01 	sts	0x012D, r25
	send_arr[6] = MT_COM;
    1834:	92 e0       	ldi	r25, 0x02	; 2
    1836:	90 93 2c 01 	sts	0x012C, r25
	send_arr[5] = ACK_WRITE;
    183a:	98 e0       	ldi	r25, 0x08	; 8
    183c:	90 93 2b 01 	sts	0x012B, r25
	send_arr[4] = CURRENT_MINUTE;
    1840:	90 91 6f 01 	lds	r25, 0x016F
    1844:	90 93 2a 01 	sts	0x012A, r25
	send_arr[3] = passkey;
    1848:	80 93 29 01 	sts	0x0129, r24
	send_arr[0] = ret_val;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 93 26 01 	sts	0x0126, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1852:	61 e1       	ldi	r22, 0x11	; 17
    1854:	86 e2       	ldi	r24, 0x26	; 38
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	0e 94 82 00 	call	0x104	; 0x104 <can_send_message>
	write_response = 0;
    185c:	10 92 48 01 	sts	0x0148, r1
    1860:	08 95       	ret

00001862 <set_sensor_highf>:

void set_sensor_highf(void)
{
	uint8_t sensor_name, req_by;
	uint16_t high = 0;
	sensor_name = sensh_arr[3];
    1862:	20 91 4c 01 	lds	r18, 0x014C
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    1866:	2a 30       	cpi	r18, 0x0A	; 10
    1868:	69 f4       	brne	.+26     	; 0x1884 <set_sensor_highf+0x22>
	{
		epstemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    186a:	80 91 4a 01 	lds	r24, 0x014A
    186e:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_high |= (high << 8);
    1870:	98 2f       	mov	r25, r24
    1872:	88 27       	eor	r24, r24
	sensor_name = sensh_arr[3];
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_high = sensh_arr[0];
    1874:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		epstemp_high |= (high << 8);
    1878:	83 2b       	or	r24, r19
    187a:	90 93 2f 01 	sts	0x012F, r25
    187e:	80 93 2e 01 	sts	0x012E, r24
    1882:	1e c0       	rjmp	.+60     	; 0x18c0 <set_sensor_highf+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    1884:	21 30       	cpi	r18, 0x01	; 1
    1886:	69 f4       	brne	.+26     	; 0x18a2 <set_sensor_highf+0x40>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1888:	80 91 4a 01 	lds	r24, 0x014A
    188c:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);		
    188e:	98 2f       	mov	r25, r24
    1890:	88 27       	eor	r24, r24
		epstemp_high |= (high << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_high = sensh_arr[0];
    1892:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);		
    1896:	83 2b       	or	r24, r19
    1898:	90 93 71 01 	sts	0x0171, r25
    189c:	80 93 70 01 	sts	0x0170, r24
    18a0:	1e c0       	rjmp	.+60     	; 0x18de <set_sensor_highf+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	69 f4       	brne	.+26     	; 0x18c0 <set_sensor_highf+0x5e>
	{
		pxi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18a6:	80 91 4a 01 	lds	r24, 0x014A
    18aa:	90 e0       	ldi	r25, 0x00	; 0
		pxi_high |= (high << 8);
    18ac:	98 2f       	mov	r25, r24
    18ae:	88 27       	eor	r24, r24
		pxv_high |= (high << 8);		
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_high = sensh_arr[0];
    18b0:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
    18b4:	83 2b       	or	r24, r19
    18b6:	90 93 6a 02 	sts	0x026A, r25
    18ba:	80 93 69 02 	sts	0x0269, r24
    18be:	1e c0       	rjmp	.+60     	; 0x18fc <set_sensor_highf+0x9a>
	}
	if(sensor_name == PANELY_V)
    18c0:	23 30       	cpi	r18, 0x03	; 3
    18c2:	69 f4       	brne	.+26     	; 0x18de <set_sensor_highf+0x7c>
	{
		pyv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18c4:	80 91 4a 01 	lds	r24, 0x014A
    18c8:	90 e0       	ldi	r25, 0x00	; 0
		pyv_high |= (high << 8);
    18ca:	98 2f       	mov	r25, r24
    18cc:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_high = sensh_arr[0];
    18ce:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
    18d2:	83 2b       	or	r24, r19
    18d4:	90 93 11 01 	sts	0x0111, r25
    18d8:	80 93 10 01 	sts	0x0110, r24
    18dc:	1e c0       	rjmp	.+60     	; 0x191a <set_sensor_highf+0xb8>
	}
	if(sensor_name == PANELY_I)
    18de:	24 30       	cpi	r18, 0x04	; 4
    18e0:	69 f4       	brne	.+26     	; 0x18fc <set_sensor_highf+0x9a>
	{
		pyi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18e2:	80 91 4a 01 	lds	r24, 0x014A
    18e6:	90 e0       	ldi	r25, 0x00	; 0
		pyi_high |= (high << 8);
    18e8:	98 2f       	mov	r25, r24
    18ea:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_high = sensh_arr[0];
    18ec:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
    18f0:	83 2b       	or	r24, r19
    18f2:	90 93 fb 02 	sts	0x02FB, r25
    18f6:	80 93 fa 02 	sts	0x02FA, r24
    18fa:	1e c0       	rjmp	.+60     	; 0x1938 <set_sensor_highf+0xd6>
	}
	if(sensor_name == BATTM_V)
    18fc:	25 30       	cpi	r18, 0x05	; 5
    18fe:	69 f4       	brne	.+26     	; 0x191a <set_sensor_highf+0xb8>
	{
		battmv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1900:	80 91 4a 01 	lds	r24, 0x014A
    1904:	90 e0       	ldi	r25, 0x00	; 0
		battmv_high |= (high << 8);
    1906:	98 2f       	mov	r25, r24
    1908:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_high = sensh_arr[0];
    190a:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
    190e:	83 2b       	or	r24, r19
    1910:	90 93 6e 01 	sts	0x016E, r25
    1914:	80 93 6d 01 	sts	0x016D, r24
    1918:	1e c0       	rjmp	.+60     	; 0x1956 <set_sensor_highf+0xf4>
	}
	if(sensor_name == BATT_V)
    191a:	26 30       	cpi	r18, 0x06	; 6
    191c:	69 f4       	brne	.+26     	; 0x1938 <set_sensor_highf+0xd6>
	{
		battv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    191e:	80 91 4a 01 	lds	r24, 0x014A
    1922:	90 e0       	ldi	r25, 0x00	; 0
		battv_high |= (high << 8);
    1924:	98 2f       	mov	r25, r24
    1926:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_high = sensh_arr[0];
    1928:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
    192c:	83 2b       	or	r24, r19
    192e:	90 93 41 02 	sts	0x0241, r25
    1932:	80 93 40 02 	sts	0x0240, r24
    1936:	1e c0       	rjmp	.+60     	; 0x1974 <set_sensor_highf+0x112>
	}
	if(sensor_name == BATT_I)
    1938:	21 31       	cpi	r18, 0x11	; 17
    193a:	69 f4       	brne	.+26     	; 0x1956 <set_sensor_highf+0xf4>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    193c:	80 91 4a 01 	lds	r24, 0x014A
    1940:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);
    1942:	98 2f       	mov	r25, r24
    1944:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_high = sensh_arr[0];
    1946:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
    194a:	83 2b       	or	r24, r19
    194c:	90 93 71 01 	sts	0x0171, r25
    1950:	80 93 70 01 	sts	0x0170, r24
    1954:	1e c0       	rjmp	.+60     	; 0x1992 <set_sensor_highf+0x130>
	}
	if(sensor_name == BATT_TEMP)
    1956:	29 30       	cpi	r18, 0x09	; 9
    1958:	69 f4       	brne	.+26     	; 0x1974 <set_sensor_highf+0x112>
	{
		battemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    195a:	80 91 4a 01 	lds	r24, 0x014A
    195e:	90 e0       	ldi	r25, 0x00	; 0
		battemp_high |= (high << 8);
    1960:	98 2f       	mov	r25, r24
    1962:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_high = sensh_arr[0];
    1964:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
    1968:	83 2b       	or	r24, r19
    196a:	90 93 13 01 	sts	0x0113, r25
    196e:	80 93 12 01 	sts	0x0112, r24
    1972:	1e c0       	rjmp	.+60     	; 0x19b0 <set_sensor_highf+0x14e>
	}
	if(sensor_name == COMS_V)
    1974:	2b 30       	cpi	r18, 0x0B	; 11
    1976:	69 f4       	brne	.+26     	; 0x1992 <set_sensor_highf+0x130>
	{
		comsv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1978:	80 91 4a 01 	lds	r24, 0x014A
    197c:	90 e0       	ldi	r25, 0x00	; 0
		comsv_high |= (high << 8);
    197e:	98 2f       	mov	r25, r24
    1980:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_high = sensh_arr[0];
    1982:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
    1986:	83 2b       	or	r24, r19
    1988:	90 93 54 01 	sts	0x0154, r25
    198c:	80 93 53 01 	sts	0x0153, r24
    1990:	1e c0       	rjmp	.+60     	; 0x19ce <set_sensor_highf+0x16c>
	}
	if(sensor_name == COMS_I)
    1992:	2c 30       	cpi	r18, 0x0C	; 12
    1994:	69 f4       	brne	.+26     	; 0x19b0 <set_sensor_highf+0x14e>
	{
		comsi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1996:	80 91 4a 01 	lds	r24, 0x014A
    199a:	90 e0       	ldi	r25, 0x00	; 0
		comsi_high |= (high << 8);
    199c:	98 2f       	mov	r25, r24
    199e:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_high = sensh_arr[0];
    19a0:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
    19a4:	83 2b       	or	r24, r19
    19a6:	90 93 3b 01 	sts	0x013B, r25
    19aa:	80 93 3a 01 	sts	0x013A, r24
    19ae:	1e c0       	rjmp	.+60     	; 0x19ec <set_sensor_highf+0x18a>
	}
	if(sensor_name == PAY_V)
    19b0:	2d 30       	cpi	r18, 0x0D	; 13
    19b2:	69 f4       	brne	.+26     	; 0x19ce <set_sensor_highf+0x16c>
	{
		payv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19b4:	80 91 4a 01 	lds	r24, 0x014A
    19b8:	90 e0       	ldi	r25, 0x00	; 0
		payv_high |= (high << 8);
    19ba:	98 2f       	mov	r25, r24
    19bc:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_high = sensh_arr[0];
    19be:	30 91 49 01 	lds	r19, 0x0149
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
    19c2:	83 2b       	or	r24, r19
    19c4:	90 93 0f 01 	sts	0x010F, r25
    19c8:	80 93 0e 01 	sts	0x010E, r24
    19cc:	1e c0       	rjmp	.+60     	; 0x1a0a <set_sensor_highf+0x1a8>
	}
	if(sensor_name == PAY_I)
    19ce:	2e 30       	cpi	r18, 0x0E	; 14
    19d0:	69 f4       	brne	.+26     	; 0x19ec <set_sensor_highf+0x18a>
	{
		payi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19d2:	80 91 4a 01 	lds	r24, 0x014A
    19d6:	90 e0       	ldi	r25, 0x00	; 0
		payi_high |= (high << 8);
    19d8:	98 2f       	mov	r25, r24
    19da:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_high = sensh_arr[0];
    19dc:	20 91 49 01 	lds	r18, 0x0149
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
    19e0:	82 2b       	or	r24, r18
    19e2:	90 93 54 02 	sts	0x0254, r25
    19e6:	80 93 53 02 	sts	0x0253, r24
    19ea:	1d c0       	rjmp	.+58     	; 0x1a26 <set_sensor_highf+0x1c4>
	}
	if(sensor_name == OBC_V)
    19ec:	2f 30       	cpi	r18, 0x0F	; 15
    19ee:	69 f4       	brne	.+26     	; 0x1a0a <set_sensor_highf+0x1a8>
	{
		obcv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19f0:	80 91 4a 01 	lds	r24, 0x014A
    19f4:	90 e0       	ldi	r25, 0x00	; 0
		obcv_high |= (high << 8);
    19f6:	98 2f       	mov	r25, r24
    19f8:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_high = sensh_arr[0];
    19fa:	20 91 49 01 	lds	r18, 0x0149
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
    19fe:	82 2b       	or	r24, r18
    1a00:	90 93 47 01 	sts	0x0147, r25
    1a04:	80 93 46 01 	sts	0x0146, r24
    1a08:	0e c0       	rjmp	.+28     	; 0x1a26 <set_sensor_highf+0x1c4>
	}
	if(sensor_name == OBC_I)
    1a0a:	20 31       	cpi	r18, 0x10	; 16
    1a0c:	61 f4       	brne	.+24     	; 0x1a26 <set_sensor_highf+0x1c4>
	{
		obci_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a0e:	80 91 4a 01 	lds	r24, 0x014A
    1a12:	90 e0       	ldi	r25, 0x00	; 0
		obci_high |= (high << 8);
    1a14:	98 2f       	mov	r25, r24
    1a16:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_high = sensh_arr[0];
    1a18:	20 91 49 01 	lds	r18, 0x0149
		high = (uint16_t)sensh_arr[1];
		obci_high |= (high << 8);
    1a1c:	82 2b       	or	r24, r18
    1a1e:	90 93 16 02 	sts	0x0216, r25
    1a22:	80 93 15 02 	sts	0x0215, r24
	}
	
	set_sens_h = 0;
    1a26:	10 92 33 02 	sts	0x0233, r1
    1a2a:	08 95       	ret

00001a2c <set_sensor_lowf>:

void set_sensor_lowf(void)
{
	uint8_t sensor_name, req_by;
	uint16_t low = 0;
	sensor_name = sensl_arr[3];
    1a2c:	20 91 63 02 	lds	r18, 0x0263
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    1a30:	2a 30       	cpi	r18, 0x0A	; 10
    1a32:	69 f4       	brne	.+26     	; 0x1a4e <set_sensor_lowf+0x22>
	{
		epstemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a34:	80 91 61 02 	lds	r24, 0x0261
    1a38:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_low |= (low << 8);
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	88 27       	eor	r24, r24
	sensor_name = sensl_arr[3];
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_low = sensl_arr[0];
    1a3e:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		epstemp_low |= (low << 8);
    1a42:	83 2b       	or	r24, r19
    1a44:	90 93 31 01 	sts	0x0131, r25
    1a48:	80 93 30 01 	sts	0x0130, r24
    1a4c:	1e c0       	rjmp	.+60     	; 0x1a8a <set_sensor_lowf+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    1a4e:	21 30       	cpi	r18, 0x01	; 1
    1a50:	69 f4       	brne	.+26     	; 0x1a6c <set_sensor_lowf+0x40>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a52:	80 91 61 02 	lds	r24, 0x0261
    1a56:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1a58:	98 2f       	mov	r25, r24
    1a5a:	88 27       	eor	r24, r24
		epstemp_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_low = sensl_arr[0];
    1a5c:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1a60:	83 2b       	or	r24, r19
    1a62:	90 93 18 02 	sts	0x0218, r25
    1a66:	80 93 17 02 	sts	0x0217, r24
    1a6a:	1e c0       	rjmp	.+60     	; 0x1aa8 <set_sensor_lowf+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    1a6c:	22 30       	cpi	r18, 0x02	; 2
    1a6e:	69 f4       	brne	.+26     	; 0x1a8a <set_sensor_lowf+0x5e>
	{
		pxi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a70:	80 91 61 02 	lds	r24, 0x0261
    1a74:	90 e0       	ldi	r25, 0x00	; 0
		pxi_low |= (low << 8);
    1a76:	98 2f       	mov	r25, r24
    1a78:	88 27       	eor	r24, r24
		pxv_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_low = sensl_arr[0];
    1a7a:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
    1a7e:	83 2b       	or	r24, r19
    1a80:	90 93 45 01 	sts	0x0145, r25
    1a84:	80 93 44 01 	sts	0x0144, r24
    1a88:	1e c0       	rjmp	.+60     	; 0x1ac6 <set_sensor_lowf+0x9a>
	}
	if(sensor_name == PANELY_V)
    1a8a:	23 30       	cpi	r18, 0x03	; 3
    1a8c:	69 f4       	brne	.+26     	; 0x1aa8 <set_sensor_lowf+0x7c>
	{
		pyv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a8e:	80 91 61 02 	lds	r24, 0x0261
    1a92:	90 e0       	ldi	r25, 0x00	; 0
		pyv_low |= (low << 8);
    1a94:	98 2f       	mov	r25, r24
    1a96:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_low = sensl_arr[0];
    1a98:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
    1a9c:	83 2b       	or	r24, r19
    1a9e:	90 93 1a 02 	sts	0x021A, r25
    1aa2:	80 93 19 02 	sts	0x0219, r24
    1aa6:	1e c0       	rjmp	.+60     	; 0x1ae4 <set_sensor_lowf+0xb8>
	}
	if(sensor_name == PANELY_I)
    1aa8:	24 30       	cpi	r18, 0x04	; 4
    1aaa:	69 f4       	brne	.+26     	; 0x1ac6 <set_sensor_lowf+0x9a>
	{
		pyi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1aac:	80 91 61 02 	lds	r24, 0x0261
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
		pyi_low |= (low << 8);
    1ab2:	98 2f       	mov	r25, r24
    1ab4:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_low = sensl_arr[0];
    1ab6:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
    1aba:	83 2b       	or	r24, r19
    1abc:	90 93 2a 02 	sts	0x022A, r25
    1ac0:	80 93 29 02 	sts	0x0229, r24
    1ac4:	1e c0       	rjmp	.+60     	; 0x1b02 <set_sensor_lowf+0xd6>
	}
	if(sensor_name == BATTM_V)
    1ac6:	25 30       	cpi	r18, 0x05	; 5
    1ac8:	69 f4       	brne	.+26     	; 0x1ae4 <set_sensor_lowf+0xb8>
	{
		battmv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1aca:	80 91 61 02 	lds	r24, 0x0261
    1ace:	90 e0       	ldi	r25, 0x00	; 0
		battmv_low |= (low << 8);
    1ad0:	98 2f       	mov	r25, r24
    1ad2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_low = sensl_arr[0];
    1ad4:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
    1ad8:	83 2b       	or	r24, r19
    1ada:	90 93 6c 01 	sts	0x016C, r25
    1ade:	80 93 6b 01 	sts	0x016B, r24
    1ae2:	1e c0       	rjmp	.+60     	; 0x1b20 <set_sensor_lowf+0xf4>
	}
	if(sensor_name == BATT_V)
    1ae4:	26 30       	cpi	r18, 0x06	; 6
    1ae6:	69 f4       	brne	.+26     	; 0x1b02 <set_sensor_lowf+0xd6>
	{
		battv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1ae8:	80 91 61 02 	lds	r24, 0x0261
    1aec:	90 e0       	ldi	r25, 0x00	; 0
		battv_low |= (low << 8);
    1aee:	98 2f       	mov	r25, r24
    1af0:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_low = sensl_arr[0];
    1af2:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
    1af6:	83 2b       	or	r24, r19
    1af8:	90 93 0a 01 	sts	0x010A, r25
    1afc:	80 93 09 01 	sts	0x0109, r24
    1b00:	1e c0       	rjmp	.+60     	; 0x1b3e <set_sensor_lowf+0x112>
	}
	if(sensor_name == BATT_I)
    1b02:	21 31       	cpi	r18, 0x11	; 17
    1b04:	69 f4       	brne	.+26     	; 0x1b20 <set_sensor_lowf+0xf4>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b06:	80 91 61 02 	lds	r24, 0x0261
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1b0c:	98 2f       	mov	r25, r24
    1b0e:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_low = sensl_arr[0];
    1b10:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1b14:	83 2b       	or	r24, r19
    1b16:	90 93 18 02 	sts	0x0218, r25
    1b1a:	80 93 17 02 	sts	0x0217, r24
    1b1e:	1e c0       	rjmp	.+60     	; 0x1b5c <set_sensor_lowf+0x130>
	}
	if(sensor_name == BATT_TEMP)
    1b20:	29 30       	cpi	r18, 0x09	; 9
    1b22:	69 f4       	brne	.+26     	; 0x1b3e <set_sensor_lowf+0x112>
	{
		battemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b24:	80 91 61 02 	lds	r24, 0x0261
    1b28:	90 e0       	ldi	r25, 0x00	; 0
		battemp_low |= (low << 8);
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_low = sensl_arr[0];
    1b2e:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
    1b32:	83 2b       	or	r24, r19
    1b34:	90 93 43 02 	sts	0x0243, r25
    1b38:	80 93 42 02 	sts	0x0242, r24
    1b3c:	1e c0       	rjmp	.+60     	; 0x1b7a <set_sensor_lowf+0x14e>
	}
	if(sensor_name == COMS_V)
    1b3e:	2b 30       	cpi	r18, 0x0B	; 11
    1b40:	69 f4       	brne	.+26     	; 0x1b5c <set_sensor_lowf+0x130>
	{
		comsv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b42:	80 91 61 02 	lds	r24, 0x0261
    1b46:	90 e0       	ldi	r25, 0x00	; 0
		comsv_low |= (low << 8);
    1b48:	98 2f       	mov	r25, r24
    1b4a:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_low = sensl_arr[0];
    1b4c:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
    1b50:	83 2b       	or	r24, r19
    1b52:	90 93 6a 01 	sts	0x016A, r25
    1b56:	80 93 69 01 	sts	0x0169, r24
    1b5a:	1e c0       	rjmp	.+60     	; 0x1b98 <set_sensor_lowf+0x16c>
	}
	if(sensor_name == COMS_I)
    1b5c:	2c 30       	cpi	r18, 0x0C	; 12
    1b5e:	69 f4       	brne	.+26     	; 0x1b7a <set_sensor_lowf+0x14e>
	{
		comsi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b60:	80 91 61 02 	lds	r24, 0x0261
    1b64:	90 e0       	ldi	r25, 0x00	; 0
		comsi_low |= (low << 8);
    1b66:	98 2f       	mov	r25, r24
    1b68:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_low = sensl_arr[0];
    1b6a:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
    1b6e:	83 2b       	or	r24, r19
    1b70:	90 93 52 02 	sts	0x0252, r25
    1b74:	80 93 51 02 	sts	0x0251, r24
    1b78:	1e c0       	rjmp	.+60     	; 0x1bb6 <set_sensor_lowf+0x18a>
	}
	if(sensor_name == PAY_V)
    1b7a:	2d 30       	cpi	r18, 0x0D	; 13
    1b7c:	69 f4       	brne	.+26     	; 0x1b98 <set_sensor_lowf+0x16c>
	{
		payv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b7e:	80 91 61 02 	lds	r24, 0x0261
    1b82:	90 e0       	ldi	r25, 0x00	; 0
		payv_low |= (low << 8);
    1b84:	98 2f       	mov	r25, r24
    1b86:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_low = sensl_arr[0];
    1b88:	30 91 60 02 	lds	r19, 0x0260
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
    1b8c:	83 2b       	or	r24, r19
    1b8e:	90 93 0c 01 	sts	0x010C, r25
    1b92:	80 93 0b 01 	sts	0x010B, r24
    1b96:	1e c0       	rjmp	.+60     	; 0x1bd4 <set_sensor_lowf+0x1a8>
	}
	if(sensor_name == PAY_I)
    1b98:	2e 30       	cpi	r18, 0x0E	; 14
    1b9a:	69 f4       	brne	.+26     	; 0x1bb6 <set_sensor_lowf+0x18a>
	{
		payi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b9c:	80 91 61 02 	lds	r24, 0x0261
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
		payi_low |= (low << 8);
    1ba2:	98 2f       	mov	r25, r24
    1ba4:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_low = sensl_arr[0];
    1ba6:	20 91 60 02 	lds	r18, 0x0260
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
    1baa:	82 2b       	or	r24, r18
    1bac:	90 93 75 01 	sts	0x0175, r25
    1bb0:	80 93 74 01 	sts	0x0174, r24
    1bb4:	1d c0       	rjmp	.+58     	; 0x1bf0 <set_sensor_lowf+0x1c4>
	}
	if(sensor_name == OBC_V)
    1bb6:	2f 30       	cpi	r18, 0x0F	; 15
    1bb8:	69 f4       	brne	.+26     	; 0x1bd4 <set_sensor_lowf+0x1a8>
	{
		obcv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bba:	80 91 61 02 	lds	r24, 0x0261
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
		obcv_low |= (low << 8);
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_low = sensl_arr[0];
    1bc4:	20 91 60 02 	lds	r18, 0x0260
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
    1bc8:	82 2b       	or	r24, r18
    1bca:	90 93 5f 02 	sts	0x025F, r25
    1bce:	80 93 5e 02 	sts	0x025E, r24
    1bd2:	0e c0       	rjmp	.+28     	; 0x1bf0 <set_sensor_lowf+0x1c4>
	}
	if(sensor_name == OBC_I)
    1bd4:	20 31       	cpi	r18, 0x10	; 16
    1bd6:	61 f4       	brne	.+24     	; 0x1bf0 <set_sensor_lowf+0x1c4>
	{
		obci_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bd8:	80 91 61 02 	lds	r24, 0x0261
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
		obci_low |= (low << 8);
    1bde:	98 2f       	mov	r25, r24
    1be0:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_low = sensl_arr[0];
    1be2:	20 91 60 02 	lds	r18, 0x0260
		low = (uint16_t)sensl_arr[1];
		obci_low |= (low << 8);
    1be6:	82 2b       	or	r24, r18
    1be8:	90 93 4d 02 	sts	0x024D, r25
    1bec:	80 93 4c 02 	sts	0x024C, r24
	}
	
	set_sens_l = 0;
    1bf0:	10 92 37 02 	sts	0x0237, r1
    1bf4:	08 95       	ret

00001bf6 <set_varf>:
}

void set_varf(void)
{
	uint8_t var_name;
	var_name = setv_arr[3];
    1bf6:	80 91 3f 01 	lds	r24, 0x013F
	
	if(var_name == MPPTA)
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	29 f4       	brne	.+10     	; 0x1c08 <set_varf+0x12>
	{
		mppta = setv_arr[0];
    1bfe:	80 91 3c 01 	lds	r24, 0x013C
    1c02:	80 93 55 02 	sts	0x0255, r24
    1c06:	06 c0       	rjmp	.+12     	; 0x1c14 <set_varf+0x1e>
	}
	if(var_name == MPPTB)
    1c08:	82 30       	cpi	r24, 0x02	; 2
    1c0a:	21 f4       	brne	.+8      	; 0x1c14 <set_varf+0x1e>
	{
		mpptb = setv_arr[0];
    1c0c:	80 91 3c 01 	lds	r24, 0x013C
    1c10:	80 93 25 01 	sts	0x0125, r24
	}
	
	set_var = 0;
    1c14:	10 92 24 01 	sts	0x0124, r1
    1c18:	08 95       	ret

00001c1a <receive_tm_msg>:
}

void receive_tm_msg(void)
{
	uint8_t req_by, obc_seq_count;
	req_by = new_tm_msg[7] >> 4;
    1c1a:	80 91 3f 02 	lds	r24, 0x023F
    1c1e:	82 95       	swap	r24
    1c20:	8f 70       	andi	r24, 0x0F	; 15
	obc_seq_count = new_tm_msg[4];
    1c22:	90 91 3c 02 	lds	r25, 0x023C

	if(obc_seq_count > (tm_sequence_count + 1))
    1c26:	29 2f       	mov	r18, r25
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	60 91 00 01 	lds	r22, 0x0100
    1c2e:	46 2f       	mov	r20, r22
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	4f 5f       	subi	r20, 0xFF	; 255
    1c34:	5f 4f       	sbci	r21, 0xFF	; 255
    1c36:	42 17       	cp	r20, r18
    1c38:	53 07       	cpc	r21, r19
    1c3a:	84 f4       	brge	.+32     	; 0x1c5c <receive_tm_msg+0x42>
	{
		send_tm_transaction_response(req_by, 0xFF);		// Let the OBC know that the transaction failed.
    1c3c:	6f ef       	ldi	r22, 0xFF	; 255
    1c3e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <send_tm_transaction_response>
		tm_sequence_count = 0;
    1c42:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1c46:	10 92 73 01 	sts	0x0173, r1
    1c4a:	ed e7       	ldi	r30, 0x7D	; 125
    1c4c:	f1 e0       	ldi	r31, 0x01	; 1
    1c4e:	8c e0       	ldi	r24, 0x0C	; 12
    1c50:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1c52:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1c54:	e8 17       	cp	r30, r24
    1c56:	f9 07       	cpc	r31, r25
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <receive_tm_msg+0x38>
    1c5a:	08 95       	ret
		tm_sequence_count = 0;
		new_tm_msgf = 0;
		clear_current_tm();
		return;
	}
	if(current_tm_fullf == 1)
    1c5c:	70 91 35 02 	lds	r23, 0x0235
    1c60:	71 30       	cpi	r23, 0x01	; 1
    1c62:	41 f4       	brne	.+16     	; 0x1c74 <receive_tm_msg+0x5a>
	{
		send_tm_transaction_response(req_by, 0xFF);
    1c64:	6f ef       	ldi	r22, 0xFF	; 255
    1c66:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <send_tm_transaction_response>
		tm_sequence_count = 0;
    1c6a:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1c6e:	10 92 73 01 	sts	0x0173, r1
		return;
    1c72:	08 95       	ret
	}
	
	if(((obc_seq_count == 0) && (tm_sequence_count == 0)) || (obc_seq_count == (tm_sequence_count + 1)))
    1c74:	91 11       	cpse	r25, r1
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <receive_tm_msg+0x62>
    1c78:	66 23       	and	r22, r22
    1c7a:	39 f0       	breq	.+14     	; 0x1c8a <receive_tm_msg+0x70>
    1c7c:	24 17       	cp	r18, r20
    1c7e:	35 07       	cpc	r19, r21
    1c80:	a1 f5       	brne	.+104    	; 0x1cea <receive_tm_msg+0xd0>
	{
		tm_sequence_count = obc_seq_count;
    1c82:	90 93 00 01 	sts	0x0100, r25
		if(obc_seq_count < 35)
    1c86:	93 32       	cpi	r25, 0x23	; 35
    1c88:	98 f4       	brcc	.+38     	; 0x1cb0 <receive_tm_msg+0x96>
		{
			current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1c8a:	f9 01       	movw	r30, r18
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	ee 0f       	add	r30, r30
    1c92:	ff 1f       	adc	r31, r31
    1c94:	e3 58       	subi	r30, 0x83	; 131
    1c96:	fe 4f       	sbci	r31, 0xFE	; 254
    1c98:	40 91 38 02 	lds	r20, 0x0238
    1c9c:	40 83       	st	Z, r20
			current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1c9e:	40 91 39 02 	lds	r20, 0x0239
    1ca2:	41 83       	std	Z+1, r20	; 0x01
			current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1ca4:	40 91 3a 02 	lds	r20, 0x023A
    1ca8:	42 83       	std	Z+2, r20	; 0x02
			current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1caa:	40 91 3b 02 	lds	r20, 0x023B
    1cae:	43 83       	std	Z+3, r20	; 0x03
		}
		if(obc_seq_count == 35)
    1cb0:	93 32       	cpi	r25, 0x23	; 35
    1cb2:	c1 f4       	brne	.+48     	; 0x1ce4 <receive_tm_msg+0xca>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
    1cb4:	10 92 00 01 	sts	0x0100, r1
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	90 93 35 02 	sts	0x0235, r25
			current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	ee 0f       	add	r30, r30
    1cc6:	ff 1f       	adc	r31, r31
    1cc8:	e3 58       	subi	r30, 0x83	; 131
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	90 91 38 02 	lds	r25, 0x0238
    1cd0:	90 83       	st	Z, r25
			current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1cd2:	90 91 39 02 	lds	r25, 0x0239
    1cd6:	91 83       	std	Z+1, r25	; 0x01
			current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1cd8:	90 91 3a 02 	lds	r25, 0x023A
    1cdc:	92 83       	std	Z+2, r25	; 0x02
			send_tm_transaction_response(req_by, obc_seq_count);	// Let the OBC know that the transaction succeeded.
    1cde:	63 e2       	ldi	r22, 0x23	; 35
    1ce0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <send_tm_transaction_response>
		}
		new_tm_msgf = 0;
    1ce4:	10 92 73 01 	sts	0x0173, r1
		return;
    1ce8:	08 95       	ret
	}
	else
	{
		send_tm_transaction_response(req_by, 0xFF);
    1cea:	6f ef       	ldi	r22, 0xFF	; 255
    1cec:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <send_tm_transaction_response>
		tm_sequence_count = 0;
    1cf0:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1cf4:	10 92 73 01 	sts	0x0173, r1
    1cf8:	ed e7       	ldi	r30, 0x7D	; 125
    1cfa:	f1 e0       	ldi	r31, 0x01	; 1
    1cfc:	8c e0       	ldi	r24, 0x0C	; 12
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1d00:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1d02:	e8 17       	cp	r30, r24
    1d04:	f9 07       	cpc	r31, r25
    1d06:	e1 f7       	brne	.-8      	; 0x1d00 <receive_tm_msg+0xe6>
    1d08:	08 95       	ret

00001d0a <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now == 1)
    1d0a:	80 91 72 01 	lds	r24, 0x0172
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	11 f4       	brne	.+4      	; 0x1d16 <run_commands+0xc>
		send_response();
    1d12:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <send_response>
	if (send_hk == 1)
    1d16:	80 91 14 02 	lds	r24, 0x0214
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	11 f4       	brne	.+4      	; 0x1d22 <run_commands+0x18>
		send_housekeeping();
    1d1e:	0e 94 8d 0b 	call	0x171a	; 0x171a <send_housekeeping>
	if (send_data == 1)
    1d22:	80 91 36 02 	lds	r24, 0x0236
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	11 f4       	brne	.+4      	; 0x1d2e <run_commands+0x24>
		send_sensor_data();
    1d2a:	0e 94 9f 0b 	call	0x173e	; 0x173e <send_sensor_data>
	if (msg_received == 1)
    1d2e:	80 91 0d 01 	lds	r24, 0x010D
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	11 f4       	brne	.+4      	; 0x1d3a <run_commands+0x30>
		send_coms_packet();
    1d36:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <send_coms_packet>
	if (read_response == 1)
    1d3a:	80 91 7c 01 	lds	r24, 0x017C
    1d3e:	81 30       	cpi	r24, 0x01	; 1
    1d40:	11 f4       	brne	.+4      	; 0x1d46 <run_commands+0x3c>
		send_read_response();
    1d42:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <send_read_response>
	if (write_response == 1)
    1d46:	80 91 48 01 	lds	r24, 0x0148
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <run_commands+0x48>
		send_write_response();
    1d4e:	0e 94 0d 0c 	call	0x181a	; 0x181a <send_write_response>
	if (set_sens_h == 1)
    1d52:	80 91 33 02 	lds	r24, 0x0233
    1d56:	81 30       	cpi	r24, 0x01	; 1
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <run_commands+0x54>
		set_sensor_highf();
    1d5a:	0e 94 31 0c 	call	0x1862	; 0x1862 <set_sensor_highf>
	if (set_sens_l == 1)
    1d5e:	80 91 37 02 	lds	r24, 0x0237
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	11 f4       	brne	.+4      	; 0x1d6a <run_commands+0x60>
		set_sensor_lowf();
    1d66:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <set_sensor_lowf>
	if (set_var == 1)
    1d6a:	80 91 24 01 	lds	r24, 0x0124
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	11 f4       	brne	.+4      	; 0x1d76 <run_commands+0x6c>
		set_varf();
    1d72:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <set_varf>
	if (new_tm_msgf == 1)
    1d76:	80 91 73 01 	lds	r24, 0x0173
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	11 f4       	brne	.+4      	; 0x1d82 <run_commands+0x78>
		receive_tm_msg();
    1d7e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <receive_tm_msg>
    1d82:	08 95       	ret

00001d84 <LED_set>:
}

void LED_set(uint8_t LED) 
{
	
	if(LED == 1)
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	11 f4       	brne	.+4      	; 0x1d8c <LED_set+0x8>
	{
		PORTD |= 0x01;
    1d88:	58 9a       	sbi	0x0b, 0	; 11
    1d8a:	08 95       	ret
	}
	if(LED == 2)
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <LED_set+0x10>
	{
		LEDPORT &= ~(1 << 6);
    1d90:	2e 98       	cbi	0x05, 6	; 5
    1d92:	08 95       	ret
	}
	if(LED == 3)
    1d94:	83 30       	cpi	r24, 0x03	; 3
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <LED_set+0x16>
	{
		PORTC &= ~(0x01);
    1d98:	40 98       	cbi	0x08, 0	; 8
    1d9a:	08 95       	ret

00001d9c <LED_clr>:
}

void LED_clr(uint8_t LED) 
{
	
	if(LED == 1)
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	11 f4       	brne	.+4      	; 0x1da4 <LED_clr+0x8>
	{
		PORTD &= ~(0x01);
    1da0:	58 98       	cbi	0x0b, 0	; 11
    1da2:	08 95       	ret
	}
	if(LED == 2)
    1da4:	82 30       	cpi	r24, 0x02	; 2
    1da6:	11 f4       	brne	.+4      	; 0x1dac <LED_clr+0x10>
	{
		LEDPORT |= (1 << 6);
    1da8:	2e 9a       	sbi	0x05, 6	; 5
    1daa:	08 95       	ret
	}
	if(LED == 3)
    1dac:	83 30       	cpi	r24, 0x03	; 3
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <LED_clr+0x16>
	{
		PORTC |= 0x01;
    1db0:	40 9a       	sbi	0x08, 0	; 8
    1db2:	08 95       	ret

00001db4 <can_actions_eps>:
	PORTE = 0x00;
}

void can_actions_eps(void)
{
	if (set_sens_h == 1)
    1db4:	80 91 33 02 	lds	r24, 0x0233
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	11 f4       	brne	.+4      	; 0x1dc0 <can_actions_eps+0xc>
	{
		set_sensor_highf();
    1dbc:	0e 94 31 0c 	call	0x1862	; 0x1862 <set_sensor_highf>
	}
	
	if (set_sens_l == 1)
    1dc0:	80 91 37 02 	lds	r24, 0x0237
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	11 f4       	brne	.+4      	; 0x1dcc <can_actions_eps+0x18>
	{
		set_sensor_lowf();
    1dc8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <set_sensor_lowf>
	}
	
	if (set_var == 1)
    1dcc:	80 91 24 01 	lds	r24, 0x0124
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	11 f4       	brne	.+4      	; 0x1dd8 <can_actions_eps+0x24>
	{
		set_varf();
    1dd4:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <set_varf>
    1dd8:	08 95       	ret

00001dda <main>:
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    1dda:	e1 e6       	ldi	r30, 0x61	; 97
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 e8       	ldi	r24, 0x80	; 128
    1de0:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1de2:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1de4:	8e ef       	ldi	r24, 0xFE	; 254
    1de6:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    1de8:	81 e1       	ldi	r24, 0x11	; 17
    1dea:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    1dec:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    1dee:	89 e0       	ldi	r24, 0x09	; 9
    1df0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    1df6:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    1df8:	1e b8       	out	0x0e, r1	; 14
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    1dfa:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <timer_init>

	adc_initialize();
    1dfe:	0e 94 6c 00 	call	0xd8	; 0xd8 <adc_initialize>
	can_init(0);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	0e 94 3c 04 	call	0x878	; 0x878 <can_init>
	can_init_mobs();
    1e08:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <can_init_mobs>
	spi_initialize_master();
    1e0c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <spi_initialize_master>

	// Enable the timer for mppt
	if(SELF_ID == 1)
	{
		LED_set(LED1);
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LED_set>
		mppt_timer_init();
    1e16:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <mppt_timer_init>
	}
	
	// Enable global interrupts for Timer execution
	sei();
    1e1a:	78 94       	sei
	{
		transceiver_initialize();
		coms_timer_init();
	}

	SS1_set_high();		// SPI Temp Sensor.
    1e1c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <SS1_set_high>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    1e20:	0e 94 78 02 	call	0x4f0	; 0x4f0 <can_check_general>
			trans_check();		// Check for incoming packets.	
		}

		if(SELF_ID == 1)
		{
			can_check_general();
    1e24:	0e 94 78 02 	call	0x4f0	; 0x4f0 <can_check_general>
			can_actions_eps();
    1e28:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <can_actions_eps>
			
			LED_clr(LED1);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LED_clr>
			delay_ms(1000);
    1e32:	88 ee       	ldi	r24, 0xE8	; 232
    1e34:	93 e0       	ldi	r25, 0x03	; 3
    1e36:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <delay_ms>
			adc_set_pin(2);
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	0e 94 7f 00 	call	0xfe	; 0xfe <adc_set_pin>
			adc_read(adc_result);
    1e40:	c0 e0       	ldi	r28, 0x00	; 0
    1e42:	d0 e0       	ldi	r29, 0x00	; 0
    1e44:	ce 01       	movw	r24, r28
    1e46:	0e 94 76 00 	call	0xec	; 0xec <adc_read>
			if(*adc_result > 0x10)
    1e4a:	88 81       	ld	r24, Y
    1e4c:	81 31       	cpi	r24, 0x11	; 17
    1e4e:	c0 f0       	brcs	.+48     	; 0x1e80 <main+0xa6>
			{
				LED_set(LED1);
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LED_set>
			}
			else
			{
				LED_clr(LED1);
			}
			set_duty_cycleA(0xBF);
    1e56:	8f eb       	ldi	r24, 0xBF	; 191
    1e58:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <set_duty_cycleA>
			set_duty_cycleB(0x1F);
    1e5c:	8f e1       	ldi	r24, 0x1F	; 31
    1e5e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <set_duty_cycleB>
			delay_ms(1000);
    1e62:	88 ee       	ldi	r24, 0xE8	; 232
    1e64:	93 e0       	ldi	r25, 0x03	; 3
    1e66:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <delay_ms>
			adc_set_pin(3);
    1e6a:	83 e0       	ldi	r24, 0x03	; 3
    1e6c:	0e 94 7f 00 	call	0xfe	; 0xfe <adc_set_pin>
			adc_read(adc_result);
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	0e 94 76 00 	call	0xec	; 0xec <adc_read>
			if(*adc_result > 0x10)
			{
				LED_set(LED1);
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <LED_set>
    1e7e:	17 c0       	rjmp	.+46     	; 0x1eae <main+0xd4>
			{
				LED_set(LED1);
			}
			else
			{
				LED_clr(LED1);
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LED_clr>
			}
			set_duty_cycleA(0xBF);
    1e86:	8f eb       	ldi	r24, 0xBF	; 191
    1e88:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <set_duty_cycleA>
			set_duty_cycleB(0x1F);
    1e8c:	8f e1       	ldi	r24, 0x1F	; 31
    1e8e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <set_duty_cycleB>
			delay_ms(1000);
    1e92:	88 ee       	ldi	r24, 0xE8	; 232
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <delay_ms>
			adc_set_pin(3);
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	0e 94 7f 00 	call	0xfe	; 0xfe <adc_set_pin>
			adc_read(adc_result);
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 76 00 	call	0xec	; 0xec <adc_read>
			{
				LED_set(LED1);
			}
			else
			{
				LED_clr(LED1);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LED_clr>
			}
			set_duty_cycleA(0x1F);
    1eae:	8f e1       	ldi	r24, 0x1F	; 31
    1eb0:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <set_duty_cycleA>
			set_duty_cycleB(0xBF);
    1eb4:	8f eb       	ldi	r24, 0xBF	; 191
    1eb6:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <set_duty_cycleB>
			
		}
		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    1eba:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <run_commands>
	}
    1ebe:	b0 cf       	rjmp	.-160    	; 0x1e20 <main+0x46>

00001ec0 <mppt_timer_init>:
#endif

// This function initializes a 8-bit timer used for generating PWM for mppt.
void mppt_timer_init(void) {
	
	TCNT0 = 0x0000; //Clear timer
    1ec0:	16 bc       	out	0x26, r1	; 38
	//For now, hard code in the values that the "duty cycle" registers will be set to. This will be updated later by the algorithm
	OCR0A = 0x3F; // b00111111
    1ec2:	8f e3       	ldi	r24, 0x3F	; 63
    1ec4:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xBF; // b10111111
    1ec6:	8f eb       	ldi	r24, 0xBF	; 191
    1ec8:	88 bd       	out	0x28, r24	; 40
	
	TCCR0A = 0x00; // b00000000 Don't connect any pins, but set to normal mode as a test
    1eca:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; // b00000101 Set clock pre-scaling to 1024 for now, will be 1 later for "fast" output
    1ecc:	85 e0       	ldi	r24, 0x05	; 5
    1ece:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x07; // b00000111 Enable the A and B compare match interrupts. Also enable the timer overflow interrupt
    1ed0:	87 e0       	ldi	r24, 0x07	; 7
    1ed2:	80 93 6e 00 	sts	0x006E, r24
    1ed6:	08 95       	ret

00001ed8 <set_duty_cycleA>:
}

//This function will set the duty cycle of MPPTA
//Duty is an 8 bit number, so 0x7F is a duty cycle of 0.5
void set_duty_cycleA(uint8_t duty){
	OCR0A = duty;	
    1ed8:	87 bd       	out	0x27, r24	; 39
    1eda:	08 95       	ret

00001edc <set_duty_cycleB>:
}

//This function will set the duty cycle of MPPTB
void set_duty_cycleB(uint8_t duty){
	OCR0B = duty;
    1edc:	88 bd       	out	0x28, r24	; 40
    1ede:	08 95       	ret

00001ee0 <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    1ee0:	85 b7       	in	r24, 0x35	; 53
    1ee2:	8f 77       	andi	r24, 0x7F	; 127
    1ee4:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    1ee6:	83 e5       	ldi	r24, 0x53	; 83
    1ee8:	8c bd       	out	0x2c, r24	; 44
    1eea:	08 95       	ret

00001eec <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    1eec:	44 9a       	sbi	0x08, 4	; 8
    1eee:	08 95       	ret

00001ef0 <SS1_set_low>:
	delay_us(1);
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    1ef0:	44 98       	cbi	0x08, 4	; 8
    1ef2:	08 95       	ret

00001ef4 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	8c 01       	movw	r16, r24
    1efe:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    1f00:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    1f04:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    1f06:	80 e8       	ldi	r24, 0x80	; 128
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <delay_ms>
	*high = *reg_ptr;
    1f0e:	8e b5       	in	r24, 0x2e	; 46
    1f10:	f8 01       	movw	r30, r16
    1f12:	80 83       	st	Z, r24
	delay_ms(128);
    1f14:	80 e8       	ldi	r24, 0x80	; 128
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <delay_ms>
	*low = *reg_ptr;	
    1f1c:	8e b5       	in	r24, 0x2e	; 46
    1f1e:	88 83       	st	Y, r24
	SS1_set_high();
    1f20:	0e 94 76 0f 	call	0x1eec	; 0x1eec <SS1_set_high>
	
	return;
}
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	08 95       	ret

00001f2e <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    1f2e:	1f 92       	push	r1
    1f30:	0f 92       	push	r0
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	0f 92       	push	r0
    1f36:	11 24       	eor	r1, r1
    1f38:	8f 93       	push	r24
	CTC_flag = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	80 93 04 03 	sts	0x0304, r24
}
    1f40:	8f 91       	pop	r24
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    1f4c:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    1f50:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    1f54:	8a e0       	ldi	r24, 0x0A	; 10
    1f56:	80 93 81 00 	sts	0x0081, r24
    1f5a:	08 95       	ret

00001f5c <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    1f5c:	10 92 04 03 	sts	0x0304, r1
	TCNT1 = 0x0000; //Clear timer
    1f60:	10 92 85 00 	sts	0x0085, r1
    1f64:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    1f68:	90 93 89 00 	sts	0x0089, r25
    1f6c:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    1f76:	80 91 04 03 	lds	r24, 0x0304
    1f7a:	88 23       	and	r24, r24
    1f7c:	e1 f3       	breq	.-8      	; 0x1f76 <delay_us+0x1a>
}
    1f7e:	08 95       	ret

00001f80 <delay_ms>:

void delay_ms(uint16_t ms) {
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	51 f0       	breq	.+20     	; 0x1fa2 <delay_ms+0x22>
    1f8e:	c0 e0       	ldi	r28, 0x00	; 0
    1f90:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    1f92:	88 ee       	ldi	r24, 0xE8	; 232
    1f94:	93 e0       	ldi	r25, 0x03	; 3
    1f96:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    1f9a:	21 96       	adiw	r28, 0x01	; 1
    1f9c:	c0 17       	cp	r28, r16
    1f9e:	d1 07       	cpc	r29, r17
    1fa0:	c1 f7       	brne	.-16     	; 0x1f92 <delay_ms+0x12>
		delay_us(1000);
	}
}
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	08 95       	ret

00001fac <__tablejump2__>:
    1fac:	ee 0f       	add	r30, r30
    1fae:	ff 1f       	adc	r31, r31

00001fb0 <__tablejump__>:
    1fb0:	05 90       	lpm	r0, Z+
    1fb2:	f4 91       	lpm	r31, Z
    1fb4:	e0 2d       	mov	r30, r0
    1fb6:	09 94       	ijmp

00001fb8 <_exit>:
    1fb8:	f8 94       	cli

00001fba <__stop_program>:
    1fba:	ff cf       	rjmp	.-2      	; 0x1fba <__stop_program>
