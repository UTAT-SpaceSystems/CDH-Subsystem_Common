
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000052  00800100  00800100  0000156a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000156a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001a0  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000018fb  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000009e4  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000bfa  00000000  00000000  00003a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000318  00000000  00000000  00004614  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005b3  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000012ef  00000000  00000000  00004edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  000061ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	ce 02       	muls	r28, r30
      7e:	60 03       	mulsu	r22, r16
      80:	ea 03       	fmulsu	r22, r18
      82:	5e 04       	cpc	r5, r14
      84:	9e 04       	cpc	r9, r14
      86:	1a 05       	cpc	r17, r10
      88:	97 05       	cpc	r25, r7
      8a:	34 06       	cpc	r3, r20
      8c:	da 06       	cpc	r13, r26
      8e:	c8 02       	muls	r28, r24
      90:	e3 07       	cpc	r30, r19

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 35       	cpi	r26, 0x52	; 82
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 a5 09 	call	0x134a	; 0x134a <main>
      b2:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      ce:	e8 e7       	ldi	r30, 0x78	; 120
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	20 81       	ld	r18, Z
      d4:	dc 01       	movw	r26, r24
      d6:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
      d8:	21 81       	ldd	r18, Z+1	; 0x01
      da:	11 96       	adiw	r26, 0x01	; 1
      dc:	2c 93       	st	X, r18
      de:	08 95       	ret

000000e0 <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
	uint8_t i = 0;
	
	message.pt_data = &data0[0]; // point message object to first element of data buffer
      e4:	8d e2       	ldi	r24, 0x2D	; 45
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	90 93 28 01 	sts	0x0128, r25
      ec:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      f0:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
      f4:	84 e1       	ldi	r24, 0x14	; 20
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	90 93 23 01 	sts	0x0123, r25
      fc:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     100:	85 e0       	ldi	r24, 0x05	; 5
     102:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
     10c:	10 92 4f 01 	sts	0x014F, r1
	
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	80 e2       	ldi	r24, 0x20	; 32
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 b0 08 	call	0x1160	; 0x1160 <can_get_status>
     11a:	81 30       	cpi	r24, 0x01	; 1
     11c:	09 f4       	brne	.+2      	; 0x120 <can_check_general+0x40>
     11e:	a3 c0       	rjmp	.+326    	; 0x266 <can_check_general+0x186>
	{
		if(message.status == MOB_RX_COMPLETED)
     120:	80 91 29 01 	lds	r24, 0x0129
     124:	80 32       	cpi	r24, 0x20	; 32
     126:	09 f0       	breq	.+2      	; 0x12a <can_check_general+0x4a>
     128:	7c c0       	rjmp	.+248    	; 0x222 <can_check_general+0x142>
     12a:	a0 91 27 01 	lds	r26, 0x0127
     12e:	b0 91 28 01 	lds	r27, 0x0128
     132:	ce e3       	ldi	r28, 0x3E	; 62
     134:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     136:	e6 e3       	ldi	r30, 0x36	; 54
     138:	f1 e0       	ldi	r31, 0x01	; 1
     13a:	8d 91       	ld	r24, X+
     13c:	81 93       	st	Z+, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
     13e:	ec 17       	cp	r30, r28
     140:	fd 07       	cpc	r31, r29
     142:	d9 f7       	brne	.-10     	; 0x13a <can_check_general+0x5a>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
			
			if ((receive_arr[0] == 0xFF) && (receive_arr[1] == 0xFF) && (receive_arr[2] == 0xFF) && (receive_arr[3] == 0xFF)
     144:	80 91 36 01 	lds	r24, 0x0136
     148:	8f 3f       	cpi	r24, 0xFF	; 255
     14a:	91 f5       	brne	.+100    	; 0x1b0 <can_check_general+0xd0>
     14c:	80 91 37 01 	lds	r24, 0x0137
     150:	8f 3f       	cpi	r24, 0xFF	; 255
     152:	09 f0       	breq	.+2      	; 0x156 <can_check_general+0x76>
     154:	85 c0       	rjmp	.+266    	; 0x260 <can_check_general+0x180>
     156:	80 91 38 01 	lds	r24, 0x0138
     15a:	8f 3f       	cpi	r24, 0xFF	; 255
     15c:	09 f0       	breq	.+2      	; 0x160 <can_check_general+0x80>
     15e:	80 c0       	rjmp	.+256    	; 0x260 <can_check_general+0x180>
     160:	80 91 39 01 	lds	r24, 0x0139
     164:	8f 3f       	cpi	r24, 0xFF	; 255
     166:	09 f0       	breq	.+2      	; 0x16a <can_check_general+0x8a>
     168:	7b c0       	rjmp	.+246    	; 0x260 <can_check_general+0x180>
			&& (receive_arr[4] == 0xFF) && (receive_arr[5] == 0xFF) && (receive_arr[6] == 0xFF) && (receive_arr[7] == 0xFF))
     16a:	80 91 3a 01 	lds	r24, 0x013A
     16e:	8f 3f       	cpi	r24, 0xFF	; 255
     170:	09 f0       	breq	.+2      	; 0x174 <can_check_general+0x94>
     172:	76 c0       	rjmp	.+236    	; 0x260 <can_check_general+0x180>
     174:	80 91 3b 01 	lds	r24, 0x013B
     178:	8f 3f       	cpi	r24, 0xFF	; 255
     17a:	09 f0       	breq	.+2      	; 0x17e <can_check_general+0x9e>
     17c:	71 c0       	rjmp	.+226    	; 0x260 <can_check_general+0x180>
     17e:	80 91 3c 01 	lds	r24, 0x013C
     182:	8f 3f       	cpi	r24, 0xFF	; 255
     184:	09 f0       	breq	.+2      	; 0x188 <can_check_general+0xa8>
     186:	6c c0       	rjmp	.+216    	; 0x260 <can_check_general+0x180>
     188:	80 91 3d 01 	lds	r24, 0x013D
     18c:	8f 3f       	cpi	r24, 0xFF	; 255
     18e:	09 f0       	breq	.+2      	; 0x192 <can_check_general+0xb2>
     190:	67 c0       	rjmp	.+206    	; 0x260 <can_check_general+0x180>
			{
				LED_Reg_Write(0x04);	//Toggle LED2 when the appropriate message is received.
     192:	84 e0       	ldi	r24, 0x04	; 4
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
				delay_ms(500);
     19a:	84 ef       	ldi	r24, 0xF4	; 244
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <delay_ms>
				LED_Reg_Write(0x00);
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
				send_now = 1;
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	80 93 2c 01 	sts	0x012C, r24
			}
			
			if ((receive_arr[0] == 0x55) && (receive_arr[1] == 0x55) && (receive_arr[2] == 0x55) && (receive_arr[3] == 0x55)
     1b0:	80 91 36 01 	lds	r24, 0x0136
     1b4:	85 35       	cpi	r24, 0x55	; 85
     1b6:	09 f0       	breq	.+2      	; 0x1ba <can_check_general+0xda>
     1b8:	53 c0       	rjmp	.+166    	; 0x260 <can_check_general+0x180>
     1ba:	80 91 37 01 	lds	r24, 0x0137
     1be:	85 35       	cpi	r24, 0x55	; 85
     1c0:	09 f0       	breq	.+2      	; 0x1c4 <can_check_general+0xe4>
     1c2:	4e c0       	rjmp	.+156    	; 0x260 <can_check_general+0x180>
     1c4:	80 91 38 01 	lds	r24, 0x0138
     1c8:	85 35       	cpi	r24, 0x55	; 85
     1ca:	09 f0       	breq	.+2      	; 0x1ce <can_check_general+0xee>
     1cc:	49 c0       	rjmp	.+146    	; 0x260 <can_check_general+0x180>
     1ce:	80 91 39 01 	lds	r24, 0x0139
     1d2:	85 35       	cpi	r24, 0x55	; 85
     1d4:	09 f0       	breq	.+2      	; 0x1d8 <can_check_general+0xf8>
     1d6:	44 c0       	rjmp	.+136    	; 0x260 <can_check_general+0x180>
			&& (receive_arr[4] == 0x55) && (receive_arr[5] == 0x55) && (receive_arr[6] == 0x55) && (receive_arr[7] == 0x55))
     1d8:	80 91 3a 01 	lds	r24, 0x013A
     1dc:	85 35       	cpi	r24, 0x55	; 85
     1de:	09 f0       	breq	.+2      	; 0x1e2 <can_check_general+0x102>
     1e0:	3f c0       	rjmp	.+126    	; 0x260 <can_check_general+0x180>
     1e2:	80 91 3b 01 	lds	r24, 0x013B
     1e6:	85 35       	cpi	r24, 0x55	; 85
     1e8:	d9 f5       	brne	.+118    	; 0x260 <can_check_general+0x180>
     1ea:	80 91 3c 01 	lds	r24, 0x013C
     1ee:	85 35       	cpi	r24, 0x55	; 85
     1f0:	b9 f5       	brne	.+110    	; 0x260 <can_check_general+0x180>
     1f2:	80 91 3d 01 	lds	r24, 0x013D
     1f6:	85 35       	cpi	r24, 0x55	; 85
     1f8:	99 f5       	brne	.+102    	; 0x260 <can_check_general+0x180>
			{
				LED_Reg_Write(0x80);	//Toggle LED7 when the appropriate message is received.
     1fa:	80 e8       	ldi	r24, 0x80	; 128
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
				delay_ms(500);
     202:	84 ef       	ldi	r24, 0xF4	; 244
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <delay_ms>
				LED_Reg_Write(0x00);
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
				send_data = 1;
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	80 93 46 01 	sts	0x0146, r24
     218:	23 c0       	rjmp	.+70     	; 0x260 <can_check_general+0x180>
			}
			
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     21a:	11 92       	st	Z+, r1
				delay_ms(500);
				LED_Reg_Write(0x00);
				send_data = 1;
			}
			
			for (i = 0; i < 8; i ++)
     21c:	ec 17       	cp	r30, r28
     21e:	fd 07       	cpc	r31, r29
     220:	e1 f7       	brne	.-8      	; 0x21a <can_check_general+0x13a>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     222:	8d e2       	ldi	r24, 0x2D	; 45
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	90 93 28 01 	sts	0x0128, r25
     22a:	80 93 27 01 	sts	0x0127, r24
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     22e:	10 92 2b 01 	sts	0x012B, r1
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     232:	84 e1       	ldi	r24, 0x14	; 20
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	90 93 23 01 	sts	0x0123, r25
     23a:	80 93 22 01 	sts	0x0122, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     23e:	85 e0       	ldi	r24, 0x05	; 5
     240:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     244:	88 e0       	ldi	r24, 0x08	; 8
     246:	80 93 26 01 	sts	0x0126, r24
		mob_number = 0;
     24a:	10 92 4f 01 	sts	0x014F, r1
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     24e:	60 91 4f 01 	lds	r22, 0x014F
     252:	80 e2       	ldi	r24, 0x20	; 32
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	0e 94 84 02 	call	0x508	; 0x508 <can_cmd>
     25a:	81 11       	cpse	r24, r1
     25c:	f8 cf       	rjmp	.-16     	; 0x24e <can_check_general+0x16e>
     25e:	03 c0       	rjmp	.+6      	; 0x266 <can_check_general+0x186>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     260:	e6 e3       	ldi	r30, 0x36	; 54
     262:	f1 e0       	ldi	r31, 0x01	; 1
     264:	da cf       	rjmp	.-76     	; 0x21a <can_check_general+0x13a>
		mob_number = 0;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
	uint8_t i = 0;
	
	message.pt_data = &data5[0]; // point message object to first element of data buffer
     270:	87 e4       	ldi	r24, 0x47	; 71
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	90 93 28 01 	sts	0x0128, r25
     278:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     27c:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;  // populate ID field with ID Tag
     280:	89 e1       	ldi	r24, 0x19	; 25
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	90 93 23 01 	sts	0x0123, r25
     288:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     28c:	85 e0       	ldi	r24, 0x05	; 5
     28e:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     292:	98 e0       	ldi	r25, 0x08	; 8
     294:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     298:	80 93 4f 01 	sts	0x014F, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
     29c:	65 e0       	ldi	r22, 0x05	; 5
     29e:	80 e2       	ldi	r24, 0x20	; 32
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 b0 08 	call	0x1160	; 0x1160 <can_get_status>
     2a6:	81 30       	cpi	r24, 0x01	; 1
     2a8:	09 f4       	brne	.+2      	; 0x2ac <can_check_housekeep+0x40>
     2aa:	6d c0       	rjmp	.+218    	; 0x386 <can_check_housekeep+0x11a>
	{
		if(message.status == MOB_RX_COMPLETED)
     2ac:	80 91 29 01 	lds	r24, 0x0129
     2b0:	80 32       	cpi	r24, 0x20	; 32
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <can_check_housekeep+0x4a>
     2b4:	46 c0       	rjmp	.+140    	; 0x342 <can_check_housekeep+0xd6>
     2b6:	a0 91 27 01 	lds	r26, 0x0127
     2ba:	b0 91 28 01 	lds	r27, 0x0128
     2be:	ce e3       	ldi	r28, 0x3E	; 62
     2c0:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     2c2:	e6 e3       	ldi	r30, 0x36	; 54
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	8d 91       	ld	r24, X+
     2c8:	81 93       	st	Z+, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
     2ca:	ec 17       	cp	r30, r28
     2cc:	fd 07       	cpc	r31, r29
     2ce:	d9 f7       	brne	.-10     	; 0x2c6 <can_check_housekeep+0x5a>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
			
			if ((receive_arr[0] == 0x0F) && (receive_arr[1] == 0x0F) && (receive_arr[2] == 0x0F) && (receive_arr[3] == 0x0F)
     2d0:	80 91 36 01 	lds	r24, 0x0136
     2d4:	8f 30       	cpi	r24, 0x0F	; 15
     2d6:	09 f0       	breq	.+2      	; 0x2da <can_check_housekeep+0x6e>
     2d8:	53 c0       	rjmp	.+166    	; 0x380 <can_check_housekeep+0x114>
     2da:	80 91 37 01 	lds	r24, 0x0137
     2de:	8f 30       	cpi	r24, 0x0F	; 15
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <can_check_housekeep+0x78>
     2e2:	4e c0       	rjmp	.+156    	; 0x380 <can_check_housekeep+0x114>
     2e4:	80 91 38 01 	lds	r24, 0x0138
     2e8:	8f 30       	cpi	r24, 0x0F	; 15
     2ea:	09 f0       	breq	.+2      	; 0x2ee <can_check_housekeep+0x82>
     2ec:	49 c0       	rjmp	.+146    	; 0x380 <can_check_housekeep+0x114>
     2ee:	80 91 39 01 	lds	r24, 0x0139
     2f2:	8f 30       	cpi	r24, 0x0F	; 15
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <can_check_housekeep+0x8c>
     2f6:	44 c0       	rjmp	.+136    	; 0x380 <can_check_housekeep+0x114>
			&& (receive_arr[4] == 0x0F) && (receive_arr[5] == 0x0F) && (receive_arr[6] == 0x0F) && (receive_arr[7] == 0x0F))
     2f8:	80 91 3a 01 	lds	r24, 0x013A
     2fc:	8f 30       	cpi	r24, 0x0F	; 15
     2fe:	09 f0       	breq	.+2      	; 0x302 <can_check_housekeep+0x96>
     300:	3f c0       	rjmp	.+126    	; 0x380 <can_check_housekeep+0x114>
     302:	80 91 3b 01 	lds	r24, 0x013B
     306:	8f 30       	cpi	r24, 0x0F	; 15
     308:	d9 f5       	brne	.+118    	; 0x380 <can_check_housekeep+0x114>
     30a:	80 91 3c 01 	lds	r24, 0x013C
     30e:	8f 30       	cpi	r24, 0x0F	; 15
     310:	b9 f5       	brne	.+110    	; 0x380 <can_check_housekeep+0x114>
     312:	80 91 3d 01 	lds	r24, 0x013D
     316:	8f 30       	cpi	r24, 0x0F	; 15
     318:	99 f5       	brne	.+102    	; 0x380 <can_check_housekeep+0x114>
			{
				LED_Reg_Write(0x40);	//Toggle LED6 when housekeeping was requested.
     31a:	80 e4       	ldi	r24, 0x40	; 64
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
				delay_ms(500);
     322:	84 ef       	ldi	r24, 0xF4	; 244
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <delay_ms>
				LED_Reg_Write(0x00);
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
				send_hk = 1;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	80 93 35 01 	sts	0x0135, r24
     338:	23 c0       	rjmp	.+70     	; 0x380 <can_check_housekeep+0x114>
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     33a:	11 92       	st	Z+, r1
				LED_Reg_Write(0x40);	//Toggle LED6 when housekeeping was requested.
				delay_ms(500);
				LED_Reg_Write(0x00);
				send_hk = 1;
			}
			for (i = 0; i < 8; i ++)
     33c:	ec 17       	cp	r30, r28
     33e:	fd 07       	cpc	r31, r29
     340:	e1 f7       	brne	.-8      	; 0x33a <can_check_housekeep+0xce>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data5[0]; // point message object to first element of data buffer
     342:	87 e4       	ldi	r24, 0x47	; 71
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	90 93 28 01 	sts	0x0128, r25
     34a:	80 93 27 01 	sts	0x0127, r24
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     34e:	10 92 2b 01 	sts	0x012B, r1
		message.id.std = SUB0_ID5;  // populate ID field with ID Tag
     352:	89 e1       	ldi	r24, 0x19	; 25
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	90 93 23 01 	sts	0x0123, r25
     35a:	80 93 22 01 	sts	0x0122, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     35e:	85 e0       	ldi	r24, 0x05	; 5
     360:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     364:	98 e0       	ldi	r25, 0x08	; 8
     366:	90 93 26 01 	sts	0x0126, r25
		mob_number = 5;
     36a:	80 93 4f 01 	sts	0x014F, r24
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     36e:	60 91 4f 01 	lds	r22, 0x014F
     372:	80 e2       	ldi	r24, 0x20	; 32
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0e 94 84 02 	call	0x508	; 0x508 <can_cmd>
     37a:	81 11       	cpse	r24, r1
     37c:	f8 cf       	rjmp	.-16     	; 0x36e <can_check_housekeep+0x102>
     37e:	03 c0       	rjmp	.+6      	; 0x386 <can_check_housekeep+0x11a>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     380:	e6 e3       	ldi	r30, 0x36	; 54
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	da cf       	rjmp	.-76     	; 0x33a <can_check_housekeep+0xce>
		mob_number = 5;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     38c:	28 e1       	ldi	r18, 0x18	; 24
     38e:	31 e0       	ldi	r19, 0x01	; 1
     390:	30 93 28 01 	sts	0x0128, r19
     394:	20 93 27 01 	sts	0x0127, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     398:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = id;  // populate ID field with ID Tag
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	70 93 23 01 	sts	0x0123, r23
     3a2:	60 93 22 01 	sts	0x0122, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     3a6:	22 e0       	ldi	r18, 0x02	; 2
     3a8:	20 93 21 01 	sts	0x0121, r18
	message.dlc = 8;			 // Max length of a CAN message.
     3ac:	28 e0       	ldi	r18, 0x08	; 8
     3ae:	20 93 26 01 	sts	0x0126, r18
	mob_number = 4;
     3b2:	24 e0       	ldi	r18, 0x04	; 4
     3b4:	20 93 4f 01 	sts	0x014F, r18
     3b8:	dc 01       	movw	r26, r24
     3ba:	e8 e1       	ldi	r30, 0x18	; 24
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	80 e2       	ldi	r24, 0x20	; 32
     3c0:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     3c2:	2d 91       	ld	r18, X+
     3c4:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     3c6:	e8 17       	cp	r30, r24
     3c8:	f9 07       	cpc	r31, r25
     3ca:	d9 f7       	brne	.-10     	; 0x3c2 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     3cc:	60 91 4f 01 	lds	r22, 0x014F
     3d0:	80 e2       	ldi	r24, 0x20	; 32
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 84 02 	call	0x508	; 0x508 <can_cmd>
     3d8:	81 11       	cpse	r24, r1
     3da:	f8 cf       	rjmp	.-16     	; 0x3cc <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     3dc:	60 91 4f 01 	lds	r22, 0x014F
     3e0:	80 e2       	ldi	r24, 0x20	; 32
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 b0 08 	call	0x1160	; 0x1160 <can_get_status>
     3e8:	81 30       	cpi	r24, 0x01	; 1
     3ea:	c1 f3       	breq	.-16     	; 0x3dc <can_send_message+0x50>

	return;
}
     3ec:	08 95       	ret

000003ee <can_init_mobs>:

void can_init_mobs(void)
{
	/* INITIALIZE MOB0 */

	message.pt_data = &data0[0]; // point message object to first element of data buffer
     3ee:	8d e2       	ldi	r24, 0x2D	; 45
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	90 93 28 01 	sts	0x0128, r25
     3f6:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3fa:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     3fe:	84 e1       	ldi	r24, 0x14	; 20
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	90 93 23 01 	sts	0x0123, r25
     406:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     40a:	85 e0       	ldi	r24, 0x05	; 5
     40c:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     410:	88 e0       	ldi	r24, 0x08	; 8
     412:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
     416:	10 92 4f 01 	sts	0x014F, r1
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     41a:	60 91 4f 01 	lds	r22, 0x014F
     41e:	80 e2       	ldi	r24, 0x20	; 32
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 84 02 	call	0x508	; 0x508 <can_cmd>
     426:	81 11       	cpse	r24, r1
     428:	f8 cf       	rjmp	.-16     	; 0x41a <can_init_mobs+0x2c>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     42a:	87 e4       	ldi	r24, 0x47	; 71
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	90 93 28 01 	sts	0x0128, r25
     432:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     436:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
     43a:	89 e1       	ldi	r24, 0x19	; 25
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	90 93 23 01 	sts	0x0123, r25
     442:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     446:	85 e0       	ldi	r24, 0x05	; 5
     448:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;				// Max length of a CAN message.
     44c:	98 e0       	ldi	r25, 0x08	; 8
     44e:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     452:	80 93 4f 01 	sts	0x014F, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     456:	60 91 4f 01 	lds	r22, 0x014F
     45a:	80 e2       	ldi	r24, 0x20	; 32
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 84 02 	call	0x508	; 0x508 <can_cmd>
     462:	81 11       	cpse	r24, r1
     464:	f8 cf       	rjmp	.-16     	; 0x456 <can_init_mobs+0x68>
}
     466:	08 95       	ret

00000468 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     468:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     46a:	ad ee       	ldi	r26, 0xED	; 237
     46c:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     46e:	3e ee       	ldi	r19, 0xEE	; 238
     470:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     472:	98 2f       	mov	r25, r24
     474:	92 95       	swap	r25
     476:	90 7f       	andi	r25, 0xF0	; 240
     478:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     47a:	e3 2f       	mov	r30, r19
     47c:	f2 2f       	mov	r31, r18
     47e:	11 92       	st	Z+, r1
     480:	e8 3f       	cpi	r30, 0xF8	; 248
     482:	f1 05       	cpc	r31, r1
     484:	e1 f7       	brne	.-8      	; 0x47e <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     486:	8f 5f       	subi	r24, 0xFF	; 255
     488:	86 30       	cpi	r24, 0x06	; 6
     48a:	99 f7       	brne	.-26     	; 0x472 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     48c:	08 95       	ret

0000048e <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     48e:	80 91 ef 00 	lds	r24, 0x00EF
     492:	80 7c       	andi	r24, 0xC0	; 192
     494:	61 f0       	breq	.+24     	; 0x4ae <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     496:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     49a:	98 2f       	mov	r25, r24
     49c:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     49e:	28 2f       	mov	r18, r24
     4a0:	20 76       	andi	r18, 0x60	; 96
     4a2:	20 32       	cpi	r18, 0x20	; 32
     4a4:	31 f0       	breq	.+12     	; 0x4b2 <can_get_mob_status+0x24>
     4a6:	90 34       	cpi	r25, 0x40	; 64
     4a8:	31 f0       	breq	.+12     	; 0x4b6 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     4aa:	8f 71       	andi	r24, 0x1F	; 31
     4ac:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     4b2:	89 2f       	mov	r24, r25
     4b4:	08 95       	ret
     4b6:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     4b8:	08 95       	ret

000004ba <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     4ba:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     4bc:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     4be:	aa ef       	ldi	r26, 0xFA	; 250
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	9c 91       	ld	r25, X
     4c4:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	88 30       	cpi	r24, 0x08	; 8
     4ca:	d9 f7       	brne	.-10     	; 0x4c2 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     4cc:	08 95       	ret

000004ce <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	80 93 e2 00 	sts	0x00E2, r24
     4da:	8c e0       	ldi	r24, 0x0C	; 12
     4dc:	80 93 e3 00 	sts	0x00E3, r24
     4e0:	87 e3       	ldi	r24, 0x37	; 55
     4e2:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	08 95       	ret

000004ea <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     4ea:	0e 94 67 02 	call	0x4ce	; 0x4ce <can_fixed_baudrate>
     4ee:	88 23       	and	r24, r24
     4f0:	49 f0       	breq	.+18     	; 0x504 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     4f2:	0e 94 34 02 	call	0x468	; 0x468 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     4f6:	e8 ed       	ldi	r30, 0xD8	; 216
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	82 60       	ori	r24, 0x02	; 2
     4fe:	80 83       	st	Z, r24
    return (1);
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     504:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     506:	08 95       	ret

00000508 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	1f 92       	push	r1
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	8c 91       	ld	r24, X
     518:	11 97       	sbiw	r26, 0x01	; 1
     51a:	8c 30       	cpi	r24, 0x0C	; 12
     51c:	b1 f4       	brne	.+44     	; 0x54a <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     51e:	19 96       	adiw	r26, 0x09	; 9
     520:	8c 91       	ld	r24, X
     522:	19 97       	sbiw	r26, 0x09	; 9
     524:	80 36       	cpi	r24, 0x60	; 96
     526:	69 f4       	brne	.+26     	; 0x542 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     528:	86 2f       	mov	r24, r22
     52a:	82 95       	swap	r24
     52c:	80 7f       	andi	r24, 0xF0	; 240
     52e:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     532:	ef ee       	ldi	r30, 0xEF	; 239
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	8f 73       	andi	r24, 0x3F	; 63
     53a:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     53c:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     540:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     542:	19 96       	adiw	r26, 0x09	; 9
     544:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	07 c6       	rjmp	.+3086   	; 0x1158 <__stack+0x859>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     54a:	86 2f       	mov	r24, r22
     54c:	82 95       	swap	r24
     54e:	80 7f       	andi	r24, 0xF0	; 240
     550:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     554:	80 91 ef 00 	lds	r24, 0x00EF
     558:	80 7c       	andi	r24, 0xC0	; 192
     55a:	09 f0       	breq	.+2      	; 0x55e <can_cmd+0x56>
     55c:	f9 c5       	rjmp	.+3058   	; 0x1150 <__stack+0x851>
    {
      cmd->status = MOB_PENDING; 
     55e:	80 e6       	ldi	r24, 0x60	; 96
     560:	19 96       	adiw	r26, 0x09	; 9
     562:	8c 93       	st	X, r24
     564:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     566:	6c 93       	st	X, r22
      Can_clear_mob();
     568:	ee ee       	ldi	r30, 0xEE	; 238
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	11 92       	st	Z+, r1
     56e:	e8 3f       	cpi	r30, 0xF8	; 248
     570:	f1 05       	cpc	r31, r1
     572:	e1 f7       	brne	.-8      	; 0x56c <can_cmd+0x64>
          
      switch (cmd->cmd)
     574:	11 96       	adiw	r26, 0x01	; 1
     576:	4c 91       	ld	r20, X
     578:	11 97       	sbiw	r26, 0x01	; 1
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	fa 01       	movw	r30, r20
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	eb 30       	cpi	r30, 0x0B	; 11
     582:	f1 05       	cpc	r31, r1
     584:	08 f0       	brcs	.+2      	; 0x588 <can_cmd+0x80>
     586:	e0 c5       	rjmp	.+3008   	; 0x1148 <__stack+0x849>
     588:	e2 5c       	subi	r30, 0xC2	; 194
     58a:	ff 4f       	sbci	r31, 0xFF	; 255
     58c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     590:	16 96       	adiw	r26, 0x06	; 6
     592:	8c 91       	ld	r24, X
     594:	16 97       	sbiw	r26, 0x06	; 6
     596:	81 11       	cpse	r24, r1
     598:	b7 c4       	rjmp	.+2414   	; 0xf08 <__stack+0x609>
     59a:	c8 c4       	rjmp	.+2448   	; 0xf2c <__stack+0x62d>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     59c:	1b 96       	adiw	r26, 0x0b	; 11
     59e:	8c 91       	ld	r24, X
     5a0:	1b 97       	sbiw	r26, 0x0b	; 11
     5a2:	88 23       	and	r24, r24
     5a4:	d9 f1       	breq	.+118    	; 0x61c <can_cmd+0x114>
     5a6:	14 96       	adiw	r26, 0x04	; 4
     5a8:	9c 91       	ld	r25, X
     5aa:	14 97       	sbiw	r26, 0x04	; 4
     5ac:	92 95       	swap	r25
     5ae:	96 95       	lsr	r25
     5b0:	97 70       	andi	r25, 0x07	; 7
     5b2:	15 96       	adiw	r26, 0x05	; 5
     5b4:	8c 91       	ld	r24, X
     5b6:	15 97       	sbiw	r26, 0x05	; 5
     5b8:	88 0f       	add	r24, r24
     5ba:	88 0f       	add	r24, r24
     5bc:	88 0f       	add	r24, r24
     5be:	89 0f       	add	r24, r25
     5c0:	80 93 f3 00 	sts	0x00F3, r24
     5c4:	13 96       	adiw	r26, 0x03	; 3
     5c6:	9c 91       	ld	r25, X
     5c8:	13 97       	sbiw	r26, 0x03	; 3
     5ca:	92 95       	swap	r25
     5cc:	96 95       	lsr	r25
     5ce:	97 70       	andi	r25, 0x07	; 7
     5d0:	14 96       	adiw	r26, 0x04	; 4
     5d2:	8c 91       	ld	r24, X
     5d4:	14 97       	sbiw	r26, 0x04	; 4
     5d6:	88 0f       	add	r24, r24
     5d8:	88 0f       	add	r24, r24
     5da:	88 0f       	add	r24, r24
     5dc:	89 0f       	add	r24, r25
     5de:	80 93 f2 00 	sts	0x00F2, r24
     5e2:	12 96       	adiw	r26, 0x02	; 2
     5e4:	9c 91       	ld	r25, X
     5e6:	12 97       	sbiw	r26, 0x02	; 2
     5e8:	92 95       	swap	r25
     5ea:	96 95       	lsr	r25
     5ec:	97 70       	andi	r25, 0x07	; 7
     5ee:	13 96       	adiw	r26, 0x03	; 3
     5f0:	8c 91       	ld	r24, X
     5f2:	13 97       	sbiw	r26, 0x03	; 3
     5f4:	88 0f       	add	r24, r24
     5f6:	88 0f       	add	r24, r24
     5f8:	88 0f       	add	r24, r24
     5fa:	89 0f       	add	r24, r25
     5fc:	80 93 f1 00 	sts	0x00F1, r24
     600:	12 96       	adiw	r26, 0x02	; 2
     602:	8c 91       	ld	r24, X
     604:	12 97       	sbiw	r26, 0x02	; 2
     606:	88 0f       	add	r24, r24
     608:	88 0f       	add	r24, r24
     60a:	88 0f       	add	r24, r24
     60c:	80 93 f0 00 	sts	0x00F0, r24
     610:	ef ee       	ldi	r30, 0xEF	; 239
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	80 61       	ori	r24, 0x10	; 16
     618:	80 83       	st	Z, r24
     61a:	1c c0       	rjmp	.+56     	; 0x654 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     61c:	12 96       	adiw	r26, 0x02	; 2
     61e:	8c 91       	ld	r24, X
     620:	12 97       	sbiw	r26, 0x02	; 2
     622:	86 95       	lsr	r24
     624:	86 95       	lsr	r24
     626:	86 95       	lsr	r24
     628:	13 96       	adiw	r26, 0x03	; 3
     62a:	9c 91       	ld	r25, X
     62c:	13 97       	sbiw	r26, 0x03	; 3
     62e:	20 e2       	ldi	r18, 0x20	; 32
     630:	92 9f       	mul	r25, r18
     632:	80 0d       	add	r24, r0
     634:	11 24       	eor	r1, r1
     636:	80 93 f3 00 	sts	0x00F3, r24
     63a:	12 96       	adiw	r26, 0x02	; 2
     63c:	8c 91       	ld	r24, X
     63e:	12 97       	sbiw	r26, 0x02	; 2
     640:	82 95       	swap	r24
     642:	88 0f       	add	r24, r24
     644:	80 7e       	andi	r24, 0xE0	; 224
     646:	80 93 f2 00 	sts	0x00F2, r24
     64a:	ef ee       	ldi	r30, 0xEF	; 239
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	8f 7e       	andi	r24, 0xEF	; 239
     652:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     654:	16 96       	adiw	r26, 0x06	; 6
     656:	8c 91       	ld	r24, X
     658:	16 97       	sbiw	r26, 0x06	; 6
     65a:	88 23       	and	r24, r24
     65c:	91 f0       	breq	.+36     	; 0x682 <can_cmd+0x17a>
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	8a ef       	ldi	r24, 0xFA	; 250
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	17 96       	adiw	r26, 0x07	; 7
     666:	ed 91       	ld	r30, X+
     668:	fc 91       	ld	r31, X
     66a:	18 97       	sbiw	r26, 0x08	; 8
     66c:	e2 0f       	add	r30, r18
     66e:	f1 1d       	adc	r31, r1
     670:	30 81       	ld	r19, Z
     672:	fc 01       	movw	r30, r24
     674:	30 83       	st	Z, r19
     676:	2f 5f       	subi	r18, 0xFF	; 255
     678:	16 96       	adiw	r26, 0x06	; 6
     67a:	3c 91       	ld	r19, X
     67c:	16 97       	sbiw	r26, 0x06	; 6
     67e:	23 17       	cp	r18, r19
     680:	88 f3       	brcs	.-30     	; 0x664 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     682:	1a 96       	adiw	r26, 0x0a	; 10
     684:	8c 91       	ld	r24, X
     686:	1a 97       	sbiw	r26, 0x0a	; 10
     688:	88 23       	and	r24, r24
     68a:	31 f0       	breq	.+12     	; 0x698 <can_cmd+0x190>
     68c:	e0 ef       	ldi	r30, 0xF0	; 240
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	84 60       	ori	r24, 0x04	; 4
     694:	80 83       	st	Z, r24
     696:	05 c0       	rjmp	.+10     	; 0x6a2 <can_cmd+0x19a>
            else Can_clear_rtr();    
     698:	e0 ef       	ldi	r30, 0xF0	; 240
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	8b 7f       	andi	r24, 0xFB	; 251
     6a0:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     6a2:	ef ee       	ldi	r30, 0xEF	; 239
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	90 81       	ld	r25, Z
     6a8:	16 96       	adiw	r26, 0x06	; 6
     6aa:	8c 91       	ld	r24, X
     6ac:	89 2b       	or	r24, r25
     6ae:	80 83       	st	Z, r24
          Can_config_tx();
     6b0:	80 81       	ld	r24, Z
     6b2:	8f 73       	andi	r24, 0x3F	; 63
     6b4:	80 83       	st	Z, r24
     6b6:	80 81       	ld	r24, Z
     6b8:	80 64       	ori	r24, 0x40	; 64
     6ba:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     6be:	4c c5       	rjmp	.+2712   	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     6c0:	1b 96       	adiw	r26, 0x0b	; 11
     6c2:	8c 91       	ld	r24, X
     6c4:	1b 97       	sbiw	r26, 0x0b	; 11
     6c6:	88 23       	and	r24, r24
     6c8:	d9 f1       	breq	.+118    	; 0x740 <can_cmd+0x238>
     6ca:	14 96       	adiw	r26, 0x04	; 4
     6cc:	9c 91       	ld	r25, X
     6ce:	14 97       	sbiw	r26, 0x04	; 4
     6d0:	92 95       	swap	r25
     6d2:	96 95       	lsr	r25
     6d4:	97 70       	andi	r25, 0x07	; 7
     6d6:	15 96       	adiw	r26, 0x05	; 5
     6d8:	8c 91       	ld	r24, X
     6da:	15 97       	sbiw	r26, 0x05	; 5
     6dc:	88 0f       	add	r24, r24
     6de:	88 0f       	add	r24, r24
     6e0:	88 0f       	add	r24, r24
     6e2:	89 0f       	add	r24, r25
     6e4:	80 93 f3 00 	sts	0x00F3, r24
     6e8:	13 96       	adiw	r26, 0x03	; 3
     6ea:	9c 91       	ld	r25, X
     6ec:	13 97       	sbiw	r26, 0x03	; 3
     6ee:	92 95       	swap	r25
     6f0:	96 95       	lsr	r25
     6f2:	97 70       	andi	r25, 0x07	; 7
     6f4:	14 96       	adiw	r26, 0x04	; 4
     6f6:	8c 91       	ld	r24, X
     6f8:	14 97       	sbiw	r26, 0x04	; 4
     6fa:	88 0f       	add	r24, r24
     6fc:	88 0f       	add	r24, r24
     6fe:	88 0f       	add	r24, r24
     700:	89 0f       	add	r24, r25
     702:	80 93 f2 00 	sts	0x00F2, r24
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	9c 91       	ld	r25, X
     70a:	12 97       	sbiw	r26, 0x02	; 2
     70c:	92 95       	swap	r25
     70e:	96 95       	lsr	r25
     710:	97 70       	andi	r25, 0x07	; 7
     712:	13 96       	adiw	r26, 0x03	; 3
     714:	8c 91       	ld	r24, X
     716:	13 97       	sbiw	r26, 0x03	; 3
     718:	88 0f       	add	r24, r24
     71a:	88 0f       	add	r24, r24
     71c:	88 0f       	add	r24, r24
     71e:	89 0f       	add	r24, r25
     720:	80 93 f1 00 	sts	0x00F1, r24
     724:	12 96       	adiw	r26, 0x02	; 2
     726:	8c 91       	ld	r24, X
     728:	12 97       	sbiw	r26, 0x02	; 2
     72a:	88 0f       	add	r24, r24
     72c:	88 0f       	add	r24, r24
     72e:	88 0f       	add	r24, r24
     730:	80 93 f0 00 	sts	0x00F0, r24
     734:	ef ee       	ldi	r30, 0xEF	; 239
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	80 61       	ori	r24, 0x10	; 16
     73c:	80 83       	st	Z, r24
     73e:	1c c0       	rjmp	.+56     	; 0x778 <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     740:	12 96       	adiw	r26, 0x02	; 2
     742:	8c 91       	ld	r24, X
     744:	12 97       	sbiw	r26, 0x02	; 2
     746:	86 95       	lsr	r24
     748:	86 95       	lsr	r24
     74a:	86 95       	lsr	r24
     74c:	13 96       	adiw	r26, 0x03	; 3
     74e:	9c 91       	ld	r25, X
     750:	13 97       	sbiw	r26, 0x03	; 3
     752:	f0 e2       	ldi	r31, 0x20	; 32
     754:	9f 9f       	mul	r25, r31
     756:	80 0d       	add	r24, r0
     758:	11 24       	eor	r1, r1
     75a:	80 93 f3 00 	sts	0x00F3, r24
     75e:	12 96       	adiw	r26, 0x02	; 2
     760:	8c 91       	ld	r24, X
     762:	12 97       	sbiw	r26, 0x02	; 2
     764:	82 95       	swap	r24
     766:	88 0f       	add	r24, r24
     768:	80 7e       	andi	r24, 0xE0	; 224
     76a:	80 93 f2 00 	sts	0x00F2, r24
     76e:	ef ee       	ldi	r30, 0xEF	; 239
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	8f 7e       	andi	r24, 0xEF	; 239
     776:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     778:	16 96       	adiw	r26, 0x06	; 6
     77a:	8c 91       	ld	r24, X
     77c:	16 97       	sbiw	r26, 0x06	; 6
     77e:	88 23       	and	r24, r24
     780:	91 f0       	breq	.+36     	; 0x7a6 <can_cmd+0x29e>
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	8a ef       	ldi	r24, 0xFA	; 250
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	17 96       	adiw	r26, 0x07	; 7
     78a:	ed 91       	ld	r30, X+
     78c:	fc 91       	ld	r31, X
     78e:	18 97       	sbiw	r26, 0x08	; 8
     790:	e2 0f       	add	r30, r18
     792:	f1 1d       	adc	r31, r1
     794:	30 81       	ld	r19, Z
     796:	fc 01       	movw	r30, r24
     798:	30 83       	st	Z, r19
     79a:	2f 5f       	subi	r18, 0xFF	; 255
     79c:	16 96       	adiw	r26, 0x06	; 6
     79e:	3c 91       	ld	r19, X
     7a0:	16 97       	sbiw	r26, 0x06	; 6
     7a2:	23 17       	cp	r18, r19
     7a4:	88 f3       	brcs	.-30     	; 0x788 <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     7a6:	1a 96       	adiw	r26, 0x0a	; 10
     7a8:	1c 92       	st	X, r1
     7aa:	1a 97       	sbiw	r26, 0x0a	; 10
     7ac:	e0 ef       	ldi	r30, 0xF0	; 240
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	8b 7f       	andi	r24, 0xFB	; 251
     7b4:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     7b6:	ef ee       	ldi	r30, 0xEF	; 239
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	90 81       	ld	r25, Z
     7bc:	16 96       	adiw	r26, 0x06	; 6
     7be:	8c 91       	ld	r24, X
     7c0:	89 2b       	or	r24, r25
     7c2:	80 83       	st	Z, r24
          Can_config_tx();
     7c4:	80 81       	ld	r24, Z
     7c6:	8f 73       	andi	r24, 0x3F	; 63
     7c8:	80 83       	st	Z, r24
     7ca:	80 81       	ld	r24, Z
     7cc:	80 64       	ori	r24, 0x40	; 64
     7ce:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     7d2:	c2 c4       	rjmp	.+2436   	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7d4:	1b 96       	adiw	r26, 0x0b	; 11
     7d6:	8c 91       	ld	r24, X
     7d8:	1b 97       	sbiw	r26, 0x0b	; 11
     7da:	88 23       	and	r24, r24
     7dc:	d9 f1       	breq	.+118    	; 0x854 <can_cmd+0x34c>
     7de:	14 96       	adiw	r26, 0x04	; 4
     7e0:	9c 91       	ld	r25, X
     7e2:	14 97       	sbiw	r26, 0x04	; 4
     7e4:	92 95       	swap	r25
     7e6:	96 95       	lsr	r25
     7e8:	97 70       	andi	r25, 0x07	; 7
     7ea:	15 96       	adiw	r26, 0x05	; 5
     7ec:	8c 91       	ld	r24, X
     7ee:	15 97       	sbiw	r26, 0x05	; 5
     7f0:	88 0f       	add	r24, r24
     7f2:	88 0f       	add	r24, r24
     7f4:	88 0f       	add	r24, r24
     7f6:	89 0f       	add	r24, r25
     7f8:	80 93 f3 00 	sts	0x00F3, r24
     7fc:	13 96       	adiw	r26, 0x03	; 3
     7fe:	9c 91       	ld	r25, X
     800:	13 97       	sbiw	r26, 0x03	; 3
     802:	92 95       	swap	r25
     804:	96 95       	lsr	r25
     806:	97 70       	andi	r25, 0x07	; 7
     808:	14 96       	adiw	r26, 0x04	; 4
     80a:	8c 91       	ld	r24, X
     80c:	14 97       	sbiw	r26, 0x04	; 4
     80e:	88 0f       	add	r24, r24
     810:	88 0f       	add	r24, r24
     812:	88 0f       	add	r24, r24
     814:	89 0f       	add	r24, r25
     816:	80 93 f2 00 	sts	0x00F2, r24
     81a:	12 96       	adiw	r26, 0x02	; 2
     81c:	9c 91       	ld	r25, X
     81e:	12 97       	sbiw	r26, 0x02	; 2
     820:	92 95       	swap	r25
     822:	96 95       	lsr	r25
     824:	97 70       	andi	r25, 0x07	; 7
     826:	13 96       	adiw	r26, 0x03	; 3
     828:	8c 91       	ld	r24, X
     82a:	13 97       	sbiw	r26, 0x03	; 3
     82c:	88 0f       	add	r24, r24
     82e:	88 0f       	add	r24, r24
     830:	88 0f       	add	r24, r24
     832:	89 0f       	add	r24, r25
     834:	80 93 f1 00 	sts	0x00F1, r24
     838:	12 96       	adiw	r26, 0x02	; 2
     83a:	8c 91       	ld	r24, X
     83c:	12 97       	sbiw	r26, 0x02	; 2
     83e:	88 0f       	add	r24, r24
     840:	88 0f       	add	r24, r24
     842:	88 0f       	add	r24, r24
     844:	80 93 f0 00 	sts	0x00F0, r24
     848:	ef ee       	ldi	r30, 0xEF	; 239
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	80 61       	ori	r24, 0x10	; 16
     850:	80 83       	st	Z, r24
     852:	1c c0       	rjmp	.+56     	; 0x88c <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     854:	12 96       	adiw	r26, 0x02	; 2
     856:	8c 91       	ld	r24, X
     858:	12 97       	sbiw	r26, 0x02	; 2
     85a:	86 95       	lsr	r24
     85c:	86 95       	lsr	r24
     85e:	86 95       	lsr	r24
     860:	13 96       	adiw	r26, 0x03	; 3
     862:	9c 91       	ld	r25, X
     864:	13 97       	sbiw	r26, 0x03	; 3
     866:	f0 e2       	ldi	r31, 0x20	; 32
     868:	9f 9f       	mul	r25, r31
     86a:	80 0d       	add	r24, r0
     86c:	11 24       	eor	r1, r1
     86e:	80 93 f3 00 	sts	0x00F3, r24
     872:	12 96       	adiw	r26, 0x02	; 2
     874:	8c 91       	ld	r24, X
     876:	12 97       	sbiw	r26, 0x02	; 2
     878:	82 95       	swap	r24
     87a:	88 0f       	add	r24, r24
     87c:	80 7e       	andi	r24, 0xE0	; 224
     87e:	80 93 f2 00 	sts	0x00F2, r24
     882:	ef ee       	ldi	r30, 0xEF	; 239
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	8f 7e       	andi	r24, 0xEF	; 239
     88a:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	1a 96       	adiw	r26, 0x0a	; 10
     890:	8c 93       	st	X, r24
     892:	1a 97       	sbiw	r26, 0x0a	; 10
     894:	e0 ef       	ldi	r30, 0xF0	; 240
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	84 60       	ori	r24, 0x04	; 4
     89c:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     89e:	ef ee       	ldi	r30, 0xEF	; 239
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	90 81       	ld	r25, Z
     8a4:	16 96       	adiw	r26, 0x06	; 6
     8a6:	8c 91       	ld	r24, X
     8a8:	89 2b       	or	r24, r25
     8aa:	80 83       	st	Z, r24
          Can_config_tx();
     8ac:	80 81       	ld	r24, Z
     8ae:	8f 73       	andi	r24, 0x3F	; 63
     8b0:	80 83       	st	Z, r24
     8b2:	80 81       	ld	r24, Z
     8b4:	80 64       	ori	r24, 0x40	; 64
     8b6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8b8:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     8ba:	4e c4       	rjmp	.+2204   	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     8bc:	19 82       	std	Y+1, r1	; 0x01
     8be:	9b 81       	ldd	r25, Y+3	; 0x03
     8c0:	92 95       	swap	r25
     8c2:	96 95       	lsr	r25
     8c4:	97 70       	andi	r25, 0x07	; 7
     8c6:	8c 81       	ldd	r24, Y+4	; 0x04
     8c8:	88 0f       	add	r24, r24
     8ca:	88 0f       	add	r24, r24
     8cc:	88 0f       	add	r24, r24
     8ce:	89 0f       	add	r24, r25
     8d0:	80 93 f7 00 	sts	0x00F7, r24
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
     8d6:	92 95       	swap	r25
     8d8:	96 95       	lsr	r25
     8da:	97 70       	andi	r25, 0x07	; 7
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	88 0f       	add	r24, r24
     8e0:	88 0f       	add	r24, r24
     8e2:	88 0f       	add	r24, r24
     8e4:	89 0f       	add	r24, r25
     8e6:	80 93 f6 00 	sts	0x00F6, r24
     8ea:	99 81       	ldd	r25, Y+1	; 0x01
     8ec:	92 95       	swap	r25
     8ee:	96 95       	lsr	r25
     8f0:	97 70       	andi	r25, 0x07	; 7
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	88 0f       	add	r24, r24
     8f6:	88 0f       	add	r24, r24
     8f8:	88 0f       	add	r24, r24
     8fa:	89 0f       	add	r24, r25
     8fc:	80 93 f5 00 	sts	0x00F5, r24
     900:	29 81       	ldd	r18, Y+1	; 0x01
     902:	22 0f       	add	r18, r18
     904:	22 0f       	add	r18, r18
     906:	22 0f       	add	r18, r18
     908:	84 ef       	ldi	r24, 0xF4	; 244
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     910:	ef ee       	ldi	r30, 0xEF	; 239
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	30 81       	ld	r19, Z
     916:	16 96       	adiw	r26, 0x06	; 6
     918:	2c 91       	ld	r18, X
     91a:	23 2b       	or	r18, r19
     91c:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     91e:	dc 01       	movw	r26, r24
     920:	2c 91       	ld	r18, X
     922:	2b 7f       	andi	r18, 0xFB	; 251
     924:	2c 93       	st	X, r18
          Can_clear_idemsk();
     926:	2c 91       	ld	r18, X
     928:	2e 7f       	andi	r18, 0xFE	; 254
     92a:	2c 93       	st	X, r18
          Can_config_rx();       
     92c:	80 81       	ld	r24, Z
     92e:	8f 73       	andi	r24, 0x3F	; 63
     930:	80 83       	st	Z, r24
     932:	80 81       	ld	r24, Z
     934:	80 68       	ori	r24, 0x80	; 128
     936:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     938:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     93a:	0e c4       	rjmp	.+2076   	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	82 95       	swap	r24
     944:	88 0f       	add	r24, r24
     946:	80 7e       	andi	r24, 0xE0	; 224
     948:	81 5e       	subi	r24, 0xE1	; 225
     94a:	27 ef       	ldi	r18, 0xF7	; 247
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	f9 01       	movw	r30, r18
     950:	80 83       	st	Z, r24
     952:	49 81       	ldd	r20, Y+1	; 0x01
     954:	42 95       	swap	r20
     956:	44 0f       	add	r20, r20
     958:	40 7e       	andi	r20, 0xE0	; 224
     95a:	86 ef       	ldi	r24, 0xF6	; 246
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	fc 01       	movw	r30, r24
     960:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     962:	12 96       	adiw	r26, 0x02	; 2
     964:	4c 91       	ld	r20, X
     966:	12 97       	sbiw	r26, 0x02	; 2
     968:	46 95       	lsr	r20
     96a:	46 95       	lsr	r20
     96c:	46 95       	lsr	r20
     96e:	13 96       	adiw	r26, 0x03	; 3
     970:	5c 91       	ld	r21, X
     972:	13 97       	sbiw	r26, 0x03	; 3
     974:	f0 e2       	ldi	r31, 0x20	; 32
     976:	5f 9f       	mul	r21, r31
     978:	40 0d       	add	r20, r0
     97a:	11 24       	eor	r1, r1
     97c:	40 93 f3 00 	sts	0x00F3, r20
     980:	12 96       	adiw	r26, 0x02	; 2
     982:	4c 91       	ld	r20, X
     984:	12 97       	sbiw	r26, 0x02	; 2
     986:	42 95       	swap	r20
     988:	44 0f       	add	r20, r20
     98a:	40 7e       	andi	r20, 0xE0	; 224
     98c:	40 93 f2 00 	sts	0x00F2, r20
     990:	6f ee       	ldi	r22, 0xEF	; 239
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	fb 01       	movw	r30, r22
     996:	40 81       	ld	r20, Z
     998:	4f 7e       	andi	r20, 0xEF	; 239
     99a:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     99c:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     99e:	5b 81       	ldd	r21, Y+3	; 0x03
     9a0:	52 95       	swap	r21
     9a2:	56 95       	lsr	r21
     9a4:	57 70       	andi	r21, 0x07	; 7
     9a6:	4c 81       	ldd	r20, Y+4	; 0x04
     9a8:	44 0f       	add	r20, r20
     9aa:	44 0f       	add	r20, r20
     9ac:	44 0f       	add	r20, r20
     9ae:	45 0f       	add	r20, r21
     9b0:	f9 01       	movw	r30, r18
     9b2:	40 83       	st	Z, r20
     9b4:	3a 81       	ldd	r19, Y+2	; 0x02
     9b6:	32 95       	swap	r19
     9b8:	36 95       	lsr	r19
     9ba:	37 70       	andi	r19, 0x07	; 7
     9bc:	2b 81       	ldd	r18, Y+3	; 0x03
     9be:	22 0f       	add	r18, r18
     9c0:	22 0f       	add	r18, r18
     9c2:	22 0f       	add	r18, r18
     9c4:	23 0f       	add	r18, r19
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18
     9ca:	99 81       	ldd	r25, Y+1	; 0x01
     9cc:	92 95       	swap	r25
     9ce:	96 95       	lsr	r25
     9d0:	97 70       	andi	r25, 0x07	; 7
     9d2:	8a 81       	ldd	r24, Y+2	; 0x02
     9d4:	88 0f       	add	r24, r24
     9d6:	88 0f       	add	r24, r24
     9d8:	88 0f       	add	r24, r24
     9da:	89 0f       	add	r24, r25
     9dc:	80 93 f5 00 	sts	0x00F5, r24
     9e0:	29 81       	ldd	r18, Y+1	; 0x01
     9e2:	22 0f       	add	r18, r18
     9e4:	22 0f       	add	r18, r18
     9e6:	22 0f       	add	r18, r18
     9e8:	84 ef       	ldi	r24, 0xF4	; 244
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     9f0:	fb 01       	movw	r30, r22
     9f2:	30 81       	ld	r19, Z
     9f4:	16 96       	adiw	r26, 0x06	; 6
     9f6:	2c 91       	ld	r18, X
     9f8:	16 97       	sbiw	r26, 0x06	; 6
     9fa:	23 2b       	or	r18, r19
     9fc:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     9fe:	1a 96       	adiw	r26, 0x0a	; 10
     a00:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     a02:	dc 01       	movw	r26, r24
     a04:	2c 91       	ld	r18, X
     a06:	24 60       	ori	r18, 0x04	; 4
     a08:	2c 93       	st	X, r18
		  Can_clear_rtr();
     a0a:	a0 ef       	ldi	r26, 0xF0	; 240
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	2c 91       	ld	r18, X
     a10:	2b 7f       	andi	r18, 0xFB	; 251
     a12:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     a14:	20 81       	ld	r18, Z
     a16:	2f 7e       	andi	r18, 0xEF	; 239
     a18:	20 83       	st	Z, r18
          Can_clear_idemsk();
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 81       	ld	r18, Z
     a1e:	2e 7f       	andi	r18, 0xFE	; 254
     a20:	20 83       	st	Z, r18
          Can_config_rx();       
     a22:	db 01       	movw	r26, r22
     a24:	8c 91       	ld	r24, X
     a26:	8f 73       	andi	r24, 0x3F	; 63
     a28:	8c 93       	st	X, r24
     a2a:	8c 91       	ld	r24, X
     a2c:	80 68       	ori	r24, 0x80	; 128
     a2e:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a30:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     a32:	92 c3       	rjmp	.+1828   	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     a38:	8a 81       	ldd	r24, Y+2	; 0x02
     a3a:	82 95       	swap	r24
     a3c:	88 0f       	add	r24, r24
     a3e:	80 7e       	andi	r24, 0xE0	; 224
     a40:	81 5e       	subi	r24, 0xE1	; 225
     a42:	27 ef       	ldi	r18, 0xF7	; 247
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	f9 01       	movw	r30, r18
     a48:	80 83       	st	Z, r24
     a4a:	49 81       	ldd	r20, Y+1	; 0x01
     a4c:	42 95       	swap	r20
     a4e:	44 0f       	add	r20, r20
     a50:	40 7e       	andi	r20, 0xE0	; 224
     a52:	86 ef       	ldi	r24, 0xF6	; 246
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	fc 01       	movw	r30, r24
     a58:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	4c 91       	ld	r20, X
     a5e:	12 97       	sbiw	r26, 0x02	; 2
     a60:	46 95       	lsr	r20
     a62:	46 95       	lsr	r20
     a64:	46 95       	lsr	r20
     a66:	13 96       	adiw	r26, 0x03	; 3
     a68:	5c 91       	ld	r21, X
     a6a:	13 97       	sbiw	r26, 0x03	; 3
     a6c:	f0 e2       	ldi	r31, 0x20	; 32
     a6e:	5f 9f       	mul	r21, r31
     a70:	40 0d       	add	r20, r0
     a72:	11 24       	eor	r1, r1
     a74:	40 93 f3 00 	sts	0x00F3, r20
     a78:	12 96       	adiw	r26, 0x02	; 2
     a7a:	4c 91       	ld	r20, X
     a7c:	12 97       	sbiw	r26, 0x02	; 2
     a7e:	42 95       	swap	r20
     a80:	44 0f       	add	r20, r20
     a82:	40 7e       	andi	r20, 0xE0	; 224
     a84:	40 93 f2 00 	sts	0x00F2, r20
     a88:	6f ee       	ldi	r22, 0xEF	; 239
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	fb 01       	movw	r30, r22
     a8e:	40 81       	ld	r20, Z
     a90:	4f 7e       	andi	r20, 0xEF	; 239
     a92:	40 83       	st	Z, r20
		
          u8_temp=0; 
     a94:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     a96:	5b 81       	ldd	r21, Y+3	; 0x03
     a98:	52 95       	swap	r21
     a9a:	56 95       	lsr	r21
     a9c:	57 70       	andi	r21, 0x07	; 7
     a9e:	4c 81       	ldd	r20, Y+4	; 0x04
     aa0:	44 0f       	add	r20, r20
     aa2:	44 0f       	add	r20, r20
     aa4:	44 0f       	add	r20, r20
     aa6:	45 0f       	add	r20, r21
     aa8:	f9 01       	movw	r30, r18
     aaa:	40 83       	st	Z, r20
     aac:	3a 81       	ldd	r19, Y+2	; 0x02
     aae:	32 95       	swap	r19
     ab0:	36 95       	lsr	r19
     ab2:	37 70       	andi	r19, 0x07	; 7
     ab4:	2b 81       	ldd	r18, Y+3	; 0x03
     ab6:	22 0f       	add	r18, r18
     ab8:	22 0f       	add	r18, r18
     aba:	22 0f       	add	r18, r18
     abc:	23 0f       	add	r18, r19
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
     ac2:	99 81       	ldd	r25, Y+1	; 0x01
     ac4:	92 95       	swap	r25
     ac6:	96 95       	lsr	r25
     ac8:	97 70       	andi	r25, 0x07	; 7
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	88 0f       	add	r24, r24
     ace:	88 0f       	add	r24, r24
     ad0:	88 0f       	add	r24, r24
     ad2:	89 0f       	add	r24, r25
     ad4:	80 93 f5 00 	sts	0x00F5, r24
     ad8:	29 81       	ldd	r18, Y+1	; 0x01
     ada:	22 0f       	add	r18, r18
     adc:	22 0f       	add	r18, r18
     ade:	22 0f       	add	r18, r18
     ae0:	84 ef       	ldi	r24, 0xF4	; 244
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ae8:	fb 01       	movw	r30, r22
     aea:	30 81       	ld	r19, Z
     aec:	16 96       	adiw	r26, 0x06	; 6
     aee:	2c 91       	ld	r18, X
     af0:	16 97       	sbiw	r26, 0x06	; 6
     af2:	23 2b       	or	r18, r19
     af4:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     af6:	21 e0       	ldi	r18, 0x01	; 1
     af8:	1a 96       	adiw	r26, 0x0a	; 10
     afa:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     afc:	dc 01       	movw	r26, r24
     afe:	2c 91       	ld	r18, X
     b00:	24 60       	ori	r18, 0x04	; 4
     b02:	2c 93       	st	X, r18
		  Can_set_rtr();
     b04:	a0 ef       	ldi	r26, 0xF0	; 240
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	2c 91       	ld	r18, X
     b0a:	24 60       	ori	r18, 0x04	; 4
     b0c:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     b0e:	20 81       	ld	r18, Z
     b10:	2f 7d       	andi	r18, 0xDF	; 223
     b12:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b14:	fc 01       	movw	r30, r24
     b16:	20 81       	ld	r18, Z
     b18:	2e 7f       	andi	r18, 0xFE	; 254
     b1a:	20 83       	st	Z, r18
          Can_config_rx();       
     b1c:	db 01       	movw	r26, r22
     b1e:	8c 91       	ld	r24, X
     b20:	8f 73       	andi	r24, 0x3F	; 63
     b22:	8c 93       	st	X, r24
     b24:	8c 91       	ld	r24, X
     b26:	80 68       	ori	r24, 0x80	; 128
     b28:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b2a:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     b2c:	15 c3       	rjmp	.+1578   	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b2e:	1b 96       	adiw	r26, 0x0b	; 11
     b30:	8c 91       	ld	r24, X
     b32:	1b 97       	sbiw	r26, 0x0b	; 11
     b34:	88 23       	and	r24, r24
     b36:	d9 f1       	breq	.+118    	; 0xbae <__stack+0x2af>
     b38:	14 96       	adiw	r26, 0x04	; 4
     b3a:	9c 91       	ld	r25, X
     b3c:	14 97       	sbiw	r26, 0x04	; 4
     b3e:	92 95       	swap	r25
     b40:	96 95       	lsr	r25
     b42:	97 70       	andi	r25, 0x07	; 7
     b44:	15 96       	adiw	r26, 0x05	; 5
     b46:	8c 91       	ld	r24, X
     b48:	15 97       	sbiw	r26, 0x05	; 5
     b4a:	88 0f       	add	r24, r24
     b4c:	88 0f       	add	r24, r24
     b4e:	88 0f       	add	r24, r24
     b50:	89 0f       	add	r24, r25
     b52:	80 93 f3 00 	sts	0x00F3, r24
     b56:	13 96       	adiw	r26, 0x03	; 3
     b58:	9c 91       	ld	r25, X
     b5a:	13 97       	sbiw	r26, 0x03	; 3
     b5c:	92 95       	swap	r25
     b5e:	96 95       	lsr	r25
     b60:	97 70       	andi	r25, 0x07	; 7
     b62:	14 96       	adiw	r26, 0x04	; 4
     b64:	8c 91       	ld	r24, X
     b66:	14 97       	sbiw	r26, 0x04	; 4
     b68:	88 0f       	add	r24, r24
     b6a:	88 0f       	add	r24, r24
     b6c:	88 0f       	add	r24, r24
     b6e:	89 0f       	add	r24, r25
     b70:	80 93 f2 00 	sts	0x00F2, r24
     b74:	12 96       	adiw	r26, 0x02	; 2
     b76:	9c 91       	ld	r25, X
     b78:	12 97       	sbiw	r26, 0x02	; 2
     b7a:	92 95       	swap	r25
     b7c:	96 95       	lsr	r25
     b7e:	97 70       	andi	r25, 0x07	; 7
     b80:	13 96       	adiw	r26, 0x03	; 3
     b82:	8c 91       	ld	r24, X
     b84:	13 97       	sbiw	r26, 0x03	; 3
     b86:	88 0f       	add	r24, r24
     b88:	88 0f       	add	r24, r24
     b8a:	88 0f       	add	r24, r24
     b8c:	89 0f       	add	r24, r25
     b8e:	80 93 f1 00 	sts	0x00F1, r24
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	8c 91       	ld	r24, X
     b96:	12 97       	sbiw	r26, 0x02	; 2
     b98:	88 0f       	add	r24, r24
     b9a:	88 0f       	add	r24, r24
     b9c:	88 0f       	add	r24, r24
     b9e:	80 93 f0 00 	sts	0x00F0, r24
     ba2:	ef ee       	ldi	r30, 0xEF	; 239
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	80 61       	ori	r24, 0x10	; 16
     baa:	80 83       	st	Z, r24
     bac:	1c c0       	rjmp	.+56     	; 0xbe6 <__stack+0x2e7>
          else              { Can_set_std_id(cmd->id.std);}
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	8c 91       	ld	r24, X
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	86 95       	lsr	r24
     bb6:	86 95       	lsr	r24
     bb8:	86 95       	lsr	r24
     bba:	13 96       	adiw	r26, 0x03	; 3
     bbc:	9c 91       	ld	r25, X
     bbe:	13 97       	sbiw	r26, 0x03	; 3
     bc0:	e0 e2       	ldi	r30, 0x20	; 32
     bc2:	9e 9f       	mul	r25, r30
     bc4:	80 0d       	add	r24, r0
     bc6:	11 24       	eor	r1, r1
     bc8:	80 93 f3 00 	sts	0x00F3, r24
     bcc:	12 96       	adiw	r26, 0x02	; 2
     bce:	8c 91       	ld	r24, X
     bd0:	12 97       	sbiw	r26, 0x02	; 2
     bd2:	82 95       	swap	r24
     bd4:	88 0f       	add	r24, r24
     bd6:	80 7e       	andi	r24, 0xE0	; 224
     bd8:	80 93 f2 00 	sts	0x00F2, r24
     bdc:	ef ee       	ldi	r30, 0xEF	; 239
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8f 7e       	andi	r24, 0xEF	; 239
     be4:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	9b 81       	ldd	r25, Y+3	; 0x03
     bec:	92 95       	swap	r25
     bee:	96 95       	lsr	r25
     bf0:	97 70       	andi	r25, 0x07	; 7
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	88 0f       	add	r24, r24
     bf6:	88 0f       	add	r24, r24
     bf8:	88 0f       	add	r24, r24
     bfa:	89 0f       	add	r24, r25
     bfc:	80 93 f7 00 	sts	0x00F7, r24
     c00:	9a 81       	ldd	r25, Y+2	; 0x02
     c02:	92 95       	swap	r25
     c04:	96 95       	lsr	r25
     c06:	97 70       	andi	r25, 0x07	; 7
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	88 0f       	add	r24, r24
     c0c:	88 0f       	add	r24, r24
     c0e:	88 0f       	add	r24, r24
     c10:	89 0f       	add	r24, r25
     c12:	80 93 f6 00 	sts	0x00F6, r24
     c16:	99 81       	ldd	r25, Y+1	; 0x01
     c18:	92 95       	swap	r25
     c1a:	96 95       	lsr	r25
     c1c:	97 70       	andi	r25, 0x07	; 7
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	88 0f       	add	r24, r24
     c22:	88 0f       	add	r24, r24
     c24:	88 0f       	add	r24, r24
     c26:	89 0f       	add	r24, r25
     c28:	80 93 f5 00 	sts	0x00F5, r24
     c2c:	29 81       	ldd	r18, Y+1	; 0x01
     c2e:	22 0f       	add	r18, r18
     c30:	22 0f       	add	r18, r18
     c32:	22 0f       	add	r18, r18
     c34:	84 ef       	ldi	r24, 0xF4	; 244
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	fc 01       	movw	r30, r24
     c3a:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     c3c:	ef ee       	ldi	r30, 0xEF	; 239
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	30 81       	ld	r19, Z
     c42:	16 96       	adiw	r26, 0x06	; 6
     c44:	2c 91       	ld	r18, X
     c46:	23 2b       	or	r18, r19
     c48:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     c4a:	dc 01       	movw	r26, r24
     c4c:	2c 91       	ld	r18, X
     c4e:	2b 7f       	andi	r18, 0xFB	; 251
     c50:	2c 93       	st	X, r18
          Can_set_idemsk();
     c52:	2c 91       	ld	r18, X
     c54:	21 60       	ori	r18, 0x01	; 1
     c56:	2c 93       	st	X, r18
          Can_config_rx();       
     c58:	80 81       	ld	r24, Z
     c5a:	8f 73       	andi	r24, 0x3F	; 63
     c5c:	80 83       	st	Z, r24
     c5e:	80 81       	ld	r24, Z
     c60:	80 68       	ori	r24, 0x80	; 128
     c62:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c64:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     c66:	78 c2       	rjmp	.+1264   	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c68:	1b 96       	adiw	r26, 0x0b	; 11
     c6a:	8c 91       	ld	r24, X
     c6c:	1b 97       	sbiw	r26, 0x0b	; 11
     c6e:	88 23       	and	r24, r24
     c70:	d9 f1       	breq	.+118    	; 0xce8 <__stack+0x3e9>
     c72:	14 96       	adiw	r26, 0x04	; 4
     c74:	9c 91       	ld	r25, X
     c76:	14 97       	sbiw	r26, 0x04	; 4
     c78:	92 95       	swap	r25
     c7a:	96 95       	lsr	r25
     c7c:	97 70       	andi	r25, 0x07	; 7
     c7e:	15 96       	adiw	r26, 0x05	; 5
     c80:	8c 91       	ld	r24, X
     c82:	15 97       	sbiw	r26, 0x05	; 5
     c84:	88 0f       	add	r24, r24
     c86:	88 0f       	add	r24, r24
     c88:	88 0f       	add	r24, r24
     c8a:	89 0f       	add	r24, r25
     c8c:	80 93 f3 00 	sts	0x00F3, r24
     c90:	13 96       	adiw	r26, 0x03	; 3
     c92:	9c 91       	ld	r25, X
     c94:	13 97       	sbiw	r26, 0x03	; 3
     c96:	92 95       	swap	r25
     c98:	96 95       	lsr	r25
     c9a:	97 70       	andi	r25, 0x07	; 7
     c9c:	14 96       	adiw	r26, 0x04	; 4
     c9e:	8c 91       	ld	r24, X
     ca0:	14 97       	sbiw	r26, 0x04	; 4
     ca2:	88 0f       	add	r24, r24
     ca4:	88 0f       	add	r24, r24
     ca6:	88 0f       	add	r24, r24
     ca8:	89 0f       	add	r24, r25
     caa:	80 93 f2 00 	sts	0x00F2, r24
     cae:	12 96       	adiw	r26, 0x02	; 2
     cb0:	9c 91       	ld	r25, X
     cb2:	12 97       	sbiw	r26, 0x02	; 2
     cb4:	92 95       	swap	r25
     cb6:	96 95       	lsr	r25
     cb8:	97 70       	andi	r25, 0x07	; 7
     cba:	13 96       	adiw	r26, 0x03	; 3
     cbc:	8c 91       	ld	r24, X
     cbe:	13 97       	sbiw	r26, 0x03	; 3
     cc0:	88 0f       	add	r24, r24
     cc2:	88 0f       	add	r24, r24
     cc4:	88 0f       	add	r24, r24
     cc6:	89 0f       	add	r24, r25
     cc8:	80 93 f1 00 	sts	0x00F1, r24
     ccc:	12 96       	adiw	r26, 0x02	; 2
     cce:	8c 91       	ld	r24, X
     cd0:	12 97       	sbiw	r26, 0x02	; 2
     cd2:	88 0f       	add	r24, r24
     cd4:	88 0f       	add	r24, r24
     cd6:	88 0f       	add	r24, r24
     cd8:	80 93 f0 00 	sts	0x00F0, r24
     cdc:	ef ee       	ldi	r30, 0xEF	; 239
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	80 61       	ori	r24, 0x10	; 16
     ce4:	80 83       	st	Z, r24
     ce6:	1c c0       	rjmp	.+56     	; 0xd20 <__stack+0x421>
          else              { Can_set_std_id(cmd->id.std);}
     ce8:	12 96       	adiw	r26, 0x02	; 2
     cea:	8c 91       	ld	r24, X
     cec:	12 97       	sbiw	r26, 0x02	; 2
     cee:	86 95       	lsr	r24
     cf0:	86 95       	lsr	r24
     cf2:	86 95       	lsr	r24
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 91       	ld	r25, X
     cf8:	13 97       	sbiw	r26, 0x03	; 3
     cfa:	e0 e2       	ldi	r30, 0x20	; 32
     cfc:	9e 9f       	mul	r25, r30
     cfe:	80 0d       	add	r24, r0
     d00:	11 24       	eor	r1, r1
     d02:	80 93 f3 00 	sts	0x00F3, r24
     d06:	12 96       	adiw	r26, 0x02	; 2
     d08:	8c 91       	ld	r24, X
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	82 95       	swap	r24
     d0e:	88 0f       	add	r24, r24
     d10:	80 7e       	andi	r24, 0xE0	; 224
     d12:	80 93 f2 00 	sts	0x00F2, r24
     d16:	ef ee       	ldi	r30, 0xEF	; 239
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 7e       	andi	r24, 0xEF	; 239
     d1e:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	92 95       	swap	r25
     d28:	96 95       	lsr	r25
     d2a:	97 70       	andi	r25, 0x07	; 7
     d2c:	8c 81       	ldd	r24, Y+4	; 0x04
     d2e:	88 0f       	add	r24, r24
     d30:	88 0f       	add	r24, r24
     d32:	88 0f       	add	r24, r24
     d34:	89 0f       	add	r24, r25
     d36:	80 93 f7 00 	sts	0x00F7, r24
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	92 95       	swap	r25
     d3e:	96 95       	lsr	r25
     d40:	97 70       	andi	r25, 0x07	; 7
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	88 0f       	add	r24, r24
     d46:	88 0f       	add	r24, r24
     d48:	88 0f       	add	r24, r24
     d4a:	89 0f       	add	r24, r25
     d4c:	80 93 f6 00 	sts	0x00F6, r24
     d50:	99 81       	ldd	r25, Y+1	; 0x01
     d52:	92 95       	swap	r25
     d54:	96 95       	lsr	r25
     d56:	97 70       	andi	r25, 0x07	; 7
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	88 0f       	add	r24, r24
     d5c:	88 0f       	add	r24, r24
     d5e:	88 0f       	add	r24, r24
     d60:	89 0f       	add	r24, r25
     d62:	80 93 f5 00 	sts	0x00F5, r24
     d66:	29 81       	ldd	r18, Y+1	; 0x01
     d68:	22 0f       	add	r18, r18
     d6a:	22 0f       	add	r18, r18
     d6c:	22 0f       	add	r18, r18
     d6e:	84 ef       	ldi	r24, 0xF4	; 244
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	fc 01       	movw	r30, r24
     d74:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d76:	ef ee       	ldi	r30, 0xEF	; 239
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	30 81       	ld	r19, Z
     d7c:	16 96       	adiw	r26, 0x06	; 6
     d7e:	2c 91       	ld	r18, X
     d80:	16 97       	sbiw	r26, 0x06	; 6
     d82:	23 2b       	or	r18, r19
     d84:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     d86:	1a 96       	adiw	r26, 0x0a	; 10
     d88:	1c 92       	st	X, r1
     d8a:	dc 01       	movw	r26, r24
     d8c:	2c 91       	ld	r18, X
     d8e:	24 60       	ori	r18, 0x04	; 4
     d90:	2c 93       	st	X, r18
     d92:	a0 ef       	ldi	r26, 0xF0	; 240
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	2c 91       	ld	r18, X
     d98:	2b 7f       	andi	r18, 0xFB	; 251
     d9a:	2c 93       	st	X, r18
          Can_set_idemsk();
     d9c:	dc 01       	movw	r26, r24
     d9e:	2c 91       	ld	r18, X
     da0:	21 60       	ori	r18, 0x01	; 1
     da2:	2c 93       	st	X, r18
          Can_config_rx();       
     da4:	80 81       	ld	r24, Z
     da6:	8f 73       	andi	r24, 0x3F	; 63
     da8:	80 83       	st	Z, r24
     daa:	80 81       	ld	r24, Z
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     db0:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     db2:	d2 c1       	rjmp	.+932    	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     db4:	1b 96       	adiw	r26, 0x0b	; 11
     db6:	8c 91       	ld	r24, X
     db8:	1b 97       	sbiw	r26, 0x0b	; 11
     dba:	88 23       	and	r24, r24
     dbc:	d9 f1       	breq	.+118    	; 0xe34 <__stack+0x535>
     dbe:	14 96       	adiw	r26, 0x04	; 4
     dc0:	9c 91       	ld	r25, X
     dc2:	14 97       	sbiw	r26, 0x04	; 4
     dc4:	92 95       	swap	r25
     dc6:	96 95       	lsr	r25
     dc8:	97 70       	andi	r25, 0x07	; 7
     dca:	15 96       	adiw	r26, 0x05	; 5
     dcc:	8c 91       	ld	r24, X
     dce:	15 97       	sbiw	r26, 0x05	; 5
     dd0:	88 0f       	add	r24, r24
     dd2:	88 0f       	add	r24, r24
     dd4:	88 0f       	add	r24, r24
     dd6:	89 0f       	add	r24, r25
     dd8:	80 93 f3 00 	sts	0x00F3, r24
     ddc:	13 96       	adiw	r26, 0x03	; 3
     dde:	9c 91       	ld	r25, X
     de0:	13 97       	sbiw	r26, 0x03	; 3
     de2:	92 95       	swap	r25
     de4:	96 95       	lsr	r25
     de6:	97 70       	andi	r25, 0x07	; 7
     de8:	14 96       	adiw	r26, 0x04	; 4
     dea:	8c 91       	ld	r24, X
     dec:	14 97       	sbiw	r26, 0x04	; 4
     dee:	88 0f       	add	r24, r24
     df0:	88 0f       	add	r24, r24
     df2:	88 0f       	add	r24, r24
     df4:	89 0f       	add	r24, r25
     df6:	80 93 f2 00 	sts	0x00F2, r24
     dfa:	12 96       	adiw	r26, 0x02	; 2
     dfc:	9c 91       	ld	r25, X
     dfe:	12 97       	sbiw	r26, 0x02	; 2
     e00:	92 95       	swap	r25
     e02:	96 95       	lsr	r25
     e04:	97 70       	andi	r25, 0x07	; 7
     e06:	13 96       	adiw	r26, 0x03	; 3
     e08:	8c 91       	ld	r24, X
     e0a:	13 97       	sbiw	r26, 0x03	; 3
     e0c:	88 0f       	add	r24, r24
     e0e:	88 0f       	add	r24, r24
     e10:	88 0f       	add	r24, r24
     e12:	89 0f       	add	r24, r25
     e14:	80 93 f1 00 	sts	0x00F1, r24
     e18:	12 96       	adiw	r26, 0x02	; 2
     e1a:	8c 91       	ld	r24, X
     e1c:	12 97       	sbiw	r26, 0x02	; 2
     e1e:	88 0f       	add	r24, r24
     e20:	88 0f       	add	r24, r24
     e22:	88 0f       	add	r24, r24
     e24:	80 93 f0 00 	sts	0x00F0, r24
     e28:	ef ee       	ldi	r30, 0xEF	; 239
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 61       	ori	r24, 0x10	; 16
     e30:	80 83       	st	Z, r24
     e32:	1c c0       	rjmp	.+56     	; 0xe6c <__stack+0x56d>
          else              { Can_set_std_id(cmd->id.std);}
     e34:	12 96       	adiw	r26, 0x02	; 2
     e36:	8c 91       	ld	r24, X
     e38:	12 97       	sbiw	r26, 0x02	; 2
     e3a:	86 95       	lsr	r24
     e3c:	86 95       	lsr	r24
     e3e:	86 95       	lsr	r24
     e40:	13 96       	adiw	r26, 0x03	; 3
     e42:	9c 91       	ld	r25, X
     e44:	13 97       	sbiw	r26, 0x03	; 3
     e46:	e0 e2       	ldi	r30, 0x20	; 32
     e48:	9e 9f       	mul	r25, r30
     e4a:	80 0d       	add	r24, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	80 93 f3 00 	sts	0x00F3, r24
     e52:	12 96       	adiw	r26, 0x02	; 2
     e54:	8c 91       	ld	r24, X
     e56:	12 97       	sbiw	r26, 0x02	; 2
     e58:	82 95       	swap	r24
     e5a:	88 0f       	add	r24, r24
     e5c:	80 7e       	andi	r24, 0xE0	; 224
     e5e:	80 93 f2 00 	sts	0x00F2, r24
     e62:	ef ee       	ldi	r30, 0xEF	; 239
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7e       	andi	r24, 0xEF	; 239
     e6a:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	92 95       	swap	r25
     e74:	96 95       	lsr	r25
     e76:	97 70       	andi	r25, 0x07	; 7
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	88 0f       	add	r24, r24
     e7c:	88 0f       	add	r24, r24
     e7e:	88 0f       	add	r24, r24
     e80:	89 0f       	add	r24, r25
     e82:	80 93 f7 00 	sts	0x00F7, r24
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	92 95       	swap	r25
     e8a:	96 95       	lsr	r25
     e8c:	97 70       	andi	r25, 0x07	; 7
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	88 0f       	add	r24, r24
     e92:	88 0f       	add	r24, r24
     e94:	88 0f       	add	r24, r24
     e96:	89 0f       	add	r24, r25
     e98:	80 93 f6 00 	sts	0x00F6, r24
     e9c:	99 81       	ldd	r25, Y+1	; 0x01
     e9e:	92 95       	swap	r25
     ea0:	96 95       	lsr	r25
     ea2:	97 70       	andi	r25, 0x07	; 7
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	88 0f       	add	r24, r24
     ea8:	88 0f       	add	r24, r24
     eaa:	88 0f       	add	r24, r24
     eac:	89 0f       	add	r24, r25
     eae:	80 93 f5 00 	sts	0x00F5, r24
     eb2:	29 81       	ldd	r18, Y+1	; 0x01
     eb4:	22 0f       	add	r18, r18
     eb6:	22 0f       	add	r18, r18
     eb8:	22 0f       	add	r18, r18
     eba:	84 ef       	ldi	r24, 0xF4	; 244
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	fc 01       	movw	r30, r24
     ec0:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ec2:	ef ee       	ldi	r30, 0xEF	; 239
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	30 81       	ld	r19, Z
     ec8:	16 96       	adiw	r26, 0x06	; 6
     eca:	2c 91       	ld	r18, X
     ecc:	16 97       	sbiw	r26, 0x06	; 6
     ece:	23 2b       	or	r18, r19
     ed0:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	1a 96       	adiw	r26, 0x0a	; 10
     ed6:	2c 93       	st	X, r18
     ed8:	dc 01       	movw	r26, r24
     eda:	2c 91       	ld	r18, X
     edc:	24 60       	ori	r18, 0x04	; 4
     ede:	2c 93       	st	X, r18
     ee0:	a0 ef       	ldi	r26, 0xF0	; 240
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	2c 91       	ld	r18, X
     ee6:	24 60       	ori	r18, 0x04	; 4
     ee8:	2c 93       	st	X, r18
          Can_clear_rplv();
     eea:	20 81       	ld	r18, Z
     eec:	2f 7d       	andi	r18, 0xDF	; 223
     eee:	20 83       	st	Z, r18
          Can_set_idemsk();
     ef0:	dc 01       	movw	r26, r24
     ef2:	2c 91       	ld	r18, X
     ef4:	21 60       	ori	r18, 0x01	; 1
     ef6:	2c 93       	st	X, r18
          Can_config_rx();       
     ef8:	80 81       	ld	r24, Z
     efa:	8f 73       	andi	r24, 0x3F	; 63
     efc:	80 83       	st	Z, r24
     efe:	80 81       	ld	r24, Z
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     f04:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     f06:	28 c1       	rjmp	.+592    	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	8a ef       	ldi	r24, 0xFA	; 250
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	17 96       	adiw	r26, 0x07	; 7
     f10:	ed 91       	ld	r30, X+
     f12:	fc 91       	ld	r31, X
     f14:	18 97       	sbiw	r26, 0x08	; 8
     f16:	e2 0f       	add	r30, r18
     f18:	f1 1d       	adc	r31, r1
     f1a:	30 81       	ld	r19, Z
     f1c:	fc 01       	movw	r30, r24
     f1e:	30 83       	st	Z, r19
     f20:	2f 5f       	subi	r18, 0xFF	; 255
     f22:	16 96       	adiw	r26, 0x06	; 6
     f24:	3c 91       	ld	r19, X
     f26:	16 97       	sbiw	r26, 0x06	; 6
     f28:	23 17       	cp	r18, r19
     f2a:	88 f3       	brcs	.-30     	; 0xf0e <__stack+0x60f>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     f2c:	19 82       	std	Y+1, r1	; 0x01
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	92 95       	swap	r25
     f32:	96 95       	lsr	r25
     f34:	97 70       	andi	r25, 0x07	; 7
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	88 0f       	add	r24, r24
     f3a:	88 0f       	add	r24, r24
     f3c:	88 0f       	add	r24, r24
     f3e:	89 0f       	add	r24, r25
     f40:	80 93 f7 00 	sts	0x00F7, r24
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	92 95       	swap	r25
     f48:	96 95       	lsr	r25
     f4a:	97 70       	andi	r25, 0x07	; 7
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	88 0f       	add	r24, r24
     f50:	88 0f       	add	r24, r24
     f52:	88 0f       	add	r24, r24
     f54:	89 0f       	add	r24, r25
     f56:	80 93 f6 00 	sts	0x00F6, r24
     f5a:	99 81       	ldd	r25, Y+1	; 0x01
     f5c:	92 95       	swap	r25
     f5e:	96 95       	lsr	r25
     f60:	97 70       	andi	r25, 0x07	; 7
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 0f       	add	r24, r24
     f66:	88 0f       	add	r24, r24
     f68:	88 0f       	add	r24, r24
     f6a:	89 0f       	add	r24, r25
     f6c:	80 93 f5 00 	sts	0x00F5, r24
     f70:	29 81       	ldd	r18, Y+1	; 0x01
     f72:	22 0f       	add	r18, r18
     f74:	22 0f       	add	r18, r18
     f76:	22 0f       	add	r18, r18
     f78:	84 ef       	ldi	r24, 0xF4	; 244
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	fc 01       	movw	r30, r24
     f7e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     f80:	ef ee       	ldi	r30, 0xEF	; 239
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	30 81       	ld	r19, Z
     f86:	16 96       	adiw	r26, 0x06	; 6
     f88:	2c 91       	ld	r18, X
     f8a:	16 97       	sbiw	r26, 0x06	; 6
     f8c:	23 2b       	or	r18, r19
     f8e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     f90:	21 e0       	ldi	r18, 0x01	; 1
     f92:	1a 96       	adiw	r26, 0x0a	; 10
     f94:	2c 93       	st	X, r18
     f96:	dc 01       	movw	r26, r24
     f98:	2c 91       	ld	r18, X
     f9a:	24 60       	ori	r18, 0x04	; 4
     f9c:	2c 93       	st	X, r18
     f9e:	a0 ef       	ldi	r26, 0xF0	; 240
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	2c 91       	ld	r18, X
     fa4:	24 60       	ori	r18, 0x04	; 4
     fa6:	2c 93       	st	X, r18
          Can_set_rplv();
     fa8:	20 81       	ld	r18, Z
     faa:	20 62       	ori	r18, 0x20	; 32
     fac:	20 83       	st	Z, r18
          Can_clear_idemsk();
     fae:	dc 01       	movw	r26, r24
     fb0:	2c 91       	ld	r18, X
     fb2:	2e 7f       	andi	r18, 0xFE	; 254
     fb4:	2c 93       	st	X, r18
          Can_config_rx();       
     fb6:	80 81       	ld	r24, Z
     fb8:	8f 73       	andi	r24, 0x3F	; 63
     fba:	80 83       	st	Z, r24
     fbc:	80 81       	ld	r24, Z
     fbe:	80 68       	ori	r24, 0x80	; 128
     fc0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fc2:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     fc4:	c9 c0       	rjmp	.+402    	; 0x1158 <__stack+0x859>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fc6:	1b 96       	adiw	r26, 0x0b	; 11
     fc8:	8c 91       	ld	r24, X
     fca:	1b 97       	sbiw	r26, 0x0b	; 11
     fcc:	88 23       	and	r24, r24
     fce:	d9 f1       	breq	.+118    	; 0x1046 <__stack+0x747>
     fd0:	14 96       	adiw	r26, 0x04	; 4
     fd2:	9c 91       	ld	r25, X
     fd4:	14 97       	sbiw	r26, 0x04	; 4
     fd6:	92 95       	swap	r25
     fd8:	96 95       	lsr	r25
     fda:	97 70       	andi	r25, 0x07	; 7
     fdc:	15 96       	adiw	r26, 0x05	; 5
     fde:	8c 91       	ld	r24, X
     fe0:	15 97       	sbiw	r26, 0x05	; 5
     fe2:	88 0f       	add	r24, r24
     fe4:	88 0f       	add	r24, r24
     fe6:	88 0f       	add	r24, r24
     fe8:	89 0f       	add	r24, r25
     fea:	80 93 f3 00 	sts	0x00F3, r24
     fee:	13 96       	adiw	r26, 0x03	; 3
     ff0:	9c 91       	ld	r25, X
     ff2:	13 97       	sbiw	r26, 0x03	; 3
     ff4:	92 95       	swap	r25
     ff6:	96 95       	lsr	r25
     ff8:	97 70       	andi	r25, 0x07	; 7
     ffa:	14 96       	adiw	r26, 0x04	; 4
     ffc:	8c 91       	ld	r24, X
     ffe:	14 97       	sbiw	r26, 0x04	; 4
    1000:	88 0f       	add	r24, r24
    1002:	88 0f       	add	r24, r24
    1004:	88 0f       	add	r24, r24
    1006:	89 0f       	add	r24, r25
    1008:	80 93 f2 00 	sts	0x00F2, r24
    100c:	12 96       	adiw	r26, 0x02	; 2
    100e:	9c 91       	ld	r25, X
    1010:	12 97       	sbiw	r26, 0x02	; 2
    1012:	92 95       	swap	r25
    1014:	96 95       	lsr	r25
    1016:	97 70       	andi	r25, 0x07	; 7
    1018:	13 96       	adiw	r26, 0x03	; 3
    101a:	8c 91       	ld	r24, X
    101c:	13 97       	sbiw	r26, 0x03	; 3
    101e:	88 0f       	add	r24, r24
    1020:	88 0f       	add	r24, r24
    1022:	88 0f       	add	r24, r24
    1024:	89 0f       	add	r24, r25
    1026:	80 93 f1 00 	sts	0x00F1, r24
    102a:	12 96       	adiw	r26, 0x02	; 2
    102c:	8c 91       	ld	r24, X
    102e:	12 97       	sbiw	r26, 0x02	; 2
    1030:	88 0f       	add	r24, r24
    1032:	88 0f       	add	r24, r24
    1034:	88 0f       	add	r24, r24
    1036:	80 93 f0 00 	sts	0x00F0, r24
    103a:	ef ee       	ldi	r30, 0xEF	; 239
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	80 61       	ori	r24, 0x10	; 16
    1042:	80 83       	st	Z, r24
    1044:	1c c0       	rjmp	.+56     	; 0x107e <__stack+0x77f>
          else              { Can_set_std_id(cmd->id.std);}
    1046:	12 96       	adiw	r26, 0x02	; 2
    1048:	8c 91       	ld	r24, X
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	86 95       	lsr	r24
    104e:	86 95       	lsr	r24
    1050:	86 95       	lsr	r24
    1052:	13 96       	adiw	r26, 0x03	; 3
    1054:	9c 91       	ld	r25, X
    1056:	13 97       	sbiw	r26, 0x03	; 3
    1058:	e0 e2       	ldi	r30, 0x20	; 32
    105a:	9e 9f       	mul	r25, r30
    105c:	80 0d       	add	r24, r0
    105e:	11 24       	eor	r1, r1
    1060:	80 93 f3 00 	sts	0x00F3, r24
    1064:	12 96       	adiw	r26, 0x02	; 2
    1066:	8c 91       	ld	r24, X
    1068:	12 97       	sbiw	r26, 0x02	; 2
    106a:	82 95       	swap	r24
    106c:	88 0f       	add	r24, r24
    106e:	80 7e       	andi	r24, 0xE0	; 224
    1070:	80 93 f2 00 	sts	0x00F2, r24
    1074:	ef ee       	ldi	r30, 0xEF	; 239
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8f 7e       	andi	r24, 0xEF	; 239
    107c:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    107e:	16 96       	adiw	r26, 0x06	; 6
    1080:	8c 91       	ld	r24, X
    1082:	16 97       	sbiw	r26, 0x06	; 6
    1084:	88 23       	and	r24, r24
    1086:	91 f0       	breq	.+36     	; 0x10ac <__stack+0x7ad>
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	8a ef       	ldi	r24, 0xFA	; 250
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	17 96       	adiw	r26, 0x07	; 7
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	18 97       	sbiw	r26, 0x08	; 8
    1096:	e2 0f       	add	r30, r18
    1098:	f1 1d       	adc	r31, r1
    109a:	30 81       	ld	r19, Z
    109c:	fc 01       	movw	r30, r24
    109e:	30 83       	st	Z, r19
    10a0:	2f 5f       	subi	r18, 0xFF	; 255
    10a2:	16 96       	adiw	r26, 0x06	; 6
    10a4:	3c 91       	ld	r19, X
    10a6:	16 97       	sbiw	r26, 0x06	; 6
    10a8:	23 17       	cp	r18, r19
    10aa:	88 f3       	brcs	.-30     	; 0x108e <__stack+0x78f>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	9b 81       	ldd	r25, Y+3	; 0x03
    10b2:	92 95       	swap	r25
    10b4:	96 95       	lsr	r25
    10b6:	97 70       	andi	r25, 0x07	; 7
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	88 0f       	add	r24, r24
    10bc:	88 0f       	add	r24, r24
    10be:	88 0f       	add	r24, r24
    10c0:	89 0f       	add	r24, r25
    10c2:	80 93 f7 00 	sts	0x00F7, r24
    10c6:	9a 81       	ldd	r25, Y+2	; 0x02
    10c8:	92 95       	swap	r25
    10ca:	96 95       	lsr	r25
    10cc:	97 70       	andi	r25, 0x07	; 7
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	88 0f       	add	r24, r24
    10d2:	88 0f       	add	r24, r24
    10d4:	88 0f       	add	r24, r24
    10d6:	89 0f       	add	r24, r25
    10d8:	80 93 f6 00 	sts	0x00F6, r24
    10dc:	99 81       	ldd	r25, Y+1	; 0x01
    10de:	92 95       	swap	r25
    10e0:	96 95       	lsr	r25
    10e2:	97 70       	andi	r25, 0x07	; 7
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	88 0f       	add	r24, r24
    10e8:	88 0f       	add	r24, r24
    10ea:	88 0f       	add	r24, r24
    10ec:	89 0f       	add	r24, r25
    10ee:	80 93 f5 00 	sts	0x00F5, r24
    10f2:	29 81       	ldd	r18, Y+1	; 0x01
    10f4:	22 0f       	add	r18, r18
    10f6:	22 0f       	add	r18, r18
    10f8:	22 0f       	add	r18, r18
    10fa:	84 ef       	ldi	r24, 0xF4	; 244
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	fc 01       	movw	r30, r24
    1100:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1102:	ef ee       	ldi	r30, 0xEF	; 239
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	30 81       	ld	r19, Z
    1108:	16 96       	adiw	r26, 0x06	; 6
    110a:	2c 91       	ld	r18, X
    110c:	16 97       	sbiw	r26, 0x06	; 6
    110e:	23 2b       	or	r18, r19
    1110:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1112:	21 e0       	ldi	r18, 0x01	; 1
    1114:	1a 96       	adiw	r26, 0x0a	; 10
    1116:	2c 93       	st	X, r18
    1118:	dc 01       	movw	r26, r24
    111a:	2c 91       	ld	r18, X
    111c:	24 60       	ori	r18, 0x04	; 4
    111e:	2c 93       	st	X, r18
    1120:	a0 ef       	ldi	r26, 0xF0	; 240
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	2c 91       	ld	r18, X
    1126:	24 60       	ori	r18, 0x04	; 4
    1128:	2c 93       	st	X, r18
          Can_set_rplv();
    112a:	20 81       	ld	r18, Z
    112c:	20 62       	ori	r18, 0x20	; 32
    112e:	20 83       	st	Z, r18
          Can_set_idemsk();
    1130:	dc 01       	movw	r26, r24
    1132:	2c 91       	ld	r18, X
    1134:	21 60       	ori	r18, 0x01	; 1
    1136:	2c 93       	st	X, r18
          Can_config_rx();       
    1138:	80 81       	ld	r24, Z
    113a:	8f 73       	andi	r24, 0x3F	; 63
    113c:	80 83       	st	Z, r24
    113e:	80 81       	ld	r24, Z
    1140:	80 68       	ori	r24, 0x80	; 128
    1142:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1144:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <__stack+0x859>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1148:	19 96       	adiw	r26, 0x09	; 9
    114a:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    114c:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    114e:	04 c0       	rjmp	.+8      	; 0x1158 <__stack+0x859>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1150:	8f e1       	ldi	r24, 0x1F	; 31
    1152:	19 96       	adiw	r26, 0x09	; 9
    1154:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    1158:	0f 90       	pop	r0
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	08 95       	ret

00001160 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    1166:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1168:	88 23       	and	r24, r24
    116a:	09 f4       	brne	.+2      	; 0x116e <can_get_status+0xe>
    116c:	e1 c0       	rjmp	.+450    	; 0x1330 <can_get_status+0x1d0>
    116e:	8f 31       	cpi	r24, 0x1F	; 31
    1170:	09 f4       	brne	.+2      	; 0x1174 <can_get_status+0x14>
    1172:	e0 c0       	rjmp	.+448    	; 0x1334 <can_get_status+0x1d4>
    1174:	8f 3f       	cpi	r24, 0xFF	; 255
    1176:	09 f4       	brne	.+2      	; 0x117a <can_get_status+0x1a>
    1178:	df c0       	rjmp	.+446    	; 0x1338 <can_get_status+0x1d8>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    117a:	62 95       	swap	r22
    117c:	60 7f       	andi	r22, 0xF0	; 240
    117e:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    1182:	0e 94 47 02 	call	0x48e	; 0x48e <can_get_mob_status>
    
    switch (a_status)
    1186:	80 32       	cpi	r24, 0x20	; 32
    1188:	61 f0       	breq	.+24     	; 0x11a2 <can_get_status+0x42>
    118a:	20 f4       	brcc	.+8      	; 0x1194 <can_get_status+0x34>
    118c:	88 23       	and	r24, r24
    118e:	09 f4       	brne	.+2      	; 0x1192 <can_get_status+0x32>
    1190:	d5 c0       	rjmp	.+426    	; 0x133c <can_get_status+0x1dc>
    1192:	c4 c0       	rjmp	.+392    	; 0x131c <can_get_status+0x1bc>
    1194:	80 34       	cpi	r24, 0x40	; 64
    1196:	09 f4       	brne	.+2      	; 0x119a <can_get_status+0x3a>
    1198:	b6 c0       	rjmp	.+364    	; 0x1306 <can_get_status+0x1a6>
    119a:	80 3a       	cpi	r24, 0xA0	; 160
    119c:	09 f4       	brne	.+2      	; 0x11a0 <can_get_status+0x40>
    119e:	5a c0       	rjmp	.+180    	; 0x1254 <can_get_status+0xf4>
    11a0:	bd c0       	rjmp	.+378    	; 0x131c <can_get_status+0x1bc>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
			delay_ms(500);
    11aa:	84 ef       	ldi	r24, 0xF4	; 244
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <delay_ms>
			LED_Reg_Write(0x00);
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
	    
            cmd->ctrl.rtr = Can_get_rtr();
    11ba:	80 91 f0 00 	lds	r24, 0x00F0
    11be:	82 fb       	bst	r24, 2
    11c0:	88 27       	eor	r24, r24
    11c2:	80 f9       	bld	r24, 0
    11c4:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    11c6:	80 91 ef 00 	lds	r24, 0x00EF
    11ca:	84 ff       	sbrs	r24, 4
    11cc:	2d c0       	rjmp	.+90     	; 0x1228 <can_get_status+0xc8>
            {
	            cmd->ctrl.ide = 1; // extended frame
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    11d2:	e3 ef       	ldi	r30, 0xF3	; 243
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	86 95       	lsr	r24
    11da:	86 95       	lsr	r24
    11dc:	86 95       	lsr	r24
    11de:	8d 83       	std	Y+5, r24	; 0x05
    11e0:	a2 ef       	ldi	r26, 0xF2	; 242
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	8c 91       	ld	r24, X
    11e6:	90 81       	ld	r25, Z
    11e8:	86 95       	lsr	r24
    11ea:	86 95       	lsr	r24
    11ec:	86 95       	lsr	r24
    11ee:	20 e2       	ldi	r18, 0x20	; 32
    11f0:	92 9f       	mul	r25, r18
    11f2:	80 0d       	add	r24, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	8c 83       	std	Y+4, r24	; 0x04
    11f8:	e1 ef       	ldi	r30, 0xF1	; 241
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	9c 91       	ld	r25, X
    1200:	86 95       	lsr	r24
    1202:	86 95       	lsr	r24
    1204:	86 95       	lsr	r24
    1206:	20 e2       	ldi	r18, 0x20	; 32
    1208:	92 9f       	mul	r25, r18
    120a:	80 0d       	add	r24, r0
    120c:	11 24       	eor	r1, r1
    120e:	8b 83       	std	Y+3, r24	; 0x03
    1210:	80 91 f0 00 	lds	r24, 0x00F0
    1214:	90 81       	ld	r25, Z
    1216:	86 95       	lsr	r24
    1218:	86 95       	lsr	r24
    121a:	86 95       	lsr	r24
    121c:	20 e2       	ldi	r18, 0x20	; 32
    121e:	92 9f       	mul	r25, r18
    1220:	80 0d       	add	r24, r0
    1222:	11 24       	eor	r1, r1
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	07 c0       	rjmp	.+14     	; 0x1236 <can_get_status+0xd6>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    1228:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    122a:	e3 ef       	ldi	r30, 0xF3	; 243
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 91 f2 00 	lds	r24, 0x00F2
    1234:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    1236:	80 e2       	ldi	r24, 0x20	; 32
    1238:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    123a:	8f 81       	ldd	r24, Y+7	; 0x07
    123c:	98 85       	ldd	r25, Y+8	; 0x08
    123e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    1242:	ef ee       	ldi	r30, 0xEF	; 239
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8f 73       	andi	r24, 0x3F	; 63
    124a:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    124c:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    1250:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    1252:	75 c0       	rjmp	.+234    	; 0x133e <can_get_status+0x1de>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    1254:	80 91 f0 00 	lds	r24, 0x00F0
    1258:	82 fb       	bst	r24, 2
    125a:	88 27       	eor	r24, r24
    125c:	80 f9       	bld	r24, 0
    125e:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1260:	80 91 ef 00 	lds	r24, 0x00EF
    1264:	84 ff       	sbrs	r24, 4
    1266:	2d c0       	rjmp	.+90     	; 0x12c2 <can_get_status+0x162>
            {
                cmd->ctrl.ide = 1; // extended frame
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    126c:	e3 ef       	ldi	r30, 0xF3	; 243
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	86 95       	lsr	r24
    1274:	86 95       	lsr	r24
    1276:	86 95       	lsr	r24
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	a2 ef       	ldi	r26, 0xF2	; 242
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	8c 91       	ld	r24, X
    1280:	90 81       	ld	r25, Z
    1282:	86 95       	lsr	r24
    1284:	86 95       	lsr	r24
    1286:	86 95       	lsr	r24
    1288:	20 e2       	ldi	r18, 0x20	; 32
    128a:	92 9f       	mul	r25, r18
    128c:	80 0d       	add	r24, r0
    128e:	11 24       	eor	r1, r1
    1290:	8c 83       	std	Y+4, r24	; 0x04
    1292:	e1 ef       	ldi	r30, 0xF1	; 241
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	9c 91       	ld	r25, X
    129a:	86 95       	lsr	r24
    129c:	86 95       	lsr	r24
    129e:	86 95       	lsr	r24
    12a0:	20 e2       	ldi	r18, 0x20	; 32
    12a2:	92 9f       	mul	r25, r18
    12a4:	80 0d       	add	r24, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	80 91 f0 00 	lds	r24, 0x00F0
    12ae:	90 81       	ld	r25, Z
    12b0:	86 95       	lsr	r24
    12b2:	86 95       	lsr	r24
    12b4:	86 95       	lsr	r24
    12b6:	20 e2       	ldi	r18, 0x20	; 32
    12b8:	92 9f       	mul	r25, r18
    12ba:	80 0d       	add	r24, r0
    12bc:	11 24       	eor	r1, r1
    12be:	8a 83       	std	Y+2, r24	; 0x02
    12c0:	13 c0       	rjmp	.+38     	; 0x12e8 <can_get_status+0x188>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    12c2:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    12c4:	e3 ef       	ldi	r30, 0xF3	; 243
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	82 95       	swap	r24
    12cc:	86 95       	lsr	r24
    12ce:	87 70       	andi	r24, 0x07	; 7
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	80 91 f2 00 	lds	r24, 0x00F2
    12d6:	90 81       	ld	r25, Z
    12d8:	99 0f       	add	r25, r25
    12da:	99 0f       	add	r25, r25
    12dc:	99 0f       	add	r25, r25
    12de:	82 95       	swap	r24
    12e0:	86 95       	lsr	r24
    12e2:	87 70       	andi	r24, 0x07	; 7
    12e4:	89 0f       	add	r24, r25
    12e6:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    12e8:	80 ea       	ldi	r24, 0xA0	; 160
    12ea:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    12ec:	8f 81       	ldd	r24, Y+7	; 0x07
    12ee:	98 85       	ldd	r25, Y+8	; 0x08
    12f0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    12f4:	ef ee       	ldi	r30, 0xEF	; 239
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 73       	andi	r24, 0x3F	; 63
    12fc:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    12fe:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    1302:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1304:	1c c0       	rjmp	.+56     	; 0x133e <can_get_status+0x1de>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1306:	80 e4       	ldi	r24, 0x40	; 64
    1308:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    130a:	ef ee       	ldi	r30, 0xEF	; 239
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8f 73       	andi	r24, 0x3F	; 63
    1312:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1314:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1318:	80 e4       	ldi	r24, 0x40	; 64
            break;
    131a:	11 c0       	rjmp	.+34     	; 0x133e <can_get_status+0x1de>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    131c:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    131e:	ef ee       	ldi	r30, 0xEF	; 239
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8f 73       	andi	r24, 0x3F	; 63
    1326:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1328:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    132c:	82 e0       	ldi	r24, 0x02	; 2
            break;
    132e:	07 c0       	rjmp	.+14     	; 0x133e <can_get_status+0x1de>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	05 c0       	rjmp	.+10     	; 0x133e <can_get_status+0x1de>
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	03 c0       	rjmp	.+6      	; 0x133e <can_get_status+0x1de>
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	01 c0       	rjmp	.+2      	; 0x133e <can_get_status+0x1de>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    133c:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <LED_Reg_Write>:
*/
#include <avr/io.h>
#include "LED.h"

void LED_Reg_Write(uint8_t val) {
	LEDPORT = ~val;
    1344:	80 95       	com	r24
    1346:	85 b9       	out	0x05, r24	; 5
    1348:	08 95       	ret

0000134a <main>:
	}
}

void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    134a:	e1 e6       	ldi	r30, 0x61	; 97
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1352:	10 82       	st	Z, r1
}

void io_init(void) {
	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFF;
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	84 b9       	out	0x04, r24	; 4
	LED_Reg_Write(0x00); // clear all LEDs
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x00;
    135e:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
    1360:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x00;
    1362:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
    1364:	1b b8       	out	0x0b, r1	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    1366:	1d b8       	out	0x0d, r1	; 13
	PORTD = 0x00;
    1368:	1b b8       	out	0x0b, r1	; 11
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    136a:	0e 94 43 0a 	call	0x1486	; 0x1486 <timer_init>
	can_init(0);
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	0e 94 75 02 	call	0x4ea	; 0x4ea <can_init>
	adc_initialize();
    1374:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	uint8_t	i = 0;
	uint8_t check = 0;
	uint8_t* receive_char;
	
	receive_char = SPDR_BASE;
	*receive_char = 0x41;
    1378:	81 e4       	ldi	r24, 0x41	; 65
    137a:	8e b9       	out	0x0e, r24	; 14
	
	// Enable global interrupts for Timer execution
	sei();
    137c:	78 94       	sei
	
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
	delay_ms(250);
    1384:	8a ef       	ldi	r24, 0xFA	; 250
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <delay_ms>
	LED_Reg_Write(0x00);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	0e 94 a2 09 	call	0x1344	; 0x1344 <LED_Reg_Write>
    1392:	e6 e3       	ldi	r30, 0x36	; 54
    1394:	f1 e0       	ldi	r31, 0x01	; 1
    1396:	8e e3       	ldi	r24, 0x3E	; 62
    1398:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
    139a:	11 92       	st	Z+, r1
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
	delay_ms(250);
	LED_Reg_Write(0x00);
	
	for (i = 0; i < 8; i ++)
    139c:	e8 17       	cp	r30, r24
    139e:	f9 07       	cpc	r31, r25
    13a0:	e1 f7       	brne	.-8      	; 0x139a <main+0x50>
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
	}
			
	send_now = 0;
    13a2:	10 92 2c 01 	sts	0x012C, r1
	send_hk = 0;
    13a6:	10 92 35 01 	sts	0x0135, r1
	send_data = 0;	
    13aa:	10 92 46 01 	sts	0x0146, r1
	
	/*		Initialize CAN Message Objects			*/
	can_init_mobs();
    13ae:	0e 94 f7 01 	call	0x3ee	; 0x3ee <can_init_mobs>
	
	/*		Initialize SPI communications			*/
	spi_initialize();
    13b2:	0e 94 2e 0a 	call	0x145c	; 0x145c <spi_initialize>
    13b6:	00 e1       	ldi	r16, 0x10	; 16
    13b8:	11 e0       	ldi	r17, 0x01	; 1
    13ba:	c8 e1       	ldi	r28, 0x18	; 24
    13bc:	d1 e0       	ldi	r29, 0x01	; 1
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    13be:	0f 2e       	mov	r0, r31
    13c0:	fb ea       	ldi	r31, 0xAB	; 171
    13c2:	cf 2e       	mov	r12, r31
    13c4:	f0 2d       	mov	r31, r0
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    13c6:	0f 2e       	mov	r0, r31
    13c8:	f0 ef       	ldi	r31, 0xF0	; 240
    13ca:	df 2e       	mov	r13, r31
    13cc:	f0 2d       	mov	r31, r0
    13ce:	a0 2e       	mov	r10, r16
    13d0:	b1 2e       	mov	r11, r17
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
			send_arr[3] = 0x55;
    13d2:	0f 2e       	mov	r0, r31
    13d4:	f3 e1       	ldi	r31, 0x13	; 19
    13d6:	ef 2e       	mov	r14, r31
    13d8:	f1 e0       	ldi	r31, 0x01	; 1
    13da:	ff 2e       	mov	r15, r31
    13dc:	f0 2d       	mov	r31, r0
    13de:	0f 2e       	mov	r0, r31
    13e0:	f5 e5       	ldi	r31, 0x55	; 85
    13e2:	9f 2e       	mov	r9, r31
    13e4:	f0 2d       	mov	r31, r0
	/*		Begin Main Program Loop					*/	
    while(1)
    {
		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 */
		can_check_general();
    13e6:	0e 94 70 00 	call	0xe0	; 0xe0 <can_check_general>
		
		/* CHECK FOR HOUSEKEEPING REQUEST */
		can_check_housekeep();
    13ea:	0e 94 36 01 	call	0x26c	; 0x26c <can_check_housekeep>
			//LED_Reg_Write(0x00);
		//}
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    13ee:	80 91 2c 01 	lds	r24, 0x012C
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	69 f4       	brne	.+26     	; 0x1410 <main+0xc6>
    13f6:	ea 2d       	mov	r30, r10
    13f8:	fb 2d       	mov	r31, r11
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    13fa:	c1 92       	st	Z+, r12
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
    13fc:	ec 17       	cp	r30, r28
    13fe:	fd 07       	cpc	r31, r29
    1400:	e1 f7       	brne	.-8      	; 0x13fa <main+0xb0>
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1402:	61 e1       	ldi	r22, 0x11	; 17
    1404:	8a 2d       	mov	r24, r10
    1406:	9b 2d       	mov	r25, r11
    1408:	0e 94 c6 01 	call	0x38c	; 0x38c <can_send_message>
			send_now = 0;
    140c:	10 92 2c 01 	sts	0x012C, r1
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
    1410:	80 91 35 01 	lds	r24, 0x0135
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	69 f4       	brne	.+26     	; 0x1432 <main+0xe8>
    1418:	ea 2d       	mov	r30, r10
    141a:	fb 2d       	mov	r31, r11
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    141c:	d1 92       	st	Z+, r13
			send_now = 0;
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    141e:	ec 17       	cp	r30, r28
    1420:	fd 07       	cpc	r31, r29
    1422:	e1 f7       	brne	.-8      	; 0x141c <main+0xd2>
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1424:	60 e1       	ldi	r22, 0x10	; 16
    1426:	8a 2d       	mov	r24, r10
    1428:	9b 2d       	mov	r25, r11
    142a:	0e 94 c6 01 	call	0x38c	; 0x38c <can_send_message>
			send_hk = 0;
    142e:	10 92 35 01 	sts	0x0135, r1
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
    1432:	20 91 46 01 	lds	r18, 0x0146
    1436:	21 30       	cpi	r18, 0x01	; 1
    1438:	b1 f6       	brne	.-84     	; 0x13e6 <main+0x9c>
    143a:	f8 01       	movw	r30, r16
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    143c:	11 92       	st	Z+, r1
			send_hk = 0;
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    143e:	ec 17       	cp	r30, r28
    1440:	fd 07       	cpc	r31, r29
    1442:	e1 f7       	brne	.-8      	; 0x143c <main+0xf2>
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
    1444:	c8 01       	movw	r24, r16
    1446:	0e 94 67 00 	call	0xce	; 0xce <adc_read>
			send_arr[3] = 0x55;
    144a:	f7 01       	movw	r30, r14
    144c:	90 82       	st	Z, r9
			
			can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    144e:	6a e0       	ldi	r22, 0x0A	; 10
    1450:	c8 01       	movw	r24, r16
    1452:	0e 94 c6 01 	call	0x38c	; 0x38c <can_send_message>
			send_data = 0;
    1456:	10 92 46 01 	sts	0x0146, r1
    145a:	c5 cf       	rjmp	.-118    	; 0x13e6 <main+0x9c>

0000145c <spi_initialize>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b10000000;
	*reg_ptr = *reg_ptr | (temp);	// We set SPIPS to 1 (select MISO_A, MOSI_A...)
    145c:	af 9a       	sbi	0x15, 7	; 21
	
	reg_ptr = SPCR_BASE;
	temp = 0b01110000;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first.
	temp = 0b01111100;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, set as slave, spiclk = fioclk/4
    145e:	8c b1       	in	r24, 0x0c	; 12
    1460:	8c 77       	andi	r24, 0x7C	; 124
    1462:	80 67       	ori	r24, 0x70	; 112
    1464:	8c b9       	out	0x0c, r24	; 12
    1466:	08 95       	ret

00001468 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    1468:	1f 92       	push	r1
    146a:	0f 92       	push	r0
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	0f 92       	push	r0
    1470:	11 24       	eor	r1, r1
    1472:	8f 93       	push	r24
	CTC_flag = 1;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	80 93 51 01 	sts	0x0151, r24
}
    147a:	8f 91       	pop	r24
    147c:	0f 90       	pop	r0
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	0f 90       	pop	r0
    1482:	1f 90       	pop	r1
    1484:	18 95       	reti

00001486 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    1486:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    148a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    148e:	8a e0       	ldi	r24, 0x0A	; 10
    1490:	80 93 81 00 	sts	0x0081, r24
    1494:	08 95       	ret

00001496 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    1496:	10 92 51 01 	sts	0x0151, r1
	TCNT1 = 0x0000; //Clear timer
    149a:	10 92 85 00 	sts	0x0085, r1
    149e:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    14a2:	90 93 89 00 	sts	0x0089, r25
    14a6:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    14b0:	80 91 51 01 	lds	r24, 0x0151
    14b4:	88 23       	and	r24, r24
    14b6:	e1 f3       	breq	.-8      	; 0x14b0 <delay_us+0x1a>
}
    14b8:	08 95       	ret

000014ba <delay_ms>:

void delay_ms(uint16_t ms) {
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	51 f0       	breq	.+20     	; 0x14dc <delay_ms+0x22>
    14c8:	c0 e0       	ldi	r28, 0x00	; 0
    14ca:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    14cc:	88 ee       	ldi	r24, 0xE8	; 232
    14ce:	93 e0       	ldi	r25, 0x03	; 3
    14d0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    14d4:	21 96       	adiw	r28, 0x01	; 1
    14d6:	c0 17       	cp	r28, r16
    14d8:	d1 07       	cpc	r29, r17
    14da:	c1 f7       	brne	.-16     	; 0x14cc <delay_ms+0x12>
		delay_us(1000);
	}
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	08 95       	ret

000014e6 <__tablejump2__>:
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31

000014ea <__tablejump__>:
    14ea:	05 90       	lpm	r0, Z+
    14ec:	f4 91       	lpm	r31, Z
    14ee:	e0 2d       	mov	r30, r0
    14f0:	09 94       	ijmp

000014f2 <_exit>:
    14f2:	f8 94       	cli

000014f4 <__stop_program>:
    14f4:	ff cf       	rjmp	.-2      	; 0x14f4 <__stop_program>
