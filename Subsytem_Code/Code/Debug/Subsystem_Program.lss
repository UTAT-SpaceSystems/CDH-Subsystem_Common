
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002f6  00800100  00800100  0000276a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000328  00000000  00000000  0000279a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00005eb6  00000000  00000000  00002ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000010de  00000000  00000000  00008978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001397  00000000  00000000  00009a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000798  00000000  00000000  0000adf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000d58  00000000  00000000  0000b588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000023b8  00000000  00000000  0000c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002c0  00000000  00000000  0000e698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__ctors_end>
       4:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       8:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
       c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      30:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__vector_12>
      34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      3c:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__vector_15>
      40:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__vector_16>
      44:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__vector_17>
      48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      54:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      58:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      5c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      60:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      64:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      68:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      6c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      70:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      74:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      78:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
      7c:	08 01       	movw	r0, r16
      7e:	0b 01       	movw	r0, r22
      80:	18 01       	movw	r2, r16
      82:	c9 01       	movw	r24, r18
      84:	1b 01       	movw	r2, r22
      86:	c9 01       	movw	r24, r18
      88:	28 01       	movw	r4, r16
      8a:	c9 01       	movw	r24, r18
      8c:	35 01       	movw	r6, r10
      8e:	42 01       	movw	r8, r4
      90:	4f 01       	movw	r8, r30
      92:	5c 01       	movw	r10, r24
      94:	60 01       	movw	r12, r0
      96:	c9 01       	movw	r24, r18
      98:	6d 01       	movw	r12, r26
      9a:	c9 01       	movw	r24, r18
      9c:	c9 01       	movw	r24, r18
      9e:	8e 01       	movw	r16, r28
      a0:	c9 01       	movw	r24, r18
      a2:	8a 01       	movw	r16, r20
      a4:	c9 01       	movw	r24, r18
      a6:	c9 01       	movw	r24, r18
      a8:	c9 01       	movw	r24, r18
      aa:	91 01       	movw	r18, r2
      ac:	c9 01       	movw	r24, r18
      ae:	c9 01       	movw	r24, r18
      b0:	a1 01       	movw	r20, r2
      b2:	a8 01       	movw	r20, r16
      b4:	af 01       	movw	r20, r30
      b6:	af 01       	movw	r20, r30
      b8:	af 01       	movw	r20, r30
      ba:	bc 01       	movw	r22, r24
      bc:	99 04       	cpc	r9, r9
      be:	2b 05       	cpc	r18, r11
      c0:	b5 05       	cpc	r27, r5
      c2:	29 06       	cpc	r2, r25
      c4:	69 06       	cpc	r6, r25
      c6:	e5 06       	cpc	r14, r21
      c8:	62 07       	cpc	r22, r18
      ca:	ff 07       	cpc	r31, r31
      cc:	a5 08       	sbc	r10, r5
      ce:	93 04       	cpc	r9, r3
      d0:	ae 09       	sbc	r26, r14
      d2:	3e 0e       	add	r3, r30
      d4:	3e 0e       	add	r3, r30
      d6:	40 0e       	add	r4, r16
      d8:	40 0e       	add	r4, r16
      da:	3c 0e       	add	r3, r28
      dc:	3a 0e       	add	r3, r26
      de:	36 0e       	add	r3, r22
      e0:	38 0e       	add	r3, r24
      e2:	40 0e       	add	r4, r16
      e4:	40 0e       	add	r4, r16
      e6:	40 0e       	add	r4, r16
      e8:	40 0e       	add	r4, r16
      ea:	40 0e       	add	r4, r16
      ec:	40 0e       	add	r4, r16
      ee:	40 0e       	add	r4, r16
      f0:	40 0e       	add	r4, r16
      f2:	40 0e       	add	r4, r16
      f4:	40 0e       	add	r4, r16
      f6:	40 0e       	add	r4, r16
      f8:	40 0e       	add	r4, r16
      fa:	34 0e       	add	r3, r20
      fc:	32 0e       	add	r3, r18

000000fe <__ctors_end>:
      fe:	11 24       	eor	r1, r1
     100:	1f be       	out	0x3f, r1	; 63
     102:	cf ef       	ldi	r28, 0xFF	; 255
     104:	d8 e0       	ldi	r29, 0x08	; 8
     106:	de bf       	out	0x3e, r29	; 62
     108:	cd bf       	out	0x3d, r28	; 61

0000010a <__do_copy_data>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a0 e0       	ldi	r26, 0x00	; 0
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	e6 ef       	ldi	r30, 0xF6	; 246
     112:	f6 e2       	ldi	r31, 0x26	; 38
     114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x10>
     116:	05 90       	lpm	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	a0 30       	cpi	r26, 0x00	; 0
     11c:	b1 07       	cpc	r27, r17
     11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0xc>

00000120 <__do_clear_bss>:
     120:	23 e0       	ldi	r18, 0x03	; 3
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
     128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
     12a:	a6 3f       	cpi	r26, 0xF6	; 246
     12c:	b2 07       	cpc	r27, r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
     130:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <main>
     134:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <_exit>

00000138 <__bad_interrupt>:
     138:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000013c <adc_initialize>:
/************************************************************************/
void adc_initialize(void)
{
	uint8_t* ptr;
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	*ptr = 0b00000010;			// Choose ADC2
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	80 93 7c 00 	sts	0x007C, r24
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	*ptr = 0b11100010;	
     142:	82 ee       	ldi	r24, 0xE2	; 226
     144:	80 93 7a 00 	sts	0x007A, r24
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	*ptr = 0b10100000;
     148:	80 ea       	ldi	r24, 0xA0	; 160
     14a:	80 93 7b 00 	sts	0x007B, r24
     14e:	08 95       	ret

00000150 <run_battBalance>:
//if the flag is set from commands, then flip the pin that controls the battBalance on.
//batt balance pins are 23 and 24 

void run_battBalance()
{
	if (balance_l == 1)
     150:	80 91 03 02 	lds	r24, 0x0203
     154:	81 30       	cpi	r24, 0x01	; 1
     156:	19 f4       	brne	.+6      	; 0x15e <run_battBalance+0xe>
	{
		PIN_set(BALANCE_L_P);
     158:	87 e1       	ldi	r24, 0x17	; 23
     15a:	0e 94 8d 12 	call	0x251a	; 0x251a <PIN_set>
	}
	if (balance_l == 0)
     15e:	80 91 03 02 	lds	r24, 0x0203
     162:	81 11       	cpse	r24, r1
     164:	03 c0       	rjmp	.+6      	; 0x16c <run_battBalance+0x1c>
	{
		PIN_clr(BALANCE_L_P);
     166:	87 e1       	ldi	r24, 0x17	; 23
     168:	0e 94 cd 12 	call	0x259a	; 0x259a <PIN_clr>
	}
	if (balance_h == 1)
     16c:	80 91 ec 01 	lds	r24, 0x01EC
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	19 f4       	brne	.+6      	; 0x17a <run_battBalance+0x2a>
	{
		PIN_set(BALANCE_H_P);
     174:	88 e1       	ldi	r24, 0x18	; 24
     176:	0e 94 8d 12 	call	0x251a	; 0x251a <PIN_set>
	}
	if (balance_h == 0)
     17a:	80 91 ec 01 	lds	r24, 0x01EC
     17e:	81 11       	cpse	r24, r1
     180:	03 c0       	rjmp	.+6      	; 0x188 <run_battBalance+0x38>
	{
		PIN_clr(BALANCE_H_P);
     182:	88 e1       	ldi	r24, 0x18	; 24
     184:	0e 94 cd 12 	call	0x259a	; 0x259a <PIN_clr>
     188:	08 95       	ret

0000018a <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     18a:	21 ee       	ldi	r18, 0xE1	; 225
     18c:	31 e0       	ldi	r19, 0x01	; 1
     18e:	30 93 eb 03 	sts	0x03EB, r19
     192:	20 93 ea 03 	sts	0x03EA, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     196:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id;  // populate ID field with ID Tag
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	70 93 e6 03 	sts	0x03E6, r23
     1a0:	60 93 e5 03 	sts	0x03E5, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     1a4:	22 e0       	ldi	r18, 0x02	; 2
     1a6:	20 93 e4 03 	sts	0x03E4, r18
	message.dlc = 8;			 // Max length of a CAN message.
     1aa:	28 e0       	ldi	r18, 0x08	; 8
     1ac:	20 93 e9 03 	sts	0x03E9, r18
	mob_number = 4;
     1b0:	24 e0       	ldi	r18, 0x04	; 4
     1b2:	20 93 23 03 	sts	0x0323, r18
     1b6:	dc 01       	movw	r26, r24
     1b8:	e1 ee       	ldi	r30, 0xE1	; 225
     1ba:	f1 e0       	ldi	r31, 0x01	; 1
     1bc:	89 ee       	ldi	r24, 0xE9	; 233
     1be:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     1c0:	2d 91       	ld	r18, X+
     1c2:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     1c4:	e8 17       	cp	r30, r24
     1c6:	f9 07       	cpc	r31, r25
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     1ca:	60 91 23 03 	lds	r22, 0x0323
     1ce:	83 ee       	ldi	r24, 0xE3	; 227
     1d0:	93 e0       	ldi	r25, 0x03	; 3
     1d2:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     1d6:	81 11       	cpse	r24, r1
     1d8:	f8 cf       	rjmp	.-16     	; 0x1ca <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     1da:	60 91 23 03 	lds	r22, 0x0323
     1de:	83 ee       	ldi	r24, 0xE3	; 227
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <can_get_status>
     1e6:	81 30       	cpi	r24, 0x01	; 1
     1e8:	c1 f3       	breq	.-16     	; 0x1da <can_send_message+0x50>

	return;
}
     1ea:	08 95       	ret

000001ec <decode_command>:

void decode_command(uint8_t* command_array)
{		
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	8c 01       	movw	r16, r24
	uint8_t i, command  = *(command_array + 5);
	uint8_t req_by = (*(command_array + 7)) >> 4;

	switch(command)
     1f6:	fc 01       	movw	r30, r24
     1f8:	45 81       	ldd	r20, Z+5	; 0x05
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	fa 01       	movw	r30, r20
     1fe:	31 97       	sbiw	r30, 0x01	; 1
     200:	e0 32       	cpi	r30, 0x20	; 32
     202:	f1 05       	cpc	r31, r1
     204:	08 f0       	brcs	.+2      	; 0x208 <decode_command+0x1c>
     206:	c5 c0       	rjmp	.+394    	; 0x392 <decode_command+0x1a6>
     208:	e2 5c       	subi	r30, 0xC2	; 194
     20a:	ff 4f       	sbci	r31, 0xFF	; 255
     20c:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__tablejump2__>
		case REQ_RESPONSE :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED3);
			}
			send_now = 1;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 33 02 	sts	0x0233, r24
		case REQ_DATA :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
			send_data = 1;
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 93 05 03 	sts	0x0305, r24
     21c:	d8 01       	movw	r26, r16
     21e:	e5 e1       	ldi	r30, 0x15	; 21
     220:	f2 e0       	ldi	r31, 0x02	; 2
     222:	8d e1       	ldi	r24, 0x1D	; 29
     224:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     226:	2d 91       	ld	r18, X+
     228:	21 93       	st	Z+, r18
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
			send_data = 1;
			for (i = 0; i < 8; i ++)
     22a:	e8 17       	cp	r30, r24
     22c:	f9 07       	cpc	r31, r25
     22e:	d9 f7       	brne	.-10     	; 0x226 <decode_command+0x3a>
		case REQ_HK :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED2);
			}
			send_hk = 1;
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	80 93 e0 02 	sts	0x02E0, r24
		case REQ_READ:
			read_response = 1;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 3b 02 	sts	0x023B, r24
     23c:	d8 01       	movw	r26, r16
     23e:	e9 ed       	ldi	r30, 0xD9	; 217
     240:	f3 e0       	ldi	r31, 0x03	; 3
     242:	81 ee       	ldi	r24, 0xE1	; 225
     244:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     246:	2d 91       	ld	r18, X+
     248:	21 93       	st	Z+, r18
				PIN_toggle(LED2);
			}
			send_hk = 1;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     24a:	e8 17       	cp	r30, r24
     24c:	f9 07       	cpc	r31, r25
     24e:	d9 f7       	brne	.-10     	; 0x246 <decode_command+0x5a>
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 fa 01 	sts	0x01FA, r24
     256:	d8 01       	movw	r26, r16
     258:	e8 e0       	ldi	r30, 0x08	; 8
     25a:	f1 e0       	ldi	r31, 0x01	; 1
     25c:	80 e1       	ldi	r24, 0x10	; 16
     25e:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     260:	2d 91       	ld	r18, X+
     262:	21 93       	st	Z+, r18
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     264:	e8 17       	cp	r30, r24
     266:	f9 07       	cpc	r31, r25
     268:	d9 f7       	brne	.-10     	; 0x260 <decode_command+0x74>
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	80 93 02 03 	sts	0x0302, r24
     270:	d8 01       	movw	r26, r16
     272:	eb ef       	ldi	r30, 0xFB	; 251
     274:	f1 e0       	ldi	r31, 0x01	; 1
     276:	83 e0       	ldi	r24, 0x03	; 3
     278:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				sensh_arr[i] = *(command_array + i);
     27a:	2d 91       	ld	r18, X+
     27c:	21 93       	st	Z+, r18
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
			for (i = 0; i < 8; i ++)
     27e:	e8 17       	cp	r30, r24
     280:	f9 07       	cpc	r31, r25
     282:	d9 f7       	brne	.-10     	; 0x27a <decode_command+0x8e>
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 07 03 	sts	0x0307, r24
     28a:	d8 01       	movw	r26, r16
     28c:	e4 e3       	ldi	r30, 0x34	; 52
     28e:	f3 e0       	ldi	r31, 0x03	; 3
     290:	8c e3       	ldi	r24, 0x3C	; 60
     292:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				sensl_arr[i] = *(command_array + i);
     294:	2d 91       	ld	r18, X+
     296:	21 93       	st	Z+, r18
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
			for (i = 0; i < 8; i ++)
     298:	e8 17       	cp	r30, r24
     29a:	f9 07       	cpc	r31, r25
     29c:	d9 f7       	brne	.-10     	; 0x294 <decode_command+0xa8>
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	80 93 06 03 	sts	0x0306, r24
     2a4:	d8 01       	movw	r26, r16
     2a6:	ee ee       	ldi	r30, 0xEE	; 238
     2a8:	f1 e0       	ldi	r31, 0x01	; 1
     2aa:	86 ef       	ldi	r24, 0xF6	; 246
     2ac:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				setv_arr[i] = *(command_array + i);
     2ae:	2d 91       	ld	r18, X+
     2b0:	21 93       	st	Z+, r18
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
			for (i = 0; i < 8; i ++)
     2b2:	e8 17       	cp	r30, r24
     2b4:	f9 07       	cpc	r31, r25
     2b6:	d9 f7       	brne	.-10     	; 0x2ae <decode_command+0xc2>
			{
				setv_arr[i] = *(command_array + i);
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
     2b8:	f8 01       	movw	r30, r16
     2ba:	80 81       	ld	r24, Z
     2bc:	80 93 26 02 	sts	0x0226, r24
		case SEND_TM:
			new_tm_msgf = 1;
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	80 93 36 02 	sts	0x0236, r24
     2c6:	d8 01       	movw	r26, r16
     2c8:	ea e0       	ldi	r30, 0x0A	; 10
     2ca:	f3 e0       	ldi	r31, 0x03	; 3
     2cc:	82 e1       	ldi	r24, 0x12	; 18
     2ce:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				new_tm_msg[i] = *(command_array + i);
     2d0:	2d 91       	ld	r18, X+
     2d2:	21 93       	st	Z+, r18
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
		case SEND_TM:
			new_tm_msgf = 1;
			for (i = 0; i < 8; i ++)
     2d4:	e8 17       	cp	r30, r24
     2d6:	f9 07       	cpc	r31, r25
     2d8:	d9 f7       	brne	.-10     	; 0x2d0 <decode_command+0xe4>
			{
				new_tm_msg[i] = *(command_array + i);
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
     2da:	80 91 04 03 	lds	r24, 0x0304
     2de:	81 11       	cpse	r24, r1
     2e0:	19 c0       	rjmp	.+50     	; 0x314 <decode_command+0x128>
     2e2:	80 91 29 03 	lds	r24, 0x0329
     2e6:	81 11       	cpse	r24, r1
     2e8:	15 c0       	rjmp	.+42     	; 0x314 <decode_command+0x128>
}

// Let the OBC know that you are ready to receive TM packet.
static void start_tm_packet(void)
{
	send_arr[7] = (SELF_ID << 4)|COMS_TASK_ID;
     2ea:	87 e1       	ldi	r24, 0x17	; 23
     2ec:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = OK_START_TM_PACKET;
     2f6:	80 e1       	ldi	r24, 0x10	; 16
     2f8:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
     2fc:	80 91 26 02 	lds	r24, 0x0226
     300:	80 93 d9 01 	sts	0x01D9, r24
	receiving_tmf = 1;
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	80 93 29 03 	sts	0x0329, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
     30a:	61 e1       	ldi	r22, 0x11	; 17
     30c:	85 ed       	ldi	r24, 0xD5	; 213
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
				start_tm_packet();
		case TC_TRANSACTION_RESP:
			tc_transfer_completef = *command_array;
     314:	f8 01       	movw	r30, r16
     316:	80 81       	ld	r24, Z
     318:	80 93 09 02 	sts	0x0209, r24
		case OK_START_TC_PACKET:
			start_tc_transferf = 1;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 05 02 	sts	0x0205, r24
		case OBC_IS_ALIVE:
			TAKEOVER = 0;
     322:	10 92 26 03 	sts	0x0326, r1
			REQUEST_ALIVE_IN_PROG = 0;
     326:	10 92 d4 01 	sts	0x01D4, r1
			REQUEST_TAKEOVER = 0;
     32a:	10 92 e7 02 	sts	0x02E7, r1
			ISALIVE_COUNTER = 0;
     32e:	10 92 be 01 	sts	0x01BE, r1
     332:	10 92 bf 01 	sts	0x01BF, r1
     336:	10 92 c0 01 	sts	0x01C0, r1
     33a:	10 92 c1 01 	sts	0x01C1, r1
			FAILED_COUNT = 0;
     33e:	10 92 13 01 	sts	0x0113, r1
		case ENTER_LOW_POWER_COM:
			if((SELF_ID == 1) && !LOW_POWER_MODE)
     342:	80 91 01 01 	lds	r24, 0x0101
     346:	81 11       	cpse	r24, r1
     348:	07 c0       	rjmp	.+14     	; 0x358 <decode_command+0x16c>
				enter_low_powerf = 1;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 06 02 	sts	0x0206, r24
		case EXIT_LOW_POWER_COM:
			if((SELF_ID == 1) && LOW_POWER_MODE)
     350:	80 91 01 01 	lds	r24, 0x0101
     354:	88 23       	and	r24, r24
     356:	19 f0       	breq	.+6      	; 0x35e <decode_command+0x172>
				exit_low_powerf = 1;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 27 02 	sts	0x0227, r24
				enter_take_overf = 1;
		case EXIT_COMS_TAKEOVER_COM:
			if(!SELF_ID && TAKEOVER)
				exit_take_overf = 1;
		case PAUSE_OPERATIONS:
			pause_operationsf = 1;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	80 93 eb 01 	sts	0x01EB, r24
     364:	e8 01       	movw	r28, r16
     366:	ea e2       	ldi	r30, 0x2A	; 42
     368:	f2 e0       	ldi	r31, 0x02	; 2
     36a:	82 e3       	ldi	r24, 0x32	; 50
     36c:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				pause_msg[i] = *(command_array + i);
     36e:	29 91       	ld	r18, Y+
     370:	21 93       	st	Z+, r18
		case EXIT_COMS_TAKEOVER_COM:
			if(!SELF_ID && TAKEOVER)
				exit_take_overf = 1;
		case PAUSE_OPERATIONS:
			pause_operationsf = 1;
			for (i = 0; i < 8; i ++)
     372:	e8 17       	cp	r30, r24
     374:	f9 07       	cpc	r31, r25
     376:	d9 f7       	brne	.-10     	; 0x36e <decode_command+0x182>
			{
				pause_msg[i] = *(command_array + i);
			}
		case RESUME_OPERATIONS:
			resume_operationsf = 1;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 ed 01 	sts	0x01ED, r24
     37e:	d8 01       	movw	r26, r16
     380:	ea e0       	ldi	r30, 0x0A	; 10
     382:	f2 e0       	ldi	r31, 0x02	; 2
     384:	82 e1       	ldi	r24, 0x12	; 18
     386:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				resume_msg[i] = *(command_array + i);
     388:	2d 91       	ld	r18, X+
     38a:	21 93       	st	Z+, r18
			{
				pause_msg[i] = *(command_array + i);
			}
		case RESUME_OPERATIONS:
			resume_operationsf = 1;
			for (i = 0; i < 8; i ++)
     38c:	e8 17       	cp	r30, r24
     38e:	f9 07       	cpc	r31, r25
     390:	d9 f7       	brne	.-10     	; 0x388 <decode_command+0x19c>
			}				
		default:
			return;
	}
	return;
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	08 95       	ret

0000039c <set_up_msg>:

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     39c:	10 92 ee 03 	sts	0x03EE, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3a0:	95 e0       	ldi	r25, 0x05	; 5
     3a2:	90 93 e4 03 	sts	0x03E4, r25
	message.dlc = 8;			 // Max length of a CAN message.
     3a6:	98 e0       	ldi	r25, 0x08	; 8
     3a8:	90 93 e9 03 	sts	0x03E9, r25
	mob_number = mailbox;
     3ac:	80 93 23 03 	sts	0x0323, r24
	
	if(mailbox == 0)
     3b0:	81 11       	cpse	r24, r1
     3b2:	0e c0       	rjmp	.+28     	; 0x3d0 <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     3b4:	85 ed       	ldi	r24, 0xD5	; 213
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	90 93 eb 03 	sts	0x03EB, r25
     3bc:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     3c0:	80 91 f1 02 	lds	r24, 0x02F1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	90 93 e6 03 	sts	0x03E6, r25
     3ca:	80 93 e5 03 	sts	0x03E5, r24
		return;
     3ce:	08 95       	ret
	}
	if(mailbox == 1)
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	71 f4       	brne	.+28     	; 0x3f0 <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     3d4:	82 ec       	ldi	r24, 0xC2	; 194
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	90 93 eb 03 	sts	0x03EB, r25
     3dc:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[1];
     3e0:	80 91 f2 02 	lds	r24, 0x02F2
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 e6 03 	sts	0x03E6, r25
     3ea:	80 93 e5 03 	sts	0x03E5, r24
		return;
     3ee:	08 95       	ret
	}
	if(mailbox == 2)
     3f0:	82 30       	cpi	r24, 0x02	; 2
     3f2:	71 f4       	brne	.+28     	; 0x410 <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     3f4:	8b ec       	ldi	r24, 0xCB	; 203
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	90 93 eb 03 	sts	0x03EB, r25
     3fc:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[2];
     400:	80 91 f3 02 	lds	r24, 0x02F3
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 e6 03 	sts	0x03E6, r25
     40a:	80 93 e5 03 	sts	0x03E5, r24
		return;
     40e:	08 95       	ret
	}
	if(mailbox == 3)
     410:	83 30       	cpi	r24, 0x03	; 3
     412:	71 f4       	brne	.+28     	; 0x430 <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     414:	8a ef       	ldi	r24, 0xFA	; 250
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	90 93 eb 03 	sts	0x03EB, r25
     41c:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[3];
     420:	80 91 f4 02 	lds	r24, 0x02F4
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 e6 03 	sts	0x03E6, r25
     42a:	80 93 e5 03 	sts	0x03E5, r24
		return;
     42e:	08 95       	ret
	}
	if(mailbox == 5)
     430:	85 30       	cpi	r24, 0x05	; 5
     432:	69 f4       	brne	.+26     	; 0x44e <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     434:	89 e1       	ldi	r24, 0x19	; 25
     436:	93 e0       	ldi	r25, 0x03	; 3
     438:	90 93 eb 03 	sts	0x03EB, r25
     43c:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[5];
     440:	80 91 f6 02 	lds	r24, 0x02F6
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	90 93 e6 03 	sts	0x03E6, r25
     44a:	80 93 e5 03 	sts	0x03E5, r24
     44e:	08 95       	ret

00000450 <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     450:	81 11       	cpse	r24, r1
     452:	20 c0       	rjmp	.+64     	; 0x494 <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     454:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     458:	85 e0       	ldi	r24, 0x05	; 5
     45a:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     45e:	88 e0       	ldi	r24, 0x08	; 8
     460:	80 93 e9 03 	sts	0x03E9, r24
		mob_number = mailbox;
     464:	10 92 23 03 	sts	0x0323, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     468:	85 ed       	ldi	r24, 0xD5	; 213
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	90 93 eb 03 	sts	0x03EB, r25
     470:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     474:	80 91 f1 02 	lds	r24, 0x02F1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 e6 03 	sts	0x03E6, r25
     47e:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     482:	60 91 23 03 	lds	r22, 0x0323
     486:	83 ee       	ldi	r24, 0xE3	; 227
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     48e:	81 11       	cpse	r24, r1
     490:	f8 cf       	rjmp	.-16     	; 0x482 <clean_up_msg+0x32>
     492:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	01 f5       	brne	.+64     	; 0x4d8 <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     498:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     49c:	85 e0       	ldi	r24, 0x05	; 5
     49e:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     4a2:	88 e0       	ldi	r24, 0x08	; 8
     4a4:	80 93 e9 03 	sts	0x03E9, r24
		mob_number = mailbox;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 23 03 	sts	0x0323, r24
		message.pt_data = &data1[0];
     4ae:	82 ec       	ldi	r24, 0xC2	; 194
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	90 93 eb 03 	sts	0x03EB, r25
     4b6:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = SUB0_ID1;
     4ba:	85 e1       	ldi	r24, 0x15	; 21
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	90 93 e6 03 	sts	0x03E6, r25
     4c2:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     4c6:	60 91 23 03 	lds	r22, 0x0323
     4ca:	83 ee       	ldi	r24, 0xE3	; 227
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     4d2:	81 11       	cpse	r24, r1
     4d4:	f8 cf       	rjmp	.-16     	; 0x4c6 <clean_up_msg+0x76>
     4d6:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     4d8:	82 30       	cpi	r24, 0x02	; 2
     4da:	09 f5       	brne	.+66     	; 0x51e <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     4dc:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     4e0:	85 e0       	ldi	r24, 0x05	; 5
     4e2:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     4e6:	88 e0       	ldi	r24, 0x08	; 8
     4e8:	80 93 e9 03 	sts	0x03E9, r24
		mob_number = mailbox;
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	80 93 23 03 	sts	0x0323, r24
		message.pt_data = &data2[0];
     4f2:	8b ec       	ldi	r24, 0xCB	; 203
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	90 93 eb 03 	sts	0x03EB, r25
     4fa:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[2];
     4fe:	80 91 f3 02 	lds	r24, 0x02F3
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	90 93 e6 03 	sts	0x03E6, r25
     508:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     50c:	60 91 23 03 	lds	r22, 0x0323
     510:	83 ee       	ldi	r24, 0xE3	; 227
     512:	93 e0       	ldi	r25, 0x03	; 3
     514:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     518:	81 11       	cpse	r24, r1
     51a:	f8 cf       	rjmp	.-16     	; 0x50c <clean_up_msg+0xbc>
     51c:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     51e:	83 30       	cpi	r24, 0x03	; 3
     520:	09 f5       	brne	.+66     	; 0x564 <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     522:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     52c:	88 e0       	ldi	r24, 0x08	; 8
     52e:	80 93 e9 03 	sts	0x03E9, r24
		mob_number = mailbox;
     532:	83 e0       	ldi	r24, 0x03	; 3
     534:	80 93 23 03 	sts	0x0323, r24
		message.pt_data = &data3[0];
     538:	8a ef       	ldi	r24, 0xFA	; 250
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	90 93 eb 03 	sts	0x03EB, r25
     540:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[3];
     544:	80 91 f4 02 	lds	r24, 0x02F4
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	90 93 e6 03 	sts	0x03E6, r25
     54e:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     552:	60 91 23 03 	lds	r22, 0x0323
     556:	83 ee       	ldi	r24, 0xE3	; 227
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     55e:	81 11       	cpse	r24, r1
     560:	f8 cf       	rjmp	.-16     	; 0x552 <clean_up_msg+0x102>
     562:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     564:	85 30       	cpi	r24, 0x05	; 5
     566:	f1 f4       	brne	.+60     	; 0x5a4 <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     568:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     56c:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     570:	98 e0       	ldi	r25, 0x08	; 8
     572:	90 93 e9 03 	sts	0x03E9, r25
		mob_number = mailbox;
     576:	80 93 23 03 	sts	0x0323, r24
		message.pt_data = &data5[0];
     57a:	89 e1       	ldi	r24, 0x19	; 25
     57c:	93 e0       	ldi	r25, 0x03	; 3
     57e:	90 93 eb 03 	sts	0x03EB, r25
     582:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[5];
     586:	80 91 f6 02 	lds	r24, 0x02F6
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	90 93 e6 03 	sts	0x03E6, r25
     590:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     594:	60 91 23 03 	lds	r22, 0x0323
     598:	83 ee       	ldi	r24, 0xE3	; 227
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     5a0:	81 11       	cpse	r24, r1
     5a2:	f8 cf       	rjmp	.-16     	; 0x594 <clean_up_msg+0x144>
     5a4:	08 95       	ret

000005a6 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     5aa:	85 e0       	ldi	r24, 0x05	; 5
     5ac:	0e 94 ce 01 	call	0x39c	; 0x39c <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     5b0:	60 91 23 03 	lds	r22, 0x0323
     5b4:	83 ee       	ldi	r24, 0xE3	; 227
     5b6:	93 e0       	ldi	r25, 0x03	; 3
     5b8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <can_get_status>
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	11 f1       	breq	.+68     	; 0x604 <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     5c0:	80 91 ec 03 	lds	r24, 0x03EC
     5c4:	80 32       	cpi	r24, 0x20	; 32
     5c6:	d9 f4       	brne	.+54     	; 0x5fe <can_check_housekeep+0x58>
     5c8:	a0 91 ea 03 	lds	r26, 0x03EA
     5cc:	b0 91 eb 03 	lds	r27, 0x03EB
     5d0:	c1 ef       	ldi	r28, 0xF1	; 241
     5d2:	d2 e0       	ldi	r29, 0x02	; 2
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     5d4:	e9 ee       	ldi	r30, 0xE9	; 233
     5d6:	f2 e0       	ldi	r31, 0x02	; 2
     5d8:	8d 91       	ld	r24, X+
     5da:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     5dc:	ec 17       	cp	r30, r28
     5de:	fd 07       	cpc	r31, r29
     5e0:	d9 f7       	brne	.-10     	; 0x5d8 <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     5e2:	80 91 ef 02 	lds	r24, 0x02EF
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	21 f4       	brne	.+8      	; 0x5f2 <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     5ea:	89 ee       	ldi	r24, 0xE9	; 233
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     5f2:	e9 ee       	ldi	r30, 0xE9	; 233
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     5f6:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     5f8:	ec 17       	cp	r30, r28
     5fa:	fd 07       	cpc	r31, r29
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     5fe:	85 e0       	ldi	r24, 0x05	; 5
     600:	0e 94 28 02 	call	0x450	; 0x450 <clean_up_msg>
	}	
	return;
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <can_check_general>:
#include "can_api.h"

static void start_tm_packet(void);

void can_check_general(void)
{
     60a:	9f 92       	push	r9
     60c:	af 92       	push	r10
     60e:	bf 92       	push	r11
     610:	cf 92       	push	r12
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     620:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     622:	0c ee       	ldi	r16, 0xEC	; 236
     624:	13 e0       	ldi	r17, 0x03	; 3
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     626:	0f 2e       	mov	r0, r31
     628:	fa ee       	ldi	r31, 0xEA	; 234
     62a:	af 2e       	mov	r10, r31
     62c:	f3 e0       	ldi	r31, 0x03	; 3
     62e:	bf 2e       	mov	r11, r31
     630:	f0 2d       	mov	r31, r0
     632:	c1 ef       	ldi	r28, 0xF1	; 241
     634:	d2 e0       	ldi	r29, 0x02	; 2
     636:	0f 2e       	mov	r0, r31
     638:	f9 ee       	ldi	r31, 0xE9	; 233
     63a:	ef 2e       	mov	r14, r31
     63c:	f2 e0       	ldi	r31, 0x02	; 2
     63e:	ff 2e       	mov	r15, r31
     640:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     642:	0f 2e       	mov	r0, r31
     644:	ff ee       	ldi	r31, 0xEF	; 239
     646:	cf 2e       	mov	r12, r31
     648:	f2 e0       	ldi	r31, 0x02	; 2
     64a:	df 2e       	mov	r13, r31
     64c:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     64e:	89 2d       	mov	r24, r9
     650:	0e 94 ce 01 	call	0x39c	; 0x39c <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     654:	60 91 23 03 	lds	r22, 0x0323
     658:	83 ee       	ldi	r24, 0xE3	; 227
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <can_get_status>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	e1 f0       	breq	.+56     	; 0x69c <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     664:	f8 01       	movw	r30, r16
     666:	80 81       	ld	r24, Z
     668:	80 32       	cpi	r24, 0x20	; 32
     66a:	a9 f4       	brne	.+42     	; 0x696 <can_check_general+0x8c>
     66c:	f5 01       	movw	r30, r10
     66e:	a0 81       	ld	r26, Z
     670:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     672:	f7 01       	movw	r30, r14
     674:	8d 91       	ld	r24, X+
     676:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     678:	ec 17       	cp	r30, r28
     67a:	fd 07       	cpc	r31, r29
     67c:	d9 f7       	brne	.-10     	; 0x674 <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     67e:	f6 01       	movw	r30, r12
     680:	80 81       	ld	r24, Z
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	19 f4       	brne	.+6      	; 0x68c <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     686:	c7 01       	movw	r24, r14
     688:	0e 94 f6 00 	call	0x1ec	; 0x1ec <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     68c:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     68e:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     690:	ec 17       	cp	r30, r28
     692:	fd 07       	cpc	r31, r29
     694:	e1 f7       	brne	.-8      	; 0x68e <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     696:	89 2d       	mov	r24, r9
     698:	0e 94 28 02 	call	0x450	; 0x450 <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     69c:	93 94       	inc	r9
     69e:	f4 e0       	ldi	r31, 0x04	; 4
     6a0:	9f 12       	cpse	r9, r31
     6a2:	d5 cf       	rjmp	.-86     	; 0x64e <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     6a4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <can_check_housekeep>
	
	return;
}
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	bf 90       	pop	r11
     6ba:	af 90       	pop	r10
     6bc:	9f 90       	pop	r9
     6be:	08 95       	ret

000006c0 <can_init_mobs>:
/************************************************************************/

void can_init_mobs(void)
{
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     6c0:	85 ed       	ldi	r24, 0xD5	; 213
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	90 93 eb 03 	sts	0x03EB, r25
     6c8:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     6cc:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     6d0:	80 91 f1 02 	lds	r24, 0x02F1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	90 93 e6 03 	sts	0x03E6, r25
     6da:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     6de:	85 e0       	ldi	r24, 0x05	; 5
     6e0:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;			 // Max length of a CAN message.
     6e4:	88 e0       	ldi	r24, 0x08	; 8
     6e6:	80 93 e9 03 	sts	0x03E9, r24
	mob_number = 0;
     6ea:	10 92 23 03 	sts	0x0323, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     6ee:	60 91 23 03 	lds	r22, 0x0323
     6f2:	83 ee       	ldi	r24, 0xE3	; 227
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     6fa:	81 11       	cpse	r24, r1
     6fc:	f8 cf       	rjmp	.-16     	; 0x6ee <can_init_mobs+0x2e>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     6fe:	82 ec       	ldi	r24, 0xC2	; 194
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	90 93 eb 03 	sts	0x03EB, r25
     706:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;
     70a:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[1];
     70e:	80 91 f2 02 	lds	r24, 0x02F2
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	90 93 e6 03 	sts	0x03E6, r25
     718:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;
     71c:	85 e0       	ldi	r24, 0x05	; 5
     71e:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;
     722:	88 e0       	ldi	r24, 0x08	; 8
     724:	80 93 e9 03 	sts	0x03E9, r24
	mob_number = 1;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 23 03 	sts	0x0323, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     72e:	60 91 23 03 	lds	r22, 0x0323
     732:	83 ee       	ldi	r24, 0xE3	; 227
     734:	93 e0       	ldi	r25, 0x03	; 3
     736:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     73a:	81 11       	cpse	r24, r1
     73c:	f8 cf       	rjmp	.-16     	; 0x72e <can_init_mobs+0x6e>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     73e:	8b ec       	ldi	r24, 0xCB	; 203
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	90 93 eb 03 	sts	0x03EB, r25
     746:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;
     74a:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[2];
     74e:	80 91 f3 02 	lds	r24, 0x02F3
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	90 93 e6 03 	sts	0x03E6, r25
     758:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;
     762:	88 e0       	ldi	r24, 0x08	; 8
     764:	80 93 e9 03 	sts	0x03E9, r24
	mob_number = 2;
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	80 93 23 03 	sts	0x0323, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     76e:	60 91 23 03 	lds	r22, 0x0323
     772:	83 ee       	ldi	r24, 0xE3	; 227
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     77a:	81 11       	cpse	r24, r1
     77c:	f8 cf       	rjmp	.-16     	; 0x76e <can_init_mobs+0xae>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     77e:	8a ef       	ldi	r24, 0xFA	; 250
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	90 93 eb 03 	sts	0x03EB, r25
     786:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;
     78a:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[3];
     78e:	80 91 f4 02 	lds	r24, 0x02F4
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 e6 03 	sts	0x03E6, r25
     798:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;
     79c:	85 e0       	ldi	r24, 0x05	; 5
     79e:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;
     7a2:	88 e0       	ldi	r24, 0x08	; 8
     7a4:	80 93 e9 03 	sts	0x03E9, r24
	mob_number = 3;
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	80 93 23 03 	sts	0x0323, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     7ae:	60 91 23 03 	lds	r22, 0x0323
     7b2:	83 ee       	ldi	r24, 0xE3	; 227
     7b4:	93 e0       	ldi	r25, 0x03	; 3
     7b6:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     7ba:	81 11       	cpse	r24, r1
     7bc:	f8 cf       	rjmp	.-16     	; 0x7ae <can_init_mobs+0xee>
	
	/* INITIALIZE MOB5 */
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     7be:	89 e1       	ldi	r24, 0x19	; 25
     7c0:	93 e0       	ldi	r25, 0x03	; 3
     7c2:	90 93 eb 03 	sts	0x03EB, r25
     7c6:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     7ca:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     7ce:	80 91 f6 02 	lds	r24, 0x02F6
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	90 93 e6 03 	sts	0x03E6, r25
     7d8:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     7dc:	85 e0       	ldi	r24, 0x05	; 5
     7de:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;				// Max length of a CAN message.
     7e2:	98 e0       	ldi	r25, 0x08	; 8
     7e4:	90 93 e9 03 	sts	0x03E9, r25
	mob_number = 5;
     7e8:	80 93 23 03 	sts	0x0323, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     7ec:	60 91 23 03 	lds	r22, 0x0323
     7f0:	83 ee       	ldi	r24, 0xE3	; 227
     7f2:	93 e0       	ldi	r25, 0x03	; 3
     7f4:	0e 94 4f 04 	call	0x89e	; 0x89e <can_cmd>
     7f8:	81 11       	cpse	r24, r1
     7fa:	f8 cf       	rjmp	.-16     	; 0x7ec <can_init_mobs+0x12c>
	
	return;
}
     7fc:	08 95       	ret

000007fe <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     7fe:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     800:	ad ee       	ldi	r26, 0xED	; 237
     802:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     804:	3e ee       	ldi	r19, 0xEE	; 238
     806:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     808:	98 2f       	mov	r25, r24
     80a:	92 95       	swap	r25
     80c:	90 7f       	andi	r25, 0xF0	; 240
     80e:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     810:	e3 2f       	mov	r30, r19
     812:	f2 2f       	mov	r31, r18
     814:	11 92       	st	Z+, r1
     816:	e8 3f       	cpi	r30, 0xF8	; 248
     818:	f1 05       	cpc	r31, r1
     81a:	e1 f7       	brne	.-8      	; 0x814 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     81c:	8f 5f       	subi	r24, 0xFF	; 255
     81e:	86 30       	cpi	r24, 0x06	; 6
     820:	99 f7       	brne	.-26     	; 0x808 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     822:	08 95       	ret

00000824 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     824:	80 91 ef 00 	lds	r24, 0x00EF
     828:	80 7c       	andi	r24, 0xC0	; 192
     82a:	61 f0       	breq	.+24     	; 0x844 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     82c:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     830:	98 2f       	mov	r25, r24
     832:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     834:	28 2f       	mov	r18, r24
     836:	20 76       	andi	r18, 0x60	; 96
     838:	20 32       	cpi	r18, 0x20	; 32
     83a:	31 f0       	breq	.+12     	; 0x848 <can_get_mob_status+0x24>
     83c:	90 34       	cpi	r25, 0x40	; 64
     83e:	31 f0       	breq	.+12     	; 0x84c <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     840:	8f 71       	andi	r24, 0x1F	; 31
     842:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     848:	89 2f       	mov	r24, r25
     84a:	08 95       	ret
     84c:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     84e:	08 95       	ret

00000850 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     850:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     852:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     854:	aa ef       	ldi	r26, 0xFA	; 250
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	9c 91       	ld	r25, X
     85a:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     85c:	8f 5f       	subi	r24, 0xFF	; 255
     85e:	88 30       	cpi	r24, 0x08	; 8
     860:	d9 f7       	brne	.-10     	; 0x858 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     862:	08 95       	ret

00000864 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	80 93 e2 00 	sts	0x00E2, r24
     870:	8c e0       	ldi	r24, 0x0C	; 12
     872:	80 93 e3 00 	sts	0x00E3, r24
     876:	87 e3       	ldi	r24, 0x37	; 55
     878:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	08 95       	ret

00000880 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     880:	0e 94 32 04 	call	0x864	; 0x864 <can_fixed_baudrate>
     884:	88 23       	and	r24, r24
     886:	49 f0       	breq	.+18     	; 0x89a <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     888:	0e 94 ff 03 	call	0x7fe	; 0x7fe <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     88c:	e8 ed       	ldi	r30, 0xD8	; 216
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	82 60       	ori	r24, 0x02	; 2
     894:	80 83       	st	Z, r24
    return (1);
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     89a:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     89c:	08 95       	ret

0000089e <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	1f 92       	push	r1
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     8aa:	11 96       	adiw	r26, 0x01	; 1
     8ac:	8c 91       	ld	r24, X
     8ae:	11 97       	sbiw	r26, 0x01	; 1
     8b0:	8c 30       	cpi	r24, 0x0C	; 12
     8b2:	b1 f4       	brne	.+44     	; 0x8e0 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     8b4:	19 96       	adiw	r26, 0x09	; 9
     8b6:	8c 91       	ld	r24, X
     8b8:	19 97       	sbiw	r26, 0x09	; 9
     8ba:	80 36       	cpi	r24, 0x60	; 96
     8bc:	69 f4       	brne	.+26     	; 0x8d8 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     8be:	86 2f       	mov	r24, r22
     8c0:	82 95       	swap	r24
     8c2:	80 7f       	andi	r24, 0xF0	; 240
     8c4:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     8c8:	ef ee       	ldi	r30, 0xEF	; 239
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	8f 73       	andi	r24, 0x3F	; 63
     8d0:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     8d2:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     8d6:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     8d8:	19 96       	adiw	r26, 0x09	; 9
     8da:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	07 c6       	rjmp	.+3086   	; 0x14ee <__stack+0xbef>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     8e0:	86 2f       	mov	r24, r22
     8e2:	82 95       	swap	r24
     8e4:	80 7f       	andi	r24, 0xF0	; 240
     8e6:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     8ea:	80 91 ef 00 	lds	r24, 0x00EF
     8ee:	80 7c       	andi	r24, 0xC0	; 192
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <can_cmd+0x56>
     8f2:	f9 c5       	rjmp	.+3058   	; 0x14e6 <__stack+0xbe7>
    {
      cmd->status = MOB_PENDING; 
     8f4:	80 e6       	ldi	r24, 0x60	; 96
     8f6:	19 96       	adiw	r26, 0x09	; 9
     8f8:	8c 93       	st	X, r24
     8fa:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     8fc:	6c 93       	st	X, r22
      Can_clear_mob();
     8fe:	ee ee       	ldi	r30, 0xEE	; 238
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	11 92       	st	Z+, r1
     904:	e8 3f       	cpi	r30, 0xF8	; 248
     906:	f1 05       	cpc	r31, r1
     908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0x3>
          
      switch (cmd->cmd)
     90a:	11 96       	adiw	r26, 0x01	; 1
     90c:	4c 91       	ld	r20, X
     90e:	11 97       	sbiw	r26, 0x01	; 1
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	fa 01       	movw	r30, r20
     914:	31 97       	sbiw	r30, 0x01	; 1
     916:	eb 30       	cpi	r30, 0x0B	; 11
     918:	f1 05       	cpc	r31, r1
     91a:	08 f0       	brcs	.+2      	; 0x91e <__stack+0x1f>
     91c:	e0 c5       	rjmp	.+3008   	; 0x14de <__stack+0xbdf>
     91e:	e2 5a       	subi	r30, 0xA2	; 162
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     926:	16 96       	adiw	r26, 0x06	; 6
     928:	8c 91       	ld	r24, X
     92a:	16 97       	sbiw	r26, 0x06	; 6
     92c:	81 11       	cpse	r24, r1
     92e:	b7 c4       	rjmp	.+2414   	; 0x129e <__stack+0x99f>
     930:	c8 c4       	rjmp	.+2448   	; 0x12c2 <__stack+0x9c3>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     932:	1b 96       	adiw	r26, 0x0b	; 11
     934:	8c 91       	ld	r24, X
     936:	1b 97       	sbiw	r26, 0x0b	; 11
     938:	88 23       	and	r24, r24
     93a:	d9 f1       	breq	.+118    	; 0x9b2 <__stack+0xb3>
     93c:	14 96       	adiw	r26, 0x04	; 4
     93e:	9c 91       	ld	r25, X
     940:	14 97       	sbiw	r26, 0x04	; 4
     942:	92 95       	swap	r25
     944:	96 95       	lsr	r25
     946:	97 70       	andi	r25, 0x07	; 7
     948:	15 96       	adiw	r26, 0x05	; 5
     94a:	8c 91       	ld	r24, X
     94c:	15 97       	sbiw	r26, 0x05	; 5
     94e:	88 0f       	add	r24, r24
     950:	88 0f       	add	r24, r24
     952:	88 0f       	add	r24, r24
     954:	89 0f       	add	r24, r25
     956:	80 93 f3 00 	sts	0x00F3, r24
     95a:	13 96       	adiw	r26, 0x03	; 3
     95c:	9c 91       	ld	r25, X
     95e:	13 97       	sbiw	r26, 0x03	; 3
     960:	92 95       	swap	r25
     962:	96 95       	lsr	r25
     964:	97 70       	andi	r25, 0x07	; 7
     966:	14 96       	adiw	r26, 0x04	; 4
     968:	8c 91       	ld	r24, X
     96a:	14 97       	sbiw	r26, 0x04	; 4
     96c:	88 0f       	add	r24, r24
     96e:	88 0f       	add	r24, r24
     970:	88 0f       	add	r24, r24
     972:	89 0f       	add	r24, r25
     974:	80 93 f2 00 	sts	0x00F2, r24
     978:	12 96       	adiw	r26, 0x02	; 2
     97a:	9c 91       	ld	r25, X
     97c:	12 97       	sbiw	r26, 0x02	; 2
     97e:	92 95       	swap	r25
     980:	96 95       	lsr	r25
     982:	97 70       	andi	r25, 0x07	; 7
     984:	13 96       	adiw	r26, 0x03	; 3
     986:	8c 91       	ld	r24, X
     988:	13 97       	sbiw	r26, 0x03	; 3
     98a:	88 0f       	add	r24, r24
     98c:	88 0f       	add	r24, r24
     98e:	88 0f       	add	r24, r24
     990:	89 0f       	add	r24, r25
     992:	80 93 f1 00 	sts	0x00F1, r24
     996:	12 96       	adiw	r26, 0x02	; 2
     998:	8c 91       	ld	r24, X
     99a:	12 97       	sbiw	r26, 0x02	; 2
     99c:	88 0f       	add	r24, r24
     99e:	88 0f       	add	r24, r24
     9a0:	88 0f       	add	r24, r24
     9a2:	80 93 f0 00 	sts	0x00F0, r24
     9a6:	ef ee       	ldi	r30, 0xEF	; 239
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	80 61       	ori	r24, 0x10	; 16
     9ae:	80 83       	st	Z, r24
     9b0:	1c c0       	rjmp	.+56     	; 0x9ea <__stack+0xeb>
          else              { Can_set_std_id(cmd->id.std);}
     9b2:	12 96       	adiw	r26, 0x02	; 2
     9b4:	8c 91       	ld	r24, X
     9b6:	12 97       	sbiw	r26, 0x02	; 2
     9b8:	86 95       	lsr	r24
     9ba:	86 95       	lsr	r24
     9bc:	86 95       	lsr	r24
     9be:	13 96       	adiw	r26, 0x03	; 3
     9c0:	9c 91       	ld	r25, X
     9c2:	13 97       	sbiw	r26, 0x03	; 3
     9c4:	20 e2       	ldi	r18, 0x20	; 32
     9c6:	92 9f       	mul	r25, r18
     9c8:	80 0d       	add	r24, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	80 93 f3 00 	sts	0x00F3, r24
     9d0:	12 96       	adiw	r26, 0x02	; 2
     9d2:	8c 91       	ld	r24, X
     9d4:	12 97       	sbiw	r26, 0x02	; 2
     9d6:	82 95       	swap	r24
     9d8:	88 0f       	add	r24, r24
     9da:	80 7e       	andi	r24, 0xE0	; 224
     9dc:	80 93 f2 00 	sts	0x00F2, r24
     9e0:	ef ee       	ldi	r30, 0xEF	; 239
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	8f 7e       	andi	r24, 0xEF	; 239
     9e8:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     9ea:	16 96       	adiw	r26, 0x06	; 6
     9ec:	8c 91       	ld	r24, X
     9ee:	16 97       	sbiw	r26, 0x06	; 6
     9f0:	88 23       	and	r24, r24
     9f2:	91 f0       	breq	.+36     	; 0xa18 <__stack+0x119>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	8a ef       	ldi	r24, 0xFA	; 250
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	17 96       	adiw	r26, 0x07	; 7
     9fc:	ed 91       	ld	r30, X+
     9fe:	fc 91       	ld	r31, X
     a00:	18 97       	sbiw	r26, 0x08	; 8
     a02:	e2 0f       	add	r30, r18
     a04:	f1 1d       	adc	r31, r1
     a06:	30 81       	ld	r19, Z
     a08:	fc 01       	movw	r30, r24
     a0a:	30 83       	st	Z, r19
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	16 96       	adiw	r26, 0x06	; 6
     a10:	3c 91       	ld	r19, X
     a12:	16 97       	sbiw	r26, 0x06	; 6
     a14:	23 17       	cp	r18, r19
     a16:	88 f3       	brcs	.-30     	; 0x9fa <__stack+0xfb>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     a18:	1a 96       	adiw	r26, 0x0a	; 10
     a1a:	8c 91       	ld	r24, X
     a1c:	1a 97       	sbiw	r26, 0x0a	; 10
     a1e:	88 23       	and	r24, r24
     a20:	31 f0       	breq	.+12     	; 0xa2e <__stack+0x12f>
     a22:	e0 ef       	ldi	r30, 0xF0	; 240
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	84 60       	ori	r24, 0x04	; 4
     a2a:	80 83       	st	Z, r24
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <__stack+0x139>
            else Can_clear_rtr();    
     a2e:	e0 ef       	ldi	r30, 0xF0	; 240
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	8b 7f       	andi	r24, 0xFB	; 251
     a36:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     a38:	ef ee       	ldi	r30, 0xEF	; 239
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	90 81       	ld	r25, Z
     a3e:	16 96       	adiw	r26, 0x06	; 6
     a40:	8c 91       	ld	r24, X
     a42:	89 2b       	or	r24, r25
     a44:	80 83       	st	Z, r24
          Can_config_tx();
     a46:	80 81       	ld	r24, Z
     a48:	8f 73       	andi	r24, 0x3F	; 63
     a4a:	80 83       	st	Z, r24
     a4c:	80 81       	ld	r24, Z
     a4e:	80 64       	ori	r24, 0x40	; 64
     a50:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a52:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a54:	4c c5       	rjmp	.+2712   	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a56:	1b 96       	adiw	r26, 0x0b	; 11
     a58:	8c 91       	ld	r24, X
     a5a:	1b 97       	sbiw	r26, 0x0b	; 11
     a5c:	88 23       	and	r24, r24
     a5e:	d9 f1       	breq	.+118    	; 0xad6 <__stack+0x1d7>
     a60:	14 96       	adiw	r26, 0x04	; 4
     a62:	9c 91       	ld	r25, X
     a64:	14 97       	sbiw	r26, 0x04	; 4
     a66:	92 95       	swap	r25
     a68:	96 95       	lsr	r25
     a6a:	97 70       	andi	r25, 0x07	; 7
     a6c:	15 96       	adiw	r26, 0x05	; 5
     a6e:	8c 91       	ld	r24, X
     a70:	15 97       	sbiw	r26, 0x05	; 5
     a72:	88 0f       	add	r24, r24
     a74:	88 0f       	add	r24, r24
     a76:	88 0f       	add	r24, r24
     a78:	89 0f       	add	r24, r25
     a7a:	80 93 f3 00 	sts	0x00F3, r24
     a7e:	13 96       	adiw	r26, 0x03	; 3
     a80:	9c 91       	ld	r25, X
     a82:	13 97       	sbiw	r26, 0x03	; 3
     a84:	92 95       	swap	r25
     a86:	96 95       	lsr	r25
     a88:	97 70       	andi	r25, 0x07	; 7
     a8a:	14 96       	adiw	r26, 0x04	; 4
     a8c:	8c 91       	ld	r24, X
     a8e:	14 97       	sbiw	r26, 0x04	; 4
     a90:	88 0f       	add	r24, r24
     a92:	88 0f       	add	r24, r24
     a94:	88 0f       	add	r24, r24
     a96:	89 0f       	add	r24, r25
     a98:	80 93 f2 00 	sts	0x00F2, r24
     a9c:	12 96       	adiw	r26, 0x02	; 2
     a9e:	9c 91       	ld	r25, X
     aa0:	12 97       	sbiw	r26, 0x02	; 2
     aa2:	92 95       	swap	r25
     aa4:	96 95       	lsr	r25
     aa6:	97 70       	andi	r25, 0x07	; 7
     aa8:	13 96       	adiw	r26, 0x03	; 3
     aaa:	8c 91       	ld	r24, X
     aac:	13 97       	sbiw	r26, 0x03	; 3
     aae:	88 0f       	add	r24, r24
     ab0:	88 0f       	add	r24, r24
     ab2:	88 0f       	add	r24, r24
     ab4:	89 0f       	add	r24, r25
     ab6:	80 93 f1 00 	sts	0x00F1, r24
     aba:	12 96       	adiw	r26, 0x02	; 2
     abc:	8c 91       	ld	r24, X
     abe:	12 97       	sbiw	r26, 0x02	; 2
     ac0:	88 0f       	add	r24, r24
     ac2:	88 0f       	add	r24, r24
     ac4:	88 0f       	add	r24, r24
     ac6:	80 93 f0 00 	sts	0x00F0, r24
     aca:	ef ee       	ldi	r30, 0xEF	; 239
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	80 81       	ld	r24, Z
     ad0:	80 61       	ori	r24, 0x10	; 16
     ad2:	80 83       	st	Z, r24
     ad4:	1c c0       	rjmp	.+56     	; 0xb0e <__stack+0x20f>
          else              { Can_set_std_id(cmd->id.std);}
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	8c 91       	ld	r24, X
     ada:	12 97       	sbiw	r26, 0x02	; 2
     adc:	86 95       	lsr	r24
     ade:	86 95       	lsr	r24
     ae0:	86 95       	lsr	r24
     ae2:	13 96       	adiw	r26, 0x03	; 3
     ae4:	9c 91       	ld	r25, X
     ae6:	13 97       	sbiw	r26, 0x03	; 3
     ae8:	f0 e2       	ldi	r31, 0x20	; 32
     aea:	9f 9f       	mul	r25, r31
     aec:	80 0d       	add	r24, r0
     aee:	11 24       	eor	r1, r1
     af0:	80 93 f3 00 	sts	0x00F3, r24
     af4:	12 96       	adiw	r26, 0x02	; 2
     af6:	8c 91       	ld	r24, X
     af8:	12 97       	sbiw	r26, 0x02	; 2
     afa:	82 95       	swap	r24
     afc:	88 0f       	add	r24, r24
     afe:	80 7e       	andi	r24, 0xE0	; 224
     b00:	80 93 f2 00 	sts	0x00F2, r24
     b04:	ef ee       	ldi	r30, 0xEF	; 239
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	80 81       	ld	r24, Z
     b0a:	8f 7e       	andi	r24, 0xEF	; 239
     b0c:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     b0e:	16 96       	adiw	r26, 0x06	; 6
     b10:	8c 91       	ld	r24, X
     b12:	16 97       	sbiw	r26, 0x06	; 6
     b14:	88 23       	and	r24, r24
     b16:	91 f0       	breq	.+36     	; 0xb3c <__stack+0x23d>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	8a ef       	ldi	r24, 0xFA	; 250
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	17 96       	adiw	r26, 0x07	; 7
     b20:	ed 91       	ld	r30, X+
     b22:	fc 91       	ld	r31, X
     b24:	18 97       	sbiw	r26, 0x08	; 8
     b26:	e2 0f       	add	r30, r18
     b28:	f1 1d       	adc	r31, r1
     b2a:	30 81       	ld	r19, Z
     b2c:	fc 01       	movw	r30, r24
     b2e:	30 83       	st	Z, r19
     b30:	2f 5f       	subi	r18, 0xFF	; 255
     b32:	16 96       	adiw	r26, 0x06	; 6
     b34:	3c 91       	ld	r19, X
     b36:	16 97       	sbiw	r26, 0x06	; 6
     b38:	23 17       	cp	r18, r19
     b3a:	88 f3       	brcs	.-30     	; 0xb1e <__stack+0x21f>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     b3c:	1a 96       	adiw	r26, 0x0a	; 10
     b3e:	1c 92       	st	X, r1
     b40:	1a 97       	sbiw	r26, 0x0a	; 10
     b42:	e0 ef       	ldi	r30, 0xF0	; 240
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8b 7f       	andi	r24, 0xFB	; 251
     b4a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     b4c:	ef ee       	ldi	r30, 0xEF	; 239
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	90 81       	ld	r25, Z
     b52:	16 96       	adiw	r26, 0x06	; 6
     b54:	8c 91       	ld	r24, X
     b56:	89 2b       	or	r24, r25
     b58:	80 83       	st	Z, r24
          Can_config_tx();
     b5a:	80 81       	ld	r24, Z
     b5c:	8f 73       	andi	r24, 0x3F	; 63
     b5e:	80 83       	st	Z, r24
     b60:	80 81       	ld	r24, Z
     b62:	80 64       	ori	r24, 0x40	; 64
     b64:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b66:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     b68:	c2 c4       	rjmp	.+2436   	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b6a:	1b 96       	adiw	r26, 0x0b	; 11
     b6c:	8c 91       	ld	r24, X
     b6e:	1b 97       	sbiw	r26, 0x0b	; 11
     b70:	88 23       	and	r24, r24
     b72:	d9 f1       	breq	.+118    	; 0xbea <__stack+0x2eb>
     b74:	14 96       	adiw	r26, 0x04	; 4
     b76:	9c 91       	ld	r25, X
     b78:	14 97       	sbiw	r26, 0x04	; 4
     b7a:	92 95       	swap	r25
     b7c:	96 95       	lsr	r25
     b7e:	97 70       	andi	r25, 0x07	; 7
     b80:	15 96       	adiw	r26, 0x05	; 5
     b82:	8c 91       	ld	r24, X
     b84:	15 97       	sbiw	r26, 0x05	; 5
     b86:	88 0f       	add	r24, r24
     b88:	88 0f       	add	r24, r24
     b8a:	88 0f       	add	r24, r24
     b8c:	89 0f       	add	r24, r25
     b8e:	80 93 f3 00 	sts	0x00F3, r24
     b92:	13 96       	adiw	r26, 0x03	; 3
     b94:	9c 91       	ld	r25, X
     b96:	13 97       	sbiw	r26, 0x03	; 3
     b98:	92 95       	swap	r25
     b9a:	96 95       	lsr	r25
     b9c:	97 70       	andi	r25, 0x07	; 7
     b9e:	14 96       	adiw	r26, 0x04	; 4
     ba0:	8c 91       	ld	r24, X
     ba2:	14 97       	sbiw	r26, 0x04	; 4
     ba4:	88 0f       	add	r24, r24
     ba6:	88 0f       	add	r24, r24
     ba8:	88 0f       	add	r24, r24
     baa:	89 0f       	add	r24, r25
     bac:	80 93 f2 00 	sts	0x00F2, r24
     bb0:	12 96       	adiw	r26, 0x02	; 2
     bb2:	9c 91       	ld	r25, X
     bb4:	12 97       	sbiw	r26, 0x02	; 2
     bb6:	92 95       	swap	r25
     bb8:	96 95       	lsr	r25
     bba:	97 70       	andi	r25, 0x07	; 7
     bbc:	13 96       	adiw	r26, 0x03	; 3
     bbe:	8c 91       	ld	r24, X
     bc0:	13 97       	sbiw	r26, 0x03	; 3
     bc2:	88 0f       	add	r24, r24
     bc4:	88 0f       	add	r24, r24
     bc6:	88 0f       	add	r24, r24
     bc8:	89 0f       	add	r24, r25
     bca:	80 93 f1 00 	sts	0x00F1, r24
     bce:	12 96       	adiw	r26, 0x02	; 2
     bd0:	8c 91       	ld	r24, X
     bd2:	12 97       	sbiw	r26, 0x02	; 2
     bd4:	88 0f       	add	r24, r24
     bd6:	88 0f       	add	r24, r24
     bd8:	88 0f       	add	r24, r24
     bda:	80 93 f0 00 	sts	0x00F0, r24
     bde:	ef ee       	ldi	r30, 0xEF	; 239
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 61       	ori	r24, 0x10	; 16
     be6:	80 83       	st	Z, r24
     be8:	1c c0       	rjmp	.+56     	; 0xc22 <__stack+0x323>
          else              { Can_set_std_id(cmd->id.std);}
     bea:	12 96       	adiw	r26, 0x02	; 2
     bec:	8c 91       	ld	r24, X
     bee:	12 97       	sbiw	r26, 0x02	; 2
     bf0:	86 95       	lsr	r24
     bf2:	86 95       	lsr	r24
     bf4:	86 95       	lsr	r24
     bf6:	13 96       	adiw	r26, 0x03	; 3
     bf8:	9c 91       	ld	r25, X
     bfa:	13 97       	sbiw	r26, 0x03	; 3
     bfc:	f0 e2       	ldi	r31, 0x20	; 32
     bfe:	9f 9f       	mul	r25, r31
     c00:	80 0d       	add	r24, r0
     c02:	11 24       	eor	r1, r1
     c04:	80 93 f3 00 	sts	0x00F3, r24
     c08:	12 96       	adiw	r26, 0x02	; 2
     c0a:	8c 91       	ld	r24, X
     c0c:	12 97       	sbiw	r26, 0x02	; 2
     c0e:	82 95       	swap	r24
     c10:	88 0f       	add	r24, r24
     c12:	80 7e       	andi	r24, 0xE0	; 224
     c14:	80 93 f2 00 	sts	0x00F2, r24
     c18:	ef ee       	ldi	r30, 0xEF	; 239
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8f 7e       	andi	r24, 0xEF	; 239
     c20:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	1a 96       	adiw	r26, 0x0a	; 10
     c26:	8c 93       	st	X, r24
     c28:	1a 97       	sbiw	r26, 0x0a	; 10
     c2a:	e0 ef       	ldi	r30, 0xF0	; 240
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	84 60       	ori	r24, 0x04	; 4
     c32:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     c34:	ef ee       	ldi	r30, 0xEF	; 239
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	90 81       	ld	r25, Z
     c3a:	16 96       	adiw	r26, 0x06	; 6
     c3c:	8c 91       	ld	r24, X
     c3e:	89 2b       	or	r24, r25
     c40:	80 83       	st	Z, r24
          Can_config_tx();
     c42:	80 81       	ld	r24, Z
     c44:	8f 73       	andi	r24, 0x3F	; 63
     c46:	80 83       	st	Z, r24
     c48:	80 81       	ld	r24, Z
     c4a:	80 64       	ori	r24, 0x40	; 64
     c4c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c4e:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     c50:	4e c4       	rjmp	.+2204   	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     c52:	19 82       	std	Y+1, r1	; 0x01
     c54:	9b 81       	ldd	r25, Y+3	; 0x03
     c56:	92 95       	swap	r25
     c58:	96 95       	lsr	r25
     c5a:	97 70       	andi	r25, 0x07	; 7
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	88 0f       	add	r24, r24
     c60:	88 0f       	add	r24, r24
     c62:	88 0f       	add	r24, r24
     c64:	89 0f       	add	r24, r25
     c66:	80 93 f7 00 	sts	0x00F7, r24
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	92 95       	swap	r25
     c6e:	96 95       	lsr	r25
     c70:	97 70       	andi	r25, 0x07	; 7
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	88 0f       	add	r24, r24
     c76:	88 0f       	add	r24, r24
     c78:	88 0f       	add	r24, r24
     c7a:	89 0f       	add	r24, r25
     c7c:	80 93 f6 00 	sts	0x00F6, r24
     c80:	99 81       	ldd	r25, Y+1	; 0x01
     c82:	92 95       	swap	r25
     c84:	96 95       	lsr	r25
     c86:	97 70       	andi	r25, 0x07	; 7
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	88 0f       	add	r24, r24
     c8c:	88 0f       	add	r24, r24
     c8e:	88 0f       	add	r24, r24
     c90:	89 0f       	add	r24, r25
     c92:	80 93 f5 00 	sts	0x00F5, r24
     c96:	29 81       	ldd	r18, Y+1	; 0x01
     c98:	22 0f       	add	r18, r18
     c9a:	22 0f       	add	r18, r18
     c9c:	22 0f       	add	r18, r18
     c9e:	84 ef       	ldi	r24, 0xF4	; 244
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ca6:	ef ee       	ldi	r30, 0xEF	; 239
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	30 81       	ld	r19, Z
     cac:	16 96       	adiw	r26, 0x06	; 6
     cae:	2c 91       	ld	r18, X
     cb0:	23 2b       	or	r18, r19
     cb2:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     cb4:	dc 01       	movw	r26, r24
     cb6:	2c 91       	ld	r18, X
     cb8:	2b 7f       	andi	r18, 0xFB	; 251
     cba:	2c 93       	st	X, r18
          Can_clear_idemsk();
     cbc:	2c 91       	ld	r18, X
     cbe:	2e 7f       	andi	r18, 0xFE	; 254
     cc0:	2c 93       	st	X, r18
          Can_config_rx();       
     cc2:	80 81       	ld	r24, Z
     cc4:	8f 73       	andi	r24, 0x3F	; 63
     cc6:	80 83       	st	Z, r24
     cc8:	80 81       	ld	r24, Z
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     cce:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     cd0:	0e c4       	rjmp	.+2076   	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	82 95       	swap	r24
     cda:	88 0f       	add	r24, r24
     cdc:	80 7e       	andi	r24, 0xE0	; 224
     cde:	81 5e       	subi	r24, 0xE1	; 225
     ce0:	27 ef       	ldi	r18, 0xF7	; 247
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	f9 01       	movw	r30, r18
     ce6:	80 83       	st	Z, r24
     ce8:	49 81       	ldd	r20, Y+1	; 0x01
     cea:	42 95       	swap	r20
     cec:	44 0f       	add	r20, r20
     cee:	40 7e       	andi	r20, 0xE0	; 224
     cf0:	86 ef       	ldi	r24, 0xF6	; 246
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	fc 01       	movw	r30, r24
     cf6:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	4c 91       	ld	r20, X
     cfc:	12 97       	sbiw	r26, 0x02	; 2
     cfe:	46 95       	lsr	r20
     d00:	46 95       	lsr	r20
     d02:	46 95       	lsr	r20
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	5c 91       	ld	r21, X
     d08:	13 97       	sbiw	r26, 0x03	; 3
     d0a:	f0 e2       	ldi	r31, 0x20	; 32
     d0c:	5f 9f       	mul	r21, r31
     d0e:	40 0d       	add	r20, r0
     d10:	11 24       	eor	r1, r1
     d12:	40 93 f3 00 	sts	0x00F3, r20
     d16:	12 96       	adiw	r26, 0x02	; 2
     d18:	4c 91       	ld	r20, X
     d1a:	12 97       	sbiw	r26, 0x02	; 2
     d1c:	42 95       	swap	r20
     d1e:	44 0f       	add	r20, r20
     d20:	40 7e       	andi	r20, 0xE0	; 224
     d22:	40 93 f2 00 	sts	0x00F2, r20
     d26:	6f ee       	ldi	r22, 0xEF	; 239
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	fb 01       	movw	r30, r22
     d2c:	40 81       	ld	r20, Z
     d2e:	4f 7e       	andi	r20, 0xEF	; 239
     d30:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     d32:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     d34:	5b 81       	ldd	r21, Y+3	; 0x03
     d36:	52 95       	swap	r21
     d38:	56 95       	lsr	r21
     d3a:	57 70       	andi	r21, 0x07	; 7
     d3c:	4c 81       	ldd	r20, Y+4	; 0x04
     d3e:	44 0f       	add	r20, r20
     d40:	44 0f       	add	r20, r20
     d42:	44 0f       	add	r20, r20
     d44:	45 0f       	add	r20, r21
     d46:	f9 01       	movw	r30, r18
     d48:	40 83       	st	Z, r20
     d4a:	3a 81       	ldd	r19, Y+2	; 0x02
     d4c:	32 95       	swap	r19
     d4e:	36 95       	lsr	r19
     d50:	37 70       	andi	r19, 0x07	; 7
     d52:	2b 81       	ldd	r18, Y+3	; 0x03
     d54:	22 0f       	add	r18, r18
     d56:	22 0f       	add	r18, r18
     d58:	22 0f       	add	r18, r18
     d5a:	23 0f       	add	r18, r19
     d5c:	fc 01       	movw	r30, r24
     d5e:	20 83       	st	Z, r18
     d60:	99 81       	ldd	r25, Y+1	; 0x01
     d62:	92 95       	swap	r25
     d64:	96 95       	lsr	r25
     d66:	97 70       	andi	r25, 0x07	; 7
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	88 0f       	add	r24, r24
     d6c:	88 0f       	add	r24, r24
     d6e:	88 0f       	add	r24, r24
     d70:	89 0f       	add	r24, r25
     d72:	80 93 f5 00 	sts	0x00F5, r24
     d76:	29 81       	ldd	r18, Y+1	; 0x01
     d78:	22 0f       	add	r18, r18
     d7a:	22 0f       	add	r18, r18
     d7c:	22 0f       	add	r18, r18
     d7e:	84 ef       	ldi	r24, 0xF4	; 244
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	fc 01       	movw	r30, r24
     d84:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     d86:	fb 01       	movw	r30, r22
     d88:	30 81       	ld	r19, Z
     d8a:	16 96       	adiw	r26, 0x06	; 6
     d8c:	2c 91       	ld	r18, X
     d8e:	16 97       	sbiw	r26, 0x06	; 6
     d90:	23 2b       	or	r18, r19
     d92:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     d94:	1a 96       	adiw	r26, 0x0a	; 10
     d96:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     d98:	dc 01       	movw	r26, r24
     d9a:	2c 91       	ld	r18, X
     d9c:	24 60       	ori	r18, 0x04	; 4
     d9e:	2c 93       	st	X, r18
		  Can_clear_rtr();
     da0:	a0 ef       	ldi	r26, 0xF0	; 240
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	2c 91       	ld	r18, X
     da6:	2b 7f       	andi	r18, 0xFB	; 251
     da8:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     daa:	20 81       	ld	r18, Z
     dac:	2f 7e       	andi	r18, 0xEF	; 239
     dae:	20 83       	st	Z, r18
          Can_clear_idemsk();
     db0:	fc 01       	movw	r30, r24
     db2:	20 81       	ld	r18, Z
     db4:	2e 7f       	andi	r18, 0xFE	; 254
     db6:	20 83       	st	Z, r18
          Can_config_rx();       
     db8:	db 01       	movw	r26, r22
     dba:	8c 91       	ld	r24, X
     dbc:	8f 73       	andi	r24, 0x3F	; 63
     dbe:	8c 93       	st	X, r24
     dc0:	8c 91       	ld	r24, X
     dc2:	80 68       	ori	r24, 0x80	; 128
     dc4:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dc6:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     dc8:	92 c3       	rjmp	.+1828   	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	82 95       	swap	r24
     dd2:	88 0f       	add	r24, r24
     dd4:	80 7e       	andi	r24, 0xE0	; 224
     dd6:	81 5e       	subi	r24, 0xE1	; 225
     dd8:	27 ef       	ldi	r18, 0xF7	; 247
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	f9 01       	movw	r30, r18
     dde:	80 83       	st	Z, r24
     de0:	49 81       	ldd	r20, Y+1	; 0x01
     de2:	42 95       	swap	r20
     de4:	44 0f       	add	r20, r20
     de6:	40 7e       	andi	r20, 0xE0	; 224
     de8:	86 ef       	ldi	r24, 0xF6	; 246
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	fc 01       	movw	r30, r24
     dee:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     df0:	12 96       	adiw	r26, 0x02	; 2
     df2:	4c 91       	ld	r20, X
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	46 95       	lsr	r20
     df8:	46 95       	lsr	r20
     dfa:	46 95       	lsr	r20
     dfc:	13 96       	adiw	r26, 0x03	; 3
     dfe:	5c 91       	ld	r21, X
     e00:	13 97       	sbiw	r26, 0x03	; 3
     e02:	f0 e2       	ldi	r31, 0x20	; 32
     e04:	5f 9f       	mul	r21, r31
     e06:	40 0d       	add	r20, r0
     e08:	11 24       	eor	r1, r1
     e0a:	40 93 f3 00 	sts	0x00F3, r20
     e0e:	12 96       	adiw	r26, 0x02	; 2
     e10:	4c 91       	ld	r20, X
     e12:	12 97       	sbiw	r26, 0x02	; 2
     e14:	42 95       	swap	r20
     e16:	44 0f       	add	r20, r20
     e18:	40 7e       	andi	r20, 0xE0	; 224
     e1a:	40 93 f2 00 	sts	0x00F2, r20
     e1e:	6f ee       	ldi	r22, 0xEF	; 239
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	fb 01       	movw	r30, r22
     e24:	40 81       	ld	r20, Z
     e26:	4f 7e       	andi	r20, 0xEF	; 239
     e28:	40 83       	st	Z, r20
		
          u8_temp=0; 
     e2a:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     e2c:	5b 81       	ldd	r21, Y+3	; 0x03
     e2e:	52 95       	swap	r21
     e30:	56 95       	lsr	r21
     e32:	57 70       	andi	r21, 0x07	; 7
     e34:	4c 81       	ldd	r20, Y+4	; 0x04
     e36:	44 0f       	add	r20, r20
     e38:	44 0f       	add	r20, r20
     e3a:	44 0f       	add	r20, r20
     e3c:	45 0f       	add	r20, r21
     e3e:	f9 01       	movw	r30, r18
     e40:	40 83       	st	Z, r20
     e42:	3a 81       	ldd	r19, Y+2	; 0x02
     e44:	32 95       	swap	r19
     e46:	36 95       	lsr	r19
     e48:	37 70       	andi	r19, 0x07	; 7
     e4a:	2b 81       	ldd	r18, Y+3	; 0x03
     e4c:	22 0f       	add	r18, r18
     e4e:	22 0f       	add	r18, r18
     e50:	22 0f       	add	r18, r18
     e52:	23 0f       	add	r18, r19
     e54:	fc 01       	movw	r30, r24
     e56:	20 83       	st	Z, r18
     e58:	99 81       	ldd	r25, Y+1	; 0x01
     e5a:	92 95       	swap	r25
     e5c:	96 95       	lsr	r25
     e5e:	97 70       	andi	r25, 0x07	; 7
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	88 0f       	add	r24, r24
     e64:	88 0f       	add	r24, r24
     e66:	88 0f       	add	r24, r24
     e68:	89 0f       	add	r24, r25
     e6a:	80 93 f5 00 	sts	0x00F5, r24
     e6e:	29 81       	ldd	r18, Y+1	; 0x01
     e70:	22 0f       	add	r18, r18
     e72:	22 0f       	add	r18, r18
     e74:	22 0f       	add	r18, r18
     e76:	84 ef       	ldi	r24, 0xF4	; 244
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	fc 01       	movw	r30, r24
     e7c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e7e:	fb 01       	movw	r30, r22
     e80:	30 81       	ld	r19, Z
     e82:	16 96       	adiw	r26, 0x06	; 6
     e84:	2c 91       	ld	r18, X
     e86:	16 97       	sbiw	r26, 0x06	; 6
     e88:	23 2b       	or	r18, r19
     e8a:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	1a 96       	adiw	r26, 0x0a	; 10
     e90:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     e92:	dc 01       	movw	r26, r24
     e94:	2c 91       	ld	r18, X
     e96:	24 60       	ori	r18, 0x04	; 4
     e98:	2c 93       	st	X, r18
		  Can_set_rtr();
     e9a:	a0 ef       	ldi	r26, 0xF0	; 240
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	2c 91       	ld	r18, X
     ea0:	24 60       	ori	r18, 0x04	; 4
     ea2:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     ea4:	20 81       	ld	r18, Z
     ea6:	2f 7d       	andi	r18, 0xDF	; 223
     ea8:	20 83       	st	Z, r18
          Can_clear_idemsk();
     eaa:	fc 01       	movw	r30, r24
     eac:	20 81       	ld	r18, Z
     eae:	2e 7f       	andi	r18, 0xFE	; 254
     eb0:	20 83       	st	Z, r18
          Can_config_rx();       
     eb2:	db 01       	movw	r26, r22
     eb4:	8c 91       	ld	r24, X
     eb6:	8f 73       	andi	r24, 0x3F	; 63
     eb8:	8c 93       	st	X, r24
     eba:	8c 91       	ld	r24, X
     ebc:	80 68       	ori	r24, 0x80	; 128
     ebe:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ec0:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     ec2:	15 c3       	rjmp	.+1578   	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ec4:	1b 96       	adiw	r26, 0x0b	; 11
     ec6:	8c 91       	ld	r24, X
     ec8:	1b 97       	sbiw	r26, 0x0b	; 11
     eca:	88 23       	and	r24, r24
     ecc:	d9 f1       	breq	.+118    	; 0xf44 <__stack+0x645>
     ece:	14 96       	adiw	r26, 0x04	; 4
     ed0:	9c 91       	ld	r25, X
     ed2:	14 97       	sbiw	r26, 0x04	; 4
     ed4:	92 95       	swap	r25
     ed6:	96 95       	lsr	r25
     ed8:	97 70       	andi	r25, 0x07	; 7
     eda:	15 96       	adiw	r26, 0x05	; 5
     edc:	8c 91       	ld	r24, X
     ede:	15 97       	sbiw	r26, 0x05	; 5
     ee0:	88 0f       	add	r24, r24
     ee2:	88 0f       	add	r24, r24
     ee4:	88 0f       	add	r24, r24
     ee6:	89 0f       	add	r24, r25
     ee8:	80 93 f3 00 	sts	0x00F3, r24
     eec:	13 96       	adiw	r26, 0x03	; 3
     eee:	9c 91       	ld	r25, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	92 95       	swap	r25
     ef4:	96 95       	lsr	r25
     ef6:	97 70       	andi	r25, 0x07	; 7
     ef8:	14 96       	adiw	r26, 0x04	; 4
     efa:	8c 91       	ld	r24, X
     efc:	14 97       	sbiw	r26, 0x04	; 4
     efe:	88 0f       	add	r24, r24
     f00:	88 0f       	add	r24, r24
     f02:	88 0f       	add	r24, r24
     f04:	89 0f       	add	r24, r25
     f06:	80 93 f2 00 	sts	0x00F2, r24
     f0a:	12 96       	adiw	r26, 0x02	; 2
     f0c:	9c 91       	ld	r25, X
     f0e:	12 97       	sbiw	r26, 0x02	; 2
     f10:	92 95       	swap	r25
     f12:	96 95       	lsr	r25
     f14:	97 70       	andi	r25, 0x07	; 7
     f16:	13 96       	adiw	r26, 0x03	; 3
     f18:	8c 91       	ld	r24, X
     f1a:	13 97       	sbiw	r26, 0x03	; 3
     f1c:	88 0f       	add	r24, r24
     f1e:	88 0f       	add	r24, r24
     f20:	88 0f       	add	r24, r24
     f22:	89 0f       	add	r24, r25
     f24:	80 93 f1 00 	sts	0x00F1, r24
     f28:	12 96       	adiw	r26, 0x02	; 2
     f2a:	8c 91       	ld	r24, X
     f2c:	12 97       	sbiw	r26, 0x02	; 2
     f2e:	88 0f       	add	r24, r24
     f30:	88 0f       	add	r24, r24
     f32:	88 0f       	add	r24, r24
     f34:	80 93 f0 00 	sts	0x00F0, r24
     f38:	ef ee       	ldi	r30, 0xEF	; 239
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	80 83       	st	Z, r24
     f42:	1c c0       	rjmp	.+56     	; 0xf7c <__stack+0x67d>
          else              { Can_set_std_id(cmd->id.std);}
     f44:	12 96       	adiw	r26, 0x02	; 2
     f46:	8c 91       	ld	r24, X
     f48:	12 97       	sbiw	r26, 0x02	; 2
     f4a:	86 95       	lsr	r24
     f4c:	86 95       	lsr	r24
     f4e:	86 95       	lsr	r24
     f50:	13 96       	adiw	r26, 0x03	; 3
     f52:	9c 91       	ld	r25, X
     f54:	13 97       	sbiw	r26, 0x03	; 3
     f56:	e0 e2       	ldi	r30, 0x20	; 32
     f58:	9e 9f       	mul	r25, r30
     f5a:	80 0d       	add	r24, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	80 93 f3 00 	sts	0x00F3, r24
     f62:	12 96       	adiw	r26, 0x02	; 2
     f64:	8c 91       	ld	r24, X
     f66:	12 97       	sbiw	r26, 0x02	; 2
     f68:	82 95       	swap	r24
     f6a:	88 0f       	add	r24, r24
     f6c:	80 7e       	andi	r24, 0xE0	; 224
     f6e:	80 93 f2 00 	sts	0x00F2, r24
     f72:	ef ee       	ldi	r30, 0xEF	; 239
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 7e       	andi	r24, 0xEF	; 239
     f7a:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f7c:	8f ef       	ldi	r24, 0xFF	; 255
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	9b 81       	ldd	r25, Y+3	; 0x03
     f82:	92 95       	swap	r25
     f84:	96 95       	lsr	r25
     f86:	97 70       	andi	r25, 0x07	; 7
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	88 0f       	add	r24, r24
     f8c:	88 0f       	add	r24, r24
     f8e:	88 0f       	add	r24, r24
     f90:	89 0f       	add	r24, r25
     f92:	80 93 f7 00 	sts	0x00F7, r24
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	92 95       	swap	r25
     f9a:	96 95       	lsr	r25
     f9c:	97 70       	andi	r25, 0x07	; 7
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	88 0f       	add	r24, r24
     fa2:	88 0f       	add	r24, r24
     fa4:	88 0f       	add	r24, r24
     fa6:	89 0f       	add	r24, r25
     fa8:	80 93 f6 00 	sts	0x00F6, r24
     fac:	99 81       	ldd	r25, Y+1	; 0x01
     fae:	92 95       	swap	r25
     fb0:	96 95       	lsr	r25
     fb2:	97 70       	andi	r25, 0x07	; 7
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	88 0f       	add	r24, r24
     fb8:	88 0f       	add	r24, r24
     fba:	88 0f       	add	r24, r24
     fbc:	89 0f       	add	r24, r25
     fbe:	80 93 f5 00 	sts	0x00F5, r24
     fc2:	29 81       	ldd	r18, Y+1	; 0x01
     fc4:	22 0f       	add	r18, r18
     fc6:	22 0f       	add	r18, r18
     fc8:	22 0f       	add	r18, r18
     fca:	84 ef       	ldi	r24, 0xF4	; 244
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	fc 01       	movw	r30, r24
     fd0:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     fd2:	ef ee       	ldi	r30, 0xEF	; 239
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	30 81       	ld	r19, Z
     fd8:	16 96       	adiw	r26, 0x06	; 6
     fda:	2c 91       	ld	r18, X
     fdc:	23 2b       	or	r18, r19
     fde:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     fe0:	dc 01       	movw	r26, r24
     fe2:	2c 91       	ld	r18, X
     fe4:	2b 7f       	andi	r18, 0xFB	; 251
     fe6:	2c 93       	st	X, r18
          Can_set_idemsk();
     fe8:	2c 91       	ld	r18, X
     fea:	21 60       	ori	r18, 0x01	; 1
     fec:	2c 93       	st	X, r18
          Can_config_rx();       
     fee:	80 81       	ld	r24, Z
     ff0:	8f 73       	andi	r24, 0x3F	; 63
     ff2:	80 83       	st	Z, r24
     ff4:	80 81       	ld	r24, Z
     ff6:	80 68       	ori	r24, 0x80	; 128
     ff8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     ffc:	78 c2       	rjmp	.+1264   	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ffe:	1b 96       	adiw	r26, 0x0b	; 11
    1000:	8c 91       	ld	r24, X
    1002:	1b 97       	sbiw	r26, 0x0b	; 11
    1004:	88 23       	and	r24, r24
    1006:	d9 f1       	breq	.+118    	; 0x107e <__stack+0x77f>
    1008:	14 96       	adiw	r26, 0x04	; 4
    100a:	9c 91       	ld	r25, X
    100c:	14 97       	sbiw	r26, 0x04	; 4
    100e:	92 95       	swap	r25
    1010:	96 95       	lsr	r25
    1012:	97 70       	andi	r25, 0x07	; 7
    1014:	15 96       	adiw	r26, 0x05	; 5
    1016:	8c 91       	ld	r24, X
    1018:	15 97       	sbiw	r26, 0x05	; 5
    101a:	88 0f       	add	r24, r24
    101c:	88 0f       	add	r24, r24
    101e:	88 0f       	add	r24, r24
    1020:	89 0f       	add	r24, r25
    1022:	80 93 f3 00 	sts	0x00F3, r24
    1026:	13 96       	adiw	r26, 0x03	; 3
    1028:	9c 91       	ld	r25, X
    102a:	13 97       	sbiw	r26, 0x03	; 3
    102c:	92 95       	swap	r25
    102e:	96 95       	lsr	r25
    1030:	97 70       	andi	r25, 0x07	; 7
    1032:	14 96       	adiw	r26, 0x04	; 4
    1034:	8c 91       	ld	r24, X
    1036:	14 97       	sbiw	r26, 0x04	; 4
    1038:	88 0f       	add	r24, r24
    103a:	88 0f       	add	r24, r24
    103c:	88 0f       	add	r24, r24
    103e:	89 0f       	add	r24, r25
    1040:	80 93 f2 00 	sts	0x00F2, r24
    1044:	12 96       	adiw	r26, 0x02	; 2
    1046:	9c 91       	ld	r25, X
    1048:	12 97       	sbiw	r26, 0x02	; 2
    104a:	92 95       	swap	r25
    104c:	96 95       	lsr	r25
    104e:	97 70       	andi	r25, 0x07	; 7
    1050:	13 96       	adiw	r26, 0x03	; 3
    1052:	8c 91       	ld	r24, X
    1054:	13 97       	sbiw	r26, 0x03	; 3
    1056:	88 0f       	add	r24, r24
    1058:	88 0f       	add	r24, r24
    105a:	88 0f       	add	r24, r24
    105c:	89 0f       	add	r24, r25
    105e:	80 93 f1 00 	sts	0x00F1, r24
    1062:	12 96       	adiw	r26, 0x02	; 2
    1064:	8c 91       	ld	r24, X
    1066:	12 97       	sbiw	r26, 0x02	; 2
    1068:	88 0f       	add	r24, r24
    106a:	88 0f       	add	r24, r24
    106c:	88 0f       	add	r24, r24
    106e:	80 93 f0 00 	sts	0x00F0, r24
    1072:	ef ee       	ldi	r30, 0xEF	; 239
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 61       	ori	r24, 0x10	; 16
    107a:	80 83       	st	Z, r24
    107c:	1c c0       	rjmp	.+56     	; 0x10b6 <__stack+0x7b7>
          else              { Can_set_std_id(cmd->id.std);}
    107e:	12 96       	adiw	r26, 0x02	; 2
    1080:	8c 91       	ld	r24, X
    1082:	12 97       	sbiw	r26, 0x02	; 2
    1084:	86 95       	lsr	r24
    1086:	86 95       	lsr	r24
    1088:	86 95       	lsr	r24
    108a:	13 96       	adiw	r26, 0x03	; 3
    108c:	9c 91       	ld	r25, X
    108e:	13 97       	sbiw	r26, 0x03	; 3
    1090:	e0 e2       	ldi	r30, 0x20	; 32
    1092:	9e 9f       	mul	r25, r30
    1094:	80 0d       	add	r24, r0
    1096:	11 24       	eor	r1, r1
    1098:	80 93 f3 00 	sts	0x00F3, r24
    109c:	12 96       	adiw	r26, 0x02	; 2
    109e:	8c 91       	ld	r24, X
    10a0:	12 97       	sbiw	r26, 0x02	; 2
    10a2:	82 95       	swap	r24
    10a4:	88 0f       	add	r24, r24
    10a6:	80 7e       	andi	r24, 0xE0	; 224
    10a8:	80 93 f2 00 	sts	0x00F2, r24
    10ac:	ef ee       	ldi	r30, 0xEF	; 239
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 7e       	andi	r24, 0xEF	; 239
    10b4:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	92 95       	swap	r25
    10be:	96 95       	lsr	r25
    10c0:	97 70       	andi	r25, 0x07	; 7
    10c2:	8c 81       	ldd	r24, Y+4	; 0x04
    10c4:	88 0f       	add	r24, r24
    10c6:	88 0f       	add	r24, r24
    10c8:	88 0f       	add	r24, r24
    10ca:	89 0f       	add	r24, r25
    10cc:	80 93 f7 00 	sts	0x00F7, r24
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	92 95       	swap	r25
    10d4:	96 95       	lsr	r25
    10d6:	97 70       	andi	r25, 0x07	; 7
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 0f       	add	r24, r24
    10dc:	88 0f       	add	r24, r24
    10de:	88 0f       	add	r24, r24
    10e0:	89 0f       	add	r24, r25
    10e2:	80 93 f6 00 	sts	0x00F6, r24
    10e6:	99 81       	ldd	r25, Y+1	; 0x01
    10e8:	92 95       	swap	r25
    10ea:	96 95       	lsr	r25
    10ec:	97 70       	andi	r25, 0x07	; 7
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	88 0f       	add	r24, r24
    10f2:	88 0f       	add	r24, r24
    10f4:	88 0f       	add	r24, r24
    10f6:	89 0f       	add	r24, r25
    10f8:	80 93 f5 00 	sts	0x00F5, r24
    10fc:	29 81       	ldd	r18, Y+1	; 0x01
    10fe:	22 0f       	add	r18, r18
    1100:	22 0f       	add	r18, r18
    1102:	22 0f       	add	r18, r18
    1104:	84 ef       	ldi	r24, 0xF4	; 244
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    110c:	ef ee       	ldi	r30, 0xEF	; 239
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	30 81       	ld	r19, Z
    1112:	16 96       	adiw	r26, 0x06	; 6
    1114:	2c 91       	ld	r18, X
    1116:	16 97       	sbiw	r26, 0x06	; 6
    1118:	23 2b       	or	r18, r19
    111a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    111c:	1a 96       	adiw	r26, 0x0a	; 10
    111e:	1c 92       	st	X, r1
    1120:	dc 01       	movw	r26, r24
    1122:	2c 91       	ld	r18, X
    1124:	24 60       	ori	r18, 0x04	; 4
    1126:	2c 93       	st	X, r18
    1128:	a0 ef       	ldi	r26, 0xF0	; 240
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	2c 91       	ld	r18, X
    112e:	2b 7f       	andi	r18, 0xFB	; 251
    1130:	2c 93       	st	X, r18
          Can_set_idemsk();
    1132:	dc 01       	movw	r26, r24
    1134:	2c 91       	ld	r18, X
    1136:	21 60       	ori	r18, 0x01	; 1
    1138:	2c 93       	st	X, r18
          Can_config_rx();       
    113a:	80 81       	ld	r24, Z
    113c:	8f 73       	andi	r24, 0x3F	; 63
    113e:	80 83       	st	Z, r24
    1140:	80 81       	ld	r24, Z
    1142:	80 68       	ori	r24, 0x80	; 128
    1144:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1146:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1148:	d2 c1       	rjmp	.+932    	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    114a:	1b 96       	adiw	r26, 0x0b	; 11
    114c:	8c 91       	ld	r24, X
    114e:	1b 97       	sbiw	r26, 0x0b	; 11
    1150:	88 23       	and	r24, r24
    1152:	d9 f1       	breq	.+118    	; 0x11ca <__stack+0x8cb>
    1154:	14 96       	adiw	r26, 0x04	; 4
    1156:	9c 91       	ld	r25, X
    1158:	14 97       	sbiw	r26, 0x04	; 4
    115a:	92 95       	swap	r25
    115c:	96 95       	lsr	r25
    115e:	97 70       	andi	r25, 0x07	; 7
    1160:	15 96       	adiw	r26, 0x05	; 5
    1162:	8c 91       	ld	r24, X
    1164:	15 97       	sbiw	r26, 0x05	; 5
    1166:	88 0f       	add	r24, r24
    1168:	88 0f       	add	r24, r24
    116a:	88 0f       	add	r24, r24
    116c:	89 0f       	add	r24, r25
    116e:	80 93 f3 00 	sts	0x00F3, r24
    1172:	13 96       	adiw	r26, 0x03	; 3
    1174:	9c 91       	ld	r25, X
    1176:	13 97       	sbiw	r26, 0x03	; 3
    1178:	92 95       	swap	r25
    117a:	96 95       	lsr	r25
    117c:	97 70       	andi	r25, 0x07	; 7
    117e:	14 96       	adiw	r26, 0x04	; 4
    1180:	8c 91       	ld	r24, X
    1182:	14 97       	sbiw	r26, 0x04	; 4
    1184:	88 0f       	add	r24, r24
    1186:	88 0f       	add	r24, r24
    1188:	88 0f       	add	r24, r24
    118a:	89 0f       	add	r24, r25
    118c:	80 93 f2 00 	sts	0x00F2, r24
    1190:	12 96       	adiw	r26, 0x02	; 2
    1192:	9c 91       	ld	r25, X
    1194:	12 97       	sbiw	r26, 0x02	; 2
    1196:	92 95       	swap	r25
    1198:	96 95       	lsr	r25
    119a:	97 70       	andi	r25, 0x07	; 7
    119c:	13 96       	adiw	r26, 0x03	; 3
    119e:	8c 91       	ld	r24, X
    11a0:	13 97       	sbiw	r26, 0x03	; 3
    11a2:	88 0f       	add	r24, r24
    11a4:	88 0f       	add	r24, r24
    11a6:	88 0f       	add	r24, r24
    11a8:	89 0f       	add	r24, r25
    11aa:	80 93 f1 00 	sts	0x00F1, r24
    11ae:	12 96       	adiw	r26, 0x02	; 2
    11b0:	8c 91       	ld	r24, X
    11b2:	12 97       	sbiw	r26, 0x02	; 2
    11b4:	88 0f       	add	r24, r24
    11b6:	88 0f       	add	r24, r24
    11b8:	88 0f       	add	r24, r24
    11ba:	80 93 f0 00 	sts	0x00F0, r24
    11be:	ef ee       	ldi	r30, 0xEF	; 239
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	80 61       	ori	r24, 0x10	; 16
    11c6:	80 83       	st	Z, r24
    11c8:	1c c0       	rjmp	.+56     	; 0x1202 <__stack+0x903>
          else              { Can_set_std_id(cmd->id.std);}
    11ca:	12 96       	adiw	r26, 0x02	; 2
    11cc:	8c 91       	ld	r24, X
    11ce:	12 97       	sbiw	r26, 0x02	; 2
    11d0:	86 95       	lsr	r24
    11d2:	86 95       	lsr	r24
    11d4:	86 95       	lsr	r24
    11d6:	13 96       	adiw	r26, 0x03	; 3
    11d8:	9c 91       	ld	r25, X
    11da:	13 97       	sbiw	r26, 0x03	; 3
    11dc:	e0 e2       	ldi	r30, 0x20	; 32
    11de:	9e 9f       	mul	r25, r30
    11e0:	80 0d       	add	r24, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	80 93 f3 00 	sts	0x00F3, r24
    11e8:	12 96       	adiw	r26, 0x02	; 2
    11ea:	8c 91       	ld	r24, X
    11ec:	12 97       	sbiw	r26, 0x02	; 2
    11ee:	82 95       	swap	r24
    11f0:	88 0f       	add	r24, r24
    11f2:	80 7e       	andi	r24, 0xE0	; 224
    11f4:	80 93 f2 00 	sts	0x00F2, r24
    11f8:	ef ee       	ldi	r30, 0xEF	; 239
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 7e       	andi	r24, 0xEF	; 239
    1200:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1202:	8f ef       	ldi	r24, 0xFF	; 255
    1204:	89 83       	std	Y+1, r24	; 0x01
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	92 95       	swap	r25
    120a:	96 95       	lsr	r25
    120c:	97 70       	andi	r25, 0x07	; 7
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	88 0f       	add	r24, r24
    1212:	88 0f       	add	r24, r24
    1214:	88 0f       	add	r24, r24
    1216:	89 0f       	add	r24, r25
    1218:	80 93 f7 00 	sts	0x00F7, r24
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	92 95       	swap	r25
    1220:	96 95       	lsr	r25
    1222:	97 70       	andi	r25, 0x07	; 7
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	88 0f       	add	r24, r24
    1228:	88 0f       	add	r24, r24
    122a:	88 0f       	add	r24, r24
    122c:	89 0f       	add	r24, r25
    122e:	80 93 f6 00 	sts	0x00F6, r24
    1232:	99 81       	ldd	r25, Y+1	; 0x01
    1234:	92 95       	swap	r25
    1236:	96 95       	lsr	r25
    1238:	97 70       	andi	r25, 0x07	; 7
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	88 0f       	add	r24, r24
    123e:	88 0f       	add	r24, r24
    1240:	88 0f       	add	r24, r24
    1242:	89 0f       	add	r24, r25
    1244:	80 93 f5 00 	sts	0x00F5, r24
    1248:	29 81       	ldd	r18, Y+1	; 0x01
    124a:	22 0f       	add	r18, r18
    124c:	22 0f       	add	r18, r18
    124e:	22 0f       	add	r18, r18
    1250:	84 ef       	ldi	r24, 0xF4	; 244
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1258:	ef ee       	ldi	r30, 0xEF	; 239
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	30 81       	ld	r19, Z
    125e:	16 96       	adiw	r26, 0x06	; 6
    1260:	2c 91       	ld	r18, X
    1262:	16 97       	sbiw	r26, 0x06	; 6
    1264:	23 2b       	or	r18, r19
    1266:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1268:	21 e0       	ldi	r18, 0x01	; 1
    126a:	1a 96       	adiw	r26, 0x0a	; 10
    126c:	2c 93       	st	X, r18
    126e:	dc 01       	movw	r26, r24
    1270:	2c 91       	ld	r18, X
    1272:	24 60       	ori	r18, 0x04	; 4
    1274:	2c 93       	st	X, r18
    1276:	a0 ef       	ldi	r26, 0xF0	; 240
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	2c 91       	ld	r18, X
    127c:	24 60       	ori	r18, 0x04	; 4
    127e:	2c 93       	st	X, r18
          Can_clear_rplv();
    1280:	20 81       	ld	r18, Z
    1282:	2f 7d       	andi	r18, 0xDF	; 223
    1284:	20 83       	st	Z, r18
          Can_set_idemsk();
    1286:	dc 01       	movw	r26, r24
    1288:	2c 91       	ld	r18, X
    128a:	21 60       	ori	r18, 0x01	; 1
    128c:	2c 93       	st	X, r18
          Can_config_rx();       
    128e:	80 81       	ld	r24, Z
    1290:	8f 73       	andi	r24, 0x3F	; 63
    1292:	80 83       	st	Z, r24
    1294:	80 81       	ld	r24, Z
    1296:	80 68       	ori	r24, 0x80	; 128
    1298:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    129a:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    129c:	28 c1       	rjmp	.+592    	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	8a ef       	ldi	r24, 0xFA	; 250
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	17 96       	adiw	r26, 0x07	; 7
    12a6:	ed 91       	ld	r30, X+
    12a8:	fc 91       	ld	r31, X
    12aa:	18 97       	sbiw	r26, 0x08	; 8
    12ac:	e2 0f       	add	r30, r18
    12ae:	f1 1d       	adc	r31, r1
    12b0:	30 81       	ld	r19, Z
    12b2:	fc 01       	movw	r30, r24
    12b4:	30 83       	st	Z, r19
    12b6:	2f 5f       	subi	r18, 0xFF	; 255
    12b8:	16 96       	adiw	r26, 0x06	; 6
    12ba:	3c 91       	ld	r19, X
    12bc:	16 97       	sbiw	r26, 0x06	; 6
    12be:	23 17       	cp	r18, r19
    12c0:	88 f3       	brcs	.-30     	; 0x12a4 <__stack+0x9a5>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    12c2:	19 82       	std	Y+1, r1	; 0x01
    12c4:	9b 81       	ldd	r25, Y+3	; 0x03
    12c6:	92 95       	swap	r25
    12c8:	96 95       	lsr	r25
    12ca:	97 70       	andi	r25, 0x07	; 7
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	88 0f       	add	r24, r24
    12d0:	88 0f       	add	r24, r24
    12d2:	88 0f       	add	r24, r24
    12d4:	89 0f       	add	r24, r25
    12d6:	80 93 f7 00 	sts	0x00F7, r24
    12da:	9a 81       	ldd	r25, Y+2	; 0x02
    12dc:	92 95       	swap	r25
    12de:	96 95       	lsr	r25
    12e0:	97 70       	andi	r25, 0x07	; 7
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 0f       	add	r24, r24
    12e6:	88 0f       	add	r24, r24
    12e8:	88 0f       	add	r24, r24
    12ea:	89 0f       	add	r24, r25
    12ec:	80 93 f6 00 	sts	0x00F6, r24
    12f0:	99 81       	ldd	r25, Y+1	; 0x01
    12f2:	92 95       	swap	r25
    12f4:	96 95       	lsr	r25
    12f6:	97 70       	andi	r25, 0x07	; 7
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 0f       	add	r24, r24
    12fc:	88 0f       	add	r24, r24
    12fe:	88 0f       	add	r24, r24
    1300:	89 0f       	add	r24, r25
    1302:	80 93 f5 00 	sts	0x00F5, r24
    1306:	29 81       	ldd	r18, Y+1	; 0x01
    1308:	22 0f       	add	r18, r18
    130a:	22 0f       	add	r18, r18
    130c:	22 0f       	add	r18, r18
    130e:	84 ef       	ldi	r24, 0xF4	; 244
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1316:	ef ee       	ldi	r30, 0xEF	; 239
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	30 81       	ld	r19, Z
    131c:	16 96       	adiw	r26, 0x06	; 6
    131e:	2c 91       	ld	r18, X
    1320:	16 97       	sbiw	r26, 0x06	; 6
    1322:	23 2b       	or	r18, r19
    1324:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1326:	21 e0       	ldi	r18, 0x01	; 1
    1328:	1a 96       	adiw	r26, 0x0a	; 10
    132a:	2c 93       	st	X, r18
    132c:	dc 01       	movw	r26, r24
    132e:	2c 91       	ld	r18, X
    1330:	24 60       	ori	r18, 0x04	; 4
    1332:	2c 93       	st	X, r18
    1334:	a0 ef       	ldi	r26, 0xF0	; 240
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	2c 91       	ld	r18, X
    133a:	24 60       	ori	r18, 0x04	; 4
    133c:	2c 93       	st	X, r18
          Can_set_rplv();
    133e:	20 81       	ld	r18, Z
    1340:	20 62       	ori	r18, 0x20	; 32
    1342:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1344:	dc 01       	movw	r26, r24
    1346:	2c 91       	ld	r18, X
    1348:	2e 7f       	andi	r18, 0xFE	; 254
    134a:	2c 93       	st	X, r18
          Can_config_rx();       
    134c:	80 81       	ld	r24, Z
    134e:	8f 73       	andi	r24, 0x3F	; 63
    1350:	80 83       	st	Z, r24
    1352:	80 81       	ld	r24, Z
    1354:	80 68       	ori	r24, 0x80	; 128
    1356:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1358:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    135a:	c9 c0       	rjmp	.+402    	; 0x14ee <__stack+0xbef>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    135c:	1b 96       	adiw	r26, 0x0b	; 11
    135e:	8c 91       	ld	r24, X
    1360:	1b 97       	sbiw	r26, 0x0b	; 11
    1362:	88 23       	and	r24, r24
    1364:	d9 f1       	breq	.+118    	; 0x13dc <__stack+0xadd>
    1366:	14 96       	adiw	r26, 0x04	; 4
    1368:	9c 91       	ld	r25, X
    136a:	14 97       	sbiw	r26, 0x04	; 4
    136c:	92 95       	swap	r25
    136e:	96 95       	lsr	r25
    1370:	97 70       	andi	r25, 0x07	; 7
    1372:	15 96       	adiw	r26, 0x05	; 5
    1374:	8c 91       	ld	r24, X
    1376:	15 97       	sbiw	r26, 0x05	; 5
    1378:	88 0f       	add	r24, r24
    137a:	88 0f       	add	r24, r24
    137c:	88 0f       	add	r24, r24
    137e:	89 0f       	add	r24, r25
    1380:	80 93 f3 00 	sts	0x00F3, r24
    1384:	13 96       	adiw	r26, 0x03	; 3
    1386:	9c 91       	ld	r25, X
    1388:	13 97       	sbiw	r26, 0x03	; 3
    138a:	92 95       	swap	r25
    138c:	96 95       	lsr	r25
    138e:	97 70       	andi	r25, 0x07	; 7
    1390:	14 96       	adiw	r26, 0x04	; 4
    1392:	8c 91       	ld	r24, X
    1394:	14 97       	sbiw	r26, 0x04	; 4
    1396:	88 0f       	add	r24, r24
    1398:	88 0f       	add	r24, r24
    139a:	88 0f       	add	r24, r24
    139c:	89 0f       	add	r24, r25
    139e:	80 93 f2 00 	sts	0x00F2, r24
    13a2:	12 96       	adiw	r26, 0x02	; 2
    13a4:	9c 91       	ld	r25, X
    13a6:	12 97       	sbiw	r26, 0x02	; 2
    13a8:	92 95       	swap	r25
    13aa:	96 95       	lsr	r25
    13ac:	97 70       	andi	r25, 0x07	; 7
    13ae:	13 96       	adiw	r26, 0x03	; 3
    13b0:	8c 91       	ld	r24, X
    13b2:	13 97       	sbiw	r26, 0x03	; 3
    13b4:	88 0f       	add	r24, r24
    13b6:	88 0f       	add	r24, r24
    13b8:	88 0f       	add	r24, r24
    13ba:	89 0f       	add	r24, r25
    13bc:	80 93 f1 00 	sts	0x00F1, r24
    13c0:	12 96       	adiw	r26, 0x02	; 2
    13c2:	8c 91       	ld	r24, X
    13c4:	12 97       	sbiw	r26, 0x02	; 2
    13c6:	88 0f       	add	r24, r24
    13c8:	88 0f       	add	r24, r24
    13ca:	88 0f       	add	r24, r24
    13cc:	80 93 f0 00 	sts	0x00F0, r24
    13d0:	ef ee       	ldi	r30, 0xEF	; 239
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 61       	ori	r24, 0x10	; 16
    13d8:	80 83       	st	Z, r24
    13da:	1c c0       	rjmp	.+56     	; 0x1414 <__stack+0xb15>
          else              { Can_set_std_id(cmd->id.std);}
    13dc:	12 96       	adiw	r26, 0x02	; 2
    13de:	8c 91       	ld	r24, X
    13e0:	12 97       	sbiw	r26, 0x02	; 2
    13e2:	86 95       	lsr	r24
    13e4:	86 95       	lsr	r24
    13e6:	86 95       	lsr	r24
    13e8:	13 96       	adiw	r26, 0x03	; 3
    13ea:	9c 91       	ld	r25, X
    13ec:	13 97       	sbiw	r26, 0x03	; 3
    13ee:	e0 e2       	ldi	r30, 0x20	; 32
    13f0:	9e 9f       	mul	r25, r30
    13f2:	80 0d       	add	r24, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	80 93 f3 00 	sts	0x00F3, r24
    13fa:	12 96       	adiw	r26, 0x02	; 2
    13fc:	8c 91       	ld	r24, X
    13fe:	12 97       	sbiw	r26, 0x02	; 2
    1400:	82 95       	swap	r24
    1402:	88 0f       	add	r24, r24
    1404:	80 7e       	andi	r24, 0xE0	; 224
    1406:	80 93 f2 00 	sts	0x00F2, r24
    140a:	ef ee       	ldi	r30, 0xEF	; 239
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	8f 7e       	andi	r24, 0xEF	; 239
    1412:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1414:	16 96       	adiw	r26, 0x06	; 6
    1416:	8c 91       	ld	r24, X
    1418:	16 97       	sbiw	r26, 0x06	; 6
    141a:	88 23       	and	r24, r24
    141c:	91 f0       	breq	.+36     	; 0x1442 <__stack+0xb43>
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	8a ef       	ldi	r24, 0xFA	; 250
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	17 96       	adiw	r26, 0x07	; 7
    1426:	ed 91       	ld	r30, X+
    1428:	fc 91       	ld	r31, X
    142a:	18 97       	sbiw	r26, 0x08	; 8
    142c:	e2 0f       	add	r30, r18
    142e:	f1 1d       	adc	r31, r1
    1430:	30 81       	ld	r19, Z
    1432:	fc 01       	movw	r30, r24
    1434:	30 83       	st	Z, r19
    1436:	2f 5f       	subi	r18, 0xFF	; 255
    1438:	16 96       	adiw	r26, 0x06	; 6
    143a:	3c 91       	ld	r19, X
    143c:	16 97       	sbiw	r26, 0x06	; 6
    143e:	23 17       	cp	r18, r19
    1440:	88 f3       	brcs	.-30     	; 0x1424 <__stack+0xb25>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	9b 81       	ldd	r25, Y+3	; 0x03
    1448:	92 95       	swap	r25
    144a:	96 95       	lsr	r25
    144c:	97 70       	andi	r25, 0x07	; 7
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	88 0f       	add	r24, r24
    1452:	88 0f       	add	r24, r24
    1454:	88 0f       	add	r24, r24
    1456:	89 0f       	add	r24, r25
    1458:	80 93 f7 00 	sts	0x00F7, r24
    145c:	9a 81       	ldd	r25, Y+2	; 0x02
    145e:	92 95       	swap	r25
    1460:	96 95       	lsr	r25
    1462:	97 70       	andi	r25, 0x07	; 7
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	88 0f       	add	r24, r24
    1468:	88 0f       	add	r24, r24
    146a:	88 0f       	add	r24, r24
    146c:	89 0f       	add	r24, r25
    146e:	80 93 f6 00 	sts	0x00F6, r24
    1472:	99 81       	ldd	r25, Y+1	; 0x01
    1474:	92 95       	swap	r25
    1476:	96 95       	lsr	r25
    1478:	97 70       	andi	r25, 0x07	; 7
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	88 0f       	add	r24, r24
    147e:	88 0f       	add	r24, r24
    1480:	88 0f       	add	r24, r24
    1482:	89 0f       	add	r24, r25
    1484:	80 93 f5 00 	sts	0x00F5, r24
    1488:	29 81       	ldd	r18, Y+1	; 0x01
    148a:	22 0f       	add	r18, r18
    148c:	22 0f       	add	r18, r18
    148e:	22 0f       	add	r18, r18
    1490:	84 ef       	ldi	r24, 0xF4	; 244
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1498:	ef ee       	ldi	r30, 0xEF	; 239
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	30 81       	ld	r19, Z
    149e:	16 96       	adiw	r26, 0x06	; 6
    14a0:	2c 91       	ld	r18, X
    14a2:	16 97       	sbiw	r26, 0x06	; 6
    14a4:	23 2b       	or	r18, r19
    14a6:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    14a8:	21 e0       	ldi	r18, 0x01	; 1
    14aa:	1a 96       	adiw	r26, 0x0a	; 10
    14ac:	2c 93       	st	X, r18
    14ae:	dc 01       	movw	r26, r24
    14b0:	2c 91       	ld	r18, X
    14b2:	24 60       	ori	r18, 0x04	; 4
    14b4:	2c 93       	st	X, r18
    14b6:	a0 ef       	ldi	r26, 0xF0	; 240
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	2c 91       	ld	r18, X
    14bc:	24 60       	ori	r18, 0x04	; 4
    14be:	2c 93       	st	X, r18
          Can_set_rplv();
    14c0:	20 81       	ld	r18, Z
    14c2:	20 62       	ori	r18, 0x20	; 32
    14c4:	20 83       	st	Z, r18
          Can_set_idemsk();
    14c6:	dc 01       	movw	r26, r24
    14c8:	2c 91       	ld	r18, X
    14ca:	21 60       	ori	r18, 0x01	; 1
    14cc:	2c 93       	st	X, r18
          Can_config_rx();       
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 73       	andi	r24, 0x3F	; 63
    14d2:	80 83       	st	Z, r24
    14d4:	80 81       	ld	r24, Z
    14d6:	80 68       	ori	r24, 0x80	; 128
    14d8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    14da:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    14dc:	08 c0       	rjmp	.+16     	; 0x14ee <__stack+0xbef>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    14de:	19 96       	adiw	r26, 0x09	; 9
    14e0:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    14e2:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <__stack+0xbef>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    14e6:	8f e1       	ldi	r24, 0x1F	; 31
    14e8:	19 96       	adiw	r26, 0x09	; 9
    14ea:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    14ee:	0f 90       	pop	r0
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    14fc:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    14fe:	88 23       	and	r24, r24
    1500:	09 f4       	brne	.+2      	; 0x1504 <can_get_status+0xe>
    1502:	d5 c0       	rjmp	.+426    	; 0x16ae <can_get_status+0x1b8>
    1504:	8f 31       	cpi	r24, 0x1F	; 31
    1506:	09 f4       	brne	.+2      	; 0x150a <can_get_status+0x14>
    1508:	d4 c0       	rjmp	.+424    	; 0x16b2 <can_get_status+0x1bc>
    150a:	8f 3f       	cpi	r24, 0xFF	; 255
    150c:	09 f4       	brne	.+2      	; 0x1510 <can_get_status+0x1a>
    150e:	d3 c0       	rjmp	.+422    	; 0x16b6 <can_get_status+0x1c0>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    1510:	62 95       	swap	r22
    1512:	60 7f       	andi	r22, 0xF0	; 240
    1514:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    1518:	0e 94 12 04 	call	0x824	; 0x824 <can_get_mob_status>
    
    switch (a_status)
    151c:	80 32       	cpi	r24, 0x20	; 32
    151e:	61 f0       	breq	.+24     	; 0x1538 <can_get_status+0x42>
    1520:	20 f4       	brcc	.+8      	; 0x152a <can_get_status+0x34>
    1522:	88 23       	and	r24, r24
    1524:	09 f4       	brne	.+2      	; 0x1528 <can_get_status+0x32>
    1526:	c9 c0       	rjmp	.+402    	; 0x16ba <can_get_status+0x1c4>
    1528:	b8 c0       	rjmp	.+368    	; 0x169a <can_get_status+0x1a4>
    152a:	80 34       	cpi	r24, 0x40	; 64
    152c:	09 f4       	brne	.+2      	; 0x1530 <can_get_status+0x3a>
    152e:	aa c0       	rjmp	.+340    	; 0x1684 <can_get_status+0x18e>
    1530:	80 3a       	cpi	r24, 0xA0	; 160
    1532:	09 f4       	brne	.+2      	; 0x1536 <can_get_status+0x40>
    1534:	4e c0       	rjmp	.+156    	; 0x15d2 <can_get_status+0xdc>
    1536:	b1 c0       	rjmp	.+354    	; 0x169a <can_get_status+0x1a4>
        case MOB_RX_COMPLETED:
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
            cmd->ctrl.rtr = Can_get_rtr();
    1538:	80 91 f0 00 	lds	r24, 0x00F0
    153c:	82 fb       	bst	r24, 2
    153e:	88 27       	eor	r24, r24
    1540:	80 f9       	bld	r24, 0
    1542:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1544:	80 91 ef 00 	lds	r24, 0x00EF
    1548:	84 ff       	sbrs	r24, 4
    154a:	2d c0       	rjmp	.+90     	; 0x15a6 <can_get_status+0xb0>
            {
	            cmd->ctrl.ide = 1; // extended frame
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    1550:	e3 ef       	ldi	r30, 0xF3	; 243
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	86 95       	lsr	r24
    1558:	86 95       	lsr	r24
    155a:	86 95       	lsr	r24
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	a2 ef       	ldi	r26, 0xF2	; 242
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	8c 91       	ld	r24, X
    1564:	90 81       	ld	r25, Z
    1566:	86 95       	lsr	r24
    1568:	86 95       	lsr	r24
    156a:	86 95       	lsr	r24
    156c:	20 e2       	ldi	r18, 0x20	; 32
    156e:	92 9f       	mul	r25, r18
    1570:	80 0d       	add	r24, r0
    1572:	11 24       	eor	r1, r1
    1574:	8c 83       	std	Y+4, r24	; 0x04
    1576:	e1 ef       	ldi	r30, 0xF1	; 241
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	9c 91       	ld	r25, X
    157e:	86 95       	lsr	r24
    1580:	86 95       	lsr	r24
    1582:	86 95       	lsr	r24
    1584:	20 e2       	ldi	r18, 0x20	; 32
    1586:	92 9f       	mul	r25, r18
    1588:	80 0d       	add	r24, r0
    158a:	11 24       	eor	r1, r1
    158c:	8b 83       	std	Y+3, r24	; 0x03
    158e:	80 91 f0 00 	lds	r24, 0x00F0
    1592:	90 81       	ld	r25, Z
    1594:	86 95       	lsr	r24
    1596:	86 95       	lsr	r24
    1598:	86 95       	lsr	r24
    159a:	20 e2       	ldi	r18, 0x20	; 32
    159c:	92 9f       	mul	r25, r18
    159e:	80 0d       	add	r24, r0
    15a0:	11 24       	eor	r1, r1
    15a2:	8a 83       	std	Y+2, r24	; 0x02
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <can_get_status+0xbe>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    15a6:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    15a8:	e3 ef       	ldi	r30, 0xF3	; 243
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 91 f2 00 	lds	r24, 0x00F2
    15b2:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    15b4:	80 e2       	ldi	r24, 0x20	; 32
    15b6:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    15b8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ba:	98 85       	ldd	r25, Y+8	; 0x08
    15bc:	0e 94 28 04 	call	0x850	; 0x850 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    15c0:	ef ee       	ldi	r30, 0xEF	; 239
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8f 73       	andi	r24, 0x3F	; 63
    15c8:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    15ca:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    15ce:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    15d0:	75 c0       	rjmp	.+234    	; 0x16bc <can_get_status+0x1c6>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    15d2:	80 91 f0 00 	lds	r24, 0x00F0
    15d6:	82 fb       	bst	r24, 2
    15d8:	88 27       	eor	r24, r24
    15da:	80 f9       	bld	r24, 0
    15dc:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    15de:	80 91 ef 00 	lds	r24, 0x00EF
    15e2:	84 ff       	sbrs	r24, 4
    15e4:	2d c0       	rjmp	.+90     	; 0x1640 <can_get_status+0x14a>
            {
                cmd->ctrl.ide = 1; // extended frame
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    15ea:	e3 ef       	ldi	r30, 0xF3	; 243
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	86 95       	lsr	r24
    15f2:	86 95       	lsr	r24
    15f4:	86 95       	lsr	r24
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	a2 ef       	ldi	r26, 0xF2	; 242
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	8c 91       	ld	r24, X
    15fe:	90 81       	ld	r25, Z
    1600:	86 95       	lsr	r24
    1602:	86 95       	lsr	r24
    1604:	86 95       	lsr	r24
    1606:	20 e2       	ldi	r18, 0x20	; 32
    1608:	92 9f       	mul	r25, r18
    160a:	80 0d       	add	r24, r0
    160c:	11 24       	eor	r1, r1
    160e:	8c 83       	std	Y+4, r24	; 0x04
    1610:	e1 ef       	ldi	r30, 0xF1	; 241
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	9c 91       	ld	r25, X
    1618:	86 95       	lsr	r24
    161a:	86 95       	lsr	r24
    161c:	86 95       	lsr	r24
    161e:	20 e2       	ldi	r18, 0x20	; 32
    1620:	92 9f       	mul	r25, r18
    1622:	80 0d       	add	r24, r0
    1624:	11 24       	eor	r1, r1
    1626:	8b 83       	std	Y+3, r24	; 0x03
    1628:	80 91 f0 00 	lds	r24, 0x00F0
    162c:	90 81       	ld	r25, Z
    162e:	86 95       	lsr	r24
    1630:	86 95       	lsr	r24
    1632:	86 95       	lsr	r24
    1634:	20 e2       	ldi	r18, 0x20	; 32
    1636:	92 9f       	mul	r25, r18
    1638:	80 0d       	add	r24, r0
    163a:	11 24       	eor	r1, r1
    163c:	8a 83       	std	Y+2, r24	; 0x02
    163e:	13 c0       	rjmp	.+38     	; 0x1666 <can_get_status+0x170>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1640:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1642:	e3 ef       	ldi	r30, 0xF3	; 243
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	82 95       	swap	r24
    164a:	86 95       	lsr	r24
    164c:	87 70       	andi	r24, 0x07	; 7
    164e:	8b 83       	std	Y+3, r24	; 0x03
    1650:	80 91 f2 00 	lds	r24, 0x00F2
    1654:	90 81       	ld	r25, Z
    1656:	99 0f       	add	r25, r25
    1658:	99 0f       	add	r25, r25
    165a:	99 0f       	add	r25, r25
    165c:	82 95       	swap	r24
    165e:	86 95       	lsr	r24
    1660:	87 70       	andi	r24, 0x07	; 7
    1662:	89 0f       	add	r24, r25
    1664:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1666:	80 ea       	ldi	r24, 0xA0	; 160
    1668:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    166a:	8f 81       	ldd	r24, Y+7	; 0x07
    166c:	98 85       	ldd	r25, Y+8	; 0x08
    166e:	0e 94 28 04 	call	0x850	; 0x850 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1672:	ef ee       	ldi	r30, 0xEF	; 239
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 73       	andi	r24, 0x3F	; 63
    167a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    167c:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    1680:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1682:	1c c0       	rjmp	.+56     	; 0x16bc <can_get_status+0x1c6>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1684:	80 e4       	ldi	r24, 0x40	; 64
    1686:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1688:	ef ee       	ldi	r30, 0xEF	; 239
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8f 73       	andi	r24, 0x3F	; 63
    1690:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1692:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1696:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1698:	11 c0       	rjmp	.+34     	; 0x16bc <can_get_status+0x1c6>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    169a:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    169c:	ef ee       	ldi	r30, 0xEF	; 239
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 73       	andi	r24, 0x3F	; 63
    16a4:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    16a6:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    16aa:	82 e0       	ldi	r24, 0x02	; 2
            break;
    16ac:	07 c0       	rjmp	.+14     	; 0x16bc <can_get_status+0x1c6>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <can_get_status+0x1c6>
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <can_get_status+0x1c6>
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <can_get_status+0x1c6>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <send_tm_transaction_response>:
}

// Helper
static void send_tm_transaction_response(uint8_t req_by, uint8_t code)
{			
	send_arr[7] = (SELF_ID << 4)|req_by;
    16c2:	80 61       	ori	r24, 0x10	; 16
    16c4:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = TM_TRANSACTION_RESP;
    16ce:	83 e1       	ldi	r24, 0x13	; 19
    16d0:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    16d4:	80 91 26 02 	lds	r24, 0x0226
    16d8:	80 93 d9 01 	sts	0x01D9, r24
	send_arr[3] = 0;
    16dc:	10 92 d8 01 	sts	0x01D8, r1
	send_arr[2] = 0;
    16e0:	10 92 d7 01 	sts	0x01D7, r1
	send_arr[1] = 0;
    16e4:	10 92 d6 01 	sts	0x01D6, r1
	send_arr[0] = code;
    16e8:	60 93 d5 01 	sts	0x01D5, r22
	can_send_message(&(send_arr[0]), CAN1_MB7);
    16ec:	61 e1       	ldi	r22, 0x11	; 17
    16ee:	85 ed       	ldi	r24, 0xD5	; 213
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
    16f6:	08 95       	ret

000016f8 <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    16f8:	83 e1       	ldi	r24, 0x13	; 19
    16fa:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = RESPONSE;
    1704:	84 e0       	ldi	r24, 0x04	; 4
    1706:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    170a:	80 91 26 02 	lds	r24, 0x0226
    170e:	80 93 d9 01 	sts	0x01D9, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1712:	61 e1       	ldi	r22, 0x11	; 17
    1714:	85 ed       	ldi	r24, 0xD5	; 213
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
	send_now = 0;
    171c:	10 92 33 02 	sts	0x0233, r1
    1720:	08 95       	ret

00001722 <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|HK_TASK_ID;
    1722:	84 e1       	ldi	r24, 0x14	; 20
    1724:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	80 93 db 01 	sts	0x01DB, r24
	send_arr[4] = CURRENT_MINUTE;
    172e:	80 91 26 02 	lds	r24, 0x0226
    1732:	80 93 d9 01 	sts	0x01D9, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1736:	6e e0       	ldi	r22, 0x0E	; 14
    1738:	85 ed       	ldi	r24, 0xD5	; 213
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
	send_hk = 0;
    1740:	10 92 e0 02 	sts	0x02E0, r1
    1744:	08 95       	ret

00001746 <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	00 d0       	rcall	.+0      	; 0x1750 <send_sensor_data+0xa>
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[4];
    1754:	10 91 19 02 	lds	r17, 0x0219
	req_by = data_req_arr[7] >> 4;
    1758:	00 91 1c 02 	lds	r16, 0x021C
    175c:	02 95       	swap	r16
    175e:	0f 70       	andi	r16, 0x0F	; 15
	send_arr[3] = 0;
    1760:	10 92 d8 01 	sts	0x01D8, r1
	send_arr[2] = 0;
    1764:	10 92 d7 01 	sts	0x01D7, r1
	send_arr[1] = 0;
    1768:	10 92 d6 01 	sts	0x01D6, r1
	send_arr[0] = 0;
    176c:	10 92 d5 01 	sts	0x01D5, r1
	
	if(sensor_name == EPS_TEMP)
    1770:	1a 30       	cpi	r17, 0x0A	; 10
    1772:	71 f4       	brne	.+28     	; 0x1790 <send_sensor_data+0x4a>
	{
		spi_retrieve_temp(&high, &low);
    1774:	be 01       	movw	r22, r28
    1776:	6e 5f       	subi	r22, 0xFE	; 254
    1778:	7f 4f       	sbci	r23, 0xFF	; 255
    177a:	ce 01       	movw	r24, r28
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	0e 94 17 13 	call	0x262e	; 0x262e <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	80 93 d6 01 	sts	0x01D6, r24
		send_arr[0] = low;
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	80 93 d5 01 	sts	0x01D5, r24
    178e:	0e c0       	rjmp	.+28     	; 0x17ac <send_sensor_data+0x66>
	}
	
	if(sensor_name == PANELX_V)
    1790:	11 30       	cpi	r17, 0x01	; 1
    1792:	29 f4       	brne	.+10     	; 0x179e <send_sensor_data+0x58>
	{
		send_arr[0] = pxv;
    1794:	80 91 12 03 	lds	r24, 0x0312
    1798:	80 93 d5 01 	sts	0x01D5, r24
    179c:	0e c0       	rjmp	.+28     	; 0x17ba <send_sensor_data+0x74>
	}
	if(sensor_name == PANELX_I)
    179e:	12 30       	cpi	r17, 0x02	; 2
    17a0:	29 f4       	brne	.+10     	; 0x17ac <send_sensor_data+0x66>
	{
		send_arr[0] = pxi;
    17a2:	80 91 14 03 	lds	r24, 0x0314
    17a6:	80 93 d5 01 	sts	0x01D5, r24
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_V)
    17ac:	13 30       	cpi	r17, 0x03	; 3
    17ae:	29 f4       	brne	.+10     	; 0x17ba <send_sensor_data+0x74>
	{
		send_arr[0] = pyv;
    17b0:	80 91 32 02 	lds	r24, 0x0232
    17b4:	80 93 d5 01 	sts	0x01D5, r24
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_I)
    17ba:	14 30       	cpi	r17, 0x04	; 4
    17bc:	21 f4       	brne	.+8      	; 0x17c6 <send_sensor_data+0x80>
	{
		send_arr[0] = pyi;
    17be:	80 91 11 01 	lds	r24, 0x0111
    17c2:	80 93 d5 01 	sts	0x01D5, r24
	//}
	//if(sensor_name == OBC_I)
	//{
	//}

	send_arr[7] = (SELF_ID << 4)|req_by;
    17c6:	00 61       	ori	r16, 0x10	; 16
    17c8:	00 93 dc 01 	sts	0x01DC, r16
	send_arr[6] = MT_DATA;
    17cc:	10 92 db 01 	sts	0x01DB, r1
	send_arr[5] = sensor_name;
    17d0:	10 93 da 01 	sts	0x01DA, r17
	send_arr[4] = CURRENT_MINUTE;			
    17d4:	80 91 26 02 	lds	r24, 0x0226
    17d8:	80 93 d9 01 	sts	0x01D9, r24
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    17dc:	6a e0       	ldi	r22, 0x0A	; 10
    17de:	85 ed       	ldi	r24, 0xD5	; 213
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
	send_data = 0;
    17e6:	10 92 05 03 	sts	0x0305, r1
	
	return;
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	08 95       	ret

000017f8 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    17f8:	83 e1       	ldi	r24, 0x13	; 19
    17fa:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_DATA;
    17fe:	10 92 db 01 	sts	0x01DB, r1
	send_arr[5] = COMS_PACKET;
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1808:	80 91 26 02 	lds	r24, 0x0226
    180c:	80 93 d9 01 	sts	0x01D9, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    1810:	80 91 ef 03 	lds	r24, 0x03EF
    1814:	80 93 d5 01 	sts	0x01D5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1818:	6a e0       	ldi	r22, 0x0A	; 10
    181a:	85 ed       	ldi	r24, 0xD5	; 213
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
	msg_received = 0;
    1822:	10 92 e2 03 	sts	0x03E2, r1
    1826:	08 95       	ret

00001828 <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    1828:	90 91 dc 03 	lds	r25, 0x03DC
	read_ptr = read_arr[0];
    182c:	e0 91 d9 03 	lds	r30, 0x03D9
    1830:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    1832:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    1834:	20 91 e0 03 	lds	r18, 0x03E0
    1838:	20 61       	ori	r18, 0x10	; 16
    183a:	20 93 dc 01 	sts	0x01DC, r18
	send_arr[6] = MT_COM;
    183e:	22 e0       	ldi	r18, 0x02	; 2
    1840:	20 93 db 01 	sts	0x01DB, r18
	send_arr[5] = ACK_READ;
    1844:	26 e0       	ldi	r18, 0x06	; 6
    1846:	20 93 da 01 	sts	0x01DA, r18
	send_arr[4] = CURRENT_MINUTE;
    184a:	20 91 26 02 	lds	r18, 0x0226
    184e:	20 93 d9 01 	sts	0x01D9, r18
	send_arr[3] = passkey;
    1852:	90 93 d8 01 	sts	0x01D8, r25
	send_arr[0] = read_val;
    1856:	80 93 d5 01 	sts	0x01D5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    185a:	61 e1       	ldi	r22, 0x11	; 17
    185c:	85 ed       	ldi	r24, 0xD5	; 213
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
	read_response = 0;
    1864:	10 92 3b 02 	sts	0x023B, r1
    1868:	08 95       	ret

0000186a <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    186a:	80 91 0b 01 	lds	r24, 0x010B
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    186e:	20 91 08 01 	lds	r18, 0x0108
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    1872:	90 91 e0 03 	lds	r25, 0x03E0
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    1876:	e0 91 09 01 	lds	r30, 0x0109
    187a:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    187c:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    187e:	90 61       	ori	r25, 0x10	; 16
    1880:	90 93 dc 01 	sts	0x01DC, r25
	send_arr[6] = MT_COM;
    1884:	92 e0       	ldi	r25, 0x02	; 2
    1886:	90 93 db 01 	sts	0x01DB, r25
	send_arr[5] = ACK_WRITE;
    188a:	98 e0       	ldi	r25, 0x08	; 8
    188c:	90 93 da 01 	sts	0x01DA, r25
	send_arr[4] = CURRENT_MINUTE;
    1890:	90 91 26 02 	lds	r25, 0x0226
    1894:	90 93 d9 01 	sts	0x01D9, r25
	send_arr[3] = passkey;
    1898:	80 93 d8 01 	sts	0x01D8, r24
	send_arr[0] = ret_val;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	80 93 d5 01 	sts	0x01D5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    18a2:	61 e1       	ldi	r22, 0x11	; 17
    18a4:	85 ed       	ldi	r24, 0xD5	; 213
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
	write_response = 0;
    18ac:	10 92 fa 01 	sts	0x01FA, r1
    18b0:	08 95       	ret

000018b2 <set_sensor_high>:

void set_sensor_high(void)
{
	uint8_t sensor_name, req_by;
	uint16_t high = 0;
	sensor_name = sensh_arr[3];
    18b2:	20 91 fe 01 	lds	r18, 0x01FE
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    18b6:	2a 30       	cpi	r18, 0x0A	; 10
    18b8:	69 f4       	brne	.+26     	; 0x18d4 <set_sensor_high+0x22>
	{
		epstemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18ba:	80 91 fc 01 	lds	r24, 0x01FC
    18be:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_high |= (high << 8);
    18c0:	98 2f       	mov	r25, r24
    18c2:	88 27       	eor	r24, r24
	sensor_name = sensh_arr[3];
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_high = sensh_arr[0];
    18c4:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		epstemp_high |= (high << 8);
    18c8:	83 2b       	or	r24, r19
    18ca:	90 93 de 01 	sts	0x01DE, r25
    18ce:	80 93 dd 01 	sts	0x01DD, r24
    18d2:	1e c0       	rjmp	.+60     	; 0x1910 <set_sensor_high+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    18d4:	21 30       	cpi	r18, 0x01	; 1
    18d6:	69 f4       	brne	.+26     	; 0x18f2 <set_sensor_high+0x40>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18d8:	80 91 fc 01 	lds	r24, 0x01FC
    18dc:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);		
    18de:	98 2f       	mov	r25, r24
    18e0:	88 27       	eor	r24, r24
		epstemp_high |= (high << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_high = sensh_arr[0];
    18e2:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);		
    18e6:	83 2b       	or	r24, r19
    18e8:	90 93 29 02 	sts	0x0229, r25
    18ec:	80 93 28 02 	sts	0x0228, r24
    18f0:	1e c0       	rjmp	.+60     	; 0x192e <set_sensor_high+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    18f2:	22 30       	cpi	r18, 0x02	; 2
    18f4:	69 f4       	brne	.+26     	; 0x1910 <set_sensor_high+0x5e>
	{
		pxi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18f6:	80 91 fc 01 	lds	r24, 0x01FC
    18fa:	90 e0       	ldi	r25, 0x00	; 0
		pxi_high |= (high << 8);
    18fc:	98 2f       	mov	r25, r24
    18fe:	88 27       	eor	r24, r24
		pxv_high |= (high << 8);		
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_high = sensh_arr[0];
    1900:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
    1904:	83 2b       	or	r24, r19
    1906:	90 93 3e 03 	sts	0x033E, r25
    190a:	80 93 3d 03 	sts	0x033D, r24
    190e:	1e c0       	rjmp	.+60     	; 0x194c <set_sensor_high+0x9a>
	}
	if(sensor_name == PANELY_V)
    1910:	23 30       	cpi	r18, 0x03	; 3
    1912:	69 f4       	brne	.+26     	; 0x192e <set_sensor_high+0x7c>
	{
		pyv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1914:	80 91 fc 01 	lds	r24, 0x01FC
    1918:	90 e0       	ldi	r25, 0x00	; 0
		pyv_high |= (high << 8);
    191a:	98 2f       	mov	r25, r24
    191c:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_high = sensh_arr[0];
    191e:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
    1922:	83 2b       	or	r24, r19
    1924:	90 93 bd 01 	sts	0x01BD, r25
    1928:	80 93 bc 01 	sts	0x01BC, r24
    192c:	1e c0       	rjmp	.+60     	; 0x196a <set_sensor_high+0xb8>
	}
	if(sensor_name == PANELY_I)
    192e:	24 30       	cpi	r18, 0x04	; 4
    1930:	69 f4       	brne	.+26     	; 0x194c <set_sensor_high+0x9a>
	{
		pyi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1932:	80 91 fc 01 	lds	r24, 0x01FC
    1936:	90 e0       	ldi	r25, 0x00	; 0
		pyi_high |= (high << 8);
    1938:	98 2f       	mov	r25, r24
    193a:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_high = sensh_arr[0];
    193c:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
    1940:	83 2b       	or	r24, r19
    1942:	90 93 d8 03 	sts	0x03D8, r25
    1946:	80 93 d7 03 	sts	0x03D7, r24
    194a:	1e c0       	rjmp	.+60     	; 0x1988 <set_sensor_high+0xd6>
	}
	if(sensor_name == BATTM_V)
    194c:	25 30       	cpi	r18, 0x05	; 5
    194e:	69 f4       	brne	.+26     	; 0x196a <set_sensor_high+0xb8>
	{
		battmv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1950:	80 91 fc 01 	lds	r24, 0x01FC
    1954:	90 e0       	ldi	r25, 0x00	; 0
		battmv_high |= (high << 8);
    1956:	98 2f       	mov	r25, r24
    1958:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_high = sensh_arr[0];
    195a:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
    195e:	83 2b       	or	r24, r19
    1960:	90 93 25 02 	sts	0x0225, r25
    1964:	80 93 24 02 	sts	0x0224, r24
    1968:	1e c0       	rjmp	.+60     	; 0x19a6 <set_sensor_high+0xf4>
	}
	if(sensor_name == BATT_V)
    196a:	26 30       	cpi	r18, 0x06	; 6
    196c:	69 f4       	brne	.+26     	; 0x1988 <set_sensor_high+0xd6>
	{
		battv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    196e:	80 91 fc 01 	lds	r24, 0x01FC
    1972:	90 e0       	ldi	r25, 0x00	; 0
		battv_high |= (high << 8);
    1974:	98 2f       	mov	r25, r24
    1976:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_high = sensh_arr[0];
    1978:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
    197c:	83 2b       	or	r24, r19
    197e:	90 93 16 03 	sts	0x0316, r25
    1982:	80 93 15 03 	sts	0x0315, r24
    1986:	1e c0       	rjmp	.+60     	; 0x19c4 <set_sensor_high+0x112>
	}
	if(sensor_name == BATTIN_I)
    1988:	27 30       	cpi	r18, 0x07	; 7
    198a:	69 f4       	brne	.+26     	; 0x19a6 <set_sensor_high+0xf4>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    198c:	80 91 fc 01 	lds	r24, 0x01FC
    1990:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);
    1992:	98 2f       	mov	r25, r24
    1994:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
	}
	if(sensor_name == BATTIN_I)
	{
		pxv_high = sensh_arr[0];
    1996:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
    199a:	83 2b       	or	r24, r19
    199c:	90 93 29 02 	sts	0x0229, r25
    19a0:	80 93 28 02 	sts	0x0228, r24
    19a4:	1e c0       	rjmp	.+60     	; 0x19e2 <set_sensor_high+0x130>
	}
	if(sensor_name == BATTOUT_I)
    19a6:	28 30       	cpi	r18, 0x08	; 8
    19a8:	69 f4       	brne	.+26     	; 0x19c4 <set_sensor_high+0x112>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19aa:	80 91 fc 01 	lds	r24, 0x01FC
    19ae:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);
    19b0:	98 2f       	mov	r25, r24
    19b2:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
	}
	if(sensor_name == BATTOUT_I)
	{
		pxv_high = sensh_arr[0];
    19b4:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
    19b8:	83 2b       	or	r24, r19
    19ba:	90 93 29 02 	sts	0x0229, r25
    19be:	80 93 28 02 	sts	0x0228, r24
    19c2:	1e c0       	rjmp	.+60     	; 0x1a00 <set_sensor_high+0x14e>
	}
	if(sensor_name == COMS_V)
    19c4:	2b 30       	cpi	r18, 0x0B	; 11
    19c6:	69 f4       	brne	.+26     	; 0x19e2 <set_sensor_high+0x130>
	{
		comsv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19c8:	80 91 fc 01 	lds	r24, 0x01FC
    19cc:	90 e0       	ldi	r25, 0x00	; 0
		comsv_high |= (high << 8);
    19ce:	98 2f       	mov	r25, r24
    19d0:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_high = sensh_arr[0];
    19d2:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
    19d6:	83 2b       	or	r24, r19
    19d8:	90 93 14 02 	sts	0x0214, r25
    19dc:	80 93 13 02 	sts	0x0213, r24
    19e0:	1e c0       	rjmp	.+60     	; 0x1a1e <set_sensor_high+0x16c>
	}
	if(sensor_name == COMS_I)
    19e2:	2c 30       	cpi	r18, 0x0C	; 12
    19e4:	69 f4       	brne	.+26     	; 0x1a00 <set_sensor_high+0x14e>
	{
		comsi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19e6:	80 91 fc 01 	lds	r24, 0x01FC
    19ea:	90 e0       	ldi	r25, 0x00	; 0
		comsi_high |= (high << 8);
    19ec:	98 2f       	mov	r25, r24
    19ee:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_high = sensh_arr[0];
    19f0:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
    19f4:	83 2b       	or	r24, r19
    19f6:	90 93 ea 01 	sts	0x01EA, r25
    19fa:	80 93 e9 01 	sts	0x01E9, r24
    19fe:	1e c0       	rjmp	.+60     	; 0x1a3c <set_sensor_high+0x18a>
	}
	if(sensor_name == PAY_V)
    1a00:	2d 30       	cpi	r18, 0x0D	; 13
    1a02:	69 f4       	brne	.+26     	; 0x1a1e <set_sensor_high+0x16c>
	{
		payv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a04:	80 91 fc 01 	lds	r24, 0x01FC
    1a08:	90 e0       	ldi	r25, 0x00	; 0
		payv_high |= (high << 8);
    1a0a:	98 2f       	mov	r25, r24
    1a0c:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_high = sensh_arr[0];
    1a0e:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
    1a12:	83 2b       	or	r24, r19
    1a14:	90 93 b3 01 	sts	0x01B3, r25
    1a18:	80 93 b2 01 	sts	0x01B2, r24
    1a1c:	1e c0       	rjmp	.+60     	; 0x1a5a <set_sensor_high+0x1a8>
	}
	if(sensor_name == PAY_I)
    1a1e:	2e 30       	cpi	r18, 0x0E	; 14
    1a20:	69 f4       	brne	.+26     	; 0x1a3c <set_sensor_high+0x18a>
	{
		payi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a22:	80 91 fc 01 	lds	r24, 0x01FC
    1a26:	90 e0       	ldi	r25, 0x00	; 0
		payi_high |= (high << 8);
    1a28:	98 2f       	mov	r25, r24
    1a2a:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_high = sensh_arr[0];
    1a2c:	20 91 fb 01 	lds	r18, 0x01FB
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
    1a30:	82 2b       	or	r24, r18
    1a32:	90 93 28 03 	sts	0x0328, r25
    1a36:	80 93 27 03 	sts	0x0327, r24
    1a3a:	1d c0       	rjmp	.+58     	; 0x1a76 <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_V)
    1a3c:	2f 30       	cpi	r18, 0x0F	; 15
    1a3e:	69 f4       	brne	.+26     	; 0x1a5a <set_sensor_high+0x1a8>
	{
		obcv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a40:	80 91 fc 01 	lds	r24, 0x01FC
    1a44:	90 e0       	ldi	r25, 0x00	; 0
		obcv_high |= (high << 8);
    1a46:	98 2f       	mov	r25, r24
    1a48:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_high = sensh_arr[0];
    1a4a:	20 91 fb 01 	lds	r18, 0x01FB
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
    1a4e:	82 2b       	or	r24, r18
    1a50:	90 93 f9 01 	sts	0x01F9, r25
    1a54:	80 93 f8 01 	sts	0x01F8, r24
    1a58:	0e c0       	rjmp	.+28     	; 0x1a76 <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_I)
    1a5a:	20 31       	cpi	r18, 0x10	; 16
    1a5c:	61 f4       	brne	.+24     	; 0x1a76 <set_sensor_high+0x1c4>
	{
		obci_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a5e:	80 91 fc 01 	lds	r24, 0x01FC
    1a62:	90 e0       	ldi	r25, 0x00	; 0
		obci_high |= (high << 8);
    1a64:	98 2f       	mov	r25, r24
    1a66:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_high = sensh_arr[0];
    1a68:	20 91 fb 01 	lds	r18, 0x01FB
		high = (uint16_t)sensh_arr[1];
		obci_high |= (high << 8);
    1a6c:	82 2b       	or	r24, r18
    1a6e:	90 93 e2 02 	sts	0x02E2, r25
    1a72:	80 93 e1 02 	sts	0x02E1, r24
	}
	
	set_sens_h = 0;
    1a76:	10 92 02 03 	sts	0x0302, r1
    1a7a:	08 95       	ret

00001a7c <set_sensor_low>:

void set_sensor_low(void)
{
	uint8_t sensor_name, req_by;
	uint16_t low = 0;
	sensor_name = sensl_arr[3];
    1a7c:	20 91 37 03 	lds	r18, 0x0337
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    1a80:	2a 30       	cpi	r18, 0x0A	; 10
    1a82:	69 f4       	brne	.+26     	; 0x1a9e <set_sensor_low+0x22>
	{
		epstemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a84:	80 91 35 03 	lds	r24, 0x0335
    1a88:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_low |= (low << 8);
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	88 27       	eor	r24, r24
	sensor_name = sensl_arr[3];
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_low = sensl_arr[0];
    1a8e:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		epstemp_low |= (low << 8);
    1a92:	83 2b       	or	r24, r19
    1a94:	90 93 e0 01 	sts	0x01E0, r25
    1a98:	80 93 df 01 	sts	0x01DF, r24
    1a9c:	1e c0       	rjmp	.+60     	; 0x1ada <set_sensor_low+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    1a9e:	21 30       	cpi	r18, 0x01	; 1
    1aa0:	69 f4       	brne	.+26     	; 0x1abc <set_sensor_low+0x40>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1aa2:	80 91 35 03 	lds	r24, 0x0335
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1aa8:	98 2f       	mov	r25, r24
    1aaa:	88 27       	eor	r24, r24
		epstemp_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_low = sensl_arr[0];
    1aac:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1ab0:	83 2b       	or	r24, r19
    1ab2:	90 93 e4 02 	sts	0x02E4, r25
    1ab6:	80 93 e3 02 	sts	0x02E3, r24
    1aba:	1e c0       	rjmp	.+60     	; 0x1af8 <set_sensor_low+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	69 f4       	brne	.+26     	; 0x1ada <set_sensor_low+0x5e>
	{
		pxi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1ac0:	80 91 35 03 	lds	r24, 0x0335
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
		pxi_low |= (low << 8);
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	88 27       	eor	r24, r24
		pxv_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_low = sensl_arr[0];
    1aca:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
    1ace:	83 2b       	or	r24, r19
    1ad0:	90 93 f7 01 	sts	0x01F7, r25
    1ad4:	80 93 f6 01 	sts	0x01F6, r24
    1ad8:	1e c0       	rjmp	.+60     	; 0x1b16 <set_sensor_low+0x9a>
	}
	if(sensor_name == PANELY_V)
    1ada:	23 30       	cpi	r18, 0x03	; 3
    1adc:	69 f4       	brne	.+26     	; 0x1af8 <set_sensor_low+0x7c>
	{
		pyv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1ade:	80 91 35 03 	lds	r24, 0x0335
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
		pyv_low |= (low << 8);
    1ae4:	98 2f       	mov	r25, r24
    1ae6:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_low = sensl_arr[0];
    1ae8:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
    1aec:	83 2b       	or	r24, r19
    1aee:	90 93 e6 02 	sts	0x02E6, r25
    1af2:	80 93 e5 02 	sts	0x02E5, r24
    1af6:	1e c0       	rjmp	.+60     	; 0x1b34 <set_sensor_low+0xb8>
	}
	if(sensor_name == PANELY_I)
    1af8:	24 30       	cpi	r18, 0x04	; 4
    1afa:	69 f4       	brne	.+26     	; 0x1b16 <set_sensor_low+0x9a>
	{
		pyi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1afc:	80 91 35 03 	lds	r24, 0x0335
    1b00:	90 e0       	ldi	r25, 0x00	; 0
		pyi_low |= (low << 8);
    1b02:	98 2f       	mov	r25, r24
    1b04:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_low = sensl_arr[0];
    1b06:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
    1b0a:	83 2b       	or	r24, r19
    1b0c:	90 93 f9 02 	sts	0x02F9, r25
    1b10:	80 93 f8 02 	sts	0x02F8, r24
    1b14:	1e c0       	rjmp	.+60     	; 0x1b52 <set_sensor_low+0xd6>
	}
	if(sensor_name == BATTM_V)
    1b16:	25 30       	cpi	r18, 0x05	; 5
    1b18:	69 f4       	brne	.+26     	; 0x1b34 <set_sensor_low+0xb8>
	{
		battmv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b1a:	80 91 35 03 	lds	r24, 0x0335
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
		battmv_low |= (low << 8);
    1b20:	98 2f       	mov	r25, r24
    1b22:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_low = sensl_arr[0];
    1b24:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
    1b28:	83 2b       	or	r24, r19
    1b2a:	90 93 21 02 	sts	0x0221, r25
    1b2e:	80 93 20 02 	sts	0x0220, r24
    1b32:	1e c0       	rjmp	.+60     	; 0x1b70 <set_sensor_low+0xf4>
	}
	if(sensor_name == BATT_V)
    1b34:	26 30       	cpi	r18, 0x06	; 6
    1b36:	69 f4       	brne	.+26     	; 0x1b52 <set_sensor_low+0xd6>
	{
		battv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b38:	80 91 35 03 	lds	r24, 0x0335
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
		battv_low |= (low << 8);
    1b3e:	98 2f       	mov	r25, r24
    1b40:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_low = sensl_arr[0];
    1b42:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
    1b46:	83 2b       	or	r24, r19
    1b48:	90 93 15 01 	sts	0x0115, r25
    1b4c:	80 93 14 01 	sts	0x0114, r24
    1b50:	1e c0       	rjmp	.+60     	; 0x1b8e <set_sensor_low+0x112>
	}
	if(sensor_name == BATTIN_I)
    1b52:	27 30       	cpi	r18, 0x07	; 7
    1b54:	69 f4       	brne	.+26     	; 0x1b70 <set_sensor_low+0xf4>
	{
		battin_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b56:	80 91 35 03 	lds	r24, 0x0335
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
		battin_low |= (low << 8);
    1b5c:	98 2f       	mov	r25, r24
    1b5e:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
	}
	if(sensor_name == BATTIN_I)
	{
		battin_low = sensl_arr[0];
    1b60:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		battin_low |= (low << 8);
    1b64:	83 2b       	or	r24, r19
    1b66:	90 93 de 02 	sts	0x02DE, r25
    1b6a:	80 93 dd 02 	sts	0x02DD, r24
    1b6e:	1e c0       	rjmp	.+60     	; 0x1bac <set_sensor_low+0x130>
	}
	if(sensor_name == BATTOUT_I)
    1b70:	28 30       	cpi	r18, 0x08	; 8
    1b72:	69 f4       	brne	.+26     	; 0x1b8e <set_sensor_low+0x112>
	{
		battout_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b74:	80 91 35 03 	lds	r24, 0x0335
    1b78:	90 e0       	ldi	r25, 0x00	; 0
		battout_low |= (low << 8);
    1b7a:	98 2f       	mov	r25, r24
    1b7c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battin_low |= (low << 8);
	}
	if(sensor_name == BATTOUT_I)
	{
		battout_low = sensl_arr[0];
    1b7e:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		battout_low |= (low << 8);
    1b82:	83 2b       	or	r24, r19
    1b84:	90 93 18 03 	sts	0x0318, r25
    1b88:	80 93 17 03 	sts	0x0317, r24
    1b8c:	1e c0       	rjmp	.+60     	; 0x1bca <set_sensor_low+0x14e>
	}
	if(sensor_name == COMS_V)
    1b8e:	2b 30       	cpi	r18, 0x0B	; 11
    1b90:	69 f4       	brne	.+26     	; 0x1bac <set_sensor_low+0x130>
	{
		comsv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b92:	80 91 35 03 	lds	r24, 0x0335
    1b96:	90 e0       	ldi	r25, 0x00	; 0
		comsv_low |= (low << 8);
    1b98:	98 2f       	mov	r25, r24
    1b9a:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battout_low |= (low << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_low = sensl_arr[0];
    1b9c:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
    1ba0:	83 2b       	or	r24, r19
    1ba2:	90 93 1f 02 	sts	0x021F, r25
    1ba6:	80 93 1e 02 	sts	0x021E, r24
    1baa:	1e c0       	rjmp	.+60     	; 0x1be8 <set_sensor_low+0x16c>
	}
	if(sensor_name == COMS_I)
    1bac:	2c 30       	cpi	r18, 0x0C	; 12
    1bae:	69 f4       	brne	.+26     	; 0x1bca <set_sensor_low+0x14e>
	{
		comsi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bb0:	80 91 35 03 	lds	r24, 0x0335
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
		comsi_low |= (low << 8);
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_low = sensl_arr[0];
    1bba:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
    1bbe:	83 2b       	or	r24, r19
    1bc0:	90 93 25 03 	sts	0x0325, r25
    1bc4:	80 93 24 03 	sts	0x0324, r24
    1bc8:	1e c0       	rjmp	.+60     	; 0x1c06 <set_sensor_low+0x18a>
	}
	if(sensor_name == PAY_V)
    1bca:	2d 30       	cpi	r18, 0x0D	; 13
    1bcc:	69 f4       	brne	.+26     	; 0x1be8 <set_sensor_low+0x16c>
	{
		payv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bce:	80 91 35 03 	lds	r24, 0x0335
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
		payv_low |= (low << 8);
    1bd4:	98 2f       	mov	r25, r24
    1bd6:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_low = sensl_arr[0];
    1bd8:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
    1bdc:	83 2b       	or	r24, r19
    1bde:	90 93 17 01 	sts	0x0117, r25
    1be2:	80 93 16 01 	sts	0x0116, r24
    1be6:	1e c0       	rjmp	.+60     	; 0x1c24 <set_sensor_low+0x1a8>
	}
	if(sensor_name == PAY_I)
    1be8:	2e 30       	cpi	r18, 0x0E	; 14
    1bea:	69 f4       	brne	.+26     	; 0x1c06 <set_sensor_low+0x18a>
	{
		payi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bec:	80 91 35 03 	lds	r24, 0x0335
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
		payi_low |= (low << 8);
    1bf2:	98 2f       	mov	r25, r24
    1bf4:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_low = sensl_arr[0];
    1bf6:	20 91 34 03 	lds	r18, 0x0334
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
    1bfa:	82 2b       	or	r24, r18
    1bfc:	90 93 39 02 	sts	0x0239, r25
    1c00:	80 93 38 02 	sts	0x0238, r24
    1c04:	1d c0       	rjmp	.+58     	; 0x1c40 <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_V)
    1c06:	2f 30       	cpi	r18, 0x0F	; 15
    1c08:	69 f4       	brne	.+26     	; 0x1c24 <set_sensor_low+0x1a8>
	{
		obcv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1c0a:	80 91 35 03 	lds	r24, 0x0335
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
		obcv_low |= (low << 8);
    1c10:	98 2f       	mov	r25, r24
    1c12:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_low = sensl_arr[0];
    1c14:	20 91 34 03 	lds	r18, 0x0334
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
    1c18:	82 2b       	or	r24, r18
    1c1a:	90 93 33 03 	sts	0x0333, r25
    1c1e:	80 93 32 03 	sts	0x0332, r24
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_I)
    1c24:	20 31       	cpi	r18, 0x10	; 16
    1c26:	61 f4       	brne	.+24     	; 0x1c40 <set_sensor_low+0x1c4>
	{
		obci_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1c28:	80 91 35 03 	lds	r24, 0x0335
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
		obci_low |= (low << 8);
    1c2e:	98 2f       	mov	r25, r24
    1c30:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_low = sensl_arr[0];
    1c32:	20 91 34 03 	lds	r18, 0x0334
		low = (uint16_t)sensl_arr[1];
		obci_low |= (low << 8);
    1c36:	82 2b       	or	r24, r18
    1c38:	90 93 22 03 	sts	0x0322, r25
    1c3c:	80 93 21 03 	sts	0x0321, r24
	}
	
	set_sens_l = 0;
    1c40:	10 92 07 03 	sts	0x0307, r1
    1c44:	08 95       	ret

00001c46 <set_var>:

void set_var(void)
{
	uint8_t var_name, incom_val;
	var_name = setv_arr[3];
	incom_val  =setv_arr[0];
    1c46:	20 91 ee 01 	lds	r18, 0x01EE
	
	switch(var_name)
    1c4a:	80 91 f1 01 	lds	r24, 0x01F1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	fc 01       	movw	r30, r24
    1c52:	ea 5e       	subi	r30, 0xEA	; 234
    1c54:	f1 09       	sbc	r31, r1
    1c56:	e6 31       	cpi	r30, 0x16	; 22
    1c58:	f1 05       	cpc	r31, r1
    1c5a:	90 f4       	brcc	.+36     	; 0x1c80 <set_var+0x3a>
    1c5c:	e7 59       	subi	r30, 0x97	; 151
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__tablejump2__>
	{
		case MPPTX:
			mpptx = incom_val;
    1c64:	20 93 34 02 	sts	0x0234, r18
		case MPPTY:
			mppty = incom_val;
    1c68:	20 93 23 02 	sts	0x0223, r18
		case BALANCE_H:
			balance_h = incom_val;
    1c6c:	20 93 ec 01 	sts	0x01EC, r18
		case BALANCE_L:
			balance_l = incom_val;
    1c70:	20 93 03 02 	sts	0x0203, r18
		case SSM_CTT:
			ssm_consec_trans_timeout = incom_val;
    1c74:	20 93 3a 02 	sts	0x023A, r18
		case SSM_OGT:
			ssm_ok_go_timeout = incom_val;
    1c78:	20 93 d3 01 	sts	0x01D3, r18
		case COMS_FDIR_SIGNAL:
			if(SELF_ID == 0)
				ssm_fdir_signal = incom_val;
		case EPS_FDIR_SIGNAL:
			if(SELF_ID == 1)
				ssm_fdir_signal = incom_val;		
    1c7c:	20 93 ca 01 	sts	0x01CA, r18
		case PAY_FDIR_SIGNAL:
			if(SELF_ID == 2)
				ssm_fdir_signal = incom_val;
		default:
			set_varf = 0;
    1c80:	10 92 06 03 	sts	0x0306, r1
    1c84:	08 95       	ret

00001c86 <receive_tm_msg>:
}

void receive_tm_msg(void)
{
	uint8_t req_by, obc_seq_count;
	req_by = new_tm_msg[7] >> 4;
    1c86:	80 91 11 03 	lds	r24, 0x0311
    1c8a:	82 95       	swap	r24
    1c8c:	8f 70       	andi	r24, 0x0F	; 15
	obc_seq_count = new_tm_msg[4];
    1c8e:	90 91 0e 03 	lds	r25, 0x030E

	if(obc_seq_count > (tm_sequence_count + 1))
    1c92:	29 2f       	mov	r18, r25
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	60 91 06 01 	lds	r22, 0x0106
    1c9a:	46 2f       	mov	r20, r22
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	4f 5f       	subi	r20, 0xFF	; 255
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca2:	42 17       	cp	r20, r18
    1ca4:	53 07       	cpc	r21, r19
    1ca6:	94 f4       	brge	.+36     	; 0x1ccc <receive_tm_msg+0x46>
	{
		send_tm_transaction_response(req_by, 0xFF);		// Let the OBC know that the transaction failed.
    1ca8:	6f ef       	ldi	r22, 0xFF	; 255
    1caa:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1cae:	10 92 06 01 	sts	0x0106, r1
		new_tm_msgf = 0;
    1cb2:	10 92 36 02 	sts	0x0236, r1
		receiving_tmf = 0;
    1cb6:	10 92 29 03 	sts	0x0329, r1
    1cba:	ec e3       	ldi	r30, 0x3C	; 60
    1cbc:	f2 e0       	ldi	r31, 0x02	; 2
    1cbe:	8b ec       	ldi	r24, 0xCB	; 203
    1cc0:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1cc2:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1cc4:	e8 17       	cp	r30, r24
    1cc6:	f9 07       	cpc	r31, r25
    1cc8:	e1 f7       	brne	.-8      	; 0x1cc2 <receive_tm_msg+0x3c>
    1cca:	08 95       	ret
		new_tm_msgf = 0;
		receiving_tmf = 0;
		clear_current_tm();
		return;
	}
	if(current_tm_fullf)
    1ccc:	70 91 04 03 	lds	r23, 0x0304
    1cd0:	77 23       	and	r23, r23
    1cd2:	51 f0       	breq	.+20     	; 0x1ce8 <receive_tm_msg+0x62>
	{
		send_tm_transaction_response(req_by, 0xFF);
    1cd4:	6f ef       	ldi	r22, 0xFF	; 255
    1cd6:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1cda:	10 92 06 01 	sts	0x0106, r1
		new_tm_msgf = 0;
    1cde:	10 92 36 02 	sts	0x0236, r1
		receiving_tmf = 0;
    1ce2:	10 92 29 03 	sts	0x0329, r1
		return;
    1ce6:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
    1ce8:	91 11       	cpse	r25, r1
    1cea:	03 c0       	rjmp	.+6      	; 0x1cf2 <receive_tm_msg+0x6c>
    1cec:	66 23       	and	r22, r22
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <receive_tm_msg+0x6c>
    1cf0:	47 c0       	rjmp	.+142    	; 0x1d80 <receive_tm_msg+0xfa>
    1cf2:	24 17       	cp	r18, r20
    1cf4:	35 07       	cpc	r19, r21
    1cf6:	91 f5       	brne	.+100    	; 0x1d5c <receive_tm_msg+0xd6>
	{
		tm_sequence_count = obc_seq_count;
    1cf8:	90 93 06 01 	sts	0x0106, r25
		receiving_tmf = 1;
    1cfc:	41 e0       	ldi	r20, 0x01	; 1
    1cfe:	40 93 29 03 	sts	0x0329, r20
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1d02:	f9 01       	movw	r30, r18
    1d04:	ee 0f       	add	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	ee 0f       	add	r30, r30
    1d0a:	ff 1f       	adc	r31, r31
    1d0c:	e4 5c       	subi	r30, 0xC4	; 196
    1d0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d10:	20 91 0a 03 	lds	r18, 0x030A
    1d14:	20 83       	st	Z, r18
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1d16:	20 91 0b 03 	lds	r18, 0x030B
    1d1a:	21 83       	std	Z+1, r18	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1d1c:	20 91 0c 03 	lds	r18, 0x030C
    1d20:	22 83       	std	Z+2, r18	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1d22:	20 91 0d 03 	lds	r18, 0x030D
    1d26:	23 83       	std	Z+3, r18	; 0x03
		if(obc_seq_count == 35)
    1d28:	93 32       	cpi	r25, 0x23	; 35
    1d2a:	a9 f4       	brne	.+42     	; 0x1d56 <receive_tm_msg+0xd0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
    1d2c:	10 92 06 01 	sts	0x0106, r1
			receiving_tmf = 0;
    1d30:	10 92 29 03 	sts	0x0329, r1
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
    1d34:	91 e0       	ldi	r25, 0x01	; 1
    1d36:	90 93 04 03 	sts	0x0304, r25
    1d3a:	ec e3       	ldi	r30, 0x3C	; 60
    1d3c:	f2 e0       	ldi	r31, 0x02	; 2
    1d3e:	aa e1       	ldi	r26, 0x1A	; 26
    1d40:	b1 e0       	ldi	r27, 0x01	; 1
    1d42:	2b ec       	ldi	r18, 0xCB	; 203
    1d44:	32 e0       	ldi	r19, 0x02	; 2
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
	{
		tm_to_downlink[i] = current_tm[i];
    1d46:	91 91       	ld	r25, Z+
    1d48:	9d 93       	st	X+, r25

// This function is necessary so that we can simply trash current_tm if a new transaction fails.
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
    1d4a:	e2 17       	cp	r30, r18
    1d4c:	f3 07       	cpc	r31, r19
    1d4e:	d9 f7       	brne	.-10     	; 0x1d46 <receive_tm_msg+0xc0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
			receiving_tmf = 0;
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
			store_current_tm();										// Put current_tm[] into tm_to_downlink[]
			send_tm_transaction_response(req_by, obc_seq_count);	// Let the OBC know that the transaction succeeded.
    1d50:	63 e2       	ldi	r22, 0x23	; 35
    1d52:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <send_tm_transaction_response>
		}
		new_tm_msgf = 0;
    1d56:	10 92 36 02 	sts	0x0236, r1
		return;
    1d5a:	08 95       	ret
	}
	else
	{
		send_tm_transaction_response(req_by, 0xFF);
    1d5c:	6f ef       	ldi	r22, 0xFF	; 255
    1d5e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1d62:	10 92 06 01 	sts	0x0106, r1
		receiving_tmf = 0;
    1d66:	10 92 29 03 	sts	0x0329, r1
		new_tm_msgf = 0;
    1d6a:	10 92 36 02 	sts	0x0236, r1
    1d6e:	ec e3       	ldi	r30, 0x3C	; 60
    1d70:	f2 e0       	ldi	r31, 0x02	; 2
    1d72:	8b ec       	ldi	r24, 0xCB	; 203
    1d74:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1d76:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1d78:	e8 17       	cp	r30, r24
    1d7a:	f9 07       	cpc	r31, r25
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <receive_tm_msg+0xf0>
    1d7e:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
	{
		tm_sequence_count = obc_seq_count;
		receiving_tmf = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	80 93 29 03 	sts	0x0329, r24
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1d86:	f9 01       	movw	r30, r18
    1d88:	ee 0f       	add	r30, r30
    1d8a:	ff 1f       	adc	r31, r31
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	ff 1f       	adc	r31, r31
    1d90:	e4 5c       	subi	r30, 0xC4	; 196
    1d92:	fd 4f       	sbci	r31, 0xFD	; 253
    1d94:	80 91 0a 03 	lds	r24, 0x030A
    1d98:	80 83       	st	Z, r24
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1d9a:	80 91 0b 03 	lds	r24, 0x030B
    1d9e:	81 83       	std	Z+1, r24	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1da0:	80 91 0c 03 	lds	r24, 0x030C
    1da4:	82 83       	std	Z+2, r24	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1da6:	80 91 0d 03 	lds	r24, 0x030D
    1daa:	83 83       	std	Z+3, r24	; 0x03
    1dac:	d4 cf       	rjmp	.-88     	; 0x1d56 <receive_tm_msg+0xd0>

00001dae <alert_obc_tcp_ready>:


// Lets the OBC know that we have a TC packet ready.
void alert_obc_tcp_ready(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1dae:	8a e1       	ldi	r24, 0x1A	; 26
    1db0:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = TC_PACKET_READY;
    1dba:	81 e1       	ldi	r24, 0x11	; 17
    1dbc:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1dc0:	80 91 26 02 	lds	r24, 0x0226
    1dc4:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1dc8:	61 e1       	ldi	r22, 0x11	; 17
    1dca:	85 ed       	ldi	r24, 0xD5	; 213
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
    1dd2:	08 95       	ret

00001dd4 <send_pus_packet_tc>:
	}
	return;
}

void send_pus_packet_tc(void)
{
    1dd4:	2f 92       	push	r2
    1dd6:	3f 92       	push	r3
    1dd8:	4f 92       	push	r4
    1dda:	5f 92       	push	r5
    1ddc:	6f 92       	push	r6
    1dde:	7f 92       	push	r7
    1de0:	8f 92       	push	r8
    1de2:	9f 92       	push	r9
    1de4:	af 92       	push	r10
    1de6:	bf 92       	push	r11
    1de8:	cf 92       	push	r12
    1dea:	df 92       	push	r13
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
	uint8_t i, timeout;
	uint8_t num_transfers = PACKET_LENGTH / 4;
	tc_transfer_completef = 0;
    1df8:	10 92 09 02 	sts	0x0209, r1
	start_tc_transferf = 0;
    1dfc:	10 92 05 02 	sts	0x0205, r1
	uint8_t data[4];
	alert_obc_tcp_ready();
    1e00:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <alert_obc_tcp_ready>
	timeout = ssm_ok_go_timeout;
    1e04:	c0 91 d3 01 	lds	r28, 0x01D3
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1e08:	80 91 05 02 	lds	r24, 0x0205
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <send_pus_packet_tc+0x5a>
	{
		if(!timeout--)
    1e10:	cc 23       	and	r28, r28
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <send_pus_packet_tc+0x42>
    1e14:	8d c0       	rjmp	.+282    	; 0x1f30 <send_pus_packet_tc+0x15c>
    1e16:	03 c0       	rjmp	.+6      	; 0x1e1e <send_pus_packet_tc+0x4a>
    1e18:	c1 50       	subi	r28, 0x01	; 1
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <send_pus_packet_tc+0x4a>
    1e1c:	89 c0       	rjmp	.+274    	; 0x1f30 <send_pus_packet_tc+0x15c>
		{
			data[0] = ssm_ok_go_timeout;
			//errorREPORT(TC_OK_GO_TIMED_OUT, data);	// Let the OBC know that OK-GO timed out.
			return;
		}
		delay_us(10);
    1e1e:	8a e0       	ldi	r24, 0x0A	; 10
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 4b 13 	call	0x2696	; 0x2696 <delay_us>
	tc_transfer_completef = 0;
	start_tc_transferf = 0;
	uint8_t data[4];
	alert_obc_tcp_ready();
	timeout = ssm_ok_go_timeout;
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1e26:	80 91 05 02 	lds	r24, 0x0205
    1e2a:	88 23       	and	r24, r24
    1e2c:	a9 f3       	breq	.-22     	; 0x1e18 <send_pus_packet_tc+0x44>
			//errorREPORT(TC_OK_GO_TIMED_OUT, data);	// Let the OBC know that OK-GO timed out.
			return;
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
    1e2e:	10 92 05 02 	sts	0x0205, r1
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1e32:	80 91 09 02 	lds	r24, 0x0209
    1e36:	8f 3f       	cpi	r24, 0xFF	; 255
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <send_pus_packet_tc+0x68>
    1e3a:	7a c0       	rjmp	.+244    	; 0x1f30 <send_pus_packet_tc+0x15c>
    1e3c:	0f 2e       	mov	r0, r31
    1e3e:	f2 e4       	ldi	r31, 0x42	; 66
    1e40:	4f 2e       	mov	r4, r31
    1e42:	f3 e0       	ldi	r31, 0x03	; 3
    1e44:	5f 2e       	mov	r5, r31
    1e46:	f0 2d       	mov	r31, r0
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
	
	for(i = 0; i < num_transfers; i++)
    1e48:	31 2c       	mov	r3, r1
	{
		if(tc_transfer_completef == 0xFF)
			return;
		send_arr[0] = current_tc[(i * 4)];
    1e4a:	c5 ed       	ldi	r28, 0xD5	; 213
    1e4c:	d1 e0       	ldi	r29, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1e4e:	0f 2e       	mov	r0, r31
    1e50:	f6 ed       	ldi	r31, 0xD6	; 214
    1e52:	af 2e       	mov	r10, r31
    1e54:	f1 e0       	ldi	r31, 0x01	; 1
    1e56:	bf 2e       	mov	r11, r31
    1e58:	f0 2d       	mov	r31, r0
		send_arr[2] = current_tc[(i * 4) + 2];
    1e5a:	0f 2e       	mov	r0, r31
    1e5c:	f7 ed       	ldi	r31, 0xD7	; 215
    1e5e:	cf 2e       	mov	r12, r31
    1e60:	f1 e0       	ldi	r31, 0x01	; 1
    1e62:	df 2e       	mov	r13, r31
    1e64:	f0 2d       	mov	r31, r0
		send_arr[3] = current_tc[(i * 4) + 3];
    1e66:	0f 2e       	mov	r0, r31
    1e68:	f8 ed       	ldi	r31, 0xD8	; 216
    1e6a:	ef 2e       	mov	r14, r31
    1e6c:	f1 e0       	ldi	r31, 0x01	; 1
    1e6e:	ff 2e       	mov	r15, r31
    1e70:	f0 2d       	mov	r31, r0
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1e72:	0c ed       	ldi	r16, 0xDC	; 220
    1e74:	11 e0       	ldi	r17, 0x01	; 1
    1e76:	0f 2e       	mov	r0, r31
    1e78:	fa e1       	ldi	r31, 0x1A	; 26
    1e7a:	2f 2e       	mov	r2, r31
    1e7c:	f0 2d       	mov	r31, r0
	send_arr[6] = MT_COM;
    1e7e:	0f 2e       	mov	r0, r31
    1e80:	fb ed       	ldi	r31, 0xDB	; 219
    1e82:	8f 2e       	mov	r8, r31
    1e84:	f1 e0       	ldi	r31, 0x01	; 1
    1e86:	9f 2e       	mov	r9, r31
    1e88:	f0 2d       	mov	r31, r0
	send_arr[5] = SEND_TC;
    1e8a:	0f 2e       	mov	r0, r31
    1e8c:	fa ed       	ldi	r31, 0xDA	; 218
    1e8e:	6f 2e       	mov	r6, r31
    1e90:	f1 e0       	ldi	r31, 0x01	; 1
    1e92:	7f 2e       	mov	r7, r31
    1e94:	f0 2d       	mov	r31, r0
    1e96:	08 c0       	rjmp	.+16     	; 0x1ea8 <send_pus_packet_tc+0xd4>
    1e98:	84 e0       	ldi	r24, 0x04	; 4
    1e9a:	48 0e       	add	r4, r24
    1e9c:	51 1c       	adc	r5, r1
	}				
	start_tc_transferf = 0;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1e9e:	80 91 09 02 	lds	r24, 0x0209
    1ea2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <send_pus_packet_tc+0xd4>
    1ea6:	44 c0       	rjmp	.+136    	; 0x1f30 <send_pus_packet_tc+0x15c>
    1ea8:	f2 01       	movw	r30, r4
    1eaa:	33 97       	sbiw	r30, 0x03	; 3
			return;
		send_arr[0] = current_tc[(i * 4)];
    1eac:	80 81       	ld	r24, Z
    1eae:	88 83       	st	Y, r24
    1eb0:	31 96       	adiw	r30, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1eb2:	80 81       	ld	r24, Z
    1eb4:	f5 01       	movw	r30, r10
    1eb6:	80 83       	st	Z, r24
    1eb8:	f2 01       	movw	r30, r4
    1eba:	31 97       	sbiw	r30, 0x01	; 1
		send_arr[2] = current_tc[(i * 4) + 2];
    1ebc:	80 81       	ld	r24, Z
    1ebe:	f6 01       	movw	r30, r12
    1ec0:	80 83       	st	Z, r24
		send_arr[3] = current_tc[(i * 4) + 3];
    1ec2:	f2 01       	movw	r30, r4
    1ec4:	80 81       	ld	r24, Z
    1ec6:	f7 01       	movw	r30, r14
    1ec8:	80 83       	st	Z, r24
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1eca:	f8 01       	movw	r30, r16
    1ecc:	20 82       	st	Z, r2
	send_arr[6] = MT_COM;
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	f4 01       	movw	r30, r8
    1ed2:	80 83       	st	Z, r24
	send_arr[5] = SEND_TC;
    1ed4:	8e e0       	ldi	r24, 0x0E	; 14
    1ed6:	f3 01       	movw	r30, r6
    1ed8:	80 83       	st	Z, r24
	send_arr[4] = packet_count;
    1eda:	e9 ed       	ldi	r30, 0xD9	; 217
    1edc:	f1 e0       	ldi	r31, 0x01	; 1
    1ede:	30 82       	st	Z, r3
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1ee0:	61 e1       	ldi	r22, 0x11	; 17
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
		send_arr[0] = current_tc[(i * 4)];
		send_arr[1] = current_tc[(i * 4) + 1];
		send_arr[2] = current_tc[(i * 4) + 2];
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
	
	for(i = 0; i < num_transfers; i++)
    1ef0:	33 94       	inc	r3
    1ef2:	f6 e2       	ldi	r31, 0x26	; 38
    1ef4:	3f 12       	cpse	r3, r31
    1ef6:	d0 cf       	rjmp	.-96     	; 0x1e98 <send_pus_packet_tc+0xc4>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	timeout = ssm_consec_trans_timeout;
    1ef8:	c0 91 3a 02 	lds	r28, 0x023A
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1efc:	80 91 09 02 	lds	r24, 0x0209
    1f00:	81 11       	cpse	r24, r1
    1f02:	0d c0       	rjmp	.+26     	; 0x1f1e <send_pus_packet_tc+0x14a>
	{
		if(!timeout--)
    1f04:	cc 23       	and	r28, r28
    1f06:	a1 f0       	breq	.+40     	; 0x1f30 <send_pus_packet_tc+0x15c>
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <send_pus_packet_tc+0x13a>
    1f0a:	c1 50       	subi	r28, 0x01	; 1
    1f0c:	89 f0       	breq	.+34     	; 0x1f30 <send_pus_packet_tc+0x15c>
		{
			data[0] = ssm_consec_trans_timeout;
			//errorASSERT(TC_CONSEC_TIMED_OUT, data);	// Let the OBC know that a consecutive transfer timed out.
			return;
		}
		delay_us(100);
    1f0e:	84 e6       	ldi	r24, 0x64	; 100
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 4b 13 	call	0x2696	; 0x2696 <delay_us>
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	timeout = ssm_consec_trans_timeout;
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1f16:	80 91 09 02 	lds	r24, 0x0209
    1f1a:	88 23       	and	r24, r24
    1f1c:	b1 f3       	breq	.-20     	; 0x1f0a <send_pus_packet_tc+0x136>
			return;
		}
		delay_us(100);
	}
	
	if(tc_transfer_completef != 35)
    1f1e:	83 32       	cpi	r24, 0x23	; 35
    1f20:	19 f0       	breq	.+6      	; 0x1f28 <send_pus_packet_tc+0x154>
	{
		tc_transfer_completef = 0;
    1f22:	10 92 09 02 	sts	0x0209, r1
		return;
    1f26:	04 c0       	rjmp	.+8      	; 0x1f30 <send_pus_packet_tc+0x15c>
	}
	else
	{
		tc_transfer_completef = 0;
    1f28:	10 92 09 02 	sts	0x0209, r1
		tc_packet_readyf = 0;
    1f2c:	10 92 03 03 	sts	0x0303, r1
		return;
	}
}
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	bf 90       	pop	r11
    1f42:	af 90       	pop	r10
    1f44:	9f 90       	pop	r9
    1f46:	8f 90       	pop	r8
    1f48:	7f 90       	pop	r7
    1f4a:	6f 90       	pop	r6
    1f4c:	5f 90       	pop	r5
    1f4e:	4f 90       	pop	r4
    1f50:	3f 90       	pop	r3
    1f52:	2f 90       	pop	r2
    1f54:	08 95       	ret

00001f56 <send_event>:
}

// event_readyf should be set when an event to report on has been placed in event_arr[]
void send_event(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1f56:	8a e1       	ldi	r24, 0x1A	; 26
    1f58:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = SEND_EVENT;
    1f62:	86 e1       	ldi	r24, 0x16	; 22
    1f64:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1f68:	80 91 26 02 	lds	r24, 0x0226
    1f6c:	80 93 d9 01 	sts	0x01D9, r24
	send_arr[3] = event_arr[3];		// 1=Normal, 2=low-sev error, 3=med-sev, 4=high-sev
    1f70:	80 91 b7 01 	lds	r24, 0x01B7
    1f74:	80 93 d8 01 	sts	0x01D8, r24
	send_arr[2] = event_arr[2];		// ReportID
    1f78:	80 91 b6 01 	lds	r24, 0x01B6
    1f7c:	80 93 d7 01 	sts	0x01D7, r24
	send_arr[1] = event_arr[1];
    1f80:	80 91 b5 01 	lds	r24, 0x01B5
    1f84:	80 93 d6 01 	sts	0x01D6, r24
	send_arr[0] = event_arr[0];
    1f88:	80 91 b4 01 	lds	r24, 0x01B4
    1f8c:	80 93 d5 01 	sts	0x01D5, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1f90:	61 e1       	ldi	r22, 0x11	; 17
    1f92:	85 ed       	ldi	r24, 0xD5	; 213
    1f94:	91 e0       	ldi	r25, 0x01	; 1
    1f96:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
    1f9a:	08 95       	ret

00001f9c <send_ask_alive>:
	return;
}

void send_ask_alive(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1f9c:	83 e1       	ldi	r24, 0x13	; 19
    1f9e:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = ASK_OBC_ALIVE;
    1fa8:	87 e1       	ldi	r24, 0x17	; 23
    1faa:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1fae:	80 91 26 02 	lds	r24, 0x0226
    1fb2:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1fb6:	61 e1       	ldi	r22, 0x11	; 17
    1fb8:	85 ed       	ldi	r24, 0xD5	; 213
    1fba:	91 e0       	ldi	r25, 0x01	; 1
    1fbc:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
	ask_alive = 0;
    1fc0:	10 92 1d 02 	sts	0x021D, r1
    1fc4:	08 95       	ret

00001fc6 <enter_low_power>:
}

void enter_low_power(void)
{
	// Sam: Fill this in with what needs to be done for low power mode.
	enter_low_powerf = 0;
    1fc6:	10 92 06 02 	sts	0x0206, r1
	LOW_POWER_MODE = 1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	80 93 01 01 	sts	0x0101, r24
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1fd0:	83 e1       	ldi	r24, 0x13	; 19
    1fd2:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = LOW_POWER_MODE_ENTERED;
    1fdc:	81 e2       	ldi	r24, 0x21	; 33
    1fde:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1fe2:	80 91 26 02 	lds	r24, 0x0226
    1fe6:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1fea:	61 e1       	ldi	r22, 0x11	; 17
    1fec:	85 ed       	ldi	r24, 0xD5	; 213
    1fee:	91 e0       	ldi	r25, 0x01	; 1
    1ff0:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
    1ff4:	08 95       	ret

00001ff6 <exit_low_power>:
}

void exit_low_power(void)
{	
	// Sam: Fill this in with what needs to be done to exit low power mode.
	LOW_POWER_MODE = 0;
    1ff6:	10 92 01 01 	sts	0x0101, r1
	exit_low_powerf = 0;
    1ffa:	10 92 27 02 	sts	0x0227, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1ffe:	83 e1       	ldi	r24, 0x13	; 19
    2000:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = LOW_POWER_MODE_EXITED;
    200a:	82 e2       	ldi	r24, 0x22	; 34
    200c:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    2010:	80 91 26 02 	lds	r24, 0x0226
    2014:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    2018:	61 e1       	ldi	r22, 0x11	; 17
    201a:	85 ed       	ldi	r24, 0xD5	; 213
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
    2022:	08 95       	ret

00002024 <enter_take_over>:
	return;	
}

void enter_take_over(void)
{
	TAKEOVER = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	80 93 26 03 	sts	0x0326, r24
	enter_take_overf = 0;
    202a:	10 92 08 03 	sts	0x0308, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    202e:	83 e1       	ldi	r24, 0x13	; 19
    2030:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = COMS_TAKEOVER_ENTERED;
    203a:	83 e2       	ldi	r24, 0x23	; 35
    203c:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    2040:	80 91 26 02 	lds	r24, 0x0226
    2044:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    2048:	61 e1       	ldi	r22, 0x11	; 17
    204a:	85 ed       	ldi	r24, 0xD5	; 213
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
    2052:	08 95       	ret

00002054 <exit_take_over>:
	return;
}

void exit_take_over(void)
{
	TAKEOVER = 0;
    2054:	10 92 26 03 	sts	0x0326, r1
	exit_take_overf = 0;
    2058:	10 92 d4 02 	sts	0x02D4, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    205c:	83 e1       	ldi	r24, 0x13	; 19
    205e:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    2062:	82 e0       	ldi	r24, 0x02	; 2
    2064:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = COMS_TAKEOVER_EXITED;
    2068:	84 e2       	ldi	r24, 0x24	; 36
    206a:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    206e:	80 91 26 02 	lds	r24, 0x0226
    2072:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    2076:	61 e1       	ldi	r22, 0x11	; 17
    2078:	85 ed       	ldi	r24, 0xD5	; 213
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
    2080:	08 95       	ret

00002082 <pause_operations>:
	return;
}

void pause_operations(void)
{
	PAUSE = 1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 93 e1 03 	sts	0x03E1, r24
	pause_operationsf = 0;
    2088:	10 92 eb 01 	sts	0x01EB, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    208c:	83 e1       	ldi	r24, 0x13	; 19
    208e:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    2092:	82 e0       	ldi	r24, 0x02	; 2
    2094:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = OPERATIONS_PAUSED;
    2098:	85 e2       	ldi	r24, 0x25	; 37
    209a:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    209e:	80 91 26 02 	lds	r24, 0x0226
    20a2:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    20a6:	61 e1       	ldi	r22, 0x11	; 17
    20a8:	85 ed       	ldi	r24, 0xD5	; 213
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
    20b0:	08 95       	ret

000020b2 <resume_operations>:
	return;	
}

void resume_operations(void)
{
	PAUSE = 0;
    20b2:	10 92 e1 03 	sts	0x03E1, r1
	resume_operationsf = 0;
    20b6:	10 92 ed 01 	sts	0x01ED, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    20ba:	83 e1       	ldi	r24, 0x13	; 19
    20bc:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = OPERATIONS_RESUMED;
    20c6:	86 e2       	ldi	r24, 0x26	; 38
    20c8:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    20cc:	80 91 26 02 	lds	r24, 0x0226
    20d0:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    20d4:	61 e1       	ldi	r22, 0x11	; 17
    20d6:	85 ed       	ldi	r24, 0xD5	; 213
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	0e 94 c5 00 	call	0x18a	; 0x18a <can_send_message>
    20de:	08 95       	ret

000020e0 <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now)
    20e0:	80 91 33 02 	lds	r24, 0x0233
    20e4:	81 11       	cpse	r24, r1
		send_response();
    20e6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <send_response>
	if (send_hk)
    20ea:	80 91 e0 02 	lds	r24, 0x02E0
    20ee:	81 11       	cpse	r24, r1
		send_housekeeping();
    20f0:	0e 94 91 0b 	call	0x1722	; 0x1722 <send_housekeeping>
	if (send_data)
    20f4:	80 91 05 03 	lds	r24, 0x0305
    20f8:	81 11       	cpse	r24, r1
		send_sensor_data();
    20fa:	0e 94 a3 0b 	call	0x1746	; 0x1746 <send_sensor_data>
	if (msg_received)
    20fe:	80 91 e2 03 	lds	r24, 0x03E2
    2102:	81 11       	cpse	r24, r1
		send_coms_packet();
    2104:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <send_coms_packet>
	if (read_response)
    2108:	80 91 3b 02 	lds	r24, 0x023B
    210c:	81 11       	cpse	r24, r1
		send_read_response();
    210e:	0e 94 14 0c 	call	0x1828	; 0x1828 <send_read_response>
	if (write_response)
    2112:	80 91 fa 01 	lds	r24, 0x01FA
    2116:	81 11       	cpse	r24, r1
		send_write_response();
    2118:	0e 94 35 0c 	call	0x186a	; 0x186a <send_write_response>
	if (set_sens_h)
    211c:	80 91 02 03 	lds	r24, 0x0302
    2120:	81 11       	cpse	r24, r1
		set_sensor_high();
    2122:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <set_sensor_high>
	if (set_sens_l)
    2126:	80 91 07 03 	lds	r24, 0x0307
    212a:	81 11       	cpse	r24, r1
		set_sensor_low();
    212c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <set_sensor_low>
	if (set_varf)
    2130:	80 91 06 03 	lds	r24, 0x0306
    2134:	81 11       	cpse	r24, r1
		set_var();
    2136:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <set_var>
	if (new_tm_msgf)
    213a:	80 91 36 02 	lds	r24, 0x0236
    213e:	81 11       	cpse	r24, r1
		receive_tm_msg();
    2140:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <receive_tm_msg>
	if (tc_packet_readyf)
    2144:	80 91 03 03 	lds	r24, 0x0303
    2148:	81 11       	cpse	r24, r1
		send_pus_packet_tc();
    214a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <send_pus_packet_tc>
	if (event_readyf)
    214e:	80 91 07 01 	lds	r24, 0x0107
    2152:	81 11       	cpse	r24, r1
		send_event();
    2154:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <send_event>
	if (ask_alive)
    2158:	80 91 1d 02 	lds	r24, 0x021D
    215c:	81 11       	cpse	r24, r1
		send_ask_alive();
    215e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <send_ask_alive>
	if (enter_low_powerf)
    2162:	80 91 06 02 	lds	r24, 0x0206
    2166:	81 11       	cpse	r24, r1
		enter_low_power();
    2168:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <enter_low_power>
	if (exit_low_powerf)
    216c:	80 91 27 02 	lds	r24, 0x0227
    2170:	81 11       	cpse	r24, r1
		exit_low_power();
    2172:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <exit_low_power>
	if (enter_take_overf)
    2176:	80 91 08 03 	lds	r24, 0x0308
    217a:	81 11       	cpse	r24, r1
		enter_take_over();
    217c:	0e 94 12 10 	call	0x2024	; 0x2024 <enter_take_over>
	if (exit_take_overf)
    2180:	80 91 d4 02 	lds	r24, 0x02D4
    2184:	81 11       	cpse	r24, r1
		exit_take_over();
    2186:	0e 94 2a 10 	call	0x2054	; 0x2054 <exit_take_over>
	if (pause_operationsf)
    218a:	80 91 eb 01 	lds	r24, 0x01EB
    218e:	81 11       	cpse	r24, r1
		pause_operations();
    2190:	0e 94 41 10 	call	0x2082	; 0x2082 <pause_operations>
	if (resume_operationsf)
    2194:	80 91 ed 01 	lds	r24, 0x01ED
    2198:	81 11       	cpse	r24, r1
		resume_operations();
    219a:	0e 94 59 10 	call	0x20b2	; 0x20b2 <resume_operations>
    219e:	08 95       	ret

000021a0 <main>:
/**************************************************/

volatile uint8_t CTC_flag;	// Variable used in timer.c

int main(void)
{		
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <main+0x6>
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <main+0x8>
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t high = 0, low = 0;
	
	uint8_t msg = 0x66;
	
	uint8_t* adc_result;
	*adc_result = 0;
    21ac:	10 92 00 00 	sts	0x0000, r1
}

static void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    21b0:	e1 e6       	ldi	r30, 0x61	; 97
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 e8       	ldi	r24, 0x80	; 128
    21b6:	80 83       	st	Z, r24
	CLKPR = 0x00;
    21b8:	10 82       	st	Z, r1
		id_array[4] = SUB0_ID4;
		id_array[5] = SUB0_ID5;
	}
	if(SELF_ID == 1)
	{
		id_array[0] = SUB1_ID0;
    21ba:	8a e1       	ldi	r24, 0x1A	; 26
    21bc:	80 93 f1 02 	sts	0x02F1, r24
		id_array[1] = SUB1_ID1;
    21c0:	8b e1       	ldi	r24, 0x1B	; 27
    21c2:	80 93 f2 02 	sts	0x02F2, r24
		id_array[2] = SUB1_ID2;
    21c6:	8c e1       	ldi	r24, 0x1C	; 28
    21c8:	80 93 f3 02 	sts	0x02F3, r24
		id_array[3] = SUB1_ID3;
    21cc:	8d e1       	ldi	r24, 0x1D	; 29
    21ce:	80 93 f4 02 	sts	0x02F4, r24
		id_array[4] = SUB1_ID4;
    21d2:	8e e1       	ldi	r24, 0x1E	; 30
    21d4:	80 93 f5 02 	sts	0x02F5, r24
		id_array[5] = SUB1_ID5;
    21d8:	8f e1       	ldi	r24, 0x1F	; 31
    21da:	80 93 f6 02 	sts	0x02F6, r24
    21de:	0f 2e       	mov	r0, r31
    21e0:	f9 ee       	ldi	r31, 0xE9	; 233
    21e2:	4f 2e       	mov	r4, r31
    21e4:	f2 e0       	ldi	r31, 0x02	; 2
    21e6:	5f 2e       	mov	r5, r31
    21e8:	f0 2d       	mov	r31, r0
    21ea:	0f 2e       	mov	r0, r31
    21ec:	f5 ed       	ldi	r31, 0xD5	; 213
    21ee:	6f 2e       	mov	r6, r31
    21f0:	f1 e0       	ldi	r31, 0x01	; 1
    21f2:	7f 2e       	mov	r7, r31
    21f4:	f0 2d       	mov	r31, r0
    21f6:	09 ed       	ldi	r16, 0xD9	; 217
    21f8:	13 e0       	ldi	r17, 0x03	; 3
    21fa:	88 e0       	ldi	r24, 0x08	; 8
    21fc:	91 e0       	ldi	r25, 0x01	; 1
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
    2202:	65 e1       	ldi	r22, 0x15	; 21
    2204:	72 e0       	ldi	r23, 0x02	; 2
    2206:	4b ef       	ldi	r20, 0xFB	; 251
    2208:	51 e0       	ldi	r21, 0x01	; 1
    220a:	24 e3       	ldi	r18, 0x34	; 52
    220c:	33 e0       	ldi	r19, 0x03	; 3
    220e:	8e ee       	ldi	r24, 0xEE	; 238
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	aa e0       	ldi	r26, 0x0A	; 10
    2214:	b3 e0       	ldi	r27, 0x03	; 3
    2216:	ea e2       	ldi	r30, 0x2A	; 42
    2218:	f3 e0       	ldi	r31, 0x03	; 3
    221a:	fa 83       	std	Y+2, r31	; 0x02
    221c:	e9 83       	std	Y+1, r30	; 0x01
    221e:	0f 2e       	mov	r0, r31
    2220:	f4 eb       	ldi	r31, 0xB4	; 180
    2222:	8f 2e       	mov	r8, r31
    2224:	f1 e0       	ldi	r31, 0x01	; 1
    2226:	9f 2e       	mov	r9, r31
    2228:	f0 2d       	mov	r31, r0
    222a:	0f 2e       	mov	r0, r31
    222c:	fa e2       	ldi	r31, 0x2A	; 42
    222e:	af 2e       	mov	r10, r31
    2230:	f2 e0       	ldi	r31, 0x02	; 2
    2232:	bf 2e       	mov	r11, r31
    2234:	f0 2d       	mov	r31, r0
    2236:	0f 2e       	mov	r0, r31
    2238:	fa e0       	ldi	r31, 0x0A	; 10
    223a:	cf 2e       	mov	r12, r31
    223c:	f2 e0       	ldi	r31, 0x02	; 2
    223e:	df 2e       	mov	r13, r31
    2240:	f0 2d       	mov	r31, r0
    2242:	68 94       	set
    2244:	ff 24       	eor	r15, r15
    2246:	f3 f8       	bld	r15, 3
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
    2248:	f2 01       	movw	r30, r4
    224a:	11 92       	st	Z+, r1
    224c:	2f 01       	movw	r4, r30
		send_arr[i] = 0;
    224e:	f3 01       	movw	r30, r6
    2250:	11 92       	st	Z+, r1
    2252:	3f 01       	movw	r6, r30
		read_arr[i] = 0;
    2254:	f8 01       	movw	r30, r16
    2256:	11 92       	st	Z+, r1
    2258:	8f 01       	movw	r16, r30
		write_arr[i] = 0;
    225a:	eb 81       	ldd	r30, Y+3	; 0x03
    225c:	fc 81       	ldd	r31, Y+4	; 0x04
    225e:	11 92       	st	Z+, r1
    2260:	fc 83       	std	Y+4, r31	; 0x04
    2262:	eb 83       	std	Y+3, r30	; 0x03
		data_req_arr[i] = 0;
    2264:	fb 01       	movw	r30, r22
    2266:	11 92       	st	Z+, r1
    2268:	bf 01       	movw	r22, r30
		sensh_arr[i] = 0;
    226a:	fa 01       	movw	r30, r20
    226c:	11 92       	st	Z+, r1
    226e:	af 01       	movw	r20, r30
		sensl_arr[i] = 0;
    2270:	f9 01       	movw	r30, r18
    2272:	11 92       	st	Z+, r1
    2274:	9f 01       	movw	r18, r30
		setv_arr[i] = 0;
    2276:	fc 01       	movw	r30, r24
    2278:	11 92       	st	Z+, r1
    227a:	cf 01       	movw	r24, r30
		new_tm_msg[i] = 0;
    227c:	1d 92       	st	X+, r1
		new_tc_msg[i] = 0;
    227e:	e9 81       	ldd	r30, Y+1	; 0x01
    2280:	fa 81       	ldd	r31, Y+2	; 0x02
    2282:	11 92       	st	Z+, r1
    2284:	fa 83       	std	Y+2, r31	; 0x02
    2286:	e9 83       	std	Y+1, r30	; 0x01
		event_arr[i] = 0;
    2288:	f4 01       	movw	r30, r8
    228a:	11 92       	st	Z+, r1
    228c:	4f 01       	movw	r8, r30
		pause_msg[i] = 0;
    228e:	f5 01       	movw	r30, r10
    2290:	11 92       	st	Z+, r1
    2292:	5f 01       	movw	r10, r30
		resume_msg[i] = 0;
    2294:	f6 01       	movw	r30, r12
    2296:	11 92       	st	Z+, r1
    2298:	6f 01       	movw	r12, r30
    229a:	fa 94       	dec	r15
		id_array[2] = SUB2_ID2;
		id_array[3] = SUB2_ID3;
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	for (i = 0; i < 8; i ++)
    229c:	a9 f6       	brne	.-86     	; 0x2248 <main+0xa8>
    229e:	ec e3       	ldi	r30, 0x3C	; 60
    22a0:	f2 e0       	ldi	r31, 0x02	; 2
    22a2:	2f e3       	ldi	r18, 0x3F	; 63
    22a4:	33 e0       	ldi	r19, 0x03	; 3
    22a6:	4a e1       	ldi	r20, 0x1A	; 26
    22a8:	51 e0       	ldi	r21, 0x01	; 1
    22aa:	84 ed       	ldi	r24, 0xD4	; 212
    22ac:	92 e0       	ldi	r25, 0x02	; 2
		pause_msg[i] = 0;
		resume_msg[i] = 0;
	}
	for (i = 0; i < 152; i++)		// Initialize the TM/TC Packet arrays.
	{
		current_tm[i] = 0;
    22ae:	11 92       	st	Z+, r1
		current_tc[i] = 0;
    22b0:	d9 01       	movw	r26, r18
    22b2:	1d 92       	st	X+, r1
    22b4:	9d 01       	movw	r18, r26
		tm_to_downlink[i] = 0;
    22b6:	da 01       	movw	r26, r20
    22b8:	1d 92       	st	X+, r1
    22ba:	ad 01       	movw	r20, r26
		new_tc_msg[i] = 0;
		event_arr[i] = 0;
		pause_msg[i] = 0;
		resume_msg[i] = 0;
	}
	for (i = 0; i < 152; i++)		// Initialize the TM/TC Packet arrays.
    22bc:	e8 17       	cp	r30, r24
    22be:	f9 07       	cpc	r31, r25
    22c0:	b1 f7       	brne	.-20     	; 0x22ae <main+0x10e>
		current_tm[i] = 0;
		current_tc[i] = 0;
		tm_to_downlink[i] = 0;
	}
	/* Initialize Global Command Flags to zero */
	send_now = 0;
    22c2:	10 92 33 02 	sts	0x0233, r1
	send_hk = 0;
    22c6:	10 92 e0 02 	sts	0x02E0, r1
	send_data = 0;
    22ca:	10 92 05 03 	sts	0x0305, r1
	read_response = 0;
    22ce:	10 92 3b 02 	sts	0x023B, r1
	write_response = 0;
    22d2:	10 92 fa 01 	sts	0x01FA, r1
	set_sens_h = 0;
    22d6:	10 92 02 03 	sts	0x0302, r1
	set_sens_l = 0;
    22da:	10 92 07 03 	sts	0x0307, r1
	set_varf = 0;
    22de:	10 92 06 03 	sts	0x0306, r1
	new_tm_msgf = 0;
    22e2:	10 92 36 02 	sts	0x0236, r1
	tm_sequence_count = 0;
    22e6:	10 92 06 01 	sts	0x0106, r1
	current_tm_fullf = 0;
    22ea:	10 92 04 03 	sts	0x0304, r1
	tc_packet_readyf = 0;
    22ee:	10 92 03 03 	sts	0x0303, r1
	tc_transfer_completef = 0;
    22f2:	10 92 09 02 	sts	0x0209, r1
	start_tc_transferf = 0;
    22f6:	10 92 05 02 	sts	0x0205, r1
	receiving_tmf = 0;
    22fa:	10 92 29 03 	sts	0x0329, r1
	event_readyf = 0;
    22fe:	10 92 07 01 	sts	0x0107, r1
	ask_alive = 0;
    2302:	10 92 1d 02 	sts	0x021D, r1
	enter_low_powerf = 0;
    2306:	10 92 06 02 	sts	0x0206, r1
	exit_low_powerf = 0;
    230a:	10 92 27 02 	sts	0x0227, r1
	enter_take_overf = 0;
    230e:	10 92 08 03 	sts	0x0308, r1
	exit_take_overf = 0;
    2312:	10 92 d4 02 	sts	0x02D4, r1
	pause_operationsf = 0;
    2316:	10 92 eb 01 	sts	0x01EB, r1
	resume_operationsf = 0;
    231a:	10 92 ed 01 	sts	0x01ED, r1
	
	/* Initialize Global Mode variables to zero */
	LOW_POWER_MODE = 0;
    231e:	10 92 01 01 	sts	0x0101, r1
	PAUSE = 0;
    2322:	10 92 e1 03 	sts	0x03E1, r1
	
	/* Initialize Global coms takeover flags to zero */
	TAKEOVER = 0;
    2326:	10 92 26 03 	sts	0x0326, r1
	REQUEST_TAKEOVER = 0;
    232a:	10 92 e7 02 	sts	0x02E7, r1
	REQUEST_ALIVE_IN_PROG = 0;
    232e:	10 92 d4 01 	sts	0x01D4, r1
	FAILED_COUNT = 0;
    2332:	10 92 13 01 	sts	0x0113, r1
	ISALIVE_COUNTER = 0;
    2336:	10 92 be 01 	sts	0x01BE, r1
    233a:	10 92 bf 01 	sts	0x01BF, r1
    233e:	10 92 c0 01 	sts	0x01C0, r1
    2342:	10 92 c1 01 	sts	0x01C1, r1
	MAX_WAIT_TIME = 18400;
    2346:	80 ee       	ldi	r24, 0xE0	; 224
    2348:	97 e4       	ldi	r25, 0x47	; 71
    234a:	a0 e0       	ldi	r26, 0x00	; 0
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	80 93 02 01 	sts	0x0102, r24
    2352:	90 93 03 01 	sts	0x0103, r25
    2356:	a0 93 04 01 	sts	0x0104, r26
    235a:	b0 93 05 01 	sts	0x0105, r27
	
	/* Initialize Operational Timeouts */
	ssm_ok_go_timeout = 250;				// ~2.5 ms
    235e:	8a ef       	ldi	r24, 0xFA	; 250
    2360:	80 93 d3 01 	sts	0x01D3, r24
	ssm_consec_trans_timeout = 100;			// ~10 ms
    2364:	84 e6       	ldi	r24, 0x64	; 100
    2366:	80 93 3a 02 	sts	0x023A, r24
	
	ssm_fdir_signal = 0;
    236a:	10 92 ca 01 	sts	0x01CA, r1
}

static void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    236e:	8e ef       	ldi	r24, 0xFE	; 254
    2370:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    2372:	81 e1       	ldi	r24, 0x11	; 17
    2374:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    2376:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    2378:	89 e0       	ldi	r24, 0x09	; 9
    237a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    2380:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    2382:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	init_global_vars();
	io_init();	
	timer_init();
    2384:	0e 94 43 13 	call	0x2686	; 0x2686 <timer_init>
	adc_initialize();
    2388:	0e 94 9e 00 	call	0x13c	; 0x13c <adc_initialize>
	can_init(0);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	0e 94 40 04 	call	0x880	; 0x880 <can_init>
	can_init_mobs();
    2392:	0e 94 60 03 	call	0x6c0	; 0x6c0 <can_init_mobs>
	spi_initialize_master();
    2396:	0e 94 0d 13 	call	0x261a	; 0x261a <spi_initialize_master>
	if(SELF_ID == 2)
		dac_initialize();
	
	//enable watchdog timer - 2 second reset time approximate
	//WDTON Fuse has to be 1 for system reset mode - how do you do that?
	wdt_enable(WDTO_2S);
    239a:	2f e0       	ldi	r18, 0x0F	; 15
    239c:	88 e1       	ldi	r24, 0x18	; 24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	a8 95       	wdr
    23a6:	80 93 60 00 	sts	0x0060, r24
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	20 93 60 00 	sts	0x0060, r18

	/* Enable the timer for MMPT */
	if(SELF_ID == 1)
	{
		PIN_set(LED1);
    23b0:	8d e1       	ldi	r24, 0x1D	; 29
    23b2:	0e 94 8d 12 	call	0x251a	; 0x251a <PIN_set>
		mppt_timer_init();
    23b6:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <mppt_timer_init>
		mpptx = 0x3F;
    23ba:	8f e3       	ldi	r24, 0x3F	; 63
    23bc:	80 93 34 02 	sts	0x0234, r24
		mppty = 0x1F;
    23c0:	8f e1       	ldi	r24, 0x1F	; 31
    23c2:	80 93 23 02 	sts	0x0223, r24
		balance_l = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 03 02 	sts	0x0203, r24
		balance_h = 1;
    23cc:	80 93 ec 01 	sts	0x01EC, r24
		pxv = 0xBF;
    23d0:	8f eb       	ldi	r24, 0xBF	; 191
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	90 93 13 03 	sts	0x0313, r25
    23d8:	80 93 12 03 	sts	0x0312, r24
		pxi	= 0x0F;
    23dc:	8f e0       	ldi	r24, 0x0F	; 15
    23de:	80 93 14 03 	sts	0x0314, r24
		pyv = 0x5F;
    23e2:	8f e5       	ldi	r24, 0x5F	; 95
    23e4:	80 93 32 02 	sts	0x0232, r24
		pyi = 0x2F;
    23e8:	8f e2       	ldi	r24, 0x2F	; 47
    23ea:	80 93 11 01 	sts	0x0111, r24
	}
	
	// Enable global interrupts for Timer execution
	sei();
    23ee:	78 94       	sei
	{
		transceiver_initialize();
		coms_timer_init();
	}

	SS1_set_high();		// SPI Temp Sensor.
    23f0:	0e 94 13 13 	call	0x2626	; 0x2626 <SS1_set_high>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {	
		/* Reset the WDT */
		wdt_reset();
    23f4:	a8 95       	wdr
		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    23f6:	0e 94 05 03 	call	0x60a	; 0x60a <can_check_general>
		
		if(!PAUSE)
    23fa:	80 91 e1 03 	lds	r24, 0x03E1
    23fe:	81 11       	cpse	r24, r1
    2400:	04 c0       	rjmp	.+8      	; 0x240a <main+0x26a>
				// Continually check if coms needs to takeover for OBC
				check_obc_alive();
			}
			if(SELF_ID == 1)
			{
				run_mppt();
    2402:	0e 94 86 12 	call	0x250c	; 0x250c <run_mppt>
				run_battBalance();
    2406:	0e 94 a8 00 	call	0x150	; 0x150 <run_battBalance>
			}			
		}
				
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    240a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <run_commands>
	}
    240e:	f2 cf       	rjmp	.-28     	; 0x23f4 <main+0x254>

00002410 <__vector_15>:


//Section to deal with timer interrupts
#if (SELF_ID == 1)
//When the A compare register is reached, turn on the MPPTX signal
ISR(TIMER0_COMPA_vect) {
    2410:	1f 92       	push	r1
    2412:	0f 92       	push	r0
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	0f 92       	push	r0
    2418:	11 24       	eor	r1, r1
    241a:	2f 93       	push	r18
    241c:	3f 93       	push	r19
    241e:	4f 93       	push	r20
    2420:	5f 93       	push	r21
    2422:	6f 93       	push	r22
    2424:	7f 93       	push	r23
    2426:	8f 93       	push	r24
    2428:	9f 93       	push	r25
    242a:	af 93       	push	r26
    242c:	bf 93       	push	r27
    242e:	ef 93       	push	r30
    2430:	ff 93       	push	r31
	PIN_clr(LED2);
    2432:	8b e1       	ldi	r24, 0x1B	; 27
    2434:	0e 94 cd 12 	call	0x259a	; 0x259a <PIN_clr>
}
    2438:	ff 91       	pop	r31
    243a:	ef 91       	pop	r30
    243c:	bf 91       	pop	r27
    243e:	af 91       	pop	r26
    2440:	9f 91       	pop	r25
    2442:	8f 91       	pop	r24
    2444:	7f 91       	pop	r23
    2446:	6f 91       	pop	r22
    2448:	5f 91       	pop	r21
    244a:	4f 91       	pop	r20
    244c:	3f 91       	pop	r19
    244e:	2f 91       	pop	r18
    2450:	0f 90       	pop	r0
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	0f 90       	pop	r0
    2456:	1f 90       	pop	r1
    2458:	18 95       	reti

0000245a <__vector_16>:

//When the B compare register is reached, turn on the MPPTY signal
ISR(TIMER0_COMPB_vect) {
    245a:	1f 92       	push	r1
    245c:	0f 92       	push	r0
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	0f 92       	push	r0
    2462:	11 24       	eor	r1, r1
    2464:	2f 93       	push	r18
    2466:	3f 93       	push	r19
    2468:	4f 93       	push	r20
    246a:	5f 93       	push	r21
    246c:	6f 93       	push	r22
    246e:	7f 93       	push	r23
    2470:	8f 93       	push	r24
    2472:	9f 93       	push	r25
    2474:	af 93       	push	r26
    2476:	bf 93       	push	r27
    2478:	ef 93       	push	r30
    247a:	ff 93       	push	r31
	PIN_clr(LED3);
    247c:	8e e1       	ldi	r24, 0x1E	; 30
    247e:	0e 94 cd 12 	call	0x259a	; 0x259a <PIN_clr>
}
    2482:	ff 91       	pop	r31
    2484:	ef 91       	pop	r30
    2486:	bf 91       	pop	r27
    2488:	af 91       	pop	r26
    248a:	9f 91       	pop	r25
    248c:	8f 91       	pop	r24
    248e:	7f 91       	pop	r23
    2490:	6f 91       	pop	r22
    2492:	5f 91       	pop	r21
    2494:	4f 91       	pop	r20
    2496:	3f 91       	pop	r19
    2498:	2f 91       	pop	r18
    249a:	0f 90       	pop	r0
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	0f 90       	pop	r0
    24a0:	1f 90       	pop	r1
    24a2:	18 95       	reti

000024a4 <__vector_17>:

//When the timer overflows, turn off both signals
ISR(TIMER0_OVF_vect) {
    24a4:	1f 92       	push	r1
    24a6:	0f 92       	push	r0
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	0f 92       	push	r0
    24ac:	11 24       	eor	r1, r1
    24ae:	2f 93       	push	r18
    24b0:	3f 93       	push	r19
    24b2:	4f 93       	push	r20
    24b4:	5f 93       	push	r21
    24b6:	6f 93       	push	r22
    24b8:	7f 93       	push	r23
    24ba:	8f 93       	push	r24
    24bc:	9f 93       	push	r25
    24be:	af 93       	push	r26
    24c0:	bf 93       	push	r27
    24c2:	ef 93       	push	r30
    24c4:	ff 93       	push	r31
	PIN_set(LED2);
    24c6:	8b e1       	ldi	r24, 0x1B	; 27
    24c8:	0e 94 8d 12 	call	0x251a	; 0x251a <PIN_set>
	PIN_set(LED3);
    24cc:	8e e1       	ldi	r24, 0x1E	; 30
    24ce:	0e 94 8d 12 	call	0x251a	; 0x251a <PIN_set>
}
    24d2:	ff 91       	pop	r31
    24d4:	ef 91       	pop	r30
    24d6:	bf 91       	pop	r27
    24d8:	af 91       	pop	r26
    24da:	9f 91       	pop	r25
    24dc:	8f 91       	pop	r24
    24de:	7f 91       	pop	r23
    24e0:	6f 91       	pop	r22
    24e2:	5f 91       	pop	r21
    24e4:	4f 91       	pop	r20
    24e6:	3f 91       	pop	r19
    24e8:	2f 91       	pop	r18
    24ea:	0f 90       	pop	r0
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	0f 90       	pop	r0
    24f0:	1f 90       	pop	r1
    24f2:	18 95       	reti

000024f4 <mppt_timer_init>:

// This function initializes a 8-bit timer used for generating PWM for mppt.
// NOTE: I cannot run this after global interrupts have been turned on
void mppt_timer_init(void) {
	
	TCNT0 = 0x0000; //Clear timer
    24f4:	16 bc       	out	0x26, r1	; 38
	//For now, hard code in the values that the "duty cycle" registers will be set to. This will be updated later by the algorithm
	OCR0A = 0x3F; // b00111111
    24f6:	8f e3       	ldi	r24, 0x3F	; 63
    24f8:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xBF; // b10111111
    24fa:	8f eb       	ldi	r24, 0xBF	; 191
    24fc:	88 bd       	out	0x28, r24	; 40
	
	TCCR0A = 0x00; // b00000000 Don't connect any pins, but set to normal mode as a test
    24fe:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; // b00000101 Set clock pre-scaling to 1024 for now, will be 1 later for "fast" output
    2500:	85 e0       	ldi	r24, 0x05	; 5
    2502:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x07; // b00000111 Enable the A and B compare match interrupts. Also enable the timer overflow interrupt
    2504:	87 e0       	ldi	r24, 0x07	; 7
    2506:	80 93 6e 00 	sts	0x006E, r24
    250a:	08 95       	ret

0000250c <run_mppt>:
void set_duty_cycleY(uint8_t duty){
	OCR0B = duty;
}

void run_mppt(void) {
	set_duty_cycleX(mpptx);
    250c:	80 91 34 02 	lds	r24, 0x0234
}

//This function will set the duty cycle of MPPTA
//Duty is an 8 bit number, so 0x7F is a duty cycle of 0.5
void set_duty_cycleX(uint8_t duty){
	OCR0A = duty;
    2510:	87 bd       	out	0x27, r24	; 39
	OCR0B = duty;
}

void run_mppt(void) {
	set_duty_cycleX(mpptx);
	set_duty_cycleY(mppty);	
    2512:	80 91 23 02 	lds	r24, 0x0223
	OCR0A = duty;
}

//This function will set the duty cycle of MPPTB
void set_duty_cycleY(uint8_t duty){
	OCR0B = duty;
    2516:	88 bd       	out	0x28, r24	; 40
    2518:	08 95       	ret

0000251a <PIN_set>:
	return;
}

void PIN_set(uint8_t PIN)
{
	if(PIN == 13)
    251a:	8d 30       	cpi	r24, 0x0D	; 13
    251c:	11 f4       	brne	.+4      	; 0x2522 <PIN_set+0x8>
	{
		PORTD |= 0b00100000;
    251e:	5d 9a       	sbi	0x0b, 5	; 11
    2520:	08 c0       	rjmp	.+16     	; 0x2532 <PIN_set+0x18>
	}
	if(PIN == 14)
    2522:	8e 30       	cpi	r24, 0x0E	; 14
    2524:	11 f4       	brne	.+4      	; 0x252a <PIN_set+0x10>
	{
		PORTD |= 0b01000000;
    2526:	5e 9a       	sbi	0x0b, 6	; 11
    2528:	08 c0       	rjmp	.+16     	; 0x253a <PIN_set+0x20>
	}
	if(PIN == 15)
    252a:	8f 30       	cpi	r24, 0x0F	; 15
    252c:	11 f4       	brne	.+4      	; 0x2532 <PIN_set+0x18>
	{
		PORTD |= 0b10000000;
    252e:	5f 9a       	sbi	0x0b, 7	; 11
    2530:	08 c0       	rjmp	.+16     	; 0x2542 <PIN_set+0x28>
	}
	if(PIN == 16)
    2532:	80 31       	cpi	r24, 0x10	; 16
    2534:	11 f4       	brne	.+4      	; 0x253a <PIN_set+0x20>
	{
		PORTB |= 0b00000100;
    2536:	2a 9a       	sbi	0x05, 2	; 5
    2538:	08 c0       	rjmp	.+16     	; 0x254a <PIN_set+0x30>
	}
	if(PIN == 17)
    253a:	81 31       	cpi	r24, 0x11	; 17
    253c:	11 f4       	brne	.+4      	; 0x2542 <PIN_set+0x28>
	{
		PORTC |= 0b00010000;
    253e:	44 9a       	sbi	0x08, 4	; 8
    2540:	08 c0       	rjmp	.+16     	; 0x2552 <PIN_set+0x38>
	}
	if(PIN == 18)
    2542:	82 31       	cpi	r24, 0x12	; 18
    2544:	11 f4       	brne	.+4      	; 0x254a <PIN_set+0x30>
	{
		PORTC |= 0b00100000;
    2546:	45 9a       	sbi	0x08, 5	; 8
    2548:	08 c0       	rjmp	.+16     	; 0x255a <PIN_set+0x40>
	}
	if(PIN == 22)
    254a:	86 31       	cpi	r24, 0x16	; 22
    254c:	11 f4       	brne	.+4      	; 0x2552 <PIN_set+0x38>
	{
		PORTC |= 0b01000000;
    254e:	46 9a       	sbi	0x08, 6	; 8
    2550:	08 c0       	rjmp	.+16     	; 0x2562 <PIN_set+0x48>
	}
	if(PIN == 23)
    2552:	87 31       	cpi	r24, 0x17	; 23
    2554:	11 f4       	brne	.+4      	; 0x255a <PIN_set+0x40>
	{
		PORTB |= 0b00001000;
    2556:	2b 9a       	sbi	0x05, 3	; 5
    2558:	08 c0       	rjmp	.+16     	; 0x256a <PIN_set+0x50>
	}
	if(PIN == 24)
    255a:	88 31       	cpi	r24, 0x18	; 24
    255c:	11 f4       	brne	.+4      	; 0x2562 <PIN_set+0x48>
	{
		PORTB |= 0b00010000;
    255e:	2c 9a       	sbi	0x05, 4	; 5
    2560:	08 c0       	rjmp	.+16     	; 0x2572 <PIN_set+0x58>
	}
	if(PIN == 25)
    2562:	89 31       	cpi	r24, 0x19	; 25
    2564:	11 f4       	brne	.+4      	; 0x256a <PIN_set+0x50>
	{
		PORTC |= 0b10000000;
    2566:	47 9a       	sbi	0x08, 7	; 8
    2568:	08 c0       	rjmp	.+16     	; 0x257a <PIN_set+0x60>
	}
	if(PIN == 26)
    256a:	8a 31       	cpi	r24, 0x1A	; 26
    256c:	11 f4       	brne	.+4      	; 0x2572 <PIN_set+0x58>
	{
		PORTB |= 0b00100000;
    256e:	2d 9a       	sbi	0x05, 5	; 5
    2570:	08 c0       	rjmp	.+16     	; 0x2582 <PIN_set+0x68>
	}
	if(PIN == 27)
    2572:	8b 31       	cpi	r24, 0x1B	; 27
    2574:	11 f4       	brne	.+4      	; 0x257a <PIN_set+0x60>
	{
		PORTB |= 0b01000000;
    2576:	2e 9a       	sbi	0x05, 6	; 5
    2578:	08 c0       	rjmp	.+16     	; 0x258a <PIN_set+0x70>
	}
	if(PIN == 28)
    257a:	8c 31       	cpi	r24, 0x1C	; 28
    257c:	11 f4       	brne	.+4      	; 0x2582 <PIN_set+0x68>
	{
		PORTB |= 0b10000000;
    257e:	2f 9a       	sbi	0x05, 7	; 5
    2580:	08 c0       	rjmp	.+16     	; 0x2592 <PIN_set+0x78>
	}
	if(PIN == 29)
    2582:	8d 31       	cpi	r24, 0x1D	; 29
    2584:	11 f4       	brne	.+4      	; 0x258a <PIN_set+0x70>
	{
		PORTD |= 0b00000001;
    2586:	58 9a       	sbi	0x0b, 0	; 11
    2588:	08 95       	ret
	}
	if(PIN == 30)
    258a:	8e 31       	cpi	r24, 0x1E	; 30
    258c:	11 f4       	brne	.+4      	; 0x2592 <PIN_set+0x78>
	{
		PORTC |= 0b00000001;
    258e:	40 9a       	sbi	0x08, 0	; 8
    2590:	08 95       	ret
	}
	if(PIN == 32)
    2592:	80 32       	cpi	r24, 0x20	; 32
    2594:	09 f4       	brne	.+2      	; 0x2598 <PIN_set+0x7e>
	{
		PORTD |= 0b00000010;
    2596:	59 9a       	sbi	0x0b, 1	; 11
    2598:	08 95       	ret

0000259a <PIN_clr>:
	return;
}

void PIN_clr(uint8_t PIN)
{
	if(PIN == 13)
    259a:	8d 30       	cpi	r24, 0x0D	; 13
    259c:	11 f4       	brne	.+4      	; 0x25a2 <PIN_clr+0x8>
	{
		PORTD &= ~(0b00100000);
    259e:	5d 98       	cbi	0x0b, 5	; 11
    25a0:	08 c0       	rjmp	.+16     	; 0x25b2 <PIN_clr+0x18>
	}
	if(PIN == 14)
    25a2:	8e 30       	cpi	r24, 0x0E	; 14
    25a4:	11 f4       	brne	.+4      	; 0x25aa <PIN_clr+0x10>
	{
		PORTD &= ~(0b01000000);
    25a6:	5e 98       	cbi	0x0b, 6	; 11
    25a8:	08 c0       	rjmp	.+16     	; 0x25ba <PIN_clr+0x20>
	}
	if(PIN == 15)
    25aa:	8f 30       	cpi	r24, 0x0F	; 15
    25ac:	11 f4       	brne	.+4      	; 0x25b2 <PIN_clr+0x18>
	{
		PORTD &= ~(0b10000000);
    25ae:	5f 98       	cbi	0x0b, 7	; 11
    25b0:	08 c0       	rjmp	.+16     	; 0x25c2 <PIN_clr+0x28>
	}
	if(PIN == 16)
    25b2:	80 31       	cpi	r24, 0x10	; 16
    25b4:	11 f4       	brne	.+4      	; 0x25ba <PIN_clr+0x20>
	{
		PORTB &= ~(0b00000100);
    25b6:	2a 98       	cbi	0x05, 2	; 5
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <PIN_clr+0x30>
	}
	if(PIN == 17)
    25ba:	81 31       	cpi	r24, 0x11	; 17
    25bc:	11 f4       	brne	.+4      	; 0x25c2 <PIN_clr+0x28>
	{
		PORTC &= ~(0b00010000);
    25be:	44 98       	cbi	0x08, 4	; 8
    25c0:	08 c0       	rjmp	.+16     	; 0x25d2 <PIN_clr+0x38>
	}
	if(PIN == 18)
    25c2:	82 31       	cpi	r24, 0x12	; 18
    25c4:	11 f4       	brne	.+4      	; 0x25ca <PIN_clr+0x30>
	{
		PORTC &= ~(0b00100000);
    25c6:	45 98       	cbi	0x08, 5	; 8
    25c8:	08 c0       	rjmp	.+16     	; 0x25da <PIN_clr+0x40>
	}
	if(PIN == 22)
    25ca:	86 31       	cpi	r24, 0x16	; 22
    25cc:	11 f4       	brne	.+4      	; 0x25d2 <PIN_clr+0x38>
	{
		PORTC &= ~(0b01000000);
    25ce:	46 98       	cbi	0x08, 6	; 8
    25d0:	08 c0       	rjmp	.+16     	; 0x25e2 <PIN_clr+0x48>
	}
	if(PIN == 23)
    25d2:	87 31       	cpi	r24, 0x17	; 23
    25d4:	11 f4       	brne	.+4      	; 0x25da <PIN_clr+0x40>
	{
		PORTB &= ~(0b00001000);
    25d6:	2b 98       	cbi	0x05, 3	; 5
    25d8:	08 c0       	rjmp	.+16     	; 0x25ea <PIN_clr+0x50>
	}
	if(PIN == 24)
    25da:	88 31       	cpi	r24, 0x18	; 24
    25dc:	11 f4       	brne	.+4      	; 0x25e2 <PIN_clr+0x48>
	{
		PORTB &= ~(0b00010000);
    25de:	2c 98       	cbi	0x05, 4	; 5
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <PIN_clr+0x58>
	}
	if(PIN == 25)
    25e2:	89 31       	cpi	r24, 0x19	; 25
    25e4:	11 f4       	brne	.+4      	; 0x25ea <PIN_clr+0x50>
	{
		PORTC &= ~(0b10000000);
    25e6:	47 98       	cbi	0x08, 7	; 8
    25e8:	08 c0       	rjmp	.+16     	; 0x25fa <PIN_clr+0x60>
	}
	if(PIN == 26)
    25ea:	8a 31       	cpi	r24, 0x1A	; 26
    25ec:	11 f4       	brne	.+4      	; 0x25f2 <PIN_clr+0x58>
	{
		PORTB &= ~(0b00100000);
    25ee:	2d 98       	cbi	0x05, 5	; 5
    25f0:	08 c0       	rjmp	.+16     	; 0x2602 <PIN_clr+0x68>
	}
	if(PIN == 27)
    25f2:	8b 31       	cpi	r24, 0x1B	; 27
    25f4:	11 f4       	brne	.+4      	; 0x25fa <PIN_clr+0x60>
	{
		PORTB &= ~(0b01000000);
    25f6:	2e 98       	cbi	0x05, 6	; 5
    25f8:	08 c0       	rjmp	.+16     	; 0x260a <PIN_clr+0x70>
	}
	if(PIN == 28)
    25fa:	8c 31       	cpi	r24, 0x1C	; 28
    25fc:	11 f4       	brne	.+4      	; 0x2602 <PIN_clr+0x68>
	{
		PORTB &= ~(0b10000000);
    25fe:	2f 98       	cbi	0x05, 7	; 5
    2600:	08 c0       	rjmp	.+16     	; 0x2612 <PIN_clr+0x78>
	}
	if(PIN == 29)
    2602:	8d 31       	cpi	r24, 0x1D	; 29
    2604:	11 f4       	brne	.+4      	; 0x260a <PIN_clr+0x70>
	{
		PORTD &= ~(0b00000001);
    2606:	58 98       	cbi	0x0b, 0	; 11
    2608:	08 95       	ret
	}
	if(PIN == 30)
    260a:	8e 31       	cpi	r24, 0x1E	; 30
    260c:	11 f4       	brne	.+4      	; 0x2612 <PIN_clr+0x78>
	{
		PORTC &= ~(0b00000001);
    260e:	40 98       	cbi	0x08, 0	; 8
    2610:	08 95       	ret
	}
	if(PIN == 32)
    2612:	80 32       	cpi	r24, 0x20	; 32
    2614:	09 f4       	brne	.+2      	; 0x2618 <PIN_clr+0x7e>
	{
		PORTD &= ~(0b00000010);
    2616:	59 98       	cbi	0x0b, 1	; 11
    2618:	08 95       	ret

0000261a <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    261a:	85 b7       	in	r24, 0x35	; 53
    261c:	8f 77       	andi	r24, 0x7F	; 127
    261e:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    2620:	83 e5       	ldi	r24, 0x53	; 83
    2622:	8c bd       	out	0x2c, r24	; 44
    2624:	08 95       	ret

00002626 <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    2626:	44 9a       	sbi	0x08, 4	; 8
    2628:	08 95       	ret

0000262a <SS1_set_low>:
	delay_us(1);
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    262a:	44 98       	cbi	0x08, 4	; 8
    262c:	08 95       	ret

0000262e <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    262e:	0f 93       	push	r16
    2630:	1f 93       	push	r17
    2632:	cf 93       	push	r28
    2634:	df 93       	push	r29
    2636:	8c 01       	movw	r16, r24
    2638:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    263a:	0e 94 15 13 	call	0x262a	; 0x262a <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    263e:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    2640:	80 e8       	ldi	r24, 0x80	; 128
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
	*high = *reg_ptr;
    2648:	8e b5       	in	r24, 0x2e	; 46
    264a:	f8 01       	movw	r30, r16
    264c:	80 83       	st	Z, r24
	delay_ms(128);
    264e:	80 e8       	ldi	r24, 0x80	; 128
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 5d 13 	call	0x26ba	; 0x26ba <delay_ms>
	*low = *reg_ptr;	
    2656:	8e b5       	in	r24, 0x2e	; 46
    2658:	88 83       	st	Y, r24
	SS1_set_high();
    265a:	0e 94 13 13 	call	0x2626	; 0x2626 <SS1_set_high>
	
	return;
}
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	08 95       	ret

00002668 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    2668:	1f 92       	push	r1
    266a:	0f 92       	push	r0
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	0f 92       	push	r0
    2670:	11 24       	eor	r1, r1
    2672:	8f 93       	push	r24
	CTC_flag = 1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	80 93 f5 03 	sts	0x03F5, r24
}
    267a:	8f 91       	pop	r24
    267c:	0f 90       	pop	r0
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	0f 90       	pop	r0
    2682:	1f 90       	pop	r1
    2684:	18 95       	reti

00002686 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    2686:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    268a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    268e:	8a e0       	ldi	r24, 0x0A	; 10
    2690:	80 93 81 00 	sts	0x0081, r24
    2694:	08 95       	ret

00002696 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    2696:	10 92 f5 03 	sts	0x03F5, r1
	TCNT1 = 0x0000; //Clear timer
    269a:	10 92 85 00 	sts	0x0085, r1
    269e:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    26a2:	90 93 89 00 	sts	0x0089, r25
    26a6:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    26aa:	82 e0       	ldi	r24, 0x02	; 2
    26ac:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    26b0:	80 91 f5 03 	lds	r24, 0x03F5
    26b4:	88 23       	and	r24, r24
    26b6:	e1 f3       	breq	.-8      	; 0x26b0 <delay_us+0x1a>
}
    26b8:	08 95       	ret

000026ba <delay_ms>:

void delay_ms(uint16_t ms) {
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
    26c2:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	51 f0       	breq	.+20     	; 0x26dc <delay_ms+0x22>
    26c8:	c0 e0       	ldi	r28, 0x00	; 0
    26ca:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    26cc:	88 ee       	ldi	r24, 0xE8	; 232
    26ce:	93 e0       	ldi	r25, 0x03	; 3
    26d0:	0e 94 4b 13 	call	0x2696	; 0x2696 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    26d4:	21 96       	adiw	r28, 0x01	; 1
    26d6:	c0 17       	cp	r28, r16
    26d8:	d1 07       	cpc	r29, r17
    26da:	c1 f7       	brne	.-16     	; 0x26cc <delay_ms+0x12>
		delay_us(1000);
	}
}
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	08 95       	ret

000026e6 <__tablejump2__>:
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31

000026ea <__tablejump__>:
    26ea:	05 90       	lpm	r0, Z+
    26ec:	f4 91       	lpm	r31, Z
    26ee:	e0 2d       	mov	r30, r0
    26f0:	09 94       	ijmp

000026f2 <_exit>:
    26f2:	f8 94       	cli

000026f4 <__stop_program>:
    26f4:	ff cf       	rjmp	.-2      	; 0x26f4 <__stop_program>
