
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ff2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  00001066  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000108  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d67  00000000  00000000  0000119e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000670  00000000  00000000  00001f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000083b  00000000  00000000  00002575  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000240  00000000  00000000  00002db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000470  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000e63  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000100  00000000  00000000  000042c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__vector_12>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  7c:	1a 01       	movw	r2, r20
  7e:	99 01       	movw	r18, r18
  80:	10 02       	muls	r17, r16
  82:	71 02       	muls	r23, r17
  84:	ac 02       	muls	r26, r28
  86:	18 03       	fmul	r17, r16
  88:	61 03       	mulsu	r22, r17
  8a:	e7 03       	fmuls	r22, r23
  8c:	77 04       	cpc	r7, r7
  8e:	14 01       	movw	r2, r8
  90:	66 05       	cpc	r22, r6

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d8 e0       	ldi	r29, 0x08	; 8
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 30       	cpi	r26, 0x03	; 3
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 25 07 	call	0xe4a	; 0xe4a <main>
  b2:	0c 94 f7 07 	jmp	0xfee	; 0xfee <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <can_clear_all_mob>:
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	ad ee       	ldi	r26, 0xED	; 237
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	3e ee       	ldi	r19, 0xEE	; 238
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	98 2f       	mov	r25, r24
  c6:	92 95       	swap	r25
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	9c 93       	st	X, r25
  cc:	e3 2f       	mov	r30, r19
  ce:	f2 2f       	mov	r31, r18
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
  d0:	11 92       	st	Z+, r1
  d2:	e8 3f       	cpi	r30, 0xF8	; 248
  d4:	f1 05       	cpc	r31, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <can_clear_all_mob+0x16>
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	86 30       	cpi	r24, 0x06	; 6
  dc:	99 f7       	brne	.-26     	; 0xc4 <can_clear_all_mob+0xa>
  de:	08 95       	ret

000000e0 <can_get_mob_free>:
  e0:	ed ee       	ldi	r30, 0xED	; 237
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	20 81       	ld	r18, Z
  e6:	10 82       	st	Z, r1
  e8:	80 91 ef 00 	lds	r24, 0x00EF
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
  ec:	80 7c       	andi	r24, 0xC0	; 192
  ee:	69 f0       	breq	.+26     	; 0x10a <can_get_mob_free+0x2a>
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	ad ee       	ldi	r26, 0xED	; 237
    uint8_t  ovrtim_flag=0;                          //! Timer overflow count
    uint16_t conf_index;                             //! Count of bit timing configuration tried
    uint8_t  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
  f4:	b0 e0       	ldi	r27, 0x00	; 0
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
  f6:	ef ee       	ldi	r30, 0xEF	; 239
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
  f8:	f0 e0       	ldi	r31, 0x00	; 0
    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
  fa:	98 2f       	mov	r25, r24
  fc:	92 95       	swap	r25
  fe:	90 7f       	andi	r25, 0xF0	; 240
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
 100:	9c 93       	st	X, r25
 102:	90 81       	ld	r25, Z
 104:	90 7c       	andi	r25, 0xC0	; 192
 106:	29 f4       	brne	.+10     	; 0x112 <can_get_mob_free+0x32>

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
    {
        brp  = BRP_MIN;
 108:	01 c0       	rjmp	.+2      	; 0x10c <can_get_mob_free+0x2c>
 10a:	80 e0       	ldi	r24, 0x00	; 0
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
 10c:	20 93 ed 00 	sts	0x00ED, r18
    {
        Can_set_mob(u8_temp0);  //! Page index
 110:	08 95       	ret
        Can_clear_mob();        //! All MOb Registers = 0x00
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	86 30       	cpi	r24, 0x06	; 6
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    {
        Can_set_mob(u8_temp0);  //! Page index
 116:	89 f7       	brne	.-30     	; 0xfa <can_get_mob_free+0x1a>
 118:	20 93 ed 00 	sts	0x00ED, r18
 11c:	8f ef       	ldi	r24, 0xFF	; 255
        Can_clear_mob();        //! All MOb Registers = 0x00
 11e:	08 95       	ret

00000120 <can_get_mob_status>:
 120:	80 91 ef 00 	lds	r24, 0x00EF
 124:	80 7c       	andi	r24, 0xC0	; 192
 126:	61 f0       	breq	.+24     	; 0x140 <can_get_mob_status+0x20>
 128:	80 91 ee 00 	lds	r24, 0x00EE
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
 12c:	98 2f       	mov	r25, r24
 12e:	90 7e       	andi	r25, 0xE0	; 224
 130:	28 2f       	mov	r18, r24
 132:	20 76       	andi	r18, 0x60	; 96
 134:	20 32       	cpi	r18, 0x20	; 32
 136:	31 f0       	breq	.+12     	; 0x144 <can_get_mob_status+0x24>
 138:	90 34       	cpi	r25, 0x40	; 64
 13a:	31 f0       	breq	.+12     	; 0x148 <can_get_mob_status+0x28>

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
        {
            Can_reset();
 13c:	8f 71       	andi	r24, 0x1F	; 31
 13e:	08 95       	ret
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	08 95       	ret
 144:	89 2f       	mov	r24, r25
 146:	08 95       	ret
 148:	89 2f       	mov	r24, r25
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
 14a:	08 95       	ret

0000014c <can_get_data>:
 14c:	fc 01       	movw	r30, r24
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	aa ef       	ldi	r26, 0xFA	; 250
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	9c 91       	ld	r25, X
 156:	91 93       	st	Z+, r25
    {
        if (try_conf == 1)
        {
            Can_reset();
            conf_index++;
            ovrtim_flag=0;
 158:	8f 5f       	subi	r24, 0xFF	; 255
                {
                    if (ovrtim_flag==0)
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
                        ovrtim_flag++;
 15a:	88 30       	cpi	r24, 0x08	; 8
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
 15c:	d9 f7       	brne	.-10     	; 0x154 <can_get_data+0x8>

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
 15e:	08 95       	ret

00000160 <can_fixed_baudrate>:
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 d8 00 	sts	0x00D8, r24
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
                else
                {
                    ntq = NTQ_MIN;
 166:	82 e0       	ldi	r24, 0x02	; 2
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
 168:	80 93 e2 00 	sts	0x00E2, r24
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	80 93 e3 00 	sts	0x00E3, r24
        {
            Can_reset();
 172:	87 e3       	ldi	r24, 0x37	; 55
            conf_index++;
 174:	80 93 e4 00 	sts	0x00E4, r24
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret

0000017c <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 17c:	0e 94 b0 00 	call	0x160	; 0x160 <can_fixed_baudrate>
 180:	88 23       	and	r24, r24
 182:	49 f0       	breq	.+18     	; 0x196 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
 184:	0e 94 5d 00 	call	0xba	; 0xba <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
 188:	e8 ed       	ldi	r30, 0xD8	; 216
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	82 60       	ori	r24, 0x02	; 2
 190:	80 83       	st	Z, r24
    return (1);
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
 196:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
 198:	08 95       	ret

0000019a <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <can_cmd+0xa>
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <can_cmd+0xc>
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
 1aa:	8c 01       	movw	r16, r24
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
 1ac:	dc 01       	movw	r26, r24
 1ae:	11 96       	adiw	r26, 0x01	; 1
 1b0:	8c 91       	ld	r24, X
 1b2:	11 97       	sbiw	r26, 0x01	; 1
 1b4:	8c 30       	cpi	r24, 0x0C	; 12
 1b6:	b1 f4       	brne	.+44     	; 0x1e4 <can_cmd+0x4a>
  {
    if (cmd->status == MOB_PENDING)
 1b8:	19 96       	adiw	r26, 0x09	; 9
 1ba:	8c 91       	ld	r24, X
 1bc:	19 97       	sbiw	r26, 0x09	; 9
 1be:	80 36       	cpi	r24, 0x60	; 96
 1c0:	69 f4       	brne	.+26     	; 0x1dc <can_cmd+0x42>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
 1c2:	8c 91       	ld	r24, X
 1c4:	82 95       	swap	r24
 1c6:	80 7f       	andi	r24, 0xF0	; 240
 1c8:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
 1cc:	ef ee       	ldi	r30, 0xEF	; 239
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	8f 73       	andi	r24, 0x3F	; 63
 1d4:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure !
 1d6:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = 0;
 1da:	1c 92       	st	X, r1
    }
    cmd->status = STATUS_CLEARED; 
 1dc:	f8 01       	movw	r30, r16
 1de:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	28 c5       	rjmp	.+2640   	; 0xc34 <__stack+0x335>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
    mob_handle = can_get_mob_free();
 1e4:	0e 94 70 00 	call	0xe0	; 0xe0 <can_get_mob_free>
    if (mob_handle!= NO_MOB)
 1e8:	8f 3f       	cpi	r24, 0xFF	; 255
 1ea:	09 f4       	brne	.+2      	; 0x1ee <can_cmd+0x54>
 1ec:	1e c5       	rjmp	.+2620   	; 0xc2a <__stack+0x32b>
    {
      cmd->status = MOB_PENDING; 
 1ee:	90 e6       	ldi	r25, 0x60	; 96
 1f0:	d8 01       	movw	r26, r16
 1f2:	19 96       	adiw	r26, 0x09	; 9
 1f4:	9c 93       	st	X, r25
 1f6:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_handle;
 1f8:	8c 93       	st	X, r24
      Can_set_mob(mob_handle);
 1fa:	82 95       	swap	r24
 1fc:	80 7f       	andi	r24, 0xF0	; 240
 1fe:	80 93 ed 00 	sts	0x00ED, r24
      Can_clear_mob();
 202:	ee ee       	ldi	r30, 0xEE	; 238
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	11 92       	st	Z+, r1
 208:	e8 3f       	cpi	r30, 0xF8	; 248
 20a:	f1 05       	cpc	r31, r1
 20c:	e1 f7       	brne	.-8      	; 0x206 <can_cmd+0x6c>
          
      switch (cmd->cmd)
 20e:	f8 01       	movw	r30, r16
 210:	41 81       	ldd	r20, Z+1	; 0x01
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	fa 01       	movw	r30, r20
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	eb 30       	cpi	r30, 0x0B	; 11
 21a:	f1 05       	cpc	r31, r1
 21c:	08 f0       	brcs	.+2      	; 0x220 <can_cmd+0x86>
 21e:	01 c5       	rjmp	.+2562   	; 0xc22 <__stack+0x323>
 220:	e2 5c       	subi	r30, 0xC2	; 194
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 228:	d8 01       	movw	r26, r16
 22a:	16 96       	adiw	r26, 0x06	; 6
 22c:	8c 91       	ld	r24, X
 22e:	81 11       	cpse	r24, r1
 230:	f2 c3       	rjmp	.+2020   	; 0xa16 <__stack+0x117>
 232:	03 c4       	rjmp	.+2054   	; 0xa3a <__stack+0x13b>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 234:	f8 01       	movw	r30, r16
 236:	83 85       	ldd	r24, Z+11	; 0x0b
 238:	88 23       	and	r24, r24
 23a:	69 f1       	breq	.+90     	; 0x296 <can_cmd+0xfc>
 23c:	94 81       	ldd	r25, Z+4	; 0x04
 23e:	92 95       	swap	r25
 240:	96 95       	lsr	r25
 242:	97 70       	andi	r25, 0x07	; 7
 244:	85 81       	ldd	r24, Z+5	; 0x05
 246:	88 0f       	add	r24, r24
 248:	88 0f       	add	r24, r24
 24a:	88 0f       	add	r24, r24
 24c:	89 0f       	add	r24, r25
 24e:	80 93 f3 00 	sts	0x00F3, r24
 252:	93 81       	ldd	r25, Z+3	; 0x03
 254:	92 95       	swap	r25
 256:	96 95       	lsr	r25
 258:	97 70       	andi	r25, 0x07	; 7
 25a:	84 81       	ldd	r24, Z+4	; 0x04
 25c:	88 0f       	add	r24, r24
 25e:	88 0f       	add	r24, r24
 260:	88 0f       	add	r24, r24
 262:	89 0f       	add	r24, r25
 264:	80 93 f2 00 	sts	0x00F2, r24
 268:	92 81       	ldd	r25, Z+2	; 0x02
 26a:	92 95       	swap	r25
 26c:	96 95       	lsr	r25
 26e:	97 70       	andi	r25, 0x07	; 7
 270:	83 81       	ldd	r24, Z+3	; 0x03
 272:	88 0f       	add	r24, r24
 274:	88 0f       	add	r24, r24
 276:	88 0f       	add	r24, r24
 278:	89 0f       	add	r24, r25
 27a:	80 93 f1 00 	sts	0x00F1, r24
 27e:	82 81       	ldd	r24, Z+2	; 0x02
 280:	88 0f       	add	r24, r24
 282:	88 0f       	add	r24, r24
 284:	88 0f       	add	r24, r24
 286:	80 93 f0 00 	sts	0x00F0, r24
 28a:	ef ee       	ldi	r30, 0xEF	; 239
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 61       	ori	r24, 0x10	; 16
 292:	80 83       	st	Z, r24
 294:	17 c0       	rjmp	.+46     	; 0x2c4 <can_cmd+0x12a>
          else              { Can_set_std_id(cmd->id.std);}
 296:	82 81       	ldd	r24, Z+2	; 0x02
 298:	86 95       	lsr	r24
 29a:	86 95       	lsr	r24
 29c:	86 95       	lsr	r24
 29e:	93 81       	ldd	r25, Z+3	; 0x03
 2a0:	b0 e2       	ldi	r27, 0x20	; 32
 2a2:	9b 9f       	mul	r25, r27
 2a4:	80 0d       	add	r24, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	80 93 f3 00 	sts	0x00F3, r24
 2ac:	f8 01       	movw	r30, r16
 2ae:	82 81       	ldd	r24, Z+2	; 0x02
 2b0:	82 95       	swap	r24
 2b2:	88 0f       	add	r24, r24
 2b4:	80 7e       	andi	r24, 0xE0	; 224
 2b6:	80 93 f2 00 	sts	0x00F2, r24
 2ba:	ef ee       	ldi	r30, 0xEF	; 239
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	8f 7e       	andi	r24, 0xEF	; 239
 2c2:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 2c4:	d8 01       	movw	r26, r16
 2c6:	16 96       	adiw	r26, 0x06	; 6
 2c8:	8c 91       	ld	r24, X
 2ca:	88 23       	and	r24, r24
 2cc:	91 f0       	breq	.+36     	; 0x2f2 <can_cmd+0x158>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	2a ef       	ldi	r18, 0xFA	; 250
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	d8 01       	movw	r26, r16
 2d6:	17 96       	adiw	r26, 0x07	; 7
 2d8:	ed 91       	ld	r30, X+
 2da:	fc 91       	ld	r31, X
 2dc:	18 97       	sbiw	r26, 0x08	; 8
 2de:	e8 0f       	add	r30, r24
 2e0:	f1 1d       	adc	r31, r1
 2e2:	90 81       	ld	r25, Z
 2e4:	f9 01       	movw	r30, r18
 2e6:	90 83       	st	Z, r25
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	16 96       	adiw	r26, 0x06	; 6
 2ec:	9c 91       	ld	r25, X
 2ee:	89 17       	cp	r24, r25
 2f0:	88 f3       	brcs	.-30     	; 0x2d4 <can_cmd+0x13a>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
 2f2:	d8 01       	movw	r26, r16
 2f4:	1a 96       	adiw	r26, 0x0a	; 10
 2f6:	8c 91       	ld	r24, X
 2f8:	88 23       	and	r24, r24
 2fa:	31 f0       	breq	.+12     	; 0x308 <can_cmd+0x16e>
 2fc:	e0 ef       	ldi	r30, 0xF0	; 240
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	84 60       	ori	r24, 0x04	; 4
 304:	80 83       	st	Z, r24
 306:	05 c0       	rjmp	.+10     	; 0x312 <can_cmd+0x178>
            else Can_clear_rtr();    
 308:	e0 ef       	ldi	r30, 0xF0	; 240
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	8b 7f       	andi	r24, 0xFB	; 251
 310:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 312:	ef ee       	ldi	r30, 0xEF	; 239
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	90 81       	ld	r25, Z
 318:	d8 01       	movw	r26, r16
 31a:	16 96       	adiw	r26, 0x06	; 6
 31c:	8c 91       	ld	r24, X
 31e:	89 2b       	or	r24, r25
 320:	80 83       	st	Z, r24
          Can_config_tx();
 322:	80 81       	ld	r24, Z
 324:	8f 73       	andi	r24, 0x3F	; 63
 326:	80 83       	st	Z, r24
 328:	80 81       	ld	r24, Z
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 32e:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 330:	81 c4       	rjmp	.+2306   	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 332:	f8 01       	movw	r30, r16
 334:	83 85       	ldd	r24, Z+11	; 0x0b
 336:	88 23       	and	r24, r24
 338:	69 f1       	breq	.+90     	; 0x394 <can_cmd+0x1fa>
 33a:	94 81       	ldd	r25, Z+4	; 0x04
 33c:	92 95       	swap	r25
 33e:	96 95       	lsr	r25
 340:	97 70       	andi	r25, 0x07	; 7
 342:	85 81       	ldd	r24, Z+5	; 0x05
 344:	88 0f       	add	r24, r24
 346:	88 0f       	add	r24, r24
 348:	88 0f       	add	r24, r24
 34a:	89 0f       	add	r24, r25
 34c:	80 93 f3 00 	sts	0x00F3, r24
 350:	93 81       	ldd	r25, Z+3	; 0x03
 352:	92 95       	swap	r25
 354:	96 95       	lsr	r25
 356:	97 70       	andi	r25, 0x07	; 7
 358:	84 81       	ldd	r24, Z+4	; 0x04
 35a:	88 0f       	add	r24, r24
 35c:	88 0f       	add	r24, r24
 35e:	88 0f       	add	r24, r24
 360:	89 0f       	add	r24, r25
 362:	80 93 f2 00 	sts	0x00F2, r24
 366:	92 81       	ldd	r25, Z+2	; 0x02
 368:	92 95       	swap	r25
 36a:	96 95       	lsr	r25
 36c:	97 70       	andi	r25, 0x07	; 7
 36e:	83 81       	ldd	r24, Z+3	; 0x03
 370:	88 0f       	add	r24, r24
 372:	88 0f       	add	r24, r24
 374:	88 0f       	add	r24, r24
 376:	89 0f       	add	r24, r25
 378:	80 93 f1 00 	sts	0x00F1, r24
 37c:	82 81       	ldd	r24, Z+2	; 0x02
 37e:	88 0f       	add	r24, r24
 380:	88 0f       	add	r24, r24
 382:	88 0f       	add	r24, r24
 384:	80 93 f0 00 	sts	0x00F0, r24
 388:	ef ee       	ldi	r30, 0xEF	; 239
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	80 61       	ori	r24, 0x10	; 16
 390:	80 83       	st	Z, r24
 392:	17 c0       	rjmp	.+46     	; 0x3c2 <can_cmd+0x228>
          else              { Can_set_std_id(cmd->id.std);}
 394:	82 81       	ldd	r24, Z+2	; 0x02
 396:	86 95       	lsr	r24
 398:	86 95       	lsr	r24
 39a:	86 95       	lsr	r24
 39c:	93 81       	ldd	r25, Z+3	; 0x03
 39e:	b0 e2       	ldi	r27, 0x20	; 32
 3a0:	9b 9f       	mul	r25, r27
 3a2:	80 0d       	add	r24, r0
 3a4:	11 24       	eor	r1, r1
 3a6:	80 93 f3 00 	sts	0x00F3, r24
 3aa:	f8 01       	movw	r30, r16
 3ac:	82 81       	ldd	r24, Z+2	; 0x02
 3ae:	82 95       	swap	r24
 3b0:	88 0f       	add	r24, r24
 3b2:	80 7e       	andi	r24, 0xE0	; 224
 3b4:	80 93 f2 00 	sts	0x00F2, r24
 3b8:	ef ee       	ldi	r30, 0xEF	; 239
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	8f 7e       	andi	r24, 0xEF	; 239
 3c0:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 3c2:	d8 01       	movw	r26, r16
 3c4:	16 96       	adiw	r26, 0x06	; 6
 3c6:	8c 91       	ld	r24, X
 3c8:	88 23       	and	r24, r24
 3ca:	91 f0       	breq	.+36     	; 0x3f0 <can_cmd+0x256>
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	2a ef       	ldi	r18, 0xFA	; 250
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	d8 01       	movw	r26, r16
 3d4:	17 96       	adiw	r26, 0x07	; 7
 3d6:	ed 91       	ld	r30, X+
 3d8:	fc 91       	ld	r31, X
 3da:	18 97       	sbiw	r26, 0x08	; 8
 3dc:	e8 0f       	add	r30, r24
 3de:	f1 1d       	adc	r31, r1
 3e0:	90 81       	ld	r25, Z
 3e2:	f9 01       	movw	r30, r18
 3e4:	90 83       	st	Z, r25
 3e6:	8f 5f       	subi	r24, 0xFF	; 255
 3e8:	16 96       	adiw	r26, 0x06	; 6
 3ea:	9c 91       	ld	r25, X
 3ec:	89 17       	cp	r24, r25
 3ee:	88 f3       	brcs	.-30     	; 0x3d2 <can_cmd+0x238>
          cmd->ctrl.rtr=0; Can_clear_rtr();
 3f0:	d8 01       	movw	r26, r16
 3f2:	1a 96       	adiw	r26, 0x0a	; 10
 3f4:	1c 92       	st	X, r1
 3f6:	1a 97       	sbiw	r26, 0x0a	; 10
 3f8:	e0 ef       	ldi	r30, 0xF0	; 240
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	8b 7f       	andi	r24, 0xFB	; 251
 400:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 402:	ef ee       	ldi	r30, 0xEF	; 239
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	90 81       	ld	r25, Z
 408:	16 96       	adiw	r26, 0x06	; 6
 40a:	8c 91       	ld	r24, X
 40c:	89 2b       	or	r24, r25
 40e:	80 83       	st	Z, r24
          Can_config_tx();
 410:	80 81       	ld	r24, Z
 412:	8f 73       	andi	r24, 0x3F	; 63
 414:	80 83       	st	Z, r24
 416:	80 81       	ld	r24, Z
 418:	80 64       	ori	r24, 0x40	; 64
 41a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 41c:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 41e:	0a c4       	rjmp	.+2068   	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 420:	f8 01       	movw	r30, r16
 422:	83 85       	ldd	r24, Z+11	; 0x0b
 424:	88 23       	and	r24, r24
 426:	69 f1       	breq	.+90     	; 0x482 <can_cmd+0x2e8>
 428:	94 81       	ldd	r25, Z+4	; 0x04
 42a:	92 95       	swap	r25
 42c:	96 95       	lsr	r25
 42e:	97 70       	andi	r25, 0x07	; 7
 430:	85 81       	ldd	r24, Z+5	; 0x05
 432:	88 0f       	add	r24, r24
 434:	88 0f       	add	r24, r24
 436:	88 0f       	add	r24, r24
 438:	89 0f       	add	r24, r25
 43a:	80 93 f3 00 	sts	0x00F3, r24
 43e:	93 81       	ldd	r25, Z+3	; 0x03
 440:	92 95       	swap	r25
 442:	96 95       	lsr	r25
 444:	97 70       	andi	r25, 0x07	; 7
 446:	84 81       	ldd	r24, Z+4	; 0x04
 448:	88 0f       	add	r24, r24
 44a:	88 0f       	add	r24, r24
 44c:	88 0f       	add	r24, r24
 44e:	89 0f       	add	r24, r25
 450:	80 93 f2 00 	sts	0x00F2, r24
 454:	92 81       	ldd	r25, Z+2	; 0x02
 456:	92 95       	swap	r25
 458:	96 95       	lsr	r25
 45a:	97 70       	andi	r25, 0x07	; 7
 45c:	83 81       	ldd	r24, Z+3	; 0x03
 45e:	88 0f       	add	r24, r24
 460:	88 0f       	add	r24, r24
 462:	88 0f       	add	r24, r24
 464:	89 0f       	add	r24, r25
 466:	80 93 f1 00 	sts	0x00F1, r24
 46a:	82 81       	ldd	r24, Z+2	; 0x02
 46c:	88 0f       	add	r24, r24
 46e:	88 0f       	add	r24, r24
 470:	88 0f       	add	r24, r24
 472:	80 93 f0 00 	sts	0x00F0, r24
 476:	ef ee       	ldi	r30, 0xEF	; 239
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	80 61       	ori	r24, 0x10	; 16
 47e:	80 83       	st	Z, r24
 480:	17 c0       	rjmp	.+46     	; 0x4b0 <can_cmd+0x316>
          else              { Can_set_std_id(cmd->id.std);}
 482:	82 81       	ldd	r24, Z+2	; 0x02
 484:	86 95       	lsr	r24
 486:	86 95       	lsr	r24
 488:	86 95       	lsr	r24
 48a:	93 81       	ldd	r25, Z+3	; 0x03
 48c:	b0 e2       	ldi	r27, 0x20	; 32
 48e:	9b 9f       	mul	r25, r27
 490:	80 0d       	add	r24, r0
 492:	11 24       	eor	r1, r1
 494:	80 93 f3 00 	sts	0x00F3, r24
 498:	f8 01       	movw	r30, r16
 49a:	82 81       	ldd	r24, Z+2	; 0x02
 49c:	82 95       	swap	r24
 49e:	88 0f       	add	r24, r24
 4a0:	80 7e       	andi	r24, 0xE0	; 224
 4a2:	80 93 f2 00 	sts	0x00F2, r24
 4a6:	ef ee       	ldi	r30, 0xEF	; 239
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	8f 7e       	andi	r24, 0xEF	; 239
 4ae:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	d8 01       	movw	r26, r16
 4b4:	1a 96       	adiw	r26, 0x0a	; 10
 4b6:	8c 93       	st	X, r24
 4b8:	1a 97       	sbiw	r26, 0x0a	; 10
 4ba:	e0 ef       	ldi	r30, 0xF0	; 240
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	84 60       	ori	r24, 0x04	; 4
 4c2:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 4c4:	ef ee       	ldi	r30, 0xEF	; 239
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	90 81       	ld	r25, Z
 4ca:	16 96       	adiw	r26, 0x06	; 6
 4cc:	8c 91       	ld	r24, X
 4ce:	89 2b       	or	r24, r25
 4d0:	80 83       	st	Z, r24
          Can_config_tx();
 4d2:	80 81       	ld	r24, Z
 4d4:	8f 73       	andi	r24, 0x3F	; 63
 4d6:	80 83       	st	Z, r24
 4d8:	80 81       	ld	r24, Z
 4da:	80 64       	ori	r24, 0x40	; 64
 4dc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 4de:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
 4e0:	a9 c3       	rjmp	.+1874   	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 4e2:	19 82       	std	Y+1, r1	; 0x01
 4e4:	1a 82       	std	Y+2, r1	; 0x02
 4e6:	1b 82       	std	Y+3, r1	; 0x03
 4e8:	1c 82       	std	Y+4, r1	; 0x04
 4ea:	10 92 f7 00 	sts	0x00F7, r1
 4ee:	9a 81       	ldd	r25, Y+2	; 0x02
 4f0:	92 95       	swap	r25
 4f2:	96 95       	lsr	r25
 4f4:	97 70       	andi	r25, 0x07	; 7
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	88 0f       	add	r24, r24
 4fa:	88 0f       	add	r24, r24
 4fc:	88 0f       	add	r24, r24
 4fe:	89 0f       	add	r24, r25
 500:	80 93 f6 00 	sts	0x00F6, r24
 504:	99 81       	ldd	r25, Y+1	; 0x01
 506:	92 95       	swap	r25
 508:	96 95       	lsr	r25
 50a:	97 70       	andi	r25, 0x07	; 7
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	88 0f       	add	r24, r24
 510:	88 0f       	add	r24, r24
 512:	88 0f       	add	r24, r24
 514:	89 0f       	add	r24, r25
 516:	80 93 f5 00 	sts	0x00F5, r24
 51a:	89 81       	ldd	r24, Y+1	; 0x01
 51c:	88 0f       	add	r24, r24
 51e:	88 0f       	add	r24, r24
 520:	88 0f       	add	r24, r24
 522:	24 ef       	ldi	r18, 0xF4	; 244
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	f9 01       	movw	r30, r18
 528:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 52a:	ef ee       	ldi	r30, 0xEF	; 239
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	90 81       	ld	r25, Z
 530:	d8 01       	movw	r26, r16
 532:	16 96       	adiw	r26, 0x06	; 6
 534:	8c 91       	ld	r24, X
 536:	89 2b       	or	r24, r25
 538:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 53a:	d9 01       	movw	r26, r18
 53c:	8c 91       	ld	r24, X
 53e:	8b 7f       	andi	r24, 0xFB	; 251
 540:	8c 93       	st	X, r24
          Can_clear_idemsk();
 542:	8c 91       	ld	r24, X
 544:	8e 7f       	andi	r24, 0xFE	; 254
 546:	8c 93       	st	X, r24
          Can_config_rx();       
 548:	80 81       	ld	r24, Z
 54a:	8f 73       	andi	r24, 0x3F	; 63
 54c:	80 83       	st	Z, r24
 54e:	80 81       	ld	r24, Z
 550:	80 68       	ori	r24, 0x80	; 128
 552:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 554:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 556:	6e c3       	rjmp	.+1756   	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_RX_DATA:
		
          u32_temp = 0; 
 558:	19 82       	std	Y+1, r1	; 0x01
 55a:	1a 82       	std	Y+2, r1	; 0x02
 55c:	1b 82       	std	Y+3, r1	; 0x03
 55e:	1c 82       	std	Y+4, r1	; 0x04
		  Can_set_std_msk(u32_temp);
 560:	47 ef       	ldi	r20, 0xF7	; 247
 562:	50 e0       	ldi	r21, 0x00	; 0
 564:	fa 01       	movw	r30, r20
 566:	10 82       	st	Z, r1
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	82 95       	swap	r24
 56c:	88 0f       	add	r24, r24
 56e:	80 7e       	andi	r24, 0xE0	; 224
 570:	26 ef       	ldi	r18, 0xF6	; 246
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	d9 01       	movw	r26, r18
 576:	8c 93       	st	X, r24
		  
		  u32_temp = 10;
 578:	8a e0       	ldi	r24, 0x0A	; 10
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	a0 e0       	ldi	r26, 0x00	; 0
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	89 83       	std	Y+1, r24	; 0x01
 582:	9a 83       	std	Y+2, r25	; 0x02
 584:	ab 83       	std	Y+3, r26	; 0x03
 586:	bc 83       	std	Y+4, r27	; 0x04
		  Can_set_std_id(u32_temp);
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	80 93 f3 00 	sts	0x00F3, r24
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	82 95       	swap	r24
 592:	88 0f       	add	r24, r24
 594:	80 7e       	andi	r24, 0xE0	; 224
 596:	80 93 f2 00 	sts	0x00F2, r24
 59a:	ef ee       	ldi	r30, 0xEF	; 239
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	8f 7e       	andi	r24, 0xEF	; 239
 5a2:	80 83       	st	Z, r24
		  
		  u32_temp = 0;
 5a4:	19 82       	std	Y+1, r1	; 0x01
 5a6:	1a 82       	std	Y+2, r1	; 0x02
 5a8:	1b 82       	std	Y+3, r1	; 0x03
 5aa:	1c 82       	std	Y+4, r1	; 0x04
		  Can_set_ext_msk(u32_temp);
 5ac:	da 01       	movw	r26, r20
 5ae:	1c 92       	st	X, r1
 5b0:	9a 81       	ldd	r25, Y+2	; 0x02
 5b2:	92 95       	swap	r25
 5b4:	96 95       	lsr	r25
 5b6:	97 70       	andi	r25, 0x07	; 7
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	88 0f       	add	r24, r24
 5bc:	88 0f       	add	r24, r24
 5be:	88 0f       	add	r24, r24
 5c0:	89 0f       	add	r24, r25
 5c2:	d9 01       	movw	r26, r18
 5c4:	8c 93       	st	X, r24
 5c6:	99 81       	ldd	r25, Y+1	; 0x01
 5c8:	92 95       	swap	r25
 5ca:	96 95       	lsr	r25
 5cc:	97 70       	andi	r25, 0x07	; 7
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	88 0f       	add	r24, r24
 5d2:	88 0f       	add	r24, r24
 5d4:	88 0f       	add	r24, r24
 5d6:	89 0f       	add	r24, r25
 5d8:	80 93 f5 00 	sts	0x00F5, r24
 5dc:	89 81       	ldd	r24, Y+1	; 0x01
 5de:	88 0f       	add	r24, r24
 5e0:	88 0f       	add	r24, r24
 5e2:	88 0f       	add	r24, r24
 5e4:	44 ef       	ldi	r20, 0xF4	; 244
 5e6:	50 e0       	ldi	r21, 0x00	; 0
 5e8:	da 01       	movw	r26, r20
 5ea:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
 5ec:	90 81       	ld	r25, Z
 5ee:	d8 01       	movw	r26, r16
 5f0:	16 96       	adiw	r26, 0x06	; 6
 5f2:	8c 91       	ld	r24, X
 5f4:	16 97       	sbiw	r26, 0x06	; 6
 5f6:	89 2b       	or	r24, r25
 5f8:	80 83       	st	Z, r24
		  
          cmd->ctrl.rtr=0; 
 5fa:	1a 96       	adiw	r26, 0x0a	; 10
 5fc:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
 5fe:	da 01       	movw	r26, r20
 600:	8c 91       	ld	r24, X
 602:	84 60       	ori	r24, 0x04	; 4
 604:	8c 93       	st	X, r24
		  Can_clear_rtr();
 606:	80 ef       	ldi	r24, 0xF0	; 240
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	dc 01       	movw	r26, r24
 60c:	2c 91       	ld	r18, X
 60e:	2b 7f       	andi	r18, 0xFB	; 251
 610:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
 612:	80 81       	ld	r24, Z
 614:	8f 7e       	andi	r24, 0xEF	; 239
 616:	80 83       	st	Z, r24
          Can_clear_idemsk();
 618:	da 01       	movw	r26, r20
 61a:	8c 91       	ld	r24, X
 61c:	8e 7f       	andi	r24, 0xFE	; 254
 61e:	8c 93       	st	X, r24
          Can_config_rx();       
 620:	80 81       	ld	r24, Z
 622:	8f 73       	andi	r24, 0x3F	; 63
 624:	80 83       	st	Z, r24
 626:	80 81       	ld	r24, Z
 628:	80 68       	ori	r24, 0x80	; 128
 62a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 62c:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 62e:	02 c3       	rjmp	.+1540   	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
 630:	19 82       	std	Y+1, r1	; 0x01
 632:	1a 82       	std	Y+2, r1	; 0x02
 634:	1b 82       	std	Y+3, r1	; 0x03
 636:	1c 82       	std	Y+4, r1	; 0x04
 638:	10 92 f7 00 	sts	0x00F7, r1
 63c:	9a 81       	ldd	r25, Y+2	; 0x02
 63e:	92 95       	swap	r25
 640:	96 95       	lsr	r25
 642:	97 70       	andi	r25, 0x07	; 7
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	88 0f       	add	r24, r24
 648:	88 0f       	add	r24, r24
 64a:	88 0f       	add	r24, r24
 64c:	89 0f       	add	r24, r25
 64e:	80 93 f6 00 	sts	0x00F6, r24
 652:	99 81       	ldd	r25, Y+1	; 0x01
 654:	92 95       	swap	r25
 656:	96 95       	lsr	r25
 658:	97 70       	andi	r25, 0x07	; 7
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	88 0f       	add	r24, r24
 65e:	88 0f       	add	r24, r24
 660:	88 0f       	add	r24, r24
 662:	89 0f       	add	r24, r25
 664:	80 93 f5 00 	sts	0x00F5, r24
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	88 0f       	add	r24, r24
 66c:	88 0f       	add	r24, r24
 66e:	88 0f       	add	r24, r24
 670:	44 ef       	ldi	r20, 0xF4	; 244
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	fa 01       	movw	r30, r20
 676:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
 678:	ef ee       	ldi	r30, 0xEF	; 239
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	90 81       	ld	r25, Z
 67e:	d8 01       	movw	r26, r16
 680:	16 96       	adiw	r26, 0x06	; 6
 682:	8c 91       	ld	r24, X
 684:	16 97       	sbiw	r26, 0x06	; 6
 686:	89 2b       	or	r24, r25
 688:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	1a 96       	adiw	r26, 0x0a	; 10
 68e:	8c 93       	st	X, r24
 690:	da 01       	movw	r26, r20
 692:	8c 91       	ld	r24, X
 694:	84 60       	ori	r24, 0x04	; 4
 696:	8c 93       	st	X, r24
 698:	80 ef       	ldi	r24, 0xF0	; 240
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	dc 01       	movw	r26, r24
 69e:	2c 91       	ld	r18, X
 6a0:	24 60       	ori	r18, 0x04	; 4
 6a2:	2c 93       	st	X, r18
          Can_clear_rplv();
 6a4:	80 81       	ld	r24, Z
 6a6:	8f 7d       	andi	r24, 0xDF	; 223
 6a8:	80 83       	st	Z, r24
          Can_clear_idemsk();
 6aa:	da 01       	movw	r26, r20
 6ac:	8c 91       	ld	r24, X
 6ae:	8e 7f       	andi	r24, 0xFE	; 254
 6b0:	8c 93       	st	X, r24
          Can_config_rx();       
 6b2:	80 81       	ld	r24, Z
 6b4:	8f 73       	andi	r24, 0x3F	; 63
 6b6:	80 83       	st	Z, r24
 6b8:	80 81       	ld	r24, Z
 6ba:	80 68       	ori	r24, 0x80	; 128
 6bc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 6be:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 6c0:	b9 c2       	rjmp	.+1394   	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 6c2:	f8 01       	movw	r30, r16
 6c4:	83 85       	ldd	r24, Z+11	; 0x0b
 6c6:	88 23       	and	r24, r24
 6c8:	69 f1       	breq	.+90     	; 0x724 <can_cmd+0x58a>
 6ca:	94 81       	ldd	r25, Z+4	; 0x04
 6cc:	92 95       	swap	r25
 6ce:	96 95       	lsr	r25
 6d0:	97 70       	andi	r25, 0x07	; 7
 6d2:	85 81       	ldd	r24, Z+5	; 0x05
 6d4:	88 0f       	add	r24, r24
 6d6:	88 0f       	add	r24, r24
 6d8:	88 0f       	add	r24, r24
 6da:	89 0f       	add	r24, r25
 6dc:	80 93 f3 00 	sts	0x00F3, r24
 6e0:	93 81       	ldd	r25, Z+3	; 0x03
 6e2:	92 95       	swap	r25
 6e4:	96 95       	lsr	r25
 6e6:	97 70       	andi	r25, 0x07	; 7
 6e8:	84 81       	ldd	r24, Z+4	; 0x04
 6ea:	88 0f       	add	r24, r24
 6ec:	88 0f       	add	r24, r24
 6ee:	88 0f       	add	r24, r24
 6f0:	89 0f       	add	r24, r25
 6f2:	80 93 f2 00 	sts	0x00F2, r24
 6f6:	92 81       	ldd	r25, Z+2	; 0x02
 6f8:	92 95       	swap	r25
 6fa:	96 95       	lsr	r25
 6fc:	97 70       	andi	r25, 0x07	; 7
 6fe:	83 81       	ldd	r24, Z+3	; 0x03
 700:	88 0f       	add	r24, r24
 702:	88 0f       	add	r24, r24
 704:	88 0f       	add	r24, r24
 706:	89 0f       	add	r24, r25
 708:	80 93 f1 00 	sts	0x00F1, r24
 70c:	82 81       	ldd	r24, Z+2	; 0x02
 70e:	88 0f       	add	r24, r24
 710:	88 0f       	add	r24, r24
 712:	88 0f       	add	r24, r24
 714:	80 93 f0 00 	sts	0x00F0, r24
 718:	ef ee       	ldi	r30, 0xEF	; 239
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	80 81       	ld	r24, Z
 71e:	80 61       	ori	r24, 0x10	; 16
 720:	80 83       	st	Z, r24
 722:	17 c0       	rjmp	.+46     	; 0x752 <can_cmd+0x5b8>
          else              { Can_set_std_id(cmd->id.std);}
 724:	82 81       	ldd	r24, Z+2	; 0x02
 726:	86 95       	lsr	r24
 728:	86 95       	lsr	r24
 72a:	86 95       	lsr	r24
 72c:	93 81       	ldd	r25, Z+3	; 0x03
 72e:	b0 e2       	ldi	r27, 0x20	; 32
 730:	9b 9f       	mul	r25, r27
 732:	80 0d       	add	r24, r0
 734:	11 24       	eor	r1, r1
 736:	80 93 f3 00 	sts	0x00F3, r24
 73a:	f8 01       	movw	r30, r16
 73c:	82 81       	ldd	r24, Z+2	; 0x02
 73e:	82 95       	swap	r24
 740:	88 0f       	add	r24, r24
 742:	80 7e       	andi	r24, 0xE0	; 224
 744:	80 93 f2 00 	sts	0x00F2, r24
 748:	ef ee       	ldi	r30, 0xEF	; 239
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	8f 7e       	andi	r24, 0xEF	; 239
 750:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	9f ef       	ldi	r25, 0xFF	; 255
 756:	dc 01       	movw	r26, r24
 758:	89 83       	std	Y+1, r24	; 0x01
 75a:	9a 83       	std	Y+2, r25	; 0x02
 75c:	ab 83       	std	Y+3, r26	; 0x03
 75e:	bc 83       	std	Y+4, r27	; 0x04
 760:	80 93 f7 00 	sts	0x00F7, r24
 764:	9a 81       	ldd	r25, Y+2	; 0x02
 766:	92 95       	swap	r25
 768:	96 95       	lsr	r25
 76a:	97 70       	andi	r25, 0x07	; 7
 76c:	8b 81       	ldd	r24, Y+3	; 0x03
 76e:	88 0f       	add	r24, r24
 770:	88 0f       	add	r24, r24
 772:	88 0f       	add	r24, r24
 774:	89 0f       	add	r24, r25
 776:	80 93 f6 00 	sts	0x00F6, r24
 77a:	99 81       	ldd	r25, Y+1	; 0x01
 77c:	92 95       	swap	r25
 77e:	96 95       	lsr	r25
 780:	97 70       	andi	r25, 0x07	; 7
 782:	8a 81       	ldd	r24, Y+2	; 0x02
 784:	88 0f       	add	r24, r24
 786:	88 0f       	add	r24, r24
 788:	88 0f       	add	r24, r24
 78a:	89 0f       	add	r24, r25
 78c:	80 93 f5 00 	sts	0x00F5, r24
 790:	89 81       	ldd	r24, Y+1	; 0x01
 792:	88 0f       	add	r24, r24
 794:	88 0f       	add	r24, r24
 796:	88 0f       	add	r24, r24
 798:	24 ef       	ldi	r18, 0xF4	; 244
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	d9 01       	movw	r26, r18
 79e:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 7a0:	ef ee       	ldi	r30, 0xEF	; 239
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	90 81       	ld	r25, Z
 7a6:	d8 01       	movw	r26, r16
 7a8:	16 96       	adiw	r26, 0x06	; 6
 7aa:	8c 91       	ld	r24, X
 7ac:	89 2b       	or	r24, r25
 7ae:	80 83       	st	Z, r24
          Can_clear_rtrmsk();
 7b0:	d9 01       	movw	r26, r18
 7b2:	8c 91       	ld	r24, X
 7b4:	8b 7f       	andi	r24, 0xFB	; 251
 7b6:	8c 93       	st	X, r24
          Can_set_idemsk();
 7b8:	8c 91       	ld	r24, X
 7ba:	81 60       	ori	r24, 0x01	; 1
 7bc:	8c 93       	st	X, r24
          Can_config_rx();       
 7be:	80 81       	ld	r24, Z
 7c0:	8f 73       	andi	r24, 0x3F	; 63
 7c2:	80 83       	st	Z, r24
 7c4:	80 81       	ld	r24, Z
 7c6:	80 68       	ori	r24, 0x80	; 128
 7c8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 7cc:	33 c2       	rjmp	.+1126   	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 7ce:	f8 01       	movw	r30, r16
 7d0:	83 85       	ldd	r24, Z+11	; 0x0b
 7d2:	88 23       	and	r24, r24
 7d4:	69 f1       	breq	.+90     	; 0x830 <can_cmd+0x696>
 7d6:	94 81       	ldd	r25, Z+4	; 0x04
 7d8:	92 95       	swap	r25
 7da:	96 95       	lsr	r25
 7dc:	97 70       	andi	r25, 0x07	; 7
 7de:	85 81       	ldd	r24, Z+5	; 0x05
 7e0:	88 0f       	add	r24, r24
 7e2:	88 0f       	add	r24, r24
 7e4:	88 0f       	add	r24, r24
 7e6:	89 0f       	add	r24, r25
 7e8:	80 93 f3 00 	sts	0x00F3, r24
 7ec:	93 81       	ldd	r25, Z+3	; 0x03
 7ee:	92 95       	swap	r25
 7f0:	96 95       	lsr	r25
 7f2:	97 70       	andi	r25, 0x07	; 7
 7f4:	84 81       	ldd	r24, Z+4	; 0x04
 7f6:	88 0f       	add	r24, r24
 7f8:	88 0f       	add	r24, r24
 7fa:	88 0f       	add	r24, r24
 7fc:	89 0f       	add	r24, r25
 7fe:	80 93 f2 00 	sts	0x00F2, r24
 802:	92 81       	ldd	r25, Z+2	; 0x02
 804:	92 95       	swap	r25
 806:	96 95       	lsr	r25
 808:	97 70       	andi	r25, 0x07	; 7
 80a:	83 81       	ldd	r24, Z+3	; 0x03
 80c:	88 0f       	add	r24, r24
 80e:	88 0f       	add	r24, r24
 810:	88 0f       	add	r24, r24
 812:	89 0f       	add	r24, r25
 814:	80 93 f1 00 	sts	0x00F1, r24
 818:	82 81       	ldd	r24, Z+2	; 0x02
 81a:	88 0f       	add	r24, r24
 81c:	88 0f       	add	r24, r24
 81e:	88 0f       	add	r24, r24
 820:	80 93 f0 00 	sts	0x00F0, r24
 824:	ef ee       	ldi	r30, 0xEF	; 239
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	80 61       	ori	r24, 0x10	; 16
 82c:	80 83       	st	Z, r24
 82e:	17 c0       	rjmp	.+46     	; 0x85e <can_cmd+0x6c4>
          else              { Can_set_std_id(cmd->id.std);}
 830:	82 81       	ldd	r24, Z+2	; 0x02
 832:	86 95       	lsr	r24
 834:	86 95       	lsr	r24
 836:	86 95       	lsr	r24
 838:	93 81       	ldd	r25, Z+3	; 0x03
 83a:	b0 e2       	ldi	r27, 0x20	; 32
 83c:	9b 9f       	mul	r25, r27
 83e:	80 0d       	add	r24, r0
 840:	11 24       	eor	r1, r1
 842:	80 93 f3 00 	sts	0x00F3, r24
 846:	f8 01       	movw	r30, r16
 848:	82 81       	ldd	r24, Z+2	; 0x02
 84a:	82 95       	swap	r24
 84c:	88 0f       	add	r24, r24
 84e:	80 7e       	andi	r24, 0xE0	; 224
 850:	80 93 f2 00 	sts	0x00F2, r24
 854:	ef ee       	ldi	r30, 0xEF	; 239
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	80 81       	ld	r24, Z
 85a:	8f 7e       	andi	r24, 0xEF	; 239
 85c:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	9f ef       	ldi	r25, 0xFF	; 255
 862:	dc 01       	movw	r26, r24
 864:	89 83       	std	Y+1, r24	; 0x01
 866:	9a 83       	std	Y+2, r25	; 0x02
 868:	ab 83       	std	Y+3, r26	; 0x03
 86a:	bc 83       	std	Y+4, r27	; 0x04
 86c:	80 93 f7 00 	sts	0x00F7, r24
 870:	9a 81       	ldd	r25, Y+2	; 0x02
 872:	92 95       	swap	r25
 874:	96 95       	lsr	r25
 876:	97 70       	andi	r25, 0x07	; 7
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	88 0f       	add	r24, r24
 87c:	88 0f       	add	r24, r24
 87e:	88 0f       	add	r24, r24
 880:	89 0f       	add	r24, r25
 882:	80 93 f6 00 	sts	0x00F6, r24
 886:	99 81       	ldd	r25, Y+1	; 0x01
 888:	92 95       	swap	r25
 88a:	96 95       	lsr	r25
 88c:	97 70       	andi	r25, 0x07	; 7
 88e:	8a 81       	ldd	r24, Y+2	; 0x02
 890:	88 0f       	add	r24, r24
 892:	88 0f       	add	r24, r24
 894:	88 0f       	add	r24, r24
 896:	89 0f       	add	r24, r25
 898:	80 93 f5 00 	sts	0x00F5, r24
 89c:	89 81       	ldd	r24, Y+1	; 0x01
 89e:	88 0f       	add	r24, r24
 8a0:	88 0f       	add	r24, r24
 8a2:	88 0f       	add	r24, r24
 8a4:	44 ef       	ldi	r20, 0xF4	; 244
 8a6:	50 e0       	ldi	r21, 0x00	; 0
 8a8:	da 01       	movw	r26, r20
 8aa:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 8ac:	ef ee       	ldi	r30, 0xEF	; 239
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	90 81       	ld	r25, Z
 8b2:	d8 01       	movw	r26, r16
 8b4:	16 96       	adiw	r26, 0x06	; 6
 8b6:	8c 91       	ld	r24, X
 8b8:	16 97       	sbiw	r26, 0x06	; 6
 8ba:	89 2b       	or	r24, r25
 8bc:	80 83       	st	Z, r24
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
 8be:	1a 96       	adiw	r26, 0x0a	; 10
 8c0:	1c 92       	st	X, r1
 8c2:	da 01       	movw	r26, r20
 8c4:	8c 91       	ld	r24, X
 8c6:	84 60       	ori	r24, 0x04	; 4
 8c8:	8c 93       	st	X, r24
 8ca:	80 ef       	ldi	r24, 0xF0	; 240
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	dc 01       	movw	r26, r24
 8d0:	2c 91       	ld	r18, X
 8d2:	2b 7f       	andi	r18, 0xFB	; 251
 8d4:	2c 93       	st	X, r18
          Can_set_idemsk();
 8d6:	da 01       	movw	r26, r20
 8d8:	8c 91       	ld	r24, X
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	8c 93       	st	X, r24
          Can_config_rx();       
 8de:	80 81       	ld	r24, Z
 8e0:	8f 73       	andi	r24, 0x3F	; 63
 8e2:	80 83       	st	Z, r24
 8e4:	80 81       	ld	r24, Z
 8e6:	80 68       	ori	r24, 0x80	; 128
 8e8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 8ea:	80 e0       	ldi	r24, 0x00	; 0
          u32_temp=~0; Can_set_ext_msk(u32_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 8ec:	a3 c1       	rjmp	.+838    	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 8ee:	f8 01       	movw	r30, r16
 8f0:	83 85       	ldd	r24, Z+11	; 0x0b
 8f2:	88 23       	and	r24, r24
 8f4:	69 f1       	breq	.+90     	; 0x950 <__stack+0x51>
 8f6:	94 81       	ldd	r25, Z+4	; 0x04
 8f8:	92 95       	swap	r25
 8fa:	96 95       	lsr	r25
 8fc:	97 70       	andi	r25, 0x07	; 7
 8fe:	85 81       	ldd	r24, Z+5	; 0x05
 900:	88 0f       	add	r24, r24
 902:	88 0f       	add	r24, r24
 904:	88 0f       	add	r24, r24
 906:	89 0f       	add	r24, r25
 908:	80 93 f3 00 	sts	0x00F3, r24
 90c:	93 81       	ldd	r25, Z+3	; 0x03
 90e:	92 95       	swap	r25
 910:	96 95       	lsr	r25
 912:	97 70       	andi	r25, 0x07	; 7
 914:	84 81       	ldd	r24, Z+4	; 0x04
 916:	88 0f       	add	r24, r24
 918:	88 0f       	add	r24, r24
 91a:	88 0f       	add	r24, r24
 91c:	89 0f       	add	r24, r25
 91e:	80 93 f2 00 	sts	0x00F2, r24
 922:	92 81       	ldd	r25, Z+2	; 0x02
 924:	92 95       	swap	r25
 926:	96 95       	lsr	r25
 928:	97 70       	andi	r25, 0x07	; 7
 92a:	83 81       	ldd	r24, Z+3	; 0x03
 92c:	88 0f       	add	r24, r24
 92e:	88 0f       	add	r24, r24
 930:	88 0f       	add	r24, r24
 932:	89 0f       	add	r24, r25
 934:	80 93 f1 00 	sts	0x00F1, r24
 938:	82 81       	ldd	r24, Z+2	; 0x02
 93a:	88 0f       	add	r24, r24
 93c:	88 0f       	add	r24, r24
 93e:	88 0f       	add	r24, r24
 940:	80 93 f0 00 	sts	0x00F0, r24
 944:	ef ee       	ldi	r30, 0xEF	; 239
 946:	f0 e0       	ldi	r31, 0x00	; 0
 948:	80 81       	ld	r24, Z
 94a:	80 61       	ori	r24, 0x10	; 16
 94c:	80 83       	st	Z, r24
 94e:	17 c0       	rjmp	.+46     	; 0x97e <__stack+0x7f>
          else              { Can_set_std_id(cmd->id.std);}
 950:	82 81       	ldd	r24, Z+2	; 0x02
 952:	86 95       	lsr	r24
 954:	86 95       	lsr	r24
 956:	86 95       	lsr	r24
 958:	93 81       	ldd	r25, Z+3	; 0x03
 95a:	b0 e2       	ldi	r27, 0x20	; 32
 95c:	9b 9f       	mul	r25, r27
 95e:	80 0d       	add	r24, r0
 960:	11 24       	eor	r1, r1
 962:	80 93 f3 00 	sts	0x00F3, r24
 966:	f8 01       	movw	r30, r16
 968:	82 81       	ldd	r24, Z+2	; 0x02
 96a:	82 95       	swap	r24
 96c:	88 0f       	add	r24, r24
 96e:	80 7e       	andi	r24, 0xE0	; 224
 970:	80 93 f2 00 	sts	0x00F2, r24
 974:	ef ee       	ldi	r30, 0xEF	; 239
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	8f 7e       	andi	r24, 0xEF	; 239
 97c:	80 83       	st	Z, r24
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 97e:	8f ef       	ldi	r24, 0xFF	; 255
 980:	9f ef       	ldi	r25, 0xFF	; 255
 982:	dc 01       	movw	r26, r24
 984:	89 83       	std	Y+1, r24	; 0x01
 986:	9a 83       	std	Y+2, r25	; 0x02
 988:	ab 83       	std	Y+3, r26	; 0x03
 98a:	bc 83       	std	Y+4, r27	; 0x04
 98c:	80 93 f7 00 	sts	0x00F7, r24
 990:	9a 81       	ldd	r25, Y+2	; 0x02
 992:	92 95       	swap	r25
 994:	96 95       	lsr	r25
 996:	97 70       	andi	r25, 0x07	; 7
 998:	8b 81       	ldd	r24, Y+3	; 0x03
 99a:	88 0f       	add	r24, r24
 99c:	88 0f       	add	r24, r24
 99e:	88 0f       	add	r24, r24
 9a0:	89 0f       	add	r24, r25
 9a2:	80 93 f6 00 	sts	0x00F6, r24
 9a6:	99 81       	ldd	r25, Y+1	; 0x01
 9a8:	92 95       	swap	r25
 9aa:	96 95       	lsr	r25
 9ac:	97 70       	andi	r25, 0x07	; 7
 9ae:	8a 81       	ldd	r24, Y+2	; 0x02
 9b0:	88 0f       	add	r24, r24
 9b2:	88 0f       	add	r24, r24
 9b4:	88 0f       	add	r24, r24
 9b6:	89 0f       	add	r24, r25
 9b8:	80 93 f5 00 	sts	0x00F5, r24
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
 9be:	88 0f       	add	r24, r24
 9c0:	88 0f       	add	r24, r24
 9c2:	88 0f       	add	r24, r24
 9c4:	44 ef       	ldi	r20, 0xF4	; 244
 9c6:	50 e0       	ldi	r21, 0x00	; 0
 9c8:	da 01       	movw	r26, r20
 9ca:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 9cc:	ef ee       	ldi	r30, 0xEF	; 239
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	90 81       	ld	r25, Z
 9d2:	d8 01       	movw	r26, r16
 9d4:	16 96       	adiw	r26, 0x06	; 6
 9d6:	8c 91       	ld	r24, X
 9d8:	16 97       	sbiw	r26, 0x06	; 6
 9da:	89 2b       	or	r24, r25
 9dc:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 9de:	81 e0       	ldi	r24, 0x01	; 1
 9e0:	1a 96       	adiw	r26, 0x0a	; 10
 9e2:	8c 93       	st	X, r24
 9e4:	da 01       	movw	r26, r20
 9e6:	8c 91       	ld	r24, X
 9e8:	84 60       	ori	r24, 0x04	; 4
 9ea:	8c 93       	st	X, r24
 9ec:	80 ef       	ldi	r24, 0xF0	; 240
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	dc 01       	movw	r26, r24
 9f2:	2c 91       	ld	r18, X
 9f4:	24 60       	ori	r18, 0x04	; 4
 9f6:	2c 93       	st	X, r18
          Can_clear_rplv();
 9f8:	80 81       	ld	r24, Z
 9fa:	8f 7d       	andi	r24, 0xDF	; 223
 9fc:	80 83       	st	Z, r24
          Can_set_idemsk();
 9fe:	da 01       	movw	r26, r20
 a00:	8c 91       	ld	r24, X
 a02:	81 60       	ori	r24, 0x01	; 1
 a04:	8c 93       	st	X, r24
          Can_config_rx();       
 a06:	80 81       	ld	r24, Z
 a08:	8f 73       	andi	r24, 0x3F	; 63
 a0a:	80 83       	st	Z, r24
 a0c:	80 81       	ld	r24, Z
 a0e:	80 68       	ori	r24, 0x80	; 128
 a10:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 a12:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 a14:	0f c1       	rjmp	.+542    	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	2a ef       	ldi	r18, 0xFA	; 250
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	d8 01       	movw	r26, r16
 a1e:	17 96       	adiw	r26, 0x07	; 7
 a20:	ed 91       	ld	r30, X+
 a22:	fc 91       	ld	r31, X
 a24:	18 97       	sbiw	r26, 0x08	; 8
 a26:	e8 0f       	add	r30, r24
 a28:	f1 1d       	adc	r31, r1
 a2a:	90 81       	ld	r25, Z
 a2c:	f9 01       	movw	r30, r18
 a2e:	90 83       	st	Z, r25
 a30:	8f 5f       	subi	r24, 0xFF	; 255
 a32:	16 96       	adiw	r26, 0x06	; 6
 a34:	9c 91       	ld	r25, X
 a36:	89 17       	cp	r24, r25
 a38:	88 f3       	brcs	.-30     	; 0xa1c <__stack+0x11d>
          u32_temp=0; Can_set_ext_msk(u32_temp);
 a3a:	19 82       	std	Y+1, r1	; 0x01
 a3c:	1a 82       	std	Y+2, r1	; 0x02
 a3e:	1b 82       	std	Y+3, r1	; 0x03
 a40:	1c 82       	std	Y+4, r1	; 0x04
 a42:	10 92 f7 00 	sts	0x00F7, r1
 a46:	9a 81       	ldd	r25, Y+2	; 0x02
 a48:	92 95       	swap	r25
 a4a:	96 95       	lsr	r25
 a4c:	97 70       	andi	r25, 0x07	; 7
 a4e:	8b 81       	ldd	r24, Y+3	; 0x03
 a50:	88 0f       	add	r24, r24
 a52:	88 0f       	add	r24, r24
 a54:	88 0f       	add	r24, r24
 a56:	89 0f       	add	r24, r25
 a58:	80 93 f6 00 	sts	0x00F6, r24
 a5c:	99 81       	ldd	r25, Y+1	; 0x01
 a5e:	92 95       	swap	r25
 a60:	96 95       	lsr	r25
 a62:	97 70       	andi	r25, 0x07	; 7
 a64:	8a 81       	ldd	r24, Y+2	; 0x02
 a66:	88 0f       	add	r24, r24
 a68:	88 0f       	add	r24, r24
 a6a:	88 0f       	add	r24, r24
 a6c:	89 0f       	add	r24, r25
 a6e:	80 93 f5 00 	sts	0x00F5, r24
 a72:	89 81       	ldd	r24, Y+1	; 0x01
 a74:	88 0f       	add	r24, r24
 a76:	88 0f       	add	r24, r24
 a78:	88 0f       	add	r24, r24
 a7a:	44 ef       	ldi	r20, 0xF4	; 244
 a7c:	50 e0       	ldi	r21, 0x00	; 0
 a7e:	da 01       	movw	r26, r20
 a80:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 a82:	ef ee       	ldi	r30, 0xEF	; 239
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	90 81       	ld	r25, Z
 a88:	d8 01       	movw	r26, r16
 a8a:	16 96       	adiw	r26, 0x06	; 6
 a8c:	8c 91       	ld	r24, X
 a8e:	16 97       	sbiw	r26, 0x06	; 6
 a90:	89 2b       	or	r24, r25
 a92:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	1a 96       	adiw	r26, 0x0a	; 10
 a98:	8c 93       	st	X, r24
 a9a:	da 01       	movw	r26, r20
 a9c:	8c 91       	ld	r24, X
 a9e:	84 60       	ori	r24, 0x04	; 4
 aa0:	8c 93       	st	X, r24
 aa2:	80 ef       	ldi	r24, 0xF0	; 240
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	dc 01       	movw	r26, r24
 aa8:	2c 91       	ld	r18, X
 aaa:	24 60       	ori	r18, 0x04	; 4
 aac:	2c 93       	st	X, r18
          Can_set_rplv();
 aae:	80 81       	ld	r24, Z
 ab0:	80 62       	ori	r24, 0x20	; 32
 ab2:	80 83       	st	Z, r24
          Can_clear_idemsk();
 ab4:	da 01       	movw	r26, r20
 ab6:	8c 91       	ld	r24, X
 ab8:	8e 7f       	andi	r24, 0xFE	; 254
 aba:	8c 93       	st	X, r24
          Can_config_rx();       
 abc:	80 81       	ld	r24, Z
 abe:	8f 73       	andi	r24, 0x3F	; 63
 ac0:	80 83       	st	Z, r24
 ac2:	80 81       	ld	r24, Z
 ac4:	80 68       	ori	r24, 0x80	; 128
 ac6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 ac8:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
 aca:	b4 c0       	rjmp	.+360    	; 0xc34 <__stack+0x335>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
 acc:	f8 01       	movw	r30, r16
 ace:	83 85       	ldd	r24, Z+11	; 0x0b
 ad0:	88 23       	and	r24, r24
 ad2:	69 f1       	breq	.+90     	; 0xb2e <__stack+0x22f>
 ad4:	94 81       	ldd	r25, Z+4	; 0x04
 ad6:	92 95       	swap	r25
 ad8:	96 95       	lsr	r25
 ada:	97 70       	andi	r25, 0x07	; 7
 adc:	85 81       	ldd	r24, Z+5	; 0x05
 ade:	88 0f       	add	r24, r24
 ae0:	88 0f       	add	r24, r24
 ae2:	88 0f       	add	r24, r24
 ae4:	89 0f       	add	r24, r25
 ae6:	80 93 f3 00 	sts	0x00F3, r24
 aea:	93 81       	ldd	r25, Z+3	; 0x03
 aec:	92 95       	swap	r25
 aee:	96 95       	lsr	r25
 af0:	97 70       	andi	r25, 0x07	; 7
 af2:	84 81       	ldd	r24, Z+4	; 0x04
 af4:	88 0f       	add	r24, r24
 af6:	88 0f       	add	r24, r24
 af8:	88 0f       	add	r24, r24
 afa:	89 0f       	add	r24, r25
 afc:	80 93 f2 00 	sts	0x00F2, r24
 b00:	92 81       	ldd	r25, Z+2	; 0x02
 b02:	92 95       	swap	r25
 b04:	96 95       	lsr	r25
 b06:	97 70       	andi	r25, 0x07	; 7
 b08:	83 81       	ldd	r24, Z+3	; 0x03
 b0a:	88 0f       	add	r24, r24
 b0c:	88 0f       	add	r24, r24
 b0e:	88 0f       	add	r24, r24
 b10:	89 0f       	add	r24, r25
 b12:	80 93 f1 00 	sts	0x00F1, r24
 b16:	82 81       	ldd	r24, Z+2	; 0x02
 b18:	88 0f       	add	r24, r24
 b1a:	88 0f       	add	r24, r24
 b1c:	88 0f       	add	r24, r24
 b1e:	80 93 f0 00 	sts	0x00F0, r24
 b22:	ef ee       	ldi	r30, 0xEF	; 239
 b24:	f0 e0       	ldi	r31, 0x00	; 0
 b26:	80 81       	ld	r24, Z
 b28:	80 61       	ori	r24, 0x10	; 16
 b2a:	80 83       	st	Z, r24
 b2c:	17 c0       	rjmp	.+46     	; 0xb5c <__stack+0x25d>
          else              { Can_set_std_id(cmd->id.std);}
 b2e:	82 81       	ldd	r24, Z+2	; 0x02
 b30:	86 95       	lsr	r24
 b32:	86 95       	lsr	r24
 b34:	86 95       	lsr	r24
 b36:	93 81       	ldd	r25, Z+3	; 0x03
 b38:	b0 e2       	ldi	r27, 0x20	; 32
 b3a:	9b 9f       	mul	r25, r27
 b3c:	80 0d       	add	r24, r0
 b3e:	11 24       	eor	r1, r1
 b40:	80 93 f3 00 	sts	0x00F3, r24
 b44:	f8 01       	movw	r30, r16
 b46:	82 81       	ldd	r24, Z+2	; 0x02
 b48:	82 95       	swap	r24
 b4a:	88 0f       	add	r24, r24
 b4c:	80 7e       	andi	r24, 0xE0	; 224
 b4e:	80 93 f2 00 	sts	0x00F2, r24
 b52:	ef ee       	ldi	r30, 0xEF	; 239
 b54:	f0 e0       	ldi	r31, 0x00	; 0
 b56:	80 81       	ld	r24, Z
 b58:	8f 7e       	andi	r24, 0xEF	; 239
 b5a:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
 b5c:	d8 01       	movw	r26, r16
 b5e:	16 96       	adiw	r26, 0x06	; 6
 b60:	8c 91       	ld	r24, X
 b62:	88 23       	and	r24, r24
 b64:	91 f0       	breq	.+36     	; 0xb8a <__stack+0x28b>
 b66:	80 e0       	ldi	r24, 0x00	; 0
 b68:	2a ef       	ldi	r18, 0xFA	; 250
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	d8 01       	movw	r26, r16
 b6e:	17 96       	adiw	r26, 0x07	; 7
 b70:	ed 91       	ld	r30, X+
 b72:	fc 91       	ld	r31, X
 b74:	18 97       	sbiw	r26, 0x08	; 8
 b76:	e8 0f       	add	r30, r24
 b78:	f1 1d       	adc	r31, r1
 b7a:	90 81       	ld	r25, Z
 b7c:	f9 01       	movw	r30, r18
 b7e:	90 83       	st	Z, r25
 b80:	8f 5f       	subi	r24, 0xFF	; 255
 b82:	16 96       	adiw	r26, 0x06	; 6
 b84:	9c 91       	ld	r25, X
 b86:	89 17       	cp	r24, r25
 b88:	88 f3       	brcs	.-30     	; 0xb6c <__stack+0x26d>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
 b8a:	8f ef       	ldi	r24, 0xFF	; 255
 b8c:	9f ef       	ldi	r25, 0xFF	; 255
 b8e:	dc 01       	movw	r26, r24
 b90:	89 83       	std	Y+1, r24	; 0x01
 b92:	9a 83       	std	Y+2, r25	; 0x02
 b94:	ab 83       	std	Y+3, r26	; 0x03
 b96:	bc 83       	std	Y+4, r27	; 0x04
 b98:	80 93 f7 00 	sts	0x00F7, r24
 b9c:	9a 81       	ldd	r25, Y+2	; 0x02
 b9e:	92 95       	swap	r25
 ba0:	96 95       	lsr	r25
 ba2:	97 70       	andi	r25, 0x07	; 7
 ba4:	8b 81       	ldd	r24, Y+3	; 0x03
 ba6:	88 0f       	add	r24, r24
 ba8:	88 0f       	add	r24, r24
 baa:	88 0f       	add	r24, r24
 bac:	89 0f       	add	r24, r25
 bae:	80 93 f6 00 	sts	0x00F6, r24
 bb2:	99 81       	ldd	r25, Y+1	; 0x01
 bb4:	92 95       	swap	r25
 bb6:	96 95       	lsr	r25
 bb8:	97 70       	andi	r25, 0x07	; 7
 bba:	8a 81       	ldd	r24, Y+2	; 0x02
 bbc:	88 0f       	add	r24, r24
 bbe:	88 0f       	add	r24, r24
 bc0:	88 0f       	add	r24, r24
 bc2:	89 0f       	add	r24, r25
 bc4:	80 93 f5 00 	sts	0x00F5, r24
 bc8:	89 81       	ldd	r24, Y+1	; 0x01
 bca:	88 0f       	add	r24, r24
 bcc:	88 0f       	add	r24, r24
 bce:	88 0f       	add	r24, r24
 bd0:	44 ef       	ldi	r20, 0xF4	; 244
 bd2:	50 e0       	ldi	r21, 0x00	; 0
 bd4:	da 01       	movw	r26, r20
 bd6:	8c 93       	st	X, r24
          Can_set_dlc(cmd->dlc);
 bd8:	ef ee       	ldi	r30, 0xEF	; 239
 bda:	f0 e0       	ldi	r31, 0x00	; 0
 bdc:	90 81       	ld	r25, Z
 bde:	d8 01       	movw	r26, r16
 be0:	16 96       	adiw	r26, 0x06	; 6
 be2:	8c 91       	ld	r24, X
 be4:	16 97       	sbiw	r26, 0x06	; 6
 be6:	89 2b       	or	r24, r25
 be8:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
 bea:	81 e0       	ldi	r24, 0x01	; 1
 bec:	1a 96       	adiw	r26, 0x0a	; 10
 bee:	8c 93       	st	X, r24
 bf0:	da 01       	movw	r26, r20
 bf2:	8c 91       	ld	r24, X
 bf4:	84 60       	ori	r24, 0x04	; 4
 bf6:	8c 93       	st	X, r24
 bf8:	80 ef       	ldi	r24, 0xF0	; 240
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	dc 01       	movw	r26, r24
 bfe:	2c 91       	ld	r18, X
 c00:	24 60       	ori	r18, 0x04	; 4
 c02:	2c 93       	st	X, r18
          Can_set_rplv();
 c04:	80 81       	ld	r24, Z
 c06:	80 62       	ori	r24, 0x20	; 32
 c08:	80 83       	st	Z, r24
          Can_set_idemsk();
 c0a:	da 01       	movw	r26, r20
 c0c:	8c 91       	ld	r24, X
 c0e:	81 60       	ori	r24, 0x01	; 1
 c10:	8c 93       	st	X, r24
          Can_config_rx();       
 c12:	80 81       	ld	r24, Z
 c14:	8f 73       	andi	r24, 0x3F	; 63
 c16:	80 83       	st	Z, r24
 c18:	80 81       	ld	r24, Z
 c1a:	80 68       	ori	r24, 0x80	; 128
 c1c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c1e:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
 c20:	09 c0       	rjmp	.+18     	; 0xc34 <__stack+0x335>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
 c22:	f8 01       	movw	r30, r16
 c24:	11 86       	std	Z+9, r1	; 0x09
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
 c26:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
 c28:	05 c0       	rjmp	.+10     	; 0xc34 <__stack+0x335>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
 c2a:	8f e1       	ldi	r24, 0x1F	; 31
 c2c:	d8 01       	movw	r26, r16
 c2e:	19 96       	adiw	r26, 0x09	; 9
 c30:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
 c32:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
 c34:	0f 90       	pop	r0
 c36:	0f 90       	pop	r0
 c38:	0f 90       	pop	r0
 c3a:	0f 90       	pop	r0
 c3c:	df 91       	pop	r29
 c3e:	cf 91       	pop	r28
 c40:	1f 91       	pop	r17
 c42:	0f 91       	pop	r16
 c44:	08 95       	ret

00000c46 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
 c46:	cf 93       	push	r28
 c48:	df 93       	push	r29
 c4a:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
 c4c:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
 c4e:	88 23       	and	r24, r24
 c50:	09 f4       	brne	.+2      	; 0xc54 <can_get_status+0xe>
 c52:	ee c0       	rjmp	.+476    	; 0xe30 <can_get_status+0x1ea>
 c54:	8f 31       	cpi	r24, 0x1F	; 31
 c56:	09 f4       	brne	.+2      	; 0xc5a <can_get_status+0x14>
 c58:	ed c0       	rjmp	.+474    	; 0xe34 <can_get_status+0x1ee>
 c5a:	8f 3f       	cpi	r24, 0xFF	; 255
 c5c:	09 f4       	brne	.+2      	; 0xc60 <can_get_status+0x1a>
 c5e:	ec c0       	rjmp	.+472    	; 0xe38 <can_get_status+0x1f2>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
 c60:	88 81       	ld	r24, Y
 c62:	82 95       	swap	r24
 c64:	80 7f       	andi	r24, 0xF0	; 240
 c66:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
 c6a:	0e 94 90 00 	call	0x120	; 0x120 <can_get_mob_status>
    
    switch (a_status)
 c6e:	80 32       	cpi	r24, 0x20	; 32
 c70:	61 f0       	breq	.+24     	; 0xc8a <can_get_status+0x44>
 c72:	20 f4       	brcc	.+8      	; 0xc7c <can_get_status+0x36>
 c74:	88 23       	and	r24, r24
 c76:	09 f4       	brne	.+2      	; 0xc7a <can_get_status+0x34>
 c78:	e1 c0       	rjmp	.+450    	; 0xe3c <can_get_status+0x1f6>
 c7a:	d0 c0       	rjmp	.+416    	; 0xe1c <can_get_status+0x1d6>
 c7c:	80 34       	cpi	r24, 0x40	; 64
 c7e:	09 f4       	brne	.+2      	; 0xc82 <can_get_status+0x3c>
 c80:	c2 c0       	rjmp	.+388    	; 0xe06 <can_get_status+0x1c0>
 c82:	80 3a       	cpi	r24, 0xA0	; 160
 c84:	09 f4       	brne	.+2      	; 0xc88 <can_get_status+0x42>
 c86:	66 c0       	rjmp	.+204    	; 0xd54 <can_get_status+0x10e>
 c88:	c9 c0       	rjmp	.+402    	; 0xe1c <can_get_status+0x1d6>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
 c8a:	81 e0       	ldi	r24, 0x01	; 1
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_Reg_Write>
			delay_ms(500);
 c92:	84 ef       	ldi	r24, 0xF4	; 244
 c94:	91 e0       	ldi	r25, 0x01	; 1
 c96:	0e 94 db 07 	call	0xfb6	; 0xfb6 <delay_ms>
			LED_Reg_Write(0x00);
 c9a:	80 e0       	ldi	r24, 0x00	; 0
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_Reg_Write>
	    
            cmd->ctrl.rtr = Can_get_rtr();
 ca2:	80 91 f0 00 	lds	r24, 0x00F0
 ca6:	82 fb       	bst	r24, 2
 ca8:	88 27       	eor	r24, r24
 caa:	80 f9       	bld	r24, 0
 cac:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
 cae:	80 91 ef 00 	lds	r24, 0x00EF
 cb2:	84 ff       	sbrs	r24, 4
 cb4:	2d c0       	rjmp	.+90     	; 0xd10 <can_get_status+0xca>
            {
	            cmd->ctrl.ide = 1; // extended frame
 cb6:	81 e0       	ldi	r24, 0x01	; 1
 cb8:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
 cba:	e3 ef       	ldi	r30, 0xF3	; 243
 cbc:	f0 e0       	ldi	r31, 0x00	; 0
 cbe:	80 81       	ld	r24, Z
 cc0:	86 95       	lsr	r24
 cc2:	86 95       	lsr	r24
 cc4:	86 95       	lsr	r24
 cc6:	8d 83       	std	Y+5, r24	; 0x05
 cc8:	a2 ef       	ldi	r26, 0xF2	; 242
 cca:	b0 e0       	ldi	r27, 0x00	; 0
 ccc:	8c 91       	ld	r24, X
 cce:	90 81       	ld	r25, Z
 cd0:	86 95       	lsr	r24
 cd2:	86 95       	lsr	r24
 cd4:	86 95       	lsr	r24
 cd6:	20 e2       	ldi	r18, 0x20	; 32
 cd8:	92 9f       	mul	r25, r18
 cda:	80 0d       	add	r24, r0
 cdc:	11 24       	eor	r1, r1
 cde:	8c 83       	std	Y+4, r24	; 0x04
 ce0:	e1 ef       	ldi	r30, 0xF1	; 241
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	80 81       	ld	r24, Z
 ce6:	9c 91       	ld	r25, X
 ce8:	86 95       	lsr	r24
 cea:	86 95       	lsr	r24
 cec:	86 95       	lsr	r24
 cee:	20 e2       	ldi	r18, 0x20	; 32
 cf0:	92 9f       	mul	r25, r18
 cf2:	80 0d       	add	r24, r0
 cf4:	11 24       	eor	r1, r1
 cf6:	8b 83       	std	Y+3, r24	; 0x03
 cf8:	80 91 f0 00 	lds	r24, 0x00F0
 cfc:	90 81       	ld	r25, Z
 cfe:	86 95       	lsr	r24
 d00:	86 95       	lsr	r24
 d02:	86 95       	lsr	r24
 d04:	20 e2       	ldi	r18, 0x20	; 32
 d06:	92 9f       	mul	r25, r18
 d08:	80 0d       	add	r24, r0
 d0a:	11 24       	eor	r1, r1
 d0c:	8a 83       	std	Y+2, r24	; 0x02
 d0e:	13 c0       	rjmp	.+38     	; 0xd36 <can_get_status+0xf0>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
 d10:	1b 86       	std	Y+11, r1	; 0x0b
	            Can_get_std_id(cmd->id.std);
 d12:	e3 ef       	ldi	r30, 0xF3	; 243
 d14:	f0 e0       	ldi	r31, 0x00	; 0
 d16:	80 81       	ld	r24, Z
 d18:	82 95       	swap	r24
 d1a:	86 95       	lsr	r24
 d1c:	87 70       	andi	r24, 0x07	; 7
 d1e:	8b 83       	std	Y+3, r24	; 0x03
 d20:	80 91 f2 00 	lds	r24, 0x00F2
 d24:	90 81       	ld	r25, Z
 d26:	99 0f       	add	r25, r25
 d28:	99 0f       	add	r25, r25
 d2a:	99 0f       	add	r25, r25
 d2c:	82 95       	swap	r24
 d2e:	86 95       	lsr	r24
 d30:	87 70       	andi	r24, 0x07	; 7
 d32:	89 0f       	add	r24, r25
 d34:	8a 83       	std	Y+2, r24	; 0x02
            }
            // Status field of descriptor: 0x20 if Rx completed
            cmd->status = a_status;
 d36:	80 e2       	ldi	r24, 0x20	; 32
 d38:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
 d3a:	8f 81       	ldd	r24, Y+7	; 0x07
 d3c:	98 85       	ldd	r25, Y+8	; 0x08
 d3e:	0e 94 a6 00 	call	0x14c	; 0x14c <can_get_data>
			Can_mob_abort();        // Freed the MOb
 d42:	ef ee       	ldi	r30, 0xEF	; 239
 d44:	f0 e0       	ldi	r31, 0x00	; 0
 d46:	80 81       	ld	r24, Z
 d48:	8f 73       	andi	r24, 0x3F	; 63
 d4a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
 d4c:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED;
 d50:	80 e2       	ldi	r24, 0x20	; 32
            break;
 d52:	75 c0       	rjmp	.+234    	; 0xe3e <can_get_status+0x1f8>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
 d54:	80 91 f0 00 	lds	r24, 0x00F0
 d58:	82 fb       	bst	r24, 2
 d5a:	88 27       	eor	r24, r24
 d5c:	80 f9       	bld	r24, 0
 d5e:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
 d60:	80 91 ef 00 	lds	r24, 0x00EF
 d64:	84 ff       	sbrs	r24, 4
 d66:	2d c0       	rjmp	.+90     	; 0xdc2 <can_get_status+0x17c>
            {
                cmd->ctrl.ide = 1; // extended frame
 d68:	81 e0       	ldi	r24, 0x01	; 1
 d6a:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
 d6c:	e3 ef       	ldi	r30, 0xF3	; 243
 d6e:	f0 e0       	ldi	r31, 0x00	; 0
 d70:	80 81       	ld	r24, Z
 d72:	86 95       	lsr	r24
 d74:	86 95       	lsr	r24
 d76:	86 95       	lsr	r24
 d78:	8d 83       	std	Y+5, r24	; 0x05
 d7a:	a2 ef       	ldi	r26, 0xF2	; 242
 d7c:	b0 e0       	ldi	r27, 0x00	; 0
 d7e:	8c 91       	ld	r24, X
 d80:	90 81       	ld	r25, Z
 d82:	86 95       	lsr	r24
 d84:	86 95       	lsr	r24
 d86:	86 95       	lsr	r24
 d88:	20 e2       	ldi	r18, 0x20	; 32
 d8a:	92 9f       	mul	r25, r18
 d8c:	80 0d       	add	r24, r0
 d8e:	11 24       	eor	r1, r1
 d90:	8c 83       	std	Y+4, r24	; 0x04
 d92:	e1 ef       	ldi	r30, 0xF1	; 241
 d94:	f0 e0       	ldi	r31, 0x00	; 0
 d96:	80 81       	ld	r24, Z
 d98:	9c 91       	ld	r25, X
 d9a:	86 95       	lsr	r24
 d9c:	86 95       	lsr	r24
 d9e:	86 95       	lsr	r24
 da0:	20 e2       	ldi	r18, 0x20	; 32
 da2:	92 9f       	mul	r25, r18
 da4:	80 0d       	add	r24, r0
 da6:	11 24       	eor	r1, r1
 da8:	8b 83       	std	Y+3, r24	; 0x03
 daa:	80 91 f0 00 	lds	r24, 0x00F0
 dae:	90 81       	ld	r25, Z
 db0:	86 95       	lsr	r24
 db2:	86 95       	lsr	r24
 db4:	86 95       	lsr	r24
 db6:	20 e2       	ldi	r18, 0x20	; 32
 db8:	92 9f       	mul	r25, r18
 dba:	80 0d       	add	r24, r0
 dbc:	11 24       	eor	r1, r1
 dbe:	8a 83       	std	Y+2, r24	; 0x02
 dc0:	13 c0       	rjmp	.+38     	; 0xde8 <can_get_status+0x1a2>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
 dc2:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
 dc4:	e3 ef       	ldi	r30, 0xF3	; 243
 dc6:	f0 e0       	ldi	r31, 0x00	; 0
 dc8:	80 81       	ld	r24, Z
 dca:	82 95       	swap	r24
 dcc:	86 95       	lsr	r24
 dce:	87 70       	andi	r24, 0x07	; 7
 dd0:	8b 83       	std	Y+3, r24	; 0x03
 dd2:	80 91 f2 00 	lds	r24, 0x00F2
 dd6:	90 81       	ld	r25, Z
 dd8:	99 0f       	add	r25, r25
 dda:	99 0f       	add	r25, r25
 ddc:	99 0f       	add	r25, r25
 dde:	82 95       	swap	r24
 de0:	86 95       	lsr	r24
 de2:	87 70       	andi	r24, 0x07	; 7
 de4:	89 0f       	add	r24, r25
 de6:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
 de8:	80 ea       	ldi	r24, 0xA0	; 160
 dea:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
 dec:	8f 81       	ldd	r24, Y+7	; 0x07
 dee:	98 85       	ldd	r25, Y+8	; 0x08
 df0:	0e 94 a6 00 	call	0x14c	; 0x14c <can_get_data>
			
			Can_mob_abort();        // Freed the MO
 df4:	ef ee       	ldi	r30, 0xEF	; 239
 df6:	f0 e0       	ldi	r31, 0x00	; 0
 df8:	80 81       	ld	r24, Z
 dfa:	8f 73       	andi	r24, 0x3F	; 63
 dfc:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
 dfe:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
 e02:	80 ea       	ldi	r24, 0xA0	; 160
            break;
 e04:	1c c0       	rjmp	.+56     	; 0xe3e <can_get_status+0x1f8>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
 e06:	80 e4       	ldi	r24, 0x40	; 64
 e08:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
 e0a:	ef ee       	ldi	r30, 0xEF	; 239
 e0c:	f0 e0       	ldi	r31, 0x00	; 0
 e0e:	80 81       	ld	r24, Z
 e10:	8f 73       	andi	r24, 0x3F	; 63
 e12:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 e14:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
 e18:	80 e4       	ldi	r24, 0x40	; 64
            break;
 e1a:	11 c0       	rjmp	.+34     	; 0xe3e <can_get_status+0x1f8>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
 e1c:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
 e1e:	ef ee       	ldi	r30, 0xEF	; 239
 e20:	f0 e0       	ldi	r31, 0x00	; 0
 e22:	80 81       	ld	r24, Z
 e24:	8f 73       	andi	r24, 0x3F	; 63
 e26:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
 e28:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
 e2c:	82 e0       	ldi	r24, 0x02	; 2
            break;
 e2e:	07 c0       	rjmp	.+14     	; 0xe3e <can_get_status+0x1f8>
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
 e30:	82 e0       	ldi	r24, 0x02	; 2
 e32:	05 c0       	rjmp	.+10     	; 0xe3e <can_get_status+0x1f8>
 e34:	82 e0       	ldi	r24, 0x02	; 2
 e36:	03 c0       	rjmp	.+6      	; 0xe3e <can_get_status+0x1f8>
 e38:	82 e0       	ldi	r24, 0x02	; 2
 e3a:	01 c0       	rjmp	.+2      	; 0xe3e <can_get_status+0x1f8>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
 e3c:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
 e3e:	df 91       	pop	r29
 e40:	cf 91       	pop	r28
 e42:	08 95       	ret

00000e44 <LED_Reg_Write>:
*/
#include <avr/io.h>
#include "LED.h"

void LED_Reg_Write(uint8_t val) {
	LEDPORT = ~val;
 e44:	80 95       	com	r24
 e46:	85 b9       	out	0x05, r24	; 5
 e48:	08 95       	ret

00000e4a <main>:
volatile uint8_t CTC_flag;

uint8_t response_data[DATA_BUFFER_SIZE];

int main(void)
{		
 e4a:	cf 93       	push	r28
 e4c:	df 93       	push	r29
 e4e:	cd b7       	in	r28, 0x3d	; 61
 e50:	de b7       	in	r29, 0x3e	; 62
 e52:	64 97       	sbiw	r28, 0x14	; 20
 e54:	0f b6       	in	r0, 0x3f	; 63
 e56:	f8 94       	cli
 e58:	de bf       	out	0x3e, r29	; 62
 e5a:	0f be       	out	0x3f, r0	; 63
 e5c:	cd bf       	out	0x3d, r28	; 61
    }
}

void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
 e5e:	e1 e6       	ldi	r30, 0x61	; 97
 e60:	f0 e0       	ldi	r31, 0x00	; 0
 e62:	80 e8       	ldi	r24, 0x80	; 128
 e64:	80 83       	st	Z, r24
	CLKPR = 0x00;
 e66:	10 82       	st	Z, r1
}

void io_init(void) {
	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFF;
 e68:	8f ef       	ldi	r24, 0xFF	; 255
 e6a:	84 b9       	out	0x04, r24	; 4
	LED_Reg_Write(0x00); // clear all LEDs
 e6c:	80 e0       	ldi	r24, 0x00	; 0
 e6e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_Reg_Write>
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x00;
 e72:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x00;
 e74:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x00;
 e76:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x00;
 e78:	1b b8       	out	0x0b, r1	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
 e7a:	1d b8       	out	0x0d, r1	; 13
	PORTD = 0x00;
 e7c:	1b b8       	out	0x0b, r1	; 11
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
 e7e:	0e 94 c1 07 	call	0xf82	; 0xf82 <timer_init>
	can_init(0);
 e82:	80 e0       	ldi	r24, 0x00	; 0
 e84:	0e 94 be 00 	call	0x17c	; 0x17c <can_init>
	
	uint8_t	status, i;
	uint8_t message[8];
	
	// Enable global interrupts for Timer execution
	sei();
 e88:	78 94       	sei
	
	// Flash LEDs to indicate program startup
	LED_Reg_Write(0x01);
 e8a:	81 e0       	ldi	r24, 0x01	; 1
 e8c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_Reg_Write>
	delay_ms(250);
 e90:	8a ef       	ldi	r24, 0xFA	; 250
 e92:	90 e0       	ldi	r25, 0x00	; 0
 e94:	0e 94 db 07 	call	0xfb6	; 0xfb6 <delay_ms>
	LED_Reg_Write(0x00);
 e98:	80 e0       	ldi	r24, 0x00	; 0
 e9a:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_Reg_Write>
    {
		// Simulate collecting local sensor data: put test bytes in response buffer
		//response_data[0] = MY_ID_TAG;
		//if(MY_ID_TAG == 0x80) { response_data[1] = 0x3C; }
		//if(MY_ID_TAG == 0x81) { response_data[1] = 0x0F; }
		for (i = 0; i < 8; i ++)
 e9e:	80 e0       	ldi	r24, 0x00	; 0
		}
			
			
			
			
		reply_message.pt_data = &response_data[0]; // point message object to first element of data buffer
 ea0:	0f 2e       	mov	r0, r31
 ea2:	f0 e0       	ldi	r31, 0x00	; 0
 ea4:	cf 2e       	mov	r12, r31
 ea6:	f1 e0       	ldi	r31, 0x01	; 1
 ea8:	df 2e       	mov	r13, r31
 eaa:	f0 2d       	mov	r31, r0
		reply_message.ctrl.ide = 0; // standard CAN frame type (2.0A)
		reply_message.id.std = MY_ID_TAG; // populate ID field with ID Tag
 eac:	0f 2e       	mov	r0, r31
 eae:	f9 e0       	ldi	r31, 0x09	; 9
 eb0:	ef 2e       	mov	r14, r31
 eb2:	f1 2c       	mov	r15, r1
 eb4:	f0 2d       	mov	r31, r0
		reply_message.cmd = CMD_RX_DATA; // assign this as a receiving message object.
 eb6:	0f 2e       	mov	r0, r31
 eb8:	f5 e0       	ldi	r31, 0x05	; 5
 eba:	af 2e       	mov	r10, r31
 ebc:	f0 2d       	mov	r31, r0
		reply_message.dlc = 8;			// Max length of a CAN message.
 ebe:	68 94       	set
 ec0:	bb 24       	eor	r11, r11
 ec2:	b3 f8       	bld	r11, 3
 ec4:	8e 01       	movw	r16, r28
 ec6:	0b 5f       	subi	r16, 0xFB	; 251
 ec8:	1f 4f       	sbci	r17, 0xFF	; 255
 eca:	12 c0       	rjmp	.+36     	; 0xef0 <main+0xa6>
		//response_data[0] = MY_ID_TAG;
		//if(MY_ID_TAG == 0x80) { response_data[1] = 0x3C; }
		//if(MY_ID_TAG == 0x81) { response_data[1] = 0x0F; }
		for (i = 0; i < 8; i ++)
		{
			message[i] = 0;
 ecc:	e1 e0       	ldi	r30, 0x01	; 1
 ece:	f0 e0       	ldi	r31, 0x00	; 0
 ed0:	ec 0f       	add	r30, r28
 ed2:	fd 1f       	adc	r31, r29
 ed4:	e8 0f       	add	r30, r24
 ed6:	f1 1d       	adc	r31, r1
 ed8:	10 82       	st	Z, r1
    {
		// Simulate collecting local sensor data: put test bytes in response buffer
		//response_data[0] = MY_ID_TAG;
		//if(MY_ID_TAG == 0x80) { response_data[1] = 0x3C; }
		//if(MY_ID_TAG == 0x81) { response_data[1] = 0x0F; }
		for (i = 0; i < 8; i ++)
 eda:	8f 5f       	subi	r24, 0xFF	; 255
 edc:	09 c0       	rjmp	.+18     	; 0xef0 <main+0xa6>
 ede:	80 e0       	ldi	r24, 0x00	; 0
 ee0:	07 c0       	rjmp	.+14     	; 0xef0 <main+0xa6>
 ee2:	80 e0       	ldi	r24, 0x00	; 0
 ee4:	05 c0       	rjmp	.+10     	; 0xef0 <main+0xa6>
 ee6:	80 e0       	ldi	r24, 0x00	; 0
 ee8:	03 c0       	rjmp	.+6      	; 0xef0 <main+0xa6>
 eea:	80 e0       	ldi	r24, 0x00	; 0
 eec:	01 c0       	rjmp	.+2      	; 0xef0 <main+0xa6>
 eee:	80 e0       	ldi	r24, 0x00	; 0
 ef0:	88 30       	cpi	r24, 0x08	; 8
 ef2:	60 f3       	brcs	.-40     	; 0xecc <main+0x82>
		}
			
			
			
			
		reply_message.pt_data = &response_data[0]; // point message object to first element of data buffer
 ef4:	d9 8a       	std	Y+17, r13	; 0x11
 ef6:	c8 8a       	std	Y+16, r12	; 0x10
		reply_message.ctrl.ide = 0; // standard CAN frame type (2.0A)
 ef8:	1c 8a       	std	Y+20, r1	; 0x14
		reply_message.id.std = MY_ID_TAG; // populate ID field with ID Tag
 efa:	fc 86       	std	Y+12, r15	; 0x0c
 efc:	eb 86       	std	Y+11, r14	; 0x0b
		reply_message.cmd = CMD_RX_DATA; // assign this as a receiving message object.
 efe:	aa 86       	std	Y+10, r10	; 0x0a
		reply_message.dlc = 8;			// Max length of a CAN message.
 f00:	bf 86       	std	Y+15, r11	; 0x0f
		
		while(can_cmd(&reply_message) != CAN_CMD_ACCEPTED); // wait for MOb to configure
 f02:	ce 01       	movw	r24, r28
 f04:	09 96       	adiw	r24, 0x09	; 9
 f06:	0e 94 cd 00 	call	0x19a	; 0x19a <can_cmd>
 f0a:	81 11       	cpse	r24, r1
 f0c:	fa cf       	rjmp	.-12     	; 0xf02 <main+0xb8>
		
		while(can_get_status(&reply_message) == CAN_STATUS_NOT_COMPLETED); // wait for a transmit request to come in.
 f0e:	ce 01       	movw	r24, r28
 f10:	09 96       	adiw	r24, 0x09	; 9
 f12:	0e 94 23 06 	call	0xc46	; 0xc46 <can_get_status>
 f16:	81 30       	cpi	r24, 0x01	; 1
 f18:	d1 f3       	breq	.-12     	; 0xf0e <main+0xc4>
		
		status = reply_message.status;
		
		if ((status == MOB_RX_COMPLETED) || (status == MOB_RX_COMPLETED_DLCW))
 f1a:	8a 89       	ldd	r24, Y+18	; 0x12
 f1c:	8f 77       	andi	r24, 0x7F	; 127
 f1e:	80 32       	cpi	r24, 0x20	; 32
 f20:	f1 f6       	brne	.-68     	; 0xede <main+0x94>
 f22:	a8 89       	ldd	r26, Y+16	; 0x10
 f24:	b9 89       	ldd	r27, Y+17	; 0x11
 f26:	fe 01       	movw	r30, r28
 f28:	31 96       	adiw	r30, 0x01	; 1
		{
			for (i = 0; i < 4; i ++)
			{
				message[i] = *(reply_message.pt_data + i);
 f2a:	8d 91       	ld	r24, X+
 f2c:	81 93       	st	Z+, r24
		
		status = reply_message.status;
		
		if ((status == MOB_RX_COMPLETED) || (status == MOB_RX_COMPLETED_DLCW))
		{
			for (i = 0; i < 4; i ++)
 f2e:	e0 17       	cp	r30, r16
 f30:	f1 07       	cpc	r31, r17
 f32:	d9 f7       	brne	.-10     	; 0xf2a <main+0xe0>
			{
				message[i] = *(reply_message.pt_data + i);
			}
			
			if ((message[0] == 0xFF) && (message[1] == 0xFF) && (message[2] == 0xFF) && (message[3] == 0xFF))
 f34:	89 81       	ldd	r24, Y+1	; 0x01
 f36:	8f 3f       	cpi	r24, 0xFF	; 255
 f38:	a1 f6       	brne	.-88     	; 0xee2 <main+0x98>
 f3a:	8a 81       	ldd	r24, Y+2	; 0x02
 f3c:	8f 3f       	cpi	r24, 0xFF	; 255
 f3e:	99 f6       	brne	.-90     	; 0xee6 <main+0x9c>
 f40:	8b 81       	ldd	r24, Y+3	; 0x03
 f42:	8f 3f       	cpi	r24, 0xFF	; 255
 f44:	91 f6       	brne	.-92     	; 0xeea <main+0xa0>
 f46:	8c 81       	ldd	r24, Y+4	; 0x04
 f48:	8f 3f       	cpi	r24, 0xFF	; 255
 f4a:	89 f6       	brne	.-94     	; 0xeee <main+0xa4>
			{
				LED_Reg_Write(0x04);	//Toggle LED2 when the appropriate message is received.
 f4c:	84 e0       	ldi	r24, 0x04	; 4
 f4e:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_Reg_Write>
				delay_ms(500);
 f52:	84 ef       	ldi	r24, 0xF4	; 244
 f54:	91 e0       	ldi	r25, 0x01	; 1
 f56:	0e 94 db 07 	call	0xfb6	; 0xfb6 <delay_ms>
				LED_Reg_Write(0x00);
 f5a:	80 e0       	ldi	r24, 0x00	; 0
 f5c:	0e 94 22 07 	call	0xe44	; 0xe44 <LED_Reg_Write>
    {
		// Simulate collecting local sensor data: put test bytes in response buffer
		//response_data[0] = MY_ID_TAG;
		//if(MY_ID_TAG == 0x80) { response_data[1] = 0x3C; }
		//if(MY_ID_TAG == 0x81) { response_data[1] = 0x0F; }
		for (i = 0; i < 8; i ++)
 f60:	80 e0       	ldi	r24, 0x00	; 0
 f62:	c6 cf       	rjmp	.-116    	; 0xef0 <main+0xa6>

00000f64 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
 f64:	1f 92       	push	r1
 f66:	0f 92       	push	r0
 f68:	0f b6       	in	r0, 0x3f	; 63
 f6a:	0f 92       	push	r0
 f6c:	11 24       	eor	r1, r1
 f6e:	8f 93       	push	r24
	CTC_flag = 1;
 f70:	81 e0       	ldi	r24, 0x01	; 1
 f72:	80 93 02 01 	sts	0x0102, r24
}
 f76:	8f 91       	pop	r24
 f78:	0f 90       	pop	r0
 f7a:	0f be       	out	0x3f, r0	; 63
 f7c:	0f 90       	pop	r0
 f7e:	1f 90       	pop	r1
 f80:	18 95       	reti

00000f82 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
 f82:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
 f86:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
 f8a:	8a e0       	ldi	r24, 0x0A	; 10
 f8c:	80 93 81 00 	sts	0x0081, r24
 f90:	08 95       	ret

00000f92 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
 f92:	10 92 02 01 	sts	0x0102, r1
	TCNT1 = 0x0000; //Clear timer
 f96:	10 92 85 00 	sts	0x0085, r1
 f9a:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
 f9e:	90 93 89 00 	sts	0x0089, r25
 fa2:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
 fa6:	82 e0       	ldi	r24, 0x02	; 2
 fa8:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
 fac:	80 91 02 01 	lds	r24, 0x0102
 fb0:	88 23       	and	r24, r24
 fb2:	e1 f3       	breq	.-8      	; 0xfac <delay_us+0x1a>
}
 fb4:	08 95       	ret

00000fb6 <delay_ms>:

void delay_ms(uint16_t ms) {
 fb6:	0f 93       	push	r16
 fb8:	1f 93       	push	r17
 fba:	cf 93       	push	r28
 fbc:	df 93       	push	r29
 fbe:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
 fc0:	00 97       	sbiw	r24, 0x00	; 0
 fc2:	51 f0       	breq	.+20     	; 0xfd8 <delay_ms+0x22>
 fc4:	c0 e0       	ldi	r28, 0x00	; 0
 fc6:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
 fc8:	88 ee       	ldi	r24, 0xE8	; 232
 fca:	93 e0       	ldi	r25, 0x03	; 3
 fcc:	0e 94 c9 07 	call	0xf92	; 0xf92 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
 fd0:	21 96       	adiw	r28, 0x01	; 1
 fd2:	c0 17       	cp	r28, r16
 fd4:	d1 07       	cpc	r29, r17
 fd6:	c1 f7       	brne	.-16     	; 0xfc8 <delay_ms+0x12>
		delay_us(1000);
	}
}
 fd8:	df 91       	pop	r29
 fda:	cf 91       	pop	r28
 fdc:	1f 91       	pop	r17
 fde:	0f 91       	pop	r16
 fe0:	08 95       	ret

00000fe2 <__tablejump2__>:
 fe2:	ee 0f       	add	r30, r30
 fe4:	ff 1f       	adc	r31, r31

00000fe6 <__tablejump__>:
 fe6:	05 90       	lpm	r0, Z+
 fe8:	f4 91       	lpm	r31, Z
 fea:	e0 2d       	mov	r30, r0
 fec:	09 94       	ijmp

00000fee <_exit>:
 fee:	f8 94       	cli

00000ff0 <__stop_program>:
 ff0:	ff cf       	rjmp	.-2      	; 0xff0 <__stop_program>
