
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000190c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000059  00800100  00800100  00001980  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000248  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002a8f  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000d57  00000000  00000000  00004687  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000f03  00000000  00000000  000053de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004f8  00000000  00000000  000062e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000006e1  00000000  00000000  000067dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001bd7  00000000  00000000  00006ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000200  00000000  00000000  00008a94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	47 02       	muls	r20, r23
      7e:	d9 02       	muls	r29, r25
      80:	63 03       	mulsu	r22, r19
      82:	d7 03       	fmuls	r21, r23
      84:	17 04       	cpc	r1, r7
      86:	93 04       	cpc	r9, r3
      88:	10 05       	cpc	r17, r0
      8a:	ad 05       	cpc	r26, r13
      8c:	53 06       	cpc	r5, r19
      8e:	41 02       	muls	r20, r17
      90:	5c 07       	cpc	r21, r28

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a9 35       	cpi	r26, 0x59	; 89
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 38 09 	call	0x1270	; 0x1270 <main>
      b2:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <can_check_general>:
			{
				LED_toggle(LED6);	//Toggle LED5 when housekeeping was requested.
				delay_ms(100);
				LED_toggle(LED6);
				delay_ms(100);
				send_hk = 1;
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
      d2:	8d e2       	ldi	r24, 0x2D	; 45
				delay_ms(100);
				LED_toggle(LED6);
				delay_ms(100);
				send_hk = 1;
			}
			for (i = 0; i < 8; i ++)
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	90 93 28 01 	sts	0x0128, r25
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data5[0]; // point message object to first element of data buffer
      da:	80 93 27 01 	sts	0x0127, r24
      de:	10 92 2b 01 	sts	0x012B, r1
      e2:	84 e1       	ldi	r24, 0x14	; 20
      e4:	90 e0       	ldi	r25, 0x00	; 0
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      e6:	90 93 23 01 	sts	0x0123, r25
		message.id.std = SUB0_ID5;  // populate ID field with ID Tag
      ea:	80 93 22 01 	sts	0x0122, r24
      ee:	85 e0       	ldi	r24, 0x05	; 5
      f0:	80 93 21 01 	sts	0x0121, r24
      f4:	88 e0       	ldi	r24, 0x08	; 8
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
      f6:	80 93 26 01 	sts	0x0126, r24
      fa:	10 92 4f 01 	sts	0x014F, r1
		message.dlc = 8;			 // Max length of a CAN message.
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	80 e2       	ldi	r24, 0x20	; 32
		mob_number = 5;
     102:	91 e0       	ldi	r25, 0x01	; 1
     104:	0e 94 29 08 	call	0x1052	; 0x1052 <can_get_status>
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     108:	81 30       	cpi	r24, 0x01	; 1
     10a:	09 f4       	brne	.+2      	; 0x10e <can_check_general+0x40>
     10c:	a7 c0       	rjmp	.+334    	; 0x25c <can_check_general+0x18e>
     10e:	80 91 29 01 	lds	r24, 0x0129
     112:	80 32       	cpi	r24, 0x20	; 32
     114:	09 f0       	breq	.+2      	; 0x118 <can_check_general+0x4a>
     116:	80 c0       	rjmp	.+256    	; 0x218 <can_check_general+0x14a>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     118:	a0 91 27 01 	lds	r26, 0x0127
     11c:	b0 91 28 01 	lds	r27, 0x0128
		mob_number = 5;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     120:	ce e3       	ldi	r28, 0x3E	; 62
     122:	d1 e0       	ldi	r29, 0x01	; 1
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     124:	e6 e3       	ldi	r30, 0x36	; 54
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	8d 91       	ld	r24, X+
     12a:	81 93       	st	Z+, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
     12c:	ec 17       	cp	r30, r28
     12e:	fd 07       	cpc	r31, r29
     130:	d9 f7       	brne	.-10     	; 0x128 <can_check_general+0x5a>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
			
			if ((receive_arr[0] == 0xFF) && (receive_arr[1] == 0xFF) && (receive_arr[2] == 0xFF) && (receive_arr[3] == 0xFF)
     132:	80 91 36 01 	lds	r24, 0x0136
     136:	8f 3f       	cpi	r24, 0xFF	; 255
     138:	a1 f5       	brne	.+104    	; 0x1a2 <can_check_general+0xd4>
     13a:	80 91 37 01 	lds	r24, 0x0137
     13e:	8f 3f       	cpi	r24, 0xFF	; 255
     140:	09 f0       	breq	.+2      	; 0x144 <can_check_general+0x76>
     142:	89 c0       	rjmp	.+274    	; 0x256 <can_check_general+0x188>
     144:	80 91 38 01 	lds	r24, 0x0138
     148:	8f 3f       	cpi	r24, 0xFF	; 255
     14a:	09 f0       	breq	.+2      	; 0x14e <can_check_general+0x80>
     14c:	84 c0       	rjmp	.+264    	; 0x256 <can_check_general+0x188>
     14e:	80 91 39 01 	lds	r24, 0x0139
     152:	8f 3f       	cpi	r24, 0xFF	; 255
     154:	09 f0       	breq	.+2      	; 0x158 <can_check_general+0x8a>
     156:	7f c0       	rjmp	.+254    	; 0x256 <can_check_general+0x188>
			&& (receive_arr[4] == 0xFF) && (receive_arr[5] == 0xFF) && (receive_arr[6] == 0xFF) && (receive_arr[7] == 0xFF))
     158:	80 91 3a 01 	lds	r24, 0x013A
     15c:	8f 3f       	cpi	r24, 0xFF	; 255
     15e:	09 f0       	breq	.+2      	; 0x162 <can_check_general+0x94>
     160:	7a c0       	rjmp	.+244    	; 0x256 <can_check_general+0x188>
     162:	80 91 3b 01 	lds	r24, 0x013B
     166:	8f 3f       	cpi	r24, 0xFF	; 255
     168:	09 f0       	breq	.+2      	; 0x16c <can_check_general+0x9e>
     16a:	75 c0       	rjmp	.+234    	; 0x256 <can_check_general+0x188>
     16c:	80 91 3c 01 	lds	r24, 0x013C
     170:	8f 3f       	cpi	r24, 0xFF	; 255
     172:	09 f0       	breq	.+2      	; 0x176 <can_check_general+0xa8>
     174:	70 c0       	rjmp	.+224    	; 0x256 <can_check_general+0x188>
     176:	80 91 3d 01 	lds	r24, 0x013D
     17a:	8f 3f       	cpi	r24, 0xFF	; 255
     17c:	09 f0       	breq	.+2      	; 0x180 <can_check_general+0xb2>
     17e:	6b c0       	rjmp	.+214    	; 0x256 <can_check_general+0x188>
			{
				LED_toggle(LED3);	//Toggle LED3 when the appropriate message is received.
     180:	83 e0       	ldi	r24, 0x03	; 3
     182:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_toggle>
				delay_ms(100);
     186:	84 e6       	ldi	r24, 0x64	; 100
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
				LED_toggle(LED3);
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_toggle>
				delay_ms(100);
     194:	84 e6       	ldi	r24, 0x64	; 100
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
				send_now = 1;
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	80 93 2c 01 	sts	0x012C, r24
			}
			
			if ((receive_arr[0] == 0x55) && (receive_arr[1] == 0x55) && (receive_arr[2] == 0x55) && (receive_arr[3] == 0x55)
     1a2:	80 91 36 01 	lds	r24, 0x0136
     1a6:	85 35       	cpi	r24, 0x55	; 85
     1a8:	09 f0       	breq	.+2      	; 0x1ac <can_check_general+0xde>
     1aa:	55 c0       	rjmp	.+170    	; 0x256 <can_check_general+0x188>
     1ac:	80 91 37 01 	lds	r24, 0x0137
     1b0:	85 35       	cpi	r24, 0x55	; 85
     1b2:	09 f0       	breq	.+2      	; 0x1b6 <can_check_general+0xe8>
     1b4:	50 c0       	rjmp	.+160    	; 0x256 <can_check_general+0x188>
     1b6:	80 91 38 01 	lds	r24, 0x0138
     1ba:	85 35       	cpi	r24, 0x55	; 85
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <can_check_general+0xf2>
     1be:	4b c0       	rjmp	.+150    	; 0x256 <can_check_general+0x188>
     1c0:	80 91 39 01 	lds	r24, 0x0139
     1c4:	85 35       	cpi	r24, 0x55	; 85
     1c6:	09 f0       	breq	.+2      	; 0x1ca <can_check_general+0xfc>
     1c8:	46 c0       	rjmp	.+140    	; 0x256 <can_check_general+0x188>
			&& (receive_arr[4] == 0x55) && (receive_arr[5] == 0x55) && (receive_arr[6] == 0x55) && (receive_arr[7] == 0x55))
     1ca:	80 91 3a 01 	lds	r24, 0x013A
     1ce:	85 35       	cpi	r24, 0x55	; 85
     1d0:	09 f0       	breq	.+2      	; 0x1d4 <can_check_general+0x106>
     1d2:	41 c0       	rjmp	.+130    	; 0x256 <can_check_general+0x188>
     1d4:	80 91 3b 01 	lds	r24, 0x013B
     1d8:	85 35       	cpi	r24, 0x55	; 85
     1da:	e9 f5       	brne	.+122    	; 0x256 <can_check_general+0x188>
     1dc:	80 91 3c 01 	lds	r24, 0x013C
     1e0:	85 35       	cpi	r24, 0x55	; 85
     1e2:	c9 f5       	brne	.+114    	; 0x256 <can_check_general+0x188>
     1e4:	80 91 3d 01 	lds	r24, 0x013D
     1e8:	85 35       	cpi	r24, 0x55	; 85
     1ea:	a9 f5       	brne	.+106    	; 0x256 <can_check_general+0x188>
			{
				LED_toggle(LED7);	//Toggle LED7 when the appropriate message is received.
     1ec:	87 e0       	ldi	r24, 0x07	; 7
     1ee:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_toggle>
				delay_ms(100);
     1f2:	84 e6       	ldi	r24, 0x64	; 100
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
				LED_toggle(LED7);
     1fa:	87 e0       	ldi	r24, 0x07	; 7
     1fc:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_toggle>
				delay_ms(100);
     200:	84 e6       	ldi	r24, 0x64	; 100
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
				send_data = 1;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 46 01 	sts	0x0146, r24
     20e:	23 c0       	rjmp	.+70     	; 0x256 <can_check_general+0x188>
			}
			
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     210:	11 92       	st	Z+, r1
				LED_toggle(LED7);
				delay_ms(100);
				send_data = 1;
			}
			
			for (i = 0; i < 8; i ++)
     212:	ec 17       	cp	r30, r28
     214:	fd 07       	cpc	r31, r29
     216:	e1 f7       	brne	.-8      	; 0x210 <can_check_general+0x142>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     218:	8d e2       	ldi	r24, 0x2D	; 45
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	90 93 28 01 	sts	0x0128, r25
     220:	80 93 27 01 	sts	0x0127, r24
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     224:	10 92 2b 01 	sts	0x012B, r1
		message.id.std = SUB0_MB0;  // populate ID field with ID Tag
     228:	84 e1       	ldi	r24, 0x14	; 20
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	90 93 23 01 	sts	0x0123, r25
     230:	80 93 22 01 	sts	0x0122, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     234:	85 e0       	ldi	r24, 0x05	; 5
     236:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	80 93 26 01 	sts	0x0126, r24
		mob_number = 0;
     240:	10 92 4f 01 	sts	0x014F, r1
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     244:	60 91 4f 01 	lds	r22, 0x014F
     248:	80 e2       	ldi	r24, 0x20	; 32
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 fd 01 	call	0x3fa	; 0x3fa <can_cmd>
     250:	81 11       	cpse	r24, r1
     252:	f8 cf       	rjmp	.-16     	; 0x244 <can_check_general+0x176>
     254:	03 c0       	rjmp	.+6      	; 0x25c <can_check_general+0x18e>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     256:	e6 e3       	ldi	r30, 0x36	; 54
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	da cf       	rjmp	.-76     	; 0x210 <can_check_general+0x142>
		mob_number = 0;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     262:	28 e1       	ldi	r18, 0x18	; 24
     264:	31 e0       	ldi	r19, 0x01	; 1
     266:	30 93 28 01 	sts	0x0128, r19
     26a:	20 93 27 01 	sts	0x0127, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     26e:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = id;  // populate ID field with ID Tag
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	70 93 23 01 	sts	0x0123, r23
     278:	60 93 22 01 	sts	0x0122, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     27c:	22 e0       	ldi	r18, 0x02	; 2
     27e:	20 93 21 01 	sts	0x0121, r18
	message.dlc = 8;			 // Max length of a CAN message.
     282:	28 e0       	ldi	r18, 0x08	; 8
     284:	20 93 26 01 	sts	0x0126, r18
	mob_number = 4;
     288:	24 e0       	ldi	r18, 0x04	; 4
     28a:	20 93 4f 01 	sts	0x014F, r18
     28e:	dc 01       	movw	r26, r24
     290:	e8 e1       	ldi	r30, 0x18	; 24
     292:	f1 e0       	ldi	r31, 0x01	; 1
     294:	80 e2       	ldi	r24, 0x20	; 32
     296:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     298:	2d 91       	ld	r18, X+
     29a:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     29c:	e8 17       	cp	r30, r24
     29e:	f9 07       	cpc	r31, r25
     2a0:	d9 f7       	brne	.-10     	; 0x298 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     2a2:	60 91 4f 01 	lds	r22, 0x014F
     2a6:	80 e2       	ldi	r24, 0x20	; 32
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 fd 01 	call	0x3fa	; 0x3fa <can_cmd>
     2ae:	81 11       	cpse	r24, r1
     2b0:	f8 cf       	rjmp	.-16     	; 0x2a2 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     2b2:	60 91 4f 01 	lds	r22, 0x014F
     2b6:	80 e2       	ldi	r24, 0x20	; 32
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 29 08 	call	0x1052	; 0x1052 <can_get_status>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	c1 f3       	breq	.-16     	; 0x2b2 <can_send_message+0x50>

	return;
}
     2c2:	08 95       	ret

000002c4 <can_init_mobs>:
void can_init_mobs(void)
{
	/* INITIALIZE MOB0 */
	uint8_t i;

	message.pt_data = &data0[0]; // point message object to first element of data buffer
     2c4:	8d e2       	ldi	r24, 0x2D	; 45
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	90 93 28 01 	sts	0x0128, r25
     2cc:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2d0:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_MB0;  // populate ID field with ID Tag
     2d4:	84 e1       	ldi	r24, 0x14	; 20
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	90 93 23 01 	sts	0x0123, r25
     2dc:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     2e6:	88 e0       	ldi	r24, 0x08	; 8
     2e8:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
     2ec:	10 92 4f 01 	sts	0x014F, r1
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     2f0:	60 91 4f 01 	lds	r22, 0x014F
     2f4:	80 e2       	ldi	r24, 0x20	; 32
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <can_cmd>
     2fc:	81 11       	cpse	r24, r1
     2fe:	f8 cf       	rjmp	.-16     	; 0x2f0 <can_init_mobs+0x2c>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     300:	87 e4       	ldi	r24, 0x47	; 71
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	90 93 28 01 	sts	0x0128, r25
     308:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     30c:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
     310:	89 e1       	ldi	r24, 0x19	; 25
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	90 93 23 01 	sts	0x0123, r25
     318:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     31c:	85 e0       	ldi	r24, 0x05	; 5
     31e:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;				// Max length of a CAN message.
     322:	98 e0       	ldi	r25, 0x08	; 8
     324:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     328:	80 93 4f 01 	sts	0x014F, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     32c:	60 91 4f 01 	lds	r22, 0x014F
     330:	80 e2       	ldi	r24, 0x20	; 32
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	0e 94 fd 01 	call	0x3fa	; 0x3fa <can_cmd>
     338:	81 11       	cpse	r24, r1
     33a:	f8 cf       	rjmp	.-16     	; 0x32c <can_init_mobs+0x68>
     33c:	e6 e3       	ldi	r30, 0x36	; 54
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	8e e3       	ldi	r24, 0x3E	; 62
     342:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     344:	11 92       	st	Z+, r1
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     346:	e8 17       	cp	r30, r24
     348:	f9 07       	cpc	r31, r25
     34a:	e1 f7       	brne	.-8      	; 0x344 <can_init_mobs+0x80>
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
	}
	
	send_now = 0;
     34c:	10 92 2c 01 	sts	0x012C, r1
	send_hk = 0;
     350:	10 92 35 01 	sts	0x0135, r1
	send_data = 0;
     354:	10 92 46 01 	sts	0x0146, r1
     358:	08 95       	ret

0000035a <can_clear_all_mob>:
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	ad ee       	ldi	r26, 0xED	; 237
     35e:	b0 e0       	ldi	r27, 0x00	; 0
                    if (brp != BRP_MAX) brp++;
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
     360:	3e ee       	ldi	r19, 0xEE	; 238
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     362:	20 e0       	ldi	r18, 0x00	; 0
            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
     364:	98 2f       	mov	r25, r24

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
     366:	92 95       	swap	r25
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
     368:	90 7f       	andi	r25, 0xF0	; 240
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
                else
                {
                    ntq = NTQ_MIN;
     36a:	9c 93       	st	X, r25
     36c:	e3 2f       	mov	r30, r19
     36e:	f2 2f       	mov	r31, r18
     370:	11 92       	st	Z+, r1
     372:	e8 3f       	cpi	r30, 0xF8	; 248
     374:	f1 05       	cpc	r31, r1
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
     376:	e1 f7       	brne	.-8      	; 0x370 <can_clear_all_mob+0x16>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
                }
                else
                {
                phs2=phs1;
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	86 30       	cpi	r24, 0x06	; 6
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
            phs1_inc = 1;
     37c:	99 f7       	brne	.-26     	; 0x364 <can_clear_all_mob+0xa>
     37e:	08 95       	ret

00000380 <can_get_mob_status>:
     380:	80 91 ef 00 	lds	r24, 0x00EF
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
     384:	80 7c       	andi	r24, 0xC0	; 192
     386:	61 f0       	breq	.+24     	; 0x3a0 <can_get_mob_status+0x20>
     388:	80 91 ee 00 	lds	r24, 0x00EE
     38c:	98 2f       	mov	r25, r24
     38e:	90 7e       	andi	r25, 0xE0	; 224
     390:	28 2f       	mov	r18, r24
     392:	20 76       	andi	r18, 0x60	; 96
     394:	20 32       	cpi	r18, 0x20	; 32
     396:	31 f0       	breq	.+12     	; 0x3a4 <can_get_mob_status+0x24>
     398:	90 34       	cpi	r25, 0x40	; 64
     39a:	31 f0       	breq	.+12     	; 0x3a8 <can_get_mob_status+0x28>
     39c:	8f 71       	andi	r24, 0x1F	; 31
     39e:	08 95       	ret
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
     3a2:	08 95       	ret
     3a4:	89 2f       	mov	r24, r25
     3a6:	08 95       	ret
     3a8:	89 2f       	mov	r24, r25
     3aa:	08 95       	ret

000003ac <can_get_data>:
     3ac:	fc 01       	movw	r30, r24
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	aa ef       	ldi	r26, 0xFA	; 250
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	9c 91       	ld	r25, X
     3b6:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     3b8:	8f 5f       	subi	r24, 0xFF	; 255
     3ba:	88 30       	cpi	r24, 0x08	; 8
     3bc:	d9 f7       	brne	.-10     	; 0x3b4 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     3be:	08 95       	ret

000003c0 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	80 93 e2 00 	sts	0x00E2, r24
     3cc:	8c e0       	ldi	r24, 0x0C	; 12
     3ce:	80 93 e3 00 	sts	0x00E3, r24
     3d2:	87 e3       	ldi	r24, 0x37	; 55
     3d4:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	08 95       	ret

000003dc <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     3dc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <can_fixed_baudrate>
     3e0:	88 23       	and	r24, r24
     3e2:	49 f0       	breq	.+18     	; 0x3f6 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     3e4:	0e 94 ad 01 	call	0x35a	; 0x35a <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     3e8:	e8 ed       	ldi	r30, 0xD8	; 216
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	82 60       	ori	r24, 0x02	; 2
     3f0:	80 83       	st	Z, r24
    return (1);
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     3f6:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     3f8:	08 95       	ret

000003fa <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	1f 92       	push	r1
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
     404:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     406:	11 96       	adiw	r26, 0x01	; 1
     408:	8c 91       	ld	r24, X
     40a:	11 97       	sbiw	r26, 0x01	; 1
     40c:	8c 30       	cpi	r24, 0x0C	; 12
     40e:	b1 f4       	brne	.+44     	; 0x43c <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     410:	19 96       	adiw	r26, 0x09	; 9
     412:	8c 91       	ld	r24, X
     414:	19 97       	sbiw	r26, 0x09	; 9
     416:	80 36       	cpi	r24, 0x60	; 96
     418:	69 f4       	brne	.+26     	; 0x434 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     41a:	86 2f       	mov	r24, r22
     41c:	82 95       	swap	r24
     41e:	80 7f       	andi	r24, 0xF0	; 240
     420:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     424:	ef ee       	ldi	r30, 0xEF	; 239
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	8f 73       	andi	r24, 0x3F	; 63
     42c:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     42e:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     432:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     434:	19 96       	adiw	r26, 0x09	; 9
     436:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	07 c6       	rjmp	.+3086   	; 0x104a <__stack+0x74b>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     43c:	86 2f       	mov	r24, r22
     43e:	82 95       	swap	r24
     440:	80 7f       	andi	r24, 0xF0	; 240
     442:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     446:	80 91 ef 00 	lds	r24, 0x00EF
     44a:	80 7c       	andi	r24, 0xC0	; 192
     44c:	09 f0       	breq	.+2      	; 0x450 <can_cmd+0x56>
     44e:	f9 c5       	rjmp	.+3058   	; 0x1042 <__stack+0x743>
    {
      cmd->status = MOB_PENDING; 
     450:	80 e6       	ldi	r24, 0x60	; 96
     452:	19 96       	adiw	r26, 0x09	; 9
     454:	8c 93       	st	X, r24
     456:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     458:	6c 93       	st	X, r22
      Can_clear_mob();
     45a:	ee ee       	ldi	r30, 0xEE	; 238
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	11 92       	st	Z+, r1
     460:	e8 3f       	cpi	r30, 0xF8	; 248
     462:	f1 05       	cpc	r31, r1
     464:	e1 f7       	brne	.-8      	; 0x45e <can_cmd+0x64>
          
      switch (cmd->cmd)
     466:	11 96       	adiw	r26, 0x01	; 1
     468:	4c 91       	ld	r20, X
     46a:	11 97       	sbiw	r26, 0x01	; 1
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	fa 01       	movw	r30, r20
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	eb 30       	cpi	r30, 0x0B	; 11
     474:	f1 05       	cpc	r31, r1
     476:	08 f0       	brcs	.+2      	; 0x47a <can_cmd+0x80>
     478:	e0 c5       	rjmp	.+3008   	; 0x103a <__stack+0x73b>
     47a:	e2 5c       	subi	r30, 0xC2	; 194
     47c:	ff 4f       	sbci	r31, 0xFF	; 255
     47e:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     482:	16 96       	adiw	r26, 0x06	; 6
     484:	8c 91       	ld	r24, X
     486:	16 97       	sbiw	r26, 0x06	; 6
     488:	81 11       	cpse	r24, r1
     48a:	b7 c4       	rjmp	.+2414   	; 0xdfa <__stack+0x4fb>
     48c:	c8 c4       	rjmp	.+2448   	; 0xe1e <__stack+0x51f>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     48e:	1b 96       	adiw	r26, 0x0b	; 11
     490:	8c 91       	ld	r24, X
     492:	1b 97       	sbiw	r26, 0x0b	; 11
     494:	88 23       	and	r24, r24
     496:	d9 f1       	breq	.+118    	; 0x50e <can_cmd+0x114>
     498:	14 96       	adiw	r26, 0x04	; 4
     49a:	9c 91       	ld	r25, X
     49c:	14 97       	sbiw	r26, 0x04	; 4
     49e:	92 95       	swap	r25
     4a0:	96 95       	lsr	r25
     4a2:	97 70       	andi	r25, 0x07	; 7
     4a4:	15 96       	adiw	r26, 0x05	; 5
     4a6:	8c 91       	ld	r24, X
     4a8:	15 97       	sbiw	r26, 0x05	; 5
     4aa:	88 0f       	add	r24, r24
     4ac:	88 0f       	add	r24, r24
     4ae:	88 0f       	add	r24, r24
     4b0:	89 0f       	add	r24, r25
     4b2:	80 93 f3 00 	sts	0x00F3, r24
     4b6:	13 96       	adiw	r26, 0x03	; 3
     4b8:	9c 91       	ld	r25, X
     4ba:	13 97       	sbiw	r26, 0x03	; 3
     4bc:	92 95       	swap	r25
     4be:	96 95       	lsr	r25
     4c0:	97 70       	andi	r25, 0x07	; 7
     4c2:	14 96       	adiw	r26, 0x04	; 4
     4c4:	8c 91       	ld	r24, X
     4c6:	14 97       	sbiw	r26, 0x04	; 4
     4c8:	88 0f       	add	r24, r24
     4ca:	88 0f       	add	r24, r24
     4cc:	88 0f       	add	r24, r24
     4ce:	89 0f       	add	r24, r25
     4d0:	80 93 f2 00 	sts	0x00F2, r24
     4d4:	12 96       	adiw	r26, 0x02	; 2
     4d6:	9c 91       	ld	r25, X
     4d8:	12 97       	sbiw	r26, 0x02	; 2
     4da:	92 95       	swap	r25
     4dc:	96 95       	lsr	r25
     4de:	97 70       	andi	r25, 0x07	; 7
     4e0:	13 96       	adiw	r26, 0x03	; 3
     4e2:	8c 91       	ld	r24, X
     4e4:	13 97       	sbiw	r26, 0x03	; 3
     4e6:	88 0f       	add	r24, r24
     4e8:	88 0f       	add	r24, r24
     4ea:	88 0f       	add	r24, r24
     4ec:	89 0f       	add	r24, r25
     4ee:	80 93 f1 00 	sts	0x00F1, r24
     4f2:	12 96       	adiw	r26, 0x02	; 2
     4f4:	8c 91       	ld	r24, X
     4f6:	12 97       	sbiw	r26, 0x02	; 2
     4f8:	88 0f       	add	r24, r24
     4fa:	88 0f       	add	r24, r24
     4fc:	88 0f       	add	r24, r24
     4fe:	80 93 f0 00 	sts	0x00F0, r24
     502:	ef ee       	ldi	r30, 0xEF	; 239
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	80 61       	ori	r24, 0x10	; 16
     50a:	80 83       	st	Z, r24
     50c:	1c c0       	rjmp	.+56     	; 0x546 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	8c 91       	ld	r24, X
     512:	12 97       	sbiw	r26, 0x02	; 2
     514:	86 95       	lsr	r24
     516:	86 95       	lsr	r24
     518:	86 95       	lsr	r24
     51a:	13 96       	adiw	r26, 0x03	; 3
     51c:	9c 91       	ld	r25, X
     51e:	13 97       	sbiw	r26, 0x03	; 3
     520:	20 e2       	ldi	r18, 0x20	; 32
     522:	92 9f       	mul	r25, r18
     524:	80 0d       	add	r24, r0
     526:	11 24       	eor	r1, r1
     528:	80 93 f3 00 	sts	0x00F3, r24
     52c:	12 96       	adiw	r26, 0x02	; 2
     52e:	8c 91       	ld	r24, X
     530:	12 97       	sbiw	r26, 0x02	; 2
     532:	82 95       	swap	r24
     534:	88 0f       	add	r24, r24
     536:	80 7e       	andi	r24, 0xE0	; 224
     538:	80 93 f2 00 	sts	0x00F2, r24
     53c:	ef ee       	ldi	r30, 0xEF	; 239
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	8f 7e       	andi	r24, 0xEF	; 239
     544:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     546:	16 96       	adiw	r26, 0x06	; 6
     548:	8c 91       	ld	r24, X
     54a:	16 97       	sbiw	r26, 0x06	; 6
     54c:	88 23       	and	r24, r24
     54e:	91 f0       	breq	.+36     	; 0x574 <can_cmd+0x17a>
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	8a ef       	ldi	r24, 0xFA	; 250
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	17 96       	adiw	r26, 0x07	; 7
     558:	ed 91       	ld	r30, X+
     55a:	fc 91       	ld	r31, X
     55c:	18 97       	sbiw	r26, 0x08	; 8
     55e:	e2 0f       	add	r30, r18
     560:	f1 1d       	adc	r31, r1
     562:	30 81       	ld	r19, Z
     564:	fc 01       	movw	r30, r24
     566:	30 83       	st	Z, r19
     568:	2f 5f       	subi	r18, 0xFF	; 255
     56a:	16 96       	adiw	r26, 0x06	; 6
     56c:	3c 91       	ld	r19, X
     56e:	16 97       	sbiw	r26, 0x06	; 6
     570:	23 17       	cp	r18, r19
     572:	88 f3       	brcs	.-30     	; 0x556 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     574:	1a 96       	adiw	r26, 0x0a	; 10
     576:	8c 91       	ld	r24, X
     578:	1a 97       	sbiw	r26, 0x0a	; 10
     57a:	88 23       	and	r24, r24
     57c:	31 f0       	breq	.+12     	; 0x58a <can_cmd+0x190>
     57e:	e0 ef       	ldi	r30, 0xF0	; 240
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	84 60       	ori	r24, 0x04	; 4
     586:	80 83       	st	Z, r24
     588:	05 c0       	rjmp	.+10     	; 0x594 <can_cmd+0x19a>
            else Can_clear_rtr();    
     58a:	e0 ef       	ldi	r30, 0xF0	; 240
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	8b 7f       	andi	r24, 0xFB	; 251
     592:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     594:	ef ee       	ldi	r30, 0xEF	; 239
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	90 81       	ld	r25, Z
     59a:	16 96       	adiw	r26, 0x06	; 6
     59c:	8c 91       	ld	r24, X
     59e:	89 2b       	or	r24, r25
     5a0:	80 83       	st	Z, r24
          Can_config_tx();
     5a2:	80 81       	ld	r24, Z
     5a4:	8f 73       	andi	r24, 0x3F	; 63
     5a6:	80 83       	st	Z, r24
     5a8:	80 81       	ld	r24, Z
     5aa:	80 64       	ori	r24, 0x40	; 64
     5ac:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     5ae:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     5b0:	4c c5       	rjmp	.+2712   	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     5b2:	1b 96       	adiw	r26, 0x0b	; 11
     5b4:	8c 91       	ld	r24, X
     5b6:	1b 97       	sbiw	r26, 0x0b	; 11
     5b8:	88 23       	and	r24, r24
     5ba:	d9 f1       	breq	.+118    	; 0x632 <can_cmd+0x238>
     5bc:	14 96       	adiw	r26, 0x04	; 4
     5be:	9c 91       	ld	r25, X
     5c0:	14 97       	sbiw	r26, 0x04	; 4
     5c2:	92 95       	swap	r25
     5c4:	96 95       	lsr	r25
     5c6:	97 70       	andi	r25, 0x07	; 7
     5c8:	15 96       	adiw	r26, 0x05	; 5
     5ca:	8c 91       	ld	r24, X
     5cc:	15 97       	sbiw	r26, 0x05	; 5
     5ce:	88 0f       	add	r24, r24
     5d0:	88 0f       	add	r24, r24
     5d2:	88 0f       	add	r24, r24
     5d4:	89 0f       	add	r24, r25
     5d6:	80 93 f3 00 	sts	0x00F3, r24
     5da:	13 96       	adiw	r26, 0x03	; 3
     5dc:	9c 91       	ld	r25, X
     5de:	13 97       	sbiw	r26, 0x03	; 3
     5e0:	92 95       	swap	r25
     5e2:	96 95       	lsr	r25
     5e4:	97 70       	andi	r25, 0x07	; 7
     5e6:	14 96       	adiw	r26, 0x04	; 4
     5e8:	8c 91       	ld	r24, X
     5ea:	14 97       	sbiw	r26, 0x04	; 4
     5ec:	88 0f       	add	r24, r24
     5ee:	88 0f       	add	r24, r24
     5f0:	88 0f       	add	r24, r24
     5f2:	89 0f       	add	r24, r25
     5f4:	80 93 f2 00 	sts	0x00F2, r24
     5f8:	12 96       	adiw	r26, 0x02	; 2
     5fa:	9c 91       	ld	r25, X
     5fc:	12 97       	sbiw	r26, 0x02	; 2
     5fe:	92 95       	swap	r25
     600:	96 95       	lsr	r25
     602:	97 70       	andi	r25, 0x07	; 7
     604:	13 96       	adiw	r26, 0x03	; 3
     606:	8c 91       	ld	r24, X
     608:	13 97       	sbiw	r26, 0x03	; 3
     60a:	88 0f       	add	r24, r24
     60c:	88 0f       	add	r24, r24
     60e:	88 0f       	add	r24, r24
     610:	89 0f       	add	r24, r25
     612:	80 93 f1 00 	sts	0x00F1, r24
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	8c 91       	ld	r24, X
     61a:	12 97       	sbiw	r26, 0x02	; 2
     61c:	88 0f       	add	r24, r24
     61e:	88 0f       	add	r24, r24
     620:	88 0f       	add	r24, r24
     622:	80 93 f0 00 	sts	0x00F0, r24
     626:	ef ee       	ldi	r30, 0xEF	; 239
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	80 61       	ori	r24, 0x10	; 16
     62e:	80 83       	st	Z, r24
     630:	1c c0       	rjmp	.+56     	; 0x66a <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     632:	12 96       	adiw	r26, 0x02	; 2
     634:	8c 91       	ld	r24, X
     636:	12 97       	sbiw	r26, 0x02	; 2
     638:	86 95       	lsr	r24
     63a:	86 95       	lsr	r24
     63c:	86 95       	lsr	r24
     63e:	13 96       	adiw	r26, 0x03	; 3
     640:	9c 91       	ld	r25, X
     642:	13 97       	sbiw	r26, 0x03	; 3
     644:	f0 e2       	ldi	r31, 0x20	; 32
     646:	9f 9f       	mul	r25, r31
     648:	80 0d       	add	r24, r0
     64a:	11 24       	eor	r1, r1
     64c:	80 93 f3 00 	sts	0x00F3, r24
     650:	12 96       	adiw	r26, 0x02	; 2
     652:	8c 91       	ld	r24, X
     654:	12 97       	sbiw	r26, 0x02	; 2
     656:	82 95       	swap	r24
     658:	88 0f       	add	r24, r24
     65a:	80 7e       	andi	r24, 0xE0	; 224
     65c:	80 93 f2 00 	sts	0x00F2, r24
     660:	ef ee       	ldi	r30, 0xEF	; 239
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	80 81       	ld	r24, Z
     666:	8f 7e       	andi	r24, 0xEF	; 239
     668:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     66a:	16 96       	adiw	r26, 0x06	; 6
     66c:	8c 91       	ld	r24, X
     66e:	16 97       	sbiw	r26, 0x06	; 6
     670:	88 23       	and	r24, r24
     672:	91 f0       	breq	.+36     	; 0x698 <can_cmd+0x29e>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	8a ef       	ldi	r24, 0xFA	; 250
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	17 96       	adiw	r26, 0x07	; 7
     67c:	ed 91       	ld	r30, X+
     67e:	fc 91       	ld	r31, X
     680:	18 97       	sbiw	r26, 0x08	; 8
     682:	e2 0f       	add	r30, r18
     684:	f1 1d       	adc	r31, r1
     686:	30 81       	ld	r19, Z
     688:	fc 01       	movw	r30, r24
     68a:	30 83       	st	Z, r19
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	16 96       	adiw	r26, 0x06	; 6
     690:	3c 91       	ld	r19, X
     692:	16 97       	sbiw	r26, 0x06	; 6
     694:	23 17       	cp	r18, r19
     696:	88 f3       	brcs	.-30     	; 0x67a <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     698:	1a 96       	adiw	r26, 0x0a	; 10
     69a:	1c 92       	st	X, r1
     69c:	1a 97       	sbiw	r26, 0x0a	; 10
     69e:	e0 ef       	ldi	r30, 0xF0	; 240
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	80 81       	ld	r24, Z
     6a4:	8b 7f       	andi	r24, 0xFB	; 251
     6a6:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     6a8:	ef ee       	ldi	r30, 0xEF	; 239
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	90 81       	ld	r25, Z
     6ae:	16 96       	adiw	r26, 0x06	; 6
     6b0:	8c 91       	ld	r24, X
     6b2:	89 2b       	or	r24, r25
     6b4:	80 83       	st	Z, r24
          Can_config_tx();
     6b6:	80 81       	ld	r24, Z
     6b8:	8f 73       	andi	r24, 0x3F	; 63
     6ba:	80 83       	st	Z, r24
     6bc:	80 81       	ld	r24, Z
     6be:	80 64       	ori	r24, 0x40	; 64
     6c0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     6c2:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     6c4:	c2 c4       	rjmp	.+2436   	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     6c6:	1b 96       	adiw	r26, 0x0b	; 11
     6c8:	8c 91       	ld	r24, X
     6ca:	1b 97       	sbiw	r26, 0x0b	; 11
     6cc:	88 23       	and	r24, r24
     6ce:	d9 f1       	breq	.+118    	; 0x746 <can_cmd+0x34c>
     6d0:	14 96       	adiw	r26, 0x04	; 4
     6d2:	9c 91       	ld	r25, X
     6d4:	14 97       	sbiw	r26, 0x04	; 4
     6d6:	92 95       	swap	r25
     6d8:	96 95       	lsr	r25
     6da:	97 70       	andi	r25, 0x07	; 7
     6dc:	15 96       	adiw	r26, 0x05	; 5
     6de:	8c 91       	ld	r24, X
     6e0:	15 97       	sbiw	r26, 0x05	; 5
     6e2:	88 0f       	add	r24, r24
     6e4:	88 0f       	add	r24, r24
     6e6:	88 0f       	add	r24, r24
     6e8:	89 0f       	add	r24, r25
     6ea:	80 93 f3 00 	sts	0x00F3, r24
     6ee:	13 96       	adiw	r26, 0x03	; 3
     6f0:	9c 91       	ld	r25, X
     6f2:	13 97       	sbiw	r26, 0x03	; 3
     6f4:	92 95       	swap	r25
     6f6:	96 95       	lsr	r25
     6f8:	97 70       	andi	r25, 0x07	; 7
     6fa:	14 96       	adiw	r26, 0x04	; 4
     6fc:	8c 91       	ld	r24, X
     6fe:	14 97       	sbiw	r26, 0x04	; 4
     700:	88 0f       	add	r24, r24
     702:	88 0f       	add	r24, r24
     704:	88 0f       	add	r24, r24
     706:	89 0f       	add	r24, r25
     708:	80 93 f2 00 	sts	0x00F2, r24
     70c:	12 96       	adiw	r26, 0x02	; 2
     70e:	9c 91       	ld	r25, X
     710:	12 97       	sbiw	r26, 0x02	; 2
     712:	92 95       	swap	r25
     714:	96 95       	lsr	r25
     716:	97 70       	andi	r25, 0x07	; 7
     718:	13 96       	adiw	r26, 0x03	; 3
     71a:	8c 91       	ld	r24, X
     71c:	13 97       	sbiw	r26, 0x03	; 3
     71e:	88 0f       	add	r24, r24
     720:	88 0f       	add	r24, r24
     722:	88 0f       	add	r24, r24
     724:	89 0f       	add	r24, r25
     726:	80 93 f1 00 	sts	0x00F1, r24
     72a:	12 96       	adiw	r26, 0x02	; 2
     72c:	8c 91       	ld	r24, X
     72e:	12 97       	sbiw	r26, 0x02	; 2
     730:	88 0f       	add	r24, r24
     732:	88 0f       	add	r24, r24
     734:	88 0f       	add	r24, r24
     736:	80 93 f0 00 	sts	0x00F0, r24
     73a:	ef ee       	ldi	r30, 0xEF	; 239
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	80 61       	ori	r24, 0x10	; 16
     742:	80 83       	st	Z, r24
     744:	1c c0       	rjmp	.+56     	; 0x77e <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     746:	12 96       	adiw	r26, 0x02	; 2
     748:	8c 91       	ld	r24, X
     74a:	12 97       	sbiw	r26, 0x02	; 2
     74c:	86 95       	lsr	r24
     74e:	86 95       	lsr	r24
     750:	86 95       	lsr	r24
     752:	13 96       	adiw	r26, 0x03	; 3
     754:	9c 91       	ld	r25, X
     756:	13 97       	sbiw	r26, 0x03	; 3
     758:	f0 e2       	ldi	r31, 0x20	; 32
     75a:	9f 9f       	mul	r25, r31
     75c:	80 0d       	add	r24, r0
     75e:	11 24       	eor	r1, r1
     760:	80 93 f3 00 	sts	0x00F3, r24
     764:	12 96       	adiw	r26, 0x02	; 2
     766:	8c 91       	ld	r24, X
     768:	12 97       	sbiw	r26, 0x02	; 2
     76a:	82 95       	swap	r24
     76c:	88 0f       	add	r24, r24
     76e:	80 7e       	andi	r24, 0xE0	; 224
     770:	80 93 f2 00 	sts	0x00F2, r24
     774:	ef ee       	ldi	r30, 0xEF	; 239
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	8f 7e       	andi	r24, 0xEF	; 239
     77c:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	1a 96       	adiw	r26, 0x0a	; 10
     782:	8c 93       	st	X, r24
     784:	1a 97       	sbiw	r26, 0x0a	; 10
     786:	e0 ef       	ldi	r30, 0xF0	; 240
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	84 60       	ori	r24, 0x04	; 4
     78e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     790:	ef ee       	ldi	r30, 0xEF	; 239
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	90 81       	ld	r25, Z
     796:	16 96       	adiw	r26, 0x06	; 6
     798:	8c 91       	ld	r24, X
     79a:	89 2b       	or	r24, r25
     79c:	80 83       	st	Z, r24
          Can_config_tx();
     79e:	80 81       	ld	r24, Z
     7a0:	8f 73       	andi	r24, 0x3F	; 63
     7a2:	80 83       	st	Z, r24
     7a4:	80 81       	ld	r24, Z
     7a6:	80 64       	ori	r24, 0x40	; 64
     7a8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7aa:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     7ac:	4e c4       	rjmp	.+2204   	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     7ae:	19 82       	std	Y+1, r1	; 0x01
     7b0:	9b 81       	ldd	r25, Y+3	; 0x03
     7b2:	92 95       	swap	r25
     7b4:	96 95       	lsr	r25
     7b6:	97 70       	andi	r25, 0x07	; 7
     7b8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ba:	88 0f       	add	r24, r24
     7bc:	88 0f       	add	r24, r24
     7be:	88 0f       	add	r24, r24
     7c0:	89 0f       	add	r24, r25
     7c2:	80 93 f7 00 	sts	0x00F7, r24
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	92 95       	swap	r25
     7ca:	96 95       	lsr	r25
     7cc:	97 70       	andi	r25, 0x07	; 7
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	88 0f       	add	r24, r24
     7d2:	88 0f       	add	r24, r24
     7d4:	88 0f       	add	r24, r24
     7d6:	89 0f       	add	r24, r25
     7d8:	80 93 f6 00 	sts	0x00F6, r24
     7dc:	99 81       	ldd	r25, Y+1	; 0x01
     7de:	92 95       	swap	r25
     7e0:	96 95       	lsr	r25
     7e2:	97 70       	andi	r25, 0x07	; 7
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	88 0f       	add	r24, r24
     7e8:	88 0f       	add	r24, r24
     7ea:	88 0f       	add	r24, r24
     7ec:	89 0f       	add	r24, r25
     7ee:	80 93 f5 00 	sts	0x00F5, r24
     7f2:	29 81       	ldd	r18, Y+1	; 0x01
     7f4:	22 0f       	add	r18, r18
     7f6:	22 0f       	add	r18, r18
     7f8:	22 0f       	add	r18, r18
     7fa:	84 ef       	ldi	r24, 0xF4	; 244
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     802:	ef ee       	ldi	r30, 0xEF	; 239
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	30 81       	ld	r19, Z
     808:	16 96       	adiw	r26, 0x06	; 6
     80a:	2c 91       	ld	r18, X
     80c:	23 2b       	or	r18, r19
     80e:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     810:	dc 01       	movw	r26, r24
     812:	2c 91       	ld	r18, X
     814:	2b 7f       	andi	r18, 0xFB	; 251
     816:	2c 93       	st	X, r18
          Can_clear_idemsk();
     818:	2c 91       	ld	r18, X
     81a:	2e 7f       	andi	r18, 0xFE	; 254
     81c:	2c 93       	st	X, r18
          Can_config_rx();       
     81e:	80 81       	ld	r24, Z
     820:	8f 73       	andi	r24, 0x3F	; 63
     822:	80 83       	st	Z, r24
     824:	80 81       	ld	r24, Z
     826:	80 68       	ori	r24, 0x80	; 128
     828:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     82a:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     82c:	0e c4       	rjmp	.+2076   	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	82 95       	swap	r24
     836:	88 0f       	add	r24, r24
     838:	80 7e       	andi	r24, 0xE0	; 224
     83a:	81 5e       	subi	r24, 0xE1	; 225
     83c:	27 ef       	ldi	r18, 0xF7	; 247
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	f9 01       	movw	r30, r18
     842:	80 83       	st	Z, r24
     844:	49 81       	ldd	r20, Y+1	; 0x01
     846:	42 95       	swap	r20
     848:	44 0f       	add	r20, r20
     84a:	40 7e       	andi	r20, 0xE0	; 224
     84c:	86 ef       	ldi	r24, 0xF6	; 246
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	fc 01       	movw	r30, r24
     852:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     854:	12 96       	adiw	r26, 0x02	; 2
     856:	4c 91       	ld	r20, X
     858:	12 97       	sbiw	r26, 0x02	; 2
     85a:	46 95       	lsr	r20
     85c:	46 95       	lsr	r20
     85e:	46 95       	lsr	r20
     860:	13 96       	adiw	r26, 0x03	; 3
     862:	5c 91       	ld	r21, X
     864:	13 97       	sbiw	r26, 0x03	; 3
     866:	f0 e2       	ldi	r31, 0x20	; 32
     868:	5f 9f       	mul	r21, r31
     86a:	40 0d       	add	r20, r0
     86c:	11 24       	eor	r1, r1
     86e:	40 93 f3 00 	sts	0x00F3, r20
     872:	12 96       	adiw	r26, 0x02	; 2
     874:	4c 91       	ld	r20, X
     876:	12 97       	sbiw	r26, 0x02	; 2
     878:	42 95       	swap	r20
     87a:	44 0f       	add	r20, r20
     87c:	40 7e       	andi	r20, 0xE0	; 224
     87e:	40 93 f2 00 	sts	0x00F2, r20
     882:	6f ee       	ldi	r22, 0xEF	; 239
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	fb 01       	movw	r30, r22
     888:	40 81       	ld	r20, Z
     88a:	4f 7e       	andi	r20, 0xEF	; 239
     88c:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     88e:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     890:	5b 81       	ldd	r21, Y+3	; 0x03
     892:	52 95       	swap	r21
     894:	56 95       	lsr	r21
     896:	57 70       	andi	r21, 0x07	; 7
     898:	4c 81       	ldd	r20, Y+4	; 0x04
     89a:	44 0f       	add	r20, r20
     89c:	44 0f       	add	r20, r20
     89e:	44 0f       	add	r20, r20
     8a0:	45 0f       	add	r20, r21
     8a2:	f9 01       	movw	r30, r18
     8a4:	40 83       	st	Z, r20
     8a6:	3a 81       	ldd	r19, Y+2	; 0x02
     8a8:	32 95       	swap	r19
     8aa:	36 95       	lsr	r19
     8ac:	37 70       	andi	r19, 0x07	; 7
     8ae:	2b 81       	ldd	r18, Y+3	; 0x03
     8b0:	22 0f       	add	r18, r18
     8b2:	22 0f       	add	r18, r18
     8b4:	22 0f       	add	r18, r18
     8b6:	23 0f       	add	r18, r19
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	92 95       	swap	r25
     8c0:	96 95       	lsr	r25
     8c2:	97 70       	andi	r25, 0x07	; 7
     8c4:	8a 81       	ldd	r24, Y+2	; 0x02
     8c6:	88 0f       	add	r24, r24
     8c8:	88 0f       	add	r24, r24
     8ca:	88 0f       	add	r24, r24
     8cc:	89 0f       	add	r24, r25
     8ce:	80 93 f5 00 	sts	0x00F5, r24
     8d2:	29 81       	ldd	r18, Y+1	; 0x01
     8d4:	22 0f       	add	r18, r18
     8d6:	22 0f       	add	r18, r18
     8d8:	22 0f       	add	r18, r18
     8da:	84 ef       	ldi	r24, 0xF4	; 244
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     8e2:	fb 01       	movw	r30, r22
     8e4:	30 81       	ld	r19, Z
     8e6:	16 96       	adiw	r26, 0x06	; 6
     8e8:	2c 91       	ld	r18, X
     8ea:	16 97       	sbiw	r26, 0x06	; 6
     8ec:	23 2b       	or	r18, r19
     8ee:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     8f0:	1a 96       	adiw	r26, 0x0a	; 10
     8f2:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     8f4:	dc 01       	movw	r26, r24
     8f6:	2c 91       	ld	r18, X
     8f8:	24 60       	ori	r18, 0x04	; 4
     8fa:	2c 93       	st	X, r18
		  Can_clear_rtr();
     8fc:	a0 ef       	ldi	r26, 0xF0	; 240
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	2c 91       	ld	r18, X
     902:	2b 7f       	andi	r18, 0xFB	; 251
     904:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     906:	20 81       	ld	r18, Z
     908:	2f 7e       	andi	r18, 0xEF	; 239
     90a:	20 83       	st	Z, r18
          Can_clear_idemsk();
     90c:	fc 01       	movw	r30, r24
     90e:	20 81       	ld	r18, Z
     910:	2e 7f       	andi	r18, 0xFE	; 254
     912:	20 83       	st	Z, r18
          Can_config_rx();       
     914:	db 01       	movw	r26, r22
     916:	8c 91       	ld	r24, X
     918:	8f 73       	andi	r24, 0x3F	; 63
     91a:	8c 93       	st	X, r24
     91c:	8c 91       	ld	r24, X
     91e:	80 68       	ori	r24, 0x80	; 128
     920:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     922:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     924:	92 c3       	rjmp	.+1828   	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     92a:	8a 81       	ldd	r24, Y+2	; 0x02
     92c:	82 95       	swap	r24
     92e:	88 0f       	add	r24, r24
     930:	80 7e       	andi	r24, 0xE0	; 224
     932:	81 5e       	subi	r24, 0xE1	; 225
     934:	27 ef       	ldi	r18, 0xF7	; 247
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	f9 01       	movw	r30, r18
     93a:	80 83       	st	Z, r24
     93c:	49 81       	ldd	r20, Y+1	; 0x01
     93e:	42 95       	swap	r20
     940:	44 0f       	add	r20, r20
     942:	40 7e       	andi	r20, 0xE0	; 224
     944:	86 ef       	ldi	r24, 0xF6	; 246
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	fc 01       	movw	r30, r24
     94a:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     94c:	12 96       	adiw	r26, 0x02	; 2
     94e:	4c 91       	ld	r20, X
     950:	12 97       	sbiw	r26, 0x02	; 2
     952:	46 95       	lsr	r20
     954:	46 95       	lsr	r20
     956:	46 95       	lsr	r20
     958:	13 96       	adiw	r26, 0x03	; 3
     95a:	5c 91       	ld	r21, X
     95c:	13 97       	sbiw	r26, 0x03	; 3
     95e:	f0 e2       	ldi	r31, 0x20	; 32
     960:	5f 9f       	mul	r21, r31
     962:	40 0d       	add	r20, r0
     964:	11 24       	eor	r1, r1
     966:	40 93 f3 00 	sts	0x00F3, r20
     96a:	12 96       	adiw	r26, 0x02	; 2
     96c:	4c 91       	ld	r20, X
     96e:	12 97       	sbiw	r26, 0x02	; 2
     970:	42 95       	swap	r20
     972:	44 0f       	add	r20, r20
     974:	40 7e       	andi	r20, 0xE0	; 224
     976:	40 93 f2 00 	sts	0x00F2, r20
     97a:	6f ee       	ldi	r22, 0xEF	; 239
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	fb 01       	movw	r30, r22
     980:	40 81       	ld	r20, Z
     982:	4f 7e       	andi	r20, 0xEF	; 239
     984:	40 83       	st	Z, r20
		
          u8_temp=0; 
     986:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     988:	5b 81       	ldd	r21, Y+3	; 0x03
     98a:	52 95       	swap	r21
     98c:	56 95       	lsr	r21
     98e:	57 70       	andi	r21, 0x07	; 7
     990:	4c 81       	ldd	r20, Y+4	; 0x04
     992:	44 0f       	add	r20, r20
     994:	44 0f       	add	r20, r20
     996:	44 0f       	add	r20, r20
     998:	45 0f       	add	r20, r21
     99a:	f9 01       	movw	r30, r18
     99c:	40 83       	st	Z, r20
     99e:	3a 81       	ldd	r19, Y+2	; 0x02
     9a0:	32 95       	swap	r19
     9a2:	36 95       	lsr	r19
     9a4:	37 70       	andi	r19, 0x07	; 7
     9a6:	2b 81       	ldd	r18, Y+3	; 0x03
     9a8:	22 0f       	add	r18, r18
     9aa:	22 0f       	add	r18, r18
     9ac:	22 0f       	add	r18, r18
     9ae:	23 0f       	add	r18, r19
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
     9b4:	99 81       	ldd	r25, Y+1	; 0x01
     9b6:	92 95       	swap	r25
     9b8:	96 95       	lsr	r25
     9ba:	97 70       	andi	r25, 0x07	; 7
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	88 0f       	add	r24, r24
     9c0:	88 0f       	add	r24, r24
     9c2:	88 0f       	add	r24, r24
     9c4:	89 0f       	add	r24, r25
     9c6:	80 93 f5 00 	sts	0x00F5, r24
     9ca:	29 81       	ldd	r18, Y+1	; 0x01
     9cc:	22 0f       	add	r18, r18
     9ce:	22 0f       	add	r18, r18
     9d0:	22 0f       	add	r18, r18
     9d2:	84 ef       	ldi	r24, 0xF4	; 244
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     9da:	fb 01       	movw	r30, r22
     9dc:	30 81       	ld	r19, Z
     9de:	16 96       	adiw	r26, 0x06	; 6
     9e0:	2c 91       	ld	r18, X
     9e2:	16 97       	sbiw	r26, 0x06	; 6
     9e4:	23 2b       	or	r18, r19
     9e6:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     9e8:	21 e0       	ldi	r18, 0x01	; 1
     9ea:	1a 96       	adiw	r26, 0x0a	; 10
     9ec:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     9ee:	dc 01       	movw	r26, r24
     9f0:	2c 91       	ld	r18, X
     9f2:	24 60       	ori	r18, 0x04	; 4
     9f4:	2c 93       	st	X, r18
		  Can_set_rtr();
     9f6:	a0 ef       	ldi	r26, 0xF0	; 240
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	2c 91       	ld	r18, X
     9fc:	24 60       	ori	r18, 0x04	; 4
     9fe:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     a00:	20 81       	ld	r18, Z
     a02:	2f 7d       	andi	r18, 0xDF	; 223
     a04:	20 83       	st	Z, r18
          Can_clear_idemsk();
     a06:	fc 01       	movw	r30, r24
     a08:	20 81       	ld	r18, Z
     a0a:	2e 7f       	andi	r18, 0xFE	; 254
     a0c:	20 83       	st	Z, r18
          Can_config_rx();       
     a0e:	db 01       	movw	r26, r22
     a10:	8c 91       	ld	r24, X
     a12:	8f 73       	andi	r24, 0x3F	; 63
     a14:	8c 93       	st	X, r24
     a16:	8c 91       	ld	r24, X
     a18:	80 68       	ori	r24, 0x80	; 128
     a1a:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a1c:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     a1e:	15 c3       	rjmp	.+1578   	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a20:	1b 96       	adiw	r26, 0x0b	; 11
     a22:	8c 91       	ld	r24, X
     a24:	1b 97       	sbiw	r26, 0x0b	; 11
     a26:	88 23       	and	r24, r24
     a28:	d9 f1       	breq	.+118    	; 0xaa0 <__stack+0x1a1>
     a2a:	14 96       	adiw	r26, 0x04	; 4
     a2c:	9c 91       	ld	r25, X
     a2e:	14 97       	sbiw	r26, 0x04	; 4
     a30:	92 95       	swap	r25
     a32:	96 95       	lsr	r25
     a34:	97 70       	andi	r25, 0x07	; 7
     a36:	15 96       	adiw	r26, 0x05	; 5
     a38:	8c 91       	ld	r24, X
     a3a:	15 97       	sbiw	r26, 0x05	; 5
     a3c:	88 0f       	add	r24, r24
     a3e:	88 0f       	add	r24, r24
     a40:	88 0f       	add	r24, r24
     a42:	89 0f       	add	r24, r25
     a44:	80 93 f3 00 	sts	0x00F3, r24
     a48:	13 96       	adiw	r26, 0x03	; 3
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	92 95       	swap	r25
     a50:	96 95       	lsr	r25
     a52:	97 70       	andi	r25, 0x07	; 7
     a54:	14 96       	adiw	r26, 0x04	; 4
     a56:	8c 91       	ld	r24, X
     a58:	14 97       	sbiw	r26, 0x04	; 4
     a5a:	88 0f       	add	r24, r24
     a5c:	88 0f       	add	r24, r24
     a5e:	88 0f       	add	r24, r24
     a60:	89 0f       	add	r24, r25
     a62:	80 93 f2 00 	sts	0x00F2, r24
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	9c 91       	ld	r25, X
     a6a:	12 97       	sbiw	r26, 0x02	; 2
     a6c:	92 95       	swap	r25
     a6e:	96 95       	lsr	r25
     a70:	97 70       	andi	r25, 0x07	; 7
     a72:	13 96       	adiw	r26, 0x03	; 3
     a74:	8c 91       	ld	r24, X
     a76:	13 97       	sbiw	r26, 0x03	; 3
     a78:	88 0f       	add	r24, r24
     a7a:	88 0f       	add	r24, r24
     a7c:	88 0f       	add	r24, r24
     a7e:	89 0f       	add	r24, r25
     a80:	80 93 f1 00 	sts	0x00F1, r24
     a84:	12 96       	adiw	r26, 0x02	; 2
     a86:	8c 91       	ld	r24, X
     a88:	12 97       	sbiw	r26, 0x02	; 2
     a8a:	88 0f       	add	r24, r24
     a8c:	88 0f       	add	r24, r24
     a8e:	88 0f       	add	r24, r24
     a90:	80 93 f0 00 	sts	0x00F0, r24
     a94:	ef ee       	ldi	r30, 0xEF	; 239
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	80 61       	ori	r24, 0x10	; 16
     a9c:	80 83       	st	Z, r24
     a9e:	1c c0       	rjmp	.+56     	; 0xad8 <__stack+0x1d9>
          else              { Can_set_std_id(cmd->id.std);}
     aa0:	12 96       	adiw	r26, 0x02	; 2
     aa2:	8c 91       	ld	r24, X
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	86 95       	lsr	r24
     aa8:	86 95       	lsr	r24
     aaa:	86 95       	lsr	r24
     aac:	13 96       	adiw	r26, 0x03	; 3
     aae:	9c 91       	ld	r25, X
     ab0:	13 97       	sbiw	r26, 0x03	; 3
     ab2:	e0 e2       	ldi	r30, 0x20	; 32
     ab4:	9e 9f       	mul	r25, r30
     ab6:	80 0d       	add	r24, r0
     ab8:	11 24       	eor	r1, r1
     aba:	80 93 f3 00 	sts	0x00F3, r24
     abe:	12 96       	adiw	r26, 0x02	; 2
     ac0:	8c 91       	ld	r24, X
     ac2:	12 97       	sbiw	r26, 0x02	; 2
     ac4:	82 95       	swap	r24
     ac6:	88 0f       	add	r24, r24
     ac8:	80 7e       	andi	r24, 0xE0	; 224
     aca:	80 93 f2 00 	sts	0x00F2, r24
     ace:	ef ee       	ldi	r30, 0xEF	; 239
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	8f 7e       	andi	r24, 0xEF	; 239
     ad6:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	89 83       	std	Y+1, r24	; 0x01
     adc:	9b 81       	ldd	r25, Y+3	; 0x03
     ade:	92 95       	swap	r25
     ae0:	96 95       	lsr	r25
     ae2:	97 70       	andi	r25, 0x07	; 7
     ae4:	8c 81       	ldd	r24, Y+4	; 0x04
     ae6:	88 0f       	add	r24, r24
     ae8:	88 0f       	add	r24, r24
     aea:	88 0f       	add	r24, r24
     aec:	89 0f       	add	r24, r25
     aee:	80 93 f7 00 	sts	0x00F7, r24
     af2:	9a 81       	ldd	r25, Y+2	; 0x02
     af4:	92 95       	swap	r25
     af6:	96 95       	lsr	r25
     af8:	97 70       	andi	r25, 0x07	; 7
     afa:	8b 81       	ldd	r24, Y+3	; 0x03
     afc:	88 0f       	add	r24, r24
     afe:	88 0f       	add	r24, r24
     b00:	88 0f       	add	r24, r24
     b02:	89 0f       	add	r24, r25
     b04:	80 93 f6 00 	sts	0x00F6, r24
     b08:	99 81       	ldd	r25, Y+1	; 0x01
     b0a:	92 95       	swap	r25
     b0c:	96 95       	lsr	r25
     b0e:	97 70       	andi	r25, 0x07	; 7
     b10:	8a 81       	ldd	r24, Y+2	; 0x02
     b12:	88 0f       	add	r24, r24
     b14:	88 0f       	add	r24, r24
     b16:	88 0f       	add	r24, r24
     b18:	89 0f       	add	r24, r25
     b1a:	80 93 f5 00 	sts	0x00F5, r24
     b1e:	29 81       	ldd	r18, Y+1	; 0x01
     b20:	22 0f       	add	r18, r18
     b22:	22 0f       	add	r18, r18
     b24:	22 0f       	add	r18, r18
     b26:	84 ef       	ldi	r24, 0xF4	; 244
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     b2e:	ef ee       	ldi	r30, 0xEF	; 239
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	30 81       	ld	r19, Z
     b34:	16 96       	adiw	r26, 0x06	; 6
     b36:	2c 91       	ld	r18, X
     b38:	23 2b       	or	r18, r19
     b3a:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b3c:	dc 01       	movw	r26, r24
     b3e:	2c 91       	ld	r18, X
     b40:	2b 7f       	andi	r18, 0xFB	; 251
     b42:	2c 93       	st	X, r18
          Can_set_idemsk();
     b44:	2c 91       	ld	r18, X
     b46:	21 60       	ori	r18, 0x01	; 1
     b48:	2c 93       	st	X, r18
          Can_config_rx();       
     b4a:	80 81       	ld	r24, Z
     b4c:	8f 73       	andi	r24, 0x3F	; 63
     b4e:	80 83       	st	Z, r24
     b50:	80 81       	ld	r24, Z
     b52:	80 68       	ori	r24, 0x80	; 128
     b54:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b56:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     b58:	78 c2       	rjmp	.+1264   	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b5a:	1b 96       	adiw	r26, 0x0b	; 11
     b5c:	8c 91       	ld	r24, X
     b5e:	1b 97       	sbiw	r26, 0x0b	; 11
     b60:	88 23       	and	r24, r24
     b62:	d9 f1       	breq	.+118    	; 0xbda <__stack+0x2db>
     b64:	14 96       	adiw	r26, 0x04	; 4
     b66:	9c 91       	ld	r25, X
     b68:	14 97       	sbiw	r26, 0x04	; 4
     b6a:	92 95       	swap	r25
     b6c:	96 95       	lsr	r25
     b6e:	97 70       	andi	r25, 0x07	; 7
     b70:	15 96       	adiw	r26, 0x05	; 5
     b72:	8c 91       	ld	r24, X
     b74:	15 97       	sbiw	r26, 0x05	; 5
     b76:	88 0f       	add	r24, r24
     b78:	88 0f       	add	r24, r24
     b7a:	88 0f       	add	r24, r24
     b7c:	89 0f       	add	r24, r25
     b7e:	80 93 f3 00 	sts	0x00F3, r24
     b82:	13 96       	adiw	r26, 0x03	; 3
     b84:	9c 91       	ld	r25, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	92 95       	swap	r25
     b8a:	96 95       	lsr	r25
     b8c:	97 70       	andi	r25, 0x07	; 7
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	8c 91       	ld	r24, X
     b92:	14 97       	sbiw	r26, 0x04	; 4
     b94:	88 0f       	add	r24, r24
     b96:	88 0f       	add	r24, r24
     b98:	88 0f       	add	r24, r24
     b9a:	89 0f       	add	r24, r25
     b9c:	80 93 f2 00 	sts	0x00F2, r24
     ba0:	12 96       	adiw	r26, 0x02	; 2
     ba2:	9c 91       	ld	r25, X
     ba4:	12 97       	sbiw	r26, 0x02	; 2
     ba6:	92 95       	swap	r25
     ba8:	96 95       	lsr	r25
     baa:	97 70       	andi	r25, 0x07	; 7
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	8c 91       	ld	r24, X
     bb0:	13 97       	sbiw	r26, 0x03	; 3
     bb2:	88 0f       	add	r24, r24
     bb4:	88 0f       	add	r24, r24
     bb6:	88 0f       	add	r24, r24
     bb8:	89 0f       	add	r24, r25
     bba:	80 93 f1 00 	sts	0x00F1, r24
     bbe:	12 96       	adiw	r26, 0x02	; 2
     bc0:	8c 91       	ld	r24, X
     bc2:	12 97       	sbiw	r26, 0x02	; 2
     bc4:	88 0f       	add	r24, r24
     bc6:	88 0f       	add	r24, r24
     bc8:	88 0f       	add	r24, r24
     bca:	80 93 f0 00 	sts	0x00F0, r24
     bce:	ef ee       	ldi	r30, 0xEF	; 239
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	80 61       	ori	r24, 0x10	; 16
     bd6:	80 83       	st	Z, r24
     bd8:	1c c0       	rjmp	.+56     	; 0xc12 <__stack+0x313>
          else              { Can_set_std_id(cmd->id.std);}
     bda:	12 96       	adiw	r26, 0x02	; 2
     bdc:	8c 91       	ld	r24, X
     bde:	12 97       	sbiw	r26, 0x02	; 2
     be0:	86 95       	lsr	r24
     be2:	86 95       	lsr	r24
     be4:	86 95       	lsr	r24
     be6:	13 96       	adiw	r26, 0x03	; 3
     be8:	9c 91       	ld	r25, X
     bea:	13 97       	sbiw	r26, 0x03	; 3
     bec:	e0 e2       	ldi	r30, 0x20	; 32
     bee:	9e 9f       	mul	r25, r30
     bf0:	80 0d       	add	r24, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	80 93 f3 00 	sts	0x00F3, r24
     bf8:	12 96       	adiw	r26, 0x02	; 2
     bfa:	8c 91       	ld	r24, X
     bfc:	12 97       	sbiw	r26, 0x02	; 2
     bfe:	82 95       	swap	r24
     c00:	88 0f       	add	r24, r24
     c02:	80 7e       	andi	r24, 0xE0	; 224
     c04:	80 93 f2 00 	sts	0x00F2, r24
     c08:	ef ee       	ldi	r30, 0xEF	; 239
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8f 7e       	andi	r24, 0xEF	; 239
     c10:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	9b 81       	ldd	r25, Y+3	; 0x03
     c18:	92 95       	swap	r25
     c1a:	96 95       	lsr	r25
     c1c:	97 70       	andi	r25, 0x07	; 7
     c1e:	8c 81       	ldd	r24, Y+4	; 0x04
     c20:	88 0f       	add	r24, r24
     c22:	88 0f       	add	r24, r24
     c24:	88 0f       	add	r24, r24
     c26:	89 0f       	add	r24, r25
     c28:	80 93 f7 00 	sts	0x00F7, r24
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	92 95       	swap	r25
     c30:	96 95       	lsr	r25
     c32:	97 70       	andi	r25, 0x07	; 7
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	88 0f       	add	r24, r24
     c38:	88 0f       	add	r24, r24
     c3a:	88 0f       	add	r24, r24
     c3c:	89 0f       	add	r24, r25
     c3e:	80 93 f6 00 	sts	0x00F6, r24
     c42:	99 81       	ldd	r25, Y+1	; 0x01
     c44:	92 95       	swap	r25
     c46:	96 95       	lsr	r25
     c48:	97 70       	andi	r25, 0x07	; 7
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	88 0f       	add	r24, r24
     c4e:	88 0f       	add	r24, r24
     c50:	88 0f       	add	r24, r24
     c52:	89 0f       	add	r24, r25
     c54:	80 93 f5 00 	sts	0x00F5, r24
     c58:	29 81       	ldd	r18, Y+1	; 0x01
     c5a:	22 0f       	add	r18, r18
     c5c:	22 0f       	add	r18, r18
     c5e:	22 0f       	add	r18, r18
     c60:	84 ef       	ldi	r24, 0xF4	; 244
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c68:	ef ee       	ldi	r30, 0xEF	; 239
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	30 81       	ld	r19, Z
     c6e:	16 96       	adiw	r26, 0x06	; 6
     c70:	2c 91       	ld	r18, X
     c72:	16 97       	sbiw	r26, 0x06	; 6
     c74:	23 2b       	or	r18, r19
     c76:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     c78:	1a 96       	adiw	r26, 0x0a	; 10
     c7a:	1c 92       	st	X, r1
     c7c:	dc 01       	movw	r26, r24
     c7e:	2c 91       	ld	r18, X
     c80:	24 60       	ori	r18, 0x04	; 4
     c82:	2c 93       	st	X, r18
     c84:	a0 ef       	ldi	r26, 0xF0	; 240
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	2c 91       	ld	r18, X
     c8a:	2b 7f       	andi	r18, 0xFB	; 251
     c8c:	2c 93       	st	X, r18
          Can_set_idemsk();
     c8e:	dc 01       	movw	r26, r24
     c90:	2c 91       	ld	r18, X
     c92:	21 60       	ori	r18, 0x01	; 1
     c94:	2c 93       	st	X, r18
          Can_config_rx();       
     c96:	80 81       	ld	r24, Z
     c98:	8f 73       	andi	r24, 0x3F	; 63
     c9a:	80 83       	st	Z, r24
     c9c:	80 81       	ld	r24, Z
     c9e:	80 68       	ori	r24, 0x80	; 128
     ca0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ca2:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     ca4:	d2 c1       	rjmp	.+932    	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ca6:	1b 96       	adiw	r26, 0x0b	; 11
     ca8:	8c 91       	ld	r24, X
     caa:	1b 97       	sbiw	r26, 0x0b	; 11
     cac:	88 23       	and	r24, r24
     cae:	d9 f1       	breq	.+118    	; 0xd26 <__stack+0x427>
     cb0:	14 96       	adiw	r26, 0x04	; 4
     cb2:	9c 91       	ld	r25, X
     cb4:	14 97       	sbiw	r26, 0x04	; 4
     cb6:	92 95       	swap	r25
     cb8:	96 95       	lsr	r25
     cba:	97 70       	andi	r25, 0x07	; 7
     cbc:	15 96       	adiw	r26, 0x05	; 5
     cbe:	8c 91       	ld	r24, X
     cc0:	15 97       	sbiw	r26, 0x05	; 5
     cc2:	88 0f       	add	r24, r24
     cc4:	88 0f       	add	r24, r24
     cc6:	88 0f       	add	r24, r24
     cc8:	89 0f       	add	r24, r25
     cca:	80 93 f3 00 	sts	0x00F3, r24
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 91       	ld	r25, X
     cd2:	13 97       	sbiw	r26, 0x03	; 3
     cd4:	92 95       	swap	r25
     cd6:	96 95       	lsr	r25
     cd8:	97 70       	andi	r25, 0x07	; 7
     cda:	14 96       	adiw	r26, 0x04	; 4
     cdc:	8c 91       	ld	r24, X
     cde:	14 97       	sbiw	r26, 0x04	; 4
     ce0:	88 0f       	add	r24, r24
     ce2:	88 0f       	add	r24, r24
     ce4:	88 0f       	add	r24, r24
     ce6:	89 0f       	add	r24, r25
     ce8:	80 93 f2 00 	sts	0x00F2, r24
     cec:	12 96       	adiw	r26, 0x02	; 2
     cee:	9c 91       	ld	r25, X
     cf0:	12 97       	sbiw	r26, 0x02	; 2
     cf2:	92 95       	swap	r25
     cf4:	96 95       	lsr	r25
     cf6:	97 70       	andi	r25, 0x07	; 7
     cf8:	13 96       	adiw	r26, 0x03	; 3
     cfa:	8c 91       	ld	r24, X
     cfc:	13 97       	sbiw	r26, 0x03	; 3
     cfe:	88 0f       	add	r24, r24
     d00:	88 0f       	add	r24, r24
     d02:	88 0f       	add	r24, r24
     d04:	89 0f       	add	r24, r25
     d06:	80 93 f1 00 	sts	0x00F1, r24
     d0a:	12 96       	adiw	r26, 0x02	; 2
     d0c:	8c 91       	ld	r24, X
     d0e:	12 97       	sbiw	r26, 0x02	; 2
     d10:	88 0f       	add	r24, r24
     d12:	88 0f       	add	r24, r24
     d14:	88 0f       	add	r24, r24
     d16:	80 93 f0 00 	sts	0x00F0, r24
     d1a:	ef ee       	ldi	r30, 0xEF	; 239
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 61       	ori	r24, 0x10	; 16
     d22:	80 83       	st	Z, r24
     d24:	1c c0       	rjmp	.+56     	; 0xd5e <__stack+0x45f>
          else              { Can_set_std_id(cmd->id.std);}
     d26:	12 96       	adiw	r26, 0x02	; 2
     d28:	8c 91       	ld	r24, X
     d2a:	12 97       	sbiw	r26, 0x02	; 2
     d2c:	86 95       	lsr	r24
     d2e:	86 95       	lsr	r24
     d30:	86 95       	lsr	r24
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 91       	ld	r25, X
     d36:	13 97       	sbiw	r26, 0x03	; 3
     d38:	e0 e2       	ldi	r30, 0x20	; 32
     d3a:	9e 9f       	mul	r25, r30
     d3c:	80 0d       	add	r24, r0
     d3e:	11 24       	eor	r1, r1
     d40:	80 93 f3 00 	sts	0x00F3, r24
     d44:	12 96       	adiw	r26, 0x02	; 2
     d46:	8c 91       	ld	r24, X
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	82 95       	swap	r24
     d4c:	88 0f       	add	r24, r24
     d4e:	80 7e       	andi	r24, 0xE0	; 224
     d50:	80 93 f2 00 	sts	0x00F2, r24
     d54:	ef ee       	ldi	r30, 0xEF	; 239
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 7e       	andi	r24, 0xEF	; 239
     d5c:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	89 83       	std	Y+1, r24	; 0x01
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	92 95       	swap	r25
     d66:	96 95       	lsr	r25
     d68:	97 70       	andi	r25, 0x07	; 7
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	88 0f       	add	r24, r24
     d6e:	88 0f       	add	r24, r24
     d70:	88 0f       	add	r24, r24
     d72:	89 0f       	add	r24, r25
     d74:	80 93 f7 00 	sts	0x00F7, r24
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	92 95       	swap	r25
     d7c:	96 95       	lsr	r25
     d7e:	97 70       	andi	r25, 0x07	; 7
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	88 0f       	add	r24, r24
     d84:	88 0f       	add	r24, r24
     d86:	88 0f       	add	r24, r24
     d88:	89 0f       	add	r24, r25
     d8a:	80 93 f6 00 	sts	0x00F6, r24
     d8e:	99 81       	ldd	r25, Y+1	; 0x01
     d90:	92 95       	swap	r25
     d92:	96 95       	lsr	r25
     d94:	97 70       	andi	r25, 0x07	; 7
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	88 0f       	add	r24, r24
     d9a:	88 0f       	add	r24, r24
     d9c:	88 0f       	add	r24, r24
     d9e:	89 0f       	add	r24, r25
     da0:	80 93 f5 00 	sts	0x00F5, r24
     da4:	29 81       	ldd	r18, Y+1	; 0x01
     da6:	22 0f       	add	r18, r18
     da8:	22 0f       	add	r18, r18
     daa:	22 0f       	add	r18, r18
     dac:	84 ef       	ldi	r24, 0xF4	; 244
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	fc 01       	movw	r30, r24
     db2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     db4:	ef ee       	ldi	r30, 0xEF	; 239
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	30 81       	ld	r19, Z
     dba:	16 96       	adiw	r26, 0x06	; 6
     dbc:	2c 91       	ld	r18, X
     dbe:	16 97       	sbiw	r26, 0x06	; 6
     dc0:	23 2b       	or	r18, r19
     dc2:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	1a 96       	adiw	r26, 0x0a	; 10
     dc8:	2c 93       	st	X, r18
     dca:	dc 01       	movw	r26, r24
     dcc:	2c 91       	ld	r18, X
     dce:	24 60       	ori	r18, 0x04	; 4
     dd0:	2c 93       	st	X, r18
     dd2:	a0 ef       	ldi	r26, 0xF0	; 240
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	2c 91       	ld	r18, X
     dd8:	24 60       	ori	r18, 0x04	; 4
     dda:	2c 93       	st	X, r18
          Can_clear_rplv();
     ddc:	20 81       	ld	r18, Z
     dde:	2f 7d       	andi	r18, 0xDF	; 223
     de0:	20 83       	st	Z, r18
          Can_set_idemsk();
     de2:	dc 01       	movw	r26, r24
     de4:	2c 91       	ld	r18, X
     de6:	21 60       	ori	r18, 0x01	; 1
     de8:	2c 93       	st	X, r18
          Can_config_rx();       
     dea:	80 81       	ld	r24, Z
     dec:	8f 73       	andi	r24, 0x3F	; 63
     dee:	80 83       	st	Z, r24
     df0:	80 81       	ld	r24, Z
     df2:	80 68       	ori	r24, 0x80	; 128
     df4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     df6:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     df8:	28 c1       	rjmp	.+592    	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	8a ef       	ldi	r24, 0xFA	; 250
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	17 96       	adiw	r26, 0x07	; 7
     e02:	ed 91       	ld	r30, X+
     e04:	fc 91       	ld	r31, X
     e06:	18 97       	sbiw	r26, 0x08	; 8
     e08:	e2 0f       	add	r30, r18
     e0a:	f1 1d       	adc	r31, r1
     e0c:	30 81       	ld	r19, Z
     e0e:	fc 01       	movw	r30, r24
     e10:	30 83       	st	Z, r19
     e12:	2f 5f       	subi	r18, 0xFF	; 255
     e14:	16 96       	adiw	r26, 0x06	; 6
     e16:	3c 91       	ld	r19, X
     e18:	16 97       	sbiw	r26, 0x06	; 6
     e1a:	23 17       	cp	r18, r19
     e1c:	88 f3       	brcs	.-30     	; 0xe00 <__stack+0x501>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     e1e:	19 82       	std	Y+1, r1	; 0x01
     e20:	9b 81       	ldd	r25, Y+3	; 0x03
     e22:	92 95       	swap	r25
     e24:	96 95       	lsr	r25
     e26:	97 70       	andi	r25, 0x07	; 7
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
     e2a:	88 0f       	add	r24, r24
     e2c:	88 0f       	add	r24, r24
     e2e:	88 0f       	add	r24, r24
     e30:	89 0f       	add	r24, r25
     e32:	80 93 f7 00 	sts	0x00F7, r24
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	92 95       	swap	r25
     e3a:	96 95       	lsr	r25
     e3c:	97 70       	andi	r25, 0x07	; 7
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	88 0f       	add	r24, r24
     e42:	88 0f       	add	r24, r24
     e44:	88 0f       	add	r24, r24
     e46:	89 0f       	add	r24, r25
     e48:	80 93 f6 00 	sts	0x00F6, r24
     e4c:	99 81       	ldd	r25, Y+1	; 0x01
     e4e:	92 95       	swap	r25
     e50:	96 95       	lsr	r25
     e52:	97 70       	andi	r25, 0x07	; 7
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	88 0f       	add	r24, r24
     e58:	88 0f       	add	r24, r24
     e5a:	88 0f       	add	r24, r24
     e5c:	89 0f       	add	r24, r25
     e5e:	80 93 f5 00 	sts	0x00F5, r24
     e62:	29 81       	ldd	r18, Y+1	; 0x01
     e64:	22 0f       	add	r18, r18
     e66:	22 0f       	add	r18, r18
     e68:	22 0f       	add	r18, r18
     e6a:	84 ef       	ldi	r24, 0xF4	; 244
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	fc 01       	movw	r30, r24
     e70:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e72:	ef ee       	ldi	r30, 0xEF	; 239
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	30 81       	ld	r19, Z
     e78:	16 96       	adiw	r26, 0x06	; 6
     e7a:	2c 91       	ld	r18, X
     e7c:	16 97       	sbiw	r26, 0x06	; 6
     e7e:	23 2b       	or	r18, r19
     e80:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	1a 96       	adiw	r26, 0x0a	; 10
     e86:	2c 93       	st	X, r18
     e88:	dc 01       	movw	r26, r24
     e8a:	2c 91       	ld	r18, X
     e8c:	24 60       	ori	r18, 0x04	; 4
     e8e:	2c 93       	st	X, r18
     e90:	a0 ef       	ldi	r26, 0xF0	; 240
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	2c 91       	ld	r18, X
     e96:	24 60       	ori	r18, 0x04	; 4
     e98:	2c 93       	st	X, r18
          Can_set_rplv();
     e9a:	20 81       	ld	r18, Z
     e9c:	20 62       	ori	r18, 0x20	; 32
     e9e:	20 83       	st	Z, r18
          Can_clear_idemsk();
     ea0:	dc 01       	movw	r26, r24
     ea2:	2c 91       	ld	r18, X
     ea4:	2e 7f       	andi	r18, 0xFE	; 254
     ea6:	2c 93       	st	X, r18
          Can_config_rx();       
     ea8:	80 81       	ld	r24, Z
     eaa:	8f 73       	andi	r24, 0x3F	; 63
     eac:	80 83       	st	Z, r24
     eae:	80 81       	ld	r24, Z
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     eb6:	c9 c0       	rjmp	.+402    	; 0x104a <__stack+0x74b>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     eb8:	1b 96       	adiw	r26, 0x0b	; 11
     eba:	8c 91       	ld	r24, X
     ebc:	1b 97       	sbiw	r26, 0x0b	; 11
     ebe:	88 23       	and	r24, r24
     ec0:	d9 f1       	breq	.+118    	; 0xf38 <__stack+0x639>
     ec2:	14 96       	adiw	r26, 0x04	; 4
     ec4:	9c 91       	ld	r25, X
     ec6:	14 97       	sbiw	r26, 0x04	; 4
     ec8:	92 95       	swap	r25
     eca:	96 95       	lsr	r25
     ecc:	97 70       	andi	r25, 0x07	; 7
     ece:	15 96       	adiw	r26, 0x05	; 5
     ed0:	8c 91       	ld	r24, X
     ed2:	15 97       	sbiw	r26, 0x05	; 5
     ed4:	88 0f       	add	r24, r24
     ed6:	88 0f       	add	r24, r24
     ed8:	88 0f       	add	r24, r24
     eda:	89 0f       	add	r24, r25
     edc:	80 93 f3 00 	sts	0x00F3, r24
     ee0:	13 96       	adiw	r26, 0x03	; 3
     ee2:	9c 91       	ld	r25, X
     ee4:	13 97       	sbiw	r26, 0x03	; 3
     ee6:	92 95       	swap	r25
     ee8:	96 95       	lsr	r25
     eea:	97 70       	andi	r25, 0x07	; 7
     eec:	14 96       	adiw	r26, 0x04	; 4
     eee:	8c 91       	ld	r24, X
     ef0:	14 97       	sbiw	r26, 0x04	; 4
     ef2:	88 0f       	add	r24, r24
     ef4:	88 0f       	add	r24, r24
     ef6:	88 0f       	add	r24, r24
     ef8:	89 0f       	add	r24, r25
     efa:	80 93 f2 00 	sts	0x00F2, r24
     efe:	12 96       	adiw	r26, 0x02	; 2
     f00:	9c 91       	ld	r25, X
     f02:	12 97       	sbiw	r26, 0x02	; 2
     f04:	92 95       	swap	r25
     f06:	96 95       	lsr	r25
     f08:	97 70       	andi	r25, 0x07	; 7
     f0a:	13 96       	adiw	r26, 0x03	; 3
     f0c:	8c 91       	ld	r24, X
     f0e:	13 97       	sbiw	r26, 0x03	; 3
     f10:	88 0f       	add	r24, r24
     f12:	88 0f       	add	r24, r24
     f14:	88 0f       	add	r24, r24
     f16:	89 0f       	add	r24, r25
     f18:	80 93 f1 00 	sts	0x00F1, r24
     f1c:	12 96       	adiw	r26, 0x02	; 2
     f1e:	8c 91       	ld	r24, X
     f20:	12 97       	sbiw	r26, 0x02	; 2
     f22:	88 0f       	add	r24, r24
     f24:	88 0f       	add	r24, r24
     f26:	88 0f       	add	r24, r24
     f28:	80 93 f0 00 	sts	0x00F0, r24
     f2c:	ef ee       	ldi	r30, 0xEF	; 239
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 61       	ori	r24, 0x10	; 16
     f34:	80 83       	st	Z, r24
     f36:	1c c0       	rjmp	.+56     	; 0xf70 <__stack+0x671>
          else              { Can_set_std_id(cmd->id.std);}
     f38:	12 96       	adiw	r26, 0x02	; 2
     f3a:	8c 91       	ld	r24, X
     f3c:	12 97       	sbiw	r26, 0x02	; 2
     f3e:	86 95       	lsr	r24
     f40:	86 95       	lsr	r24
     f42:	86 95       	lsr	r24
     f44:	13 96       	adiw	r26, 0x03	; 3
     f46:	9c 91       	ld	r25, X
     f48:	13 97       	sbiw	r26, 0x03	; 3
     f4a:	e0 e2       	ldi	r30, 0x20	; 32
     f4c:	9e 9f       	mul	r25, r30
     f4e:	80 0d       	add	r24, r0
     f50:	11 24       	eor	r1, r1
     f52:	80 93 f3 00 	sts	0x00F3, r24
     f56:	12 96       	adiw	r26, 0x02	; 2
     f58:	8c 91       	ld	r24, X
     f5a:	12 97       	sbiw	r26, 0x02	; 2
     f5c:	82 95       	swap	r24
     f5e:	88 0f       	add	r24, r24
     f60:	80 7e       	andi	r24, 0xE0	; 224
     f62:	80 93 f2 00 	sts	0x00F2, r24
     f66:	ef ee       	ldi	r30, 0xEF	; 239
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7e       	andi	r24, 0xEF	; 239
     f6e:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     f70:	16 96       	adiw	r26, 0x06	; 6
     f72:	8c 91       	ld	r24, X
     f74:	16 97       	sbiw	r26, 0x06	; 6
     f76:	88 23       	and	r24, r24
     f78:	91 f0       	breq	.+36     	; 0xf9e <__stack+0x69f>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	8a ef       	ldi	r24, 0xFA	; 250
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	17 96       	adiw	r26, 0x07	; 7
     f82:	ed 91       	ld	r30, X+
     f84:	fc 91       	ld	r31, X
     f86:	18 97       	sbiw	r26, 0x08	; 8
     f88:	e2 0f       	add	r30, r18
     f8a:	f1 1d       	adc	r31, r1
     f8c:	30 81       	ld	r19, Z
     f8e:	fc 01       	movw	r30, r24
     f90:	30 83       	st	Z, r19
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	16 96       	adiw	r26, 0x06	; 6
     f96:	3c 91       	ld	r19, X
     f98:	16 97       	sbiw	r26, 0x06	; 6
     f9a:	23 17       	cp	r18, r19
     f9c:	88 f3       	brcs	.-30     	; 0xf80 <__stack+0x681>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f9e:	8f ef       	ldi	r24, 0xFF	; 255
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	92 95       	swap	r25
     fa6:	96 95       	lsr	r25
     fa8:	97 70       	andi	r25, 0x07	; 7
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	88 0f       	add	r24, r24
     fae:	88 0f       	add	r24, r24
     fb0:	88 0f       	add	r24, r24
     fb2:	89 0f       	add	r24, r25
     fb4:	80 93 f7 00 	sts	0x00F7, r24
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	92 95       	swap	r25
     fbc:	96 95       	lsr	r25
     fbe:	97 70       	andi	r25, 0x07	; 7
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	88 0f       	add	r24, r24
     fc4:	88 0f       	add	r24, r24
     fc6:	88 0f       	add	r24, r24
     fc8:	89 0f       	add	r24, r25
     fca:	80 93 f6 00 	sts	0x00F6, r24
     fce:	99 81       	ldd	r25, Y+1	; 0x01
     fd0:	92 95       	swap	r25
     fd2:	96 95       	lsr	r25
     fd4:	97 70       	andi	r25, 0x07	; 7
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 0f       	add	r24, r24
     fda:	88 0f       	add	r24, r24
     fdc:	88 0f       	add	r24, r24
     fde:	89 0f       	add	r24, r25
     fe0:	80 93 f5 00 	sts	0x00F5, r24
     fe4:	29 81       	ldd	r18, Y+1	; 0x01
     fe6:	22 0f       	add	r18, r18
     fe8:	22 0f       	add	r18, r18
     fea:	22 0f       	add	r18, r18
     fec:	84 ef       	ldi	r24, 0xF4	; 244
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ff4:	ef ee       	ldi	r30, 0xEF	; 239
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	30 81       	ld	r19, Z
     ffa:	16 96       	adiw	r26, 0x06	; 6
     ffc:	2c 91       	ld	r18, X
     ffe:	16 97       	sbiw	r26, 0x06	; 6
    1000:	23 2b       	or	r18, r19
    1002:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1004:	21 e0       	ldi	r18, 0x01	; 1
    1006:	1a 96       	adiw	r26, 0x0a	; 10
    1008:	2c 93       	st	X, r18
    100a:	dc 01       	movw	r26, r24
    100c:	2c 91       	ld	r18, X
    100e:	24 60       	ori	r18, 0x04	; 4
    1010:	2c 93       	st	X, r18
    1012:	a0 ef       	ldi	r26, 0xF0	; 240
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	2c 91       	ld	r18, X
    1018:	24 60       	ori	r18, 0x04	; 4
    101a:	2c 93       	st	X, r18
          Can_set_rplv();
    101c:	20 81       	ld	r18, Z
    101e:	20 62       	ori	r18, 0x20	; 32
    1020:	20 83       	st	Z, r18
          Can_set_idemsk();
    1022:	dc 01       	movw	r26, r24
    1024:	2c 91       	ld	r18, X
    1026:	21 60       	ori	r18, 0x01	; 1
    1028:	2c 93       	st	X, r18
          Can_config_rx();       
    102a:	80 81       	ld	r24, Z
    102c:	8f 73       	andi	r24, 0x3F	; 63
    102e:	80 83       	st	Z, r24
    1030:	80 81       	ld	r24, Z
    1032:	80 68       	ori	r24, 0x80	; 128
    1034:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1036:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1038:	08 c0       	rjmp	.+16     	; 0x104a <__stack+0x74b>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    103a:	19 96       	adiw	r26, 0x09	; 9
    103c:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    103e:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    1040:	04 c0       	rjmp	.+8      	; 0x104a <__stack+0x74b>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1042:	8f e1       	ldi	r24, 0x1F	; 31
    1044:	19 96       	adiw	r26, 0x09	; 9
    1046:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    104a:	0f 90       	pop	r0
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    1058:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    105a:	88 23       	and	r24, r24
    105c:	09 f4       	brne	.+2      	; 0x1060 <can_get_status+0xe>
    105e:	e3 c0       	rjmp	.+454    	; 0x1226 <can_get_status+0x1d4>
    1060:	8f 31       	cpi	r24, 0x1F	; 31
    1062:	09 f4       	brne	.+2      	; 0x1066 <can_get_status+0x14>
    1064:	e2 c0       	rjmp	.+452    	; 0x122a <can_get_status+0x1d8>
    1066:	8f 3f       	cpi	r24, 0xFF	; 255
    1068:	09 f4       	brne	.+2      	; 0x106c <can_get_status+0x1a>
    106a:	e1 c0       	rjmp	.+450    	; 0x122e <can_get_status+0x1dc>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    106c:	62 95       	swap	r22
    106e:	60 7f       	andi	r22, 0xF0	; 240
    1070:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    1074:	0e 94 c0 01 	call	0x380	; 0x380 <can_get_mob_status>
    
    switch (a_status)
    1078:	80 32       	cpi	r24, 0x20	; 32
    107a:	61 f0       	breq	.+24     	; 0x1094 <can_get_status+0x42>
    107c:	20 f4       	brcc	.+8      	; 0x1086 <can_get_status+0x34>
    107e:	88 23       	and	r24, r24
    1080:	09 f4       	brne	.+2      	; 0x1084 <can_get_status+0x32>
    1082:	d7 c0       	rjmp	.+430    	; 0x1232 <can_get_status+0x1e0>
    1084:	c6 c0       	rjmp	.+396    	; 0x1212 <can_get_status+0x1c0>
    1086:	80 34       	cpi	r24, 0x40	; 64
    1088:	09 f4       	brne	.+2      	; 0x108c <can_get_status+0x3a>
    108a:	b8 c0       	rjmp	.+368    	; 0x11fc <can_get_status+0x1aa>
    108c:	80 3a       	cpi	r24, 0xA0	; 160
    108e:	09 f4       	brne	.+2      	; 0x1092 <can_get_status+0x40>
    1090:	5c c0       	rjmp	.+184    	; 0x114a <can_get_status+0xf8>
    1092:	bf c0       	rjmp	.+382    	; 0x1212 <can_get_status+0x1c0>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_toggle(LED7);	//Toggle LED0 when the appropriate message is received.
    1094:	87 e0       	ldi	r24, 0x07	; 7
    1096:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_toggle>
			delay_ms(100);
    109a:	84 e6       	ldi	r24, 0x64	; 100
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
			LED_toggle(LED7);
    10a2:	87 e0       	ldi	r24, 0x07	; 7
    10a4:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_toggle>
			delay_ms(100);
    10a8:	84 e6       	ldi	r24, 0x64	; 100
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
	    
            cmd->ctrl.rtr = Can_get_rtr();
    10b0:	80 91 f0 00 	lds	r24, 0x00F0
    10b4:	82 fb       	bst	r24, 2
    10b6:	88 27       	eor	r24, r24
    10b8:	80 f9       	bld	r24, 0
    10ba:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    10bc:	80 91 ef 00 	lds	r24, 0x00EF
    10c0:	84 ff       	sbrs	r24, 4
    10c2:	2d c0       	rjmp	.+90     	; 0x111e <can_get_status+0xcc>
            {
	            cmd->ctrl.ide = 1; // extended frame
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    10c8:	e3 ef       	ldi	r30, 0xF3	; 243
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	86 95       	lsr	r24
    10d0:	86 95       	lsr	r24
    10d2:	86 95       	lsr	r24
    10d4:	8d 83       	std	Y+5, r24	; 0x05
    10d6:	a2 ef       	ldi	r26, 0xF2	; 242
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	8c 91       	ld	r24, X
    10dc:	90 81       	ld	r25, Z
    10de:	86 95       	lsr	r24
    10e0:	86 95       	lsr	r24
    10e2:	86 95       	lsr	r24
    10e4:	20 e2       	ldi	r18, 0x20	; 32
    10e6:	92 9f       	mul	r25, r18
    10e8:	80 0d       	add	r24, r0
    10ea:	11 24       	eor	r1, r1
    10ec:	8c 83       	std	Y+4, r24	; 0x04
    10ee:	e1 ef       	ldi	r30, 0xF1	; 241
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	9c 91       	ld	r25, X
    10f6:	86 95       	lsr	r24
    10f8:	86 95       	lsr	r24
    10fa:	86 95       	lsr	r24
    10fc:	20 e2       	ldi	r18, 0x20	; 32
    10fe:	92 9f       	mul	r25, r18
    1100:	80 0d       	add	r24, r0
    1102:	11 24       	eor	r1, r1
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	80 91 f0 00 	lds	r24, 0x00F0
    110a:	90 81       	ld	r25, Z
    110c:	86 95       	lsr	r24
    110e:	86 95       	lsr	r24
    1110:	86 95       	lsr	r24
    1112:	20 e2       	ldi	r18, 0x20	; 32
    1114:	92 9f       	mul	r25, r18
    1116:	80 0d       	add	r24, r0
    1118:	11 24       	eor	r1, r1
    111a:	8a 83       	std	Y+2, r24	; 0x02
    111c:	07 c0       	rjmp	.+14     	; 0x112c <can_get_status+0xda>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    111e:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    1120:	e3 ef       	ldi	r30, 0xF3	; 243
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	80 91 f2 00 	lds	r24, 0x00F2
    112a:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1130:	8f 81       	ldd	r24, Y+7	; 0x07
    1132:	98 85       	ldd	r25, Y+8	; 0x08
    1134:	0e 94 d6 01 	call	0x3ac	; 0x3ac <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    1138:	ef ee       	ldi	r30, 0xEF	; 239
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8f 73       	andi	r24, 0x3F	; 63
    1140:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    1142:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    1146:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    1148:	75 c0       	rjmp	.+234    	; 0x1234 <can_get_status+0x1e2>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    114a:	80 91 f0 00 	lds	r24, 0x00F0
    114e:	82 fb       	bst	r24, 2
    1150:	88 27       	eor	r24, r24
    1152:	80 f9       	bld	r24, 0
    1154:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1156:	80 91 ef 00 	lds	r24, 0x00EF
    115a:	84 ff       	sbrs	r24, 4
    115c:	2d c0       	rjmp	.+90     	; 0x11b8 <can_get_status+0x166>
            {
                cmd->ctrl.ide = 1; // extended frame
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1162:	e3 ef       	ldi	r30, 0xF3	; 243
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	86 95       	lsr	r24
    116a:	86 95       	lsr	r24
    116c:	86 95       	lsr	r24
    116e:	8d 83       	std	Y+5, r24	; 0x05
    1170:	a2 ef       	ldi	r26, 0xF2	; 242
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	8c 91       	ld	r24, X
    1176:	90 81       	ld	r25, Z
    1178:	86 95       	lsr	r24
    117a:	86 95       	lsr	r24
    117c:	86 95       	lsr	r24
    117e:	20 e2       	ldi	r18, 0x20	; 32
    1180:	92 9f       	mul	r25, r18
    1182:	80 0d       	add	r24, r0
    1184:	11 24       	eor	r1, r1
    1186:	8c 83       	std	Y+4, r24	; 0x04
    1188:	e1 ef       	ldi	r30, 0xF1	; 241
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	9c 91       	ld	r25, X
    1190:	86 95       	lsr	r24
    1192:	86 95       	lsr	r24
    1194:	86 95       	lsr	r24
    1196:	20 e2       	ldi	r18, 0x20	; 32
    1198:	92 9f       	mul	r25, r18
    119a:	80 0d       	add	r24, r0
    119c:	11 24       	eor	r1, r1
    119e:	8b 83       	std	Y+3, r24	; 0x03
    11a0:	80 91 f0 00 	lds	r24, 0x00F0
    11a4:	90 81       	ld	r25, Z
    11a6:	86 95       	lsr	r24
    11a8:	86 95       	lsr	r24
    11aa:	86 95       	lsr	r24
    11ac:	20 e2       	ldi	r18, 0x20	; 32
    11ae:	92 9f       	mul	r25, r18
    11b0:	80 0d       	add	r24, r0
    11b2:	11 24       	eor	r1, r1
    11b4:	8a 83       	std	Y+2, r24	; 0x02
    11b6:	13 c0       	rjmp	.+38     	; 0x11de <can_get_status+0x18c>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    11b8:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    11ba:	e3 ef       	ldi	r30, 0xF3	; 243
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	82 95       	swap	r24
    11c2:	86 95       	lsr	r24
    11c4:	87 70       	andi	r24, 0x07	; 7
    11c6:	8b 83       	std	Y+3, r24	; 0x03
    11c8:	80 91 f2 00 	lds	r24, 0x00F2
    11cc:	90 81       	ld	r25, Z
    11ce:	99 0f       	add	r25, r25
    11d0:	99 0f       	add	r25, r25
    11d2:	99 0f       	add	r25, r25
    11d4:	82 95       	swap	r24
    11d6:	86 95       	lsr	r24
    11d8:	87 70       	andi	r24, 0x07	; 7
    11da:	89 0f       	add	r24, r25
    11dc:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    11de:	80 ea       	ldi	r24, 0xA0	; 160
    11e0:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    11e2:	8f 81       	ldd	r24, Y+7	; 0x07
    11e4:	98 85       	ldd	r25, Y+8	; 0x08
    11e6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    11ea:	ef ee       	ldi	r30, 0xEF	; 239
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 73       	andi	r24, 0x3F	; 63
    11f2:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    11f4:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    11f8:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    11fa:	1c c0       	rjmp	.+56     	; 0x1234 <can_get_status+0x1e2>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    11fc:	80 e4       	ldi	r24, 0x40	; 64
    11fe:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1200:	ef ee       	ldi	r30, 0xEF	; 239
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8f 73       	andi	r24, 0x3F	; 63
    1208:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    120a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    120e:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1210:	11 c0       	rjmp	.+34     	; 0x1234 <can_get_status+0x1e2>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1212:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    1214:	ef ee       	ldi	r30, 0xEF	; 239
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8f 73       	andi	r24, 0x3F	; 63
    121c:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    121e:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1222:	82 e0       	ldi	r24, 0x02	; 2
            break;
    1224:	07 c0       	rjmp	.+14     	; 0x1234 <can_get_status+0x1e2>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <can_get_status+0x1e2>
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	03 c0       	rjmp	.+6      	; 0x1234 <can_get_status+0x1e2>
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <can_get_status+0x1e2>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1232:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <LED_toggle>:
	LEDPORT |= (1 << LED);
}

void LED_toggle(uint8_t LED) {
	
	if(LED == 7)
    123a:	87 30       	cpi	r24, 0x07	; 7
    123c:	29 f4       	brne	.+10     	; 0x1248 <LED_toggle+0xe>
	{
		PORTD ^= 0x01;
    123e:	2b b1       	in	r18, 0x0b	; 11
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	92 27       	eor	r25, r18
    1244:	9b b9       	out	0x0b, r25	; 11
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <LED_toggle+0x1c>
	}
	if(LED == 3)
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	29 f4       	brne	.+10     	; 0x1256 <LED_toggle+0x1c>
	{
		PORTC ^= 0x01;
    124c:	98 b1       	in	r25, 0x08	; 8
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	89 27       	eor	r24, r25
    1252:	88 b9       	out	0x08, r24	; 8
    1254:	08 95       	ret
	}
	else
		LEDPORT ^= (1 << LED);
    1256:	45 b1       	in	r20, 0x05	; 5
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	b9 01       	movw	r22, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <LED_toggle+0x2a>
    1260:	66 0f       	add	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	8a 95       	dec	r24
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <LED_toggle+0x26>
    1268:	cb 01       	movw	r24, r22
    126a:	84 27       	eor	r24, r20
    126c:	85 b9       	out	0x05, r24	; 5
    126e:	08 95       	ret

00001270 <main>:
/**************************************************/

volatile uint8_t CTC_flag;	// Variable used in timer.c

int main(void)
{		
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	00 d0       	rcall	.+0      	; 0x1276 <main+0x6>
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
	uint8_t	i = 0;
	
	uint8_t high = 0, low = 0;
    127a:	19 82       	std	Y+1, r1	; 0x01
    127c:	1a 82       	std	Y+2, r1	; 0x02
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    127e:	e1 e6       	ldi	r30, 0x61	; 97
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 e8       	ldi	r24, 0x80	; 128
    1284:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1286:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1288:	8e ef       	ldi	r24, 0xFE	; 254
    128a:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    128c:	81 e1       	ldi	r24, 0x11	; 17
    128e:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    1290:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    1292:	89 e0       	ldi	r24, 0x09	; 9
    1294:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    129a:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    129c:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	
	timer_init();
    129e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <timer_init>
	adc_initialize();
    12a2:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <can_init>
	can_init_mobs();
    12ac:	0e 94 62 01 	call	0x2c4	; 0x2c4 <can_init_mobs>
	spi_initialize_master();
    12b0:	0e 94 e7 09 	call	0x13ce	; 0x13ce <spi_initialize_master>
	
	// Enable global interrupts for Timer execution
	sei();
    12b4:	78 94       	sei
	
	transceiver_initialize();
    12b6:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <transceiver_initialize>
	
	SS1_set_high();		// SPI Temp Sensor.
    12ba:	0e 94 17 0a 	call	0x142e	; 0x142e <SS1_set_high>
	
	LED_toggle(LED7);
    12be:	87 e0       	ldi	r24, 0x07	; 7
    12c0:	0e 94 1d 09 	call	0x123a	; 0x123a <LED_toggle>
    12c4:	0f 2e       	mov	r0, r31
    12c6:	f0 e1       	ldi	r31, 0x10	; 16
    12c8:	ef 2e       	mov	r14, r31
    12ca:	f1 e0       	ldi	r31, 0x01	; 1
    12cc:	ff 2e       	mov	r15, r31
    12ce:	f0 2d       	mov	r31, r0
    12d0:	08 e1       	ldi	r16, 0x18	; 24
    12d2:	11 e0       	ldi	r17, 0x01	; 1
			
			//adc_read(&send_arr[0]);	// This line was used to acquire temp from an analog sensor.

			spi_retrieve_temp(&high, &low);
			
			send_arr[1] = high;			// SPI temperature sensor readings.
    12d4:	0f 2e       	mov	r0, r31
    12d6:	f1 e1       	ldi	r31, 0x11	; 17
    12d8:	af 2e       	mov	r10, r31
    12da:	f1 e0       	ldi	r31, 0x01	; 1
    12dc:	bf 2e       	mov	r11, r31
    12de:	f0 2d       	mov	r31, r0
			send_arr[0] = low;
			
			send_arr[4] = 0x55;			// Temperature indicator.
    12e0:	0f 2e       	mov	r0, r31
    12e2:	f4 e1       	ldi	r31, 0x14	; 20
    12e4:	cf 2e       	mov	r12, r31
    12e6:	f1 e0       	ldi	r31, 0x01	; 1
    12e8:	df 2e       	mov	r13, r31
    12ea:	f0 2d       	mov	r31, r0
    12ec:	4e 2c       	mov	r4, r14
    12ee:	5f 2c       	mov	r5, r15
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			send_arr[0] = trans_msg[0];	// ASCII character which was received.
    12f0:	0f 2e       	mov	r0, r31
    12f2:	f2 e5       	ldi	r31, 0x52	; 82
    12f4:	8f 2e       	mov	r8, r31
    12f6:	f1 e0       	ldi	r31, 0x01	; 1
    12f8:	9f 2e       	mov	r9, r31
    12fa:	f0 2d       	mov	r31, r0
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    12fc:	0f 2e       	mov	r0, r31
    12fe:	fb ea       	ldi	r31, 0xAB	; 171
    1300:	6f 2e       	mov	r6, r31
    1302:	f0 2d       	mov	r31, r0
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    1304:	0f 2e       	mov	r0, r31
    1306:	f0 ef       	ldi	r31, 0xF0	; 240
    1308:	7f 2e       	mov	r7, r31
    130a:	f0 2d       	mov	r31, r0
			spi_retrieve_temp(&high, &low);
			
			send_arr[1] = high;			// SPI temperature sensor readings.
			send_arr[0] = low;
			
			send_arr[4] = 0x55;			// Temperature indicator.
    130c:	0f 2e       	mov	r0, r31
    130e:	f5 e5       	ldi	r31, 0x55	; 85
    1310:	3f 2e       	mov	r3, r31
    1312:	f0 2d       	mov	r31, r0
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 */
		can_check_general();
    1314:	0e 94 67 00 	call	0xce	; 0xce <can_check_general>
		
		/* CHECK FOR HOUSEKEEPING REQUEST */
		//can_check_housekeep();

		/*		TRANSCEIVER COMMUNICATION	*/
		trans_check();
    1318:	0e 94 3c 0c 	call	0x1878	; 0x1878 <trans_check>
		
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    131c:	80 91 2c 01 	lds	r24, 0x012C
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	69 f4       	brne	.+26     	; 0x133e <main+0xce>
    1324:	e4 2d       	mov	r30, r4
    1326:	f5 2d       	mov	r31, r5
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    1328:	61 92       	st	Z+, r6
		
		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
    132a:	e0 17       	cp	r30, r16
    132c:	f1 07       	cpc	r31, r17
    132e:	e1 f7       	brne	.-8      	; 0x1328 <main+0xb8>
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1330:	67 e0       	ldi	r22, 0x07	; 7
    1332:	84 2d       	mov	r24, r4
    1334:	95 2d       	mov	r25, r5
    1336:	0e 94 31 01 	call	0x262	; 0x262 <can_send_message>
			send_now = 0;
    133a:	10 92 2c 01 	sts	0x012C, r1
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
    133e:	80 91 35 01 	lds	r24, 0x0135
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	69 f4       	brne	.+26     	; 0x1360 <main+0xf0>
    1346:	e4 2d       	mov	r30, r4
    1348:	f5 2d       	mov	r31, r5
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    134a:	71 92       	st	Z+, r7
			send_now = 0;
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    134c:	e0 17       	cp	r30, r16
    134e:	f1 07       	cpc	r31, r17
    1350:	e1 f7       	brne	.-8      	; 0x134a <main+0xda>
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1352:	66 e0       	ldi	r22, 0x06	; 6
    1354:	84 2d       	mov	r24, r4
    1356:	95 2d       	mov	r25, r5
    1358:	0e 94 31 01 	call	0x262	; 0x262 <can_send_message>
			send_hk = 0;
    135c:	10 92 35 01 	sts	0x0135, r1
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
    1360:	80 91 46 01 	lds	r24, 0x0146
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	f1 f4       	brne	.+60     	; 0x13a4 <main+0x134>
    1368:	e4 2d       	mov	r30, r4
    136a:	f5 2d       	mov	r31, r5
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    136c:	11 92       	st	Z+, r1
			send_hk = 0;
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    136e:	e0 17       	cp	r30, r16
    1370:	f1 07       	cpc	r31, r17
    1372:	e1 f7       	brne	.-8      	; 0x136c <main+0xfc>
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			//adc_read(&send_arr[0]);	// This line was used to acquire temp from an analog sensor.

			spi_retrieve_temp(&high, &low);
    1374:	be 01       	movw	r22, r28
    1376:	6e 5f       	subi	r22, 0xFE	; 254
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	ce 01       	movw	r24, r28
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	0e 94 20 0a 	call	0x1440	; 0x1440 <spi_retrieve_temp>
			
			send_arr[1] = high;			// SPI temperature sensor readings.
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	f5 01       	movw	r30, r10
    1386:	80 83       	st	Z, r24
			send_arr[0] = low;
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	f7 01       	movw	r30, r14
    138c:	80 83       	st	Z, r24
			
			send_arr[4] = 0x55;			// Temperature indicator.
    138e:	f6 01       	movw	r30, r12
    1390:	30 82       	st	Z, r3
			
			can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	84 2d       	mov	r24, r4
    1396:	95 2d       	mov	r25, r5
    1398:	0e 94 31 01 	call	0x262	; 0x262 <can_send_message>
			send_data = 0;
    139c:	10 92 46 01 	sts	0x0146, r1
			
			low = 0;
    13a0:	1a 82       	std	Y+2, r1	; 0x02
			high = 0;
    13a2:	19 82       	std	Y+1, r1	; 0x01
		}
		
		if (send_coms == 1)		// Send a reply to the message that was received!
    13a4:	80 91 51 01 	lds	r24, 0x0151
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <main+0x13e>
    13ac:	b3 cf       	rjmp	.-154    	; 0x1314 <main+0xa4>
    13ae:	f7 01       	movw	r30, r14
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    13b0:	11 92       	st	Z+, r1
			high = 0;
		}
		
		if (send_coms == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    13b2:	e0 17       	cp	r30, r16
    13b4:	f1 07       	cpc	r31, r17
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <main+0x140>
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			send_arr[0] = trans_msg[0];	// ASCII character which was received.
    13b8:	f4 01       	movw	r30, r8
    13ba:	80 81       	ld	r24, Z
    13bc:	f7 01       	movw	r30, r14
    13be:	80 83       	st	Z, r24
			
			can_send_message(&(send_arr[0]), CAN1_MB5);		//CAN1_MB0 is the data reception MB.
    13c0:	65 e0       	ldi	r22, 0x05	; 5
    13c2:	c7 01       	movw	r24, r14
    13c4:	0e 94 31 01 	call	0x262	; 0x262 <can_send_message>
			send_coms = 0;
    13c8:	10 92 51 01 	sts	0x0151, r1
    13cc:	97 cf       	rjmp	.-210    	; 0x12fc <main+0x8c>

000013ce <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    13ce:	85 b7       	in	r24, 0x35	; 53
    13d0:	8f 77       	andi	r24, 0x7F	; 127
    13d2:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    13d4:	83 e5       	ldi	r24, 0x53	; 83
    13d6:	8c bd       	out	0x2c, r24	; 44
    13d8:	08 95       	ret

000013da <spi_transfer>:
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	//SS_set_low();
	*reg_ptr = message;
    13da:	8e bd       	out	0x2e, r24	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    13dc:	0d b4       	in	r0, 0x2d	; 45
    13de:	07 fc       	sbrc	r0, 7
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <spi_transfer+0x10>
    13e2:	89 ee       	ldi	r24, 0xE9	; 233
    13e4:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <spi_transfer+0xa>
    13e8:	08 95       	ret
			delay_ms(100);
		}
	}	
	//SS_set_high();
	
	delay_cycles(10);
    13ea:	8a e0       	ldi	r24, 0x0A	; 10
    13ec:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <delay_cycles>
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    13f0:	8e b5       	in	r24, 0x2e	; 46
		//temp2 = temp2 << (7 - i);		
		//temp += temp2;
	//}
	
	return receive_char;					// Transmission was successful, return the character that was received.
}
    13f2:	08 95       	ret

000013f4 <SS_set_high>:
/************************************************************************/

void SS_set_high(void) 
{
	//PORTD |= (1 << 3);
	delay_us(1);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
    13fc:	08 95       	ret

000013fe <spi_transfer2>:
	
	return receive_char;					// Transmission was successful, return the character that was received.
}

uint8_t spi_transfer2(uint8_t message)
{
    13fe:	cf 93       	push	r28
	//cmd_str(SRES);
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	PORTD &= (0xF7);
    1400:	5b 98       	cbi	0x0b, 3	; 11
	//delay_cycles(10);
	*reg_ptr = message;
    1402:	8e bd       	out	0x2e, r24	; 46
	//delay_cycles(10);
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    1404:	0d b4       	in	r0, 0x2d	; 45
    1406:	07 fc       	sbrc	r0, 7
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <spi_transfer2+0x18>
    140a:	c9 ee       	ldi	r28, 0xE9	; 233
    140c:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    140e:	f1 f7       	brne	.-4      	; 0x140c <spi_transfer2+0xe>
		{
			SS_set_high();
    1410:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SS_set_high>
			return 0x00;						// Something went wrong, so the function times out.
    1414:	09 c0       	rjmp	.+18     	; 0x1428 <spi_transfer2+0x2a>
		}
	}
	delay_cycles(7);
    1416:	87 e0       	ldi	r24, 0x07	; 7
    1418:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <delay_cycles>
	SS_set_high();
    141c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SS_set_high>
	
	delay_cycles(10);
    1420:	8a e0       	ldi	r24, 0x0A	; 10
    1422:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <delay_cycles>
		
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    1426:	ce b5       	in	r28, 0x2e	; 46
		
	return receive_char;					// Transmission was successful, return the character that was received.
}
    1428:	8c 2f       	mov	r24, r28
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    142e:	44 9a       	sbi	0x08, 4	; 8
    1430:	08 95       	ret

00001432 <SS_set_low>:
/************************************************************************/

void SS_set_low(void)
{
	//PORTD &= (0xF7);
	delay_us(1);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
    143a:	08 95       	ret

0000143c <SS1_set_low>:
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    143c:	44 98       	cbi	0x08, 4	; 8
    143e:	08 95       	ret

00001440 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	8c 01       	movw	r16, r24
    144a:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    144c:	0e 94 1e 0a 	call	0x143c	; 0x143c <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    1450:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    1452:	80 e8       	ldi	r24, 0x80	; 128
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
	*high = *reg_ptr;
    145a:	8e b5       	in	r24, 0x2e	; 46
    145c:	f8 01       	movw	r30, r16
    145e:	80 83       	st	Z, r24
	delay_ms(128);
    1460:	80 e8       	ldi	r24, 0x80	; 128
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
	*low = *reg_ptr;	
    1468:	8e b5       	in	r24, 0x2e	; 46
    146a:	88 83       	st	Y, r24
	SS1_set_high();
    146c:	0e 94 17 0a 	call	0x142e	; 0x142e <SS1_set_high>
	
	return;
}
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	08 95       	ret

0000147a <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	8f 93       	push	r24
	CTC_flag = 1;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	80 93 58 01 	sts	0x0158, r24
}
    148c:	8f 91       	pop	r24
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    1498:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    149c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    14a0:	8a e0       	ldi	r24, 0x0A	; 10
    14a2:	80 93 81 00 	sts	0x0081, r24
    14a6:	08 95       	ret

000014a8 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    14a8:	10 92 58 01 	sts	0x0158, r1
	TCNT1 = 0x0000; //Clear timer
    14ac:	10 92 85 00 	sts	0x0085, r1
    14b0:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    14b4:	90 93 89 00 	sts	0x0089, r25
    14b8:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    14c2:	80 91 58 01 	lds	r24, 0x0158
    14c6:	88 23       	and	r24, r24
    14c8:	e1 f3       	breq	.-8      	; 0x14c2 <delay_us+0x1a>
}
    14ca:	08 95       	ret

000014cc <delay_ms>:

void delay_ms(uint16_t ms) {
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	51 f0       	breq	.+20     	; 0x14ee <delay_ms+0x22>
    14da:	c0 e0       	ldi	r28, 0x00	; 0
    14dc:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    14de:	88 ee       	ldi	r24, 0xE8	; 232
    14e0:	93 e0       	ldi	r25, 0x03	; 3
    14e2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    14e6:	21 96       	adiw	r28, 0x01	; 1
    14e8:	c0 17       	cp	r28, r16
    14ea:	d1 07       	cpc	r29, r17
    14ec:	c1 f7       	brne	.-16     	; 0x14de <delay_ms+0x12>
		delay_us(1000);
	}
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <delay_cycles>:

void delay_cycles(uint8_t cycles)	// @ 8 MHz, 1 cycle = 125 ns
{
	uint8_t i;
	
	for (i = 0; i < cycles; i++)
    14f8:	88 23       	and	r24, r24
    14fa:	21 f0       	breq	.+8      	; 0x1504 <delay_cycles+0xc>
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9f 5f       	subi	r25, 0xFF	; 255
    1500:	98 13       	cpse	r25, r24
    1502:	fd cf       	rjmp	.-6      	; 0x14fe <delay_cycles+0x6>
    1504:	08 95       	ret

00001506 <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
    1506:	cf 93       	push	r28
    1508:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
    150a:	0e 94 19 0a 	call	0x1432	; 0x1432 <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
    150e:	80 e8       	ldi	r24, 0x80	; 128
    1510:	8c 0f       	add	r24, r28
    1512:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	delay_us(1);
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	msg = spi_transfer(0x00);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
    1524:	c8 2f       	mov	r28, r24

	SS_set_high();
    1526:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SS_set_high>
	
	delay_ms(1);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
	
	return msg;
}
    1532:	8c 2f       	mov	r24, r28
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	d8 2f       	mov	r29, r24
    153e:	c6 2f       	mov	r28, r22
	uint8_t msg, check, i;
	
	SS_set_low();
    1540:	0e 94 19 0a 	call	0x1432	; 0x1432 <SS_set_low>
	msg = spi_transfer(addr);		// Send the desired address
    1544:	8d 2f       	mov	r24, r29
    1546:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	delay_us(1);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    1552:	8c 2f       	mov	r24, r28
    1554:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	SS_set_high();
    1558:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SS_set_high>
	
	delay_ms(1);
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>

	return;
}
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	08 95       	ret

0000156a <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
    156a:	cf 93       	push	r28
    156c:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
    156e:	0e 94 19 0a 	call	0x1432	; 0x1432 <SS_set_low>
	msg = spi_transfer(msg);
    1572:	8f ea       	ldi	r24, 0xAF	; 175
    1574:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	delay_us(1);
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1580:	8c 2f       	mov	r24, r28
    1582:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	delay_us(1);
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	msg = spi_transfer(0x00);
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
    1594:	c8 2f       	mov	r28, r24
	SS_set_high();
    1596:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SS_set_high>
	delay_ms(1);
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
	return msg;
}
    15a2:	8c 2f       	mov	r24, r28
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr)
{
    15a8:	cf 93       	push	r28
	uint8_t msg;
	
	msg = spi_transfer2(addr);
    15aa:	0e 94 ff 09 	call	0x13fe	; 0x13fe <spi_transfer2>
    15ae:	c8 2f       	mov	r28, r24
	
	delay_us(1);
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	return msg;
}
    15b8:	8c 2f       	mov	r24, r28
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	d8 2f       	mov	r29, r24
    15c4:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    15c6:	8d e3       	ldi	r24, 0x3D	; 61
    15c8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
	uint8_t msg, i, check;
	msg = 0b00101111;
	
	SS_set_low();
    15cc:	0e 94 19 0a 	call	0x1432	; 0x1432 <SS_set_low>
	spi_transfer(msg);
    15d0:	8f e2       	ldi	r24, 0x2F	; 47
    15d2:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	delay_us(1);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    15de:	8d 2f       	mov	r24, r29
    15e0:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	delay_us(1);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    15ec:	8c 2f       	mov	r24, r28
    15ee:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	SS_set_high();
    15f2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SS_set_high>
	delay_ms(1);
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>

	return;
}
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	08 95       	ret

00001604 <get_status>:
/*		Note: 000 = IDLE, 001 = RX, 110 = RX buffer overflow.			*/
/*																		*/
/************************************************************************/

void get_status(uint8_t *CHIP_RDYn, uint8_t *state)
{
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	eb 01       	movw	r28, r22
	uint8_t msg;

	msg = cmd_str(SNOP);
    160a:	8d e3       	ldi	r24, 0x3D	; 61
    160c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
	
	msg = msg & ~0x80;
    1610:	8f 77       	andi	r24, 0x7F	; 127
	msg = msg >> 4;
    1612:	82 95       	swap	r24
    1614:	8f 70       	andi	r24, 0x0F	; 15
	*state = msg;
    1616:	88 83       	st	Y, r24
	
	return;
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <dir_FIFO_read>:
/*	on the CC1120's FIFO and return the byte which was located there.	*/
/*																		*/
/************************************************************************/

uint8_t dir_FIFO_read(uint8_t addr)
{
    161e:	cf 93       	push	r28
    1620:	c8 2f       	mov	r28, r24
	cmd_str(SNOP);
    1622:	8d e3       	ldi	r24, 0x3D	; 61
    1624:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
	uint8_t msg;
	msg = 0b10111110;
	
	SS_set_low();
    1628:	0e 94 19 0a 	call	0x1432	; 0x1432 <SS_set_low>
	msg = spi_transfer(msg);
    162c:	8e eb       	ldi	r24, 0xBE	; 190
    162e:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	delay_us(1);
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    163a:	8c 2f       	mov	r24, r28
    163c:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
	delay_us(1);
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <delay_us>
	msg = spi_transfer(0x00);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	0e 94 ed 09 	call	0x13da	; 0x13da <spi_transfer>
    164e:	c8 2f       	mov	r28, r24
	SS_set_high();
    1650:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <SS_set_high>
	delay_ms(1);
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
	return msg;
}
    165c:	8c 2f       	mov	r24, r28
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	c8 2f       	mov	r28, r24
    166a:	d6 2f       	mov	r29, r22
    166c:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
    166e:	0e 94 83 0a 	call	0x1506	; 0x1506 <reg_read>
	if(!data)
    1672:	11 11       	cpse	r17, r1
    1674:	0c c0       	rjmp	.+24     	; 0x168e <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
    1676:	e1 e0       	ldi	r30, 0x01	; 1
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	af 01       	movw	r20, r30
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <reg_write_bit+0x20>
    167e:	44 0f       	add	r20, r20
    1680:	55 1f       	adc	r21, r21
    1682:	da 95       	dec	r29
    1684:	e2 f7       	brpl	.-8      	; 0x167e <reg_write_bit+0x1c>
    1686:	40 95       	com	r20
		msg = temp & msg;
    1688:	68 2f       	mov	r22, r24
    168a:	64 23       	and	r22, r20
    168c:	0a c0       	rjmp	.+20     	; 0x16a2 <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
    168e:	41 e0       	ldi	r20, 0x01	; 1
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	9a 01       	movw	r18, r20
    1694:	02 c0       	rjmp	.+4      	; 0x169a <reg_write_bit+0x38>
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	da 95       	dec	r29
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <reg_write_bit+0x34>
		msg = temp | msg;
    169e:	68 2f       	mov	r22, r24
    16a0:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
    16a2:	8c 2f       	mov	r24, r28
    16a4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	return;
}
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	08 95       	ret

000016b0 <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    16b0:	1f 93       	push	r17
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	c8 2f       	mov	r28, r24
    16b8:	d6 2f       	mov	r29, r22
    16ba:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
    16bc:	0e 94 b5 0a 	call	0x156a	; 0x156a <reg_read2F>
	if(!data)
    16c0:	11 11       	cpse	r17, r1
    16c2:	0c c0       	rjmp	.+24     	; 0x16dc <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
    16c4:	e1 e0       	ldi	r30, 0x01	; 1
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	af 01       	movw	r20, r30
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <reg_write_bit2F+0x20>
    16cc:	44 0f       	add	r20, r20
    16ce:	55 1f       	adc	r21, r21
    16d0:	da 95       	dec	r29
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <reg_write_bit2F+0x1c>
    16d4:	40 95       	com	r20
		msg = temp & msg;
    16d6:	68 2f       	mov	r22, r24
    16d8:	64 23       	and	r22, r20
    16da:	0a c0       	rjmp	.+20     	; 0x16f0 <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	9a 01       	movw	r18, r20
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <reg_write_bit2F+0x38>
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	da 95       	dec	r29
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <reg_write_bit2F+0x34>
		msg = temp | msg;
    16ec:	68 2f       	mov	r22, r24
    16ee:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
    16f0:	8c 2f       	mov	r24, r28
    16f2:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	return;
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	08 95       	ret

000016fe <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    16fe:	0e 94 19 0a 	call	0x1432	; 0x1432 <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	  
	//RESET 
    cmd_str(SRES);             //SRES                  reset chip
    1702:	80 e3       	ldi	r24, 0x30	; 48
    1704:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
      
    //Reset RX FIFO
    cmd_str(SFRX);             //SFRX                  flush RX FIFO
    1708:	8a e3       	ldi	r24, 0x3A	; 58
    170a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
      
    //Reset TX FIFO
    cmd_str(SFTX);             //SFTX                  flush TX FIFO
    170e:	8b e3       	ldi	r24, 0x3B	; 59
    1710:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>

	//**************SET UP RX****************//
  
	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	82 e1       	ldi	r24, 0x12	; 18
    1718:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    171c:	6f e5       	ldi	r22, 0x5F	; 95
    171e:	83 e1       	ldi	r24, 0x13	; 19
    1720:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    1724:	60 e4       	ldi	r22, 0x40	; 64
    1726:	86 e1       	ldi	r24, 0x16	; 22
    1728:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    172c:	6e e0       	ldi	r22, 0x0E	; 14
    172e:	87 e1       	ldi	r24, 0x17	; 23
    1730:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    1734:	63 e0       	ldi	r22, 0x03	; 3
    1736:	89 e1       	ldi	r24, 0x19	; 25
    1738:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    173c:	63 e3       	ldi	r22, 0x33	; 51
    173e:	8b e1       	ldi	r24, 0x1B	; 27
    1740:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    1744:	67 e1       	ldi	r22, 0x17	; 23
    1746:	8d e1       	ldi	r24, 0x1D	; 29
    1748:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    174c:	60 e5       	ldi	r22, 0x50	; 80
    174e:	8f e1       	ldi	r24, 0x1F	; 31
    1750:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
//  reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
  
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    1754:	64 e1       	ldi	r22, 0x14	; 20
    1756:	81 e2       	ldi	r24, 0x21	; 33
    1758:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    175c:	6c ea       	ldi	r22, 0xAC	; 172
    175e:	82 e2       	ldi	r24, 0x22	; 34
    1760:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	//reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
	//reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
	//reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
  
	cmd_str(SNOP);
    1764:	8d e3       	ldi	r24, 0x3D	; 61
    1766:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
	//For test purposes only, (2nd block, deleted first one) use values from SmartRF for some bits
	reg_write(0x08, 0x0B);            //*Changed on line 152
    176a:	6b e0       	ldi	r22, 0x0B	; 11
    176c:	88 e0       	ldi	r24, 0x08	; 8
    176e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x13, 0x0D);            //
    1772:	6d e0       	ldi	r22, 0x0D	; 13
    1774:	83 e1       	ldi	r24, 0x13	; 19
    1776:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x26, 0x04);            //*Changed on line 144
    177a:	64 e0       	ldi	r22, 0x04	; 4
    177c:	86 e2       	ldi	r24, 0x26	; 38
    177e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
  
	//High performance RX
	reg_write(0x08, 0x0B);            //
    1782:	6b e0       	ldi	r22, 0x0B	; 11
    1784:	88 e0       	ldi	r24, 0x08	; 8
    1786:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x0C, 0x1C);            //
    178a:	6c e1       	ldi	r22, 0x1C	; 28
    178c:	8c e0       	ldi	r24, 0x0C	; 12
    178e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x10, 0x00);            //
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	80 e1       	ldi	r24, 0x10	; 16
    1796:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x11, 0x04);            //
    179a:	64 e0       	ldi	r22, 0x04	; 4
    179c:	81 e1       	ldi	r24, 0x11	; 17
    179e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x13, 0x05);            //
    17a2:	65 e0       	ldi	r22, 0x05	; 5
    17a4:	83 e1       	ldi	r24, 0x13	; 19
    17a6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x1C, 0xA9);            //
    17aa:	69 ea       	ldi	r22, 0xA9	; 169
    17ac:	8c e1       	ldi	r24, 0x1C	; 28
    17ae:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x1D, 0xCF);            //
    17b2:	6f ec       	ldi	r22, 0xCF	; 207
    17b4:	8d e1       	ldi	r24, 0x1D	; 29
    17b6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x1E, 0x00);            //
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	8e e1       	ldi	r24, 0x1E	; 30
    17be:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x20, 0x03);            //
    17c2:	63 e0       	ldi	r22, 0x03	; 3
    17c4:	80 e2       	ldi	r24, 0x20	; 32
    17c6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x2E, 0x00);            //
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	8e e2       	ldi	r24, 0x2E	; 46
    17ce:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write2F(0x00, 0x00);          //
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>

	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    17da:	68 e4       	ldi	r22, 0x48	; 72
    17dc:	8a e0       	ldi	r24, 0x0A	; 10
    17de:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    17e2:	65 e0       	ldi	r22, 0x05	; 5
    17e4:	8b e0       	ldi	r24, 0x0B	; 11
    17e6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: 0x14           set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector enabled
    17ea:	64 e0       	ldi	r22, 0x04	; 4
    17ec:	81 e2       	ldi	r24, 0x21	; 33
    17ee:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
  
	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	8d e0       	ldi	r24, 0x0D	; 13
    17f6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	65 e0       	ldi	r22, 0x05	; 5
    17fe:	8e e0       	ldi	r24, 0x0E	; 14
    1800:	0e 94 31 0b 	call	0x1662	; 0x1662 <reg_write_bit>
  
	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	67 e0       	ldi	r22, 0x07	; 7
    1808:	82 e0       	ldi	r24, 0x02	; 2
    180a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	66 e0       	ldi	r22, 0x06	; 6
    1812:	82 e0       	ldi	r24, 0x02	; 2
    1814:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <reg_write_bit2F>
  
	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	66 e0       	ldi	r22, 0x06	; 6
    181c:	88 e0       	ldi	r24, 0x08	; 8
    181e:	0e 94 31 0b 	call	0x1662	; 0x1662 <reg_write_bit>
	reg_write(0x09, 0x17);            //SYNC_CFG0: 0x17        32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    1822:	67 e1       	ldi	r22, 0x17	; 23
    1824:	89 e0       	ldi	r24, 0x09	; 9
    1826:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
  
	//set packets
	reg_write(0x26, 0x00);            //PKT_CFG2: 0x00         set FIFO mode
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	86 e2       	ldi	r24, 0x26	; 38
    182e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
	reg_write(0x2E, 0xFF);            //PKT_LEN: 0xFF          set packet length to 0xFF (max)  
    1832:	6f ef       	ldi	r22, 0xFF	; 255
    1834:	8e e2       	ldi	r24, 0x2E	; 46
    1836:	0e 94 9c 0a 	call	0x1538	; 0x1538 <reg_write>
    
	//Frequency setting
	cmd_str(SNOP);
    183a:	8d e3       	ldi	r24, 0x3D	; 61
    183c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    1840:	6c e6       	ldi	r22, 0x6C	; 108
    1842:	8c e0       	ldi	r24, 0x0C	; 12
    1844:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    1848:	60 e8       	ldi	r22, 0x80	; 128
    184a:	8d e0       	ldi	r24, 0x0D	; 13
    184c:	0e 94 df 0a 	call	0x15be	; 0x15be <reg_write2F>

	//set up GPIO1 to 17
	//reg_write(0x00, 17);
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    1850:	83 e3       	ldi	r24, 0x33	; 51
    1852:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
	delay_ms(250);
    1856:	8a ef       	ldi	r24, 0xFA	; 250
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>

	cmd_str(SAFC);					 // Automatic frequency control
    185e:	87 e3       	ldi	r24, 0x37	; 55
    1860:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
	delay_ms(250);
    1864:	8a ef       	ldi	r24, 0xFA	; 250
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 66 0a 	call	0x14cc	; 0x14cc <delay_ms>
	
	//reg_write2F(0xD2, 0x00);
	//reg_write2F(0xD4, 0xFF);
	
	send_coms = 0;
    186c:	10 92 51 01 	sts	0x0151, r1

	cmd_str(SRX);                    // Put in RX mode
    1870:	84 e3       	ldi	r24, 0x34	; 52
    1872:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
    1876:	08 95       	ret

00001878 <trans_check>:
	reg_write2F(reg, msg);
	return;
}

void trans_check(void)
{
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	00 d0       	rcall	.+0      	; 0x187e <trans_check+0x6>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	uint8_t msg = 0, CHIP_RDYn, state;
	
	get_status(&CHIP_RDYn, &state);
    1882:	be 01       	movw	r22, r28
    1884:	6e 5f       	subi	r22, 0xFE	; 254
    1886:	7f 4f       	sbci	r23, 0xFF	; 255
    1888:	ce 01       	movw	r24, r28
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	0e 94 02 0b 	call	0x1604	; 0x1604 <get_status>

	if(state == 0b110 || state == 0b111)
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	86 50       	subi	r24, 0x06	; 6
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	68 f5       	brcc	.+90     	; 0x18f2 <trans_check+0x7a>
	{
		cmd_str(SIDLE);
    1898:	86 e3       	ldi	r24, 0x36	; 54
    189a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
		//LED_toggle(LED3);
		//delay_ms(100);
		
		// Here we would send our message to the OBC.
		
		cmd_str(SNOP);
    189e:	8d e3       	ldi	r24, 0x3D	; 61
    18a0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
		trans_msg[0] = dir_FIFO_read(0x80);
    18a4:	80 e8       	ldi	r24, 0x80	; 128
    18a6:	0e 94 0f 0b 	call	0x161e	; 0x161e <dir_FIFO_read>
    18aa:	80 93 52 01 	sts	0x0152, r24
		trans_msg[1] = dir_FIFO_read(0x81);
    18ae:	81 e8       	ldi	r24, 0x81	; 129
    18b0:	0e 94 0f 0b 	call	0x161e	; 0x161e <dir_FIFO_read>
    18b4:	80 93 53 01 	sts	0x0153, r24
		trans_msg[2] = dir_FIFO_read(0x82);
    18b8:	82 e8       	ldi	r24, 0x82	; 130
    18ba:	0e 94 0f 0b 	call	0x161e	; 0x161e <dir_FIFO_read>
    18be:	80 93 54 01 	sts	0x0154, r24
		trans_msg[3] = dir_FIFO_read(0x83);
    18c2:	83 e8       	ldi	r24, 0x83	; 131
    18c4:	0e 94 0f 0b 	call	0x161e	; 0x161e <dir_FIFO_read>
    18c8:	80 93 55 01 	sts	0x0155, r24
		trans_msg[4] = dir_FIFO_read(0x84);
    18cc:	84 e8       	ldi	r24, 0x84	; 132
    18ce:	0e 94 0f 0b 	call	0x161e	; 0x161e <dir_FIFO_read>
    18d2:	80 93 56 01 	sts	0x0156, r24
		trans_msg[5] = dir_FIFO_read(0x85);
    18d6:	85 e8       	ldi	r24, 0x85	; 133
    18d8:	0e 94 0f 0b 	call	0x161e	; 0x161e <dir_FIFO_read>
    18dc:	80 93 57 01 	sts	0x0157, r24
			//LED_toggle(LED6);
			//delay_ms(100);
			//LED_toggle(LED6);
			//delay_ms(100);
		//}
		send_coms = 1;		// Indicates that in main() we will send trans_msg to the OBC via CAN.
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 51 01 	sts	0x0151, r24
		
		cmd_str(SFRX);
    18e6:	8a e3       	ldi	r24, 0x3A	; 58
    18e8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
		//reg_write2F(0xD2, 0x00);
		//reg_write2F(0xD4, 0xFF);
		
		//cmd_str(SFTX);
		
		cmd_str(SRX);
    18ec:	84 e3       	ldi	r24, 0x34	; 52
    18ee:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <cmd_str>
	}
	return;
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	08 95       	ret

000018fc <__tablejump2__>:
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31

00001900 <__tablejump__>:
    1900:	05 90       	lpm	r0, Z+
    1902:	f4 91       	lpm	r31, Z
    1904:	e0 2d       	mov	r30, r0
    1906:	09 94       	ijmp

00001908 <_exit>:
    1908:	f8 94       	cli

0000190a <__stop_program>:
    190a:	ff cf       	rjmp	.-2      	; 0x190a <__stop_program>
