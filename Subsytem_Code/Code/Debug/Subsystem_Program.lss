
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000006b  00800100  00800100  00001d14  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000002b0  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00003273  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000eff  00000000  00000000  00005267  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001115  00000000  00000000  00006166  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000005e4  00000000  00000000  0000727c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000007fc  00000000  00000000  00007860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002037  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000258  00000000  00000000  0000a093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	da 03       	fmulsu	r21, r18
      7e:	6c 04       	cpc	r6, r12
      80:	f6 04       	cpc	r15, r6
      82:	6a 05       	cpc	r22, r10
      84:	aa 05       	cpc	r26, r10
      86:	26 06       	cpc	r2, r22
      88:	a3 06       	cpc	r10, r19
      8a:	40 07       	cpc	r20, r16
      8c:	e6 07       	cpc	r30, r22
      8e:	d4 03       	fmuls	r21, r20
      90:	ef 08       	sbc	r14, r15

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ab 36       	cpi	r26, 0x6B	; 107
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 87 0b 	call	0x170e	; 0x170e <main>
      b2:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
      ce:	20 e2       	ldi	r18, 0x20	; 32
      d0:	31 e0       	ldi	r19, 0x01	; 1
      d2:	30 93 31 01 	sts	0x0131, r19
      d6:	20 93 30 01 	sts	0x0130, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      da:	10 92 34 01 	sts	0x0134, r1
	message.id.std = id;  // populate ID field with ID Tag
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	70 93 2c 01 	sts	0x012C, r23
      e4:	60 93 2b 01 	sts	0x012B, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	20 93 2a 01 	sts	0x012A, r18
	message.dlc = 8;			 // Max length of a CAN message.
      ee:	28 e0       	ldi	r18, 0x08	; 8
      f0:	20 93 2f 01 	sts	0x012F, r18
	mob_number = 4;
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	20 93 60 01 	sts	0x0160, r18
      fa:	dc 01       	movw	r26, r24
      fc:	e0 e2       	ldi	r30, 0x20	; 32
      fe:	f1 e0       	ldi	r31, 0x01	; 1
     100:	88 e2       	ldi	r24, 0x28	; 40
     102:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     104:	2d 91       	ld	r18, X+
     106:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     108:	e8 17       	cp	r30, r24
     10a:	f9 07       	cpc	r31, r25
     10c:	d9 f7       	brne	.-10     	; 0x104 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     10e:	60 91 60 01 	lds	r22, 0x0160
     112:	89 e2       	ldi	r24, 0x29	; 41
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     11a:	81 11       	cpse	r24, r1
     11c:	f8 cf       	rjmp	.-16     	; 0x10e <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     11e:	60 91 60 01 	lds	r22, 0x0160
     122:	89 e2       	ldi	r24, 0x29	; 41
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 bc 09 	call	0x1378	; 0x1378 <can_get_status>
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	c1 f3       	breq	.-16     	; 0x11e <can_send_message+0x50>

	return;
}
     12e:	08 95       	ret

00000130 <decode_command>:

void decode_command(uint8_t* command_array)
{		
	uint8_t i, command  = *(command_array + 5);

	switch(command)
     130:	fc 01       	movw	r30, r24
     132:	25 81       	ldd	r18, Z+5	; 0x05
     134:	23 30       	cpi	r18, 0x03	; 3
     136:	81 f1       	breq	.+96     	; 0x198 <decode_command+0x68>
     138:	28 f4       	brcc	.+10     	; 0x144 <decode_command+0x14>
     13a:	21 30       	cpi	r18, 0x01	; 1
     13c:	49 f0       	breq	.+18     	; 0x150 <decode_command+0x20>
     13e:	22 30       	cpi	r18, 0x02	; 2
     140:	c9 f0       	breq	.+50     	; 0x174 <decode_command+0x44>
     142:	08 95       	ret
     144:	25 30       	cpi	r18, 0x05	; 5
     146:	d1 f1       	breq	.+116    	; 0x1bc <decode_command+0x8c>
     148:	27 30       	cpi	r18, 0x07	; 7
     14a:	09 f4       	brne	.+2      	; 0x14e <decode_command+0x1e>
     14c:	45 c0       	rjmp	.+138    	; 0x1d8 <decode_command+0xa8>
     14e:	08 95       	ret
	{
		case REQ_RESPONSE :
			LED_toggle(LED3);	//Toggle LED3 when a response is requested.
     150:	83 e0       	ldi	r24, 0x03	; 3
     152:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LED_toggle>
			delay_ms(100);
     156:	84 e6       	ldi	r24, 0x64	; 100
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
			LED_toggle(LED3);
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LED_toggle>
			delay_ms(100);
     164:	84 e6       	ldi	r24, 0x64	; 100
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
			send_now = 1;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	80 93 36 01 	sts	0x0136, r24
			return;
     172:	08 95       	ret
		case REQ_DATA :
			LED_toggle(LED7);	//Toggle LED7 when data is requested.
     174:	87 e0       	ldi	r24, 0x07	; 7
     176:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LED_toggle>
			delay_ms(100);
     17a:	84 e6       	ldi	r24, 0x64	; 100
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
			LED_toggle(LED7);
     182:	87 e0       	ldi	r24, 0x07	; 7
     184:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LED_toggle>
			delay_ms(100);
     188:	84 e6       	ldi	r24, 0x64	; 100
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
			send_data = 1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 57 01 	sts	0x0157, r24
			return;
     196:	08 95       	ret
		case REQ_HK :
			LED_toggle(LED6);	//Toggle LED6 when housekeeping was requested.
     198:	86 e0       	ldi	r24, 0x06	; 6
     19a:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LED_toggle>
			delay_ms(100);
     19e:	84 e6       	ldi	r24, 0x64	; 100
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
			LED_toggle(LED6);
     1a6:	86 e0       	ldi	r24, 0x06	; 6
     1a8:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LED_toggle>
			delay_ms(100);
     1ac:	84 e6       	ldi	r24, 0x64	; 100
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
			send_hk = 1;
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	80 93 46 01 	sts	0x0146, r24
			return;
     1ba:	08 95       	ret
		case REQ_READ:
			read_response = 1;
     1bc:	21 e0       	ldi	r18, 0x01	; 1
     1be:	20 93 3d 01 	sts	0x013D, r18
     1c2:	dc 01       	movw	r26, r24
     1c4:	e2 e6       	ldi	r30, 0x62	; 98
     1c6:	f1 e0       	ldi	r31, 0x01	; 1
     1c8:	8a e6       	ldi	r24, 0x6A	; 106
     1ca:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     1cc:	2d 91       	ld	r18, X+
     1ce:	21 93       	st	Z+, r18
			delay_ms(100);
			send_hk = 1;
			return;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1d0:	e8 17       	cp	r30, r24
     1d2:	f9 07       	cpc	r31, r25
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <decode_command+0x9c>
     1d6:	08 95       	ret
			{
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	20 93 28 01 	sts	0x0128, r18
     1de:	dc 01       	movw	r26, r24
     1e0:	e0 e0       	ldi	r30, 0x00	; 0
     1e2:	f1 e0       	ldi	r31, 0x01	; 1
     1e4:	88 e0       	ldi	r24, 0x08	; 8
     1e6:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     1e8:	2d 91       	ld	r18, X+
     1ea:	21 93       	st	Z+, r18
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     1ec:	e8 17       	cp	r30, r24
     1ee:	f9 07       	cpc	r31, r25
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <decode_command+0xb8>
     1f2:	08 95       	ret

000001f4 <set_up_msg>:
	}
}

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     1f4:	10 92 34 01 	sts	0x0134, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     1f8:	95 e0       	ldi	r25, 0x05	; 5
     1fa:	90 93 2a 01 	sts	0x012A, r25
	message.dlc = 8;			 // Max length of a CAN message.
     1fe:	98 e0       	ldi	r25, 0x08	; 8
     200:	90 93 2f 01 	sts	0x012F, r25
	mob_number = mailbox;
     204:	80 93 60 01 	sts	0x0160, r24
	
	if(mailbox == 0)
     208:	81 11       	cpse	r24, r1
     20a:	0d c0       	rjmp	.+26     	; 0x226 <set_up_msg+0x32>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     20c:	8e e3       	ldi	r24, 0x3E	; 62
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	90 93 31 01 	sts	0x0131, r25
     214:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     218:	84 e1       	ldi	r24, 0x14	; 20
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	90 93 2c 01 	sts	0x012C, r25
     220:	80 93 2b 01 	sts	0x012B, r24
		return;
     224:	08 95       	ret
	}
	if(mailbox == 1)
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	69 f4       	brne	.+26     	; 0x244 <set_up_msg+0x50>
	{
		message.pt_data = &data1[0];
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	90 93 31 01 	sts	0x0131, r25
     232:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID1;
     236:	85 e1       	ldi	r24, 0x15	; 21
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	90 93 2c 01 	sts	0x012C, r25
     23e:	80 93 2b 01 	sts	0x012B, r24
		return;
     242:	08 95       	ret
	}
	if(mailbox == 2)
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	69 f4       	brne	.+26     	; 0x262 <set_up_msg+0x6e>
	{
		message.pt_data = &data2[0];
     248:	80 e1       	ldi	r24, 0x10	; 16
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	90 93 31 01 	sts	0x0131, r25
     250:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID2;
     254:	86 e1       	ldi	r24, 0x16	; 22
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	90 93 2c 01 	sts	0x012C, r25
     25c:	80 93 2b 01 	sts	0x012B, r24
		return;
     260:	08 95       	ret
	}
	if(mailbox == 3)
     262:	83 30       	cpi	r24, 0x03	; 3
     264:	69 f4       	brne	.+26     	; 0x280 <set_up_msg+0x8c>
	{
		message.pt_data = &data3[0];
     266:	8f e4       	ldi	r24, 0x4F	; 79
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	90 93 31 01 	sts	0x0131, r25
     26e:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID3;
     272:	87 e1       	ldi	r24, 0x17	; 23
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 2c 01 	sts	0x012C, r25
     27a:	80 93 2b 01 	sts	0x012B, r24
		return;
     27e:	08 95       	ret
	}
	if(mailbox == 5)
     280:	85 30       	cpi	r24, 0x05	; 5
     282:	61 f4       	brne	.+24     	; 0x29c <set_up_msg+0xa8>
	{
		message.pt_data = &data5[0];
     284:	88 e5       	ldi	r24, 0x58	; 88
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	90 93 31 01 	sts	0x0131, r25
     28c:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID5;
     290:	89 e1       	ldi	r24, 0x19	; 25
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 2c 01 	sts	0x012C, r25
     298:	80 93 2b 01 	sts	0x012B, r24
     29c:	08 95       	ret

0000029e <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     29e:	81 11       	cpse	r24, r1
     2a0:	1f c0       	rjmp	.+62     	; 0x2e0 <clean_up_msg+0x42>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2a2:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2a6:	85 e0       	ldi	r24, 0x05	; 5
     2a8:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     2ac:	88 e0       	ldi	r24, 0x08	; 8
     2ae:	80 93 2f 01 	sts	0x012F, r24
		mob_number = mailbox;
     2b2:	10 92 60 01 	sts	0x0160, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     2b6:	8e e3       	ldi	r24, 0x3E	; 62
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	90 93 31 01 	sts	0x0131, r25
     2be:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     2c2:	84 e1       	ldi	r24, 0x14	; 20
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	90 93 2c 01 	sts	0x012C, r25
     2ca:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     2ce:	60 91 60 01 	lds	r22, 0x0160
     2d2:	89 e2       	ldi	r24, 0x29	; 41
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     2da:	81 11       	cpse	r24, r1
     2dc:	f8 cf       	rjmp	.-16     	; 0x2ce <clean_up_msg+0x30>
     2de:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	01 f5       	brne	.+64     	; 0x324 <clean_up_msg+0x86>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2e4:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2e8:	85 e0       	ldi	r24, 0x05	; 5
     2ea:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     2ee:	88 e0       	ldi	r24, 0x08	; 8
     2f0:	80 93 2f 01 	sts	0x012F, r24
		mob_number = mailbox;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	80 93 60 01 	sts	0x0160, r24
		message.pt_data = &data1[0];
     2fa:	88 e0       	ldi	r24, 0x08	; 8
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	90 93 31 01 	sts	0x0131, r25
     302:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID1;
     306:	85 e1       	ldi	r24, 0x15	; 21
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	90 93 2c 01 	sts	0x012C, r25
     30e:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     312:	60 91 60 01 	lds	r22, 0x0160
     316:	89 e2       	ldi	r24, 0x29	; 41
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     31e:	81 11       	cpse	r24, r1
     320:	f8 cf       	rjmp	.-16     	; 0x312 <clean_up_msg+0x74>
     322:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     324:	82 30       	cpi	r24, 0x02	; 2
     326:	01 f5       	brne	.+64     	; 0x368 <clean_up_msg+0xca>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     328:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     32c:	85 e0       	ldi	r24, 0x05	; 5
     32e:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     332:	88 e0       	ldi	r24, 0x08	; 8
     334:	80 93 2f 01 	sts	0x012F, r24
		mob_number = mailbox;
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	80 93 60 01 	sts	0x0160, r24
		message.pt_data = &data2[0];
     33e:	80 e1       	ldi	r24, 0x10	; 16
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	90 93 31 01 	sts	0x0131, r25
     346:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID2;
     34a:	86 e1       	ldi	r24, 0x16	; 22
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 2c 01 	sts	0x012C, r25
     352:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     356:	60 91 60 01 	lds	r22, 0x0160
     35a:	89 e2       	ldi	r24, 0x29	; 41
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     362:	81 11       	cpse	r24, r1
     364:	f8 cf       	rjmp	.-16     	; 0x356 <clean_up_msg+0xb8>
     366:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	01 f5       	brne	.+64     	; 0x3ac <clean_up_msg+0x10e>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     36c:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     370:	85 e0       	ldi	r24, 0x05	; 5
     372:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     376:	88 e0       	ldi	r24, 0x08	; 8
     378:	80 93 2f 01 	sts	0x012F, r24
		mob_number = mailbox;
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	80 93 60 01 	sts	0x0160, r24
		message.pt_data = &data3[0];
     382:	8f e4       	ldi	r24, 0x4F	; 79
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	90 93 31 01 	sts	0x0131, r25
     38a:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID3;
     38e:	87 e1       	ldi	r24, 0x17	; 23
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	90 93 2c 01 	sts	0x012C, r25
     396:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     39a:	60 91 60 01 	lds	r22, 0x0160
     39e:	89 e2       	ldi	r24, 0x29	; 41
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     3a6:	81 11       	cpse	r24, r1
     3a8:	f8 cf       	rjmp	.-16     	; 0x39a <clean_up_msg+0xfc>
     3aa:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     3ac:	85 30       	cpi	r24, 0x05	; 5
     3ae:	e9 f4       	brne	.+58     	; 0x3ea <clean_up_msg+0x14c>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3b0:	10 92 34 01 	sts	0x0134, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3b4:	80 93 2a 01 	sts	0x012A, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3b8:	98 e0       	ldi	r25, 0x08	; 8
     3ba:	90 93 2f 01 	sts	0x012F, r25
		mob_number = mailbox;
     3be:	80 93 60 01 	sts	0x0160, r24
		message.pt_data = &data5[0];
     3c2:	88 e5       	ldi	r24, 0x58	; 88
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	90 93 31 01 	sts	0x0131, r25
     3ca:	80 93 30 01 	sts	0x0130, r24
		message.id.std = SUB0_ID5;
     3ce:	89 e1       	ldi	r24, 0x19	; 25
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	90 93 2c 01 	sts	0x012C, r25
     3d6:	80 93 2b 01 	sts	0x012B, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3da:	60 91 60 01 	lds	r22, 0x0160
     3de:	89 e2       	ldi	r24, 0x29	; 41
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     3e6:	81 11       	cpse	r24, r1
     3e8:	f8 cf       	rjmp	.-16     	; 0x3da <clean_up_msg+0x13c>
     3ea:	08 95       	ret

000003ec <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     3f0:	85 e0       	ldi	r24, 0x05	; 5
     3f2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     3f6:	60 91 60 01 	lds	r22, 0x0160
     3fa:	89 e2       	ldi	r24, 0x29	; 41
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 bc 09 	call	0x1378	; 0x1378 <can_get_status>
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	11 f1       	breq	.+68     	; 0x44a <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     406:	80 91 32 01 	lds	r24, 0x0132
     40a:	80 32       	cpi	r24, 0x20	; 32
     40c:	d9 f4       	brne	.+54     	; 0x444 <can_check_housekeep+0x58>
     40e:	a0 91 30 01 	lds	r26, 0x0130
     412:	b0 91 31 01 	lds	r27, 0x0131
     416:	cf e4       	ldi	r28, 0x4F	; 79
     418:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     41a:	e7 e4       	ldi	r30, 0x47	; 71
     41c:	f1 e0       	ldi	r31, 0x01	; 1
     41e:	8d 91       	ld	r24, X+
     420:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     422:	ec 17       	cp	r30, r28
     424:	fd 07       	cpc	r31, r29
     426:	d9 f7       	brne	.-10     	; 0x41e <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     428:	80 91 4d 01 	lds	r24, 0x014D
     42c:	82 30       	cpi	r24, 0x02	; 2
     42e:	21 f4       	brne	.+8      	; 0x438 <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     430:	87 e4       	ldi	r24, 0x47	; 71
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 98 00 	call	0x130	; 0x130 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     438:	e7 e4       	ldi	r30, 0x47	; 71
     43a:	f1 e0       	ldi	r31, 0x01	; 1
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     43c:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     43e:	ec 17       	cp	r30, r28
     440:	fd 07       	cpc	r31, r29
     442:	e1 f7       	brne	.-8      	; 0x43c <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     444:	85 e0       	ldi	r24, 0x05	; 5
     446:	0e 94 4f 01 	call	0x29e	; 0x29e <clean_up_msg>
	}	
	return;
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
     450:	9f 92       	push	r9
     452:	af 92       	push	r10
     454:	bf 92       	push	r11
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     466:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     468:	02 e3       	ldi	r16, 0x32	; 50
     46a:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     46c:	0f 2e       	mov	r0, r31
     46e:	f0 e3       	ldi	r31, 0x30	; 48
     470:	af 2e       	mov	r10, r31
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	bf 2e       	mov	r11, r31
     476:	f0 2d       	mov	r31, r0
     478:	cf e4       	ldi	r28, 0x4F	; 79
     47a:	d1 e0       	ldi	r29, 0x01	; 1
     47c:	0f 2e       	mov	r0, r31
     47e:	f7 e4       	ldi	r31, 0x47	; 71
     480:	ef 2e       	mov	r14, r31
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	ff 2e       	mov	r15, r31
     486:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     488:	0f 2e       	mov	r0, r31
     48a:	fd e4       	ldi	r31, 0x4D	; 77
     48c:	cf 2e       	mov	r12, r31
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	df 2e       	mov	r13, r31
     492:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     494:	89 2d       	mov	r24, r9
     496:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     49a:	60 91 60 01 	lds	r22, 0x0160
     49e:	89 e2       	ldi	r24, 0x29	; 41
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 bc 09 	call	0x1378	; 0x1378 <can_get_status>
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	e1 f0       	breq	.+56     	; 0x4e2 <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     4aa:	f8 01       	movw	r30, r16
     4ac:	80 81       	ld	r24, Z
     4ae:	80 32       	cpi	r24, 0x20	; 32
     4b0:	a9 f4       	brne	.+42     	; 0x4dc <can_check_general+0x8c>
     4b2:	f5 01       	movw	r30, r10
     4b4:	a0 81       	ld	r26, Z
     4b6:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4b8:	f7 01       	movw	r30, r14
     4ba:	8d 91       	ld	r24, X+
     4bc:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     4be:	ec 17       	cp	r30, r28
     4c0:	fd 07       	cpc	r31, r29
     4c2:	d9 f7       	brne	.-10     	; 0x4ba <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     4c4:	f6 01       	movw	r30, r12
     4c6:	80 81       	ld	r24, Z
     4c8:	82 30       	cpi	r24, 0x02	; 2
     4ca:	19 f4       	brne	.+6      	; 0x4d2 <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     4cc:	c7 01       	movw	r24, r14
     4ce:	0e 94 98 00 	call	0x130	; 0x130 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4d2:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     4d4:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     4d6:	ec 17       	cp	r30, r28
     4d8:	fd 07       	cpc	r31, r29
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     4dc:	89 2d       	mov	r24, r9
     4de:	0e 94 4f 01 	call	0x29e	; 0x29e <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     4e2:	93 94       	inc	r9
     4e4:	f4 e0       	ldi	r31, 0x04	; 4
     4e6:	9f 12       	cpse	r9, r31
     4e8:	d5 cf       	rjmp	.-86     	; 0x494 <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     4ea:	0e 94 f6 01 	call	0x3ec	; 0x3ec <can_check_housekeep>
	
	return;
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	bf 90       	pop	r11
     500:	af 90       	pop	r10
     502:	9f 90       	pop	r9
     504:	08 95       	ret

00000506 <can_init_mobs>:
/*		This function initializes our can message objects with their ID	*/
/*		and sets whether or not they are in transmit mode or receive.	*/
/************************************************************************/

void can_init_mobs(void)
{
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
	uint8_t i;

	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     50a:	8e e3       	ldi	r24, 0x3E	; 62
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	90 93 31 01 	sts	0x0131, r25
     512:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     516:	10 92 34 01 	sts	0x0134, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     51a:	84 e1       	ldi	r24, 0x14	; 20
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	90 93 2c 01 	sts	0x012C, r25
     522:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;			 // Max length of a CAN message.
     52c:	88 e0       	ldi	r24, 0x08	; 8
     52e:	80 93 2f 01 	sts	0x012F, r24
	mob_number = 0;
     532:	10 92 60 01 	sts	0x0160, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     536:	60 91 60 01 	lds	r22, 0x0160
     53a:	89 e2       	ldi	r24, 0x29	; 41
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     542:	81 11       	cpse	r24, r1
     544:	f8 cf       	rjmp	.-16     	; 0x536 <can_init_mobs+0x30>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     546:	88 e0       	ldi	r24, 0x08	; 8
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	90 93 31 01 	sts	0x0131, r25
     54e:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;
     552:	10 92 34 01 	sts	0x0134, r1
	message.id.std = SUB0_ID1;
     556:	85 e1       	ldi	r24, 0x15	; 21
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	90 93 2c 01 	sts	0x012C, r25
     55e:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;
     562:	85 e0       	ldi	r24, 0x05	; 5
     564:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;
     568:	88 e0       	ldi	r24, 0x08	; 8
     56a:	80 93 2f 01 	sts	0x012F, r24
	mob_number = 1;
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 60 01 	sts	0x0160, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     574:	60 91 60 01 	lds	r22, 0x0160
     578:	89 e2       	ldi	r24, 0x29	; 41
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     580:	81 11       	cpse	r24, r1
     582:	f8 cf       	rjmp	.-16     	; 0x574 <can_init_mobs+0x6e>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     584:	80 e1       	ldi	r24, 0x10	; 16
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	90 93 31 01 	sts	0x0131, r25
     58c:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;
     590:	10 92 34 01 	sts	0x0134, r1
	message.id.std = SUB0_ID2;
     594:	86 e1       	ldi	r24, 0x16	; 22
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	90 93 2c 01 	sts	0x012C, r25
     59c:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;
     5a0:	85 e0       	ldi	r24, 0x05	; 5
     5a2:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;
     5a6:	88 e0       	ldi	r24, 0x08	; 8
     5a8:	80 93 2f 01 	sts	0x012F, r24
	mob_number = 2;
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	80 93 60 01 	sts	0x0160, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     5b2:	60 91 60 01 	lds	r22, 0x0160
     5b6:	89 e2       	ldi	r24, 0x29	; 41
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     5be:	81 11       	cpse	r24, r1
     5c0:	f8 cf       	rjmp	.-16     	; 0x5b2 <can_init_mobs+0xac>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     5c2:	8f e4       	ldi	r24, 0x4F	; 79
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	90 93 31 01 	sts	0x0131, r25
     5ca:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;
     5ce:	10 92 34 01 	sts	0x0134, r1
	message.id.std = SUB0_ID3;
     5d2:	87 e1       	ldi	r24, 0x17	; 23
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	90 93 2c 01 	sts	0x012C, r25
     5da:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;
     5de:	85 e0       	ldi	r24, 0x05	; 5
     5e0:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;
     5e4:	88 e0       	ldi	r24, 0x08	; 8
     5e6:	80 93 2f 01 	sts	0x012F, r24
	mob_number = 3;
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	80 93 60 01 	sts	0x0160, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     5f0:	60 91 60 01 	lds	r22, 0x0160
     5f4:	89 e2       	ldi	r24, 0x29	; 41
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     5fc:	81 11       	cpse	r24, r1
     5fe:	f8 cf       	rjmp	.-16     	; 0x5f0 <can_init_mobs+0xea>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     600:	88 e5       	ldi	r24, 0x58	; 88
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	90 93 31 01 	sts	0x0131, r25
     608:	80 93 30 01 	sts	0x0130, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     60c:	10 92 34 01 	sts	0x0134, r1
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
     610:	89 e1       	ldi	r24, 0x19	; 25
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	90 93 2c 01 	sts	0x012C, r25
     618:	80 93 2b 01 	sts	0x012B, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     61c:	85 e0       	ldi	r24, 0x05	; 5
     61e:	80 93 2a 01 	sts	0x012A, r24
	message.dlc = 8;				// Max length of a CAN message.
     622:	98 e0       	ldi	r25, 0x08	; 8
     624:	90 93 2f 01 	sts	0x012F, r25
	mob_number = 5;
     628:	80 93 60 01 	sts	0x0160, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     62c:	60 91 60 01 	lds	r22, 0x0160
     630:	89 e2       	ldi	r24, 0x29	; 41
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 90 03 	call	0x720	; 0x720 <can_cmd>
     638:	81 11       	cpse	r24, r1
     63a:	f8 cf       	rjmp	.-16     	; 0x62c <can_init_mobs+0x126>
     63c:	e7 e4       	ldi	r30, 0x47	; 71
     63e:	f1 e0       	ldi	r31, 0x01	; 1
     640:	88 e1       	ldi	r24, 0x18	; 24
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	c2 e6       	ldi	r28, 0x62	; 98
     646:	d1 e0       	ldi	r29, 0x01	; 1
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	51 e0       	ldi	r21, 0x01	; 1
     64c:	2f e4       	ldi	r18, 0x4F	; 79
     64e:	31 e0       	ldi	r19, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     650:	11 92       	st	Z+, r1
		send_arr[i] = 0;
     652:	dc 01       	movw	r26, r24
     654:	1d 92       	st	X+, r1
     656:	cd 01       	movw	r24, r26
		read_arr[i] = 0;
     658:	19 92       	st	Y+, r1
		write_arr[i] = 0;
     65a:	da 01       	movw	r26, r20
     65c:	1d 92       	st	X+, r1
     65e:	ad 01       	movw	r20, r26
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     660:	e2 17       	cp	r30, r18
     662:	f3 07       	cpc	r31, r19
     664:	a9 f7       	brne	.-22     	; 0x650 <can_init_mobs+0x14a>
		read_arr[i] = 0;
		write_arr[i] = 0;
	}
	
	/* Initialize Global Command Flags to zero */
	send_now = 0;
     666:	10 92 36 01 	sts	0x0136, r1
	send_hk = 0;
     66a:	10 92 46 01 	sts	0x0146, r1
	send_data = 0;
     66e:	10 92 57 01 	sts	0x0157, r1
	read_response = 0;
     672:	10 92 3d 01 	sts	0x013D, r1
	write_response = 0;
     676:	10 92 28 01 	sts	0x0128, r1
	
	return;
}
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     680:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     682:	ad ee       	ldi	r26, 0xED	; 237
     684:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     686:	3e ee       	ldi	r19, 0xEE	; 238
     688:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     68a:	98 2f       	mov	r25, r24
     68c:	92 95       	swap	r25
     68e:	90 7f       	andi	r25, 0xF0	; 240
     690:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     692:	e3 2f       	mov	r30, r19
     694:	f2 2f       	mov	r31, r18
     696:	11 92       	st	Z+, r1
     698:	e8 3f       	cpi	r30, 0xF8	; 248
     69a:	f1 05       	cpc	r31, r1
     69c:	e1 f7       	brne	.-8      	; 0x696 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     69e:	8f 5f       	subi	r24, 0xFF	; 255
     6a0:	86 30       	cpi	r24, 0x06	; 6
     6a2:	99 f7       	brne	.-26     	; 0x68a <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     6a4:	08 95       	ret

000006a6 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     6a6:	80 91 ef 00 	lds	r24, 0x00EF
     6aa:	80 7c       	andi	r24, 0xC0	; 192
     6ac:	61 f0       	breq	.+24     	; 0x6c6 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     6ae:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     6b2:	98 2f       	mov	r25, r24
     6b4:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     6b6:	28 2f       	mov	r18, r24
     6b8:	20 76       	andi	r18, 0x60	; 96
     6ba:	20 32       	cpi	r18, 0x20	; 32
     6bc:	31 f0       	breq	.+12     	; 0x6ca <can_get_mob_status+0x24>
     6be:	90 34       	cpi	r25, 0x40	; 64
     6c0:	31 f0       	breq	.+12     	; 0x6ce <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     6c2:	8f 71       	andi	r24, 0x1F	; 31
     6c4:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     6c6:	8f ef       	ldi	r24, 0xFF	; 255
     6c8:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     6ca:	89 2f       	mov	r24, r25
     6cc:	08 95       	ret
     6ce:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     6d0:	08 95       	ret

000006d2 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     6d2:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     6d4:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     6d6:	aa ef       	ldi	r26, 0xFA	; 250
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	9c 91       	ld	r25, X
     6dc:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     6de:	8f 5f       	subi	r24, 0xFF	; 255
     6e0:	88 30       	cpi	r24, 0x08	; 8
     6e2:	d9 f7       	brne	.-10     	; 0x6da <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     6e4:	08 95       	ret

000006e6 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	80 93 e2 00 	sts	0x00E2, r24
     6f2:	8c e0       	ldi	r24, 0x0C	; 12
     6f4:	80 93 e3 00 	sts	0x00E3, r24
     6f8:	87 e3       	ldi	r24, 0x37	; 55
     6fa:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	08 95       	ret

00000702 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     702:	0e 94 73 03 	call	0x6e6	; 0x6e6 <can_fixed_baudrate>
     706:	88 23       	and	r24, r24
     708:	49 f0       	breq	.+18     	; 0x71c <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     70a:	0e 94 40 03 	call	0x680	; 0x680 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     70e:	e8 ed       	ldi	r30, 0xD8	; 216
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	82 60       	ori	r24, 0x02	; 2
     716:	80 83       	st	Z, r24
    return (1);
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     71c:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     71e:	08 95       	ret

00000720 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	1f 92       	push	r1
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     72c:	11 96       	adiw	r26, 0x01	; 1
     72e:	8c 91       	ld	r24, X
     730:	11 97       	sbiw	r26, 0x01	; 1
     732:	8c 30       	cpi	r24, 0x0C	; 12
     734:	b1 f4       	brne	.+44     	; 0x762 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     736:	19 96       	adiw	r26, 0x09	; 9
     738:	8c 91       	ld	r24, X
     73a:	19 97       	sbiw	r26, 0x09	; 9
     73c:	80 36       	cpi	r24, 0x60	; 96
     73e:	69 f4       	brne	.+26     	; 0x75a <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     740:	86 2f       	mov	r24, r22
     742:	82 95       	swap	r24
     744:	80 7f       	andi	r24, 0xF0	; 240
     746:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     74a:	ef ee       	ldi	r30, 0xEF	; 239
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	8f 73       	andi	r24, 0x3F	; 63
     752:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     754:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     758:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     75a:	19 96       	adiw	r26, 0x09	; 9
     75c:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	07 c6       	rjmp	.+3086   	; 0x1370 <__stack+0xa71>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     762:	86 2f       	mov	r24, r22
     764:	82 95       	swap	r24
     766:	80 7f       	andi	r24, 0xF0	; 240
     768:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     76c:	80 91 ef 00 	lds	r24, 0x00EF
     770:	80 7c       	andi	r24, 0xC0	; 192
     772:	09 f0       	breq	.+2      	; 0x776 <can_cmd+0x56>
     774:	f9 c5       	rjmp	.+3058   	; 0x1368 <__stack+0xa69>
    {
      cmd->status = MOB_PENDING; 
     776:	80 e6       	ldi	r24, 0x60	; 96
     778:	19 96       	adiw	r26, 0x09	; 9
     77a:	8c 93       	st	X, r24
     77c:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     77e:	6c 93       	st	X, r22
      Can_clear_mob();
     780:	ee ee       	ldi	r30, 0xEE	; 238
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	11 92       	st	Z+, r1
     786:	e8 3f       	cpi	r30, 0xF8	; 248
     788:	f1 05       	cpc	r31, r1
     78a:	e1 f7       	brne	.-8      	; 0x784 <can_cmd+0x64>
          
      switch (cmd->cmd)
     78c:	11 96       	adiw	r26, 0x01	; 1
     78e:	4c 91       	ld	r20, X
     790:	11 97       	sbiw	r26, 0x01	; 1
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	fa 01       	movw	r30, r20
     796:	31 97       	sbiw	r30, 0x01	; 1
     798:	eb 30       	cpi	r30, 0x0B	; 11
     79a:	f1 05       	cpc	r31, r1
     79c:	08 f0       	brcs	.+2      	; 0x7a0 <can_cmd+0x80>
     79e:	e0 c5       	rjmp	.+3008   	; 0x1360 <__stack+0xa61>
     7a0:	e2 5c       	subi	r30, 0xC2	; 194
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     7a8:	16 96       	adiw	r26, 0x06	; 6
     7aa:	8c 91       	ld	r24, X
     7ac:	16 97       	sbiw	r26, 0x06	; 6
     7ae:	81 11       	cpse	r24, r1
     7b0:	b7 c4       	rjmp	.+2414   	; 0x1120 <__stack+0x821>
     7b2:	c8 c4       	rjmp	.+2448   	; 0x1144 <__stack+0x845>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7b4:	1b 96       	adiw	r26, 0x0b	; 11
     7b6:	8c 91       	ld	r24, X
     7b8:	1b 97       	sbiw	r26, 0x0b	; 11
     7ba:	88 23       	and	r24, r24
     7bc:	d9 f1       	breq	.+118    	; 0x834 <can_cmd+0x114>
     7be:	14 96       	adiw	r26, 0x04	; 4
     7c0:	9c 91       	ld	r25, X
     7c2:	14 97       	sbiw	r26, 0x04	; 4
     7c4:	92 95       	swap	r25
     7c6:	96 95       	lsr	r25
     7c8:	97 70       	andi	r25, 0x07	; 7
     7ca:	15 96       	adiw	r26, 0x05	; 5
     7cc:	8c 91       	ld	r24, X
     7ce:	15 97       	sbiw	r26, 0x05	; 5
     7d0:	88 0f       	add	r24, r24
     7d2:	88 0f       	add	r24, r24
     7d4:	88 0f       	add	r24, r24
     7d6:	89 0f       	add	r24, r25
     7d8:	80 93 f3 00 	sts	0x00F3, r24
     7dc:	13 96       	adiw	r26, 0x03	; 3
     7de:	9c 91       	ld	r25, X
     7e0:	13 97       	sbiw	r26, 0x03	; 3
     7e2:	92 95       	swap	r25
     7e4:	96 95       	lsr	r25
     7e6:	97 70       	andi	r25, 0x07	; 7
     7e8:	14 96       	adiw	r26, 0x04	; 4
     7ea:	8c 91       	ld	r24, X
     7ec:	14 97       	sbiw	r26, 0x04	; 4
     7ee:	88 0f       	add	r24, r24
     7f0:	88 0f       	add	r24, r24
     7f2:	88 0f       	add	r24, r24
     7f4:	89 0f       	add	r24, r25
     7f6:	80 93 f2 00 	sts	0x00F2, r24
     7fa:	12 96       	adiw	r26, 0x02	; 2
     7fc:	9c 91       	ld	r25, X
     7fe:	12 97       	sbiw	r26, 0x02	; 2
     800:	92 95       	swap	r25
     802:	96 95       	lsr	r25
     804:	97 70       	andi	r25, 0x07	; 7
     806:	13 96       	adiw	r26, 0x03	; 3
     808:	8c 91       	ld	r24, X
     80a:	13 97       	sbiw	r26, 0x03	; 3
     80c:	88 0f       	add	r24, r24
     80e:	88 0f       	add	r24, r24
     810:	88 0f       	add	r24, r24
     812:	89 0f       	add	r24, r25
     814:	80 93 f1 00 	sts	0x00F1, r24
     818:	12 96       	adiw	r26, 0x02	; 2
     81a:	8c 91       	ld	r24, X
     81c:	12 97       	sbiw	r26, 0x02	; 2
     81e:	88 0f       	add	r24, r24
     820:	88 0f       	add	r24, r24
     822:	88 0f       	add	r24, r24
     824:	80 93 f0 00 	sts	0x00F0, r24
     828:	ef ee       	ldi	r30, 0xEF	; 239
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	80 61       	ori	r24, 0x10	; 16
     830:	80 83       	st	Z, r24
     832:	1c c0       	rjmp	.+56     	; 0x86c <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     834:	12 96       	adiw	r26, 0x02	; 2
     836:	8c 91       	ld	r24, X
     838:	12 97       	sbiw	r26, 0x02	; 2
     83a:	86 95       	lsr	r24
     83c:	86 95       	lsr	r24
     83e:	86 95       	lsr	r24
     840:	13 96       	adiw	r26, 0x03	; 3
     842:	9c 91       	ld	r25, X
     844:	13 97       	sbiw	r26, 0x03	; 3
     846:	20 e2       	ldi	r18, 0x20	; 32
     848:	92 9f       	mul	r25, r18
     84a:	80 0d       	add	r24, r0
     84c:	11 24       	eor	r1, r1
     84e:	80 93 f3 00 	sts	0x00F3, r24
     852:	12 96       	adiw	r26, 0x02	; 2
     854:	8c 91       	ld	r24, X
     856:	12 97       	sbiw	r26, 0x02	; 2
     858:	82 95       	swap	r24
     85a:	88 0f       	add	r24, r24
     85c:	80 7e       	andi	r24, 0xE0	; 224
     85e:	80 93 f2 00 	sts	0x00F2, r24
     862:	ef ee       	ldi	r30, 0xEF	; 239
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	8f 7e       	andi	r24, 0xEF	; 239
     86a:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     86c:	16 96       	adiw	r26, 0x06	; 6
     86e:	8c 91       	ld	r24, X
     870:	16 97       	sbiw	r26, 0x06	; 6
     872:	88 23       	and	r24, r24
     874:	91 f0       	breq	.+36     	; 0x89a <can_cmd+0x17a>
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	8a ef       	ldi	r24, 0xFA	; 250
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	17 96       	adiw	r26, 0x07	; 7
     87e:	ed 91       	ld	r30, X+
     880:	fc 91       	ld	r31, X
     882:	18 97       	sbiw	r26, 0x08	; 8
     884:	e2 0f       	add	r30, r18
     886:	f1 1d       	adc	r31, r1
     888:	30 81       	ld	r19, Z
     88a:	fc 01       	movw	r30, r24
     88c:	30 83       	st	Z, r19
     88e:	2f 5f       	subi	r18, 0xFF	; 255
     890:	16 96       	adiw	r26, 0x06	; 6
     892:	3c 91       	ld	r19, X
     894:	16 97       	sbiw	r26, 0x06	; 6
     896:	23 17       	cp	r18, r19
     898:	88 f3       	brcs	.-30     	; 0x87c <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     89a:	1a 96       	adiw	r26, 0x0a	; 10
     89c:	8c 91       	ld	r24, X
     89e:	1a 97       	sbiw	r26, 0x0a	; 10
     8a0:	88 23       	and	r24, r24
     8a2:	31 f0       	breq	.+12     	; 0x8b0 <can_cmd+0x190>
     8a4:	e0 ef       	ldi	r30, 0xF0	; 240
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	84 60       	ori	r24, 0x04	; 4
     8ac:	80 83       	st	Z, r24
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <can_cmd+0x19a>
            else Can_clear_rtr();    
     8b0:	e0 ef       	ldi	r30, 0xF0	; 240
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	80 81       	ld	r24, Z
     8b6:	8b 7f       	andi	r24, 0xFB	; 251
     8b8:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     8ba:	ef ee       	ldi	r30, 0xEF	; 239
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	90 81       	ld	r25, Z
     8c0:	16 96       	adiw	r26, 0x06	; 6
     8c2:	8c 91       	ld	r24, X
     8c4:	89 2b       	or	r24, r25
     8c6:	80 83       	st	Z, r24
          Can_config_tx();
     8c8:	80 81       	ld	r24, Z
     8ca:	8f 73       	andi	r24, 0x3F	; 63
     8cc:	80 83       	st	Z, r24
     8ce:	80 81       	ld	r24, Z
     8d0:	80 64       	ori	r24, 0x40	; 64
     8d2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8d4:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     8d6:	4c c5       	rjmp	.+2712   	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8d8:	1b 96       	adiw	r26, 0x0b	; 11
     8da:	8c 91       	ld	r24, X
     8dc:	1b 97       	sbiw	r26, 0x0b	; 11
     8de:	88 23       	and	r24, r24
     8e0:	d9 f1       	breq	.+118    	; 0x958 <__stack+0x59>
     8e2:	14 96       	adiw	r26, 0x04	; 4
     8e4:	9c 91       	ld	r25, X
     8e6:	14 97       	sbiw	r26, 0x04	; 4
     8e8:	92 95       	swap	r25
     8ea:	96 95       	lsr	r25
     8ec:	97 70       	andi	r25, 0x07	; 7
     8ee:	15 96       	adiw	r26, 0x05	; 5
     8f0:	8c 91       	ld	r24, X
     8f2:	15 97       	sbiw	r26, 0x05	; 5
     8f4:	88 0f       	add	r24, r24
     8f6:	88 0f       	add	r24, r24
     8f8:	88 0f       	add	r24, r24
     8fa:	89 0f       	add	r24, r25
     8fc:	80 93 f3 00 	sts	0x00F3, r24
     900:	13 96       	adiw	r26, 0x03	; 3
     902:	9c 91       	ld	r25, X
     904:	13 97       	sbiw	r26, 0x03	; 3
     906:	92 95       	swap	r25
     908:	96 95       	lsr	r25
     90a:	97 70       	andi	r25, 0x07	; 7
     90c:	14 96       	adiw	r26, 0x04	; 4
     90e:	8c 91       	ld	r24, X
     910:	14 97       	sbiw	r26, 0x04	; 4
     912:	88 0f       	add	r24, r24
     914:	88 0f       	add	r24, r24
     916:	88 0f       	add	r24, r24
     918:	89 0f       	add	r24, r25
     91a:	80 93 f2 00 	sts	0x00F2, r24
     91e:	12 96       	adiw	r26, 0x02	; 2
     920:	9c 91       	ld	r25, X
     922:	12 97       	sbiw	r26, 0x02	; 2
     924:	92 95       	swap	r25
     926:	96 95       	lsr	r25
     928:	97 70       	andi	r25, 0x07	; 7
     92a:	13 96       	adiw	r26, 0x03	; 3
     92c:	8c 91       	ld	r24, X
     92e:	13 97       	sbiw	r26, 0x03	; 3
     930:	88 0f       	add	r24, r24
     932:	88 0f       	add	r24, r24
     934:	88 0f       	add	r24, r24
     936:	89 0f       	add	r24, r25
     938:	80 93 f1 00 	sts	0x00F1, r24
     93c:	12 96       	adiw	r26, 0x02	; 2
     93e:	8c 91       	ld	r24, X
     940:	12 97       	sbiw	r26, 0x02	; 2
     942:	88 0f       	add	r24, r24
     944:	88 0f       	add	r24, r24
     946:	88 0f       	add	r24, r24
     948:	80 93 f0 00 	sts	0x00F0, r24
     94c:	ef ee       	ldi	r30, 0xEF	; 239
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	80 61       	ori	r24, 0x10	; 16
     954:	80 83       	st	Z, r24
     956:	1c c0       	rjmp	.+56     	; 0x990 <__stack+0x91>
          else              { Can_set_std_id(cmd->id.std);}
     958:	12 96       	adiw	r26, 0x02	; 2
     95a:	8c 91       	ld	r24, X
     95c:	12 97       	sbiw	r26, 0x02	; 2
     95e:	86 95       	lsr	r24
     960:	86 95       	lsr	r24
     962:	86 95       	lsr	r24
     964:	13 96       	adiw	r26, 0x03	; 3
     966:	9c 91       	ld	r25, X
     968:	13 97       	sbiw	r26, 0x03	; 3
     96a:	f0 e2       	ldi	r31, 0x20	; 32
     96c:	9f 9f       	mul	r25, r31
     96e:	80 0d       	add	r24, r0
     970:	11 24       	eor	r1, r1
     972:	80 93 f3 00 	sts	0x00F3, r24
     976:	12 96       	adiw	r26, 0x02	; 2
     978:	8c 91       	ld	r24, X
     97a:	12 97       	sbiw	r26, 0x02	; 2
     97c:	82 95       	swap	r24
     97e:	88 0f       	add	r24, r24
     980:	80 7e       	andi	r24, 0xE0	; 224
     982:	80 93 f2 00 	sts	0x00F2, r24
     986:	ef ee       	ldi	r30, 0xEF	; 239
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	8f 7e       	andi	r24, 0xEF	; 239
     98e:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     990:	16 96       	adiw	r26, 0x06	; 6
     992:	8c 91       	ld	r24, X
     994:	16 97       	sbiw	r26, 0x06	; 6
     996:	88 23       	and	r24, r24
     998:	91 f0       	breq	.+36     	; 0x9be <__stack+0xbf>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	8a ef       	ldi	r24, 0xFA	; 250
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	17 96       	adiw	r26, 0x07	; 7
     9a2:	ed 91       	ld	r30, X+
     9a4:	fc 91       	ld	r31, X
     9a6:	18 97       	sbiw	r26, 0x08	; 8
     9a8:	e2 0f       	add	r30, r18
     9aa:	f1 1d       	adc	r31, r1
     9ac:	30 81       	ld	r19, Z
     9ae:	fc 01       	movw	r30, r24
     9b0:	30 83       	st	Z, r19
     9b2:	2f 5f       	subi	r18, 0xFF	; 255
     9b4:	16 96       	adiw	r26, 0x06	; 6
     9b6:	3c 91       	ld	r19, X
     9b8:	16 97       	sbiw	r26, 0x06	; 6
     9ba:	23 17       	cp	r18, r19
     9bc:	88 f3       	brcs	.-30     	; 0x9a0 <__stack+0xa1>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     9be:	1a 96       	adiw	r26, 0x0a	; 10
     9c0:	1c 92       	st	X, r1
     9c2:	1a 97       	sbiw	r26, 0x0a	; 10
     9c4:	e0 ef       	ldi	r30, 0xF0	; 240
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	8b 7f       	andi	r24, 0xFB	; 251
     9cc:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     9ce:	ef ee       	ldi	r30, 0xEF	; 239
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	90 81       	ld	r25, Z
     9d4:	16 96       	adiw	r26, 0x06	; 6
     9d6:	8c 91       	ld	r24, X
     9d8:	89 2b       	or	r24, r25
     9da:	80 83       	st	Z, r24
          Can_config_tx();
     9dc:	80 81       	ld	r24, Z
     9de:	8f 73       	andi	r24, 0x3F	; 63
     9e0:	80 83       	st	Z, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	80 64       	ori	r24, 0x40	; 64
     9e6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     9ea:	c2 c4       	rjmp	.+2436   	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     9ec:	1b 96       	adiw	r26, 0x0b	; 11
     9ee:	8c 91       	ld	r24, X
     9f0:	1b 97       	sbiw	r26, 0x0b	; 11
     9f2:	88 23       	and	r24, r24
     9f4:	d9 f1       	breq	.+118    	; 0xa6c <__stack+0x16d>
     9f6:	14 96       	adiw	r26, 0x04	; 4
     9f8:	9c 91       	ld	r25, X
     9fa:	14 97       	sbiw	r26, 0x04	; 4
     9fc:	92 95       	swap	r25
     9fe:	96 95       	lsr	r25
     a00:	97 70       	andi	r25, 0x07	; 7
     a02:	15 96       	adiw	r26, 0x05	; 5
     a04:	8c 91       	ld	r24, X
     a06:	15 97       	sbiw	r26, 0x05	; 5
     a08:	88 0f       	add	r24, r24
     a0a:	88 0f       	add	r24, r24
     a0c:	88 0f       	add	r24, r24
     a0e:	89 0f       	add	r24, r25
     a10:	80 93 f3 00 	sts	0x00F3, r24
     a14:	13 96       	adiw	r26, 0x03	; 3
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	92 95       	swap	r25
     a1c:	96 95       	lsr	r25
     a1e:	97 70       	andi	r25, 0x07	; 7
     a20:	14 96       	adiw	r26, 0x04	; 4
     a22:	8c 91       	ld	r24, X
     a24:	14 97       	sbiw	r26, 0x04	; 4
     a26:	88 0f       	add	r24, r24
     a28:	88 0f       	add	r24, r24
     a2a:	88 0f       	add	r24, r24
     a2c:	89 0f       	add	r24, r25
     a2e:	80 93 f2 00 	sts	0x00F2, r24
     a32:	12 96       	adiw	r26, 0x02	; 2
     a34:	9c 91       	ld	r25, X
     a36:	12 97       	sbiw	r26, 0x02	; 2
     a38:	92 95       	swap	r25
     a3a:	96 95       	lsr	r25
     a3c:	97 70       	andi	r25, 0x07	; 7
     a3e:	13 96       	adiw	r26, 0x03	; 3
     a40:	8c 91       	ld	r24, X
     a42:	13 97       	sbiw	r26, 0x03	; 3
     a44:	88 0f       	add	r24, r24
     a46:	88 0f       	add	r24, r24
     a48:	88 0f       	add	r24, r24
     a4a:	89 0f       	add	r24, r25
     a4c:	80 93 f1 00 	sts	0x00F1, r24
     a50:	12 96       	adiw	r26, 0x02	; 2
     a52:	8c 91       	ld	r24, X
     a54:	12 97       	sbiw	r26, 0x02	; 2
     a56:	88 0f       	add	r24, r24
     a58:	88 0f       	add	r24, r24
     a5a:	88 0f       	add	r24, r24
     a5c:	80 93 f0 00 	sts	0x00F0, r24
     a60:	ef ee       	ldi	r30, 0xEF	; 239
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	80 61       	ori	r24, 0x10	; 16
     a68:	80 83       	st	Z, r24
     a6a:	1c c0       	rjmp	.+56     	; 0xaa4 <__stack+0x1a5>
          else              { Can_set_std_id(cmd->id.std);}
     a6c:	12 96       	adiw	r26, 0x02	; 2
     a6e:	8c 91       	ld	r24, X
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	86 95       	lsr	r24
     a74:	86 95       	lsr	r24
     a76:	86 95       	lsr	r24
     a78:	13 96       	adiw	r26, 0x03	; 3
     a7a:	9c 91       	ld	r25, X
     a7c:	13 97       	sbiw	r26, 0x03	; 3
     a7e:	f0 e2       	ldi	r31, 0x20	; 32
     a80:	9f 9f       	mul	r25, r31
     a82:	80 0d       	add	r24, r0
     a84:	11 24       	eor	r1, r1
     a86:	80 93 f3 00 	sts	0x00F3, r24
     a8a:	12 96       	adiw	r26, 0x02	; 2
     a8c:	8c 91       	ld	r24, X
     a8e:	12 97       	sbiw	r26, 0x02	; 2
     a90:	82 95       	swap	r24
     a92:	88 0f       	add	r24, r24
     a94:	80 7e       	andi	r24, 0xE0	; 224
     a96:	80 93 f2 00 	sts	0x00F2, r24
     a9a:	ef ee       	ldi	r30, 0xEF	; 239
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	80 81       	ld	r24, Z
     aa0:	8f 7e       	andi	r24, 0xEF	; 239
     aa2:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	1a 96       	adiw	r26, 0x0a	; 10
     aa8:	8c 93       	st	X, r24
     aaa:	1a 97       	sbiw	r26, 0x0a	; 10
     aac:	e0 ef       	ldi	r30, 0xF0	; 240
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	84 60       	ori	r24, 0x04	; 4
     ab4:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     ab6:	ef ee       	ldi	r30, 0xEF	; 239
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	90 81       	ld	r25, Z
     abc:	16 96       	adiw	r26, 0x06	; 6
     abe:	8c 91       	ld	r24, X
     ac0:	89 2b       	or	r24, r25
     ac2:	80 83       	st	Z, r24
          Can_config_tx();
     ac4:	80 81       	ld	r24, Z
     ac6:	8f 73       	andi	r24, 0x3F	; 63
     ac8:	80 83       	st	Z, r24
     aca:	80 81       	ld	r24, Z
     acc:	80 64       	ori	r24, 0x40	; 64
     ace:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ad0:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     ad2:	4e c4       	rjmp	.+2204   	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     ad4:	19 82       	std	Y+1, r1	; 0x01
     ad6:	9b 81       	ldd	r25, Y+3	; 0x03
     ad8:	92 95       	swap	r25
     ada:	96 95       	lsr	r25
     adc:	97 70       	andi	r25, 0x07	; 7
     ade:	8c 81       	ldd	r24, Y+4	; 0x04
     ae0:	88 0f       	add	r24, r24
     ae2:	88 0f       	add	r24, r24
     ae4:	88 0f       	add	r24, r24
     ae6:	89 0f       	add	r24, r25
     ae8:	80 93 f7 00 	sts	0x00F7, r24
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	92 95       	swap	r25
     af0:	96 95       	lsr	r25
     af2:	97 70       	andi	r25, 0x07	; 7
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	88 0f       	add	r24, r24
     af8:	88 0f       	add	r24, r24
     afa:	88 0f       	add	r24, r24
     afc:	89 0f       	add	r24, r25
     afe:	80 93 f6 00 	sts	0x00F6, r24
     b02:	99 81       	ldd	r25, Y+1	; 0x01
     b04:	92 95       	swap	r25
     b06:	96 95       	lsr	r25
     b08:	97 70       	andi	r25, 0x07	; 7
     b0a:	8a 81       	ldd	r24, Y+2	; 0x02
     b0c:	88 0f       	add	r24, r24
     b0e:	88 0f       	add	r24, r24
     b10:	88 0f       	add	r24, r24
     b12:	89 0f       	add	r24, r25
     b14:	80 93 f5 00 	sts	0x00F5, r24
     b18:	29 81       	ldd	r18, Y+1	; 0x01
     b1a:	22 0f       	add	r18, r18
     b1c:	22 0f       	add	r18, r18
     b1e:	22 0f       	add	r18, r18
     b20:	84 ef       	ldi	r24, 0xF4	; 244
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b28:	ef ee       	ldi	r30, 0xEF	; 239
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	30 81       	ld	r19, Z
     b2e:	16 96       	adiw	r26, 0x06	; 6
     b30:	2c 91       	ld	r18, X
     b32:	23 2b       	or	r18, r19
     b34:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b36:	dc 01       	movw	r26, r24
     b38:	2c 91       	ld	r18, X
     b3a:	2b 7f       	andi	r18, 0xFB	; 251
     b3c:	2c 93       	st	X, r18
          Can_clear_idemsk();
     b3e:	2c 91       	ld	r18, X
     b40:	2e 7f       	andi	r18, 0xFE	; 254
     b42:	2c 93       	st	X, r18
          Can_config_rx();       
     b44:	80 81       	ld	r24, Z
     b46:	8f 73       	andi	r24, 0x3F	; 63
     b48:	80 83       	st	Z, r24
     b4a:	80 81       	ld	r24, Z
     b4c:	80 68       	ori	r24, 0x80	; 128
     b4e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b50:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     b52:	0e c4       	rjmp	.+2076   	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	82 95       	swap	r24
     b5c:	88 0f       	add	r24, r24
     b5e:	80 7e       	andi	r24, 0xE0	; 224
     b60:	81 5e       	subi	r24, 0xE1	; 225
     b62:	27 ef       	ldi	r18, 0xF7	; 247
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	f9 01       	movw	r30, r18
     b68:	80 83       	st	Z, r24
     b6a:	49 81       	ldd	r20, Y+1	; 0x01
     b6c:	42 95       	swap	r20
     b6e:	44 0f       	add	r20, r20
     b70:	40 7e       	andi	r20, 0xE0	; 224
     b72:	86 ef       	ldi	r24, 0xF6	; 246
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	fc 01       	movw	r30, r24
     b78:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     b7a:	12 96       	adiw	r26, 0x02	; 2
     b7c:	4c 91       	ld	r20, X
     b7e:	12 97       	sbiw	r26, 0x02	; 2
     b80:	46 95       	lsr	r20
     b82:	46 95       	lsr	r20
     b84:	46 95       	lsr	r20
     b86:	13 96       	adiw	r26, 0x03	; 3
     b88:	5c 91       	ld	r21, X
     b8a:	13 97       	sbiw	r26, 0x03	; 3
     b8c:	f0 e2       	ldi	r31, 0x20	; 32
     b8e:	5f 9f       	mul	r21, r31
     b90:	40 0d       	add	r20, r0
     b92:	11 24       	eor	r1, r1
     b94:	40 93 f3 00 	sts	0x00F3, r20
     b98:	12 96       	adiw	r26, 0x02	; 2
     b9a:	4c 91       	ld	r20, X
     b9c:	12 97       	sbiw	r26, 0x02	; 2
     b9e:	42 95       	swap	r20
     ba0:	44 0f       	add	r20, r20
     ba2:	40 7e       	andi	r20, 0xE0	; 224
     ba4:	40 93 f2 00 	sts	0x00F2, r20
     ba8:	6f ee       	ldi	r22, 0xEF	; 239
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	fb 01       	movw	r30, r22
     bae:	40 81       	ld	r20, Z
     bb0:	4f 7e       	andi	r20, 0xEF	; 239
     bb2:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     bb4:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     bb6:	5b 81       	ldd	r21, Y+3	; 0x03
     bb8:	52 95       	swap	r21
     bba:	56 95       	lsr	r21
     bbc:	57 70       	andi	r21, 0x07	; 7
     bbe:	4c 81       	ldd	r20, Y+4	; 0x04
     bc0:	44 0f       	add	r20, r20
     bc2:	44 0f       	add	r20, r20
     bc4:	44 0f       	add	r20, r20
     bc6:	45 0f       	add	r20, r21
     bc8:	f9 01       	movw	r30, r18
     bca:	40 83       	st	Z, r20
     bcc:	3a 81       	ldd	r19, Y+2	; 0x02
     bce:	32 95       	swap	r19
     bd0:	36 95       	lsr	r19
     bd2:	37 70       	andi	r19, 0x07	; 7
     bd4:	2b 81       	ldd	r18, Y+3	; 0x03
     bd6:	22 0f       	add	r18, r18
     bd8:	22 0f       	add	r18, r18
     bda:	22 0f       	add	r18, r18
     bdc:	23 0f       	add	r18, r19
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
     be2:	99 81       	ldd	r25, Y+1	; 0x01
     be4:	92 95       	swap	r25
     be6:	96 95       	lsr	r25
     be8:	97 70       	andi	r25, 0x07	; 7
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	88 0f       	add	r24, r24
     bee:	88 0f       	add	r24, r24
     bf0:	88 0f       	add	r24, r24
     bf2:	89 0f       	add	r24, r25
     bf4:	80 93 f5 00 	sts	0x00F5, r24
     bf8:	29 81       	ldd	r18, Y+1	; 0x01
     bfa:	22 0f       	add	r18, r18
     bfc:	22 0f       	add	r18, r18
     bfe:	22 0f       	add	r18, r18
     c00:	84 ef       	ldi	r24, 0xF4	; 244
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	fc 01       	movw	r30, r24
     c06:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     c08:	fb 01       	movw	r30, r22
     c0a:	30 81       	ld	r19, Z
     c0c:	16 96       	adiw	r26, 0x06	; 6
     c0e:	2c 91       	ld	r18, X
     c10:	16 97       	sbiw	r26, 0x06	; 6
     c12:	23 2b       	or	r18, r19
     c14:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     c16:	1a 96       	adiw	r26, 0x0a	; 10
     c18:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     c1a:	dc 01       	movw	r26, r24
     c1c:	2c 91       	ld	r18, X
     c1e:	24 60       	ori	r18, 0x04	; 4
     c20:	2c 93       	st	X, r18
		  Can_clear_rtr();
     c22:	a0 ef       	ldi	r26, 0xF0	; 240
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	2c 91       	ld	r18, X
     c28:	2b 7f       	andi	r18, 0xFB	; 251
     c2a:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     c2c:	20 81       	ld	r18, Z
     c2e:	2f 7e       	andi	r18, 0xEF	; 239
     c30:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c32:	fc 01       	movw	r30, r24
     c34:	20 81       	ld	r18, Z
     c36:	2e 7f       	andi	r18, 0xFE	; 254
     c38:	20 83       	st	Z, r18
          Can_config_rx();       
     c3a:	db 01       	movw	r26, r22
     c3c:	8c 91       	ld	r24, X
     c3e:	8f 73       	andi	r24, 0x3F	; 63
     c40:	8c 93       	st	X, r24
     c42:	8c 91       	ld	r24, X
     c44:	80 68       	ori	r24, 0x80	; 128
     c46:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c48:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     c4a:	92 c3       	rjmp	.+1828   	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	82 95       	swap	r24
     c54:	88 0f       	add	r24, r24
     c56:	80 7e       	andi	r24, 0xE0	; 224
     c58:	81 5e       	subi	r24, 0xE1	; 225
     c5a:	27 ef       	ldi	r18, 0xF7	; 247
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	f9 01       	movw	r30, r18
     c60:	80 83       	st	Z, r24
     c62:	49 81       	ldd	r20, Y+1	; 0x01
     c64:	42 95       	swap	r20
     c66:	44 0f       	add	r20, r20
     c68:	40 7e       	andi	r20, 0xE0	; 224
     c6a:	86 ef       	ldi	r24, 0xF6	; 246
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fc 01       	movw	r30, r24
     c70:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     c72:	12 96       	adiw	r26, 0x02	; 2
     c74:	4c 91       	ld	r20, X
     c76:	12 97       	sbiw	r26, 0x02	; 2
     c78:	46 95       	lsr	r20
     c7a:	46 95       	lsr	r20
     c7c:	46 95       	lsr	r20
     c7e:	13 96       	adiw	r26, 0x03	; 3
     c80:	5c 91       	ld	r21, X
     c82:	13 97       	sbiw	r26, 0x03	; 3
     c84:	f0 e2       	ldi	r31, 0x20	; 32
     c86:	5f 9f       	mul	r21, r31
     c88:	40 0d       	add	r20, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	40 93 f3 00 	sts	0x00F3, r20
     c90:	12 96       	adiw	r26, 0x02	; 2
     c92:	4c 91       	ld	r20, X
     c94:	12 97       	sbiw	r26, 0x02	; 2
     c96:	42 95       	swap	r20
     c98:	44 0f       	add	r20, r20
     c9a:	40 7e       	andi	r20, 0xE0	; 224
     c9c:	40 93 f2 00 	sts	0x00F2, r20
     ca0:	6f ee       	ldi	r22, 0xEF	; 239
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	fb 01       	movw	r30, r22
     ca6:	40 81       	ld	r20, Z
     ca8:	4f 7e       	andi	r20, 0xEF	; 239
     caa:	40 83       	st	Z, r20
		
          u8_temp=0; 
     cac:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     cae:	5b 81       	ldd	r21, Y+3	; 0x03
     cb0:	52 95       	swap	r21
     cb2:	56 95       	lsr	r21
     cb4:	57 70       	andi	r21, 0x07	; 7
     cb6:	4c 81       	ldd	r20, Y+4	; 0x04
     cb8:	44 0f       	add	r20, r20
     cba:	44 0f       	add	r20, r20
     cbc:	44 0f       	add	r20, r20
     cbe:	45 0f       	add	r20, r21
     cc0:	f9 01       	movw	r30, r18
     cc2:	40 83       	st	Z, r20
     cc4:	3a 81       	ldd	r19, Y+2	; 0x02
     cc6:	32 95       	swap	r19
     cc8:	36 95       	lsr	r19
     cca:	37 70       	andi	r19, 0x07	; 7
     ccc:	2b 81       	ldd	r18, Y+3	; 0x03
     cce:	22 0f       	add	r18, r18
     cd0:	22 0f       	add	r18, r18
     cd2:	22 0f       	add	r18, r18
     cd4:	23 0f       	add	r18, r19
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18
     cda:	99 81       	ldd	r25, Y+1	; 0x01
     cdc:	92 95       	swap	r25
     cde:	96 95       	lsr	r25
     ce0:	97 70       	andi	r25, 0x07	; 7
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	88 0f       	add	r24, r24
     ce6:	88 0f       	add	r24, r24
     ce8:	88 0f       	add	r24, r24
     cea:	89 0f       	add	r24, r25
     cec:	80 93 f5 00 	sts	0x00F5, r24
     cf0:	29 81       	ldd	r18, Y+1	; 0x01
     cf2:	22 0f       	add	r18, r18
     cf4:	22 0f       	add	r18, r18
     cf6:	22 0f       	add	r18, r18
     cf8:	84 ef       	ldi	r24, 0xF4	; 244
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	fc 01       	movw	r30, r24
     cfe:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d00:	fb 01       	movw	r30, r22
     d02:	30 81       	ld	r19, Z
     d04:	16 96       	adiw	r26, 0x06	; 6
     d06:	2c 91       	ld	r18, X
     d08:	16 97       	sbiw	r26, 0x06	; 6
     d0a:	23 2b       	or	r18, r19
     d0c:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	1a 96       	adiw	r26, 0x0a	; 10
     d12:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     d14:	dc 01       	movw	r26, r24
     d16:	2c 91       	ld	r18, X
     d18:	24 60       	ori	r18, 0x04	; 4
     d1a:	2c 93       	st	X, r18
		  Can_set_rtr();
     d1c:	a0 ef       	ldi	r26, 0xF0	; 240
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	2c 91       	ld	r18, X
     d22:	24 60       	ori	r18, 0x04	; 4
     d24:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     d26:	20 81       	ld	r18, Z
     d28:	2f 7d       	andi	r18, 0xDF	; 223
     d2a:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 81       	ld	r18, Z
     d30:	2e 7f       	andi	r18, 0xFE	; 254
     d32:	20 83       	st	Z, r18
          Can_config_rx();       
     d34:	db 01       	movw	r26, r22
     d36:	8c 91       	ld	r24, X
     d38:	8f 73       	andi	r24, 0x3F	; 63
     d3a:	8c 93       	st	X, r24
     d3c:	8c 91       	ld	r24, X
     d3e:	80 68       	ori	r24, 0x80	; 128
     d40:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d42:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     d44:	15 c3       	rjmp	.+1578   	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d46:	1b 96       	adiw	r26, 0x0b	; 11
     d48:	8c 91       	ld	r24, X
     d4a:	1b 97       	sbiw	r26, 0x0b	; 11
     d4c:	88 23       	and	r24, r24
     d4e:	d9 f1       	breq	.+118    	; 0xdc6 <__stack+0x4c7>
     d50:	14 96       	adiw	r26, 0x04	; 4
     d52:	9c 91       	ld	r25, X
     d54:	14 97       	sbiw	r26, 0x04	; 4
     d56:	92 95       	swap	r25
     d58:	96 95       	lsr	r25
     d5a:	97 70       	andi	r25, 0x07	; 7
     d5c:	15 96       	adiw	r26, 0x05	; 5
     d5e:	8c 91       	ld	r24, X
     d60:	15 97       	sbiw	r26, 0x05	; 5
     d62:	88 0f       	add	r24, r24
     d64:	88 0f       	add	r24, r24
     d66:	88 0f       	add	r24, r24
     d68:	89 0f       	add	r24, r25
     d6a:	80 93 f3 00 	sts	0x00F3, r24
     d6e:	13 96       	adiw	r26, 0x03	; 3
     d70:	9c 91       	ld	r25, X
     d72:	13 97       	sbiw	r26, 0x03	; 3
     d74:	92 95       	swap	r25
     d76:	96 95       	lsr	r25
     d78:	97 70       	andi	r25, 0x07	; 7
     d7a:	14 96       	adiw	r26, 0x04	; 4
     d7c:	8c 91       	ld	r24, X
     d7e:	14 97       	sbiw	r26, 0x04	; 4
     d80:	88 0f       	add	r24, r24
     d82:	88 0f       	add	r24, r24
     d84:	88 0f       	add	r24, r24
     d86:	89 0f       	add	r24, r25
     d88:	80 93 f2 00 	sts	0x00F2, r24
     d8c:	12 96       	adiw	r26, 0x02	; 2
     d8e:	9c 91       	ld	r25, X
     d90:	12 97       	sbiw	r26, 0x02	; 2
     d92:	92 95       	swap	r25
     d94:	96 95       	lsr	r25
     d96:	97 70       	andi	r25, 0x07	; 7
     d98:	13 96       	adiw	r26, 0x03	; 3
     d9a:	8c 91       	ld	r24, X
     d9c:	13 97       	sbiw	r26, 0x03	; 3
     d9e:	88 0f       	add	r24, r24
     da0:	88 0f       	add	r24, r24
     da2:	88 0f       	add	r24, r24
     da4:	89 0f       	add	r24, r25
     da6:	80 93 f1 00 	sts	0x00F1, r24
     daa:	12 96       	adiw	r26, 0x02	; 2
     dac:	8c 91       	ld	r24, X
     dae:	12 97       	sbiw	r26, 0x02	; 2
     db0:	88 0f       	add	r24, r24
     db2:	88 0f       	add	r24, r24
     db4:	88 0f       	add	r24, r24
     db6:	80 93 f0 00 	sts	0x00F0, r24
     dba:	ef ee       	ldi	r30, 0xEF	; 239
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	80 61       	ori	r24, 0x10	; 16
     dc2:	80 83       	st	Z, r24
     dc4:	1c c0       	rjmp	.+56     	; 0xdfe <__stack+0x4ff>
          else              { Can_set_std_id(cmd->id.std);}
     dc6:	12 96       	adiw	r26, 0x02	; 2
     dc8:	8c 91       	ld	r24, X
     dca:	12 97       	sbiw	r26, 0x02	; 2
     dcc:	86 95       	lsr	r24
     dce:	86 95       	lsr	r24
     dd0:	86 95       	lsr	r24
     dd2:	13 96       	adiw	r26, 0x03	; 3
     dd4:	9c 91       	ld	r25, X
     dd6:	13 97       	sbiw	r26, 0x03	; 3
     dd8:	e0 e2       	ldi	r30, 0x20	; 32
     dda:	9e 9f       	mul	r25, r30
     ddc:	80 0d       	add	r24, r0
     dde:	11 24       	eor	r1, r1
     de0:	80 93 f3 00 	sts	0x00F3, r24
     de4:	12 96       	adiw	r26, 0x02	; 2
     de6:	8c 91       	ld	r24, X
     de8:	12 97       	sbiw	r26, 0x02	; 2
     dea:	82 95       	swap	r24
     dec:	88 0f       	add	r24, r24
     dee:	80 7e       	andi	r24, 0xE0	; 224
     df0:	80 93 f2 00 	sts	0x00F2, r24
     df4:	ef ee       	ldi	r30, 0xEF	; 239
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8f 7e       	andi	r24, 0xEF	; 239
     dfc:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	9b 81       	ldd	r25, Y+3	; 0x03
     e04:	92 95       	swap	r25
     e06:	96 95       	lsr	r25
     e08:	97 70       	andi	r25, 0x07	; 7
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	88 0f       	add	r24, r24
     e0e:	88 0f       	add	r24, r24
     e10:	88 0f       	add	r24, r24
     e12:	89 0f       	add	r24, r25
     e14:	80 93 f7 00 	sts	0x00F7, r24
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	92 95       	swap	r25
     e1c:	96 95       	lsr	r25
     e1e:	97 70       	andi	r25, 0x07	; 7
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	88 0f       	add	r24, r24
     e24:	88 0f       	add	r24, r24
     e26:	88 0f       	add	r24, r24
     e28:	89 0f       	add	r24, r25
     e2a:	80 93 f6 00 	sts	0x00F6, r24
     e2e:	99 81       	ldd	r25, Y+1	; 0x01
     e30:	92 95       	swap	r25
     e32:	96 95       	lsr	r25
     e34:	97 70       	andi	r25, 0x07	; 7
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	88 0f       	add	r24, r24
     e3a:	88 0f       	add	r24, r24
     e3c:	88 0f       	add	r24, r24
     e3e:	89 0f       	add	r24, r25
     e40:	80 93 f5 00 	sts	0x00F5, r24
     e44:	29 81       	ldd	r18, Y+1	; 0x01
     e46:	22 0f       	add	r18, r18
     e48:	22 0f       	add	r18, r18
     e4a:	22 0f       	add	r18, r18
     e4c:	84 ef       	ldi	r24, 0xF4	; 244
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     e54:	ef ee       	ldi	r30, 0xEF	; 239
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	30 81       	ld	r19, Z
     e5a:	16 96       	adiw	r26, 0x06	; 6
     e5c:	2c 91       	ld	r18, X
     e5e:	23 2b       	or	r18, r19
     e60:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     e62:	dc 01       	movw	r26, r24
     e64:	2c 91       	ld	r18, X
     e66:	2b 7f       	andi	r18, 0xFB	; 251
     e68:	2c 93       	st	X, r18
          Can_set_idemsk();
     e6a:	2c 91       	ld	r18, X
     e6c:	21 60       	ori	r18, 0x01	; 1
     e6e:	2c 93       	st	X, r18
          Can_config_rx();       
     e70:	80 81       	ld	r24, Z
     e72:	8f 73       	andi	r24, 0x3F	; 63
     e74:	80 83       	st	Z, r24
     e76:	80 81       	ld	r24, Z
     e78:	80 68       	ori	r24, 0x80	; 128
     e7a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e7c:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     e7e:	78 c2       	rjmp	.+1264   	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     e80:	1b 96       	adiw	r26, 0x0b	; 11
     e82:	8c 91       	ld	r24, X
     e84:	1b 97       	sbiw	r26, 0x0b	; 11
     e86:	88 23       	and	r24, r24
     e88:	d9 f1       	breq	.+118    	; 0xf00 <__stack+0x601>
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	9c 91       	ld	r25, X
     e8e:	14 97       	sbiw	r26, 0x04	; 4
     e90:	92 95       	swap	r25
     e92:	96 95       	lsr	r25
     e94:	97 70       	andi	r25, 0x07	; 7
     e96:	15 96       	adiw	r26, 0x05	; 5
     e98:	8c 91       	ld	r24, X
     e9a:	15 97       	sbiw	r26, 0x05	; 5
     e9c:	88 0f       	add	r24, r24
     e9e:	88 0f       	add	r24, r24
     ea0:	88 0f       	add	r24, r24
     ea2:	89 0f       	add	r24, r25
     ea4:	80 93 f3 00 	sts	0x00F3, r24
     ea8:	13 96       	adiw	r26, 0x03	; 3
     eaa:	9c 91       	ld	r25, X
     eac:	13 97       	sbiw	r26, 0x03	; 3
     eae:	92 95       	swap	r25
     eb0:	96 95       	lsr	r25
     eb2:	97 70       	andi	r25, 0x07	; 7
     eb4:	14 96       	adiw	r26, 0x04	; 4
     eb6:	8c 91       	ld	r24, X
     eb8:	14 97       	sbiw	r26, 0x04	; 4
     eba:	88 0f       	add	r24, r24
     ebc:	88 0f       	add	r24, r24
     ebe:	88 0f       	add	r24, r24
     ec0:	89 0f       	add	r24, r25
     ec2:	80 93 f2 00 	sts	0x00F2, r24
     ec6:	12 96       	adiw	r26, 0x02	; 2
     ec8:	9c 91       	ld	r25, X
     eca:	12 97       	sbiw	r26, 0x02	; 2
     ecc:	92 95       	swap	r25
     ece:	96 95       	lsr	r25
     ed0:	97 70       	andi	r25, 0x07	; 7
     ed2:	13 96       	adiw	r26, 0x03	; 3
     ed4:	8c 91       	ld	r24, X
     ed6:	13 97       	sbiw	r26, 0x03	; 3
     ed8:	88 0f       	add	r24, r24
     eda:	88 0f       	add	r24, r24
     edc:	88 0f       	add	r24, r24
     ede:	89 0f       	add	r24, r25
     ee0:	80 93 f1 00 	sts	0x00F1, r24
     ee4:	12 96       	adiw	r26, 0x02	; 2
     ee6:	8c 91       	ld	r24, X
     ee8:	12 97       	sbiw	r26, 0x02	; 2
     eea:	88 0f       	add	r24, r24
     eec:	88 0f       	add	r24, r24
     eee:	88 0f       	add	r24, r24
     ef0:	80 93 f0 00 	sts	0x00F0, r24
     ef4:	ef ee       	ldi	r30, 0xEF	; 239
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	80 83       	st	Z, r24
     efe:	1c c0       	rjmp	.+56     	; 0xf38 <__stack+0x639>
          else              { Can_set_std_id(cmd->id.std);}
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	8c 91       	ld	r24, X
     f04:	12 97       	sbiw	r26, 0x02	; 2
     f06:	86 95       	lsr	r24
     f08:	86 95       	lsr	r24
     f0a:	86 95       	lsr	r24
     f0c:	13 96       	adiw	r26, 0x03	; 3
     f0e:	9c 91       	ld	r25, X
     f10:	13 97       	sbiw	r26, 0x03	; 3
     f12:	e0 e2       	ldi	r30, 0x20	; 32
     f14:	9e 9f       	mul	r25, r30
     f16:	80 0d       	add	r24, r0
     f18:	11 24       	eor	r1, r1
     f1a:	80 93 f3 00 	sts	0x00F3, r24
     f1e:	12 96       	adiw	r26, 0x02	; 2
     f20:	8c 91       	ld	r24, X
     f22:	12 97       	sbiw	r26, 0x02	; 2
     f24:	82 95       	swap	r24
     f26:	88 0f       	add	r24, r24
     f28:	80 7e       	andi	r24, 0xE0	; 224
     f2a:	80 93 f2 00 	sts	0x00F2, r24
     f2e:	ef ee       	ldi	r30, 0xEF	; 239
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8f 7e       	andi	r24, 0xEF	; 239
     f36:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	9b 81       	ldd	r25, Y+3	; 0x03
     f3e:	92 95       	swap	r25
     f40:	96 95       	lsr	r25
     f42:	97 70       	andi	r25, 0x07	; 7
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	88 0f       	add	r24, r24
     f48:	88 0f       	add	r24, r24
     f4a:	88 0f       	add	r24, r24
     f4c:	89 0f       	add	r24, r25
     f4e:	80 93 f7 00 	sts	0x00F7, r24
     f52:	9a 81       	ldd	r25, Y+2	; 0x02
     f54:	92 95       	swap	r25
     f56:	96 95       	lsr	r25
     f58:	97 70       	andi	r25, 0x07	; 7
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 0f       	add	r24, r24
     f5e:	88 0f       	add	r24, r24
     f60:	88 0f       	add	r24, r24
     f62:	89 0f       	add	r24, r25
     f64:	80 93 f6 00 	sts	0x00F6, r24
     f68:	99 81       	ldd	r25, Y+1	; 0x01
     f6a:	92 95       	swap	r25
     f6c:	96 95       	lsr	r25
     f6e:	97 70       	andi	r25, 0x07	; 7
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	88 0f       	add	r24, r24
     f74:	88 0f       	add	r24, r24
     f76:	88 0f       	add	r24, r24
     f78:	89 0f       	add	r24, r25
     f7a:	80 93 f5 00 	sts	0x00F5, r24
     f7e:	29 81       	ldd	r18, Y+1	; 0x01
     f80:	22 0f       	add	r18, r18
     f82:	22 0f       	add	r18, r18
     f84:	22 0f       	add	r18, r18
     f86:	84 ef       	ldi	r24, 0xF4	; 244
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     f8e:	ef ee       	ldi	r30, 0xEF	; 239
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	30 81       	ld	r19, Z
     f94:	16 96       	adiw	r26, 0x06	; 6
     f96:	2c 91       	ld	r18, X
     f98:	16 97       	sbiw	r26, 0x06	; 6
     f9a:	23 2b       	or	r18, r19
     f9c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     f9e:	1a 96       	adiw	r26, 0x0a	; 10
     fa0:	1c 92       	st	X, r1
     fa2:	dc 01       	movw	r26, r24
     fa4:	2c 91       	ld	r18, X
     fa6:	24 60       	ori	r18, 0x04	; 4
     fa8:	2c 93       	st	X, r18
     faa:	a0 ef       	ldi	r26, 0xF0	; 240
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	2c 91       	ld	r18, X
     fb0:	2b 7f       	andi	r18, 0xFB	; 251
     fb2:	2c 93       	st	X, r18
          Can_set_idemsk();
     fb4:	dc 01       	movw	r26, r24
     fb6:	2c 91       	ld	r18, X
     fb8:	21 60       	ori	r18, 0x01	; 1
     fba:	2c 93       	st	X, r18
          Can_config_rx();       
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 73       	andi	r24, 0x3F	; 63
     fc0:	80 83       	st	Z, r24
     fc2:	80 81       	ld	r24, Z
     fc4:	80 68       	ori	r24, 0x80	; 128
     fc6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fc8:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     fca:	d2 c1       	rjmp	.+932    	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fcc:	1b 96       	adiw	r26, 0x0b	; 11
     fce:	8c 91       	ld	r24, X
     fd0:	1b 97       	sbiw	r26, 0x0b	; 11
     fd2:	88 23       	and	r24, r24
     fd4:	d9 f1       	breq	.+118    	; 0x104c <__stack+0x74d>
     fd6:	14 96       	adiw	r26, 0x04	; 4
     fd8:	9c 91       	ld	r25, X
     fda:	14 97       	sbiw	r26, 0x04	; 4
     fdc:	92 95       	swap	r25
     fde:	96 95       	lsr	r25
     fe0:	97 70       	andi	r25, 0x07	; 7
     fe2:	15 96       	adiw	r26, 0x05	; 5
     fe4:	8c 91       	ld	r24, X
     fe6:	15 97       	sbiw	r26, 0x05	; 5
     fe8:	88 0f       	add	r24, r24
     fea:	88 0f       	add	r24, r24
     fec:	88 0f       	add	r24, r24
     fee:	89 0f       	add	r24, r25
     ff0:	80 93 f3 00 	sts	0x00F3, r24
     ff4:	13 96       	adiw	r26, 0x03	; 3
     ff6:	9c 91       	ld	r25, X
     ff8:	13 97       	sbiw	r26, 0x03	; 3
     ffa:	92 95       	swap	r25
     ffc:	96 95       	lsr	r25
     ffe:	97 70       	andi	r25, 0x07	; 7
    1000:	14 96       	adiw	r26, 0x04	; 4
    1002:	8c 91       	ld	r24, X
    1004:	14 97       	sbiw	r26, 0x04	; 4
    1006:	88 0f       	add	r24, r24
    1008:	88 0f       	add	r24, r24
    100a:	88 0f       	add	r24, r24
    100c:	89 0f       	add	r24, r25
    100e:	80 93 f2 00 	sts	0x00F2, r24
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	9c 91       	ld	r25, X
    1016:	12 97       	sbiw	r26, 0x02	; 2
    1018:	92 95       	swap	r25
    101a:	96 95       	lsr	r25
    101c:	97 70       	andi	r25, 0x07	; 7
    101e:	13 96       	adiw	r26, 0x03	; 3
    1020:	8c 91       	ld	r24, X
    1022:	13 97       	sbiw	r26, 0x03	; 3
    1024:	88 0f       	add	r24, r24
    1026:	88 0f       	add	r24, r24
    1028:	88 0f       	add	r24, r24
    102a:	89 0f       	add	r24, r25
    102c:	80 93 f1 00 	sts	0x00F1, r24
    1030:	12 96       	adiw	r26, 0x02	; 2
    1032:	8c 91       	ld	r24, X
    1034:	12 97       	sbiw	r26, 0x02	; 2
    1036:	88 0f       	add	r24, r24
    1038:	88 0f       	add	r24, r24
    103a:	88 0f       	add	r24, r24
    103c:	80 93 f0 00 	sts	0x00F0, r24
    1040:	ef ee       	ldi	r30, 0xEF	; 239
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	80 61       	ori	r24, 0x10	; 16
    1048:	80 83       	st	Z, r24
    104a:	1c c0       	rjmp	.+56     	; 0x1084 <__stack+0x785>
          else              { Can_set_std_id(cmd->id.std);}
    104c:	12 96       	adiw	r26, 0x02	; 2
    104e:	8c 91       	ld	r24, X
    1050:	12 97       	sbiw	r26, 0x02	; 2
    1052:	86 95       	lsr	r24
    1054:	86 95       	lsr	r24
    1056:	86 95       	lsr	r24
    1058:	13 96       	adiw	r26, 0x03	; 3
    105a:	9c 91       	ld	r25, X
    105c:	13 97       	sbiw	r26, 0x03	; 3
    105e:	e0 e2       	ldi	r30, 0x20	; 32
    1060:	9e 9f       	mul	r25, r30
    1062:	80 0d       	add	r24, r0
    1064:	11 24       	eor	r1, r1
    1066:	80 93 f3 00 	sts	0x00F3, r24
    106a:	12 96       	adiw	r26, 0x02	; 2
    106c:	8c 91       	ld	r24, X
    106e:	12 97       	sbiw	r26, 0x02	; 2
    1070:	82 95       	swap	r24
    1072:	88 0f       	add	r24, r24
    1074:	80 7e       	andi	r24, 0xE0	; 224
    1076:	80 93 f2 00 	sts	0x00F2, r24
    107a:	ef ee       	ldi	r30, 0xEF	; 239
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8f 7e       	andi	r24, 0xEF	; 239
    1082:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	9b 81       	ldd	r25, Y+3	; 0x03
    108a:	92 95       	swap	r25
    108c:	96 95       	lsr	r25
    108e:	97 70       	andi	r25, 0x07	; 7
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	88 0f       	add	r24, r24
    1094:	88 0f       	add	r24, r24
    1096:	88 0f       	add	r24, r24
    1098:	89 0f       	add	r24, r25
    109a:	80 93 f7 00 	sts	0x00F7, r24
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	92 95       	swap	r25
    10a2:	96 95       	lsr	r25
    10a4:	97 70       	andi	r25, 0x07	; 7
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	88 0f       	add	r24, r24
    10aa:	88 0f       	add	r24, r24
    10ac:	88 0f       	add	r24, r24
    10ae:	89 0f       	add	r24, r25
    10b0:	80 93 f6 00 	sts	0x00F6, r24
    10b4:	99 81       	ldd	r25, Y+1	; 0x01
    10b6:	92 95       	swap	r25
    10b8:	96 95       	lsr	r25
    10ba:	97 70       	andi	r25, 0x07	; 7
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	88 0f       	add	r24, r24
    10c0:	88 0f       	add	r24, r24
    10c2:	88 0f       	add	r24, r24
    10c4:	89 0f       	add	r24, r25
    10c6:	80 93 f5 00 	sts	0x00F5, r24
    10ca:	29 81       	ldd	r18, Y+1	; 0x01
    10cc:	22 0f       	add	r18, r18
    10ce:	22 0f       	add	r18, r18
    10d0:	22 0f       	add	r18, r18
    10d2:	84 ef       	ldi	r24, 0xF4	; 244
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    10da:	ef ee       	ldi	r30, 0xEF	; 239
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	30 81       	ld	r19, Z
    10e0:	16 96       	adiw	r26, 0x06	; 6
    10e2:	2c 91       	ld	r18, X
    10e4:	16 97       	sbiw	r26, 0x06	; 6
    10e6:	23 2b       	or	r18, r19
    10e8:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    10ea:	21 e0       	ldi	r18, 0x01	; 1
    10ec:	1a 96       	adiw	r26, 0x0a	; 10
    10ee:	2c 93       	st	X, r18
    10f0:	dc 01       	movw	r26, r24
    10f2:	2c 91       	ld	r18, X
    10f4:	24 60       	ori	r18, 0x04	; 4
    10f6:	2c 93       	st	X, r18
    10f8:	a0 ef       	ldi	r26, 0xF0	; 240
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	2c 91       	ld	r18, X
    10fe:	24 60       	ori	r18, 0x04	; 4
    1100:	2c 93       	st	X, r18
          Can_clear_rplv();
    1102:	20 81       	ld	r18, Z
    1104:	2f 7d       	andi	r18, 0xDF	; 223
    1106:	20 83       	st	Z, r18
          Can_set_idemsk();
    1108:	dc 01       	movw	r26, r24
    110a:	2c 91       	ld	r18, X
    110c:	21 60       	ori	r18, 0x01	; 1
    110e:	2c 93       	st	X, r18
          Can_config_rx();       
    1110:	80 81       	ld	r24, Z
    1112:	8f 73       	andi	r24, 0x3F	; 63
    1114:	80 83       	st	Z, r24
    1116:	80 81       	ld	r24, Z
    1118:	80 68       	ori	r24, 0x80	; 128
    111a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    111c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    111e:	28 c1       	rjmp	.+592    	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	8a ef       	ldi	r24, 0xFA	; 250
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	17 96       	adiw	r26, 0x07	; 7
    1128:	ed 91       	ld	r30, X+
    112a:	fc 91       	ld	r31, X
    112c:	18 97       	sbiw	r26, 0x08	; 8
    112e:	e2 0f       	add	r30, r18
    1130:	f1 1d       	adc	r31, r1
    1132:	30 81       	ld	r19, Z
    1134:	fc 01       	movw	r30, r24
    1136:	30 83       	st	Z, r19
    1138:	2f 5f       	subi	r18, 0xFF	; 255
    113a:	16 96       	adiw	r26, 0x06	; 6
    113c:	3c 91       	ld	r19, X
    113e:	16 97       	sbiw	r26, 0x06	; 6
    1140:	23 17       	cp	r18, r19
    1142:	88 f3       	brcs	.-30     	; 0x1126 <__stack+0x827>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    1144:	19 82       	std	Y+1, r1	; 0x01
    1146:	9b 81       	ldd	r25, Y+3	; 0x03
    1148:	92 95       	swap	r25
    114a:	96 95       	lsr	r25
    114c:	97 70       	andi	r25, 0x07	; 7
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	88 0f       	add	r24, r24
    1152:	88 0f       	add	r24, r24
    1154:	88 0f       	add	r24, r24
    1156:	89 0f       	add	r24, r25
    1158:	80 93 f7 00 	sts	0x00F7, r24
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	92 95       	swap	r25
    1160:	96 95       	lsr	r25
    1162:	97 70       	andi	r25, 0x07	; 7
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	88 0f       	add	r24, r24
    1168:	88 0f       	add	r24, r24
    116a:	88 0f       	add	r24, r24
    116c:	89 0f       	add	r24, r25
    116e:	80 93 f6 00 	sts	0x00F6, r24
    1172:	99 81       	ldd	r25, Y+1	; 0x01
    1174:	92 95       	swap	r25
    1176:	96 95       	lsr	r25
    1178:	97 70       	andi	r25, 0x07	; 7
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	88 0f       	add	r24, r24
    117e:	88 0f       	add	r24, r24
    1180:	88 0f       	add	r24, r24
    1182:	89 0f       	add	r24, r25
    1184:	80 93 f5 00 	sts	0x00F5, r24
    1188:	29 81       	ldd	r18, Y+1	; 0x01
    118a:	22 0f       	add	r18, r18
    118c:	22 0f       	add	r18, r18
    118e:	22 0f       	add	r18, r18
    1190:	84 ef       	ldi	r24, 0xF4	; 244
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	fc 01       	movw	r30, r24
    1196:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1198:	ef ee       	ldi	r30, 0xEF	; 239
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	30 81       	ld	r19, Z
    119e:	16 96       	adiw	r26, 0x06	; 6
    11a0:	2c 91       	ld	r18, X
    11a2:	16 97       	sbiw	r26, 0x06	; 6
    11a4:	23 2b       	or	r18, r19
    11a6:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    11a8:	21 e0       	ldi	r18, 0x01	; 1
    11aa:	1a 96       	adiw	r26, 0x0a	; 10
    11ac:	2c 93       	st	X, r18
    11ae:	dc 01       	movw	r26, r24
    11b0:	2c 91       	ld	r18, X
    11b2:	24 60       	ori	r18, 0x04	; 4
    11b4:	2c 93       	st	X, r18
    11b6:	a0 ef       	ldi	r26, 0xF0	; 240
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	2c 91       	ld	r18, X
    11bc:	24 60       	ori	r18, 0x04	; 4
    11be:	2c 93       	st	X, r18
          Can_set_rplv();
    11c0:	20 81       	ld	r18, Z
    11c2:	20 62       	ori	r18, 0x20	; 32
    11c4:	20 83       	st	Z, r18
          Can_clear_idemsk();
    11c6:	dc 01       	movw	r26, r24
    11c8:	2c 91       	ld	r18, X
    11ca:	2e 7f       	andi	r18, 0xFE	; 254
    11cc:	2c 93       	st	X, r18
          Can_config_rx();       
    11ce:	80 81       	ld	r24, Z
    11d0:	8f 73       	andi	r24, 0x3F	; 63
    11d2:	80 83       	st	Z, r24
    11d4:	80 81       	ld	r24, Z
    11d6:	80 68       	ori	r24, 0x80	; 128
    11d8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    11da:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    11dc:	c9 c0       	rjmp	.+402    	; 0x1370 <__stack+0xa71>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    11de:	1b 96       	adiw	r26, 0x0b	; 11
    11e0:	8c 91       	ld	r24, X
    11e2:	1b 97       	sbiw	r26, 0x0b	; 11
    11e4:	88 23       	and	r24, r24
    11e6:	d9 f1       	breq	.+118    	; 0x125e <__stack+0x95f>
    11e8:	14 96       	adiw	r26, 0x04	; 4
    11ea:	9c 91       	ld	r25, X
    11ec:	14 97       	sbiw	r26, 0x04	; 4
    11ee:	92 95       	swap	r25
    11f0:	96 95       	lsr	r25
    11f2:	97 70       	andi	r25, 0x07	; 7
    11f4:	15 96       	adiw	r26, 0x05	; 5
    11f6:	8c 91       	ld	r24, X
    11f8:	15 97       	sbiw	r26, 0x05	; 5
    11fa:	88 0f       	add	r24, r24
    11fc:	88 0f       	add	r24, r24
    11fe:	88 0f       	add	r24, r24
    1200:	89 0f       	add	r24, r25
    1202:	80 93 f3 00 	sts	0x00F3, r24
    1206:	13 96       	adiw	r26, 0x03	; 3
    1208:	9c 91       	ld	r25, X
    120a:	13 97       	sbiw	r26, 0x03	; 3
    120c:	92 95       	swap	r25
    120e:	96 95       	lsr	r25
    1210:	97 70       	andi	r25, 0x07	; 7
    1212:	14 96       	adiw	r26, 0x04	; 4
    1214:	8c 91       	ld	r24, X
    1216:	14 97       	sbiw	r26, 0x04	; 4
    1218:	88 0f       	add	r24, r24
    121a:	88 0f       	add	r24, r24
    121c:	88 0f       	add	r24, r24
    121e:	89 0f       	add	r24, r25
    1220:	80 93 f2 00 	sts	0x00F2, r24
    1224:	12 96       	adiw	r26, 0x02	; 2
    1226:	9c 91       	ld	r25, X
    1228:	12 97       	sbiw	r26, 0x02	; 2
    122a:	92 95       	swap	r25
    122c:	96 95       	lsr	r25
    122e:	97 70       	andi	r25, 0x07	; 7
    1230:	13 96       	adiw	r26, 0x03	; 3
    1232:	8c 91       	ld	r24, X
    1234:	13 97       	sbiw	r26, 0x03	; 3
    1236:	88 0f       	add	r24, r24
    1238:	88 0f       	add	r24, r24
    123a:	88 0f       	add	r24, r24
    123c:	89 0f       	add	r24, r25
    123e:	80 93 f1 00 	sts	0x00F1, r24
    1242:	12 96       	adiw	r26, 0x02	; 2
    1244:	8c 91       	ld	r24, X
    1246:	12 97       	sbiw	r26, 0x02	; 2
    1248:	88 0f       	add	r24, r24
    124a:	88 0f       	add	r24, r24
    124c:	88 0f       	add	r24, r24
    124e:	80 93 f0 00 	sts	0x00F0, r24
    1252:	ef ee       	ldi	r30, 0xEF	; 239
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 61       	ori	r24, 0x10	; 16
    125a:	80 83       	st	Z, r24
    125c:	1c c0       	rjmp	.+56     	; 0x1296 <__stack+0x997>
          else              { Can_set_std_id(cmd->id.std);}
    125e:	12 96       	adiw	r26, 0x02	; 2
    1260:	8c 91       	ld	r24, X
    1262:	12 97       	sbiw	r26, 0x02	; 2
    1264:	86 95       	lsr	r24
    1266:	86 95       	lsr	r24
    1268:	86 95       	lsr	r24
    126a:	13 96       	adiw	r26, 0x03	; 3
    126c:	9c 91       	ld	r25, X
    126e:	13 97       	sbiw	r26, 0x03	; 3
    1270:	e0 e2       	ldi	r30, 0x20	; 32
    1272:	9e 9f       	mul	r25, r30
    1274:	80 0d       	add	r24, r0
    1276:	11 24       	eor	r1, r1
    1278:	80 93 f3 00 	sts	0x00F3, r24
    127c:	12 96       	adiw	r26, 0x02	; 2
    127e:	8c 91       	ld	r24, X
    1280:	12 97       	sbiw	r26, 0x02	; 2
    1282:	82 95       	swap	r24
    1284:	88 0f       	add	r24, r24
    1286:	80 7e       	andi	r24, 0xE0	; 224
    1288:	80 93 f2 00 	sts	0x00F2, r24
    128c:	ef ee       	ldi	r30, 0xEF	; 239
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 7e       	andi	r24, 0xEF	; 239
    1294:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1296:	16 96       	adiw	r26, 0x06	; 6
    1298:	8c 91       	ld	r24, X
    129a:	16 97       	sbiw	r26, 0x06	; 6
    129c:	88 23       	and	r24, r24
    129e:	91 f0       	breq	.+36     	; 0x12c4 <__stack+0x9c5>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	8a ef       	ldi	r24, 0xFA	; 250
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	17 96       	adiw	r26, 0x07	; 7
    12a8:	ed 91       	ld	r30, X+
    12aa:	fc 91       	ld	r31, X
    12ac:	18 97       	sbiw	r26, 0x08	; 8
    12ae:	e2 0f       	add	r30, r18
    12b0:	f1 1d       	adc	r31, r1
    12b2:	30 81       	ld	r19, Z
    12b4:	fc 01       	movw	r30, r24
    12b6:	30 83       	st	Z, r19
    12b8:	2f 5f       	subi	r18, 0xFF	; 255
    12ba:	16 96       	adiw	r26, 0x06	; 6
    12bc:	3c 91       	ld	r19, X
    12be:	16 97       	sbiw	r26, 0x06	; 6
    12c0:	23 17       	cp	r18, r19
    12c2:	88 f3       	brcs	.-30     	; 0x12a6 <__stack+0x9a7>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ca:	92 95       	swap	r25
    12cc:	96 95       	lsr	r25
    12ce:	97 70       	andi	r25, 0x07	; 7
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	88 0f       	add	r24, r24
    12d4:	88 0f       	add	r24, r24
    12d6:	88 0f       	add	r24, r24
    12d8:	89 0f       	add	r24, r25
    12da:	80 93 f7 00 	sts	0x00F7, r24
    12de:	9a 81       	ldd	r25, Y+2	; 0x02
    12e0:	92 95       	swap	r25
    12e2:	96 95       	lsr	r25
    12e4:	97 70       	andi	r25, 0x07	; 7
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	88 0f       	add	r24, r24
    12ea:	88 0f       	add	r24, r24
    12ec:	88 0f       	add	r24, r24
    12ee:	89 0f       	add	r24, r25
    12f0:	80 93 f6 00 	sts	0x00F6, r24
    12f4:	99 81       	ldd	r25, Y+1	; 0x01
    12f6:	92 95       	swap	r25
    12f8:	96 95       	lsr	r25
    12fa:	97 70       	andi	r25, 0x07	; 7
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	88 0f       	add	r24, r24
    1300:	88 0f       	add	r24, r24
    1302:	88 0f       	add	r24, r24
    1304:	89 0f       	add	r24, r25
    1306:	80 93 f5 00 	sts	0x00F5, r24
    130a:	29 81       	ldd	r18, Y+1	; 0x01
    130c:	22 0f       	add	r18, r18
    130e:	22 0f       	add	r18, r18
    1310:	22 0f       	add	r18, r18
    1312:	84 ef       	ldi	r24, 0xF4	; 244
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    131a:	ef ee       	ldi	r30, 0xEF	; 239
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	30 81       	ld	r19, Z
    1320:	16 96       	adiw	r26, 0x06	; 6
    1322:	2c 91       	ld	r18, X
    1324:	16 97       	sbiw	r26, 0x06	; 6
    1326:	23 2b       	or	r18, r19
    1328:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    132a:	21 e0       	ldi	r18, 0x01	; 1
    132c:	1a 96       	adiw	r26, 0x0a	; 10
    132e:	2c 93       	st	X, r18
    1330:	dc 01       	movw	r26, r24
    1332:	2c 91       	ld	r18, X
    1334:	24 60       	ori	r18, 0x04	; 4
    1336:	2c 93       	st	X, r18
    1338:	a0 ef       	ldi	r26, 0xF0	; 240
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	2c 91       	ld	r18, X
    133e:	24 60       	ori	r18, 0x04	; 4
    1340:	2c 93       	st	X, r18
          Can_set_rplv();
    1342:	20 81       	ld	r18, Z
    1344:	20 62       	ori	r18, 0x20	; 32
    1346:	20 83       	st	Z, r18
          Can_set_idemsk();
    1348:	dc 01       	movw	r26, r24
    134a:	2c 91       	ld	r18, X
    134c:	21 60       	ori	r18, 0x01	; 1
    134e:	2c 93       	st	X, r18
          Can_config_rx();       
    1350:	80 81       	ld	r24, Z
    1352:	8f 73       	andi	r24, 0x3F	; 63
    1354:	80 83       	st	Z, r24
    1356:	80 81       	ld	r24, Z
    1358:	80 68       	ori	r24, 0x80	; 128
    135a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    135c:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    135e:	08 c0       	rjmp	.+16     	; 0x1370 <__stack+0xa71>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1360:	19 96       	adiw	r26, 0x09	; 9
    1362:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1364:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <__stack+0xa71>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1368:	8f e1       	ldi	r24, 0x1F	; 31
    136a:	19 96       	adiw	r26, 0x09	; 9
    136c:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    136e:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1380:	88 23       	and	r24, r24
    1382:	09 f4       	brne	.+2      	; 0x1386 <can_get_status+0xe>
    1384:	e3 c0       	rjmp	.+454    	; 0x154c <can_get_status+0x1d4>
    1386:	8f 31       	cpi	r24, 0x1F	; 31
    1388:	09 f4       	brne	.+2      	; 0x138c <can_get_status+0x14>
    138a:	e2 c0       	rjmp	.+452    	; 0x1550 <can_get_status+0x1d8>
    138c:	8f 3f       	cpi	r24, 0xFF	; 255
    138e:	09 f4       	brne	.+2      	; 0x1392 <can_get_status+0x1a>
    1390:	e1 c0       	rjmp	.+450    	; 0x1554 <can_get_status+0x1dc>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    1392:	62 95       	swap	r22
    1394:	60 7f       	andi	r22, 0xF0	; 240
    1396:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    139a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <can_get_mob_status>
    
    switch (a_status)
    139e:	80 32       	cpi	r24, 0x20	; 32
    13a0:	61 f0       	breq	.+24     	; 0x13ba <can_get_status+0x42>
    13a2:	20 f4       	brcc	.+8      	; 0x13ac <can_get_status+0x34>
    13a4:	88 23       	and	r24, r24
    13a6:	09 f4       	brne	.+2      	; 0x13aa <can_get_status+0x32>
    13a8:	d7 c0       	rjmp	.+430    	; 0x1558 <can_get_status+0x1e0>
    13aa:	c6 c0       	rjmp	.+396    	; 0x1538 <can_get_status+0x1c0>
    13ac:	80 34       	cpi	r24, 0x40	; 64
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <can_get_status+0x3a>
    13b0:	b8 c0       	rjmp	.+368    	; 0x1522 <can_get_status+0x1aa>
    13b2:	80 3a       	cpi	r24, 0xA0	; 160
    13b4:	09 f4       	brne	.+2      	; 0x13b8 <can_get_status+0x40>
    13b6:	5c c0       	rjmp	.+184    	; 0x1470 <can_get_status+0xf8>
    13b8:	bf c0       	rjmp	.+382    	; 0x1538 <can_get_status+0x1c0>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_toggle(LED7);	//Toggle LED0 when the appropriate message is received.
    13ba:	87 e0       	ldi	r24, 0x07	; 7
    13bc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LED_toggle>
			delay_ms(100);
    13c0:	84 e6       	ldi	r24, 0x64	; 100
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
			LED_toggle(LED7);
    13c8:	87 e0       	ldi	r24, 0x07	; 7
    13ca:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LED_toggle>
			delay_ms(100);
    13ce:	84 e6       	ldi	r24, 0x64	; 100
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
	    
            cmd->ctrl.rtr = Can_get_rtr();
    13d6:	80 91 f0 00 	lds	r24, 0x00F0
    13da:	82 fb       	bst	r24, 2
    13dc:	88 27       	eor	r24, r24
    13de:	80 f9       	bld	r24, 0
    13e0:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    13e2:	80 91 ef 00 	lds	r24, 0x00EF
    13e6:	84 ff       	sbrs	r24, 4
    13e8:	2d c0       	rjmp	.+90     	; 0x1444 <can_get_status+0xcc>
            {
	            cmd->ctrl.ide = 1; // extended frame
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    13ee:	e3 ef       	ldi	r30, 0xF3	; 243
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	86 95       	lsr	r24
    13f6:	86 95       	lsr	r24
    13f8:	86 95       	lsr	r24
    13fa:	8d 83       	std	Y+5, r24	; 0x05
    13fc:	a2 ef       	ldi	r26, 0xF2	; 242
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	8c 91       	ld	r24, X
    1402:	90 81       	ld	r25, Z
    1404:	86 95       	lsr	r24
    1406:	86 95       	lsr	r24
    1408:	86 95       	lsr	r24
    140a:	20 e2       	ldi	r18, 0x20	; 32
    140c:	92 9f       	mul	r25, r18
    140e:	80 0d       	add	r24, r0
    1410:	11 24       	eor	r1, r1
    1412:	8c 83       	std	Y+4, r24	; 0x04
    1414:	e1 ef       	ldi	r30, 0xF1	; 241
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	9c 91       	ld	r25, X
    141c:	86 95       	lsr	r24
    141e:	86 95       	lsr	r24
    1420:	86 95       	lsr	r24
    1422:	20 e2       	ldi	r18, 0x20	; 32
    1424:	92 9f       	mul	r25, r18
    1426:	80 0d       	add	r24, r0
    1428:	11 24       	eor	r1, r1
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	80 91 f0 00 	lds	r24, 0x00F0
    1430:	90 81       	ld	r25, Z
    1432:	86 95       	lsr	r24
    1434:	86 95       	lsr	r24
    1436:	86 95       	lsr	r24
    1438:	20 e2       	ldi	r18, 0x20	; 32
    143a:	92 9f       	mul	r25, r18
    143c:	80 0d       	add	r24, r0
    143e:	11 24       	eor	r1, r1
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <can_get_status+0xda>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    1444:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    1446:	e3 ef       	ldi	r30, 0xF3	; 243
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	80 91 f2 00 	lds	r24, 0x00F2
    1450:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    1452:	80 e2       	ldi	r24, 0x20	; 32
    1454:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1456:	8f 81       	ldd	r24, Y+7	; 0x07
    1458:	98 85       	ldd	r25, Y+8	; 0x08
    145a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    145e:	ef ee       	ldi	r30, 0xEF	; 239
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 73       	andi	r24, 0x3F	; 63
    1466:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    1468:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    146c:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    146e:	75 c0       	rjmp	.+234    	; 0x155a <can_get_status+0x1e2>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    1470:	80 91 f0 00 	lds	r24, 0x00F0
    1474:	82 fb       	bst	r24, 2
    1476:	88 27       	eor	r24, r24
    1478:	80 f9       	bld	r24, 0
    147a:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    147c:	80 91 ef 00 	lds	r24, 0x00EF
    1480:	84 ff       	sbrs	r24, 4
    1482:	2d c0       	rjmp	.+90     	; 0x14de <can_get_status+0x166>
            {
                cmd->ctrl.ide = 1; // extended frame
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1488:	e3 ef       	ldi	r30, 0xF3	; 243
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	86 95       	lsr	r24
    1490:	86 95       	lsr	r24
    1492:	86 95       	lsr	r24
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	a2 ef       	ldi	r26, 0xF2	; 242
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	8c 91       	ld	r24, X
    149c:	90 81       	ld	r25, Z
    149e:	86 95       	lsr	r24
    14a0:	86 95       	lsr	r24
    14a2:	86 95       	lsr	r24
    14a4:	20 e2       	ldi	r18, 0x20	; 32
    14a6:	92 9f       	mul	r25, r18
    14a8:	80 0d       	add	r24, r0
    14aa:	11 24       	eor	r1, r1
    14ac:	8c 83       	std	Y+4, r24	; 0x04
    14ae:	e1 ef       	ldi	r30, 0xF1	; 241
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	9c 91       	ld	r25, X
    14b6:	86 95       	lsr	r24
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	20 e2       	ldi	r18, 0x20	; 32
    14be:	92 9f       	mul	r25, r18
    14c0:	80 0d       	add	r24, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    14c6:	80 91 f0 00 	lds	r24, 0x00F0
    14ca:	90 81       	ld	r25, Z
    14cc:	86 95       	lsr	r24
    14ce:	86 95       	lsr	r24
    14d0:	86 95       	lsr	r24
    14d2:	20 e2       	ldi	r18, 0x20	; 32
    14d4:	92 9f       	mul	r25, r18
    14d6:	80 0d       	add	r24, r0
    14d8:	11 24       	eor	r1, r1
    14da:	8a 83       	std	Y+2, r24	; 0x02
    14dc:	13 c0       	rjmp	.+38     	; 0x1504 <can_get_status+0x18c>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    14de:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    14e0:	e3 ef       	ldi	r30, 0xF3	; 243
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	82 95       	swap	r24
    14e8:	86 95       	lsr	r24
    14ea:	87 70       	andi	r24, 0x07	; 7
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	80 91 f2 00 	lds	r24, 0x00F2
    14f2:	90 81       	ld	r25, Z
    14f4:	99 0f       	add	r25, r25
    14f6:	99 0f       	add	r25, r25
    14f8:	99 0f       	add	r25, r25
    14fa:	82 95       	swap	r24
    14fc:	86 95       	lsr	r24
    14fe:	87 70       	andi	r24, 0x07	; 7
    1500:	89 0f       	add	r24, r25
    1502:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1504:	80 ea       	ldi	r24, 0xA0	; 160
    1506:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1508:	8f 81       	ldd	r24, Y+7	; 0x07
    150a:	98 85       	ldd	r25, Y+8	; 0x08
    150c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1510:	ef ee       	ldi	r30, 0xEF	; 239
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	8f 73       	andi	r24, 0x3F	; 63
    1518:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    151a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    151e:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1520:	1c c0       	rjmp	.+56     	; 0x155a <can_get_status+0x1e2>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1522:	80 e4       	ldi	r24, 0x40	; 64
    1524:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1526:	ef ee       	ldi	r30, 0xEF	; 239
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8f 73       	andi	r24, 0x3F	; 63
    152e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1530:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1534:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1536:	11 c0       	rjmp	.+34     	; 0x155a <can_get_status+0x1e2>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1538:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    153a:	ef ee       	ldi	r30, 0xEF	; 239
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8f 73       	andi	r24, 0x3F	; 63
    1542:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1544:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1548:	82 e0       	ldi	r24, 0x02	; 2
            break;
    154a:	07 c0       	rjmp	.+14     	; 0x155a <can_get_status+0x1e2>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	05 c0       	rjmp	.+10     	; 0x155a <can_get_status+0x1e2>
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	03 c0       	rjmp	.+6      	; 0x155a <can_get_status+0x1e2>
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	01 c0       	rjmp	.+2      	; 0x155a <can_get_status+0x1e2>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1558:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	80 93 1f 01 	sts	0x011F, r24
	send_arr[6] = MT_COM;
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	80 93 1e 01 	sts	0x011E, r24
	send_arr[5] = RESPONSE;
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	80 93 1d 01 	sts	0x011D, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1572:	61 e1       	ldi	r22, 0x11	; 17
    1574:	88 e1       	ldi	r24, 0x18	; 24
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_now = 0;
    157c:	10 92 36 01 	sts	0x0136, r1
    1580:	08 95       	ret

00001582 <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1582:	83 e0       	ldi	r24, 0x03	; 3
    1584:	80 93 1f 01 	sts	0x011F, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	80 93 1e 01 	sts	0x011E, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    158e:	60 e1       	ldi	r22, 0x10	; 16
    1590:	88 e1       	ldi	r24, 0x18	; 24
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_hk = 0;
    1598:	10 92 46 01 	sts	0x0146, r1
    159c:	08 95       	ret

0000159e <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	00 d0       	rcall	.+0      	; 0x15a4 <send_sensor_data+0x6>
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low;			
	//adc_read(&send_arr[0]);	// This line was used to acquire temp from an analog sensor.
	spi_retrieve_temp(&high, &low);
    15a8:	be 01       	movw	r22, r28
    15aa:	6e 5f       	subi	r22, 0xFE	; 254
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	ce 01       	movw	r24, r28
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <spi_retrieve_temp>

	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	80 93 1f 01 	sts	0x011F, r24
	send_arr[6] = MT_DATA;
    15bc:	10 92 1e 01 	sts	0x011E, r1
	send_arr[5] = SPI_TEMP1;	
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 93 1d 01 	sts	0x011D, r24
	send_arr[1] = high;			// SPI temperature sensor readings.
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	80 93 19 01 	sts	0x0119, r24
	send_arr[0] = low;
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	80 93 18 01 	sts	0x0118, r24
			
	send_arr[4] = 0x55;			// Temperature indicator.
    15d2:	85 e5       	ldi	r24, 0x55	; 85
    15d4:	80 93 1c 01 	sts	0x011C, r24
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    15d8:	6a e0       	ldi	r22, 0x0A	; 10
    15da:	88 e1       	ldi	r24, 0x18	; 24
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_data = 0;
    15e2:	10 92 57 01 	sts	0x0157, r1
	
	return;
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    15f0:	83 e0       	ldi	r24, 0x03	; 3
    15f2:	80 93 1f 01 	sts	0x011F, r24
	send_arr[6] = MT_DATA;
    15f6:	10 92 1e 01 	sts	0x011E, r1
	send_arr[5] = COMS_PACKET;
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	80 93 1d 01 	sts	0x011D, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    1600:	80 91 37 01 	lds	r24, 0x0137
    1604:	80 93 18 01 	sts	0x0118, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1608:	6a e0       	ldi	r22, 0x0A	; 10
    160a:	88 e1       	ldi	r24, 0x18	; 24
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_coms = 0;
    1612:	10 92 35 01 	sts	0x0135, r1
    1616:	08 95       	ret

00001618 <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    1618:	90 91 65 01 	lds	r25, 0x0165
	read_ptr = read_arr[0];
    161c:	e0 91 62 01 	lds	r30, 0x0162
    1620:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    1622:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    1624:	20 91 69 01 	lds	r18, 0x0169
    1628:	20 93 1f 01 	sts	0x011F, r18
	send_arr[6] = MT_COM;
    162c:	22 e0       	ldi	r18, 0x02	; 2
    162e:	20 93 1e 01 	sts	0x011E, r18
	send_arr[5] = ACK_READ;
    1632:	26 e0       	ldi	r18, 0x06	; 6
    1634:	20 93 1d 01 	sts	0x011D, r18
	send_arr[3] = passkey;
    1638:	90 93 1b 01 	sts	0x011B, r25
	send_arr[0] = read_val;
    163c:	80 93 18 01 	sts	0x0118, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1640:	61 e1       	ldi	r22, 0x11	; 17
    1642:	88 e1       	ldi	r24, 0x18	; 24
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	read_response = 0;
    164a:	10 92 3d 01 	sts	0x013D, r1
    164e:	08 95       	ret

00001650 <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    1650:	80 91 03 01 	lds	r24, 0x0103
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    1654:	20 91 00 01 	lds	r18, 0x0100
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    1658:	90 91 69 01 	lds	r25, 0x0169
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    165c:	e0 91 01 01 	lds	r30, 0x0101
    1660:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    1662:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    1664:	90 93 1f 01 	sts	0x011F, r25
	send_arr[6] = MT_COM;
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	90 93 1e 01 	sts	0x011E, r25
	send_arr[5] = ACK_WRITE;
    166e:	98 e0       	ldi	r25, 0x08	; 8
    1670:	90 93 1d 01 	sts	0x011D, r25
	send_arr[3] = passkey;
    1674:	80 93 1b 01 	sts	0x011B, r24
	send_arr[0] = ret_val;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 18 01 	sts	0x0118, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    167e:	61 e1       	ldi	r22, 0x11	; 17
    1680:	88 e1       	ldi	r24, 0x18	; 24
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	write_response = 0;
    1688:	10 92 28 01 	sts	0x0128, r1
    168c:	08 95       	ret

0000168e <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now == 1)
    168e:	80 91 36 01 	lds	r24, 0x0136
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	11 f4       	brne	.+4      	; 0x169a <run_commands+0xc>
		send_response();
    1696:	0e 94 b0 0a 	call	0x1560	; 0x1560 <send_response>
	if (send_hk == 1)
    169a:	80 91 46 01 	lds	r24, 0x0146
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <run_commands+0x18>
		send_housekeeping();
    16a2:	0e 94 c1 0a 	call	0x1582	; 0x1582 <send_housekeeping>
	if (send_data == 1)
    16a6:	80 91 57 01 	lds	r24, 0x0157
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <run_commands+0x24>
		send_sensor_data();
    16ae:	0e 94 cf 0a 	call	0x159e	; 0x159e <send_sensor_data>
	if (send_coms == 1)
    16b2:	80 91 35 01 	lds	r24, 0x0135
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	11 f4       	brne	.+4      	; 0x16be <run_commands+0x30>
		send_coms_packet();
    16ba:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <send_coms_packet>
	if (read_response == 1)
    16be:	80 91 3d 01 	lds	r24, 0x013D
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	11 f4       	brne	.+4      	; 0x16ca <run_commands+0x3c>
		send_read_response();
    16c6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <send_read_response>
	if (write_response == 1)
    16ca:	80 91 28 01 	lds	r24, 0x0128
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <run_commands+0x48>
		send_write_response();
    16d2:	0e 94 28 0b 	call	0x1650	; 0x1650 <send_write_response>
    16d6:	08 95       	ret

000016d8 <LED_toggle>:
	LEDPORT |= (1 << LED);
}

void LED_toggle(uint8_t LED) {
	
	if(LED == 7)
    16d8:	87 30       	cpi	r24, 0x07	; 7
    16da:	29 f4       	brne	.+10     	; 0x16e6 <LED_toggle+0xe>
	{
		PORTD ^= 0x01;
    16dc:	2b b1       	in	r18, 0x0b	; 11
    16de:	91 e0       	ldi	r25, 0x01	; 1
    16e0:	92 27       	eor	r25, r18
    16e2:	9b b9       	out	0x0b, r25	; 11
    16e4:	07 c0       	rjmp	.+14     	; 0x16f4 <LED_toggle+0x1c>
	}
	if(LED == 3)
    16e6:	83 30       	cpi	r24, 0x03	; 3
    16e8:	29 f4       	brne	.+10     	; 0x16f4 <LED_toggle+0x1c>
	{
		PORTC ^= 0x01;
    16ea:	98 b1       	in	r25, 0x08	; 8
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	89 27       	eor	r24, r25
    16f0:	88 b9       	out	0x08, r24	; 8
    16f2:	08 95       	ret
	}
	else
		LEDPORT ^= (1 << LED);
    16f4:	45 b1       	in	r20, 0x05	; 5
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	b9 01       	movw	r22, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <LED_toggle+0x2a>
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	8a 95       	dec	r24
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <LED_toggle+0x26>
    1706:	cb 01       	movw	r24, r22
    1708:	84 27       	eor	r24, r20
    170a:	85 b9       	out	0x05, r24	; 5
    170c:	08 95       	ret

0000170e <main>:
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    170e:	e1 e6       	ldi	r30, 0x61	; 97
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 e8       	ldi	r24, 0x80	; 128
    1714:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1716:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1718:	8e ef       	ldi	r24, 0xFE	; 254
    171a:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    171c:	81 e1       	ldi	r24, 0x11	; 17
    171e:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    1720:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    1722:	89 e0       	ldi	r24, 0x09	; 9
    1724:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    172a:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    172c:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	
	timer_init();
    172e:	0e 94 16 0c 	call	0x182c	; 0x182c <timer_init>
	adc_initialize();
    1732:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	0e 94 81 03 	call	0x702	; 0x702 <can_init>
	can_init_mobs();
    173c:	0e 94 83 02 	call	0x506	; 0x506 <can_init_mobs>
	spi_initialize_master();
    1740:	0e 94 b1 0b 	call	0x1762	; 0x1762 <spi_initialize_master>
	
	// Enable global interrupts for Timer execution
	sei();
    1744:	78 94       	sei
	
	transceiver_initialize();
    1746:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <transceiver_initialize>
	
	SS1_set_high();		// SPI Temp Sensor.
    174a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <SS1_set_high>
	
	LED_toggle(LED7);
    174e:	87 e0       	ldi	r24, 0x07	; 7
    1750:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <LED_toggle>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    1754:	0e 94 28 02 	call	0x450	; 0x450 <can_check_general>
	
		/*		TRANSCEIVER COMMUNICATION	*/
		trans_check();
    1758:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <trans_check>
		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    175c:	0e 94 47 0b 	call	0x168e	; 0x168e <run_commands>
    1760:	f9 cf       	rjmp	.-14     	; 0x1754 <main+0x46>

00001762 <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    1762:	85 b7       	in	r24, 0x35	; 53
    1764:	8f 77       	andi	r24, 0x7F	; 127
    1766:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    1768:	83 e5       	ldi	r24, 0x53	; 83
    176a:	8c bd       	out	0x2c, r24	; 44
    176c:	08 95       	ret

0000176e <spi_transfer>:
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	//SS_set_low();
	*reg_ptr = message;
    176e:	8e bd       	out	0x2e, r24	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    1770:	0d b4       	in	r0, 0x2d	; 45
    1772:	07 fc       	sbrc	r0, 7
    1774:	04 c0       	rjmp	.+8      	; 0x177e <spi_transfer+0x10>
    1776:	89 ee       	ldi	r24, 0xE9	; 233
    1778:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    177a:	f1 f7       	brne	.-4      	; 0x1778 <spi_transfer+0xa>
    177c:	08 95       	ret
			delay_ms(100);
		}
	}	
	//SS_set_high();
	
	delay_cycles(10);
    177e:	8a e0       	ldi	r24, 0x0A	; 10
    1780:	0e 94 46 0c 	call	0x188c	; 0x188c <delay_cycles>
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    1784:	8e b5       	in	r24, 0x2e	; 46
		//temp2 = temp2 << (7 - i);		
		//temp += temp2;
	//}
	
	return receive_char;					// Transmission was successful, return the character that was received.
}
    1786:	08 95       	ret

00001788 <SS_set_high>:
/************************************************************************/

void SS_set_high(void) 
{
	//PORTD |= (1 << 3);
	delay_us(1);
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
    1790:	08 95       	ret

00001792 <spi_transfer2>:
	
	return receive_char;					// Transmission was successful, return the character that was received.
}

uint8_t spi_transfer2(uint8_t message)
{
    1792:	cf 93       	push	r28
	//cmd_str(SRES);
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	PORTD &= (0xF7);
    1794:	5b 98       	cbi	0x0b, 3	; 11
	//delay_cycles(10);
	*reg_ptr = message;
    1796:	8e bd       	out	0x2e, r24	; 46
	//delay_cycles(10);
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    1798:	0d b4       	in	r0, 0x2d	; 45
    179a:	07 fc       	sbrc	r0, 7
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <spi_transfer2+0x18>
    179e:	c9 ee       	ldi	r28, 0xE9	; 233
    17a0:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <spi_transfer2+0xe>
		{
			SS_set_high();
    17a4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <SS_set_high>
			return 0x00;						// Something went wrong, so the function times out.
    17a8:	09 c0       	rjmp	.+18     	; 0x17bc <spi_transfer2+0x2a>
		}
	}
	delay_cycles(7);
    17aa:	87 e0       	ldi	r24, 0x07	; 7
    17ac:	0e 94 46 0c 	call	0x188c	; 0x188c <delay_cycles>
	SS_set_high();
    17b0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <SS_set_high>
	
	delay_cycles(10);
    17b4:	8a e0       	ldi	r24, 0x0A	; 10
    17b6:	0e 94 46 0c 	call	0x188c	; 0x188c <delay_cycles>
		
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    17ba:	ce b5       	in	r28, 0x2e	; 46
		
	return receive_char;					// Transmission was successful, return the character that was received.
}
    17bc:	8c 2f       	mov	r24, r28
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    17c2:	44 9a       	sbi	0x08, 4	; 8
    17c4:	08 95       	ret

000017c6 <SS_set_low>:
/************************************************************************/

void SS_set_low(void)
{
	//PORTD &= (0xF7);
	delay_us(1);
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
    17ce:	08 95       	ret

000017d0 <SS1_set_low>:
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    17d0:	44 98       	cbi	0x08, 4	; 8
    17d2:	08 95       	ret

000017d4 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	8c 01       	movw	r16, r24
    17de:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    17e0:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    17e4:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    17e6:	80 e8       	ldi	r24, 0x80	; 128
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
	*high = *reg_ptr;
    17ee:	8e b5       	in	r24, 0x2e	; 46
    17f0:	f8 01       	movw	r30, r16
    17f2:	80 83       	st	Z, r24
	delay_ms(128);
    17f4:	80 e8       	ldi	r24, 0x80	; 128
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
	*low = *reg_ptr;	
    17fc:	8e b5       	in	r24, 0x2e	; 46
    17fe:	88 83       	st	Y, r24
	SS1_set_high();
    1800:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <SS1_set_high>
	
	return;
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	08 95       	ret

0000180e <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    180e:	1f 92       	push	r1
    1810:	0f 92       	push	r0
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	0f 92       	push	r0
    1816:	11 24       	eor	r1, r1
    1818:	8f 93       	push	r24
	CTC_flag = 1;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	80 93 6a 01 	sts	0x016A, r24
}
    1820:	8f 91       	pop	r24
    1822:	0f 90       	pop	r0
    1824:	0f be       	out	0x3f, r0	; 63
    1826:	0f 90       	pop	r0
    1828:	1f 90       	pop	r1
    182a:	18 95       	reti

0000182c <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    182c:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    1830:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    1834:	8a e0       	ldi	r24, 0x0A	; 10
    1836:	80 93 81 00 	sts	0x0081, r24
    183a:	08 95       	ret

0000183c <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    183c:	10 92 6a 01 	sts	0x016A, r1
	TCNT1 = 0x0000; //Clear timer
    1840:	10 92 85 00 	sts	0x0085, r1
    1844:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    1848:	90 93 89 00 	sts	0x0089, r25
    184c:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    1856:	80 91 6a 01 	lds	r24, 0x016A
    185a:	88 23       	and	r24, r24
    185c:	e1 f3       	breq	.-8      	; 0x1856 <delay_us+0x1a>
}
    185e:	08 95       	ret

00001860 <delay_ms>:

void delay_ms(uint16_t ms) {
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	51 f0       	breq	.+20     	; 0x1882 <delay_ms+0x22>
    186e:	c0 e0       	ldi	r28, 0x00	; 0
    1870:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    1872:	88 ee       	ldi	r24, 0xE8	; 232
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    187a:	21 96       	adiw	r28, 0x01	; 1
    187c:	c0 17       	cp	r28, r16
    187e:	d1 07       	cpc	r29, r17
    1880:	c1 f7       	brne	.-16     	; 0x1872 <delay_ms+0x12>
		delay_us(1000);
	}
}
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	08 95       	ret

0000188c <delay_cycles>:

void delay_cycles(uint8_t cycles)	// @ 8 MHz, 1 cycle = 125 ns
{
	uint8_t i;
	
	for (i = 0; i < cycles; i++)
    188c:	88 23       	and	r24, r24
    188e:	21 f0       	breq	.+8      	; 0x1898 <delay_cycles+0xc>
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9f 5f       	subi	r25, 0xFF	; 255
    1894:	98 13       	cpse	r25, r24
    1896:	fd cf       	rjmp	.-6      	; 0x1892 <delay_cycles+0x6>
    1898:	08 95       	ret

0000189a <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
    189a:	cf 93       	push	r28
    189c:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
    189e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
    18a2:	80 e8       	ldi	r24, 0x80	; 128
    18a4:	8c 0f       	add	r24, r28
    18a6:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	delay_us(1);
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	msg = spi_transfer(0x00);
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
    18b8:	c8 2f       	mov	r28, r24

	SS_set_high();
    18ba:	0e 94 c4 0b 	call	0x1788	; 0x1788 <SS_set_high>
	
	delay_ms(1);
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
	
	return msg;
}
    18c6:	8c 2f       	mov	r24, r28
    18c8:	cf 91       	pop	r28
    18ca:	08 95       	ret

000018cc <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    18cc:	cf 93       	push	r28
    18ce:	df 93       	push	r29
    18d0:	d8 2f       	mov	r29, r24
    18d2:	c6 2f       	mov	r28, r22
	uint8_t msg, check, i;
	
	SS_set_low();
    18d4:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SS_set_low>
	msg = spi_transfer(addr);		// Send the desired address
    18d8:	8d 2f       	mov	r24, r29
    18da:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	delay_us(1);
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    18e6:	8c 2f       	mov	r24, r28
    18e8:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	SS_set_high();
    18ec:	0e 94 c4 0b 	call	0x1788	; 0x1788 <SS_set_high>
	
	delay_ms(1);
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>

	return;
}
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
    18fe:	cf 93       	push	r28
    1900:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
    1902:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SS_set_low>
	msg = spi_transfer(msg);
    1906:	8f ea       	ldi	r24, 0xAF	; 175
    1908:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	delay_us(1);
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1914:	8c 2f       	mov	r24, r28
    1916:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	delay_us(1);
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	msg = spi_transfer(0x00);
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
    1928:	c8 2f       	mov	r28, r24
	SS_set_high();
    192a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <SS_set_high>
	delay_ms(1);
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
	return msg;
}
    1936:	8c 2f       	mov	r24, r28
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr)
{
    193c:	cf 93       	push	r28
	uint8_t msg;
	
	msg = spi_transfer2(addr);
    193e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <spi_transfer2>
    1942:	c8 2f       	mov	r28, r24
	
	delay_us(1);
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	return msg;
}
    194c:	8c 2f       	mov	r24, r28
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	d8 2f       	mov	r29, r24
    1958:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    195a:	8d e3       	ldi	r24, 0x3D	; 61
    195c:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
	uint8_t msg, i, check;
	msg = 0b00101111;
	
	SS_set_low();
    1960:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SS_set_low>
	spi_transfer(msg);
    1964:	8f e2       	ldi	r24, 0x2F	; 47
    1966:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	delay_us(1);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1972:	8d 2f       	mov	r24, r29
    1974:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	delay_us(1);
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    1980:	8c 2f       	mov	r24, r28
    1982:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	SS_set_high();
    1986:	0e 94 c4 0b 	call	0x1788	; 0x1788 <SS_set_high>
	delay_ms(1);
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>

	return;
}
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <get_status>:
/*		Note: 000 = IDLE, 001 = RX, 110 = RX buffer overflow.			*/
/*																		*/
/************************************************************************/

void get_status(uint8_t *CHIP_RDYn, uint8_t *state)
{
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	eb 01       	movw	r28, r22
	uint8_t msg;

	msg = cmd_str(SNOP);
    199e:	8d e3       	ldi	r24, 0x3D	; 61
    19a0:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
	
	msg = msg & ~0x80;
    19a4:	8f 77       	andi	r24, 0x7F	; 127
	msg = msg >> 4;
    19a6:	82 95       	swap	r24
    19a8:	8f 70       	andi	r24, 0x0F	; 15
	*state = msg;
    19aa:	88 83       	st	Y, r24
	
	return;
}
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	08 95       	ret

000019b2 <dir_FIFO_read>:
/*	on the CC1120's FIFO and return the byte which was located there.	*/
/*																		*/
/************************************************************************/

uint8_t dir_FIFO_read(uint8_t addr)
{
    19b2:	cf 93       	push	r28
    19b4:	c8 2f       	mov	r28, r24
	cmd_str(SNOP);
    19b6:	8d e3       	ldi	r24, 0x3D	; 61
    19b8:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
	uint8_t msg;
	msg = 0b10111110;
	
	SS_set_low();
    19bc:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SS_set_low>
	msg = spi_transfer(msg);
    19c0:	8e eb       	ldi	r24, 0xBE	; 190
    19c2:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	delay_us(1);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    19ce:	8c 2f       	mov	r24, r28
    19d0:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
	delay_us(1);
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 1e 0c 	call	0x183c	; 0x183c <delay_us>
	msg = spi_transfer(0x00);
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	0e 94 b7 0b 	call	0x176e	; 0x176e <spi_transfer>
    19e2:	c8 2f       	mov	r28, r24
	SS_set_high();
    19e4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <SS_set_high>
	delay_ms(1);
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
	return msg;
}
    19f0:	8c 2f       	mov	r24, r28
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	c8 2f       	mov	r28, r24
    19fe:	d6 2f       	mov	r29, r22
    1a00:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
    1a02:	0e 94 4d 0c 	call	0x189a	; 0x189a <reg_read>
	if(!data)
    1a06:	11 11       	cpse	r17, r1
    1a08:	0c c0       	rjmp	.+24     	; 0x1a22 <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
    1a0a:	e1 e0       	ldi	r30, 0x01	; 1
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	af 01       	movw	r20, r30
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <reg_write_bit+0x20>
    1a12:	44 0f       	add	r20, r20
    1a14:	55 1f       	adc	r21, r21
    1a16:	da 95       	dec	r29
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <reg_write_bit+0x1c>
    1a1a:	40 95       	com	r20
		msg = temp & msg;
    1a1c:	68 2f       	mov	r22, r24
    1a1e:	64 23       	and	r22, r20
    1a20:	0a c0       	rjmp	.+20     	; 0x1a36 <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
    1a22:	41 e0       	ldi	r20, 0x01	; 1
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	9a 01       	movw	r18, r20
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <reg_write_bit+0x38>
    1a2a:	22 0f       	add	r18, r18
    1a2c:	33 1f       	adc	r19, r19
    1a2e:	da 95       	dec	r29
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <reg_write_bit+0x34>
		msg = temp | msg;
    1a32:	68 2f       	mov	r22, r24
    1a34:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
    1a36:	8c 2f       	mov	r24, r28
    1a38:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	return;
}
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	08 95       	ret

00001a44 <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	c8 2f       	mov	r28, r24
    1a4c:	d6 2f       	mov	r29, r22
    1a4e:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
    1a50:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <reg_read2F>
	if(!data)
    1a54:	11 11       	cpse	r17, r1
    1a56:	0c c0       	rjmp	.+24     	; 0x1a70 <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
    1a58:	e1 e0       	ldi	r30, 0x01	; 1
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	af 01       	movw	r20, r30
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <reg_write_bit2F+0x20>
    1a60:	44 0f       	add	r20, r20
    1a62:	55 1f       	adc	r21, r21
    1a64:	da 95       	dec	r29
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <reg_write_bit2F+0x1c>
    1a68:	40 95       	com	r20
		msg = temp & msg;
    1a6a:	68 2f       	mov	r22, r24
    1a6c:	64 23       	and	r22, r20
    1a6e:	0a c0       	rjmp	.+20     	; 0x1a84 <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	9a 01       	movw	r18, r20
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <reg_write_bit2F+0x38>
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	da 95       	dec	r29
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <reg_write_bit2F+0x34>
		msg = temp | msg;
    1a80:	68 2f       	mov	r22, r24
    1a82:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
    1a84:	8c 2f       	mov	r24, r28
    1a86:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	return;
}
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	08 95       	ret

00001a92 <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    1a92:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	  
	//RESET 
    cmd_str(SRES);             //SRES                  reset chip
    1a96:	80 e3       	ldi	r24, 0x30	; 48
    1a98:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
      
    //Reset RX FIFO
    cmd_str(SFRX);             //SFRX                  flush RX FIFO
    1a9c:	8a e3       	ldi	r24, 0x3A	; 58
    1a9e:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
      
    //Reset TX FIFO
    cmd_str(SFTX);             //SFTX                  flush TX FIFO
    1aa2:	8b e3       	ldi	r24, 0x3B	; 59
    1aa4:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>

	//**************SET UP RX****************//
  
	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	82 e1       	ldi	r24, 0x12	; 18
    1aac:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    1ab0:	6f e5       	ldi	r22, 0x5F	; 95
    1ab2:	83 e1       	ldi	r24, 0x13	; 19
    1ab4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    1ab8:	60 e4       	ldi	r22, 0x40	; 64
    1aba:	86 e1       	ldi	r24, 0x16	; 22
    1abc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    1ac0:	6e e0       	ldi	r22, 0x0E	; 14
    1ac2:	87 e1       	ldi	r24, 0x17	; 23
    1ac4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    1ac8:	63 e0       	ldi	r22, 0x03	; 3
    1aca:	89 e1       	ldi	r24, 0x19	; 25
    1acc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    1ad0:	63 e3       	ldi	r22, 0x33	; 51
    1ad2:	8b e1       	ldi	r24, 0x1B	; 27
    1ad4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    1ad8:	67 e1       	ldi	r22, 0x17	; 23
    1ada:	8d e1       	ldi	r24, 0x1D	; 29
    1adc:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    1ae0:	60 e5       	ldi	r22, 0x50	; 80
    1ae2:	8f e1       	ldi	r24, 0x1F	; 31
    1ae4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
//  reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
  
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    1ae8:	64 e1       	ldi	r22, 0x14	; 20
    1aea:	81 e2       	ldi	r24, 0x21	; 33
    1aec:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    1af0:	6c ea       	ldi	r22, 0xAC	; 172
    1af2:	82 e2       	ldi	r24, 0x22	; 34
    1af4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	//reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
	//reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
	//reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
  
	cmd_str(SNOP);
    1af8:	8d e3       	ldi	r24, 0x3D	; 61
    1afa:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
	//For test purposes only, (2nd block, deleted first one) use values from SmartRF for some bits
	reg_write(0x08, 0x0B);            //*Changed on line 152
    1afe:	6b e0       	ldi	r22, 0x0B	; 11
    1b00:	88 e0       	ldi	r24, 0x08	; 8
    1b02:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x13, 0x0D);            //
    1b06:	6d e0       	ldi	r22, 0x0D	; 13
    1b08:	83 e1       	ldi	r24, 0x13	; 19
    1b0a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x26, 0x04);            //*Changed on line 144
    1b0e:	64 e0       	ldi	r22, 0x04	; 4
    1b10:	86 e2       	ldi	r24, 0x26	; 38
    1b12:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
  
	//High performance RX
	reg_write(0x08, 0x0B);            //
    1b16:	6b e0       	ldi	r22, 0x0B	; 11
    1b18:	88 e0       	ldi	r24, 0x08	; 8
    1b1a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x0C, 0x1C);            //
    1b1e:	6c e1       	ldi	r22, 0x1C	; 28
    1b20:	8c e0       	ldi	r24, 0x0C	; 12
    1b22:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x10, 0x00);            //
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	80 e1       	ldi	r24, 0x10	; 16
    1b2a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x11, 0x04);            //
    1b2e:	64 e0       	ldi	r22, 0x04	; 4
    1b30:	81 e1       	ldi	r24, 0x11	; 17
    1b32:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x13, 0x05);            //
    1b36:	65 e0       	ldi	r22, 0x05	; 5
    1b38:	83 e1       	ldi	r24, 0x13	; 19
    1b3a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x1C, 0xA9);            //
    1b3e:	69 ea       	ldi	r22, 0xA9	; 169
    1b40:	8c e1       	ldi	r24, 0x1C	; 28
    1b42:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x1D, 0xCF);            //
    1b46:	6f ec       	ldi	r22, 0xCF	; 207
    1b48:	8d e1       	ldi	r24, 0x1D	; 29
    1b4a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x1E, 0x00);            //
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	8e e1       	ldi	r24, 0x1E	; 30
    1b52:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x20, 0x03);            //
    1b56:	63 e0       	ldi	r22, 0x03	; 3
    1b58:	80 e2       	ldi	r24, 0x20	; 32
    1b5a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x2E, 0x00);            //
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	8e e2       	ldi	r24, 0x2E	; 46
    1b62:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write2F(0x00, 0x00);          //
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>

	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    1b6e:	68 e4       	ldi	r22, 0x48	; 72
    1b70:	8a e0       	ldi	r24, 0x0A	; 10
    1b72:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    1b76:	65 e0       	ldi	r22, 0x05	; 5
    1b78:	8b e0       	ldi	r24, 0x0B	; 11
    1b7a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: 0x14           set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector enabled
    1b7e:	64 e0       	ldi	r22, 0x04	; 4
    1b80:	81 e2       	ldi	r24, 0x21	; 33
    1b82:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
  
	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	8d e0       	ldi	r24, 0x0D	; 13
    1b8a:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	65 e0       	ldi	r22, 0x05	; 5
    1b92:	8e e0       	ldi	r24, 0x0E	; 14
    1b94:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <reg_write_bit>
  
	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	67 e0       	ldi	r22, 0x07	; 7
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	66 e0       	ldi	r22, 0x06	; 6
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <reg_write_bit2F>
  
	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	66 e0       	ldi	r22, 0x06	; 6
    1bb0:	88 e0       	ldi	r24, 0x08	; 8
    1bb2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <reg_write_bit>
	reg_write(0x09, 0x17);            //SYNC_CFG0: 0x17        32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    1bb6:	67 e1       	ldi	r22, 0x17	; 23
    1bb8:	89 e0       	ldi	r24, 0x09	; 9
    1bba:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
  
	//set packets
	reg_write(0x26, 0x00);            //PKT_CFG2: 0x00         set FIFO mode
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	86 e2       	ldi	r24, 0x26	; 38
    1bc2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
	reg_write(0x2E, 0xFF);            //PKT_LEN: 0xFF          set packet length to 0xFF (max)  
    1bc6:	6f ef       	ldi	r22, 0xFF	; 255
    1bc8:	8e e2       	ldi	r24, 0x2E	; 46
    1bca:	0e 94 66 0c 	call	0x18cc	; 0x18cc <reg_write>
    
	//Frequency setting
	cmd_str(SNOP);
    1bce:	8d e3       	ldi	r24, 0x3D	; 61
    1bd0:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    1bd4:	6c e6       	ldi	r22, 0x6C	; 108
    1bd6:	8c e0       	ldi	r24, 0x0C	; 12
    1bd8:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    1bdc:	60 e8       	ldi	r22, 0x80	; 128
    1bde:	8d e0       	ldi	r24, 0x0D	; 13
    1be0:	0e 94 a9 0c 	call	0x1952	; 0x1952 <reg_write2F>

	//set up GPIO1 to 17
	//reg_write(0x00, 17);
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    1be4:	83 e3       	ldi	r24, 0x33	; 51
    1be6:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
	delay_ms(250);
    1bea:	8a ef       	ldi	r24, 0xFA	; 250
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>

	cmd_str(SAFC);					 // Automatic frequency control
    1bf2:	87 e3       	ldi	r24, 0x37	; 55
    1bf4:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
	delay_ms(250);
    1bf8:	8a ef       	ldi	r24, 0xFA	; 250
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 30 0c 	call	0x1860	; 0x1860 <delay_ms>
	
	//reg_write2F(0xD2, 0x00);
	//reg_write2F(0xD4, 0xFF);
	
	send_coms = 0;
    1c00:	10 92 35 01 	sts	0x0135, r1

	cmd_str(SRX);                    // Put in RX mode
    1c04:	84 e3       	ldi	r24, 0x34	; 52
    1c06:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
    1c0a:	08 95       	ret

00001c0c <trans_check>:
	reg_write2F(reg, msg);
	return;
}

void trans_check(void)
{
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <trans_check+0x6>
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
	uint8_t msg = 0, CHIP_RDYn, state;
	
	get_status(&CHIP_RDYn, &state);
    1c16:	be 01       	movw	r22, r28
    1c18:	6e 5f       	subi	r22, 0xFE	; 254
    1c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	0e 94 cc 0c 	call	0x1998	; 0x1998 <get_status>

	if(state == 0b110 || state == 0b111)
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	86 50       	subi	r24, 0x06	; 6
    1c28:	82 30       	cpi	r24, 0x02	; 2
    1c2a:	68 f5       	brcc	.+90     	; 0x1c86 <trans_check+0x7a>
	{
		cmd_str(SIDLE);
    1c2c:	86 e3       	ldi	r24, 0x36	; 54
    1c2e:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
		//LED_toggle(LED3);
		//delay_ms(100);
		
		// Here we would send our message to the OBC.
		
		cmd_str(SNOP);
    1c32:	8d e3       	ldi	r24, 0x3D	; 61
    1c34:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
		trans_msg[0] = dir_FIFO_read(0x80);
    1c38:	80 e8       	ldi	r24, 0x80	; 128
    1c3a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <dir_FIFO_read>
    1c3e:	80 93 37 01 	sts	0x0137, r24
		trans_msg[1] = dir_FIFO_read(0x81);
    1c42:	81 e8       	ldi	r24, 0x81	; 129
    1c44:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <dir_FIFO_read>
    1c48:	80 93 38 01 	sts	0x0138, r24
		trans_msg[2] = dir_FIFO_read(0x82);
    1c4c:	82 e8       	ldi	r24, 0x82	; 130
    1c4e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <dir_FIFO_read>
    1c52:	80 93 39 01 	sts	0x0139, r24
		trans_msg[3] = dir_FIFO_read(0x83);
    1c56:	83 e8       	ldi	r24, 0x83	; 131
    1c58:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <dir_FIFO_read>
    1c5c:	80 93 3a 01 	sts	0x013A, r24
		trans_msg[4] = dir_FIFO_read(0x84);
    1c60:	84 e8       	ldi	r24, 0x84	; 132
    1c62:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <dir_FIFO_read>
    1c66:	80 93 3b 01 	sts	0x013B, r24
		trans_msg[5] = dir_FIFO_read(0x85);
    1c6a:	85 e8       	ldi	r24, 0x85	; 133
    1c6c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <dir_FIFO_read>
    1c70:	80 93 3c 01 	sts	0x013C, r24
			//LED_toggle(LED6);
			//delay_ms(100);
			//LED_toggle(LED6);
			//delay_ms(100);
		//}
		send_coms = 1;		// Indicates that in main() we will send trans_msg to the OBC via CAN.
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	80 93 35 01 	sts	0x0135, r24
		
		cmd_str(SFRX);
    1c7a:	8a e3       	ldi	r24, 0x3A	; 58
    1c7c:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
		//reg_write2F(0xD2, 0x00);
		//reg_write2F(0xD4, 0xFF);
		
		//cmd_str(SFTX);
		
		cmd_str(SRX);
    1c80:	84 e3       	ldi	r24, 0x34	; 52
    1c82:	0e 94 9e 0c 	call	0x193c	; 0x193c <cmd_str>
	}
	return;
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <__tablejump2__>:
    1c90:	ee 0f       	add	r30, r30
    1c92:	ff 1f       	adc	r31, r31

00001c94 <__tablejump__>:
    1c94:	05 90       	lpm	r0, Z+
    1c96:	f4 91       	lpm	r31, Z
    1c98:	e0 2d       	mov	r30, r0
    1c9a:	09 94       	ijmp

00001c9c <_exit>:
    1c9c:	f8 94       	cli

00001c9e <__stop_program>:
    1c9e:	ff cf       	rjmp	.-2      	; 0x1c9e <__stop_program>
