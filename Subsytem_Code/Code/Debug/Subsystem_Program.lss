
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ce6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000079  00800100  00800100  00001d5a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001d5a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000002b8  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002fb8  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ebd  00000000  00000000  00004ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001106  00000000  00000000  00005eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000614  00000000  00000000  00006fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000082b  00000000  00000000  000075d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002085  00000000  00000000  00007dff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000248  00000000  00000000  00009e84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	e5 03       	fmuls	r22, r21
      7e:	77 04       	cpc	r7, r7
      80:	01 05       	cpc	r16, r1
      82:	75 05       	cpc	r23, r5
      84:	b5 05       	cpc	r27, r5
      86:	31 06       	cpc	r3, r17
      88:	ae 06       	cpc	r10, r30
      8a:	4b 07       	cpc	r20, r27
      8c:	f1 07       	cpc	r31, r17
      8e:	df 03       	fmulsu	r21, r23
      90:	fa 08       	sbc	r15, r10

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a9 37       	cpi	r26, 0x79	; 121
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 a7 0b 	call	0x174e	; 0x174e <main>
      b2:	0c 94 71 0e 	jmp	0x1ce2	; 0x1ce2 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
      ce:	21 e2       	ldi	r18, 0x21	; 33
      d0:	31 e0       	ldi	r19, 0x01	; 1
      d2:	30 93 32 01 	sts	0x0132, r19
      d6:	20 93 31 01 	sts	0x0131, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      da:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id;  // populate ID field with ID Tag
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	70 93 2d 01 	sts	0x012D, r23
      e4:	60 93 2c 01 	sts	0x012C, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
      e8:	22 e0       	ldi	r18, 0x02	; 2
      ea:	20 93 2b 01 	sts	0x012B, r18
	message.dlc = 8;			 // Max length of a CAN message.
      ee:	28 e0       	ldi	r18, 0x08	; 8
      f0:	20 93 30 01 	sts	0x0130, r18
	mob_number = 4;
      f4:	24 e0       	ldi	r18, 0x04	; 4
      f6:	20 93 6e 01 	sts	0x016E, r18
      fa:	dc 01       	movw	r26, r24
      fc:	e1 e2       	ldi	r30, 0x21	; 33
      fe:	f1 e0       	ldi	r31, 0x01	; 1
     100:	89 e2       	ldi	r24, 0x29	; 41
     102:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     104:	2d 91       	ld	r18, X+
     106:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     108:	e8 17       	cp	r30, r24
     10a:	f9 07       	cpc	r31, r25
     10c:	d9 f7       	brne	.-10     	; 0x104 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     10e:	60 91 6e 01 	lds	r22, 0x016E
     112:	8a e2       	ldi	r24, 0x2A	; 42
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     11a:	81 11       	cpse	r24, r1
     11c:	f8 cf       	rjmp	.-16     	; 0x10e <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     11e:	60 91 6e 01 	lds	r22, 0x016E
     122:	8a e2       	ldi	r24, 0x2A	; 42
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 c7 09 	call	0x138e	; 0x138e <can_get_status>
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	c1 f3       	breq	.-16     	; 0x11e <can_send_message+0x50>

	return;
}
     12e:	08 95       	ret

00000130 <decode_command>:

void decode_command(uint8_t* command_array)
{		
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	ec 01       	movw	r28, r24
	uint8_t i, command  = *(command_array + 5);

	switch(command)
     136:	8d 81       	ldd	r24, Y+5	; 0x05
     138:	83 30       	cpi	r24, 0x03	; 3
     13a:	19 f1       	breq	.+70     	; 0x182 <decode_command+0x52>
     13c:	28 f4       	brcc	.+10     	; 0x148 <decode_command+0x18>
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	41 f0       	breq	.+16     	; 0x152 <decode_command+0x22>
     142:	82 30       	cpi	r24, 0x02	; 2
     144:	69 f0       	breq	.+26     	; 0x160 <decode_command+0x30>
     146:	3f c0       	rjmp	.+126    	; 0x1c6 <decode_command+0x96>
     148:	85 30       	cpi	r24, 0x05	; 5
     14a:	11 f1       	breq	.+68     	; 0x190 <decode_command+0x60>
     14c:	87 30       	cpi	r24, 0x07	; 7
     14e:	71 f1       	breq	.+92     	; 0x1ac <decode_command+0x7c>
     150:	3a c0       	rjmp	.+116    	; 0x1c6 <decode_command+0x96>
	{
		case REQ_RESPONSE :
			LED_blink(LED3);
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	0e 94 96 0b 	call	0x172c	; 0x172c <LED_blink>
			send_now = 1;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	80 93 3e 01 	sts	0x013E, r24
			return;
     15e:	33 c0       	rjmp	.+102    	; 0x1c6 <decode_command+0x96>
		case REQ_DATA :
			LED_blink(LED1);
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	0e 94 96 0b 	call	0x172c	; 0x172c <LED_blink>
			send_data = 1;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 65 01 	sts	0x0165, r24
     16c:	de 01       	movw	r26, r28
     16e:	e6 e3       	ldi	r30, 0x36	; 54
     170:	f1 e0       	ldi	r31, 0x01	; 1
     172:	8e e3       	ldi	r24, 0x3E	; 62
     174:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     176:	2d 91       	ld	r18, X+
     178:	21 93       	st	Z+, r18
			send_now = 1;
			return;
		case REQ_DATA :
			LED_blink(LED1);
			send_data = 1;
			for (i = 0; i < 8; i ++)
     17a:	e8 17       	cp	r30, r24
     17c:	f9 07       	cpc	r31, r25
     17e:	d9 f7       	brne	.-10     	; 0x176 <decode_command+0x46>
     180:	22 c0       	rjmp	.+68     	; 0x1c6 <decode_command+0x96>
			{
				data_req_arr[i] = *(command_array + i);
			}
			return;
		case REQ_HK :
			LED_blink(LED2);
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	0e 94 96 0b 	call	0x172c	; 0x172c <LED_blink>
			send_hk = 1;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	80 93 4e 01 	sts	0x014E, r24
			return;
     18e:	1b c0       	rjmp	.+54     	; 0x1c6 <decode_command+0x96>
		case REQ_READ:
			read_response = 1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 45 01 	sts	0x0145, r24
     196:	de 01       	movw	r26, r28
     198:	e0 e7       	ldi	r30, 0x70	; 112
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	88 e7       	ldi	r24, 0x78	; 120
     19e:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     1a0:	2d 91       	ld	r18, X+
     1a2:	21 93       	st	Z+, r18
			LED_blink(LED2);
			send_hk = 1;
			return;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1a4:	e8 17       	cp	r30, r24
     1a6:	f9 07       	cpc	r31, r25
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <decode_command+0x70>
     1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <decode_command+0x96>
			{
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 29 01 	sts	0x0129, r24
     1b2:	de 01       	movw	r26, r28
     1b4:	e0 e0       	ldi	r30, 0x00	; 0
     1b6:	f1 e0       	ldi	r31, 0x01	; 1
     1b8:	88 e0       	ldi	r24, 0x08	; 8
     1ba:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     1bc:	2d 91       	ld	r18, X+
     1be:	21 93       	st	Z+, r18
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     1c0:	e8 17       	cp	r30, r24
     1c2:	f9 07       	cpc	r31, r25
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <decode_command+0x8c>
		case SMALLTYPE_DEFAULT :
			return;
		default:
			return;
	}
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <set_up_msg>:

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     1cc:	10 92 35 01 	sts	0x0135, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     1d0:	95 e0       	ldi	r25, 0x05	; 5
     1d2:	90 93 2b 01 	sts	0x012B, r25
	message.dlc = 8;			 // Max length of a CAN message.
     1d6:	98 e0       	ldi	r25, 0x08	; 8
     1d8:	90 93 30 01 	sts	0x0130, r25
	mob_number = mailbox;
     1dc:	80 93 6e 01 	sts	0x016E, r24
	
	if(mailbox == 0)
     1e0:	81 11       	cpse	r24, r1
     1e2:	0e c0       	rjmp	.+28     	; 0x200 <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     1e4:	86 e4       	ldi	r24, 0x46	; 70
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	90 93 32 01 	sts	0x0132, r25
     1ec:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     1f0:	80 91 57 01 	lds	r24, 0x0157
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	90 93 2d 01 	sts	0x012D, r25
     1fa:	80 93 2c 01 	sts	0x012C, r24
		return;
     1fe:	08 95       	ret
	}
	if(mailbox == 1)
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	71 f4       	brne	.+28     	; 0x220 <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     204:	89 e0       	ldi	r24, 0x09	; 9
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	90 93 32 01 	sts	0x0132, r25
     20c:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[1];
     210:	80 91 58 01 	lds	r24, 0x0158
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	90 93 2d 01 	sts	0x012D, r25
     21a:	80 93 2c 01 	sts	0x012C, r24
		return;
     21e:	08 95       	ret
	}
	if(mailbox == 2)
     220:	82 30       	cpi	r24, 0x02	; 2
     222:	71 f4       	brne	.+28     	; 0x240 <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     224:	81 e1       	ldi	r24, 0x11	; 17
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	90 93 32 01 	sts	0x0132, r25
     22c:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[2];
     230:	80 91 59 01 	lds	r24, 0x0159
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	90 93 2d 01 	sts	0x012D, r25
     23a:	80 93 2c 01 	sts	0x012C, r24
		return;
     23e:	08 95       	ret
	}
	if(mailbox == 3)
     240:	83 30       	cpi	r24, 0x03	; 3
     242:	71 f4       	brne	.+28     	; 0x260 <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     244:	8d e5       	ldi	r24, 0x5D	; 93
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	90 93 32 01 	sts	0x0132, r25
     24c:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[3];
     250:	80 91 5a 01 	lds	r24, 0x015A
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	90 93 2d 01 	sts	0x012D, r25
     25a:	80 93 2c 01 	sts	0x012C, r24
		return;
     25e:	08 95       	ret
	}
	if(mailbox == 5)
     260:	85 30       	cpi	r24, 0x05	; 5
     262:	69 f4       	brne	.+26     	; 0x27e <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     264:	86 e6       	ldi	r24, 0x66	; 102
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	90 93 32 01 	sts	0x0132, r25
     26c:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[5];
     270:	80 91 5c 01 	lds	r24, 0x015C
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 2d 01 	sts	0x012D, r25
     27a:	80 93 2c 01 	sts	0x012C, r24
     27e:	08 95       	ret

00000280 <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     280:	81 11       	cpse	r24, r1
     282:	20 c0       	rjmp	.+64     	; 0x2c4 <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     284:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     288:	85 e0       	ldi	r24, 0x05	; 5
     28a:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     28e:	88 e0       	ldi	r24, 0x08	; 8
     290:	80 93 30 01 	sts	0x0130, r24
		mob_number = mailbox;
     294:	10 92 6e 01 	sts	0x016E, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     298:	86 e4       	ldi	r24, 0x46	; 70
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	90 93 32 01 	sts	0x0132, r25
     2a0:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     2a4:	80 91 57 01 	lds	r24, 0x0157
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 2d 01 	sts	0x012D, r25
     2ae:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     2b2:	60 91 6e 01 	lds	r22, 0x016E
     2b6:	8a e2       	ldi	r24, 0x2A	; 42
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     2be:	81 11       	cpse	r24, r1
     2c0:	f8 cf       	rjmp	.-16     	; 0x2b2 <clean_up_msg+0x32>
     2c2:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	01 f5       	brne	.+64     	; 0x308 <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2c8:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2cc:	85 e0       	ldi	r24, 0x05	; 5
     2ce:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     2d2:	88 e0       	ldi	r24, 0x08	; 8
     2d4:	80 93 30 01 	sts	0x0130, r24
		mob_number = mailbox;
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data1[0];
     2de:	89 e0       	ldi	r24, 0x09	; 9
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	90 93 32 01 	sts	0x0132, r25
     2e6:	80 93 31 01 	sts	0x0131, r24
		message.id.std = SUB0_ID1;
     2ea:	85 e1       	ldi	r24, 0x15	; 21
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 2d 01 	sts	0x012D, r25
     2f2:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     2f6:	60 91 6e 01 	lds	r22, 0x016E
     2fa:	8a e2       	ldi	r24, 0x2A	; 42
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     302:	81 11       	cpse	r24, r1
     304:	f8 cf       	rjmp	.-16     	; 0x2f6 <clean_up_msg+0x76>
     306:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	09 f5       	brne	.+66     	; 0x34e <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     30c:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     310:	85 e0       	ldi	r24, 0x05	; 5
     312:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     316:	88 e0       	ldi	r24, 0x08	; 8
     318:	80 93 30 01 	sts	0x0130, r24
		mob_number = mailbox;
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data2[0];
     322:	81 e1       	ldi	r24, 0x11	; 17
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	90 93 32 01 	sts	0x0132, r25
     32a:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[2];
     32e:	80 91 59 01 	lds	r24, 0x0159
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	90 93 2d 01 	sts	0x012D, r25
     338:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     33c:	60 91 6e 01 	lds	r22, 0x016E
     340:	8a e2       	ldi	r24, 0x2A	; 42
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     348:	81 11       	cpse	r24, r1
     34a:	f8 cf       	rjmp	.-16     	; 0x33c <clean_up_msg+0xbc>
     34c:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     34e:	83 30       	cpi	r24, 0x03	; 3
     350:	09 f5       	brne	.+66     	; 0x394 <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     352:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     35c:	88 e0       	ldi	r24, 0x08	; 8
     35e:	80 93 30 01 	sts	0x0130, r24
		mob_number = mailbox;
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data3[0];
     368:	8d e5       	ldi	r24, 0x5D	; 93
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	90 93 32 01 	sts	0x0132, r25
     370:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[3];
     374:	80 91 5a 01 	lds	r24, 0x015A
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	90 93 2d 01 	sts	0x012D, r25
     37e:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     382:	60 91 6e 01 	lds	r22, 0x016E
     386:	8a e2       	ldi	r24, 0x2A	; 42
     388:	91 e0       	ldi	r25, 0x01	; 1
     38a:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     38e:	81 11       	cpse	r24, r1
     390:	f8 cf       	rjmp	.-16     	; 0x382 <clean_up_msg+0x102>
     392:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     394:	85 30       	cpi	r24, 0x05	; 5
     396:	f1 f4       	brne	.+60     	; 0x3d4 <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     398:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     39c:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3a0:	98 e0       	ldi	r25, 0x08	; 8
     3a2:	90 93 30 01 	sts	0x0130, r25
		mob_number = mailbox;
     3a6:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data5[0];
     3aa:	86 e6       	ldi	r24, 0x66	; 102
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	90 93 32 01 	sts	0x0132, r25
     3b2:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[5];
     3b6:	80 91 5c 01 	lds	r24, 0x015C
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	90 93 2d 01 	sts	0x012D, r25
     3c0:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3c4:	60 91 6e 01 	lds	r22, 0x016E
     3c8:	8a e2       	ldi	r24, 0x2A	; 42
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     3d0:	81 11       	cpse	r24, r1
     3d2:	f8 cf       	rjmp	.-16     	; 0x3c4 <clean_up_msg+0x144>
     3d4:	08 95       	ret

000003d6 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     3da:	85 e0       	ldi	r24, 0x05	; 5
     3dc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     3e0:	60 91 6e 01 	lds	r22, 0x016E
     3e4:	8a e2       	ldi	r24, 0x2A	; 42
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	0e 94 c7 09 	call	0x138e	; 0x138e <can_get_status>
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	11 f1       	breq	.+68     	; 0x434 <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     3f0:	80 91 33 01 	lds	r24, 0x0133
     3f4:	80 32       	cpi	r24, 0x20	; 32
     3f6:	d9 f4       	brne	.+54     	; 0x42e <can_check_housekeep+0x58>
     3f8:	a0 91 31 01 	lds	r26, 0x0131
     3fc:	b0 91 32 01 	lds	r27, 0x0132
     400:	c7 e5       	ldi	r28, 0x57	; 87
     402:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     404:	ef e4       	ldi	r30, 0x4F	; 79
     406:	f1 e0       	ldi	r31, 0x01	; 1
     408:	8d 91       	ld	r24, X+
     40a:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     40c:	ec 17       	cp	r30, r28
     40e:	fd 07       	cpc	r31, r29
     410:	d9 f7       	brne	.-10     	; 0x408 <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     412:	80 91 55 01 	lds	r24, 0x0155
     416:	82 30       	cpi	r24, 0x02	; 2
     418:	21 f4       	brne	.+8      	; 0x422 <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     41a:	8f e4       	ldi	r24, 0x4F	; 79
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	0e 94 98 00 	call	0x130	; 0x130 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     422:	ef e4       	ldi	r30, 0x4F	; 79
     424:	f1 e0       	ldi	r31, 0x01	; 1
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     426:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     428:	ec 17       	cp	r30, r28
     42a:	fd 07       	cpc	r31, r29
     42c:	e1 f7       	brne	.-8      	; 0x426 <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     42e:	85 e0       	ldi	r24, 0x05	; 5
     430:	0e 94 40 01 	call	0x280	; 0x280 <clean_up_msg>
	}	
	return;
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
     43a:	9f 92       	push	r9
     43c:	af 92       	push	r10
     43e:	bf 92       	push	r11
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     450:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     452:	03 e3       	ldi	r16, 0x33	; 51
     454:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     456:	0f 2e       	mov	r0, r31
     458:	f1 e3       	ldi	r31, 0x31	; 49
     45a:	af 2e       	mov	r10, r31
     45c:	f1 e0       	ldi	r31, 0x01	; 1
     45e:	bf 2e       	mov	r11, r31
     460:	f0 2d       	mov	r31, r0
     462:	c7 e5       	ldi	r28, 0x57	; 87
     464:	d1 e0       	ldi	r29, 0x01	; 1
     466:	0f 2e       	mov	r0, r31
     468:	ff e4       	ldi	r31, 0x4F	; 79
     46a:	ef 2e       	mov	r14, r31
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	ff 2e       	mov	r15, r31
     470:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     472:	0f 2e       	mov	r0, r31
     474:	f5 e5       	ldi	r31, 0x55	; 85
     476:	cf 2e       	mov	r12, r31
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	df 2e       	mov	r13, r31
     47c:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     47e:	89 2d       	mov	r24, r9
     480:	0e 94 e6 00 	call	0x1cc	; 0x1cc <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     484:	60 91 6e 01 	lds	r22, 0x016E
     488:	8a e2       	ldi	r24, 0x2A	; 42
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 c7 09 	call	0x138e	; 0x138e <can_get_status>
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	e1 f0       	breq	.+56     	; 0x4cc <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     494:	f8 01       	movw	r30, r16
     496:	80 81       	ld	r24, Z
     498:	80 32       	cpi	r24, 0x20	; 32
     49a:	a9 f4       	brne	.+42     	; 0x4c6 <can_check_general+0x8c>
     49c:	f5 01       	movw	r30, r10
     49e:	a0 81       	ld	r26, Z
     4a0:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4a2:	f7 01       	movw	r30, r14
     4a4:	8d 91       	ld	r24, X+
     4a6:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     4a8:	ec 17       	cp	r30, r28
     4aa:	fd 07       	cpc	r31, r29
     4ac:	d9 f7       	brne	.-10     	; 0x4a4 <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     4ae:	f6 01       	movw	r30, r12
     4b0:	80 81       	ld	r24, Z
     4b2:	82 30       	cpi	r24, 0x02	; 2
     4b4:	19 f4       	brne	.+6      	; 0x4bc <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     4b6:	c7 01       	movw	r24, r14
     4b8:	0e 94 98 00 	call	0x130	; 0x130 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4bc:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     4be:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     4c0:	ec 17       	cp	r30, r28
     4c2:	fd 07       	cpc	r31, r29
     4c4:	e1 f7       	brne	.-8      	; 0x4be <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     4c6:	89 2d       	mov	r24, r9
     4c8:	0e 94 40 01 	call	0x280	; 0x280 <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     4cc:	93 94       	inc	r9
     4ce:	f4 e0       	ldi	r31, 0x04	; 4
     4d0:	9f 12       	cpse	r9, r31
     4d2:	d5 cf       	rjmp	.-86     	; 0x47e <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     4d4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <can_check_housekeep>
	
	return;
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	df 90       	pop	r13
     4e6:	cf 90       	pop	r12
     4e8:	bf 90       	pop	r11
     4ea:	af 90       	pop	r10
     4ec:	9f 90       	pop	r9
     4ee:	08 95       	ret

000004f0 <can_init_mobs>:
/*		This function initializes our can message objects with their ID	*/
/*		and sets whether or not they are in transmit mode or receive.	*/
/************************************************************************/

void can_init_mobs(void)
{
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
		id_array[5] = SUB0_ID5;
	}
	
	if(SELF_ID == 1)
	{
		id_array[0] = SUB1_ID0;
     4f4:	8a e1       	ldi	r24, 0x1A	; 26
     4f6:	80 93 57 01 	sts	0x0157, r24
		id_array[1] = SUB1_ID1;
     4fa:	8b e1       	ldi	r24, 0x1B	; 27
     4fc:	80 93 58 01 	sts	0x0158, r24
		id_array[2] = SUB1_ID2;
     500:	8c e1       	ldi	r24, 0x1C	; 28
     502:	80 93 59 01 	sts	0x0159, r24
		id_array[3] = SUB1_ID3;
     506:	8d e1       	ldi	r24, 0x1D	; 29
     508:	80 93 5a 01 	sts	0x015A, r24
		id_array[4] = SUB1_ID4;
     50c:	8e e1       	ldi	r24, 0x1E	; 30
     50e:	80 93 5b 01 	sts	0x015B, r24
		id_array[5] = SUB1_ID5;
     512:	8f e1       	ldi	r24, 0x1F	; 31
     514:	80 93 5c 01 	sts	0x015C, r24
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     518:	86 e4       	ldi	r24, 0x46	; 70
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	90 93 32 01 	sts	0x0132, r25
     520:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     524:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     528:	8a e1       	ldi	r24, 0x1A	; 26
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	90 93 2d 01 	sts	0x012D, r25
     530:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     534:	85 e0       	ldi	r24, 0x05	; 5
     536:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;			 // Max length of a CAN message.
     53a:	88 e0       	ldi	r24, 0x08	; 8
     53c:	80 93 30 01 	sts	0x0130, r24
	mob_number = 0;
     540:	10 92 6e 01 	sts	0x016E, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     544:	60 91 6e 01 	lds	r22, 0x016E
     548:	8a e2       	ldi	r24, 0x2A	; 42
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     550:	81 11       	cpse	r24, r1
     552:	f8 cf       	rjmp	.-16     	; 0x544 <can_init_mobs+0x54>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     554:	89 e0       	ldi	r24, 0x09	; 9
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	90 93 32 01 	sts	0x0132, r25
     55c:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;
     560:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[1];
     564:	80 91 58 01 	lds	r24, 0x0158
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	90 93 2d 01 	sts	0x012D, r25
     56e:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;
     572:	85 e0       	ldi	r24, 0x05	; 5
     574:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;
     578:	88 e0       	ldi	r24, 0x08	; 8
     57a:	80 93 30 01 	sts	0x0130, r24
	mob_number = 1;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	80 93 6e 01 	sts	0x016E, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     584:	60 91 6e 01 	lds	r22, 0x016E
     588:	8a e2       	ldi	r24, 0x2A	; 42
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     590:	81 11       	cpse	r24, r1
     592:	f8 cf       	rjmp	.-16     	; 0x584 <can_init_mobs+0x94>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     594:	81 e1       	ldi	r24, 0x11	; 17
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	90 93 32 01 	sts	0x0132, r25
     59c:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;
     5a0:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[2];
     5a4:	80 91 59 01 	lds	r24, 0x0159
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	90 93 2d 01 	sts	0x012D, r25
     5ae:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;
     5b2:	85 e0       	ldi	r24, 0x05	; 5
     5b4:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;
     5b8:	88 e0       	ldi	r24, 0x08	; 8
     5ba:	80 93 30 01 	sts	0x0130, r24
	mob_number = 2;
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	80 93 6e 01 	sts	0x016E, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     5c4:	60 91 6e 01 	lds	r22, 0x016E
     5c8:	8a e2       	ldi	r24, 0x2A	; 42
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     5d0:	81 11       	cpse	r24, r1
     5d2:	f8 cf       	rjmp	.-16     	; 0x5c4 <can_init_mobs+0xd4>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     5d4:	8d e5       	ldi	r24, 0x5D	; 93
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	90 93 32 01 	sts	0x0132, r25
     5dc:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;
     5e0:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[3];
     5e4:	80 91 5a 01 	lds	r24, 0x015A
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	90 93 2d 01 	sts	0x012D, r25
     5ee:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;
     5f2:	85 e0       	ldi	r24, 0x05	; 5
     5f4:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	80 93 30 01 	sts	0x0130, r24
	mob_number = 3;
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	80 93 6e 01 	sts	0x016E, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     604:	60 91 6e 01 	lds	r22, 0x016E
     608:	8a e2       	ldi	r24, 0x2A	; 42
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     610:	81 11       	cpse	r24, r1
     612:	f8 cf       	rjmp	.-16     	; 0x604 <can_init_mobs+0x114>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     614:	86 e6       	ldi	r24, 0x66	; 102
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	90 93 32 01 	sts	0x0132, r25
     61c:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     620:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     624:	80 91 5c 01 	lds	r24, 0x015C
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	90 93 2d 01 	sts	0x012D, r25
     62e:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     632:	85 e0       	ldi	r24, 0x05	; 5
     634:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;				// Max length of a CAN message.
     638:	98 e0       	ldi	r25, 0x08	; 8
     63a:	90 93 30 01 	sts	0x0130, r25
	mob_number = 5;
     63e:	80 93 6e 01 	sts	0x016E, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     642:	60 91 6e 01 	lds	r22, 0x016E
     646:	8a e2       	ldi	r24, 0x2A	; 42
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 9b 03 	call	0x736	; 0x736 <can_cmd>
     64e:	81 11       	cpse	r24, r1
     650:	f8 cf       	rjmp	.-16     	; 0x642 <can_init_mobs+0x152>
     652:	ef e4       	ldi	r30, 0x4F	; 79
     654:	f1 e0       	ldi	r31, 0x01	; 1
     656:	89 e1       	ldi	r24, 0x19	; 25
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	c0 e7       	ldi	r28, 0x70	; 112
     65c:	d1 e0       	ldi	r29, 0x01	; 1
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	51 e0       	ldi	r21, 0x01	; 1
     662:	27 e5       	ldi	r18, 0x57	; 87
     664:	31 e0       	ldi	r19, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     666:	11 92       	st	Z+, r1
		send_arr[i] = 0;
     668:	dc 01       	movw	r26, r24
     66a:	1d 92       	st	X+, r1
     66c:	cd 01       	movw	r24, r26
		read_arr[i] = 0;
     66e:	19 92       	st	Y+, r1
		write_arr[i] = 0;
     670:	da 01       	movw	r26, r20
     672:	1d 92       	st	X+, r1
     674:	ad 01       	movw	r20, r26
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     676:	e2 17       	cp	r30, r18
     678:	f3 07       	cpc	r31, r19
     67a:	a9 f7       	brne	.-22     	; 0x666 <can_init_mobs+0x176>
		read_arr[i] = 0;
		write_arr[i] = 0;
	}
	
	/* Initialize Global Command Flags to zero */
	send_now = 0;
     67c:	10 92 3e 01 	sts	0x013E, r1
	send_hk = 0;
     680:	10 92 4e 01 	sts	0x014E, r1
	send_data = 0;
     684:	10 92 65 01 	sts	0x0165, r1
	read_response = 0;
     688:	10 92 45 01 	sts	0x0145, r1
	write_response = 0;
     68c:	10 92 29 01 	sts	0x0129, r1
	
	return;
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     696:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     698:	ad ee       	ldi	r26, 0xED	; 237
     69a:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     69c:	3e ee       	ldi	r19, 0xEE	; 238
     69e:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     6a0:	98 2f       	mov	r25, r24
     6a2:	92 95       	swap	r25
     6a4:	90 7f       	andi	r25, 0xF0	; 240
     6a6:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     6a8:	e3 2f       	mov	r30, r19
     6aa:	f2 2f       	mov	r31, r18
     6ac:	11 92       	st	Z+, r1
     6ae:	e8 3f       	cpi	r30, 0xF8	; 248
     6b0:	f1 05       	cpc	r31, r1
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     6b4:	8f 5f       	subi	r24, 0xFF	; 255
     6b6:	86 30       	cpi	r24, 0x06	; 6
     6b8:	99 f7       	brne	.-26     	; 0x6a0 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     6ba:	08 95       	ret

000006bc <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     6bc:	80 91 ef 00 	lds	r24, 0x00EF
     6c0:	80 7c       	andi	r24, 0xC0	; 192
     6c2:	61 f0       	breq	.+24     	; 0x6dc <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     6c4:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     6c8:	98 2f       	mov	r25, r24
     6ca:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     6cc:	28 2f       	mov	r18, r24
     6ce:	20 76       	andi	r18, 0x60	; 96
     6d0:	20 32       	cpi	r18, 0x20	; 32
     6d2:	31 f0       	breq	.+12     	; 0x6e0 <can_get_mob_status+0x24>
     6d4:	90 34       	cpi	r25, 0x40	; 64
     6d6:	31 f0       	breq	.+12     	; 0x6e4 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     6d8:	8f 71       	andi	r24, 0x1F	; 31
     6da:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     6dc:	8f ef       	ldi	r24, 0xFF	; 255
     6de:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     6e0:	89 2f       	mov	r24, r25
     6e2:	08 95       	ret
     6e4:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     6e6:	08 95       	ret

000006e8 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     6e8:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     6ea:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     6ec:	aa ef       	ldi	r26, 0xFA	; 250
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	9c 91       	ld	r25, X
     6f2:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     6f4:	8f 5f       	subi	r24, 0xFF	; 255
     6f6:	88 30       	cpi	r24, 0x08	; 8
     6f8:	d9 f7       	brne	.-10     	; 0x6f0 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     6fa:	08 95       	ret

000006fc <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	80 93 e2 00 	sts	0x00E2, r24
     708:	8c e0       	ldi	r24, 0x0C	; 12
     70a:	80 93 e3 00 	sts	0x00E3, r24
     70e:	87 e3       	ldi	r24, 0x37	; 55
     710:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	08 95       	ret

00000718 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     718:	0e 94 7e 03 	call	0x6fc	; 0x6fc <can_fixed_baudrate>
     71c:	88 23       	and	r24, r24
     71e:	49 f0       	breq	.+18     	; 0x732 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     720:	0e 94 4b 03 	call	0x696	; 0x696 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     724:	e8 ed       	ldi	r30, 0xD8	; 216
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	82 60       	ori	r24, 0x02	; 2
     72c:	80 83       	st	Z, r24
    return (1);
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     732:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     734:	08 95       	ret

00000736 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     742:	11 96       	adiw	r26, 0x01	; 1
     744:	8c 91       	ld	r24, X
     746:	11 97       	sbiw	r26, 0x01	; 1
     748:	8c 30       	cpi	r24, 0x0C	; 12
     74a:	b1 f4       	brne	.+44     	; 0x778 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     74c:	19 96       	adiw	r26, 0x09	; 9
     74e:	8c 91       	ld	r24, X
     750:	19 97       	sbiw	r26, 0x09	; 9
     752:	80 36       	cpi	r24, 0x60	; 96
     754:	69 f4       	brne	.+26     	; 0x770 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     756:	86 2f       	mov	r24, r22
     758:	82 95       	swap	r24
     75a:	80 7f       	andi	r24, 0xF0	; 240
     75c:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     760:	ef ee       	ldi	r30, 0xEF	; 239
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	8f 73       	andi	r24, 0x3F	; 63
     768:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     76a:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     76e:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     770:	19 96       	adiw	r26, 0x09	; 9
     772:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	07 c6       	rjmp	.+3086   	; 0x1386 <__stack+0xa87>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     778:	86 2f       	mov	r24, r22
     77a:	82 95       	swap	r24
     77c:	80 7f       	andi	r24, 0xF0	; 240
     77e:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     782:	80 91 ef 00 	lds	r24, 0x00EF
     786:	80 7c       	andi	r24, 0xC0	; 192
     788:	09 f0       	breq	.+2      	; 0x78c <can_cmd+0x56>
     78a:	f9 c5       	rjmp	.+3058   	; 0x137e <__stack+0xa7f>
    {
      cmd->status = MOB_PENDING; 
     78c:	80 e6       	ldi	r24, 0x60	; 96
     78e:	19 96       	adiw	r26, 0x09	; 9
     790:	8c 93       	st	X, r24
     792:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     794:	6c 93       	st	X, r22
      Can_clear_mob();
     796:	ee ee       	ldi	r30, 0xEE	; 238
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	11 92       	st	Z+, r1
     79c:	e8 3f       	cpi	r30, 0xF8	; 248
     79e:	f1 05       	cpc	r31, r1
     7a0:	e1 f7       	brne	.-8      	; 0x79a <can_cmd+0x64>
          
      switch (cmd->cmd)
     7a2:	11 96       	adiw	r26, 0x01	; 1
     7a4:	4c 91       	ld	r20, X
     7a6:	11 97       	sbiw	r26, 0x01	; 1
     7a8:	50 e0       	ldi	r21, 0x00	; 0
     7aa:	fa 01       	movw	r30, r20
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	eb 30       	cpi	r30, 0x0B	; 11
     7b0:	f1 05       	cpc	r31, r1
     7b2:	08 f0       	brcs	.+2      	; 0x7b6 <can_cmd+0x80>
     7b4:	e0 c5       	rjmp	.+3008   	; 0x1376 <__stack+0xa77>
     7b6:	e2 5c       	subi	r30, 0xC2	; 194
     7b8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ba:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     7be:	16 96       	adiw	r26, 0x06	; 6
     7c0:	8c 91       	ld	r24, X
     7c2:	16 97       	sbiw	r26, 0x06	; 6
     7c4:	81 11       	cpse	r24, r1
     7c6:	b7 c4       	rjmp	.+2414   	; 0x1136 <__stack+0x837>
     7c8:	c8 c4       	rjmp	.+2448   	; 0x115a <__stack+0x85b>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7ca:	1b 96       	adiw	r26, 0x0b	; 11
     7cc:	8c 91       	ld	r24, X
     7ce:	1b 97       	sbiw	r26, 0x0b	; 11
     7d0:	88 23       	and	r24, r24
     7d2:	d9 f1       	breq	.+118    	; 0x84a <can_cmd+0x114>
     7d4:	14 96       	adiw	r26, 0x04	; 4
     7d6:	9c 91       	ld	r25, X
     7d8:	14 97       	sbiw	r26, 0x04	; 4
     7da:	92 95       	swap	r25
     7dc:	96 95       	lsr	r25
     7de:	97 70       	andi	r25, 0x07	; 7
     7e0:	15 96       	adiw	r26, 0x05	; 5
     7e2:	8c 91       	ld	r24, X
     7e4:	15 97       	sbiw	r26, 0x05	; 5
     7e6:	88 0f       	add	r24, r24
     7e8:	88 0f       	add	r24, r24
     7ea:	88 0f       	add	r24, r24
     7ec:	89 0f       	add	r24, r25
     7ee:	80 93 f3 00 	sts	0x00F3, r24
     7f2:	13 96       	adiw	r26, 0x03	; 3
     7f4:	9c 91       	ld	r25, X
     7f6:	13 97       	sbiw	r26, 0x03	; 3
     7f8:	92 95       	swap	r25
     7fa:	96 95       	lsr	r25
     7fc:	97 70       	andi	r25, 0x07	; 7
     7fe:	14 96       	adiw	r26, 0x04	; 4
     800:	8c 91       	ld	r24, X
     802:	14 97       	sbiw	r26, 0x04	; 4
     804:	88 0f       	add	r24, r24
     806:	88 0f       	add	r24, r24
     808:	88 0f       	add	r24, r24
     80a:	89 0f       	add	r24, r25
     80c:	80 93 f2 00 	sts	0x00F2, r24
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	9c 91       	ld	r25, X
     814:	12 97       	sbiw	r26, 0x02	; 2
     816:	92 95       	swap	r25
     818:	96 95       	lsr	r25
     81a:	97 70       	andi	r25, 0x07	; 7
     81c:	13 96       	adiw	r26, 0x03	; 3
     81e:	8c 91       	ld	r24, X
     820:	13 97       	sbiw	r26, 0x03	; 3
     822:	88 0f       	add	r24, r24
     824:	88 0f       	add	r24, r24
     826:	88 0f       	add	r24, r24
     828:	89 0f       	add	r24, r25
     82a:	80 93 f1 00 	sts	0x00F1, r24
     82e:	12 96       	adiw	r26, 0x02	; 2
     830:	8c 91       	ld	r24, X
     832:	12 97       	sbiw	r26, 0x02	; 2
     834:	88 0f       	add	r24, r24
     836:	88 0f       	add	r24, r24
     838:	88 0f       	add	r24, r24
     83a:	80 93 f0 00 	sts	0x00F0, r24
     83e:	ef ee       	ldi	r30, 0xEF	; 239
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	80 61       	ori	r24, 0x10	; 16
     846:	80 83       	st	Z, r24
     848:	1c c0       	rjmp	.+56     	; 0x882 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     84a:	12 96       	adiw	r26, 0x02	; 2
     84c:	8c 91       	ld	r24, X
     84e:	12 97       	sbiw	r26, 0x02	; 2
     850:	86 95       	lsr	r24
     852:	86 95       	lsr	r24
     854:	86 95       	lsr	r24
     856:	13 96       	adiw	r26, 0x03	; 3
     858:	9c 91       	ld	r25, X
     85a:	13 97       	sbiw	r26, 0x03	; 3
     85c:	20 e2       	ldi	r18, 0x20	; 32
     85e:	92 9f       	mul	r25, r18
     860:	80 0d       	add	r24, r0
     862:	11 24       	eor	r1, r1
     864:	80 93 f3 00 	sts	0x00F3, r24
     868:	12 96       	adiw	r26, 0x02	; 2
     86a:	8c 91       	ld	r24, X
     86c:	12 97       	sbiw	r26, 0x02	; 2
     86e:	82 95       	swap	r24
     870:	88 0f       	add	r24, r24
     872:	80 7e       	andi	r24, 0xE0	; 224
     874:	80 93 f2 00 	sts	0x00F2, r24
     878:	ef ee       	ldi	r30, 0xEF	; 239
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	8f 7e       	andi	r24, 0xEF	; 239
     880:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     882:	16 96       	adiw	r26, 0x06	; 6
     884:	8c 91       	ld	r24, X
     886:	16 97       	sbiw	r26, 0x06	; 6
     888:	88 23       	and	r24, r24
     88a:	91 f0       	breq	.+36     	; 0x8b0 <can_cmd+0x17a>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	8a ef       	ldi	r24, 0xFA	; 250
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	17 96       	adiw	r26, 0x07	; 7
     894:	ed 91       	ld	r30, X+
     896:	fc 91       	ld	r31, X
     898:	18 97       	sbiw	r26, 0x08	; 8
     89a:	e2 0f       	add	r30, r18
     89c:	f1 1d       	adc	r31, r1
     89e:	30 81       	ld	r19, Z
     8a0:	fc 01       	movw	r30, r24
     8a2:	30 83       	st	Z, r19
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	16 96       	adiw	r26, 0x06	; 6
     8a8:	3c 91       	ld	r19, X
     8aa:	16 97       	sbiw	r26, 0x06	; 6
     8ac:	23 17       	cp	r18, r19
     8ae:	88 f3       	brcs	.-30     	; 0x892 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     8b0:	1a 96       	adiw	r26, 0x0a	; 10
     8b2:	8c 91       	ld	r24, X
     8b4:	1a 97       	sbiw	r26, 0x0a	; 10
     8b6:	88 23       	and	r24, r24
     8b8:	31 f0       	breq	.+12     	; 0x8c6 <can_cmd+0x190>
     8ba:	e0 ef       	ldi	r30, 0xF0	; 240
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	84 60       	ori	r24, 0x04	; 4
     8c2:	80 83       	st	Z, r24
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <can_cmd+0x19a>
            else Can_clear_rtr();    
     8c6:	e0 ef       	ldi	r30, 0xF0	; 240
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	8b 7f       	andi	r24, 0xFB	; 251
     8ce:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     8d0:	ef ee       	ldi	r30, 0xEF	; 239
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	90 81       	ld	r25, Z
     8d6:	16 96       	adiw	r26, 0x06	; 6
     8d8:	8c 91       	ld	r24, X
     8da:	89 2b       	or	r24, r25
     8dc:	80 83       	st	Z, r24
          Can_config_tx();
     8de:	80 81       	ld	r24, Z
     8e0:	8f 73       	andi	r24, 0x3F	; 63
     8e2:	80 83       	st	Z, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	80 64       	ori	r24, 0x40	; 64
     8e8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     8ec:	4c c5       	rjmp	.+2712   	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8ee:	1b 96       	adiw	r26, 0x0b	; 11
     8f0:	8c 91       	ld	r24, X
     8f2:	1b 97       	sbiw	r26, 0x0b	; 11
     8f4:	88 23       	and	r24, r24
     8f6:	d9 f1       	breq	.+118    	; 0x96e <__stack+0x6f>
     8f8:	14 96       	adiw	r26, 0x04	; 4
     8fa:	9c 91       	ld	r25, X
     8fc:	14 97       	sbiw	r26, 0x04	; 4
     8fe:	92 95       	swap	r25
     900:	96 95       	lsr	r25
     902:	97 70       	andi	r25, 0x07	; 7
     904:	15 96       	adiw	r26, 0x05	; 5
     906:	8c 91       	ld	r24, X
     908:	15 97       	sbiw	r26, 0x05	; 5
     90a:	88 0f       	add	r24, r24
     90c:	88 0f       	add	r24, r24
     90e:	88 0f       	add	r24, r24
     910:	89 0f       	add	r24, r25
     912:	80 93 f3 00 	sts	0x00F3, r24
     916:	13 96       	adiw	r26, 0x03	; 3
     918:	9c 91       	ld	r25, X
     91a:	13 97       	sbiw	r26, 0x03	; 3
     91c:	92 95       	swap	r25
     91e:	96 95       	lsr	r25
     920:	97 70       	andi	r25, 0x07	; 7
     922:	14 96       	adiw	r26, 0x04	; 4
     924:	8c 91       	ld	r24, X
     926:	14 97       	sbiw	r26, 0x04	; 4
     928:	88 0f       	add	r24, r24
     92a:	88 0f       	add	r24, r24
     92c:	88 0f       	add	r24, r24
     92e:	89 0f       	add	r24, r25
     930:	80 93 f2 00 	sts	0x00F2, r24
     934:	12 96       	adiw	r26, 0x02	; 2
     936:	9c 91       	ld	r25, X
     938:	12 97       	sbiw	r26, 0x02	; 2
     93a:	92 95       	swap	r25
     93c:	96 95       	lsr	r25
     93e:	97 70       	andi	r25, 0x07	; 7
     940:	13 96       	adiw	r26, 0x03	; 3
     942:	8c 91       	ld	r24, X
     944:	13 97       	sbiw	r26, 0x03	; 3
     946:	88 0f       	add	r24, r24
     948:	88 0f       	add	r24, r24
     94a:	88 0f       	add	r24, r24
     94c:	89 0f       	add	r24, r25
     94e:	80 93 f1 00 	sts	0x00F1, r24
     952:	12 96       	adiw	r26, 0x02	; 2
     954:	8c 91       	ld	r24, X
     956:	12 97       	sbiw	r26, 0x02	; 2
     958:	88 0f       	add	r24, r24
     95a:	88 0f       	add	r24, r24
     95c:	88 0f       	add	r24, r24
     95e:	80 93 f0 00 	sts	0x00F0, r24
     962:	ef ee       	ldi	r30, 0xEF	; 239
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	80 61       	ori	r24, 0x10	; 16
     96a:	80 83       	st	Z, r24
     96c:	1c c0       	rjmp	.+56     	; 0x9a6 <__stack+0xa7>
          else              { Can_set_std_id(cmd->id.std);}
     96e:	12 96       	adiw	r26, 0x02	; 2
     970:	8c 91       	ld	r24, X
     972:	12 97       	sbiw	r26, 0x02	; 2
     974:	86 95       	lsr	r24
     976:	86 95       	lsr	r24
     978:	86 95       	lsr	r24
     97a:	13 96       	adiw	r26, 0x03	; 3
     97c:	9c 91       	ld	r25, X
     97e:	13 97       	sbiw	r26, 0x03	; 3
     980:	f0 e2       	ldi	r31, 0x20	; 32
     982:	9f 9f       	mul	r25, r31
     984:	80 0d       	add	r24, r0
     986:	11 24       	eor	r1, r1
     988:	80 93 f3 00 	sts	0x00F3, r24
     98c:	12 96       	adiw	r26, 0x02	; 2
     98e:	8c 91       	ld	r24, X
     990:	12 97       	sbiw	r26, 0x02	; 2
     992:	82 95       	swap	r24
     994:	88 0f       	add	r24, r24
     996:	80 7e       	andi	r24, 0xE0	; 224
     998:	80 93 f2 00 	sts	0x00F2, r24
     99c:	ef ee       	ldi	r30, 0xEF	; 239
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	8f 7e       	andi	r24, 0xEF	; 239
     9a4:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     9a6:	16 96       	adiw	r26, 0x06	; 6
     9a8:	8c 91       	ld	r24, X
     9aa:	16 97       	sbiw	r26, 0x06	; 6
     9ac:	88 23       	and	r24, r24
     9ae:	91 f0       	breq	.+36     	; 0x9d4 <__stack+0xd5>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	8a ef       	ldi	r24, 0xFA	; 250
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	17 96       	adiw	r26, 0x07	; 7
     9b8:	ed 91       	ld	r30, X+
     9ba:	fc 91       	ld	r31, X
     9bc:	18 97       	sbiw	r26, 0x08	; 8
     9be:	e2 0f       	add	r30, r18
     9c0:	f1 1d       	adc	r31, r1
     9c2:	30 81       	ld	r19, Z
     9c4:	fc 01       	movw	r30, r24
     9c6:	30 83       	st	Z, r19
     9c8:	2f 5f       	subi	r18, 0xFF	; 255
     9ca:	16 96       	adiw	r26, 0x06	; 6
     9cc:	3c 91       	ld	r19, X
     9ce:	16 97       	sbiw	r26, 0x06	; 6
     9d0:	23 17       	cp	r18, r19
     9d2:	88 f3       	brcs	.-30     	; 0x9b6 <__stack+0xb7>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     9d4:	1a 96       	adiw	r26, 0x0a	; 10
     9d6:	1c 92       	st	X, r1
     9d8:	1a 97       	sbiw	r26, 0x0a	; 10
     9da:	e0 ef       	ldi	r30, 0xF0	; 240
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	8b 7f       	andi	r24, 0xFB	; 251
     9e2:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     9e4:	ef ee       	ldi	r30, 0xEF	; 239
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	90 81       	ld	r25, Z
     9ea:	16 96       	adiw	r26, 0x06	; 6
     9ec:	8c 91       	ld	r24, X
     9ee:	89 2b       	or	r24, r25
     9f0:	80 83       	st	Z, r24
          Can_config_tx();
     9f2:	80 81       	ld	r24, Z
     9f4:	8f 73       	andi	r24, 0x3F	; 63
     9f6:	80 83       	st	Z, r24
     9f8:	80 81       	ld	r24, Z
     9fa:	80 64       	ori	r24, 0x40	; 64
     9fc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     9fe:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a00:	c2 c4       	rjmp	.+2436   	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a02:	1b 96       	adiw	r26, 0x0b	; 11
     a04:	8c 91       	ld	r24, X
     a06:	1b 97       	sbiw	r26, 0x0b	; 11
     a08:	88 23       	and	r24, r24
     a0a:	d9 f1       	breq	.+118    	; 0xa82 <__stack+0x183>
     a0c:	14 96       	adiw	r26, 0x04	; 4
     a0e:	9c 91       	ld	r25, X
     a10:	14 97       	sbiw	r26, 0x04	; 4
     a12:	92 95       	swap	r25
     a14:	96 95       	lsr	r25
     a16:	97 70       	andi	r25, 0x07	; 7
     a18:	15 96       	adiw	r26, 0x05	; 5
     a1a:	8c 91       	ld	r24, X
     a1c:	15 97       	sbiw	r26, 0x05	; 5
     a1e:	88 0f       	add	r24, r24
     a20:	88 0f       	add	r24, r24
     a22:	88 0f       	add	r24, r24
     a24:	89 0f       	add	r24, r25
     a26:	80 93 f3 00 	sts	0x00F3, r24
     a2a:	13 96       	adiw	r26, 0x03	; 3
     a2c:	9c 91       	ld	r25, X
     a2e:	13 97       	sbiw	r26, 0x03	; 3
     a30:	92 95       	swap	r25
     a32:	96 95       	lsr	r25
     a34:	97 70       	andi	r25, 0x07	; 7
     a36:	14 96       	adiw	r26, 0x04	; 4
     a38:	8c 91       	ld	r24, X
     a3a:	14 97       	sbiw	r26, 0x04	; 4
     a3c:	88 0f       	add	r24, r24
     a3e:	88 0f       	add	r24, r24
     a40:	88 0f       	add	r24, r24
     a42:	89 0f       	add	r24, r25
     a44:	80 93 f2 00 	sts	0x00F2, r24
     a48:	12 96       	adiw	r26, 0x02	; 2
     a4a:	9c 91       	ld	r25, X
     a4c:	12 97       	sbiw	r26, 0x02	; 2
     a4e:	92 95       	swap	r25
     a50:	96 95       	lsr	r25
     a52:	97 70       	andi	r25, 0x07	; 7
     a54:	13 96       	adiw	r26, 0x03	; 3
     a56:	8c 91       	ld	r24, X
     a58:	13 97       	sbiw	r26, 0x03	; 3
     a5a:	88 0f       	add	r24, r24
     a5c:	88 0f       	add	r24, r24
     a5e:	88 0f       	add	r24, r24
     a60:	89 0f       	add	r24, r25
     a62:	80 93 f1 00 	sts	0x00F1, r24
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	8c 91       	ld	r24, X
     a6a:	12 97       	sbiw	r26, 0x02	; 2
     a6c:	88 0f       	add	r24, r24
     a6e:	88 0f       	add	r24, r24
     a70:	88 0f       	add	r24, r24
     a72:	80 93 f0 00 	sts	0x00F0, r24
     a76:	ef ee       	ldi	r30, 0xEF	; 239
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	80 61       	ori	r24, 0x10	; 16
     a7e:	80 83       	st	Z, r24
     a80:	1c c0       	rjmp	.+56     	; 0xaba <__stack+0x1bb>
          else              { Can_set_std_id(cmd->id.std);}
     a82:	12 96       	adiw	r26, 0x02	; 2
     a84:	8c 91       	ld	r24, X
     a86:	12 97       	sbiw	r26, 0x02	; 2
     a88:	86 95       	lsr	r24
     a8a:	86 95       	lsr	r24
     a8c:	86 95       	lsr	r24
     a8e:	13 96       	adiw	r26, 0x03	; 3
     a90:	9c 91       	ld	r25, X
     a92:	13 97       	sbiw	r26, 0x03	; 3
     a94:	f0 e2       	ldi	r31, 0x20	; 32
     a96:	9f 9f       	mul	r25, r31
     a98:	80 0d       	add	r24, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	80 93 f3 00 	sts	0x00F3, r24
     aa0:	12 96       	adiw	r26, 0x02	; 2
     aa2:	8c 91       	ld	r24, X
     aa4:	12 97       	sbiw	r26, 0x02	; 2
     aa6:	82 95       	swap	r24
     aa8:	88 0f       	add	r24, r24
     aaa:	80 7e       	andi	r24, 0xE0	; 224
     aac:	80 93 f2 00 	sts	0x00F2, r24
     ab0:	ef ee       	ldi	r30, 0xEF	; 239
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	8f 7e       	andi	r24, 0xEF	; 239
     ab8:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	1a 96       	adiw	r26, 0x0a	; 10
     abe:	8c 93       	st	X, r24
     ac0:	1a 97       	sbiw	r26, 0x0a	; 10
     ac2:	e0 ef       	ldi	r30, 0xF0	; 240
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	84 60       	ori	r24, 0x04	; 4
     aca:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     acc:	ef ee       	ldi	r30, 0xEF	; 239
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	90 81       	ld	r25, Z
     ad2:	16 96       	adiw	r26, 0x06	; 6
     ad4:	8c 91       	ld	r24, X
     ad6:	89 2b       	or	r24, r25
     ad8:	80 83       	st	Z, r24
          Can_config_tx();
     ada:	80 81       	ld	r24, Z
     adc:	8f 73       	andi	r24, 0x3F	; 63
     ade:	80 83       	st	Z, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	80 64       	ori	r24, 0x40	; 64
     ae4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     ae8:	4e c4       	rjmp	.+2204   	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     aea:	19 82       	std	Y+1, r1	; 0x01
     aec:	9b 81       	ldd	r25, Y+3	; 0x03
     aee:	92 95       	swap	r25
     af0:	96 95       	lsr	r25
     af2:	97 70       	andi	r25, 0x07	; 7
     af4:	8c 81       	ldd	r24, Y+4	; 0x04
     af6:	88 0f       	add	r24, r24
     af8:	88 0f       	add	r24, r24
     afa:	88 0f       	add	r24, r24
     afc:	89 0f       	add	r24, r25
     afe:	80 93 f7 00 	sts	0x00F7, r24
     b02:	9a 81       	ldd	r25, Y+2	; 0x02
     b04:	92 95       	swap	r25
     b06:	96 95       	lsr	r25
     b08:	97 70       	andi	r25, 0x07	; 7
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	88 0f       	add	r24, r24
     b0e:	88 0f       	add	r24, r24
     b10:	88 0f       	add	r24, r24
     b12:	89 0f       	add	r24, r25
     b14:	80 93 f6 00 	sts	0x00F6, r24
     b18:	99 81       	ldd	r25, Y+1	; 0x01
     b1a:	92 95       	swap	r25
     b1c:	96 95       	lsr	r25
     b1e:	97 70       	andi	r25, 0x07	; 7
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	88 0f       	add	r24, r24
     b24:	88 0f       	add	r24, r24
     b26:	88 0f       	add	r24, r24
     b28:	89 0f       	add	r24, r25
     b2a:	80 93 f5 00 	sts	0x00F5, r24
     b2e:	29 81       	ldd	r18, Y+1	; 0x01
     b30:	22 0f       	add	r18, r18
     b32:	22 0f       	add	r18, r18
     b34:	22 0f       	add	r18, r18
     b36:	84 ef       	ldi	r24, 0xF4	; 244
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b3e:	ef ee       	ldi	r30, 0xEF	; 239
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	30 81       	ld	r19, Z
     b44:	16 96       	adiw	r26, 0x06	; 6
     b46:	2c 91       	ld	r18, X
     b48:	23 2b       	or	r18, r19
     b4a:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b4c:	dc 01       	movw	r26, r24
     b4e:	2c 91       	ld	r18, X
     b50:	2b 7f       	andi	r18, 0xFB	; 251
     b52:	2c 93       	st	X, r18
          Can_clear_idemsk();
     b54:	2c 91       	ld	r18, X
     b56:	2e 7f       	andi	r18, 0xFE	; 254
     b58:	2c 93       	st	X, r18
          Can_config_rx();       
     b5a:	80 81       	ld	r24, Z
     b5c:	8f 73       	andi	r24, 0x3F	; 63
     b5e:	80 83       	st	Z, r24
     b60:	80 81       	ld	r24, Z
     b62:	80 68       	ori	r24, 0x80	; 128
     b64:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b66:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     b68:	0e c4       	rjmp	.+2076   	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	82 95       	swap	r24
     b72:	88 0f       	add	r24, r24
     b74:	80 7e       	andi	r24, 0xE0	; 224
     b76:	81 5e       	subi	r24, 0xE1	; 225
     b78:	27 ef       	ldi	r18, 0xF7	; 247
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	f9 01       	movw	r30, r18
     b7e:	80 83       	st	Z, r24
     b80:	49 81       	ldd	r20, Y+1	; 0x01
     b82:	42 95       	swap	r20
     b84:	44 0f       	add	r20, r20
     b86:	40 7e       	andi	r20, 0xE0	; 224
     b88:	86 ef       	ldi	r24, 0xF6	; 246
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	fc 01       	movw	r30, r24
     b8e:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     b90:	12 96       	adiw	r26, 0x02	; 2
     b92:	4c 91       	ld	r20, X
     b94:	12 97       	sbiw	r26, 0x02	; 2
     b96:	46 95       	lsr	r20
     b98:	46 95       	lsr	r20
     b9a:	46 95       	lsr	r20
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	5c 91       	ld	r21, X
     ba0:	13 97       	sbiw	r26, 0x03	; 3
     ba2:	f0 e2       	ldi	r31, 0x20	; 32
     ba4:	5f 9f       	mul	r21, r31
     ba6:	40 0d       	add	r20, r0
     ba8:	11 24       	eor	r1, r1
     baa:	40 93 f3 00 	sts	0x00F3, r20
     bae:	12 96       	adiw	r26, 0x02	; 2
     bb0:	4c 91       	ld	r20, X
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	42 95       	swap	r20
     bb6:	44 0f       	add	r20, r20
     bb8:	40 7e       	andi	r20, 0xE0	; 224
     bba:	40 93 f2 00 	sts	0x00F2, r20
     bbe:	6f ee       	ldi	r22, 0xEF	; 239
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	fb 01       	movw	r30, r22
     bc4:	40 81       	ld	r20, Z
     bc6:	4f 7e       	andi	r20, 0xEF	; 239
     bc8:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     bca:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     bcc:	5b 81       	ldd	r21, Y+3	; 0x03
     bce:	52 95       	swap	r21
     bd0:	56 95       	lsr	r21
     bd2:	57 70       	andi	r21, 0x07	; 7
     bd4:	4c 81       	ldd	r20, Y+4	; 0x04
     bd6:	44 0f       	add	r20, r20
     bd8:	44 0f       	add	r20, r20
     bda:	44 0f       	add	r20, r20
     bdc:	45 0f       	add	r20, r21
     bde:	f9 01       	movw	r30, r18
     be0:	40 83       	st	Z, r20
     be2:	3a 81       	ldd	r19, Y+2	; 0x02
     be4:	32 95       	swap	r19
     be6:	36 95       	lsr	r19
     be8:	37 70       	andi	r19, 0x07	; 7
     bea:	2b 81       	ldd	r18, Y+3	; 0x03
     bec:	22 0f       	add	r18, r18
     bee:	22 0f       	add	r18, r18
     bf0:	22 0f       	add	r18, r18
     bf2:	23 0f       	add	r18, r19
     bf4:	fc 01       	movw	r30, r24
     bf6:	20 83       	st	Z, r18
     bf8:	99 81       	ldd	r25, Y+1	; 0x01
     bfa:	92 95       	swap	r25
     bfc:	96 95       	lsr	r25
     bfe:	97 70       	andi	r25, 0x07	; 7
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	88 0f       	add	r24, r24
     c04:	88 0f       	add	r24, r24
     c06:	88 0f       	add	r24, r24
     c08:	89 0f       	add	r24, r25
     c0a:	80 93 f5 00 	sts	0x00F5, r24
     c0e:	29 81       	ldd	r18, Y+1	; 0x01
     c10:	22 0f       	add	r18, r18
     c12:	22 0f       	add	r18, r18
     c14:	22 0f       	add	r18, r18
     c16:	84 ef       	ldi	r24, 0xF4	; 244
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	fc 01       	movw	r30, r24
     c1c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     c1e:	fb 01       	movw	r30, r22
     c20:	30 81       	ld	r19, Z
     c22:	16 96       	adiw	r26, 0x06	; 6
     c24:	2c 91       	ld	r18, X
     c26:	16 97       	sbiw	r26, 0x06	; 6
     c28:	23 2b       	or	r18, r19
     c2a:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     c2c:	1a 96       	adiw	r26, 0x0a	; 10
     c2e:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     c30:	dc 01       	movw	r26, r24
     c32:	2c 91       	ld	r18, X
     c34:	24 60       	ori	r18, 0x04	; 4
     c36:	2c 93       	st	X, r18
		  Can_clear_rtr();
     c38:	a0 ef       	ldi	r26, 0xF0	; 240
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	2c 91       	ld	r18, X
     c3e:	2b 7f       	andi	r18, 0xFB	; 251
     c40:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     c42:	20 81       	ld	r18, Z
     c44:	2f 7e       	andi	r18, 0xEF	; 239
     c46:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c48:	fc 01       	movw	r30, r24
     c4a:	20 81       	ld	r18, Z
     c4c:	2e 7f       	andi	r18, 0xFE	; 254
     c4e:	20 83       	st	Z, r18
          Can_config_rx();       
     c50:	db 01       	movw	r26, r22
     c52:	8c 91       	ld	r24, X
     c54:	8f 73       	andi	r24, 0x3F	; 63
     c56:	8c 93       	st	X, r24
     c58:	8c 91       	ld	r24, X
     c5a:	80 68       	ori	r24, 0x80	; 128
     c5c:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c5e:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     c60:	92 c3       	rjmp	.+1828   	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	82 95       	swap	r24
     c6a:	88 0f       	add	r24, r24
     c6c:	80 7e       	andi	r24, 0xE0	; 224
     c6e:	81 5e       	subi	r24, 0xE1	; 225
     c70:	27 ef       	ldi	r18, 0xF7	; 247
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	f9 01       	movw	r30, r18
     c76:	80 83       	st	Z, r24
     c78:	49 81       	ldd	r20, Y+1	; 0x01
     c7a:	42 95       	swap	r20
     c7c:	44 0f       	add	r20, r20
     c7e:	40 7e       	andi	r20, 0xE0	; 224
     c80:	86 ef       	ldi	r24, 0xF6	; 246
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	fc 01       	movw	r30, r24
     c86:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     c88:	12 96       	adiw	r26, 0x02	; 2
     c8a:	4c 91       	ld	r20, X
     c8c:	12 97       	sbiw	r26, 0x02	; 2
     c8e:	46 95       	lsr	r20
     c90:	46 95       	lsr	r20
     c92:	46 95       	lsr	r20
     c94:	13 96       	adiw	r26, 0x03	; 3
     c96:	5c 91       	ld	r21, X
     c98:	13 97       	sbiw	r26, 0x03	; 3
     c9a:	f0 e2       	ldi	r31, 0x20	; 32
     c9c:	5f 9f       	mul	r21, r31
     c9e:	40 0d       	add	r20, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	40 93 f3 00 	sts	0x00F3, r20
     ca6:	12 96       	adiw	r26, 0x02	; 2
     ca8:	4c 91       	ld	r20, X
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	42 95       	swap	r20
     cae:	44 0f       	add	r20, r20
     cb0:	40 7e       	andi	r20, 0xE0	; 224
     cb2:	40 93 f2 00 	sts	0x00F2, r20
     cb6:	6f ee       	ldi	r22, 0xEF	; 239
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	fb 01       	movw	r30, r22
     cbc:	40 81       	ld	r20, Z
     cbe:	4f 7e       	andi	r20, 0xEF	; 239
     cc0:	40 83       	st	Z, r20
		
          u8_temp=0; 
     cc2:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     cc4:	5b 81       	ldd	r21, Y+3	; 0x03
     cc6:	52 95       	swap	r21
     cc8:	56 95       	lsr	r21
     cca:	57 70       	andi	r21, 0x07	; 7
     ccc:	4c 81       	ldd	r20, Y+4	; 0x04
     cce:	44 0f       	add	r20, r20
     cd0:	44 0f       	add	r20, r20
     cd2:	44 0f       	add	r20, r20
     cd4:	45 0f       	add	r20, r21
     cd6:	f9 01       	movw	r30, r18
     cd8:	40 83       	st	Z, r20
     cda:	3a 81       	ldd	r19, Y+2	; 0x02
     cdc:	32 95       	swap	r19
     cde:	36 95       	lsr	r19
     ce0:	37 70       	andi	r19, 0x07	; 7
     ce2:	2b 81       	ldd	r18, Y+3	; 0x03
     ce4:	22 0f       	add	r18, r18
     ce6:	22 0f       	add	r18, r18
     ce8:	22 0f       	add	r18, r18
     cea:	23 0f       	add	r18, r19
     cec:	fc 01       	movw	r30, r24
     cee:	20 83       	st	Z, r18
     cf0:	99 81       	ldd	r25, Y+1	; 0x01
     cf2:	92 95       	swap	r25
     cf4:	96 95       	lsr	r25
     cf6:	97 70       	andi	r25, 0x07	; 7
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	88 0f       	add	r24, r24
     cfc:	88 0f       	add	r24, r24
     cfe:	88 0f       	add	r24, r24
     d00:	89 0f       	add	r24, r25
     d02:	80 93 f5 00 	sts	0x00F5, r24
     d06:	29 81       	ldd	r18, Y+1	; 0x01
     d08:	22 0f       	add	r18, r18
     d0a:	22 0f       	add	r18, r18
     d0c:	22 0f       	add	r18, r18
     d0e:	84 ef       	ldi	r24, 0xF4	; 244
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d16:	fb 01       	movw	r30, r22
     d18:	30 81       	ld	r19, Z
     d1a:	16 96       	adiw	r26, 0x06	; 6
     d1c:	2c 91       	ld	r18, X
     d1e:	16 97       	sbiw	r26, 0x06	; 6
     d20:	23 2b       	or	r18, r19
     d22:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     d24:	21 e0       	ldi	r18, 0x01	; 1
     d26:	1a 96       	adiw	r26, 0x0a	; 10
     d28:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     d2a:	dc 01       	movw	r26, r24
     d2c:	2c 91       	ld	r18, X
     d2e:	24 60       	ori	r18, 0x04	; 4
     d30:	2c 93       	st	X, r18
		  Can_set_rtr();
     d32:	a0 ef       	ldi	r26, 0xF0	; 240
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	2c 91       	ld	r18, X
     d38:	24 60       	ori	r18, 0x04	; 4
     d3a:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     d3c:	20 81       	ld	r18, Z
     d3e:	2f 7d       	andi	r18, 0xDF	; 223
     d40:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d42:	fc 01       	movw	r30, r24
     d44:	20 81       	ld	r18, Z
     d46:	2e 7f       	andi	r18, 0xFE	; 254
     d48:	20 83       	st	Z, r18
          Can_config_rx();       
     d4a:	db 01       	movw	r26, r22
     d4c:	8c 91       	ld	r24, X
     d4e:	8f 73       	andi	r24, 0x3F	; 63
     d50:	8c 93       	st	X, r24
     d52:	8c 91       	ld	r24, X
     d54:	80 68       	ori	r24, 0x80	; 128
     d56:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d58:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     d5a:	15 c3       	rjmp	.+1578   	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d5c:	1b 96       	adiw	r26, 0x0b	; 11
     d5e:	8c 91       	ld	r24, X
     d60:	1b 97       	sbiw	r26, 0x0b	; 11
     d62:	88 23       	and	r24, r24
     d64:	d9 f1       	breq	.+118    	; 0xddc <__stack+0x4dd>
     d66:	14 96       	adiw	r26, 0x04	; 4
     d68:	9c 91       	ld	r25, X
     d6a:	14 97       	sbiw	r26, 0x04	; 4
     d6c:	92 95       	swap	r25
     d6e:	96 95       	lsr	r25
     d70:	97 70       	andi	r25, 0x07	; 7
     d72:	15 96       	adiw	r26, 0x05	; 5
     d74:	8c 91       	ld	r24, X
     d76:	15 97       	sbiw	r26, 0x05	; 5
     d78:	88 0f       	add	r24, r24
     d7a:	88 0f       	add	r24, r24
     d7c:	88 0f       	add	r24, r24
     d7e:	89 0f       	add	r24, r25
     d80:	80 93 f3 00 	sts	0x00F3, r24
     d84:	13 96       	adiw	r26, 0x03	; 3
     d86:	9c 91       	ld	r25, X
     d88:	13 97       	sbiw	r26, 0x03	; 3
     d8a:	92 95       	swap	r25
     d8c:	96 95       	lsr	r25
     d8e:	97 70       	andi	r25, 0x07	; 7
     d90:	14 96       	adiw	r26, 0x04	; 4
     d92:	8c 91       	ld	r24, X
     d94:	14 97       	sbiw	r26, 0x04	; 4
     d96:	88 0f       	add	r24, r24
     d98:	88 0f       	add	r24, r24
     d9a:	88 0f       	add	r24, r24
     d9c:	89 0f       	add	r24, r25
     d9e:	80 93 f2 00 	sts	0x00F2, r24
     da2:	12 96       	adiw	r26, 0x02	; 2
     da4:	9c 91       	ld	r25, X
     da6:	12 97       	sbiw	r26, 0x02	; 2
     da8:	92 95       	swap	r25
     daa:	96 95       	lsr	r25
     dac:	97 70       	andi	r25, 0x07	; 7
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	8c 91       	ld	r24, X
     db2:	13 97       	sbiw	r26, 0x03	; 3
     db4:	88 0f       	add	r24, r24
     db6:	88 0f       	add	r24, r24
     db8:	88 0f       	add	r24, r24
     dba:	89 0f       	add	r24, r25
     dbc:	80 93 f1 00 	sts	0x00F1, r24
     dc0:	12 96       	adiw	r26, 0x02	; 2
     dc2:	8c 91       	ld	r24, X
     dc4:	12 97       	sbiw	r26, 0x02	; 2
     dc6:	88 0f       	add	r24, r24
     dc8:	88 0f       	add	r24, r24
     dca:	88 0f       	add	r24, r24
     dcc:	80 93 f0 00 	sts	0x00F0, r24
     dd0:	ef ee       	ldi	r30, 0xEF	; 239
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	80 61       	ori	r24, 0x10	; 16
     dd8:	80 83       	st	Z, r24
     dda:	1c c0       	rjmp	.+56     	; 0xe14 <__stack+0x515>
          else              { Can_set_std_id(cmd->id.std);}
     ddc:	12 96       	adiw	r26, 0x02	; 2
     dde:	8c 91       	ld	r24, X
     de0:	12 97       	sbiw	r26, 0x02	; 2
     de2:	86 95       	lsr	r24
     de4:	86 95       	lsr	r24
     de6:	86 95       	lsr	r24
     de8:	13 96       	adiw	r26, 0x03	; 3
     dea:	9c 91       	ld	r25, X
     dec:	13 97       	sbiw	r26, 0x03	; 3
     dee:	e0 e2       	ldi	r30, 0x20	; 32
     df0:	9e 9f       	mul	r25, r30
     df2:	80 0d       	add	r24, r0
     df4:	11 24       	eor	r1, r1
     df6:	80 93 f3 00 	sts	0x00F3, r24
     dfa:	12 96       	adiw	r26, 0x02	; 2
     dfc:	8c 91       	ld	r24, X
     dfe:	12 97       	sbiw	r26, 0x02	; 2
     e00:	82 95       	swap	r24
     e02:	88 0f       	add	r24, r24
     e04:	80 7e       	andi	r24, 0xE0	; 224
     e06:	80 93 f2 00 	sts	0x00F2, r24
     e0a:	ef ee       	ldi	r30, 0xEF	; 239
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8f 7e       	andi	r24, 0xEF	; 239
     e12:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	92 95       	swap	r25
     e1c:	96 95       	lsr	r25
     e1e:	97 70       	andi	r25, 0x07	; 7
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	88 0f       	add	r24, r24
     e24:	88 0f       	add	r24, r24
     e26:	88 0f       	add	r24, r24
     e28:	89 0f       	add	r24, r25
     e2a:	80 93 f7 00 	sts	0x00F7, r24
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	92 95       	swap	r25
     e32:	96 95       	lsr	r25
     e34:	97 70       	andi	r25, 0x07	; 7
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	88 0f       	add	r24, r24
     e3a:	88 0f       	add	r24, r24
     e3c:	88 0f       	add	r24, r24
     e3e:	89 0f       	add	r24, r25
     e40:	80 93 f6 00 	sts	0x00F6, r24
     e44:	99 81       	ldd	r25, Y+1	; 0x01
     e46:	92 95       	swap	r25
     e48:	96 95       	lsr	r25
     e4a:	97 70       	andi	r25, 0x07	; 7
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	88 0f       	add	r24, r24
     e50:	88 0f       	add	r24, r24
     e52:	88 0f       	add	r24, r24
     e54:	89 0f       	add	r24, r25
     e56:	80 93 f5 00 	sts	0x00F5, r24
     e5a:	29 81       	ldd	r18, Y+1	; 0x01
     e5c:	22 0f       	add	r18, r18
     e5e:	22 0f       	add	r18, r18
     e60:	22 0f       	add	r18, r18
     e62:	84 ef       	ldi	r24, 0xF4	; 244
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	fc 01       	movw	r30, r24
     e68:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     e6a:	ef ee       	ldi	r30, 0xEF	; 239
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	30 81       	ld	r19, Z
     e70:	16 96       	adiw	r26, 0x06	; 6
     e72:	2c 91       	ld	r18, X
     e74:	23 2b       	or	r18, r19
     e76:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     e78:	dc 01       	movw	r26, r24
     e7a:	2c 91       	ld	r18, X
     e7c:	2b 7f       	andi	r18, 0xFB	; 251
     e7e:	2c 93       	st	X, r18
          Can_set_idemsk();
     e80:	2c 91       	ld	r18, X
     e82:	21 60       	ori	r18, 0x01	; 1
     e84:	2c 93       	st	X, r18
          Can_config_rx();       
     e86:	80 81       	ld	r24, Z
     e88:	8f 73       	andi	r24, 0x3F	; 63
     e8a:	80 83       	st	Z, r24
     e8c:	80 81       	ld	r24, Z
     e8e:	80 68       	ori	r24, 0x80	; 128
     e90:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e92:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     e94:	78 c2       	rjmp	.+1264   	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     e96:	1b 96       	adiw	r26, 0x0b	; 11
     e98:	8c 91       	ld	r24, X
     e9a:	1b 97       	sbiw	r26, 0x0b	; 11
     e9c:	88 23       	and	r24, r24
     e9e:	d9 f1       	breq	.+118    	; 0xf16 <__stack+0x617>
     ea0:	14 96       	adiw	r26, 0x04	; 4
     ea2:	9c 91       	ld	r25, X
     ea4:	14 97       	sbiw	r26, 0x04	; 4
     ea6:	92 95       	swap	r25
     ea8:	96 95       	lsr	r25
     eaa:	97 70       	andi	r25, 0x07	; 7
     eac:	15 96       	adiw	r26, 0x05	; 5
     eae:	8c 91       	ld	r24, X
     eb0:	15 97       	sbiw	r26, 0x05	; 5
     eb2:	88 0f       	add	r24, r24
     eb4:	88 0f       	add	r24, r24
     eb6:	88 0f       	add	r24, r24
     eb8:	89 0f       	add	r24, r25
     eba:	80 93 f3 00 	sts	0x00F3, r24
     ebe:	13 96       	adiw	r26, 0x03	; 3
     ec0:	9c 91       	ld	r25, X
     ec2:	13 97       	sbiw	r26, 0x03	; 3
     ec4:	92 95       	swap	r25
     ec6:	96 95       	lsr	r25
     ec8:	97 70       	andi	r25, 0x07	; 7
     eca:	14 96       	adiw	r26, 0x04	; 4
     ecc:	8c 91       	ld	r24, X
     ece:	14 97       	sbiw	r26, 0x04	; 4
     ed0:	88 0f       	add	r24, r24
     ed2:	88 0f       	add	r24, r24
     ed4:	88 0f       	add	r24, r24
     ed6:	89 0f       	add	r24, r25
     ed8:	80 93 f2 00 	sts	0x00F2, r24
     edc:	12 96       	adiw	r26, 0x02	; 2
     ede:	9c 91       	ld	r25, X
     ee0:	12 97       	sbiw	r26, 0x02	; 2
     ee2:	92 95       	swap	r25
     ee4:	96 95       	lsr	r25
     ee6:	97 70       	andi	r25, 0x07	; 7
     ee8:	13 96       	adiw	r26, 0x03	; 3
     eea:	8c 91       	ld	r24, X
     eec:	13 97       	sbiw	r26, 0x03	; 3
     eee:	88 0f       	add	r24, r24
     ef0:	88 0f       	add	r24, r24
     ef2:	88 0f       	add	r24, r24
     ef4:	89 0f       	add	r24, r25
     ef6:	80 93 f1 00 	sts	0x00F1, r24
     efa:	12 96       	adiw	r26, 0x02	; 2
     efc:	8c 91       	ld	r24, X
     efe:	12 97       	sbiw	r26, 0x02	; 2
     f00:	88 0f       	add	r24, r24
     f02:	88 0f       	add	r24, r24
     f04:	88 0f       	add	r24, r24
     f06:	80 93 f0 00 	sts	0x00F0, r24
     f0a:	ef ee       	ldi	r30, 0xEF	; 239
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 61       	ori	r24, 0x10	; 16
     f12:	80 83       	st	Z, r24
     f14:	1c c0       	rjmp	.+56     	; 0xf4e <__stack+0x64f>
          else              { Can_set_std_id(cmd->id.std);}
     f16:	12 96       	adiw	r26, 0x02	; 2
     f18:	8c 91       	ld	r24, X
     f1a:	12 97       	sbiw	r26, 0x02	; 2
     f1c:	86 95       	lsr	r24
     f1e:	86 95       	lsr	r24
     f20:	86 95       	lsr	r24
     f22:	13 96       	adiw	r26, 0x03	; 3
     f24:	9c 91       	ld	r25, X
     f26:	13 97       	sbiw	r26, 0x03	; 3
     f28:	e0 e2       	ldi	r30, 0x20	; 32
     f2a:	9e 9f       	mul	r25, r30
     f2c:	80 0d       	add	r24, r0
     f2e:	11 24       	eor	r1, r1
     f30:	80 93 f3 00 	sts	0x00F3, r24
     f34:	12 96       	adiw	r26, 0x02	; 2
     f36:	8c 91       	ld	r24, X
     f38:	12 97       	sbiw	r26, 0x02	; 2
     f3a:	82 95       	swap	r24
     f3c:	88 0f       	add	r24, r24
     f3e:	80 7e       	andi	r24, 0xE0	; 224
     f40:	80 93 f2 00 	sts	0x00F2, r24
     f44:	ef ee       	ldi	r30, 0xEF	; 239
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8f 7e       	andi	r24, 0xEF	; 239
     f4c:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	9b 81       	ldd	r25, Y+3	; 0x03
     f54:	92 95       	swap	r25
     f56:	96 95       	lsr	r25
     f58:	97 70       	andi	r25, 0x07	; 7
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	88 0f       	add	r24, r24
     f5e:	88 0f       	add	r24, r24
     f60:	88 0f       	add	r24, r24
     f62:	89 0f       	add	r24, r25
     f64:	80 93 f7 00 	sts	0x00F7, r24
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	92 95       	swap	r25
     f6c:	96 95       	lsr	r25
     f6e:	97 70       	andi	r25, 0x07	; 7
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	88 0f       	add	r24, r24
     f74:	88 0f       	add	r24, r24
     f76:	88 0f       	add	r24, r24
     f78:	89 0f       	add	r24, r25
     f7a:	80 93 f6 00 	sts	0x00F6, r24
     f7e:	99 81       	ldd	r25, Y+1	; 0x01
     f80:	92 95       	swap	r25
     f82:	96 95       	lsr	r25
     f84:	97 70       	andi	r25, 0x07	; 7
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	88 0f       	add	r24, r24
     f8a:	88 0f       	add	r24, r24
     f8c:	88 0f       	add	r24, r24
     f8e:	89 0f       	add	r24, r25
     f90:	80 93 f5 00 	sts	0x00F5, r24
     f94:	29 81       	ldd	r18, Y+1	; 0x01
     f96:	22 0f       	add	r18, r18
     f98:	22 0f       	add	r18, r18
     f9a:	22 0f       	add	r18, r18
     f9c:	84 ef       	ldi	r24, 0xF4	; 244
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	fc 01       	movw	r30, r24
     fa2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     fa4:	ef ee       	ldi	r30, 0xEF	; 239
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	30 81       	ld	r19, Z
     faa:	16 96       	adiw	r26, 0x06	; 6
     fac:	2c 91       	ld	r18, X
     fae:	16 97       	sbiw	r26, 0x06	; 6
     fb0:	23 2b       	or	r18, r19
     fb2:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     fb4:	1a 96       	adiw	r26, 0x0a	; 10
     fb6:	1c 92       	st	X, r1
     fb8:	dc 01       	movw	r26, r24
     fba:	2c 91       	ld	r18, X
     fbc:	24 60       	ori	r18, 0x04	; 4
     fbe:	2c 93       	st	X, r18
     fc0:	a0 ef       	ldi	r26, 0xF0	; 240
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	2c 91       	ld	r18, X
     fc6:	2b 7f       	andi	r18, 0xFB	; 251
     fc8:	2c 93       	st	X, r18
          Can_set_idemsk();
     fca:	dc 01       	movw	r26, r24
     fcc:	2c 91       	ld	r18, X
     fce:	21 60       	ori	r18, 0x01	; 1
     fd0:	2c 93       	st	X, r18
          Can_config_rx();       
     fd2:	80 81       	ld	r24, Z
     fd4:	8f 73       	andi	r24, 0x3F	; 63
     fd6:	80 83       	st	Z, r24
     fd8:	80 81       	ld	r24, Z
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fde:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     fe0:	d2 c1       	rjmp	.+932    	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fe2:	1b 96       	adiw	r26, 0x0b	; 11
     fe4:	8c 91       	ld	r24, X
     fe6:	1b 97       	sbiw	r26, 0x0b	; 11
     fe8:	88 23       	and	r24, r24
     fea:	d9 f1       	breq	.+118    	; 0x1062 <__stack+0x763>
     fec:	14 96       	adiw	r26, 0x04	; 4
     fee:	9c 91       	ld	r25, X
     ff0:	14 97       	sbiw	r26, 0x04	; 4
     ff2:	92 95       	swap	r25
     ff4:	96 95       	lsr	r25
     ff6:	97 70       	andi	r25, 0x07	; 7
     ff8:	15 96       	adiw	r26, 0x05	; 5
     ffa:	8c 91       	ld	r24, X
     ffc:	15 97       	sbiw	r26, 0x05	; 5
     ffe:	88 0f       	add	r24, r24
    1000:	88 0f       	add	r24, r24
    1002:	88 0f       	add	r24, r24
    1004:	89 0f       	add	r24, r25
    1006:	80 93 f3 00 	sts	0x00F3, r24
    100a:	13 96       	adiw	r26, 0x03	; 3
    100c:	9c 91       	ld	r25, X
    100e:	13 97       	sbiw	r26, 0x03	; 3
    1010:	92 95       	swap	r25
    1012:	96 95       	lsr	r25
    1014:	97 70       	andi	r25, 0x07	; 7
    1016:	14 96       	adiw	r26, 0x04	; 4
    1018:	8c 91       	ld	r24, X
    101a:	14 97       	sbiw	r26, 0x04	; 4
    101c:	88 0f       	add	r24, r24
    101e:	88 0f       	add	r24, r24
    1020:	88 0f       	add	r24, r24
    1022:	89 0f       	add	r24, r25
    1024:	80 93 f2 00 	sts	0x00F2, r24
    1028:	12 96       	adiw	r26, 0x02	; 2
    102a:	9c 91       	ld	r25, X
    102c:	12 97       	sbiw	r26, 0x02	; 2
    102e:	92 95       	swap	r25
    1030:	96 95       	lsr	r25
    1032:	97 70       	andi	r25, 0x07	; 7
    1034:	13 96       	adiw	r26, 0x03	; 3
    1036:	8c 91       	ld	r24, X
    1038:	13 97       	sbiw	r26, 0x03	; 3
    103a:	88 0f       	add	r24, r24
    103c:	88 0f       	add	r24, r24
    103e:	88 0f       	add	r24, r24
    1040:	89 0f       	add	r24, r25
    1042:	80 93 f1 00 	sts	0x00F1, r24
    1046:	12 96       	adiw	r26, 0x02	; 2
    1048:	8c 91       	ld	r24, X
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	88 0f       	add	r24, r24
    104e:	88 0f       	add	r24, r24
    1050:	88 0f       	add	r24, r24
    1052:	80 93 f0 00 	sts	0x00F0, r24
    1056:	ef ee       	ldi	r30, 0xEF	; 239
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 61       	ori	r24, 0x10	; 16
    105e:	80 83       	st	Z, r24
    1060:	1c c0       	rjmp	.+56     	; 0x109a <__stack+0x79b>
          else              { Can_set_std_id(cmd->id.std);}
    1062:	12 96       	adiw	r26, 0x02	; 2
    1064:	8c 91       	ld	r24, X
    1066:	12 97       	sbiw	r26, 0x02	; 2
    1068:	86 95       	lsr	r24
    106a:	86 95       	lsr	r24
    106c:	86 95       	lsr	r24
    106e:	13 96       	adiw	r26, 0x03	; 3
    1070:	9c 91       	ld	r25, X
    1072:	13 97       	sbiw	r26, 0x03	; 3
    1074:	e0 e2       	ldi	r30, 0x20	; 32
    1076:	9e 9f       	mul	r25, r30
    1078:	80 0d       	add	r24, r0
    107a:	11 24       	eor	r1, r1
    107c:	80 93 f3 00 	sts	0x00F3, r24
    1080:	12 96       	adiw	r26, 0x02	; 2
    1082:	8c 91       	ld	r24, X
    1084:	12 97       	sbiw	r26, 0x02	; 2
    1086:	82 95       	swap	r24
    1088:	88 0f       	add	r24, r24
    108a:	80 7e       	andi	r24, 0xE0	; 224
    108c:	80 93 f2 00 	sts	0x00F2, r24
    1090:	ef ee       	ldi	r30, 0xEF	; 239
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7e       	andi	r24, 0xEF	; 239
    1098:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	9b 81       	ldd	r25, Y+3	; 0x03
    10a0:	92 95       	swap	r25
    10a2:	96 95       	lsr	r25
    10a4:	97 70       	andi	r25, 0x07	; 7
    10a6:	8c 81       	ldd	r24, Y+4	; 0x04
    10a8:	88 0f       	add	r24, r24
    10aa:	88 0f       	add	r24, r24
    10ac:	88 0f       	add	r24, r24
    10ae:	89 0f       	add	r24, r25
    10b0:	80 93 f7 00 	sts	0x00F7, r24
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	92 95       	swap	r25
    10b8:	96 95       	lsr	r25
    10ba:	97 70       	andi	r25, 0x07	; 7
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	88 0f       	add	r24, r24
    10c0:	88 0f       	add	r24, r24
    10c2:	88 0f       	add	r24, r24
    10c4:	89 0f       	add	r24, r25
    10c6:	80 93 f6 00 	sts	0x00F6, r24
    10ca:	99 81       	ldd	r25, Y+1	; 0x01
    10cc:	92 95       	swap	r25
    10ce:	96 95       	lsr	r25
    10d0:	97 70       	andi	r25, 0x07	; 7
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	88 0f       	add	r24, r24
    10d6:	88 0f       	add	r24, r24
    10d8:	88 0f       	add	r24, r24
    10da:	89 0f       	add	r24, r25
    10dc:	80 93 f5 00 	sts	0x00F5, r24
    10e0:	29 81       	ldd	r18, Y+1	; 0x01
    10e2:	22 0f       	add	r18, r18
    10e4:	22 0f       	add	r18, r18
    10e6:	22 0f       	add	r18, r18
    10e8:	84 ef       	ldi	r24, 0xF4	; 244
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    10f0:	ef ee       	ldi	r30, 0xEF	; 239
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	30 81       	ld	r19, Z
    10f6:	16 96       	adiw	r26, 0x06	; 6
    10f8:	2c 91       	ld	r18, X
    10fa:	16 97       	sbiw	r26, 0x06	; 6
    10fc:	23 2b       	or	r18, r19
    10fe:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1100:	21 e0       	ldi	r18, 0x01	; 1
    1102:	1a 96       	adiw	r26, 0x0a	; 10
    1104:	2c 93       	st	X, r18
    1106:	dc 01       	movw	r26, r24
    1108:	2c 91       	ld	r18, X
    110a:	24 60       	ori	r18, 0x04	; 4
    110c:	2c 93       	st	X, r18
    110e:	a0 ef       	ldi	r26, 0xF0	; 240
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	2c 91       	ld	r18, X
    1114:	24 60       	ori	r18, 0x04	; 4
    1116:	2c 93       	st	X, r18
          Can_clear_rplv();
    1118:	20 81       	ld	r18, Z
    111a:	2f 7d       	andi	r18, 0xDF	; 223
    111c:	20 83       	st	Z, r18
          Can_set_idemsk();
    111e:	dc 01       	movw	r26, r24
    1120:	2c 91       	ld	r18, X
    1122:	21 60       	ori	r18, 0x01	; 1
    1124:	2c 93       	st	X, r18
          Can_config_rx();       
    1126:	80 81       	ld	r24, Z
    1128:	8f 73       	andi	r24, 0x3F	; 63
    112a:	80 83       	st	Z, r24
    112c:	80 81       	ld	r24, Z
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1132:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1134:	28 c1       	rjmp	.+592    	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	8a ef       	ldi	r24, 0xFA	; 250
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	17 96       	adiw	r26, 0x07	; 7
    113e:	ed 91       	ld	r30, X+
    1140:	fc 91       	ld	r31, X
    1142:	18 97       	sbiw	r26, 0x08	; 8
    1144:	e2 0f       	add	r30, r18
    1146:	f1 1d       	adc	r31, r1
    1148:	30 81       	ld	r19, Z
    114a:	fc 01       	movw	r30, r24
    114c:	30 83       	st	Z, r19
    114e:	2f 5f       	subi	r18, 0xFF	; 255
    1150:	16 96       	adiw	r26, 0x06	; 6
    1152:	3c 91       	ld	r19, X
    1154:	16 97       	sbiw	r26, 0x06	; 6
    1156:	23 17       	cp	r18, r19
    1158:	88 f3       	brcs	.-30     	; 0x113c <__stack+0x83d>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    115a:	19 82       	std	Y+1, r1	; 0x01
    115c:	9b 81       	ldd	r25, Y+3	; 0x03
    115e:	92 95       	swap	r25
    1160:	96 95       	lsr	r25
    1162:	97 70       	andi	r25, 0x07	; 7
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	88 0f       	add	r24, r24
    1168:	88 0f       	add	r24, r24
    116a:	88 0f       	add	r24, r24
    116c:	89 0f       	add	r24, r25
    116e:	80 93 f7 00 	sts	0x00F7, r24
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	92 95       	swap	r25
    1176:	96 95       	lsr	r25
    1178:	97 70       	andi	r25, 0x07	; 7
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 0f       	add	r24, r24
    117e:	88 0f       	add	r24, r24
    1180:	88 0f       	add	r24, r24
    1182:	89 0f       	add	r24, r25
    1184:	80 93 f6 00 	sts	0x00F6, r24
    1188:	99 81       	ldd	r25, Y+1	; 0x01
    118a:	92 95       	swap	r25
    118c:	96 95       	lsr	r25
    118e:	97 70       	andi	r25, 0x07	; 7
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	88 0f       	add	r24, r24
    1194:	88 0f       	add	r24, r24
    1196:	88 0f       	add	r24, r24
    1198:	89 0f       	add	r24, r25
    119a:	80 93 f5 00 	sts	0x00F5, r24
    119e:	29 81       	ldd	r18, Y+1	; 0x01
    11a0:	22 0f       	add	r18, r18
    11a2:	22 0f       	add	r18, r18
    11a4:	22 0f       	add	r18, r18
    11a6:	84 ef       	ldi	r24, 0xF4	; 244
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    11ae:	ef ee       	ldi	r30, 0xEF	; 239
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	30 81       	ld	r19, Z
    11b4:	16 96       	adiw	r26, 0x06	; 6
    11b6:	2c 91       	ld	r18, X
    11b8:	16 97       	sbiw	r26, 0x06	; 6
    11ba:	23 2b       	or	r18, r19
    11bc:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    11be:	21 e0       	ldi	r18, 0x01	; 1
    11c0:	1a 96       	adiw	r26, 0x0a	; 10
    11c2:	2c 93       	st	X, r18
    11c4:	dc 01       	movw	r26, r24
    11c6:	2c 91       	ld	r18, X
    11c8:	24 60       	ori	r18, 0x04	; 4
    11ca:	2c 93       	st	X, r18
    11cc:	a0 ef       	ldi	r26, 0xF0	; 240
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	2c 91       	ld	r18, X
    11d2:	24 60       	ori	r18, 0x04	; 4
    11d4:	2c 93       	st	X, r18
          Can_set_rplv();
    11d6:	20 81       	ld	r18, Z
    11d8:	20 62       	ori	r18, 0x20	; 32
    11da:	20 83       	st	Z, r18
          Can_clear_idemsk();
    11dc:	dc 01       	movw	r26, r24
    11de:	2c 91       	ld	r18, X
    11e0:	2e 7f       	andi	r18, 0xFE	; 254
    11e2:	2c 93       	st	X, r18
          Can_config_rx();       
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 73       	andi	r24, 0x3F	; 63
    11e8:	80 83       	st	Z, r24
    11ea:	80 81       	ld	r24, Z
    11ec:	80 68       	ori	r24, 0x80	; 128
    11ee:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    11f0:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    11f2:	c9 c0       	rjmp	.+402    	; 0x1386 <__stack+0xa87>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    11f4:	1b 96       	adiw	r26, 0x0b	; 11
    11f6:	8c 91       	ld	r24, X
    11f8:	1b 97       	sbiw	r26, 0x0b	; 11
    11fa:	88 23       	and	r24, r24
    11fc:	d9 f1       	breq	.+118    	; 0x1274 <__stack+0x975>
    11fe:	14 96       	adiw	r26, 0x04	; 4
    1200:	9c 91       	ld	r25, X
    1202:	14 97       	sbiw	r26, 0x04	; 4
    1204:	92 95       	swap	r25
    1206:	96 95       	lsr	r25
    1208:	97 70       	andi	r25, 0x07	; 7
    120a:	15 96       	adiw	r26, 0x05	; 5
    120c:	8c 91       	ld	r24, X
    120e:	15 97       	sbiw	r26, 0x05	; 5
    1210:	88 0f       	add	r24, r24
    1212:	88 0f       	add	r24, r24
    1214:	88 0f       	add	r24, r24
    1216:	89 0f       	add	r24, r25
    1218:	80 93 f3 00 	sts	0x00F3, r24
    121c:	13 96       	adiw	r26, 0x03	; 3
    121e:	9c 91       	ld	r25, X
    1220:	13 97       	sbiw	r26, 0x03	; 3
    1222:	92 95       	swap	r25
    1224:	96 95       	lsr	r25
    1226:	97 70       	andi	r25, 0x07	; 7
    1228:	14 96       	adiw	r26, 0x04	; 4
    122a:	8c 91       	ld	r24, X
    122c:	14 97       	sbiw	r26, 0x04	; 4
    122e:	88 0f       	add	r24, r24
    1230:	88 0f       	add	r24, r24
    1232:	88 0f       	add	r24, r24
    1234:	89 0f       	add	r24, r25
    1236:	80 93 f2 00 	sts	0x00F2, r24
    123a:	12 96       	adiw	r26, 0x02	; 2
    123c:	9c 91       	ld	r25, X
    123e:	12 97       	sbiw	r26, 0x02	; 2
    1240:	92 95       	swap	r25
    1242:	96 95       	lsr	r25
    1244:	97 70       	andi	r25, 0x07	; 7
    1246:	13 96       	adiw	r26, 0x03	; 3
    1248:	8c 91       	ld	r24, X
    124a:	13 97       	sbiw	r26, 0x03	; 3
    124c:	88 0f       	add	r24, r24
    124e:	88 0f       	add	r24, r24
    1250:	88 0f       	add	r24, r24
    1252:	89 0f       	add	r24, r25
    1254:	80 93 f1 00 	sts	0x00F1, r24
    1258:	12 96       	adiw	r26, 0x02	; 2
    125a:	8c 91       	ld	r24, X
    125c:	12 97       	sbiw	r26, 0x02	; 2
    125e:	88 0f       	add	r24, r24
    1260:	88 0f       	add	r24, r24
    1262:	88 0f       	add	r24, r24
    1264:	80 93 f0 00 	sts	0x00F0, r24
    1268:	ef ee       	ldi	r30, 0xEF	; 239
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 61       	ori	r24, 0x10	; 16
    1270:	80 83       	st	Z, r24
    1272:	1c c0       	rjmp	.+56     	; 0x12ac <__stack+0x9ad>
          else              { Can_set_std_id(cmd->id.std);}
    1274:	12 96       	adiw	r26, 0x02	; 2
    1276:	8c 91       	ld	r24, X
    1278:	12 97       	sbiw	r26, 0x02	; 2
    127a:	86 95       	lsr	r24
    127c:	86 95       	lsr	r24
    127e:	86 95       	lsr	r24
    1280:	13 96       	adiw	r26, 0x03	; 3
    1282:	9c 91       	ld	r25, X
    1284:	13 97       	sbiw	r26, 0x03	; 3
    1286:	e0 e2       	ldi	r30, 0x20	; 32
    1288:	9e 9f       	mul	r25, r30
    128a:	80 0d       	add	r24, r0
    128c:	11 24       	eor	r1, r1
    128e:	80 93 f3 00 	sts	0x00F3, r24
    1292:	12 96       	adiw	r26, 0x02	; 2
    1294:	8c 91       	ld	r24, X
    1296:	12 97       	sbiw	r26, 0x02	; 2
    1298:	82 95       	swap	r24
    129a:	88 0f       	add	r24, r24
    129c:	80 7e       	andi	r24, 0xE0	; 224
    129e:	80 93 f2 00 	sts	0x00F2, r24
    12a2:	ef ee       	ldi	r30, 0xEF	; 239
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8f 7e       	andi	r24, 0xEF	; 239
    12aa:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    12ac:	16 96       	adiw	r26, 0x06	; 6
    12ae:	8c 91       	ld	r24, X
    12b0:	16 97       	sbiw	r26, 0x06	; 6
    12b2:	88 23       	and	r24, r24
    12b4:	91 f0       	breq	.+36     	; 0x12da <__stack+0x9db>
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	8a ef       	ldi	r24, 0xFA	; 250
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	17 96       	adiw	r26, 0x07	; 7
    12be:	ed 91       	ld	r30, X+
    12c0:	fc 91       	ld	r31, X
    12c2:	18 97       	sbiw	r26, 0x08	; 8
    12c4:	e2 0f       	add	r30, r18
    12c6:	f1 1d       	adc	r31, r1
    12c8:	30 81       	ld	r19, Z
    12ca:	fc 01       	movw	r30, r24
    12cc:	30 83       	st	Z, r19
    12ce:	2f 5f       	subi	r18, 0xFF	; 255
    12d0:	16 96       	adiw	r26, 0x06	; 6
    12d2:	3c 91       	ld	r19, X
    12d4:	16 97       	sbiw	r26, 0x06	; 6
    12d6:	23 17       	cp	r18, r19
    12d8:	88 f3       	brcs	.-30     	; 0x12bc <__stack+0x9bd>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	9b 81       	ldd	r25, Y+3	; 0x03
    12e0:	92 95       	swap	r25
    12e2:	96 95       	lsr	r25
    12e4:	97 70       	andi	r25, 0x07	; 7
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
    12e8:	88 0f       	add	r24, r24
    12ea:	88 0f       	add	r24, r24
    12ec:	88 0f       	add	r24, r24
    12ee:	89 0f       	add	r24, r25
    12f0:	80 93 f7 00 	sts	0x00F7, r24
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	92 95       	swap	r25
    12f8:	96 95       	lsr	r25
    12fa:	97 70       	andi	r25, 0x07	; 7
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	88 0f       	add	r24, r24
    1300:	88 0f       	add	r24, r24
    1302:	88 0f       	add	r24, r24
    1304:	89 0f       	add	r24, r25
    1306:	80 93 f6 00 	sts	0x00F6, r24
    130a:	99 81       	ldd	r25, Y+1	; 0x01
    130c:	92 95       	swap	r25
    130e:	96 95       	lsr	r25
    1310:	97 70       	andi	r25, 0x07	; 7
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	88 0f       	add	r24, r24
    1316:	88 0f       	add	r24, r24
    1318:	88 0f       	add	r24, r24
    131a:	89 0f       	add	r24, r25
    131c:	80 93 f5 00 	sts	0x00F5, r24
    1320:	29 81       	ldd	r18, Y+1	; 0x01
    1322:	22 0f       	add	r18, r18
    1324:	22 0f       	add	r18, r18
    1326:	22 0f       	add	r18, r18
    1328:	84 ef       	ldi	r24, 0xF4	; 244
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1330:	ef ee       	ldi	r30, 0xEF	; 239
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	30 81       	ld	r19, Z
    1336:	16 96       	adiw	r26, 0x06	; 6
    1338:	2c 91       	ld	r18, X
    133a:	16 97       	sbiw	r26, 0x06	; 6
    133c:	23 2b       	or	r18, r19
    133e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	1a 96       	adiw	r26, 0x0a	; 10
    1344:	2c 93       	st	X, r18
    1346:	dc 01       	movw	r26, r24
    1348:	2c 91       	ld	r18, X
    134a:	24 60       	ori	r18, 0x04	; 4
    134c:	2c 93       	st	X, r18
    134e:	a0 ef       	ldi	r26, 0xF0	; 240
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	2c 91       	ld	r18, X
    1354:	24 60       	ori	r18, 0x04	; 4
    1356:	2c 93       	st	X, r18
          Can_set_rplv();
    1358:	20 81       	ld	r18, Z
    135a:	20 62       	ori	r18, 0x20	; 32
    135c:	20 83       	st	Z, r18
          Can_set_idemsk();
    135e:	dc 01       	movw	r26, r24
    1360:	2c 91       	ld	r18, X
    1362:	21 60       	ori	r18, 0x01	; 1
    1364:	2c 93       	st	X, r18
          Can_config_rx();       
    1366:	80 81       	ld	r24, Z
    1368:	8f 73       	andi	r24, 0x3F	; 63
    136a:	80 83       	st	Z, r24
    136c:	80 81       	ld	r24, Z
    136e:	80 68       	ori	r24, 0x80	; 128
    1370:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1372:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <__stack+0xa87>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1376:	19 96       	adiw	r26, 0x09	; 9
    1378:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    137a:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <__stack+0xa87>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    137e:	8f e1       	ldi	r24, 0x1F	; 31
    1380:	19 96       	adiw	r26, 0x09	; 9
    1382:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    1386:	0f 90       	pop	r0
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    1394:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1396:	88 23       	and	r24, r24
    1398:	09 f4       	brne	.+2      	; 0x139c <can_get_status+0xe>
    139a:	d8 c0       	rjmp	.+432    	; 0x154c <can_get_status+0x1be>
    139c:	8f 31       	cpi	r24, 0x1F	; 31
    139e:	09 f4       	brne	.+2      	; 0x13a2 <can_get_status+0x14>
    13a0:	d7 c0       	rjmp	.+430    	; 0x1550 <can_get_status+0x1c2>
    13a2:	8f 3f       	cpi	r24, 0xFF	; 255
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <can_get_status+0x1a>
    13a6:	d6 c0       	rjmp	.+428    	; 0x1554 <can_get_status+0x1c6>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    13a8:	62 95       	swap	r22
    13aa:	60 7f       	andi	r22, 0xF0	; 240
    13ac:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    13b0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <can_get_mob_status>
    
    switch (a_status)
    13b4:	80 32       	cpi	r24, 0x20	; 32
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <can_get_status+0x42>
    13b8:	20 f4       	brcc	.+8      	; 0x13c2 <can_get_status+0x34>
    13ba:	88 23       	and	r24, r24
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <can_get_status+0x32>
    13be:	cc c0       	rjmp	.+408    	; 0x1558 <can_get_status+0x1ca>
    13c0:	bb c0       	rjmp	.+374    	; 0x1538 <can_get_status+0x1aa>
    13c2:	80 34       	cpi	r24, 0x40	; 64
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <can_get_status+0x3a>
    13c6:	ad c0       	rjmp	.+346    	; 0x1522 <can_get_status+0x194>
    13c8:	80 3a       	cpi	r24, 0xA0	; 160
    13ca:	09 f4       	brne	.+2      	; 0x13ce <can_get_status+0x40>
    13cc:	51 c0       	rjmp	.+162    	; 0x1470 <can_get_status+0xe2>
    13ce:	b4 c0       	rjmp	.+360    	; 0x1538 <can_get_status+0x1aa>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_blink(LED1);
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	0e 94 96 0b 	call	0x172c	; 0x172c <LED_blink>
            cmd->ctrl.rtr = Can_get_rtr();
    13d6:	80 91 f0 00 	lds	r24, 0x00F0
    13da:	82 fb       	bst	r24, 2
    13dc:	88 27       	eor	r24, r24
    13de:	80 f9       	bld	r24, 0
    13e0:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    13e2:	80 91 ef 00 	lds	r24, 0x00EF
    13e6:	84 ff       	sbrs	r24, 4
    13e8:	2d c0       	rjmp	.+90     	; 0x1444 <can_get_status+0xb6>
            {
	            cmd->ctrl.ide = 1; // extended frame
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    13ee:	e3 ef       	ldi	r30, 0xF3	; 243
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	86 95       	lsr	r24
    13f6:	86 95       	lsr	r24
    13f8:	86 95       	lsr	r24
    13fa:	8d 83       	std	Y+5, r24	; 0x05
    13fc:	a2 ef       	ldi	r26, 0xF2	; 242
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	8c 91       	ld	r24, X
    1402:	90 81       	ld	r25, Z
    1404:	86 95       	lsr	r24
    1406:	86 95       	lsr	r24
    1408:	86 95       	lsr	r24
    140a:	20 e2       	ldi	r18, 0x20	; 32
    140c:	92 9f       	mul	r25, r18
    140e:	80 0d       	add	r24, r0
    1410:	11 24       	eor	r1, r1
    1412:	8c 83       	std	Y+4, r24	; 0x04
    1414:	e1 ef       	ldi	r30, 0xF1	; 241
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	9c 91       	ld	r25, X
    141c:	86 95       	lsr	r24
    141e:	86 95       	lsr	r24
    1420:	86 95       	lsr	r24
    1422:	20 e2       	ldi	r18, 0x20	; 32
    1424:	92 9f       	mul	r25, r18
    1426:	80 0d       	add	r24, r0
    1428:	11 24       	eor	r1, r1
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	80 91 f0 00 	lds	r24, 0x00F0
    1430:	90 81       	ld	r25, Z
    1432:	86 95       	lsr	r24
    1434:	86 95       	lsr	r24
    1436:	86 95       	lsr	r24
    1438:	20 e2       	ldi	r18, 0x20	; 32
    143a:	92 9f       	mul	r25, r18
    143c:	80 0d       	add	r24, r0
    143e:	11 24       	eor	r1, r1
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <can_get_status+0xc4>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    1444:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    1446:	e3 ef       	ldi	r30, 0xF3	; 243
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	80 91 f2 00 	lds	r24, 0x00F2
    1450:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    1452:	80 e2       	ldi	r24, 0x20	; 32
    1454:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1456:	8f 81       	ldd	r24, Y+7	; 0x07
    1458:	98 85       	ldd	r25, Y+8	; 0x08
    145a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    145e:	ef ee       	ldi	r30, 0xEF	; 239
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 73       	andi	r24, 0x3F	; 63
    1466:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    1468:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    146c:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    146e:	75 c0       	rjmp	.+234    	; 0x155a <can_get_status+0x1cc>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    1470:	80 91 f0 00 	lds	r24, 0x00F0
    1474:	82 fb       	bst	r24, 2
    1476:	88 27       	eor	r24, r24
    1478:	80 f9       	bld	r24, 0
    147a:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    147c:	80 91 ef 00 	lds	r24, 0x00EF
    1480:	84 ff       	sbrs	r24, 4
    1482:	2d c0       	rjmp	.+90     	; 0x14de <can_get_status+0x150>
            {
                cmd->ctrl.ide = 1; // extended frame
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1488:	e3 ef       	ldi	r30, 0xF3	; 243
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	86 95       	lsr	r24
    1490:	86 95       	lsr	r24
    1492:	86 95       	lsr	r24
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	a2 ef       	ldi	r26, 0xF2	; 242
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	8c 91       	ld	r24, X
    149c:	90 81       	ld	r25, Z
    149e:	86 95       	lsr	r24
    14a0:	86 95       	lsr	r24
    14a2:	86 95       	lsr	r24
    14a4:	20 e2       	ldi	r18, 0x20	; 32
    14a6:	92 9f       	mul	r25, r18
    14a8:	80 0d       	add	r24, r0
    14aa:	11 24       	eor	r1, r1
    14ac:	8c 83       	std	Y+4, r24	; 0x04
    14ae:	e1 ef       	ldi	r30, 0xF1	; 241
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	9c 91       	ld	r25, X
    14b6:	86 95       	lsr	r24
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	20 e2       	ldi	r18, 0x20	; 32
    14be:	92 9f       	mul	r25, r18
    14c0:	80 0d       	add	r24, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    14c6:	80 91 f0 00 	lds	r24, 0x00F0
    14ca:	90 81       	ld	r25, Z
    14cc:	86 95       	lsr	r24
    14ce:	86 95       	lsr	r24
    14d0:	86 95       	lsr	r24
    14d2:	20 e2       	ldi	r18, 0x20	; 32
    14d4:	92 9f       	mul	r25, r18
    14d6:	80 0d       	add	r24, r0
    14d8:	11 24       	eor	r1, r1
    14da:	8a 83       	std	Y+2, r24	; 0x02
    14dc:	13 c0       	rjmp	.+38     	; 0x1504 <can_get_status+0x176>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    14de:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    14e0:	e3 ef       	ldi	r30, 0xF3	; 243
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	82 95       	swap	r24
    14e8:	86 95       	lsr	r24
    14ea:	87 70       	andi	r24, 0x07	; 7
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	80 91 f2 00 	lds	r24, 0x00F2
    14f2:	90 81       	ld	r25, Z
    14f4:	99 0f       	add	r25, r25
    14f6:	99 0f       	add	r25, r25
    14f8:	99 0f       	add	r25, r25
    14fa:	82 95       	swap	r24
    14fc:	86 95       	lsr	r24
    14fe:	87 70       	andi	r24, 0x07	; 7
    1500:	89 0f       	add	r24, r25
    1502:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1504:	80 ea       	ldi	r24, 0xA0	; 160
    1506:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1508:	8f 81       	ldd	r24, Y+7	; 0x07
    150a:	98 85       	ldd	r25, Y+8	; 0x08
    150c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1510:	ef ee       	ldi	r30, 0xEF	; 239
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	8f 73       	andi	r24, 0x3F	; 63
    1518:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    151a:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    151e:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1520:	1c c0       	rjmp	.+56     	; 0x155a <can_get_status+0x1cc>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1522:	80 e4       	ldi	r24, 0x40	; 64
    1524:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1526:	ef ee       	ldi	r30, 0xEF	; 239
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	8f 73       	andi	r24, 0x3F	; 63
    152e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1530:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1534:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1536:	11 c0       	rjmp	.+34     	; 0x155a <can_get_status+0x1cc>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1538:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    153a:	ef ee       	ldi	r30, 0xEF	; 239
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8f 73       	andi	r24, 0x3F	; 63
    1542:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1544:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1548:	82 e0       	ldi	r24, 0x02	; 2
            break;
    154a:	07 c0       	rjmp	.+14     	; 0x155a <can_get_status+0x1cc>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	05 c0       	rjmp	.+10     	; 0x155a <can_get_status+0x1cc>
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	03 c0       	rjmp	.+6      	; 0x155a <can_get_status+0x1cc>
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	01 c0       	rjmp	.+2      	; 0x155a <can_get_status+0x1cc>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1558:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1560:	83 e1       	ldi	r24, 0x13	; 19
    1562:	80 93 20 01 	sts	0x0120, r24
	send_arr[6] = MT_COM;
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	80 93 1f 01 	sts	0x011F, r24
	send_arr[5] = RESPONSE;
    156c:	84 e0       	ldi	r24, 0x04	; 4
    156e:	80 93 1e 01 	sts	0x011E, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1572:	61 e1       	ldi	r22, 0x11	; 17
    1574:	89 e1       	ldi	r24, 0x19	; 25
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_now = 0;
    157c:	10 92 3e 01 	sts	0x013E, r1
    1580:	08 95       	ret

00001582 <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1582:	83 e1       	ldi	r24, 0x13	; 19
    1584:	80 93 20 01 	sts	0x0120, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	80 93 1f 01 	sts	0x011F, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    158e:	60 e1       	ldi	r22, 0x10	; 16
    1590:	89 e1       	ldi	r24, 0x19	; 25
    1592:	91 e0       	ldi	r25, 0x01	; 1
    1594:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_hk = 0;
    1598:	10 92 4e 01 	sts	0x014E, r1
    159c:	08 95       	ret

0000159e <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <send_sensor_data+0xa>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[3];
    15ac:	10 91 39 01 	lds	r17, 0x0139
	req_by = data_req_arr[7] >> 4;
    15b0:	00 91 3d 01 	lds	r16, 0x013D
    15b4:	02 95       	swap	r16
    15b6:	0f 70       	andi	r16, 0x0F	; 15
	
	if(sensor_name == SPI_TEMP1)
    15b8:	11 30       	cpi	r17, 0x01	; 1
    15ba:	71 f4       	brne	.+28     	; 0x15d8 <send_sensor_data+0x3a>
	{
		spi_retrieve_temp(&high, &low);
    15bc:	be 01       	movw	r22, r28
    15be:	6e 5f       	subi	r22, 0xFE	; 254
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	ce 01       	movw	r24, r28
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	0e 94 0a 0c 	call	0x1814	; 0x1814 <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	80 93 1a 01 	sts	0x011A, r24
		send_arr[0] = low;
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	80 93 19 01 	sts	0x0119, r24
    15d6:	0b c0       	rjmp	.+22     	; 0x15ee <send_sensor_data+0x50>
	}
	
	if(sensor_name == BATT_TOP)
    15d8:	13 30       	cpi	r17, 0x03	; 3
    15da:	21 f4       	brne	.+8      	; 0x15e4 <send_sensor_data+0x46>
	{
		//adc_read(&send_arr[0]);
		send_arr[0] = 0x55;
    15dc:	85 e5       	ldi	r24, 0x55	; 85
    15de:	80 93 19 01 	sts	0x0119, r24
    15e2:	05 c0       	rjmp	.+10     	; 0x15ee <send_sensor_data+0x50>
	}
	
	if(sensor_name == BATT_BOTTOM)
    15e4:	14 30       	cpi	r17, 0x04	; 4
    15e6:	19 f4       	brne	.+6      	; 0x15ee <send_sensor_data+0x50>
	{
		//adc_read(&send_arr[0]);
		send_arr[0] = 0x66;
    15e8:	86 e6       	ldi	r24, 0x66	; 102
    15ea:	80 93 19 01 	sts	0x0119, r24
	}

	send_arr[7] = (SELF_ID << 4)|req_by;
    15ee:	00 61       	ori	r16, 0x10	; 16
    15f0:	00 93 20 01 	sts	0x0120, r16
	send_arr[6] = MT_DATA;
    15f4:	10 92 1f 01 	sts	0x011F, r1
	send_arr[5] = sensor_name;				
    15f8:	10 93 1e 01 	sts	0x011E, r17
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    15fc:	6a e0       	ldi	r22, 0x0A	; 10
    15fe:	89 e1       	ldi	r24, 0x19	; 25
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	send_data = 0;
    1606:	10 92 65 01 	sts	0x0165, r1
	
	return;
}
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1618:	83 e1       	ldi	r24, 0x13	; 19
    161a:	80 93 20 01 	sts	0x0120, r24
	send_arr[6] = MT_DATA;
    161e:	10 92 1f 01 	sts	0x011F, r1
	send_arr[5] = COMS_PACKET;
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	80 93 1e 01 	sts	0x011E, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    1628:	80 91 3f 01 	lds	r24, 0x013F
    162c:	80 93 19 01 	sts	0x0119, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1630:	6a e0       	ldi	r22, 0x0A	; 10
    1632:	89 e1       	ldi	r24, 0x19	; 25
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	msg_received = 0;
    163a:	10 92 08 01 	sts	0x0108, r1
    163e:	08 95       	ret

00001640 <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    1640:	90 91 73 01 	lds	r25, 0x0173
	read_ptr = read_arr[0];
    1644:	e0 91 70 01 	lds	r30, 0x0170
    1648:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    164a:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    164c:	20 91 77 01 	lds	r18, 0x0177
    1650:	20 61       	ori	r18, 0x10	; 16
    1652:	20 93 20 01 	sts	0x0120, r18
	send_arr[6] = MT_COM;
    1656:	22 e0       	ldi	r18, 0x02	; 2
    1658:	20 93 1f 01 	sts	0x011F, r18
	send_arr[5] = ACK_READ;
    165c:	26 e0       	ldi	r18, 0x06	; 6
    165e:	20 93 1e 01 	sts	0x011E, r18
	send_arr[3] = passkey;
    1662:	90 93 1c 01 	sts	0x011C, r25
	send_arr[0] = read_val;
    1666:	80 93 19 01 	sts	0x0119, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    166a:	61 e1       	ldi	r22, 0x11	; 17
    166c:	89 e1       	ldi	r24, 0x19	; 25
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	read_response = 0;
    1674:	10 92 45 01 	sts	0x0145, r1
    1678:	08 95       	ret

0000167a <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    167a:	80 91 03 01 	lds	r24, 0x0103
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    167e:	20 91 00 01 	lds	r18, 0x0100
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    1682:	90 91 77 01 	lds	r25, 0x0177
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    1686:	e0 91 01 01 	lds	r30, 0x0101
    168a:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    168c:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    168e:	90 61       	ori	r25, 0x10	; 16
    1690:	90 93 20 01 	sts	0x0120, r25
	send_arr[6] = MT_COM;
    1694:	92 e0       	ldi	r25, 0x02	; 2
    1696:	90 93 1f 01 	sts	0x011F, r25
	send_arr[5] = ACK_WRITE;
    169a:	98 e0       	ldi	r25, 0x08	; 8
    169c:	90 93 1e 01 	sts	0x011E, r25
	send_arr[3] = passkey;
    16a0:	80 93 1c 01 	sts	0x011C, r24
	send_arr[0] = ret_val;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	80 93 19 01 	sts	0x0119, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    16aa:	61 e1       	ldi	r22, 0x11	; 17
    16ac:	89 e1       	ldi	r24, 0x19	; 25
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	0e 94 67 00 	call	0xce	; 0xce <can_send_message>
	write_response = 0;
    16b4:	10 92 29 01 	sts	0x0129, r1
    16b8:	08 95       	ret

000016ba <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now == 1)
    16ba:	80 91 3e 01 	lds	r24, 0x013E
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <run_commands+0xc>
		send_response();
    16c2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <send_response>
	if (send_hk == 1)
    16c6:	80 91 4e 01 	lds	r24, 0x014E
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <run_commands+0x18>
		send_housekeeping();
    16ce:	0e 94 c1 0a 	call	0x1582	; 0x1582 <send_housekeeping>
	if (send_data == 1)
    16d2:	80 91 65 01 	lds	r24, 0x0165
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	11 f4       	brne	.+4      	; 0x16de <run_commands+0x24>
		send_sensor_data();
    16da:	0e 94 cf 0a 	call	0x159e	; 0x159e <send_sensor_data>
	if (msg_received == 1)
    16de:	80 91 08 01 	lds	r24, 0x0108
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	11 f4       	brne	.+4      	; 0x16ea <run_commands+0x30>
		send_coms_packet();
    16e6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <send_coms_packet>
	if (read_response == 1)
    16ea:	80 91 45 01 	lds	r24, 0x0145
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	11 f4       	brne	.+4      	; 0x16f6 <run_commands+0x3c>
		send_read_response();
    16f2:	0e 94 20 0b 	call	0x1640	; 0x1640 <send_read_response>
	if (write_response == 1)
    16f6:	80 91 29 01 	lds	r24, 0x0129
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	11 f4       	brne	.+4      	; 0x1702 <run_commands+0x48>
		send_write_response();
    16fe:	0e 94 3d 0b 	call	0x167a	; 0x167a <send_write_response>
    1702:	08 95       	ret

00001704 <LED_toggle>:
	return;
}

void LED_toggle(uint8_t LED) 
{
	if(LED == 1)
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	21 f4       	brne	.+8      	; 0x1710 <LED_toggle+0xc>
	{
		PORTD ^= 0x01;
    1708:	9b b1       	in	r25, 0x0b	; 11
    170a:	89 27       	eor	r24, r25
    170c:	8b b9       	out	0x0b, r24	; 11
    170e:	08 95       	ret
	}
	if(LED == 2)
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	29 f4       	brne	.+10     	; 0x171e <LED_toggle+0x1a>
	{
		LEDPORT ^= (1 << 6);
    1714:	95 b1       	in	r25, 0x05	; 5
    1716:	80 e4       	ldi	r24, 0x40	; 64
    1718:	89 27       	eor	r24, r25
    171a:	85 b9       	out	0x05, r24	; 5
    171c:	08 95       	ret
	}
	if(LED == 3)
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	21 f4       	brne	.+8      	; 0x172a <LED_toggle+0x26>
	{
		PORTC ^= 0x01;
    1722:	98 b1       	in	r25, 0x08	; 8
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	89 27       	eor	r24, r25
    1728:	88 b9       	out	0x08, r24	; 8
    172a:	08 95       	ret

0000172c <LED_blink>:
	}
	return;
}

void LED_blink(uint8_t LED)
{
    172c:	cf 93       	push	r28
    172e:	c8 2f       	mov	r28, r24
	LED_toggle(LED);
    1730:	0e 94 82 0b 	call	0x1704	; 0x1704 <LED_toggle>
	delay_ms(25);
    1734:	89 e1       	ldi	r24, 0x19	; 25
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>
	LED_toggle(LED);
    173c:	8c 2f       	mov	r24, r28
    173e:	0e 94 82 0b 	call	0x1704	; 0x1704 <LED_toggle>
	delay_ms(25);
    1742:	89 e1       	ldi	r24, 0x19	; 25
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>
	return;
}
    174a:	cf 91       	pop	r28
    174c:	08 95       	ret

0000174e <main>:
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    174e:	e1 e6       	ldi	r30, 0x61	; 97
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1756:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1758:	8e ef       	ldi	r24, 0xFE	; 254
    175a:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    175c:	81 e1       	ldi	r24, 0x11	; 17
    175e:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    1760:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    1762:	89 e0       	ldi	r24, 0x09	; 9
    1764:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    176a:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    176c:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	
	timer_init();
    176e:	0e 94 36 0c 	call	0x186c	; 0x186c <timer_init>
	adc_initialize();
    1772:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	0e 94 8c 03 	call	0x718	; 0x718 <can_init>
	can_init_mobs();
    177c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <can_init_mobs>
	spi_initialize_master();
    1780:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <spi_initialize_master>
	
	// Enable global interrupts for Timer execution
	sei();
    1784:	78 94       	sei
	
	transceiver_initialize();
    1786:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <transceiver_initialize>
	
	SS1_set_high();		// SPI Temp Sensor.
    178a:	0e 94 01 0c 	call	0x1802	; 0x1802 <SS1_set_high>
	
	LED_toggle(LED1);
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	0e 94 82 0b 	call	0x1704	; 0x1704 <LED_toggle>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    1794:	0e 94 1d 02 	call	0x43a	; 0x43a <can_check_general>
	
		/*		TRANSCEIVER COMMUNICATION	*/
		if(SELF_ID == 1)
		{
			trans_check();		// Check for incoming packets.	
    1798:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <trans_check>
		}

		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    179c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <run_commands>
    17a0:	f9 cf       	rjmp	.-14     	; 0x1794 <main+0x46>

000017a2 <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    17a2:	85 b7       	in	r24, 0x35	; 53
    17a4:	8f 77       	andi	r24, 0x7F	; 127
    17a6:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    17a8:	83 e5       	ldi	r24, 0x53	; 83
    17aa:	8c bd       	out	0x2c, r24	; 44
    17ac:	08 95       	ret

000017ae <spi_transfer>:
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	//SS_set_low();
	*reg_ptr = message;
    17ae:	8e bd       	out	0x2e, r24	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    17b0:	0d b4       	in	r0, 0x2d	; 45
    17b2:	07 fc       	sbrc	r0, 7
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <spi_transfer+0x10>
    17b6:	89 ee       	ldi	r24, 0xE9	; 233
    17b8:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <spi_transfer+0xa>
    17bc:	08 95       	ret
			LED_blink(LED2);
		}
	}	
	//SS_set_high();
	
	delay_cycles(10);
    17be:	8a e0       	ldi	r24, 0x0A	; 10
    17c0:	0e 94 66 0c 	call	0x18cc	; 0x18cc <delay_cycles>
	
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    17c4:	8e b5       	in	r24, 0x2e	; 46
		//temp2 = temp2 << (7 - i);		
		//temp += temp2;
	//}
	
	return receive_char;					// Transmission was successful, return the character that was received.
}
    17c6:	08 95       	ret

000017c8 <SS_set_high>:
/************************************************************************/

void SS_set_high(void) 
{
	//PORTD |= (1 << 3);
	delay_us(1);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
    17d0:	08 95       	ret

000017d2 <spi_transfer2>:
	
	return receive_char;					// Transmission was successful, return the character that was received.
}

uint8_t spi_transfer2(uint8_t message)
{
    17d2:	cf 93       	push	r28
	//cmd_str(SRES);
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	PORTD &= (0xF7);
    17d4:	5b 98       	cbi	0x0b, 3	; 11
	//delay_cycles(10);
	*reg_ptr = message;
    17d6:	8e bd       	out	0x2e, r24	; 46
	//delay_cycles(10);
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    17d8:	0d b4       	in	r0, 0x2d	; 45
    17da:	07 fc       	sbrc	r0, 7
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <spi_transfer2+0x18>
    17de:	c9 ee       	ldi	r28, 0xE9	; 233
    17e0:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <spi_transfer2+0xe>
		{
			SS_set_high();
    17e4:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <SS_set_high>
			return 0x00;						// Something went wrong, so the function times out.
    17e8:	09 c0       	rjmp	.+18     	; 0x17fc <spi_transfer2+0x2a>
		}
	}
	delay_cycles(7);
    17ea:	87 e0       	ldi	r24, 0x07	; 7
    17ec:	0e 94 66 0c 	call	0x18cc	; 0x18cc <delay_cycles>
	SS_set_high();
    17f0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <SS_set_high>
	
	delay_cycles(10);
    17f4:	8a e0       	ldi	r24, 0x0A	; 10
    17f6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <delay_cycles>
		
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    17fa:	ce b5       	in	r28, 0x2e	; 46
		
	return receive_char;					// Transmission was successful, return the character that was received.
}
    17fc:	8c 2f       	mov	r24, r28
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    1802:	44 9a       	sbi	0x08, 4	; 8
    1804:	08 95       	ret

00001806 <SS_set_low>:
/************************************************************************/

void SS_set_low(void)
{
	//PORTD &= (0xF7);
	delay_us(1);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
    180e:	08 95       	ret

00001810 <SS1_set_low>:
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    1810:	44 98       	cbi	0x08, 4	; 8
    1812:	08 95       	ret

00001814 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    1814:	0f 93       	push	r16
    1816:	1f 93       	push	r17
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	8c 01       	movw	r16, r24
    181e:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    1820:	0e 94 08 0c 	call	0x1810	; 0x1810 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    1824:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    1826:	80 e8       	ldi	r24, 0x80	; 128
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>
	*high = *reg_ptr;
    182e:	8e b5       	in	r24, 0x2e	; 46
    1830:	f8 01       	movw	r30, r16
    1832:	80 83       	st	Z, r24
	delay_ms(128);
    1834:	80 e8       	ldi	r24, 0x80	; 128
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>
	*low = *reg_ptr;	
    183c:	8e b5       	in	r24, 0x2e	; 46
    183e:	88 83       	st	Y, r24
	SS1_set_high();
    1840:	0e 94 01 0c 	call	0x1802	; 0x1802 <SS1_set_high>
	
	return;
}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	08 95       	ret

0000184e <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	8f 93       	push	r24
	CTC_flag = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	80 93 78 01 	sts	0x0178, r24
}
    1860:	8f 91       	pop	r24
    1862:	0f 90       	pop	r0
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	0f 90       	pop	r0
    1868:	1f 90       	pop	r1
    186a:	18 95       	reti

0000186c <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    186c:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    1870:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    1874:	8a e0       	ldi	r24, 0x0A	; 10
    1876:	80 93 81 00 	sts	0x0081, r24
    187a:	08 95       	ret

0000187c <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    187c:	10 92 78 01 	sts	0x0178, r1
	TCNT1 = 0x0000; //Clear timer
    1880:	10 92 85 00 	sts	0x0085, r1
    1884:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    1888:	90 93 89 00 	sts	0x0089, r25
    188c:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    1896:	80 91 78 01 	lds	r24, 0x0178
    189a:	88 23       	and	r24, r24
    189c:	e1 f3       	breq	.-8      	; 0x1896 <delay_us+0x1a>
}
    189e:	08 95       	ret

000018a0 <delay_ms>:

void delay_ms(uint16_t ms) {
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	51 f0       	breq	.+20     	; 0x18c2 <delay_ms+0x22>
    18ae:	c0 e0       	ldi	r28, 0x00	; 0
    18b0:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    18b2:	88 ee       	ldi	r24, 0xE8	; 232
    18b4:	93 e0       	ldi	r25, 0x03	; 3
    18b6:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    18ba:	21 96       	adiw	r28, 0x01	; 1
    18bc:	c0 17       	cp	r28, r16
    18be:	d1 07       	cpc	r29, r17
    18c0:	c1 f7       	brne	.-16     	; 0x18b2 <delay_ms+0x12>
		delay_us(1000);
	}
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0f 91       	pop	r16
    18ca:	08 95       	ret

000018cc <delay_cycles>:

void delay_cycles(uint8_t cycles)	// @ 8 MHz, 1 cycle = 125 ns
{
	uint8_t i;
	
	for (i = 0; i < cycles; i++)
    18cc:	88 23       	and	r24, r24
    18ce:	21 f0       	breq	.+8      	; 0x18d8 <delay_cycles+0xc>
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	9f 5f       	subi	r25, 0xFF	; 255
    18d4:	98 13       	cpse	r25, r24
    18d6:	fd cf       	rjmp	.-6      	; 0x18d2 <delay_cycles+0x6>
    18d8:	08 95       	ret

000018da <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
    18da:	cf 93       	push	r28
    18dc:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
    18de:	0e 94 03 0c 	call	0x1806	; 0x1806 <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
    18e2:	80 e8       	ldi	r24, 0x80	; 128
    18e4:	8c 0f       	add	r24, r28
    18e6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	delay_us(1);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	msg = spi_transfer(0x00);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
    18f8:	c8 2f       	mov	r28, r24

	SS_set_high();
    18fa:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <SS_set_high>
	
	delay_ms(1);
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>
	
	return msg;
}
    1906:	8c 2f       	mov	r24, r28
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret

0000190c <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	d8 2f       	mov	r29, r24
    1912:	c6 2f       	mov	r28, r22
	uint8_t msg, check, i;
	
	SS_set_low();
    1914:	0e 94 03 0c 	call	0x1806	; 0x1806 <SS_set_low>
	msg = spi_transfer(addr);		// Send the desired address
    1918:	8d 2f       	mov	r24, r29
    191a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	delay_us(1);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    1926:	8c 2f       	mov	r24, r28
    1928:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	SS_set_high();
    192c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <SS_set_high>
	
	delay_ms(1);
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>

	return;
}
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	08 95       	ret

0000193e <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
    193e:	cf 93       	push	r28
    1940:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
    1942:	0e 94 03 0c 	call	0x1806	; 0x1806 <SS_set_low>
	msg = spi_transfer(msg);
    1946:	8f ea       	ldi	r24, 0xAF	; 175
    1948:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	delay_us(1);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1954:	8c 2f       	mov	r24, r28
    1956:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	delay_us(1);
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	msg = spi_transfer(0x00);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
    1968:	c8 2f       	mov	r28, r24
	SS_set_high();
    196a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <SS_set_high>
	delay_ms(1);
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>
	return msg;
}
    1976:	8c 2f       	mov	r24, r28
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret

0000197c <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr)
{
    197c:	cf 93       	push	r28
	uint8_t msg;
	
	msg = spi_transfer2(addr);
    197e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <spi_transfer2>
    1982:	c8 2f       	mov	r28, r24
	
	delay_us(1);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	return msg;
}
    198c:	8c 2f       	mov	r24, r28
    198e:	cf 91       	pop	r28
    1990:	08 95       	ret

00001992 <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	d8 2f       	mov	r29, r24
    1998:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    199a:	8d e3       	ldi	r24, 0x3D	; 61
    199c:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
	uint8_t msg, i, check;
	msg = 0b00101111;
	
	SS_set_low();
    19a0:	0e 94 03 0c 	call	0x1806	; 0x1806 <SS_set_low>
	spi_transfer(msg);
    19a4:	8f e2       	ldi	r24, 0x2F	; 47
    19a6:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	delay_us(1);
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    19b2:	8d 2f       	mov	r24, r29
    19b4:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	delay_us(1);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    19c0:	8c 2f       	mov	r24, r28
    19c2:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	SS_set_high();
    19c6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <SS_set_high>
	delay_ms(1);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>

	return;
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <get_status>:
/*		Note: 000 = IDLE, 001 = RX, 110 = RX buffer overflow.			*/
/*																		*/
/************************************************************************/

void get_status(uint8_t *CHIP_RDYn, uint8_t *state)
{
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	eb 01       	movw	r28, r22
	uint8_t msg;

	msg = cmd_str(SNOP);
    19de:	8d e3       	ldi	r24, 0x3D	; 61
    19e0:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
	
	msg = msg & ~0x80;
    19e4:	8f 77       	andi	r24, 0x7F	; 127
	msg = msg >> 4;
    19e6:	82 95       	swap	r24
    19e8:	8f 70       	andi	r24, 0x0F	; 15
	*state = msg;
    19ea:	88 83       	st	Y, r24
	
	return;
}
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	08 95       	ret

000019f2 <dir_FIFO_read>:
/*	on the CC1120's FIFO and return the byte which was located there.	*/
/*																		*/
/************************************************************************/

uint8_t dir_FIFO_read(uint8_t addr)
{
    19f2:	cf 93       	push	r28
    19f4:	c8 2f       	mov	r28, r24
	cmd_str(SNOP);
    19f6:	8d e3       	ldi	r24, 0x3D	; 61
    19f8:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
	uint8_t msg;
	msg = 0b10111110;
	
	SS_set_low();
    19fc:	0e 94 03 0c 	call	0x1806	; 0x1806 <SS_set_low>
	msg = spi_transfer(msg);
    1a00:	8e eb       	ldi	r24, 0xBE	; 190
    1a02:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	delay_us(1);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    1a0e:	8c 2f       	mov	r24, r28
    1a10:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
	delay_us(1);
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 3e 0c 	call	0x187c	; 0x187c <delay_us>
	msg = spi_transfer(0x00);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <spi_transfer>
    1a22:	c8 2f       	mov	r28, r24
	SS_set_high();
    1a24:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <SS_set_high>
	delay_ms(1);
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>
	return msg;
}
    1a30:	8c 2f       	mov	r24, r28
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	c8 2f       	mov	r28, r24
    1a3e:	d6 2f       	mov	r29, r22
    1a40:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
    1a42:	0e 94 6d 0c 	call	0x18da	; 0x18da <reg_read>
	if(!data)
    1a46:	11 11       	cpse	r17, r1
    1a48:	0c c0       	rjmp	.+24     	; 0x1a62 <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
    1a4a:	e1 e0       	ldi	r30, 0x01	; 1
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	af 01       	movw	r20, r30
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <reg_write_bit+0x20>
    1a52:	44 0f       	add	r20, r20
    1a54:	55 1f       	adc	r21, r21
    1a56:	da 95       	dec	r29
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <reg_write_bit+0x1c>
    1a5a:	40 95       	com	r20
		msg = temp & msg;
    1a5c:	68 2f       	mov	r22, r24
    1a5e:	64 23       	and	r22, r20
    1a60:	0a c0       	rjmp	.+20     	; 0x1a76 <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
    1a62:	41 e0       	ldi	r20, 0x01	; 1
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	9a 01       	movw	r18, r20
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <reg_write_bit+0x38>
    1a6a:	22 0f       	add	r18, r18
    1a6c:	33 1f       	adc	r19, r19
    1a6e:	da 95       	dec	r29
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <reg_write_bit+0x34>
		msg = temp | msg;
    1a72:	68 2f       	mov	r22, r24
    1a74:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
    1a76:	8c 2f       	mov	r24, r28
    1a78:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	return;
}
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	08 95       	ret

00001a84 <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	c8 2f       	mov	r28, r24
    1a8c:	d6 2f       	mov	r29, r22
    1a8e:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
    1a90:	0e 94 9f 0c 	call	0x193e	; 0x193e <reg_read2F>
	if(!data)
    1a94:	11 11       	cpse	r17, r1
    1a96:	0c c0       	rjmp	.+24     	; 0x1ab0 <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
    1a98:	e1 e0       	ldi	r30, 0x01	; 1
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	af 01       	movw	r20, r30
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <reg_write_bit2F+0x20>
    1aa0:	44 0f       	add	r20, r20
    1aa2:	55 1f       	adc	r21, r21
    1aa4:	da 95       	dec	r29
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <reg_write_bit2F+0x1c>
    1aa8:	40 95       	com	r20
		msg = temp & msg;
    1aaa:	68 2f       	mov	r22, r24
    1aac:	64 23       	and	r22, r20
    1aae:	0a c0       	rjmp	.+20     	; 0x1ac4 <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	50 e0       	ldi	r21, 0x00	; 0
    1ab4:	9a 01       	movw	r18, r20
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <reg_write_bit2F+0x38>
    1ab8:	22 0f       	add	r18, r18
    1aba:	33 1f       	adc	r19, r19
    1abc:	da 95       	dec	r29
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <reg_write_bit2F+0x34>
		msg = temp | msg;
    1ac0:	68 2f       	mov	r22, r24
    1ac2:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
    1ac4:	8c 2f       	mov	r24, r28
    1ac6:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	return;
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	08 95       	ret

00001ad2 <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    1ad2:	0e 94 03 0c 	call	0x1806	; 0x1806 <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	  
	//RESET 
    cmd_str(SRES);             //SRES                  reset chip
    1ad6:	80 e3       	ldi	r24, 0x30	; 48
    1ad8:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
      
    //Reset RX FIFO
    cmd_str(SFRX);             //SFRX                  flush RX FIFO
    1adc:	8a e3       	ldi	r24, 0x3A	; 58
    1ade:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
      
    //Reset TX FIFO
    cmd_str(SFTX);             //SFTX                  flush TX FIFO
    1ae2:	8b e3       	ldi	r24, 0x3B	; 59
    1ae4:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>

	//**************SET UP RX****************//
  
	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	82 e1       	ldi	r24, 0x12	; 18
    1aec:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    1af0:	6f e5       	ldi	r22, 0x5F	; 95
    1af2:	83 e1       	ldi	r24, 0x13	; 19
    1af4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    1af8:	60 e4       	ldi	r22, 0x40	; 64
    1afa:	86 e1       	ldi	r24, 0x16	; 22
    1afc:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    1b00:	6e e0       	ldi	r22, 0x0E	; 14
    1b02:	87 e1       	ldi	r24, 0x17	; 23
    1b04:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    1b08:	63 e0       	ldi	r22, 0x03	; 3
    1b0a:	89 e1       	ldi	r24, 0x19	; 25
    1b0c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    1b10:	63 e3       	ldi	r22, 0x33	; 51
    1b12:	8b e1       	ldi	r24, 0x1B	; 27
    1b14:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    1b18:	67 e1       	ldi	r22, 0x17	; 23
    1b1a:	8d e1       	ldi	r24, 0x1D	; 29
    1b1c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    1b20:	60 e5       	ldi	r22, 0x50	; 80
    1b22:	8f e1       	ldi	r24, 0x1F	; 31
    1b24:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
//  reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
  
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    1b28:	64 e1       	ldi	r22, 0x14	; 20
    1b2a:	81 e2       	ldi	r24, 0x21	; 33
    1b2c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    1b30:	6c ea       	ldi	r22, 0xAC	; 172
    1b32:	82 e2       	ldi	r24, 0x22	; 34
    1b34:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	//reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
	//reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
	//reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
  
	cmd_str(SNOP);
    1b38:	8d e3       	ldi	r24, 0x3D	; 61
    1b3a:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
	//For test purposes only, (2nd block, deleted first one) use values from SmartRF for some bits
	reg_write(0x08, 0x0B);            //*Changed on line 152
    1b3e:	6b e0       	ldi	r22, 0x0B	; 11
    1b40:	88 e0       	ldi	r24, 0x08	; 8
    1b42:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x13, 0x0D);            //
    1b46:	6d e0       	ldi	r22, 0x0D	; 13
    1b48:	83 e1       	ldi	r24, 0x13	; 19
    1b4a:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x26, 0x04);            //*Changed on line 144
    1b4e:	64 e0       	ldi	r22, 0x04	; 4
    1b50:	86 e2       	ldi	r24, 0x26	; 38
    1b52:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
  
	//High performance RX
	reg_write(0x08, 0x0B);            //
    1b56:	6b e0       	ldi	r22, 0x0B	; 11
    1b58:	88 e0       	ldi	r24, 0x08	; 8
    1b5a:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x0C, 0x1C);            //
    1b5e:	6c e1       	ldi	r22, 0x1C	; 28
    1b60:	8c e0       	ldi	r24, 0x0C	; 12
    1b62:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x10, 0x00);            //
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	80 e1       	ldi	r24, 0x10	; 16
    1b6a:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x11, 0x04);            //
    1b6e:	64 e0       	ldi	r22, 0x04	; 4
    1b70:	81 e1       	ldi	r24, 0x11	; 17
    1b72:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x13, 0x05);            //
    1b76:	65 e0       	ldi	r22, 0x05	; 5
    1b78:	83 e1       	ldi	r24, 0x13	; 19
    1b7a:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x1C, 0xA9);            //
    1b7e:	69 ea       	ldi	r22, 0xA9	; 169
    1b80:	8c e1       	ldi	r24, 0x1C	; 28
    1b82:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x1D, 0xCF);            //
    1b86:	6f ec       	ldi	r22, 0xCF	; 207
    1b88:	8d e1       	ldi	r24, 0x1D	; 29
    1b8a:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x1E, 0x00);            //
    1b8e:	60 e0       	ldi	r22, 0x00	; 0
    1b90:	8e e1       	ldi	r24, 0x1E	; 30
    1b92:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x20, 0x03);            //
    1b96:	63 e0       	ldi	r22, 0x03	; 3
    1b98:	80 e2       	ldi	r24, 0x20	; 32
    1b9a:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x2E, 0x00);            //
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	8e e2       	ldi	r24, 0x2E	; 46
    1ba2:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write2F(0x00, 0x00);          //
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>

	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    1bae:	68 e4       	ldi	r22, 0x48	; 72
    1bb0:	8a e0       	ldi	r24, 0x0A	; 10
    1bb2:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    1bb6:	65 e0       	ldi	r22, 0x05	; 5
    1bb8:	8b e0       	ldi	r24, 0x0B	; 11
    1bba:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: 0x14           set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector enabled
    1bbe:	64 e0       	ldi	r22, 0x04	; 4
    1bc0:	81 e2       	ldi	r24, 0x21	; 33
    1bc2:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
  
	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	8d e0       	ldi	r24, 0x0D	; 13
    1bca:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	65 e0       	ldi	r22, 0x05	; 5
    1bd2:	8e e0       	ldi	r24, 0x0E	; 14
    1bd4:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <reg_write_bit>
  
	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	67 e0       	ldi	r22, 0x07	; 7
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	66 e0       	ldi	r22, 0x06	; 6
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <reg_write_bit2F>
  
	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	66 e0       	ldi	r22, 0x06	; 6
    1bf0:	88 e0       	ldi	r24, 0x08	; 8
    1bf2:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <reg_write_bit>
	reg_write(0x09, 0x17);            //SYNC_CFG0: 0x17        32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    1bf6:	67 e1       	ldi	r22, 0x17	; 23
    1bf8:	89 e0       	ldi	r24, 0x09	; 9
    1bfa:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
  
	//set packets
	reg_write(0x26, 0x00);            //PKT_CFG2: 0x00         set FIFO mode
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	86 e2       	ldi	r24, 0x26	; 38
    1c02:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
	reg_write(0x2E, 0xFF);            //PKT_LEN: 0xFF          set packet length to 0xFF (max)  
    1c06:	6f ef       	ldi	r22, 0xFF	; 255
    1c08:	8e e2       	ldi	r24, 0x2E	; 46
    1c0a:	0e 94 86 0c 	call	0x190c	; 0x190c <reg_write>
    
	//Frequency setting
	cmd_str(SNOP);
    1c0e:	8d e3       	ldi	r24, 0x3D	; 61
    1c10:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    1c14:	6c e6       	ldi	r22, 0x6C	; 108
    1c16:	8c e0       	ldi	r24, 0x0C	; 12
    1c18:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    1c1c:	60 e8       	ldi	r22, 0x80	; 128
    1c1e:	8d e0       	ldi	r24, 0x0D	; 13
    1c20:	0e 94 c9 0c 	call	0x1992	; 0x1992 <reg_write2F>

	//set up GPIO1 to 17
	//reg_write(0x00, 17);
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    1c24:	83 e3       	ldi	r24, 0x33	; 51
    1c26:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
	delay_ms(250);
    1c2a:	8a ef       	ldi	r24, 0xFA	; 250
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>

	cmd_str(SAFC);					 // Automatic frequency control
    1c32:	87 e3       	ldi	r24, 0x37	; 55
    1c34:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
	delay_ms(250);
    1c38:	8a ef       	ldi	r24, 0xFA	; 250
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <delay_ms>
	
	//reg_write2F(0xD2, 0x00);
	//reg_write2F(0xD4, 0xFF);
	
	msg_received = 0;
    1c40:	10 92 08 01 	sts	0x0108, r1

	cmd_str(SRX);                    // Put in RX mode
    1c44:	84 e3       	ldi	r24, 0x34	; 52
    1c46:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
    1c4a:	08 95       	ret

00001c4c <trans_check>:
	reg_write2F(reg, msg);
	return;
}

void trans_check(void)
{
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <trans_check+0x6>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	uint8_t msg = 0, CHIP_RDYn, state;
	
	get_status(&CHIP_RDYn, &state);
    1c56:	be 01       	movw	r22, r28
    1c58:	6e 5f       	subi	r22, 0xFE	; 254
    1c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	01 96       	adiw	r24, 0x01	; 1
    1c60:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <get_status>

	if(state == 0b110 || state == 0b111)
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	86 50       	subi	r24, 0x06	; 6
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	80 f5       	brcc	.+96     	; 0x1ccc <trans_check+0x80>
	{
		cmd_str(SIDLE);
    1c6c:	86 e3       	ldi	r24, 0x36	; 54
    1c6e:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>

		LED_blink(LED3);
    1c72:	83 e0       	ldi	r24, 0x03	; 3
    1c74:	0e 94 96 0b 	call	0x172c	; 0x172c <LED_blink>
		
		// Here we would send our message to the OBC.
		
		cmd_str(SNOP);
    1c78:	8d e3       	ldi	r24, 0x3D	; 61
    1c7a:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
		trans_msg[0] = dir_FIFO_read(0x80);
    1c7e:	80 e8       	ldi	r24, 0x80	; 128
    1c80:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <dir_FIFO_read>
    1c84:	80 93 3f 01 	sts	0x013F, r24
		trans_msg[1] = dir_FIFO_read(0x81);
    1c88:	81 e8       	ldi	r24, 0x81	; 129
    1c8a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <dir_FIFO_read>
    1c8e:	80 93 40 01 	sts	0x0140, r24
		trans_msg[2] = dir_FIFO_read(0x82);
    1c92:	82 e8       	ldi	r24, 0x82	; 130
    1c94:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <dir_FIFO_read>
    1c98:	80 93 41 01 	sts	0x0141, r24
		trans_msg[3] = dir_FIFO_read(0x83);
    1c9c:	83 e8       	ldi	r24, 0x83	; 131
    1c9e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <dir_FIFO_read>
    1ca2:	80 93 42 01 	sts	0x0142, r24
		trans_msg[4] = dir_FIFO_read(0x84);
    1ca6:	84 e8       	ldi	r24, 0x84	; 132
    1ca8:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <dir_FIFO_read>
    1cac:	80 93 43 01 	sts	0x0143, r24
		trans_msg[5] = dir_FIFO_read(0x85);
    1cb0:	85 e8       	ldi	r24, 0x85	; 133
    1cb2:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <dir_FIFO_read>
    1cb6:	80 93 44 01 	sts	0x0144, r24
			//LED_toggle(LED6);
			//delay_ms(100);
			//LED_toggle(LED6);
			//delay_ms(100);
		//}
		msg_received = 1;		// Indicates that in main() we will send trans_msg to the OBC via CAN.
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	80 93 08 01 	sts	0x0108, r24
		
		cmd_str(SFRX);
    1cc0:	8a e3       	ldi	r24, 0x3A	; 58
    1cc2:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
		//reg_write2F(0xD2, 0x00);
		//reg_write2F(0xD4, 0xFF);
		
		//cmd_str(SFTX);
		
		cmd_str(SRX);
    1cc6:	84 e3       	ldi	r24, 0x34	; 52
    1cc8:	0e 94 be 0c 	call	0x197c	; 0x197c <cmd_str>
	}
	return;
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	08 95       	ret

00001cd6 <__tablejump2__>:
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31

00001cda <__tablejump__>:
    1cda:	05 90       	lpm	r0, Z+
    1cdc:	f4 91       	lpm	r31, Z
    1cde:	e0 2d       	mov	r30, r0
    1ce0:	09 94       	ijmp

00001ce2 <_exit>:
    1ce2:	f8 94       	cli

00001ce4 <__stop_program>:
    1ce4:	ff cf       	rjmp	.-2      	; 0x1ce4 <__stop_program>
