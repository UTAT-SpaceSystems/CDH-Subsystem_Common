
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b3a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002f6  00800100  00800100  00002bae  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00002bae  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000003b0  00000000  00000000  00002bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000830e  00000000  00000000  00002f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001431  00000000  00000000  0000b29c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000017ef  00000000  00000000  0000c6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000084c  00000000  00000000  0000debc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000e36  00000000  00000000  0000e708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002afa  00000000  00000000  0000f53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000328  00000000  00000000  00012038  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//if the flag is set from commands, then flip the pin that controls the battBalance on.
//batt balance pins are 23 and 24 

void run_battBalance()
{
	if (balance_l == 1)
       0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
	{
		PIN_set(BALANCE_L_P);
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
	}
	if (balance_l == 0)
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
	{
		PIN_clr(BALANCE_L_P);
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
	}
	if (balance_h == 1)
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
	{
		PIN_set(BALANCE_H_P);
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
	}
	if (balance_h == 0)
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 42 13 	jmp	0x2684	; 0x2684 <__vector_12>
	{
		PIN_clr(BALANCE_H_P);
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 c9 10 	jmp	0x2192	; 0x2192 <__vector_17>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      68:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      6c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      70:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      74:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      78:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      7c:	df 00       	.word	0x00df	; ????
      7e:	e5 00       	.word	0x00e5	; ????
      80:	f5 00       	.word	0x00f5	; ????
      82:	a9 01       	movw	r20, r18
      84:	fb 00       	.word	0x00fb	; ????
      86:	a9 01       	movw	r20, r18
      88:	08 01       	movw	r0, r16
      8a:	a9 01       	movw	r20, r18
      8c:	15 01       	movw	r2, r10
      8e:	22 01       	movw	r4, r4
      90:	2f 01       	movw	r4, r30
      92:	3c 01       	movw	r6, r24
      94:	40 01       	movw	r8, r0
      96:	a9 01       	movw	r20, r18
      98:	4d 01       	movw	r8, r26
      9a:	a9 01       	movw	r20, r18
      9c:	a9 01       	movw	r20, r18
      9e:	6e 01       	movw	r12, r28
      a0:	a9 01       	movw	r20, r18
      a2:	6a 01       	movw	r12, r20
      a4:	a9 01       	movw	r20, r18
      a6:	a9 01       	movw	r20, r18
      a8:	a9 01       	movw	r20, r18
      aa:	71 01       	movw	r14, r2
      ac:	a9 01       	movw	r20, r18
      ae:	a9 01       	movw	r20, r18
      b0:	81 01       	movw	r16, r2
      b2:	81 01       	movw	r16, r2
      b4:	81 01       	movw	r16, r2
      b6:	88 01       	movw	r16, r16
      b8:	8f 01       	movw	r16, r30
      ba:	9c 01       	movw	r18, r24
      bc:	79 04       	cpc	r7, r9
      be:	0b 05       	cpc	r16, r11
      c0:	95 05       	cpc	r25, r5
      c2:	09 06       	cpc	r0, r25
      c4:	49 06       	cpc	r4, r25
      c6:	c5 06       	cpc	r12, r21
      c8:	42 07       	cpc	r20, r18
      ca:	df 07       	cpc	r29, r31
      cc:	85 08       	sbc	r8, r5
      ce:	73 04       	cpc	r7, r3
      d0:	8e 09       	sbc	r24, r14
      d2:	1d 0e       	add	r1, r29
      d4:	1f 0e       	add	r1, r31
      d6:	1f 0e       	add	r1, r31
      d8:	1b 0e       	add	r1, r27
      da:	19 0e       	add	r1, r25
      dc:	15 0e       	add	r1, r21
      de:	17 0e       	add	r1, r23
      e0:	1f 0e       	add	r1, r31
      e2:	1f 0e       	add	r1, r31
      e4:	1f 0e       	add	r1, r31
      e6:	1f 0e       	add	r1, r31
      e8:	1f 0e       	add	r1, r31
      ea:	1f 0e       	add	r1, r31
      ec:	1f 0e       	add	r1, r31
      ee:	1f 0e       	add	r1, r31
      f0:	1f 0e       	add	r1, r31
      f2:	1f 0e       	add	r1, r31
      f4:	1f 0e       	add	r1, r31
      f6:	1f 0e       	add	r1, r31
      f8:	13 0e       	add	r1, r19
      fa:	11 0e       	add	r1, r17

000000fc <__ctors_end>:
      fc:	11 24       	eor	r1, r1
      fe:	1f be       	out	0x3f, r1	; 63
     100:	cf ef       	ldi	r28, 0xFF	; 255
     102:	d8 e0       	ldi	r29, 0x08	; 8
     104:	de bf       	out	0x3e, r29	; 62
     106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_clear_bss>:
     108:	23 e0       	ldi	r18, 0x03	; 3
     10a:	a0 e0       	ldi	r26, 0x00	; 0
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a6 3f       	cpi	r26, 0xF6	; 246
     114:	b2 07       	cpc	r27, r18
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 56 11 	call	0x22ac	; 0x22ac <main>
     11c:	0c 94 9b 15 	jmp	0x2b36	; 0x2b36 <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <adc_initialize>:
	uint8_t* ptr;
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	*ptr = 0b00000010;			// Choose ADC2
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	*ptr = 0b11100010;	
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
     124:	82 e0       	ldi	r24, 0x02	; 2
     126:	80 93 7c 00 	sts	0x007C, r24
	*ptr = 0b10100000;
	
	return;
}
     12a:	82 ee       	ldi	r24, 0xE2	; 226
     12c:	80 93 7a 00 	sts	0x007A, r24

/************************************************************************/
/*		ADC READING                                                     */
/*																		*/
     130:	80 ea       	ldi	r24, 0xA0	; 160
     132:	80 93 7b 00 	sts	0x007B, r24
     136:	08 95       	ret

00000138 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     138:	21 ee       	ldi	r18, 0xE1	; 225
     13a:	31 e0       	ldi	r19, 0x01	; 1
     13c:	30 93 eb 03 	sts	0x03EB, r19
     140:	20 93 ea 03 	sts	0x03EA, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     144:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id;  // populate ID field with ID Tag
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	70 93 e6 03 	sts	0x03E6, r23
     14e:	60 93 e5 03 	sts	0x03E5, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     152:	22 e0       	ldi	r18, 0x02	; 2
     154:	20 93 e4 03 	sts	0x03E4, r18
	message.dlc = 8;			 // Max length of a CAN message.
     158:	28 e0       	ldi	r18, 0x08	; 8
     15a:	20 93 e9 03 	sts	0x03E9, r18
	mob_number = 4;
     15e:	24 e0       	ldi	r18, 0x04	; 4
     160:	20 93 23 03 	sts	0x0323, r18
     164:	dc 01       	movw	r26, r24
     166:	e1 ee       	ldi	r30, 0xE1	; 225
     168:	f1 e0       	ldi	r31, 0x01	; 1
     16a:	89 ee       	ldi	r24, 0xE9	; 233
     16c:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     16e:	2d 91       	ld	r18, X+
     170:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     172:	e8 17       	cp	r30, r24
     174:	f9 07       	cpc	r31, r25
     176:	d9 f7       	brne	.-10     	; 0x16e <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     178:	60 91 23 03 	lds	r22, 0x0323
     17c:	83 ee       	ldi	r24, 0xE3	; 227
     17e:	93 e0       	ldi	r25, 0x03	; 3
     180:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     184:	81 11       	cpse	r24, r1
     186:	f8 cf       	rjmp	.-16     	; 0x178 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     188:	60 91 23 03 	lds	r22, 0x0323
     18c:	83 ee       	ldi	r24, 0xE3	; 227
     18e:	93 e0       	ldi	r25, 0x03	; 3
     190:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <can_get_status>
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	c1 f3       	breq	.-16     	; 0x188 <can_send_message+0x50>

	return;
}
     198:	08 95       	ret

0000019a <decode_command>:

void decode_command(uint8_t* command_array)
{		
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	8c 01       	movw	r16, r24
	uint8_t i, command  = *(command_array + 5);
	uint8_t req_by = (*(command_array + 7)) >> 4;

	switch(command)
     1a4:	fc 01       	movw	r30, r24
     1a6:	45 81       	ldd	r20, Z+5	; 0x05
     1a8:	50 e0       	ldi	r21, 0x00	; 0
     1aa:	fa 01       	movw	r30, r20
     1ac:	31 97       	sbiw	r30, 0x01	; 1
     1ae:	e0 32       	cpi	r30, 0x20	; 32
     1b0:	f1 05       	cpc	r31, r1
     1b2:	08 f0       	brcs	.+2      	; 0x1b6 <decode_command+0x1c>
     1b4:	ce c0       	rjmp	.+412    	; 0x352 <decode_command+0x1b8>
     1b6:	e2 5c       	subi	r30, 0xC2	; 194
     1b8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ba:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__tablejump2__>
	{
		case REQ_RESPONSE :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED3);
     1be:	8e e1       	ldi	r24, 0x1E	; 30
     1c0:	0e 94 78 12 	call	0x24f0	; 0x24f0 <PIN_toggle>
			}
			send_now = 1;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	80 93 33 02 	sts	0x0233, r24
		case REQ_DATA :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
     1ca:	8d e1       	ldi	r24, 0x1D	; 29
     1cc:	0e 94 78 12 	call	0x24f0	; 0x24f0 <PIN_toggle>
			}
			send_data = 1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 05 03 	sts	0x0305, r24
     1d6:	d8 01       	movw	r26, r16
     1d8:	e5 e1       	ldi	r30, 0x15	; 21
     1da:	f2 e0       	ldi	r31, 0x02	; 2
     1dc:	8d e1       	ldi	r24, 0x1D	; 29
     1de:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     1e0:	2d 91       	ld	r18, X+
     1e2:	21 93       	st	Z+, r18
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
			send_data = 1;
			for (i = 0; i < 8; i ++)
     1e4:	e8 17       	cp	r30, r24
     1e6:	f9 07       	cpc	r31, r25
     1e8:	d9 f7       	brne	.-10     	; 0x1e0 <decode_command+0x46>
				data_req_arr[i] = *(command_array + i);
			}
		case REQ_HK :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED2);
     1ea:	8b e1       	ldi	r24, 0x1B	; 27
     1ec:	0e 94 78 12 	call	0x24f0	; 0x24f0 <PIN_toggle>
			}
			send_hk = 1;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	80 93 e0 02 	sts	0x02E0, r24
		case REQ_READ:
			read_response = 1;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 3b 02 	sts	0x023B, r24
     1fc:	d8 01       	movw	r26, r16
     1fe:	e9 ed       	ldi	r30, 0xD9	; 217
     200:	f3 e0       	ldi	r31, 0x03	; 3
     202:	81 ee       	ldi	r24, 0xE1	; 225
     204:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     206:	2d 91       	ld	r18, X+
     208:	21 93       	st	Z+, r18
				PIN_toggle(LED2);
			}
			send_hk = 1;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     20a:	e8 17       	cp	r30, r24
     20c:	f9 07       	cpc	r31, r25
     20e:	d9 f7       	brne	.-10     	; 0x206 <decode_command+0x6c>
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 fa 01 	sts	0x01FA, r24
     216:	d8 01       	movw	r26, r16
     218:	e8 e0       	ldi	r30, 0x08	; 8
     21a:	f1 e0       	ldi	r31, 0x01	; 1
     21c:	80 e1       	ldi	r24, 0x10	; 16
     21e:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     220:	2d 91       	ld	r18, X+
     222:	21 93       	st	Z+, r18
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     224:	e8 17       	cp	r30, r24
     226:	f9 07       	cpc	r31, r25
     228:	d9 f7       	brne	.-10     	; 0x220 <decode_command+0x86>
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	80 93 02 03 	sts	0x0302, r24
     230:	d8 01       	movw	r26, r16
     232:	eb ef       	ldi	r30, 0xFB	; 251
     234:	f1 e0       	ldi	r31, 0x01	; 1
     236:	83 e0       	ldi	r24, 0x03	; 3
     238:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				sensh_arr[i] = *(command_array + i);
     23a:	2d 91       	ld	r18, X+
     23c:	21 93       	st	Z+, r18
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
			for (i = 0; i < 8; i ++)
     23e:	e8 17       	cp	r30, r24
     240:	f9 07       	cpc	r31, r25
     242:	d9 f7       	brne	.-10     	; 0x23a <decode_command+0xa0>
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 07 03 	sts	0x0307, r24
     24a:	d8 01       	movw	r26, r16
     24c:	e4 e3       	ldi	r30, 0x34	; 52
     24e:	f3 e0       	ldi	r31, 0x03	; 3
     250:	8c e3       	ldi	r24, 0x3C	; 60
     252:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				sensl_arr[i] = *(command_array + i);
     254:	2d 91       	ld	r18, X+
     256:	21 93       	st	Z+, r18
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
			for (i = 0; i < 8; i ++)
     258:	e8 17       	cp	r30, r24
     25a:	f9 07       	cpc	r31, r25
     25c:	d9 f7       	brne	.-10     	; 0x254 <decode_command+0xba>
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	80 93 06 03 	sts	0x0306, r24
     264:	d8 01       	movw	r26, r16
     266:	ee ee       	ldi	r30, 0xEE	; 238
     268:	f1 e0       	ldi	r31, 0x01	; 1
     26a:	86 ef       	ldi	r24, 0xF6	; 246
     26c:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				setv_arr[i] = *(command_array + i);
     26e:	2d 91       	ld	r18, X+
     270:	21 93       	st	Z+, r18
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
			for (i = 0; i < 8; i ++)
     272:	e8 17       	cp	r30, r24
     274:	f9 07       	cpc	r31, r25
     276:	d9 f7       	brne	.-10     	; 0x26e <decode_command+0xd4>
			{
				setv_arr[i] = *(command_array + i);
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
     278:	f8 01       	movw	r30, r16
     27a:	80 81       	ld	r24, Z
     27c:	80 93 26 02 	sts	0x0226, r24
		case SEND_TM:
			new_tm_msgf = 1;
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 36 02 	sts	0x0236, r24
     286:	d8 01       	movw	r26, r16
     288:	ea e0       	ldi	r30, 0x0A	; 10
     28a:	f3 e0       	ldi	r31, 0x03	; 3
     28c:	82 e1       	ldi	r24, 0x12	; 18
     28e:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				new_tm_msg[i] = *(command_array + i);
     290:	2d 91       	ld	r18, X+
     292:	21 93       	st	Z+, r18
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
		case SEND_TM:
			new_tm_msgf = 1;
			for (i = 0; i < 8; i ++)
     294:	e8 17       	cp	r30, r24
     296:	f9 07       	cpc	r31, r25
     298:	d9 f7       	brne	.-10     	; 0x290 <decode_command+0xf6>
			{
				new_tm_msg[i] = *(command_array + i);
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
     29a:	80 91 04 03 	lds	r24, 0x0304
     29e:	81 11       	cpse	r24, r1
     2a0:	19 c0       	rjmp	.+50     	; 0x2d4 <decode_command+0x13a>
     2a2:	80 91 29 03 	lds	r24, 0x0329
     2a6:	81 11       	cpse	r24, r1
     2a8:	15 c0       	rjmp	.+42     	; 0x2d4 <decode_command+0x13a>
}

// Let the OBC know that you are ready to receive TM packet.
static void start_tm_packet(void)
{
	send_arr[7] = (SELF_ID << 4)|COMS_TASK_ID;
     2aa:	87 e0       	ldi	r24, 0x07	; 7
     2ac:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = OK_START_TM_PACKET;
     2b6:	80 e1       	ldi	r24, 0x10	; 16
     2b8:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
     2bc:	80 91 26 02 	lds	r24, 0x0226
     2c0:	80 93 d9 01 	sts	0x01D9, r24
	receiving_tmf = 1;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	80 93 29 03 	sts	0x0329, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
     2ca:	61 e1       	ldi	r22, 0x11	; 17
     2cc:	85 ed       	ldi	r24, 0xD5	; 213
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
				start_tm_packet();
		case TC_TRANSACTION_RESP:
			tc_transfer_completef = *command_array;
     2d4:	f8 01       	movw	r30, r16
     2d6:	80 81       	ld	r24, Z
     2d8:	80 93 09 02 	sts	0x0209, r24
		case OK_START_TC_PACKET:
			start_tc_transferf = 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	80 93 05 02 	sts	0x0205, r24
		case OBC_IS_ALIVE:
			TAKEOVER = 0;
     2e2:	10 92 26 03 	sts	0x0326, r1
			REQUEST_ALIVE_IN_PROG = 0;
     2e6:	10 92 d4 01 	sts	0x01D4, r1
			REQUEST_TAKEOVER = 0;
     2ea:	10 92 e7 02 	sts	0x02E7, r1
			ISALIVE_COUNTER = 0;
     2ee:	10 92 be 01 	sts	0x01BE, r1
     2f2:	10 92 bf 01 	sts	0x01BF, r1
     2f6:	10 92 c0 01 	sts	0x01C0, r1
     2fa:	10 92 c1 01 	sts	0x01C1, r1
			FAILED_COUNT = 0;
     2fe:	10 92 13 01 	sts	0x0113, r1
				enter_low_powerf = 1;
		case EXIT_LOW_POWER_COM:
			if((SELF_ID == 1) && LOW_POWER_MODE)
				exit_low_powerf = 1;
		case ENTER_COMS_TAKEOVER_COM:
			if(!SELF_ID && !TAKEOVER)
     302:	80 91 26 03 	lds	r24, 0x0326
     306:	81 11       	cpse	r24, r1
     308:	07 c0       	rjmp	.+14     	; 0x318 <decode_command+0x17e>
				enter_take_overf = 1;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	80 93 08 03 	sts	0x0308, r24
		case EXIT_COMS_TAKEOVER_COM:
			if(!SELF_ID && TAKEOVER)
     310:	80 91 26 03 	lds	r24, 0x0326
     314:	88 23       	and	r24, r24
     316:	19 f0       	breq	.+6      	; 0x31e <decode_command+0x184>
				exit_take_overf = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	80 93 d4 02 	sts	0x02D4, r24
		case PAUSE_OPERATIONS:
			pause_operationsf = 1;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 93 eb 01 	sts	0x01EB, r24
     324:	e8 01       	movw	r28, r16
     326:	ea e2       	ldi	r30, 0x2A	; 42
     328:	f2 e0       	ldi	r31, 0x02	; 2
     32a:	82 e3       	ldi	r24, 0x32	; 50
     32c:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				pause_msg[i] = *(command_array + i);
     32e:	29 91       	ld	r18, Y+
     330:	21 93       	st	Z+, r18
		case EXIT_COMS_TAKEOVER_COM:
			if(!SELF_ID && TAKEOVER)
				exit_take_overf = 1;
		case PAUSE_OPERATIONS:
			pause_operationsf = 1;
			for (i = 0; i < 8; i ++)
     332:	e8 17       	cp	r30, r24
     334:	f9 07       	cpc	r31, r25
     336:	d9 f7       	brne	.-10     	; 0x32e <decode_command+0x194>
			{
				pause_msg[i] = *(command_array + i);
			}
		case RESUME_OPERATIONS:
			resume_operationsf = 1;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	80 93 ed 01 	sts	0x01ED, r24
     33e:	d8 01       	movw	r26, r16
     340:	ea e0       	ldi	r30, 0x0A	; 10
     342:	f2 e0       	ldi	r31, 0x02	; 2
     344:	82 e1       	ldi	r24, 0x12	; 18
     346:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				resume_msg[i] = *(command_array + i);
     348:	2d 91       	ld	r18, X+
     34a:	21 93       	st	Z+, r18
			{
				pause_msg[i] = *(command_array + i);
			}
		case RESUME_OPERATIONS:
			resume_operationsf = 1;
			for (i = 0; i < 8; i ++)
     34c:	e8 17       	cp	r30, r24
     34e:	f9 07       	cpc	r31, r25
     350:	d9 f7       	brne	.-10     	; 0x348 <decode_command+0x1ae>
			}				
		default:
			return;
	}
	return;
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	08 95       	ret

0000035c <set_up_msg>:

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     35c:	10 92 ee 03 	sts	0x03EE, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     360:	95 e0       	ldi	r25, 0x05	; 5
     362:	90 93 e4 03 	sts	0x03E4, r25
	message.dlc = 8;			 // Max length of a CAN message.
     366:	98 e0       	ldi	r25, 0x08	; 8
     368:	90 93 e9 03 	sts	0x03E9, r25
	mob_number = mailbox;
     36c:	80 93 23 03 	sts	0x0323, r24
	
	if(mailbox == 0)
     370:	81 11       	cpse	r24, r1
     372:	0e c0       	rjmp	.+28     	; 0x390 <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     374:	85 ed       	ldi	r24, 0xD5	; 213
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	90 93 eb 03 	sts	0x03EB, r25
     37c:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     380:	80 91 f1 02 	lds	r24, 0x02F1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	90 93 e6 03 	sts	0x03E6, r25
     38a:	80 93 e5 03 	sts	0x03E5, r24
		return;
     38e:	08 95       	ret
	}
	if(mailbox == 1)
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	71 f4       	brne	.+28     	; 0x3b0 <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     394:	82 ec       	ldi	r24, 0xC2	; 194
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	90 93 eb 03 	sts	0x03EB, r25
     39c:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[1];
     3a0:	80 91 f2 02 	lds	r24, 0x02F2
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	90 93 e6 03 	sts	0x03E6, r25
     3aa:	80 93 e5 03 	sts	0x03E5, r24
		return;
     3ae:	08 95       	ret
	}
	if(mailbox == 2)
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	71 f4       	brne	.+28     	; 0x3d0 <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     3b4:	8b ec       	ldi	r24, 0xCB	; 203
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	90 93 eb 03 	sts	0x03EB, r25
     3bc:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[2];
     3c0:	80 91 f3 02 	lds	r24, 0x02F3
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	90 93 e6 03 	sts	0x03E6, r25
     3ca:	80 93 e5 03 	sts	0x03E5, r24
		return;
     3ce:	08 95       	ret
	}
	if(mailbox == 3)
     3d0:	83 30       	cpi	r24, 0x03	; 3
     3d2:	71 f4       	brne	.+28     	; 0x3f0 <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     3d4:	8a ef       	ldi	r24, 0xFA	; 250
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	90 93 eb 03 	sts	0x03EB, r25
     3dc:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[3];
     3e0:	80 91 f4 02 	lds	r24, 0x02F4
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 e6 03 	sts	0x03E6, r25
     3ea:	80 93 e5 03 	sts	0x03E5, r24
		return;
     3ee:	08 95       	ret
	}
	if(mailbox == 5)
     3f0:	85 30       	cpi	r24, 0x05	; 5
     3f2:	69 f4       	brne	.+26     	; 0x40e <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     3f4:	89 e1       	ldi	r24, 0x19	; 25
     3f6:	93 e0       	ldi	r25, 0x03	; 3
     3f8:	90 93 eb 03 	sts	0x03EB, r25
     3fc:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[5];
     400:	80 91 f6 02 	lds	r24, 0x02F6
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 e6 03 	sts	0x03E6, r25
     40a:	80 93 e5 03 	sts	0x03E5, r24
     40e:	08 95       	ret

00000410 <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     410:	81 11       	cpse	r24, r1
     412:	20 c0       	rjmp	.+64     	; 0x454 <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     414:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     418:	85 e0       	ldi	r24, 0x05	; 5
     41a:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     41e:	88 e0       	ldi	r24, 0x08	; 8
     420:	80 93 e9 03 	sts	0x03E9, r24
		mob_number = mailbox;
     424:	10 92 23 03 	sts	0x0323, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     428:	85 ed       	ldi	r24, 0xD5	; 213
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	90 93 eb 03 	sts	0x03EB, r25
     430:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     434:	80 91 f1 02 	lds	r24, 0x02F1
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	90 93 e6 03 	sts	0x03E6, r25
     43e:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     442:	60 91 23 03 	lds	r22, 0x0323
     446:	83 ee       	ldi	r24, 0xE3	; 227
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     44e:	81 11       	cpse	r24, r1
     450:	f8 cf       	rjmp	.-16     	; 0x442 <clean_up_msg+0x32>
     452:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	01 f5       	brne	.+64     	; 0x498 <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     458:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     45c:	85 e0       	ldi	r24, 0x05	; 5
     45e:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     462:	88 e0       	ldi	r24, 0x08	; 8
     464:	80 93 e9 03 	sts	0x03E9, r24
		mob_number = mailbox;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 23 03 	sts	0x0323, r24
		message.pt_data = &data1[0];
     46e:	82 ec       	ldi	r24, 0xC2	; 194
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	90 93 eb 03 	sts	0x03EB, r25
     476:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = SUB0_ID1;
     47a:	85 e1       	ldi	r24, 0x15	; 21
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	90 93 e6 03 	sts	0x03E6, r25
     482:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     486:	60 91 23 03 	lds	r22, 0x0323
     48a:	83 ee       	ldi	r24, 0xE3	; 227
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     492:	81 11       	cpse	r24, r1
     494:	f8 cf       	rjmp	.-16     	; 0x486 <clean_up_msg+0x76>
     496:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     498:	82 30       	cpi	r24, 0x02	; 2
     49a:	09 f5       	brne	.+66     	; 0x4de <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     49c:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     4a0:	85 e0       	ldi	r24, 0x05	; 5
     4a2:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     4a6:	88 e0       	ldi	r24, 0x08	; 8
     4a8:	80 93 e9 03 	sts	0x03E9, r24
		mob_number = mailbox;
     4ac:	82 e0       	ldi	r24, 0x02	; 2
     4ae:	80 93 23 03 	sts	0x0323, r24
		message.pt_data = &data2[0];
     4b2:	8b ec       	ldi	r24, 0xCB	; 203
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	90 93 eb 03 	sts	0x03EB, r25
     4ba:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[2];
     4be:	80 91 f3 02 	lds	r24, 0x02F3
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 e6 03 	sts	0x03E6, r25
     4c8:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     4cc:	60 91 23 03 	lds	r22, 0x0323
     4d0:	83 ee       	ldi	r24, 0xE3	; 227
     4d2:	93 e0       	ldi	r25, 0x03	; 3
     4d4:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     4d8:	81 11       	cpse	r24, r1
     4da:	f8 cf       	rjmp	.-16     	; 0x4cc <clean_up_msg+0xbc>
     4dc:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     4de:	83 30       	cpi	r24, 0x03	; 3
     4e0:	09 f5       	brne	.+66     	; 0x524 <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     4e2:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     4e6:	85 e0       	ldi	r24, 0x05	; 5
     4e8:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     4ec:	88 e0       	ldi	r24, 0x08	; 8
     4ee:	80 93 e9 03 	sts	0x03E9, r24
		mob_number = mailbox;
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	80 93 23 03 	sts	0x0323, r24
		message.pt_data = &data3[0];
     4f8:	8a ef       	ldi	r24, 0xFA	; 250
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	90 93 eb 03 	sts	0x03EB, r25
     500:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[3];
     504:	80 91 f4 02 	lds	r24, 0x02F4
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 e6 03 	sts	0x03E6, r25
     50e:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     512:	60 91 23 03 	lds	r22, 0x0323
     516:	83 ee       	ldi	r24, 0xE3	; 227
     518:	93 e0       	ldi	r25, 0x03	; 3
     51a:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     51e:	81 11       	cpse	r24, r1
     520:	f8 cf       	rjmp	.-16     	; 0x512 <clean_up_msg+0x102>
     522:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     524:	85 30       	cpi	r24, 0x05	; 5
     526:	f1 f4       	brne	.+60     	; 0x564 <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     528:	10 92 ee 03 	sts	0x03EE, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     52c:	80 93 e4 03 	sts	0x03E4, r24
		message.dlc = 8;			 // Max length of a CAN message.
     530:	98 e0       	ldi	r25, 0x08	; 8
     532:	90 93 e9 03 	sts	0x03E9, r25
		mob_number = mailbox;
     536:	80 93 23 03 	sts	0x0323, r24
		message.pt_data = &data5[0];
     53a:	89 e1       	ldi	r24, 0x19	; 25
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	90 93 eb 03 	sts	0x03EB, r25
     542:	80 93 ea 03 	sts	0x03EA, r24
		message.id.std = id_array[5];
     546:	80 91 f6 02 	lds	r24, 0x02F6
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	90 93 e6 03 	sts	0x03E6, r25
     550:	80 93 e5 03 	sts	0x03E5, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     554:	60 91 23 03 	lds	r22, 0x0323
     558:	83 ee       	ldi	r24, 0xE3	; 227
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     560:	81 11       	cpse	r24, r1
     562:	f8 cf       	rjmp	.-16     	; 0x554 <clean_up_msg+0x144>
     564:	08 95       	ret

00000566 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     56a:	85 e0       	ldi	r24, 0x05	; 5
     56c:	0e 94 ae 01 	call	0x35c	; 0x35c <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     570:	60 91 23 03 	lds	r22, 0x0323
     574:	83 ee       	ldi	r24, 0xE3	; 227
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <can_get_status>
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	11 f1       	breq	.+68     	; 0x5c4 <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     580:	80 91 ec 03 	lds	r24, 0x03EC
     584:	80 32       	cpi	r24, 0x20	; 32
     586:	d9 f4       	brne	.+54     	; 0x5be <can_check_housekeep+0x58>
     588:	a0 91 ea 03 	lds	r26, 0x03EA
     58c:	b0 91 eb 03 	lds	r27, 0x03EB
     590:	c1 ef       	ldi	r28, 0xF1	; 241
     592:	d2 e0       	ldi	r29, 0x02	; 2
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     594:	e9 ee       	ldi	r30, 0xE9	; 233
     596:	f2 e0       	ldi	r31, 0x02	; 2
     598:	8d 91       	ld	r24, X+
     59a:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     59c:	ec 17       	cp	r30, r28
     59e:	fd 07       	cpc	r31, r29
     5a0:	d9 f7       	brne	.-10     	; 0x598 <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     5a2:	80 91 ef 02 	lds	r24, 0x02EF
     5a6:	82 30       	cpi	r24, 0x02	; 2
     5a8:	21 f4       	brne	.+8      	; 0x5b2 <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     5aa:	89 ee       	ldi	r24, 0xE9	; 233
     5ac:	92 e0       	ldi	r25, 0x02	; 2
     5ae:	0e 94 cd 00 	call	0x19a	; 0x19a <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     5b2:	e9 ee       	ldi	r30, 0xE9	; 233
     5b4:	f2 e0       	ldi	r31, 0x02	; 2
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     5b6:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     5b8:	ec 17       	cp	r30, r28
     5ba:	fd 07       	cpc	r31, r29
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     5be:	85 e0       	ldi	r24, 0x05	; 5
     5c0:	0e 94 08 02 	call	0x410	; 0x410 <clean_up_msg>
	}	
	return;
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <can_check_general>:
#include "can_api.h"

static void start_tm_packet(void);

void can_check_general(void)
{
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     5e0:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     5e2:	0c ee       	ldi	r16, 0xEC	; 236
     5e4:	13 e0       	ldi	r17, 0x03	; 3
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     5e6:	0f 2e       	mov	r0, r31
     5e8:	fa ee       	ldi	r31, 0xEA	; 234
     5ea:	af 2e       	mov	r10, r31
     5ec:	f3 e0       	ldi	r31, 0x03	; 3
     5ee:	bf 2e       	mov	r11, r31
     5f0:	f0 2d       	mov	r31, r0
     5f2:	c1 ef       	ldi	r28, 0xF1	; 241
     5f4:	d2 e0       	ldi	r29, 0x02	; 2
     5f6:	0f 2e       	mov	r0, r31
     5f8:	f9 ee       	ldi	r31, 0xE9	; 233
     5fa:	ef 2e       	mov	r14, r31
     5fc:	f2 e0       	ldi	r31, 0x02	; 2
     5fe:	ff 2e       	mov	r15, r31
     600:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     602:	0f 2e       	mov	r0, r31
     604:	ff ee       	ldi	r31, 0xEF	; 239
     606:	cf 2e       	mov	r12, r31
     608:	f2 e0       	ldi	r31, 0x02	; 2
     60a:	df 2e       	mov	r13, r31
     60c:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     60e:	89 2d       	mov	r24, r9
     610:	0e 94 ae 01 	call	0x35c	; 0x35c <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     614:	60 91 23 03 	lds	r22, 0x0323
     618:	83 ee       	ldi	r24, 0xE3	; 227
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <can_get_status>
     620:	81 30       	cpi	r24, 0x01	; 1
     622:	e1 f0       	breq	.+56     	; 0x65c <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     624:	f8 01       	movw	r30, r16
     626:	80 81       	ld	r24, Z
     628:	80 32       	cpi	r24, 0x20	; 32
     62a:	a9 f4       	brne	.+42     	; 0x656 <can_check_general+0x8c>
     62c:	f5 01       	movw	r30, r10
     62e:	a0 81       	ld	r26, Z
     630:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     632:	f7 01       	movw	r30, r14
     634:	8d 91       	ld	r24, X+
     636:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     638:	ec 17       	cp	r30, r28
     63a:	fd 07       	cpc	r31, r29
     63c:	d9 f7       	brne	.-10     	; 0x634 <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     63e:	f6 01       	movw	r30, r12
     640:	80 81       	ld	r24, Z
     642:	82 30       	cpi	r24, 0x02	; 2
     644:	19 f4       	brne	.+6      	; 0x64c <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     646:	c7 01       	movw	r24, r14
     648:	0e 94 cd 00 	call	0x19a	; 0x19a <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     64c:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     64e:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     650:	ec 17       	cp	r30, r28
     652:	fd 07       	cpc	r31, r29
     654:	e1 f7       	brne	.-8      	; 0x64e <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     656:	89 2d       	mov	r24, r9
     658:	0e 94 08 02 	call	0x410	; 0x410 <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     65c:	93 94       	inc	r9
     65e:	f4 e0       	ldi	r31, 0x04	; 4
     660:	9f 12       	cpse	r9, r31
     662:	d5 cf       	rjmp	.-86     	; 0x60e <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     664:	0e 94 b3 02 	call	0x566	; 0x566 <can_check_housekeep>
	
	return;
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	cf 90       	pop	r12
     678:	bf 90       	pop	r11
     67a:	af 90       	pop	r10
     67c:	9f 90       	pop	r9
     67e:	08 95       	ret

00000680 <can_init_mobs>:
/************************************************************************/

void can_init_mobs(void)
{
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     680:	85 ed       	ldi	r24, 0xD5	; 213
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	90 93 eb 03 	sts	0x03EB, r25
     688:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     68c:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     690:	80 91 f1 02 	lds	r24, 0x02F1
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	90 93 e6 03 	sts	0x03E6, r25
     69a:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     69e:	85 e0       	ldi	r24, 0x05	; 5
     6a0:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;			 // Max length of a CAN message.
     6a4:	88 e0       	ldi	r24, 0x08	; 8
     6a6:	80 93 e9 03 	sts	0x03E9, r24
	mob_number = 0;
     6aa:	10 92 23 03 	sts	0x0323, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     6ae:	60 91 23 03 	lds	r22, 0x0323
     6b2:	83 ee       	ldi	r24, 0xE3	; 227
     6b4:	93 e0       	ldi	r25, 0x03	; 3
     6b6:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     6ba:	81 11       	cpse	r24, r1
     6bc:	f8 cf       	rjmp	.-16     	; 0x6ae <can_init_mobs+0x2e>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     6be:	82 ec       	ldi	r24, 0xC2	; 194
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	90 93 eb 03 	sts	0x03EB, r25
     6c6:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;
     6ca:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[1];
     6ce:	80 91 f2 02 	lds	r24, 0x02F2
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	90 93 e6 03 	sts	0x03E6, r25
     6d8:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;
     6dc:	85 e0       	ldi	r24, 0x05	; 5
     6de:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;
     6e2:	88 e0       	ldi	r24, 0x08	; 8
     6e4:	80 93 e9 03 	sts	0x03E9, r24
	mob_number = 1;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	80 93 23 03 	sts	0x0323, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     6ee:	60 91 23 03 	lds	r22, 0x0323
     6f2:	83 ee       	ldi	r24, 0xE3	; 227
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     6fa:	81 11       	cpse	r24, r1
     6fc:	f8 cf       	rjmp	.-16     	; 0x6ee <can_init_mobs+0x6e>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     6fe:	8b ec       	ldi	r24, 0xCB	; 203
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	90 93 eb 03 	sts	0x03EB, r25
     706:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;
     70a:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[2];
     70e:	80 91 f3 02 	lds	r24, 0x02F3
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	90 93 e6 03 	sts	0x03E6, r25
     718:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;
     71c:	85 e0       	ldi	r24, 0x05	; 5
     71e:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;
     722:	88 e0       	ldi	r24, 0x08	; 8
     724:	80 93 e9 03 	sts	0x03E9, r24
	mob_number = 2;
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	80 93 23 03 	sts	0x0323, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     72e:	60 91 23 03 	lds	r22, 0x0323
     732:	83 ee       	ldi	r24, 0xE3	; 227
     734:	93 e0       	ldi	r25, 0x03	; 3
     736:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     73a:	81 11       	cpse	r24, r1
     73c:	f8 cf       	rjmp	.-16     	; 0x72e <can_init_mobs+0xae>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     73e:	8a ef       	ldi	r24, 0xFA	; 250
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	90 93 eb 03 	sts	0x03EB, r25
     746:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;
     74a:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[3];
     74e:	80 91 f4 02 	lds	r24, 0x02F4
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	90 93 e6 03 	sts	0x03E6, r25
     758:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;
     762:	88 e0       	ldi	r24, 0x08	; 8
     764:	80 93 e9 03 	sts	0x03E9, r24
	mob_number = 3;
     768:	83 e0       	ldi	r24, 0x03	; 3
     76a:	80 93 23 03 	sts	0x0323, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     76e:	60 91 23 03 	lds	r22, 0x0323
     772:	83 ee       	ldi	r24, 0xE3	; 227
     774:	93 e0       	ldi	r25, 0x03	; 3
     776:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     77a:	81 11       	cpse	r24, r1
     77c:	f8 cf       	rjmp	.-16     	; 0x76e <can_init_mobs+0xee>
	
	/* INITIALIZE MOB5 */
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     77e:	89 e1       	ldi	r24, 0x19	; 25
     780:	93 e0       	ldi	r25, 0x03	; 3
     782:	90 93 eb 03 	sts	0x03EB, r25
     786:	80 93 ea 03 	sts	0x03EA, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     78a:	10 92 ee 03 	sts	0x03EE, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     78e:	80 91 f6 02 	lds	r24, 0x02F6
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 e6 03 	sts	0x03E6, r25
     798:	80 93 e5 03 	sts	0x03E5, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     79c:	85 e0       	ldi	r24, 0x05	; 5
     79e:	80 93 e4 03 	sts	0x03E4, r24
	message.dlc = 8;				// Max length of a CAN message.
     7a2:	98 e0       	ldi	r25, 0x08	; 8
     7a4:	90 93 e9 03 	sts	0x03E9, r25
	mob_number = 5;
     7a8:	80 93 23 03 	sts	0x0323, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     7ac:	60 91 23 03 	lds	r22, 0x0323
     7b0:	83 ee       	ldi	r24, 0xE3	; 227
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	0e 94 2f 04 	call	0x85e	; 0x85e <can_cmd>
     7b8:	81 11       	cpse	r24, r1
     7ba:	f8 cf       	rjmp	.-16     	; 0x7ac <can_init_mobs+0x12c>
	
	return;
}
     7bc:	08 95       	ret

000007be <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     7be:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     7c0:	ad ee       	ldi	r26, 0xED	; 237
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     7c4:	3e ee       	ldi	r19, 0xEE	; 238
     7c6:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     7c8:	98 2f       	mov	r25, r24
     7ca:	92 95       	swap	r25
     7cc:	90 7f       	andi	r25, 0xF0	; 240
     7ce:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     7d0:	e3 2f       	mov	r30, r19
     7d2:	f2 2f       	mov	r31, r18
     7d4:	11 92       	st	Z+, r1
     7d6:	e8 3f       	cpi	r30, 0xF8	; 248
     7d8:	f1 05       	cpc	r31, r1
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	86 30       	cpi	r24, 0x06	; 6
     7e0:	99 f7       	brne	.-26     	; 0x7c8 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     7e2:	08 95       	ret

000007e4 <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     7e4:	80 91 ef 00 	lds	r24, 0x00EF
     7e8:	80 7c       	andi	r24, 0xC0	; 192
     7ea:	61 f0       	breq	.+24     	; 0x804 <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     7ec:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     7f0:	98 2f       	mov	r25, r24
     7f2:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     7f4:	28 2f       	mov	r18, r24
     7f6:	20 76       	andi	r18, 0x60	; 96
     7f8:	20 32       	cpi	r18, 0x20	; 32
     7fa:	31 f0       	breq	.+12     	; 0x808 <can_get_mob_status+0x24>
     7fc:	90 34       	cpi	r25, 0x40	; 64
     7fe:	31 f0       	breq	.+12     	; 0x80c <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     800:	8f 71       	andi	r24, 0x1F	; 31
     802:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     804:	8f ef       	ldi	r24, 0xFF	; 255
     806:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     808:	89 2f       	mov	r24, r25
     80a:	08 95       	ret
     80c:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     80e:	08 95       	ret

00000810 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     810:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     812:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     814:	aa ef       	ldi	r26, 0xFA	; 250
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	9c 91       	ld	r25, X
     81a:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     81c:	8f 5f       	subi	r24, 0xFF	; 255
     81e:	88 30       	cpi	r24, 0x08	; 8
     820:	d9 f7       	brne	.-10     	; 0x818 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     822:	08 95       	ret

00000824 <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	80 93 e2 00 	sts	0x00E2, r24
     830:	8c e0       	ldi	r24, 0x0C	; 12
     832:	80 93 e3 00 	sts	0x00E3, r24
     836:	87 e3       	ldi	r24, 0x37	; 55
     838:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	08 95       	ret

00000840 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     840:	0e 94 12 04 	call	0x824	; 0x824 <can_fixed_baudrate>
     844:	88 23       	and	r24, r24
     846:	49 f0       	breq	.+18     	; 0x85a <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     848:	0e 94 df 03 	call	0x7be	; 0x7be <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     84c:	e8 ed       	ldi	r30, 0xD8	; 216
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	82 60       	ori	r24, 0x02	; 2
     854:	80 83       	st	Z, r24
    return (1);
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     85a:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     85c:	08 95       	ret

0000085e <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	1f 92       	push	r1
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	8c 91       	ld	r24, X
     86e:	11 97       	sbiw	r26, 0x01	; 1
     870:	8c 30       	cpi	r24, 0x0C	; 12
     872:	b1 f4       	brne	.+44     	; 0x8a0 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     874:	19 96       	adiw	r26, 0x09	; 9
     876:	8c 91       	ld	r24, X
     878:	19 97       	sbiw	r26, 0x09	; 9
     87a:	80 36       	cpi	r24, 0x60	; 96
     87c:	69 f4       	brne	.+26     	; 0x898 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     87e:	86 2f       	mov	r24, r22
     880:	82 95       	swap	r24
     882:	80 7f       	andi	r24, 0xF0	; 240
     884:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     888:	ef ee       	ldi	r30, 0xEF	; 239
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	8f 73       	andi	r24, 0x3F	; 63
     890:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     892:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     896:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     898:	19 96       	adiw	r26, 0x09	; 9
     89a:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	07 c6       	rjmp	.+3086   	; 0x14ae <__stack+0xbaf>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     8a0:	86 2f       	mov	r24, r22
     8a2:	82 95       	swap	r24
     8a4:	80 7f       	andi	r24, 0xF0	; 240
     8a6:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     8aa:	80 91 ef 00 	lds	r24, 0x00EF
     8ae:	80 7c       	andi	r24, 0xC0	; 192
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <can_cmd+0x56>
     8b2:	f9 c5       	rjmp	.+3058   	; 0x14a6 <__stack+0xba7>
    {
      cmd->status = MOB_PENDING; 
     8b4:	80 e6       	ldi	r24, 0x60	; 96
     8b6:	19 96       	adiw	r26, 0x09	; 9
     8b8:	8c 93       	st	X, r24
     8ba:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     8bc:	6c 93       	st	X, r22
      Can_clear_mob();
     8be:	ee ee       	ldi	r30, 0xEE	; 238
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	11 92       	st	Z+, r1
     8c4:	e8 3f       	cpi	r30, 0xF8	; 248
     8c6:	f1 05       	cpc	r31, r1
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <can_cmd+0x64>
          
      switch (cmd->cmd)
     8ca:	11 96       	adiw	r26, 0x01	; 1
     8cc:	4c 91       	ld	r20, X
     8ce:	11 97       	sbiw	r26, 0x01	; 1
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	fa 01       	movw	r30, r20
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	eb 30       	cpi	r30, 0x0B	; 11
     8d8:	f1 05       	cpc	r31, r1
     8da:	08 f0       	brcs	.+2      	; 0x8de <can_cmd+0x80>
     8dc:	e0 c5       	rjmp	.+3008   	; 0x149e <__stack+0xb9f>
     8de:	e2 5a       	subi	r30, 0xA2	; 162
     8e0:	ff 4f       	sbci	r31, 0xFF	; 255
     8e2:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     8e6:	16 96       	adiw	r26, 0x06	; 6
     8e8:	8c 91       	ld	r24, X
     8ea:	16 97       	sbiw	r26, 0x06	; 6
     8ec:	81 11       	cpse	r24, r1
     8ee:	b7 c4       	rjmp	.+2414   	; 0x125e <__stack+0x95f>
     8f0:	c8 c4       	rjmp	.+2448   	; 0x1282 <__stack+0x983>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8f2:	1b 96       	adiw	r26, 0x0b	; 11
     8f4:	8c 91       	ld	r24, X
     8f6:	1b 97       	sbiw	r26, 0x0b	; 11
     8f8:	88 23       	and	r24, r24
     8fa:	d9 f1       	breq	.+118    	; 0x972 <__stack+0x73>
     8fc:	14 96       	adiw	r26, 0x04	; 4
     8fe:	9c 91       	ld	r25, X
     900:	14 97       	sbiw	r26, 0x04	; 4
     902:	92 95       	swap	r25
     904:	96 95       	lsr	r25
     906:	97 70       	andi	r25, 0x07	; 7
     908:	15 96       	adiw	r26, 0x05	; 5
     90a:	8c 91       	ld	r24, X
     90c:	15 97       	sbiw	r26, 0x05	; 5
     90e:	88 0f       	add	r24, r24
     910:	88 0f       	add	r24, r24
     912:	88 0f       	add	r24, r24
     914:	89 0f       	add	r24, r25
     916:	80 93 f3 00 	sts	0x00F3, r24
     91a:	13 96       	adiw	r26, 0x03	; 3
     91c:	9c 91       	ld	r25, X
     91e:	13 97       	sbiw	r26, 0x03	; 3
     920:	92 95       	swap	r25
     922:	96 95       	lsr	r25
     924:	97 70       	andi	r25, 0x07	; 7
     926:	14 96       	adiw	r26, 0x04	; 4
     928:	8c 91       	ld	r24, X
     92a:	14 97       	sbiw	r26, 0x04	; 4
     92c:	88 0f       	add	r24, r24
     92e:	88 0f       	add	r24, r24
     930:	88 0f       	add	r24, r24
     932:	89 0f       	add	r24, r25
     934:	80 93 f2 00 	sts	0x00F2, r24
     938:	12 96       	adiw	r26, 0x02	; 2
     93a:	9c 91       	ld	r25, X
     93c:	12 97       	sbiw	r26, 0x02	; 2
     93e:	92 95       	swap	r25
     940:	96 95       	lsr	r25
     942:	97 70       	andi	r25, 0x07	; 7
     944:	13 96       	adiw	r26, 0x03	; 3
     946:	8c 91       	ld	r24, X
     948:	13 97       	sbiw	r26, 0x03	; 3
     94a:	88 0f       	add	r24, r24
     94c:	88 0f       	add	r24, r24
     94e:	88 0f       	add	r24, r24
     950:	89 0f       	add	r24, r25
     952:	80 93 f1 00 	sts	0x00F1, r24
     956:	12 96       	adiw	r26, 0x02	; 2
     958:	8c 91       	ld	r24, X
     95a:	12 97       	sbiw	r26, 0x02	; 2
     95c:	88 0f       	add	r24, r24
     95e:	88 0f       	add	r24, r24
     960:	88 0f       	add	r24, r24
     962:	80 93 f0 00 	sts	0x00F0, r24
     966:	ef ee       	ldi	r30, 0xEF	; 239
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	80 61       	ori	r24, 0x10	; 16
     96e:	80 83       	st	Z, r24
     970:	1c c0       	rjmp	.+56     	; 0x9aa <__stack+0xab>
          else              { Can_set_std_id(cmd->id.std);}
     972:	12 96       	adiw	r26, 0x02	; 2
     974:	8c 91       	ld	r24, X
     976:	12 97       	sbiw	r26, 0x02	; 2
     978:	86 95       	lsr	r24
     97a:	86 95       	lsr	r24
     97c:	86 95       	lsr	r24
     97e:	13 96       	adiw	r26, 0x03	; 3
     980:	9c 91       	ld	r25, X
     982:	13 97       	sbiw	r26, 0x03	; 3
     984:	20 e2       	ldi	r18, 0x20	; 32
     986:	92 9f       	mul	r25, r18
     988:	80 0d       	add	r24, r0
     98a:	11 24       	eor	r1, r1
     98c:	80 93 f3 00 	sts	0x00F3, r24
     990:	12 96       	adiw	r26, 0x02	; 2
     992:	8c 91       	ld	r24, X
     994:	12 97       	sbiw	r26, 0x02	; 2
     996:	82 95       	swap	r24
     998:	88 0f       	add	r24, r24
     99a:	80 7e       	andi	r24, 0xE0	; 224
     99c:	80 93 f2 00 	sts	0x00F2, r24
     9a0:	ef ee       	ldi	r30, 0xEF	; 239
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	8f 7e       	andi	r24, 0xEF	; 239
     9a8:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     9aa:	16 96       	adiw	r26, 0x06	; 6
     9ac:	8c 91       	ld	r24, X
     9ae:	16 97       	sbiw	r26, 0x06	; 6
     9b0:	88 23       	and	r24, r24
     9b2:	91 f0       	breq	.+36     	; 0x9d8 <__stack+0xd9>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	8a ef       	ldi	r24, 0xFA	; 250
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	17 96       	adiw	r26, 0x07	; 7
     9bc:	ed 91       	ld	r30, X+
     9be:	fc 91       	ld	r31, X
     9c0:	18 97       	sbiw	r26, 0x08	; 8
     9c2:	e2 0f       	add	r30, r18
     9c4:	f1 1d       	adc	r31, r1
     9c6:	30 81       	ld	r19, Z
     9c8:	fc 01       	movw	r30, r24
     9ca:	30 83       	st	Z, r19
     9cc:	2f 5f       	subi	r18, 0xFF	; 255
     9ce:	16 96       	adiw	r26, 0x06	; 6
     9d0:	3c 91       	ld	r19, X
     9d2:	16 97       	sbiw	r26, 0x06	; 6
     9d4:	23 17       	cp	r18, r19
     9d6:	88 f3       	brcs	.-30     	; 0x9ba <__stack+0xbb>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     9d8:	1a 96       	adiw	r26, 0x0a	; 10
     9da:	8c 91       	ld	r24, X
     9dc:	1a 97       	sbiw	r26, 0x0a	; 10
     9de:	88 23       	and	r24, r24
     9e0:	31 f0       	breq	.+12     	; 0x9ee <__stack+0xef>
     9e2:	e0 ef       	ldi	r30, 0xF0	; 240
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	84 60       	ori	r24, 0x04	; 4
     9ea:	80 83       	st	Z, r24
     9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <__stack+0xf9>
            else Can_clear_rtr();    
     9ee:	e0 ef       	ldi	r30, 0xF0	; 240
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	8b 7f       	andi	r24, 0xFB	; 251
     9f6:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     9f8:	ef ee       	ldi	r30, 0xEF	; 239
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	90 81       	ld	r25, Z
     9fe:	16 96       	adiw	r26, 0x06	; 6
     a00:	8c 91       	ld	r24, X
     a02:	89 2b       	or	r24, r25
     a04:	80 83       	st	Z, r24
          Can_config_tx();
     a06:	80 81       	ld	r24, Z
     a08:	8f 73       	andi	r24, 0x3F	; 63
     a0a:	80 83       	st	Z, r24
     a0c:	80 81       	ld	r24, Z
     a0e:	80 64       	ori	r24, 0x40	; 64
     a10:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a12:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a14:	4c c5       	rjmp	.+2712   	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a16:	1b 96       	adiw	r26, 0x0b	; 11
     a18:	8c 91       	ld	r24, X
     a1a:	1b 97       	sbiw	r26, 0x0b	; 11
     a1c:	88 23       	and	r24, r24
     a1e:	d9 f1       	breq	.+118    	; 0xa96 <__stack+0x197>
     a20:	14 96       	adiw	r26, 0x04	; 4
     a22:	9c 91       	ld	r25, X
     a24:	14 97       	sbiw	r26, 0x04	; 4
     a26:	92 95       	swap	r25
     a28:	96 95       	lsr	r25
     a2a:	97 70       	andi	r25, 0x07	; 7
     a2c:	15 96       	adiw	r26, 0x05	; 5
     a2e:	8c 91       	ld	r24, X
     a30:	15 97       	sbiw	r26, 0x05	; 5
     a32:	88 0f       	add	r24, r24
     a34:	88 0f       	add	r24, r24
     a36:	88 0f       	add	r24, r24
     a38:	89 0f       	add	r24, r25
     a3a:	80 93 f3 00 	sts	0x00F3, r24
     a3e:	13 96       	adiw	r26, 0x03	; 3
     a40:	9c 91       	ld	r25, X
     a42:	13 97       	sbiw	r26, 0x03	; 3
     a44:	92 95       	swap	r25
     a46:	96 95       	lsr	r25
     a48:	97 70       	andi	r25, 0x07	; 7
     a4a:	14 96       	adiw	r26, 0x04	; 4
     a4c:	8c 91       	ld	r24, X
     a4e:	14 97       	sbiw	r26, 0x04	; 4
     a50:	88 0f       	add	r24, r24
     a52:	88 0f       	add	r24, r24
     a54:	88 0f       	add	r24, r24
     a56:	89 0f       	add	r24, r25
     a58:	80 93 f2 00 	sts	0x00F2, r24
     a5c:	12 96       	adiw	r26, 0x02	; 2
     a5e:	9c 91       	ld	r25, X
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	92 95       	swap	r25
     a64:	96 95       	lsr	r25
     a66:	97 70       	andi	r25, 0x07	; 7
     a68:	13 96       	adiw	r26, 0x03	; 3
     a6a:	8c 91       	ld	r24, X
     a6c:	13 97       	sbiw	r26, 0x03	; 3
     a6e:	88 0f       	add	r24, r24
     a70:	88 0f       	add	r24, r24
     a72:	88 0f       	add	r24, r24
     a74:	89 0f       	add	r24, r25
     a76:	80 93 f1 00 	sts	0x00F1, r24
     a7a:	12 96       	adiw	r26, 0x02	; 2
     a7c:	8c 91       	ld	r24, X
     a7e:	12 97       	sbiw	r26, 0x02	; 2
     a80:	88 0f       	add	r24, r24
     a82:	88 0f       	add	r24, r24
     a84:	88 0f       	add	r24, r24
     a86:	80 93 f0 00 	sts	0x00F0, r24
     a8a:	ef ee       	ldi	r30, 0xEF	; 239
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	80 61       	ori	r24, 0x10	; 16
     a92:	80 83       	st	Z, r24
     a94:	1c c0       	rjmp	.+56     	; 0xace <__stack+0x1cf>
          else              { Can_set_std_id(cmd->id.std);}
     a96:	12 96       	adiw	r26, 0x02	; 2
     a98:	8c 91       	ld	r24, X
     a9a:	12 97       	sbiw	r26, 0x02	; 2
     a9c:	86 95       	lsr	r24
     a9e:	86 95       	lsr	r24
     aa0:	86 95       	lsr	r24
     aa2:	13 96       	adiw	r26, 0x03	; 3
     aa4:	9c 91       	ld	r25, X
     aa6:	13 97       	sbiw	r26, 0x03	; 3
     aa8:	f0 e2       	ldi	r31, 0x20	; 32
     aaa:	9f 9f       	mul	r25, r31
     aac:	80 0d       	add	r24, r0
     aae:	11 24       	eor	r1, r1
     ab0:	80 93 f3 00 	sts	0x00F3, r24
     ab4:	12 96       	adiw	r26, 0x02	; 2
     ab6:	8c 91       	ld	r24, X
     ab8:	12 97       	sbiw	r26, 0x02	; 2
     aba:	82 95       	swap	r24
     abc:	88 0f       	add	r24, r24
     abe:	80 7e       	andi	r24, 0xE0	; 224
     ac0:	80 93 f2 00 	sts	0x00F2, r24
     ac4:	ef ee       	ldi	r30, 0xEF	; 239
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	8f 7e       	andi	r24, 0xEF	; 239
     acc:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     ace:	16 96       	adiw	r26, 0x06	; 6
     ad0:	8c 91       	ld	r24, X
     ad2:	16 97       	sbiw	r26, 0x06	; 6
     ad4:	88 23       	and	r24, r24
     ad6:	91 f0       	breq	.+36     	; 0xafc <__stack+0x1fd>
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	8a ef       	ldi	r24, 0xFA	; 250
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	17 96       	adiw	r26, 0x07	; 7
     ae0:	ed 91       	ld	r30, X+
     ae2:	fc 91       	ld	r31, X
     ae4:	18 97       	sbiw	r26, 0x08	; 8
     ae6:	e2 0f       	add	r30, r18
     ae8:	f1 1d       	adc	r31, r1
     aea:	30 81       	ld	r19, Z
     aec:	fc 01       	movw	r30, r24
     aee:	30 83       	st	Z, r19
     af0:	2f 5f       	subi	r18, 0xFF	; 255
     af2:	16 96       	adiw	r26, 0x06	; 6
     af4:	3c 91       	ld	r19, X
     af6:	16 97       	sbiw	r26, 0x06	; 6
     af8:	23 17       	cp	r18, r19
     afa:	88 f3       	brcs	.-30     	; 0xade <__stack+0x1df>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     afc:	1a 96       	adiw	r26, 0x0a	; 10
     afe:	1c 92       	st	X, r1
     b00:	1a 97       	sbiw	r26, 0x0a	; 10
     b02:	e0 ef       	ldi	r30, 0xF0	; 240
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	8b 7f       	andi	r24, 0xFB	; 251
     b0a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     b0c:	ef ee       	ldi	r30, 0xEF	; 239
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	90 81       	ld	r25, Z
     b12:	16 96       	adiw	r26, 0x06	; 6
     b14:	8c 91       	ld	r24, X
     b16:	89 2b       	or	r24, r25
     b18:	80 83       	st	Z, r24
          Can_config_tx();
     b1a:	80 81       	ld	r24, Z
     b1c:	8f 73       	andi	r24, 0x3F	; 63
     b1e:	80 83       	st	Z, r24
     b20:	80 81       	ld	r24, Z
     b22:	80 64       	ori	r24, 0x40	; 64
     b24:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b26:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     b28:	c2 c4       	rjmp	.+2436   	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b2a:	1b 96       	adiw	r26, 0x0b	; 11
     b2c:	8c 91       	ld	r24, X
     b2e:	1b 97       	sbiw	r26, 0x0b	; 11
     b30:	88 23       	and	r24, r24
     b32:	d9 f1       	breq	.+118    	; 0xbaa <__stack+0x2ab>
     b34:	14 96       	adiw	r26, 0x04	; 4
     b36:	9c 91       	ld	r25, X
     b38:	14 97       	sbiw	r26, 0x04	; 4
     b3a:	92 95       	swap	r25
     b3c:	96 95       	lsr	r25
     b3e:	97 70       	andi	r25, 0x07	; 7
     b40:	15 96       	adiw	r26, 0x05	; 5
     b42:	8c 91       	ld	r24, X
     b44:	15 97       	sbiw	r26, 0x05	; 5
     b46:	88 0f       	add	r24, r24
     b48:	88 0f       	add	r24, r24
     b4a:	88 0f       	add	r24, r24
     b4c:	89 0f       	add	r24, r25
     b4e:	80 93 f3 00 	sts	0x00F3, r24
     b52:	13 96       	adiw	r26, 0x03	; 3
     b54:	9c 91       	ld	r25, X
     b56:	13 97       	sbiw	r26, 0x03	; 3
     b58:	92 95       	swap	r25
     b5a:	96 95       	lsr	r25
     b5c:	97 70       	andi	r25, 0x07	; 7
     b5e:	14 96       	adiw	r26, 0x04	; 4
     b60:	8c 91       	ld	r24, X
     b62:	14 97       	sbiw	r26, 0x04	; 4
     b64:	88 0f       	add	r24, r24
     b66:	88 0f       	add	r24, r24
     b68:	88 0f       	add	r24, r24
     b6a:	89 0f       	add	r24, r25
     b6c:	80 93 f2 00 	sts	0x00F2, r24
     b70:	12 96       	adiw	r26, 0x02	; 2
     b72:	9c 91       	ld	r25, X
     b74:	12 97       	sbiw	r26, 0x02	; 2
     b76:	92 95       	swap	r25
     b78:	96 95       	lsr	r25
     b7a:	97 70       	andi	r25, 0x07	; 7
     b7c:	13 96       	adiw	r26, 0x03	; 3
     b7e:	8c 91       	ld	r24, X
     b80:	13 97       	sbiw	r26, 0x03	; 3
     b82:	88 0f       	add	r24, r24
     b84:	88 0f       	add	r24, r24
     b86:	88 0f       	add	r24, r24
     b88:	89 0f       	add	r24, r25
     b8a:	80 93 f1 00 	sts	0x00F1, r24
     b8e:	12 96       	adiw	r26, 0x02	; 2
     b90:	8c 91       	ld	r24, X
     b92:	12 97       	sbiw	r26, 0x02	; 2
     b94:	88 0f       	add	r24, r24
     b96:	88 0f       	add	r24, r24
     b98:	88 0f       	add	r24, r24
     b9a:	80 93 f0 00 	sts	0x00F0, r24
     b9e:	ef ee       	ldi	r30, 0xEF	; 239
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 61       	ori	r24, 0x10	; 16
     ba6:	80 83       	st	Z, r24
     ba8:	1c c0       	rjmp	.+56     	; 0xbe2 <__stack+0x2e3>
          else              { Can_set_std_id(cmd->id.std);}
     baa:	12 96       	adiw	r26, 0x02	; 2
     bac:	8c 91       	ld	r24, X
     bae:	12 97       	sbiw	r26, 0x02	; 2
     bb0:	86 95       	lsr	r24
     bb2:	86 95       	lsr	r24
     bb4:	86 95       	lsr	r24
     bb6:	13 96       	adiw	r26, 0x03	; 3
     bb8:	9c 91       	ld	r25, X
     bba:	13 97       	sbiw	r26, 0x03	; 3
     bbc:	f0 e2       	ldi	r31, 0x20	; 32
     bbe:	9f 9f       	mul	r25, r31
     bc0:	80 0d       	add	r24, r0
     bc2:	11 24       	eor	r1, r1
     bc4:	80 93 f3 00 	sts	0x00F3, r24
     bc8:	12 96       	adiw	r26, 0x02	; 2
     bca:	8c 91       	ld	r24, X
     bcc:	12 97       	sbiw	r26, 0x02	; 2
     bce:	82 95       	swap	r24
     bd0:	88 0f       	add	r24, r24
     bd2:	80 7e       	andi	r24, 0xE0	; 224
     bd4:	80 93 f2 00 	sts	0x00F2, r24
     bd8:	ef ee       	ldi	r30, 0xEF	; 239
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8f 7e       	andi	r24, 0xEF	; 239
     be0:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	1a 96       	adiw	r26, 0x0a	; 10
     be6:	8c 93       	st	X, r24
     be8:	1a 97       	sbiw	r26, 0x0a	; 10
     bea:	e0 ef       	ldi	r30, 0xF0	; 240
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	84 60       	ori	r24, 0x04	; 4
     bf2:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     bf4:	ef ee       	ldi	r30, 0xEF	; 239
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	90 81       	ld	r25, Z
     bfa:	16 96       	adiw	r26, 0x06	; 6
     bfc:	8c 91       	ld	r24, X
     bfe:	89 2b       	or	r24, r25
     c00:	80 83       	st	Z, r24
          Can_config_tx();
     c02:	80 81       	ld	r24, Z
     c04:	8f 73       	andi	r24, 0x3F	; 63
     c06:	80 83       	st	Z, r24
     c08:	80 81       	ld	r24, Z
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c0e:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     c10:	4e c4       	rjmp	.+2204   	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     c12:	19 82       	std	Y+1, r1	; 0x01
     c14:	9b 81       	ldd	r25, Y+3	; 0x03
     c16:	92 95       	swap	r25
     c18:	96 95       	lsr	r25
     c1a:	97 70       	andi	r25, 0x07	; 7
     c1c:	8c 81       	ldd	r24, Y+4	; 0x04
     c1e:	88 0f       	add	r24, r24
     c20:	88 0f       	add	r24, r24
     c22:	88 0f       	add	r24, r24
     c24:	89 0f       	add	r24, r25
     c26:	80 93 f7 00 	sts	0x00F7, r24
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	92 95       	swap	r25
     c2e:	96 95       	lsr	r25
     c30:	97 70       	andi	r25, 0x07	; 7
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	88 0f       	add	r24, r24
     c36:	88 0f       	add	r24, r24
     c38:	88 0f       	add	r24, r24
     c3a:	89 0f       	add	r24, r25
     c3c:	80 93 f6 00 	sts	0x00F6, r24
     c40:	99 81       	ldd	r25, Y+1	; 0x01
     c42:	92 95       	swap	r25
     c44:	96 95       	lsr	r25
     c46:	97 70       	andi	r25, 0x07	; 7
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	88 0f       	add	r24, r24
     c4c:	88 0f       	add	r24, r24
     c4e:	88 0f       	add	r24, r24
     c50:	89 0f       	add	r24, r25
     c52:	80 93 f5 00 	sts	0x00F5, r24
     c56:	29 81       	ldd	r18, Y+1	; 0x01
     c58:	22 0f       	add	r18, r18
     c5a:	22 0f       	add	r18, r18
     c5c:	22 0f       	add	r18, r18
     c5e:	84 ef       	ldi	r24, 0xF4	; 244
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	fc 01       	movw	r30, r24
     c64:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c66:	ef ee       	ldi	r30, 0xEF	; 239
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	30 81       	ld	r19, Z
     c6c:	16 96       	adiw	r26, 0x06	; 6
     c6e:	2c 91       	ld	r18, X
     c70:	23 2b       	or	r18, r19
     c72:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     c74:	dc 01       	movw	r26, r24
     c76:	2c 91       	ld	r18, X
     c78:	2b 7f       	andi	r18, 0xFB	; 251
     c7a:	2c 93       	st	X, r18
          Can_clear_idemsk();
     c7c:	2c 91       	ld	r18, X
     c7e:	2e 7f       	andi	r18, 0xFE	; 254
     c80:	2c 93       	st	X, r18
          Can_config_rx();       
     c82:	80 81       	ld	r24, Z
     c84:	8f 73       	andi	r24, 0x3F	; 63
     c86:	80 83       	st	Z, r24
     c88:	80 81       	ld	r24, Z
     c8a:	80 68       	ori	r24, 0x80	; 128
     c8c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     c90:	0e c4       	rjmp	.+2076   	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	82 95       	swap	r24
     c9a:	88 0f       	add	r24, r24
     c9c:	80 7e       	andi	r24, 0xE0	; 224
     c9e:	81 5e       	subi	r24, 0xE1	; 225
     ca0:	27 ef       	ldi	r18, 0xF7	; 247
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	f9 01       	movw	r30, r18
     ca6:	80 83       	st	Z, r24
     ca8:	49 81       	ldd	r20, Y+1	; 0x01
     caa:	42 95       	swap	r20
     cac:	44 0f       	add	r20, r20
     cae:	40 7e       	andi	r20, 0xE0	; 224
     cb0:	86 ef       	ldi	r24, 0xF6	; 246
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	fc 01       	movw	r30, r24
     cb6:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     cb8:	12 96       	adiw	r26, 0x02	; 2
     cba:	4c 91       	ld	r20, X
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	46 95       	lsr	r20
     cc0:	46 95       	lsr	r20
     cc2:	46 95       	lsr	r20
     cc4:	13 96       	adiw	r26, 0x03	; 3
     cc6:	5c 91       	ld	r21, X
     cc8:	13 97       	sbiw	r26, 0x03	; 3
     cca:	f0 e2       	ldi	r31, 0x20	; 32
     ccc:	5f 9f       	mul	r21, r31
     cce:	40 0d       	add	r20, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	40 93 f3 00 	sts	0x00F3, r20
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	4c 91       	ld	r20, X
     cda:	12 97       	sbiw	r26, 0x02	; 2
     cdc:	42 95       	swap	r20
     cde:	44 0f       	add	r20, r20
     ce0:	40 7e       	andi	r20, 0xE0	; 224
     ce2:	40 93 f2 00 	sts	0x00F2, r20
     ce6:	6f ee       	ldi	r22, 0xEF	; 239
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	fb 01       	movw	r30, r22
     cec:	40 81       	ld	r20, Z
     cee:	4f 7e       	andi	r20, 0xEF	; 239
     cf0:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     cf2:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     cf4:	5b 81       	ldd	r21, Y+3	; 0x03
     cf6:	52 95       	swap	r21
     cf8:	56 95       	lsr	r21
     cfa:	57 70       	andi	r21, 0x07	; 7
     cfc:	4c 81       	ldd	r20, Y+4	; 0x04
     cfe:	44 0f       	add	r20, r20
     d00:	44 0f       	add	r20, r20
     d02:	44 0f       	add	r20, r20
     d04:	45 0f       	add	r20, r21
     d06:	f9 01       	movw	r30, r18
     d08:	40 83       	st	Z, r20
     d0a:	3a 81       	ldd	r19, Y+2	; 0x02
     d0c:	32 95       	swap	r19
     d0e:	36 95       	lsr	r19
     d10:	37 70       	andi	r19, 0x07	; 7
     d12:	2b 81       	ldd	r18, Y+3	; 0x03
     d14:	22 0f       	add	r18, r18
     d16:	22 0f       	add	r18, r18
     d18:	22 0f       	add	r18, r18
     d1a:	23 0f       	add	r18, r19
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 83       	st	Z, r18
     d20:	99 81       	ldd	r25, Y+1	; 0x01
     d22:	92 95       	swap	r25
     d24:	96 95       	lsr	r25
     d26:	97 70       	andi	r25, 0x07	; 7
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	88 0f       	add	r24, r24
     d2c:	88 0f       	add	r24, r24
     d2e:	88 0f       	add	r24, r24
     d30:	89 0f       	add	r24, r25
     d32:	80 93 f5 00 	sts	0x00F5, r24
     d36:	29 81       	ldd	r18, Y+1	; 0x01
     d38:	22 0f       	add	r18, r18
     d3a:	22 0f       	add	r18, r18
     d3c:	22 0f       	add	r18, r18
     d3e:	84 ef       	ldi	r24, 0xF4	; 244
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	fc 01       	movw	r30, r24
     d44:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     d46:	fb 01       	movw	r30, r22
     d48:	30 81       	ld	r19, Z
     d4a:	16 96       	adiw	r26, 0x06	; 6
     d4c:	2c 91       	ld	r18, X
     d4e:	16 97       	sbiw	r26, 0x06	; 6
     d50:	23 2b       	or	r18, r19
     d52:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     d54:	1a 96       	adiw	r26, 0x0a	; 10
     d56:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     d58:	dc 01       	movw	r26, r24
     d5a:	2c 91       	ld	r18, X
     d5c:	24 60       	ori	r18, 0x04	; 4
     d5e:	2c 93       	st	X, r18
		  Can_clear_rtr();
     d60:	a0 ef       	ldi	r26, 0xF0	; 240
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	2c 91       	ld	r18, X
     d66:	2b 7f       	andi	r18, 0xFB	; 251
     d68:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     d6a:	20 81       	ld	r18, Z
     d6c:	2f 7e       	andi	r18, 0xEF	; 239
     d6e:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d70:	fc 01       	movw	r30, r24
     d72:	20 81       	ld	r18, Z
     d74:	2e 7f       	andi	r18, 0xFE	; 254
     d76:	20 83       	st	Z, r18
          Can_config_rx();       
     d78:	db 01       	movw	r26, r22
     d7a:	8c 91       	ld	r24, X
     d7c:	8f 73       	andi	r24, 0x3F	; 63
     d7e:	8c 93       	st	X, r24
     d80:	8c 91       	ld	r24, X
     d82:	80 68       	ori	r24, 0x80	; 128
     d84:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d86:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     d88:	92 c3       	rjmp	.+1828   	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	82 95       	swap	r24
     d92:	88 0f       	add	r24, r24
     d94:	80 7e       	andi	r24, 0xE0	; 224
     d96:	81 5e       	subi	r24, 0xE1	; 225
     d98:	27 ef       	ldi	r18, 0xF7	; 247
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	f9 01       	movw	r30, r18
     d9e:	80 83       	st	Z, r24
     da0:	49 81       	ldd	r20, Y+1	; 0x01
     da2:	42 95       	swap	r20
     da4:	44 0f       	add	r20, r20
     da6:	40 7e       	andi	r20, 0xE0	; 224
     da8:	86 ef       	ldi	r24, 0xF6	; 246
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	fc 01       	movw	r30, r24
     dae:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     db0:	12 96       	adiw	r26, 0x02	; 2
     db2:	4c 91       	ld	r20, X
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	46 95       	lsr	r20
     db8:	46 95       	lsr	r20
     dba:	46 95       	lsr	r20
     dbc:	13 96       	adiw	r26, 0x03	; 3
     dbe:	5c 91       	ld	r21, X
     dc0:	13 97       	sbiw	r26, 0x03	; 3
     dc2:	f0 e2       	ldi	r31, 0x20	; 32
     dc4:	5f 9f       	mul	r21, r31
     dc6:	40 0d       	add	r20, r0
     dc8:	11 24       	eor	r1, r1
     dca:	40 93 f3 00 	sts	0x00F3, r20
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	4c 91       	ld	r20, X
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	42 95       	swap	r20
     dd6:	44 0f       	add	r20, r20
     dd8:	40 7e       	andi	r20, 0xE0	; 224
     dda:	40 93 f2 00 	sts	0x00F2, r20
     dde:	6f ee       	ldi	r22, 0xEF	; 239
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	fb 01       	movw	r30, r22
     de4:	40 81       	ld	r20, Z
     de6:	4f 7e       	andi	r20, 0xEF	; 239
     de8:	40 83       	st	Z, r20
		
          u8_temp=0; 
     dea:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     dec:	5b 81       	ldd	r21, Y+3	; 0x03
     dee:	52 95       	swap	r21
     df0:	56 95       	lsr	r21
     df2:	57 70       	andi	r21, 0x07	; 7
     df4:	4c 81       	ldd	r20, Y+4	; 0x04
     df6:	44 0f       	add	r20, r20
     df8:	44 0f       	add	r20, r20
     dfa:	44 0f       	add	r20, r20
     dfc:	45 0f       	add	r20, r21
     dfe:	f9 01       	movw	r30, r18
     e00:	40 83       	st	Z, r20
     e02:	3a 81       	ldd	r19, Y+2	; 0x02
     e04:	32 95       	swap	r19
     e06:	36 95       	lsr	r19
     e08:	37 70       	andi	r19, 0x07	; 7
     e0a:	2b 81       	ldd	r18, Y+3	; 0x03
     e0c:	22 0f       	add	r18, r18
     e0e:	22 0f       	add	r18, r18
     e10:	22 0f       	add	r18, r18
     e12:	23 0f       	add	r18, r19
     e14:	fc 01       	movw	r30, r24
     e16:	20 83       	st	Z, r18
     e18:	99 81       	ldd	r25, Y+1	; 0x01
     e1a:	92 95       	swap	r25
     e1c:	96 95       	lsr	r25
     e1e:	97 70       	andi	r25, 0x07	; 7
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	88 0f       	add	r24, r24
     e24:	88 0f       	add	r24, r24
     e26:	88 0f       	add	r24, r24
     e28:	89 0f       	add	r24, r25
     e2a:	80 93 f5 00 	sts	0x00F5, r24
     e2e:	29 81       	ldd	r18, Y+1	; 0x01
     e30:	22 0f       	add	r18, r18
     e32:	22 0f       	add	r18, r18
     e34:	22 0f       	add	r18, r18
     e36:	84 ef       	ldi	r24, 0xF4	; 244
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e3e:	fb 01       	movw	r30, r22
     e40:	30 81       	ld	r19, Z
     e42:	16 96       	adiw	r26, 0x06	; 6
     e44:	2c 91       	ld	r18, X
     e46:	16 97       	sbiw	r26, 0x06	; 6
     e48:	23 2b       	or	r18, r19
     e4a:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	1a 96       	adiw	r26, 0x0a	; 10
     e50:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     e52:	dc 01       	movw	r26, r24
     e54:	2c 91       	ld	r18, X
     e56:	24 60       	ori	r18, 0x04	; 4
     e58:	2c 93       	st	X, r18
		  Can_set_rtr();
     e5a:	a0 ef       	ldi	r26, 0xF0	; 240
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	2c 91       	ld	r18, X
     e60:	24 60       	ori	r18, 0x04	; 4
     e62:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     e64:	20 81       	ld	r18, Z
     e66:	2f 7d       	andi	r18, 0xDF	; 223
     e68:	20 83       	st	Z, r18
          Can_clear_idemsk();
     e6a:	fc 01       	movw	r30, r24
     e6c:	20 81       	ld	r18, Z
     e6e:	2e 7f       	andi	r18, 0xFE	; 254
     e70:	20 83       	st	Z, r18
          Can_config_rx();       
     e72:	db 01       	movw	r26, r22
     e74:	8c 91       	ld	r24, X
     e76:	8f 73       	andi	r24, 0x3F	; 63
     e78:	8c 93       	st	X, r24
     e7a:	8c 91       	ld	r24, X
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e80:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     e82:	15 c3       	rjmp	.+1578   	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     e84:	1b 96       	adiw	r26, 0x0b	; 11
     e86:	8c 91       	ld	r24, X
     e88:	1b 97       	sbiw	r26, 0x0b	; 11
     e8a:	88 23       	and	r24, r24
     e8c:	d9 f1       	breq	.+118    	; 0xf04 <__stack+0x605>
     e8e:	14 96       	adiw	r26, 0x04	; 4
     e90:	9c 91       	ld	r25, X
     e92:	14 97       	sbiw	r26, 0x04	; 4
     e94:	92 95       	swap	r25
     e96:	96 95       	lsr	r25
     e98:	97 70       	andi	r25, 0x07	; 7
     e9a:	15 96       	adiw	r26, 0x05	; 5
     e9c:	8c 91       	ld	r24, X
     e9e:	15 97       	sbiw	r26, 0x05	; 5
     ea0:	88 0f       	add	r24, r24
     ea2:	88 0f       	add	r24, r24
     ea4:	88 0f       	add	r24, r24
     ea6:	89 0f       	add	r24, r25
     ea8:	80 93 f3 00 	sts	0x00F3, r24
     eac:	13 96       	adiw	r26, 0x03	; 3
     eae:	9c 91       	ld	r25, X
     eb0:	13 97       	sbiw	r26, 0x03	; 3
     eb2:	92 95       	swap	r25
     eb4:	96 95       	lsr	r25
     eb6:	97 70       	andi	r25, 0x07	; 7
     eb8:	14 96       	adiw	r26, 0x04	; 4
     eba:	8c 91       	ld	r24, X
     ebc:	14 97       	sbiw	r26, 0x04	; 4
     ebe:	88 0f       	add	r24, r24
     ec0:	88 0f       	add	r24, r24
     ec2:	88 0f       	add	r24, r24
     ec4:	89 0f       	add	r24, r25
     ec6:	80 93 f2 00 	sts	0x00F2, r24
     eca:	12 96       	adiw	r26, 0x02	; 2
     ecc:	9c 91       	ld	r25, X
     ece:	12 97       	sbiw	r26, 0x02	; 2
     ed0:	92 95       	swap	r25
     ed2:	96 95       	lsr	r25
     ed4:	97 70       	andi	r25, 0x07	; 7
     ed6:	13 96       	adiw	r26, 0x03	; 3
     ed8:	8c 91       	ld	r24, X
     eda:	13 97       	sbiw	r26, 0x03	; 3
     edc:	88 0f       	add	r24, r24
     ede:	88 0f       	add	r24, r24
     ee0:	88 0f       	add	r24, r24
     ee2:	89 0f       	add	r24, r25
     ee4:	80 93 f1 00 	sts	0x00F1, r24
     ee8:	12 96       	adiw	r26, 0x02	; 2
     eea:	8c 91       	ld	r24, X
     eec:	12 97       	sbiw	r26, 0x02	; 2
     eee:	88 0f       	add	r24, r24
     ef0:	88 0f       	add	r24, r24
     ef2:	88 0f       	add	r24, r24
     ef4:	80 93 f0 00 	sts	0x00F0, r24
     ef8:	ef ee       	ldi	r30, 0xEF	; 239
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	80 61       	ori	r24, 0x10	; 16
     f00:	80 83       	st	Z, r24
     f02:	1c c0       	rjmp	.+56     	; 0xf3c <__stack+0x63d>
          else              { Can_set_std_id(cmd->id.std);}
     f04:	12 96       	adiw	r26, 0x02	; 2
     f06:	8c 91       	ld	r24, X
     f08:	12 97       	sbiw	r26, 0x02	; 2
     f0a:	86 95       	lsr	r24
     f0c:	86 95       	lsr	r24
     f0e:	86 95       	lsr	r24
     f10:	13 96       	adiw	r26, 0x03	; 3
     f12:	9c 91       	ld	r25, X
     f14:	13 97       	sbiw	r26, 0x03	; 3
     f16:	e0 e2       	ldi	r30, 0x20	; 32
     f18:	9e 9f       	mul	r25, r30
     f1a:	80 0d       	add	r24, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	80 93 f3 00 	sts	0x00F3, r24
     f22:	12 96       	adiw	r26, 0x02	; 2
     f24:	8c 91       	ld	r24, X
     f26:	12 97       	sbiw	r26, 0x02	; 2
     f28:	82 95       	swap	r24
     f2a:	88 0f       	add	r24, r24
     f2c:	80 7e       	andi	r24, 0xE0	; 224
     f2e:	80 93 f2 00 	sts	0x00F2, r24
     f32:	ef ee       	ldi	r30, 0xEF	; 239
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8f 7e       	andi	r24, 0xEF	; 239
     f3a:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	92 95       	swap	r25
     f44:	96 95       	lsr	r25
     f46:	97 70       	andi	r25, 0x07	; 7
     f48:	8c 81       	ldd	r24, Y+4	; 0x04
     f4a:	88 0f       	add	r24, r24
     f4c:	88 0f       	add	r24, r24
     f4e:	88 0f       	add	r24, r24
     f50:	89 0f       	add	r24, r25
     f52:	80 93 f7 00 	sts	0x00F7, r24
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	92 95       	swap	r25
     f5a:	96 95       	lsr	r25
     f5c:	97 70       	andi	r25, 0x07	; 7
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	88 0f       	add	r24, r24
     f62:	88 0f       	add	r24, r24
     f64:	88 0f       	add	r24, r24
     f66:	89 0f       	add	r24, r25
     f68:	80 93 f6 00 	sts	0x00F6, r24
     f6c:	99 81       	ldd	r25, Y+1	; 0x01
     f6e:	92 95       	swap	r25
     f70:	96 95       	lsr	r25
     f72:	97 70       	andi	r25, 0x07	; 7
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	88 0f       	add	r24, r24
     f78:	88 0f       	add	r24, r24
     f7a:	88 0f       	add	r24, r24
     f7c:	89 0f       	add	r24, r25
     f7e:	80 93 f5 00 	sts	0x00F5, r24
     f82:	29 81       	ldd	r18, Y+1	; 0x01
     f84:	22 0f       	add	r18, r18
     f86:	22 0f       	add	r18, r18
     f88:	22 0f       	add	r18, r18
     f8a:	84 ef       	ldi	r24, 0xF4	; 244
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	fc 01       	movw	r30, r24
     f90:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     f92:	ef ee       	ldi	r30, 0xEF	; 239
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	30 81       	ld	r19, Z
     f98:	16 96       	adiw	r26, 0x06	; 6
     f9a:	2c 91       	ld	r18, X
     f9c:	23 2b       	or	r18, r19
     f9e:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     fa0:	dc 01       	movw	r26, r24
     fa2:	2c 91       	ld	r18, X
     fa4:	2b 7f       	andi	r18, 0xFB	; 251
     fa6:	2c 93       	st	X, r18
          Can_set_idemsk();
     fa8:	2c 91       	ld	r18, X
     faa:	21 60       	ori	r18, 0x01	; 1
     fac:	2c 93       	st	X, r18
          Can_config_rx();       
     fae:	80 81       	ld	r24, Z
     fb0:	8f 73       	andi	r24, 0x3F	; 63
     fb2:	80 83       	st	Z, r24
     fb4:	80 81       	ld	r24, Z
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fba:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     fbc:	78 c2       	rjmp	.+1264   	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fbe:	1b 96       	adiw	r26, 0x0b	; 11
     fc0:	8c 91       	ld	r24, X
     fc2:	1b 97       	sbiw	r26, 0x0b	; 11
     fc4:	88 23       	and	r24, r24
     fc6:	d9 f1       	breq	.+118    	; 0x103e <__stack+0x73f>
     fc8:	14 96       	adiw	r26, 0x04	; 4
     fca:	9c 91       	ld	r25, X
     fcc:	14 97       	sbiw	r26, 0x04	; 4
     fce:	92 95       	swap	r25
     fd0:	96 95       	lsr	r25
     fd2:	97 70       	andi	r25, 0x07	; 7
     fd4:	15 96       	adiw	r26, 0x05	; 5
     fd6:	8c 91       	ld	r24, X
     fd8:	15 97       	sbiw	r26, 0x05	; 5
     fda:	88 0f       	add	r24, r24
     fdc:	88 0f       	add	r24, r24
     fde:	88 0f       	add	r24, r24
     fe0:	89 0f       	add	r24, r25
     fe2:	80 93 f3 00 	sts	0x00F3, r24
     fe6:	13 96       	adiw	r26, 0x03	; 3
     fe8:	9c 91       	ld	r25, X
     fea:	13 97       	sbiw	r26, 0x03	; 3
     fec:	92 95       	swap	r25
     fee:	96 95       	lsr	r25
     ff0:	97 70       	andi	r25, 0x07	; 7
     ff2:	14 96       	adiw	r26, 0x04	; 4
     ff4:	8c 91       	ld	r24, X
     ff6:	14 97       	sbiw	r26, 0x04	; 4
     ff8:	88 0f       	add	r24, r24
     ffa:	88 0f       	add	r24, r24
     ffc:	88 0f       	add	r24, r24
     ffe:	89 0f       	add	r24, r25
    1000:	80 93 f2 00 	sts	0x00F2, r24
    1004:	12 96       	adiw	r26, 0x02	; 2
    1006:	9c 91       	ld	r25, X
    1008:	12 97       	sbiw	r26, 0x02	; 2
    100a:	92 95       	swap	r25
    100c:	96 95       	lsr	r25
    100e:	97 70       	andi	r25, 0x07	; 7
    1010:	13 96       	adiw	r26, 0x03	; 3
    1012:	8c 91       	ld	r24, X
    1014:	13 97       	sbiw	r26, 0x03	; 3
    1016:	88 0f       	add	r24, r24
    1018:	88 0f       	add	r24, r24
    101a:	88 0f       	add	r24, r24
    101c:	89 0f       	add	r24, r25
    101e:	80 93 f1 00 	sts	0x00F1, r24
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	8c 91       	ld	r24, X
    1026:	12 97       	sbiw	r26, 0x02	; 2
    1028:	88 0f       	add	r24, r24
    102a:	88 0f       	add	r24, r24
    102c:	88 0f       	add	r24, r24
    102e:	80 93 f0 00 	sts	0x00F0, r24
    1032:	ef ee       	ldi	r30, 0xEF	; 239
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 61       	ori	r24, 0x10	; 16
    103a:	80 83       	st	Z, r24
    103c:	1c c0       	rjmp	.+56     	; 0x1076 <__stack+0x777>
          else              { Can_set_std_id(cmd->id.std);}
    103e:	12 96       	adiw	r26, 0x02	; 2
    1040:	8c 91       	ld	r24, X
    1042:	12 97       	sbiw	r26, 0x02	; 2
    1044:	86 95       	lsr	r24
    1046:	86 95       	lsr	r24
    1048:	86 95       	lsr	r24
    104a:	13 96       	adiw	r26, 0x03	; 3
    104c:	9c 91       	ld	r25, X
    104e:	13 97       	sbiw	r26, 0x03	; 3
    1050:	e0 e2       	ldi	r30, 0x20	; 32
    1052:	9e 9f       	mul	r25, r30
    1054:	80 0d       	add	r24, r0
    1056:	11 24       	eor	r1, r1
    1058:	80 93 f3 00 	sts	0x00F3, r24
    105c:	12 96       	adiw	r26, 0x02	; 2
    105e:	8c 91       	ld	r24, X
    1060:	12 97       	sbiw	r26, 0x02	; 2
    1062:	82 95       	swap	r24
    1064:	88 0f       	add	r24, r24
    1066:	80 7e       	andi	r24, 0xE0	; 224
    1068:	80 93 f2 00 	sts	0x00F2, r24
    106c:	ef ee       	ldi	r30, 0xEF	; 239
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8f 7e       	andi	r24, 0xEF	; 239
    1074:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	9b 81       	ldd	r25, Y+3	; 0x03
    107c:	92 95       	swap	r25
    107e:	96 95       	lsr	r25
    1080:	97 70       	andi	r25, 0x07	; 7
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	88 0f       	add	r24, r24
    1086:	88 0f       	add	r24, r24
    1088:	88 0f       	add	r24, r24
    108a:	89 0f       	add	r24, r25
    108c:	80 93 f7 00 	sts	0x00F7, r24
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	92 95       	swap	r25
    1094:	96 95       	lsr	r25
    1096:	97 70       	andi	r25, 0x07	; 7
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 0f       	add	r24, r24
    109c:	88 0f       	add	r24, r24
    109e:	88 0f       	add	r24, r24
    10a0:	89 0f       	add	r24, r25
    10a2:	80 93 f6 00 	sts	0x00F6, r24
    10a6:	99 81       	ldd	r25, Y+1	; 0x01
    10a8:	92 95       	swap	r25
    10aa:	96 95       	lsr	r25
    10ac:	97 70       	andi	r25, 0x07	; 7
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	88 0f       	add	r24, r24
    10b2:	88 0f       	add	r24, r24
    10b4:	88 0f       	add	r24, r24
    10b6:	89 0f       	add	r24, r25
    10b8:	80 93 f5 00 	sts	0x00F5, r24
    10bc:	29 81       	ldd	r18, Y+1	; 0x01
    10be:	22 0f       	add	r18, r18
    10c0:	22 0f       	add	r18, r18
    10c2:	22 0f       	add	r18, r18
    10c4:	84 ef       	ldi	r24, 0xF4	; 244
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    10cc:	ef ee       	ldi	r30, 0xEF	; 239
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	30 81       	ld	r19, Z
    10d2:	16 96       	adiw	r26, 0x06	; 6
    10d4:	2c 91       	ld	r18, X
    10d6:	16 97       	sbiw	r26, 0x06	; 6
    10d8:	23 2b       	or	r18, r19
    10da:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    10dc:	1a 96       	adiw	r26, 0x0a	; 10
    10de:	1c 92       	st	X, r1
    10e0:	dc 01       	movw	r26, r24
    10e2:	2c 91       	ld	r18, X
    10e4:	24 60       	ori	r18, 0x04	; 4
    10e6:	2c 93       	st	X, r18
    10e8:	a0 ef       	ldi	r26, 0xF0	; 240
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	2c 91       	ld	r18, X
    10ee:	2b 7f       	andi	r18, 0xFB	; 251
    10f0:	2c 93       	st	X, r18
          Can_set_idemsk();
    10f2:	dc 01       	movw	r26, r24
    10f4:	2c 91       	ld	r18, X
    10f6:	21 60       	ori	r18, 0x01	; 1
    10f8:	2c 93       	st	X, r18
          Can_config_rx();       
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 73       	andi	r24, 0x3F	; 63
    10fe:	80 83       	st	Z, r24
    1100:	80 81       	ld	r24, Z
    1102:	80 68       	ori	r24, 0x80	; 128
    1104:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1106:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1108:	d2 c1       	rjmp	.+932    	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    110a:	1b 96       	adiw	r26, 0x0b	; 11
    110c:	8c 91       	ld	r24, X
    110e:	1b 97       	sbiw	r26, 0x0b	; 11
    1110:	88 23       	and	r24, r24
    1112:	d9 f1       	breq	.+118    	; 0x118a <__stack+0x88b>
    1114:	14 96       	adiw	r26, 0x04	; 4
    1116:	9c 91       	ld	r25, X
    1118:	14 97       	sbiw	r26, 0x04	; 4
    111a:	92 95       	swap	r25
    111c:	96 95       	lsr	r25
    111e:	97 70       	andi	r25, 0x07	; 7
    1120:	15 96       	adiw	r26, 0x05	; 5
    1122:	8c 91       	ld	r24, X
    1124:	15 97       	sbiw	r26, 0x05	; 5
    1126:	88 0f       	add	r24, r24
    1128:	88 0f       	add	r24, r24
    112a:	88 0f       	add	r24, r24
    112c:	89 0f       	add	r24, r25
    112e:	80 93 f3 00 	sts	0x00F3, r24
    1132:	13 96       	adiw	r26, 0x03	; 3
    1134:	9c 91       	ld	r25, X
    1136:	13 97       	sbiw	r26, 0x03	; 3
    1138:	92 95       	swap	r25
    113a:	96 95       	lsr	r25
    113c:	97 70       	andi	r25, 0x07	; 7
    113e:	14 96       	adiw	r26, 0x04	; 4
    1140:	8c 91       	ld	r24, X
    1142:	14 97       	sbiw	r26, 0x04	; 4
    1144:	88 0f       	add	r24, r24
    1146:	88 0f       	add	r24, r24
    1148:	88 0f       	add	r24, r24
    114a:	89 0f       	add	r24, r25
    114c:	80 93 f2 00 	sts	0x00F2, r24
    1150:	12 96       	adiw	r26, 0x02	; 2
    1152:	9c 91       	ld	r25, X
    1154:	12 97       	sbiw	r26, 0x02	; 2
    1156:	92 95       	swap	r25
    1158:	96 95       	lsr	r25
    115a:	97 70       	andi	r25, 0x07	; 7
    115c:	13 96       	adiw	r26, 0x03	; 3
    115e:	8c 91       	ld	r24, X
    1160:	13 97       	sbiw	r26, 0x03	; 3
    1162:	88 0f       	add	r24, r24
    1164:	88 0f       	add	r24, r24
    1166:	88 0f       	add	r24, r24
    1168:	89 0f       	add	r24, r25
    116a:	80 93 f1 00 	sts	0x00F1, r24
    116e:	12 96       	adiw	r26, 0x02	; 2
    1170:	8c 91       	ld	r24, X
    1172:	12 97       	sbiw	r26, 0x02	; 2
    1174:	88 0f       	add	r24, r24
    1176:	88 0f       	add	r24, r24
    1178:	88 0f       	add	r24, r24
    117a:	80 93 f0 00 	sts	0x00F0, r24
    117e:	ef ee       	ldi	r30, 0xEF	; 239
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	80 61       	ori	r24, 0x10	; 16
    1186:	80 83       	st	Z, r24
    1188:	1c c0       	rjmp	.+56     	; 0x11c2 <__stack+0x8c3>
          else              { Can_set_std_id(cmd->id.std);}
    118a:	12 96       	adiw	r26, 0x02	; 2
    118c:	8c 91       	ld	r24, X
    118e:	12 97       	sbiw	r26, 0x02	; 2
    1190:	86 95       	lsr	r24
    1192:	86 95       	lsr	r24
    1194:	86 95       	lsr	r24
    1196:	13 96       	adiw	r26, 0x03	; 3
    1198:	9c 91       	ld	r25, X
    119a:	13 97       	sbiw	r26, 0x03	; 3
    119c:	e0 e2       	ldi	r30, 0x20	; 32
    119e:	9e 9f       	mul	r25, r30
    11a0:	80 0d       	add	r24, r0
    11a2:	11 24       	eor	r1, r1
    11a4:	80 93 f3 00 	sts	0x00F3, r24
    11a8:	12 96       	adiw	r26, 0x02	; 2
    11aa:	8c 91       	ld	r24, X
    11ac:	12 97       	sbiw	r26, 0x02	; 2
    11ae:	82 95       	swap	r24
    11b0:	88 0f       	add	r24, r24
    11b2:	80 7e       	andi	r24, 0xE0	; 224
    11b4:	80 93 f2 00 	sts	0x00F2, r24
    11b8:	ef ee       	ldi	r30, 0xEF	; 239
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	8f 7e       	andi	r24, 0xEF	; 239
    11c0:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	9b 81       	ldd	r25, Y+3	; 0x03
    11c8:	92 95       	swap	r25
    11ca:	96 95       	lsr	r25
    11cc:	97 70       	andi	r25, 0x07	; 7
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	88 0f       	add	r24, r24
    11d2:	88 0f       	add	r24, r24
    11d4:	88 0f       	add	r24, r24
    11d6:	89 0f       	add	r24, r25
    11d8:	80 93 f7 00 	sts	0x00F7, r24
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	92 95       	swap	r25
    11e0:	96 95       	lsr	r25
    11e2:	97 70       	andi	r25, 0x07	; 7
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 0f       	add	r24, r24
    11e8:	88 0f       	add	r24, r24
    11ea:	88 0f       	add	r24, r24
    11ec:	89 0f       	add	r24, r25
    11ee:	80 93 f6 00 	sts	0x00F6, r24
    11f2:	99 81       	ldd	r25, Y+1	; 0x01
    11f4:	92 95       	swap	r25
    11f6:	96 95       	lsr	r25
    11f8:	97 70       	andi	r25, 0x07	; 7
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	88 0f       	add	r24, r24
    11fe:	88 0f       	add	r24, r24
    1200:	88 0f       	add	r24, r24
    1202:	89 0f       	add	r24, r25
    1204:	80 93 f5 00 	sts	0x00F5, r24
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	22 0f       	add	r18, r18
    120c:	22 0f       	add	r18, r18
    120e:	22 0f       	add	r18, r18
    1210:	84 ef       	ldi	r24, 0xF4	; 244
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1218:	ef ee       	ldi	r30, 0xEF	; 239
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	30 81       	ld	r19, Z
    121e:	16 96       	adiw	r26, 0x06	; 6
    1220:	2c 91       	ld	r18, X
    1222:	16 97       	sbiw	r26, 0x06	; 6
    1224:	23 2b       	or	r18, r19
    1226:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1228:	21 e0       	ldi	r18, 0x01	; 1
    122a:	1a 96       	adiw	r26, 0x0a	; 10
    122c:	2c 93       	st	X, r18
    122e:	dc 01       	movw	r26, r24
    1230:	2c 91       	ld	r18, X
    1232:	24 60       	ori	r18, 0x04	; 4
    1234:	2c 93       	st	X, r18
    1236:	a0 ef       	ldi	r26, 0xF0	; 240
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	2c 91       	ld	r18, X
    123c:	24 60       	ori	r18, 0x04	; 4
    123e:	2c 93       	st	X, r18
          Can_clear_rplv();
    1240:	20 81       	ld	r18, Z
    1242:	2f 7d       	andi	r18, 0xDF	; 223
    1244:	20 83       	st	Z, r18
          Can_set_idemsk();
    1246:	dc 01       	movw	r26, r24
    1248:	2c 91       	ld	r18, X
    124a:	21 60       	ori	r18, 0x01	; 1
    124c:	2c 93       	st	X, r18
          Can_config_rx();       
    124e:	80 81       	ld	r24, Z
    1250:	8f 73       	andi	r24, 0x3F	; 63
    1252:	80 83       	st	Z, r24
    1254:	80 81       	ld	r24, Z
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    125a:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    125c:	28 c1       	rjmp	.+592    	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	8a ef       	ldi	r24, 0xFA	; 250
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	17 96       	adiw	r26, 0x07	; 7
    1266:	ed 91       	ld	r30, X+
    1268:	fc 91       	ld	r31, X
    126a:	18 97       	sbiw	r26, 0x08	; 8
    126c:	e2 0f       	add	r30, r18
    126e:	f1 1d       	adc	r31, r1
    1270:	30 81       	ld	r19, Z
    1272:	fc 01       	movw	r30, r24
    1274:	30 83       	st	Z, r19
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	16 96       	adiw	r26, 0x06	; 6
    127a:	3c 91       	ld	r19, X
    127c:	16 97       	sbiw	r26, 0x06	; 6
    127e:	23 17       	cp	r18, r19
    1280:	88 f3       	brcs	.-30     	; 0x1264 <__stack+0x965>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    1282:	19 82       	std	Y+1, r1	; 0x01
    1284:	9b 81       	ldd	r25, Y+3	; 0x03
    1286:	92 95       	swap	r25
    1288:	96 95       	lsr	r25
    128a:	97 70       	andi	r25, 0x07	; 7
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	88 0f       	add	r24, r24
    1290:	88 0f       	add	r24, r24
    1292:	88 0f       	add	r24, r24
    1294:	89 0f       	add	r24, r25
    1296:	80 93 f7 00 	sts	0x00F7, r24
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	92 95       	swap	r25
    129e:	96 95       	lsr	r25
    12a0:	97 70       	andi	r25, 0x07	; 7
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	88 0f       	add	r24, r24
    12a6:	88 0f       	add	r24, r24
    12a8:	88 0f       	add	r24, r24
    12aa:	89 0f       	add	r24, r25
    12ac:	80 93 f6 00 	sts	0x00F6, r24
    12b0:	99 81       	ldd	r25, Y+1	; 0x01
    12b2:	92 95       	swap	r25
    12b4:	96 95       	lsr	r25
    12b6:	97 70       	andi	r25, 0x07	; 7
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	88 0f       	add	r24, r24
    12bc:	88 0f       	add	r24, r24
    12be:	88 0f       	add	r24, r24
    12c0:	89 0f       	add	r24, r25
    12c2:	80 93 f5 00 	sts	0x00F5, r24
    12c6:	29 81       	ldd	r18, Y+1	; 0x01
    12c8:	22 0f       	add	r18, r18
    12ca:	22 0f       	add	r18, r18
    12cc:	22 0f       	add	r18, r18
    12ce:	84 ef       	ldi	r24, 0xF4	; 244
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    12d6:	ef ee       	ldi	r30, 0xEF	; 239
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	30 81       	ld	r19, Z
    12dc:	16 96       	adiw	r26, 0x06	; 6
    12de:	2c 91       	ld	r18, X
    12e0:	16 97       	sbiw	r26, 0x06	; 6
    12e2:	23 2b       	or	r18, r19
    12e4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	1a 96       	adiw	r26, 0x0a	; 10
    12ea:	2c 93       	st	X, r18
    12ec:	dc 01       	movw	r26, r24
    12ee:	2c 91       	ld	r18, X
    12f0:	24 60       	ori	r18, 0x04	; 4
    12f2:	2c 93       	st	X, r18
    12f4:	a0 ef       	ldi	r26, 0xF0	; 240
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	2c 91       	ld	r18, X
    12fa:	24 60       	ori	r18, 0x04	; 4
    12fc:	2c 93       	st	X, r18
          Can_set_rplv();
    12fe:	20 81       	ld	r18, Z
    1300:	20 62       	ori	r18, 0x20	; 32
    1302:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1304:	dc 01       	movw	r26, r24
    1306:	2c 91       	ld	r18, X
    1308:	2e 7f       	andi	r18, 0xFE	; 254
    130a:	2c 93       	st	X, r18
          Can_config_rx();       
    130c:	80 81       	ld	r24, Z
    130e:	8f 73       	andi	r24, 0x3F	; 63
    1310:	80 83       	st	Z, r24
    1312:	80 81       	ld	r24, Z
    1314:	80 68       	ori	r24, 0x80	; 128
    1316:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1318:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    131a:	c9 c0       	rjmp	.+402    	; 0x14ae <__stack+0xbaf>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    131c:	1b 96       	adiw	r26, 0x0b	; 11
    131e:	8c 91       	ld	r24, X
    1320:	1b 97       	sbiw	r26, 0x0b	; 11
    1322:	88 23       	and	r24, r24
    1324:	d9 f1       	breq	.+118    	; 0x139c <__stack+0xa9d>
    1326:	14 96       	adiw	r26, 0x04	; 4
    1328:	9c 91       	ld	r25, X
    132a:	14 97       	sbiw	r26, 0x04	; 4
    132c:	92 95       	swap	r25
    132e:	96 95       	lsr	r25
    1330:	97 70       	andi	r25, 0x07	; 7
    1332:	15 96       	adiw	r26, 0x05	; 5
    1334:	8c 91       	ld	r24, X
    1336:	15 97       	sbiw	r26, 0x05	; 5
    1338:	88 0f       	add	r24, r24
    133a:	88 0f       	add	r24, r24
    133c:	88 0f       	add	r24, r24
    133e:	89 0f       	add	r24, r25
    1340:	80 93 f3 00 	sts	0x00F3, r24
    1344:	13 96       	adiw	r26, 0x03	; 3
    1346:	9c 91       	ld	r25, X
    1348:	13 97       	sbiw	r26, 0x03	; 3
    134a:	92 95       	swap	r25
    134c:	96 95       	lsr	r25
    134e:	97 70       	andi	r25, 0x07	; 7
    1350:	14 96       	adiw	r26, 0x04	; 4
    1352:	8c 91       	ld	r24, X
    1354:	14 97       	sbiw	r26, 0x04	; 4
    1356:	88 0f       	add	r24, r24
    1358:	88 0f       	add	r24, r24
    135a:	88 0f       	add	r24, r24
    135c:	89 0f       	add	r24, r25
    135e:	80 93 f2 00 	sts	0x00F2, r24
    1362:	12 96       	adiw	r26, 0x02	; 2
    1364:	9c 91       	ld	r25, X
    1366:	12 97       	sbiw	r26, 0x02	; 2
    1368:	92 95       	swap	r25
    136a:	96 95       	lsr	r25
    136c:	97 70       	andi	r25, 0x07	; 7
    136e:	13 96       	adiw	r26, 0x03	; 3
    1370:	8c 91       	ld	r24, X
    1372:	13 97       	sbiw	r26, 0x03	; 3
    1374:	88 0f       	add	r24, r24
    1376:	88 0f       	add	r24, r24
    1378:	88 0f       	add	r24, r24
    137a:	89 0f       	add	r24, r25
    137c:	80 93 f1 00 	sts	0x00F1, r24
    1380:	12 96       	adiw	r26, 0x02	; 2
    1382:	8c 91       	ld	r24, X
    1384:	12 97       	sbiw	r26, 0x02	; 2
    1386:	88 0f       	add	r24, r24
    1388:	88 0f       	add	r24, r24
    138a:	88 0f       	add	r24, r24
    138c:	80 93 f0 00 	sts	0x00F0, r24
    1390:	ef ee       	ldi	r30, 0xEF	; 239
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	80 61       	ori	r24, 0x10	; 16
    1398:	80 83       	st	Z, r24
    139a:	1c c0       	rjmp	.+56     	; 0x13d4 <__stack+0xad5>
          else              { Can_set_std_id(cmd->id.std);}
    139c:	12 96       	adiw	r26, 0x02	; 2
    139e:	8c 91       	ld	r24, X
    13a0:	12 97       	sbiw	r26, 0x02	; 2
    13a2:	86 95       	lsr	r24
    13a4:	86 95       	lsr	r24
    13a6:	86 95       	lsr	r24
    13a8:	13 96       	adiw	r26, 0x03	; 3
    13aa:	9c 91       	ld	r25, X
    13ac:	13 97       	sbiw	r26, 0x03	; 3
    13ae:	e0 e2       	ldi	r30, 0x20	; 32
    13b0:	9e 9f       	mul	r25, r30
    13b2:	80 0d       	add	r24, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	80 93 f3 00 	sts	0x00F3, r24
    13ba:	12 96       	adiw	r26, 0x02	; 2
    13bc:	8c 91       	ld	r24, X
    13be:	12 97       	sbiw	r26, 0x02	; 2
    13c0:	82 95       	swap	r24
    13c2:	88 0f       	add	r24, r24
    13c4:	80 7e       	andi	r24, 0xE0	; 224
    13c6:	80 93 f2 00 	sts	0x00F2, r24
    13ca:	ef ee       	ldi	r30, 0xEF	; 239
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8f 7e       	andi	r24, 0xEF	; 239
    13d2:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    13d4:	16 96       	adiw	r26, 0x06	; 6
    13d6:	8c 91       	ld	r24, X
    13d8:	16 97       	sbiw	r26, 0x06	; 6
    13da:	88 23       	and	r24, r24
    13dc:	91 f0       	breq	.+36     	; 0x1402 <__stack+0xb03>
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	8a ef       	ldi	r24, 0xFA	; 250
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	17 96       	adiw	r26, 0x07	; 7
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	18 97       	sbiw	r26, 0x08	; 8
    13ec:	e2 0f       	add	r30, r18
    13ee:	f1 1d       	adc	r31, r1
    13f0:	30 81       	ld	r19, Z
    13f2:	fc 01       	movw	r30, r24
    13f4:	30 83       	st	Z, r19
    13f6:	2f 5f       	subi	r18, 0xFF	; 255
    13f8:	16 96       	adiw	r26, 0x06	; 6
    13fa:	3c 91       	ld	r19, X
    13fc:	16 97       	sbiw	r26, 0x06	; 6
    13fe:	23 17       	cp	r18, r19
    1400:	88 f3       	brcs	.-30     	; 0x13e4 <__stack+0xae5>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	9b 81       	ldd	r25, Y+3	; 0x03
    1408:	92 95       	swap	r25
    140a:	96 95       	lsr	r25
    140c:	97 70       	andi	r25, 0x07	; 7
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	88 0f       	add	r24, r24
    1412:	88 0f       	add	r24, r24
    1414:	88 0f       	add	r24, r24
    1416:	89 0f       	add	r24, r25
    1418:	80 93 f7 00 	sts	0x00F7, r24
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	92 95       	swap	r25
    1420:	96 95       	lsr	r25
    1422:	97 70       	andi	r25, 0x07	; 7
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	88 0f       	add	r24, r24
    1428:	88 0f       	add	r24, r24
    142a:	88 0f       	add	r24, r24
    142c:	89 0f       	add	r24, r25
    142e:	80 93 f6 00 	sts	0x00F6, r24
    1432:	99 81       	ldd	r25, Y+1	; 0x01
    1434:	92 95       	swap	r25
    1436:	96 95       	lsr	r25
    1438:	97 70       	andi	r25, 0x07	; 7
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	88 0f       	add	r24, r24
    143e:	88 0f       	add	r24, r24
    1440:	88 0f       	add	r24, r24
    1442:	89 0f       	add	r24, r25
    1444:	80 93 f5 00 	sts	0x00F5, r24
    1448:	29 81       	ldd	r18, Y+1	; 0x01
    144a:	22 0f       	add	r18, r18
    144c:	22 0f       	add	r18, r18
    144e:	22 0f       	add	r18, r18
    1450:	84 ef       	ldi	r24, 0xF4	; 244
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	fc 01       	movw	r30, r24
    1456:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1458:	ef ee       	ldi	r30, 0xEF	; 239
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	30 81       	ld	r19, Z
    145e:	16 96       	adiw	r26, 0x06	; 6
    1460:	2c 91       	ld	r18, X
    1462:	16 97       	sbiw	r26, 0x06	; 6
    1464:	23 2b       	or	r18, r19
    1466:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1468:	21 e0       	ldi	r18, 0x01	; 1
    146a:	1a 96       	adiw	r26, 0x0a	; 10
    146c:	2c 93       	st	X, r18
    146e:	dc 01       	movw	r26, r24
    1470:	2c 91       	ld	r18, X
    1472:	24 60       	ori	r18, 0x04	; 4
    1474:	2c 93       	st	X, r18
    1476:	a0 ef       	ldi	r26, 0xF0	; 240
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	2c 91       	ld	r18, X
    147c:	24 60       	ori	r18, 0x04	; 4
    147e:	2c 93       	st	X, r18
          Can_set_rplv();
    1480:	20 81       	ld	r18, Z
    1482:	20 62       	ori	r18, 0x20	; 32
    1484:	20 83       	st	Z, r18
          Can_set_idemsk();
    1486:	dc 01       	movw	r26, r24
    1488:	2c 91       	ld	r18, X
    148a:	21 60       	ori	r18, 0x01	; 1
    148c:	2c 93       	st	X, r18
          Can_config_rx();       
    148e:	80 81       	ld	r24, Z
    1490:	8f 73       	andi	r24, 0x3F	; 63
    1492:	80 83       	st	Z, r24
    1494:	80 81       	ld	r24, Z
    1496:	80 68       	ori	r24, 0x80	; 128
    1498:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    149a:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    149c:	08 c0       	rjmp	.+16     	; 0x14ae <__stack+0xbaf>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    149e:	19 96       	adiw	r26, 0x09	; 9
    14a0:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <__stack+0xbaf>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    14a6:	8f e1       	ldi	r24, 0x1F	; 31
    14a8:	19 96       	adiw	r26, 0x09	; 9
    14aa:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    14bc:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    14be:	88 23       	and	r24, r24
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <can_get_status+0xe>
    14c2:	d8 c0       	rjmp	.+432    	; 0x1674 <can_get_status+0x1be>
    14c4:	8f 31       	cpi	r24, 0x1F	; 31
    14c6:	09 f4       	brne	.+2      	; 0x14ca <can_get_status+0x14>
    14c8:	d7 c0       	rjmp	.+430    	; 0x1678 <can_get_status+0x1c2>
    14ca:	8f 3f       	cpi	r24, 0xFF	; 255
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <can_get_status+0x1a>
    14ce:	d6 c0       	rjmp	.+428    	; 0x167c <can_get_status+0x1c6>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    14d0:	62 95       	swap	r22
    14d2:	60 7f       	andi	r22, 0xF0	; 240
    14d4:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    14d8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <can_get_mob_status>
    
    switch (a_status)
    14dc:	80 32       	cpi	r24, 0x20	; 32
    14de:	61 f0       	breq	.+24     	; 0x14f8 <can_get_status+0x42>
    14e0:	20 f4       	brcc	.+8      	; 0x14ea <can_get_status+0x34>
    14e2:	88 23       	and	r24, r24
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <can_get_status+0x32>
    14e6:	cc c0       	rjmp	.+408    	; 0x1680 <can_get_status+0x1ca>
    14e8:	bb c0       	rjmp	.+374    	; 0x1660 <can_get_status+0x1aa>
    14ea:	80 34       	cpi	r24, 0x40	; 64
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <can_get_status+0x3a>
    14ee:	ad c0       	rjmp	.+346    	; 0x164a <can_get_status+0x194>
    14f0:	80 3a       	cpi	r24, 0xA0	; 160
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <can_get_status+0x40>
    14f4:	51 c0       	rjmp	.+162    	; 0x1598 <can_get_status+0xe2>
    14f6:	b4 c0       	rjmp	.+360    	; 0x1660 <can_get_status+0x1aa>
            break;
			 
        case MOB_RX_COMPLETED:
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
    14f8:	8d e1       	ldi	r24, 0x1D	; 29
    14fa:	0e 94 78 12 	call	0x24f0	; 0x24f0 <PIN_toggle>
			}
            cmd->ctrl.rtr = Can_get_rtr();
    14fe:	80 91 f0 00 	lds	r24, 0x00F0
    1502:	82 fb       	bst	r24, 2
    1504:	88 27       	eor	r24, r24
    1506:	80 f9       	bld	r24, 0
    1508:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    150a:	80 91 ef 00 	lds	r24, 0x00EF
    150e:	84 ff       	sbrs	r24, 4
    1510:	2d c0       	rjmp	.+90     	; 0x156c <can_get_status+0xb6>
            {
	            cmd->ctrl.ide = 1; // extended frame
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    1516:	e3 ef       	ldi	r30, 0xF3	; 243
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	86 95       	lsr	r24
    151e:	86 95       	lsr	r24
    1520:	86 95       	lsr	r24
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	a2 ef       	ldi	r26, 0xF2	; 242
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	8c 91       	ld	r24, X
    152a:	90 81       	ld	r25, Z
    152c:	86 95       	lsr	r24
    152e:	86 95       	lsr	r24
    1530:	86 95       	lsr	r24
    1532:	20 e2       	ldi	r18, 0x20	; 32
    1534:	92 9f       	mul	r25, r18
    1536:	80 0d       	add	r24, r0
    1538:	11 24       	eor	r1, r1
    153a:	8c 83       	std	Y+4, r24	; 0x04
    153c:	e1 ef       	ldi	r30, 0xF1	; 241
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	9c 91       	ld	r25, X
    1544:	86 95       	lsr	r24
    1546:	86 95       	lsr	r24
    1548:	86 95       	lsr	r24
    154a:	20 e2       	ldi	r18, 0x20	; 32
    154c:	92 9f       	mul	r25, r18
    154e:	80 0d       	add	r24, r0
    1550:	11 24       	eor	r1, r1
    1552:	8b 83       	std	Y+3, r24	; 0x03
    1554:	80 91 f0 00 	lds	r24, 0x00F0
    1558:	90 81       	ld	r25, Z
    155a:	86 95       	lsr	r24
    155c:	86 95       	lsr	r24
    155e:	86 95       	lsr	r24
    1560:	20 e2       	ldi	r18, 0x20	; 32
    1562:	92 9f       	mul	r25, r18
    1564:	80 0d       	add	r24, r0
    1566:	11 24       	eor	r1, r1
    1568:	8a 83       	std	Y+2, r24	; 0x02
    156a:	07 c0       	rjmp	.+14     	; 0x157a <can_get_status+0xc4>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    156c:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    156e:	e3 ef       	ldi	r30, 0xF3	; 243
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 91 f2 00 	lds	r24, 0x00F2
    1578:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    157a:	80 e2       	ldi	r24, 0x20	; 32
    157c:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    157e:	8f 81       	ldd	r24, Y+7	; 0x07
    1580:	98 85       	ldd	r25, Y+8	; 0x08
    1582:	0e 94 08 04 	call	0x810	; 0x810 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    1586:	ef ee       	ldi	r30, 0xEF	; 239
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 73       	andi	r24, 0x3F	; 63
    158e:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    1590:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    1594:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    1596:	75 c0       	rjmp	.+234    	; 0x1682 <can_get_status+0x1cc>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    1598:	80 91 f0 00 	lds	r24, 0x00F0
    159c:	82 fb       	bst	r24, 2
    159e:	88 27       	eor	r24, r24
    15a0:	80 f9       	bld	r24, 0
    15a2:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    15a4:	80 91 ef 00 	lds	r24, 0x00EF
    15a8:	84 ff       	sbrs	r24, 4
    15aa:	2d c0       	rjmp	.+90     	; 0x1606 <can_get_status+0x150>
            {
                cmd->ctrl.ide = 1; // extended frame
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    15b0:	e3 ef       	ldi	r30, 0xF3	; 243
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	86 95       	lsr	r24
    15b8:	86 95       	lsr	r24
    15ba:	86 95       	lsr	r24
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	a2 ef       	ldi	r26, 0xF2	; 242
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	8c 91       	ld	r24, X
    15c4:	90 81       	ld	r25, Z
    15c6:	86 95       	lsr	r24
    15c8:	86 95       	lsr	r24
    15ca:	86 95       	lsr	r24
    15cc:	20 e2       	ldi	r18, 0x20	; 32
    15ce:	92 9f       	mul	r25, r18
    15d0:	80 0d       	add	r24, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	8c 83       	std	Y+4, r24	; 0x04
    15d6:	e1 ef       	ldi	r30, 0xF1	; 241
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	9c 91       	ld	r25, X
    15de:	86 95       	lsr	r24
    15e0:	86 95       	lsr	r24
    15e2:	86 95       	lsr	r24
    15e4:	20 e2       	ldi	r18, 0x20	; 32
    15e6:	92 9f       	mul	r25, r18
    15e8:	80 0d       	add	r24, r0
    15ea:	11 24       	eor	r1, r1
    15ec:	8b 83       	std	Y+3, r24	; 0x03
    15ee:	80 91 f0 00 	lds	r24, 0x00F0
    15f2:	90 81       	ld	r25, Z
    15f4:	86 95       	lsr	r24
    15f6:	86 95       	lsr	r24
    15f8:	86 95       	lsr	r24
    15fa:	20 e2       	ldi	r18, 0x20	; 32
    15fc:	92 9f       	mul	r25, r18
    15fe:	80 0d       	add	r24, r0
    1600:	11 24       	eor	r1, r1
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	13 c0       	rjmp	.+38     	; 0x162c <can_get_status+0x176>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1606:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1608:	e3 ef       	ldi	r30, 0xF3	; 243
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	82 95       	swap	r24
    1610:	86 95       	lsr	r24
    1612:	87 70       	andi	r24, 0x07	; 7
    1614:	8b 83       	std	Y+3, r24	; 0x03
    1616:	80 91 f2 00 	lds	r24, 0x00F2
    161a:	90 81       	ld	r25, Z
    161c:	99 0f       	add	r25, r25
    161e:	99 0f       	add	r25, r25
    1620:	99 0f       	add	r25, r25
    1622:	82 95       	swap	r24
    1624:	86 95       	lsr	r24
    1626:	87 70       	andi	r24, 0x07	; 7
    1628:	89 0f       	add	r24, r25
    162a:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    162c:	80 ea       	ldi	r24, 0xA0	; 160
    162e:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1630:	8f 81       	ldd	r24, Y+7	; 0x07
    1632:	98 85       	ldd	r25, Y+8	; 0x08
    1634:	0e 94 08 04 	call	0x810	; 0x810 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1638:	ef ee       	ldi	r30, 0xEF	; 239
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	8f 73       	andi	r24, 0x3F	; 63
    1640:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    1642:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    1646:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1648:	1c c0       	rjmp	.+56     	; 0x1682 <can_get_status+0x1cc>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    164a:	80 e4       	ldi	r24, 0x40	; 64
    164c:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    164e:	ef ee       	ldi	r30, 0xEF	; 239
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8f 73       	andi	r24, 0x3F	; 63
    1656:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1658:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    165c:	80 e4       	ldi	r24, 0x40	; 64
            break;
    165e:	11 c0       	rjmp	.+34     	; 0x1682 <can_get_status+0x1cc>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1660:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    1662:	ef ee       	ldi	r30, 0xEF	; 239
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 73       	andi	r24, 0x3F	; 63
    166a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    166c:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1670:	82 e0       	ldi	r24, 0x02	; 2
            break;
    1672:	07 c0       	rjmp	.+14     	; 0x1682 <can_get_status+0x1cc>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <can_get_status+0x1cc>
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <can_get_status+0x1cc>
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <can_get_status+0x1cc>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1680:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <send_tm_transaction_response>:
}

// Helper
static void send_tm_transaction_response(uint8_t req_by, uint8_t code)
{			
	send_arr[7] = (SELF_ID << 4)|req_by;
    1688:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = TM_TRANSACTION_RESP;
    1692:	83 e1       	ldi	r24, 0x13	; 19
    1694:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1698:	80 91 26 02 	lds	r24, 0x0226
    169c:	80 93 d9 01 	sts	0x01D9, r24
	send_arr[3] = 0;
    16a0:	10 92 d8 01 	sts	0x01D8, r1
	send_arr[2] = 0;
    16a4:	10 92 d7 01 	sts	0x01D7, r1
	send_arr[1] = 0;
    16a8:	10 92 d6 01 	sts	0x01D6, r1
	send_arr[0] = code;
    16ac:	60 93 d5 01 	sts	0x01D5, r22
	can_send_message(&(send_arr[0]), CAN1_MB7);
    16b0:	61 e1       	ldi	r22, 0x11	; 17
    16b2:	85 ed       	ldi	r24, 0xD5	; 213
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
    16ba:	08 95       	ret

000016bc <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    16bc:	83 e0       	ldi	r24, 0x03	; 3
    16be:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = RESPONSE;
    16c8:	84 e0       	ldi	r24, 0x04	; 4
    16ca:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    16ce:	80 91 26 02 	lds	r24, 0x0226
    16d2:	80 93 d9 01 	sts	0x01D9, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    16d6:	61 e1       	ldi	r22, 0x11	; 17
    16d8:	85 ed       	ldi	r24, 0xD5	; 213
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
	send_now = 0;
    16e0:	10 92 33 02 	sts	0x0233, r1
    16e4:	08 95       	ret

000016e6 <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|HK_TASK_ID;
    16e6:	84 e0       	ldi	r24, 0x04	; 4
    16e8:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	80 93 db 01 	sts	0x01DB, r24
	send_arr[4] = CURRENT_MINUTE;
    16f2:	80 91 26 02 	lds	r24, 0x0226
    16f6:	80 93 d9 01 	sts	0x01D9, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    16fa:	6e e0       	ldi	r22, 0x0E	; 14
    16fc:	85 ed       	ldi	r24, 0xD5	; 213
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
	send_hk = 0;
    1704:	10 92 e0 02 	sts	0x02E0, r1
    1708:	08 95       	ret

0000170a <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	00 d0       	rcall	.+0      	; 0x1714 <send_sensor_data+0xa>
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[4];
    1718:	10 91 19 02 	lds	r17, 0x0219
	req_by = data_req_arr[7] >> 4;
    171c:	00 91 1c 02 	lds	r16, 0x021C
    1720:	02 95       	swap	r16
    1722:	0f 70       	andi	r16, 0x0F	; 15
	send_arr[3] = 0;
    1724:	10 92 d8 01 	sts	0x01D8, r1
	send_arr[2] = 0;
    1728:	10 92 d7 01 	sts	0x01D7, r1
	send_arr[1] = 0;
    172c:	10 92 d6 01 	sts	0x01D6, r1
	send_arr[0] = 0;
    1730:	10 92 d5 01 	sts	0x01D5, r1
	
	if(sensor_name == EPS_TEMP)
    1734:	1a 30       	cpi	r17, 0x0A	; 10
    1736:	71 f4       	brne	.+28     	; 0x1754 <send_sensor_data+0x4a>
	{
		spi_retrieve_temp(&high, &low);
    1738:	be 01       	movw	r22, r28
    173a:	6e 5f       	subi	r22, 0xFE	; 254
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	ce 01       	movw	r24, r28
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	0e 94 25 13 	call	0x264a	; 0x264a <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	80 93 d6 01 	sts	0x01D6, r24
		send_arr[0] = low;
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	80 93 d5 01 	sts	0x01D5, r24
    1752:	0e c0       	rjmp	.+28     	; 0x1770 <send_sensor_data+0x66>
	}
	
	if(sensor_name == PANELX_V)
    1754:	11 30       	cpi	r17, 0x01	; 1
    1756:	29 f4       	brne	.+10     	; 0x1762 <send_sensor_data+0x58>
	{
		send_arr[0] = pxv;
    1758:	80 91 12 03 	lds	r24, 0x0312
    175c:	80 93 d5 01 	sts	0x01D5, r24
    1760:	0e c0       	rjmp	.+28     	; 0x177e <send_sensor_data+0x74>
	}
	if(sensor_name == PANELX_I)
    1762:	12 30       	cpi	r17, 0x02	; 2
    1764:	29 f4       	brne	.+10     	; 0x1770 <send_sensor_data+0x66>
	{
		send_arr[0] = pxi;
    1766:	80 91 14 03 	lds	r24, 0x0314
    176a:	80 93 d5 01 	sts	0x01D5, r24
    176e:	0d c0       	rjmp	.+26     	; 0x178a <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_V)
    1770:	13 30       	cpi	r17, 0x03	; 3
    1772:	29 f4       	brne	.+10     	; 0x177e <send_sensor_data+0x74>
	{
		send_arr[0] = pyv;
    1774:	80 91 32 02 	lds	r24, 0x0232
    1778:	80 93 d5 01 	sts	0x01D5, r24
    177c:	06 c0       	rjmp	.+12     	; 0x178a <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_I)
    177e:	14 30       	cpi	r17, 0x04	; 4
    1780:	21 f4       	brne	.+8      	; 0x178a <send_sensor_data+0x80>
	{
		send_arr[0] = pyi;
    1782:	80 91 11 01 	lds	r24, 0x0111
    1786:	80 93 d5 01 	sts	0x01D5, r24
	//}
	//if(sensor_name == OBC_I)
	//{
	//}

	send_arr[7] = (SELF_ID << 4)|req_by;
    178a:	00 93 dc 01 	sts	0x01DC, r16
	send_arr[6] = MT_DATA;
    178e:	10 92 db 01 	sts	0x01DB, r1
	send_arr[5] = sensor_name;
    1792:	10 93 da 01 	sts	0x01DA, r17
	send_arr[4] = CURRENT_MINUTE;			
    1796:	80 91 26 02 	lds	r24, 0x0226
    179a:	80 93 d9 01 	sts	0x01D9, r24
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    179e:	6a e0       	ldi	r22, 0x0A	; 10
    17a0:	85 ed       	ldi	r24, 0xD5	; 213
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
	send_data = 0;
    17a8:	10 92 05 03 	sts	0x0305, r1
	
	return;
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    17ba:	83 e0       	ldi	r24, 0x03	; 3
    17bc:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_DATA;
    17c0:	10 92 db 01 	sts	0x01DB, r1
	send_arr[5] = COMS_PACKET;
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    17ca:	80 91 26 02 	lds	r24, 0x0226
    17ce:	80 93 d9 01 	sts	0x01D9, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    17d2:	80 91 ef 03 	lds	r24, 0x03EF
    17d6:	80 93 d5 01 	sts	0x01D5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    17da:	6a e0       	ldi	r22, 0x0A	; 10
    17dc:	85 ed       	ldi	r24, 0xD5	; 213
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
	msg_received = 0;
    17e4:	10 92 e2 03 	sts	0x03E2, r1
    17e8:	08 95       	ret

000017ea <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    17ea:	90 91 dc 03 	lds	r25, 0x03DC
	read_ptr = read_arr[0];
    17ee:	e0 91 d9 03 	lds	r30, 0x03D9
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    17f4:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    17f6:	20 91 e0 03 	lds	r18, 0x03E0
    17fa:	20 93 dc 01 	sts	0x01DC, r18
	send_arr[6] = MT_COM;
    17fe:	22 e0       	ldi	r18, 0x02	; 2
    1800:	20 93 db 01 	sts	0x01DB, r18
	send_arr[5] = ACK_READ;
    1804:	26 e0       	ldi	r18, 0x06	; 6
    1806:	20 93 da 01 	sts	0x01DA, r18
	send_arr[4] = CURRENT_MINUTE;
    180a:	20 91 26 02 	lds	r18, 0x0226
    180e:	20 93 d9 01 	sts	0x01D9, r18
	send_arr[3] = passkey;
    1812:	90 93 d8 01 	sts	0x01D8, r25
	send_arr[0] = read_val;
    1816:	80 93 d5 01 	sts	0x01D5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    181a:	61 e1       	ldi	r22, 0x11	; 17
    181c:	85 ed       	ldi	r24, 0xD5	; 213
    181e:	91 e0       	ldi	r25, 0x01	; 1
    1820:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
	read_response = 0;
    1824:	10 92 3b 02 	sts	0x023B, r1
    1828:	08 95       	ret

0000182a <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    182a:	80 91 0b 01 	lds	r24, 0x010B
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    182e:	20 91 08 01 	lds	r18, 0x0108
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    1832:	90 91 e0 03 	lds	r25, 0x03E0
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    1836:	e0 91 09 01 	lds	r30, 0x0109
    183a:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    183c:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    183e:	90 93 dc 01 	sts	0x01DC, r25
	send_arr[6] = MT_COM;
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	90 93 db 01 	sts	0x01DB, r25
	send_arr[5] = ACK_WRITE;
    1848:	98 e0       	ldi	r25, 0x08	; 8
    184a:	90 93 da 01 	sts	0x01DA, r25
	send_arr[4] = CURRENT_MINUTE;
    184e:	90 91 26 02 	lds	r25, 0x0226
    1852:	90 93 d9 01 	sts	0x01D9, r25
	send_arr[3] = passkey;
    1856:	80 93 d8 01 	sts	0x01D8, r24
	send_arr[0] = ret_val;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	80 93 d5 01 	sts	0x01D5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1860:	61 e1       	ldi	r22, 0x11	; 17
    1862:	85 ed       	ldi	r24, 0xD5	; 213
    1864:	91 e0       	ldi	r25, 0x01	; 1
    1866:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
	write_response = 0;
    186a:	10 92 fa 01 	sts	0x01FA, r1
    186e:	08 95       	ret

00001870 <set_sensor_high>:

void set_sensor_high(void)
{
	uint8_t sensor_name, req_by;
	uint16_t high = 0;
	sensor_name = sensh_arr[3];
    1870:	20 91 fe 01 	lds	r18, 0x01FE
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    1874:	2a 30       	cpi	r18, 0x0A	; 10
    1876:	69 f4       	brne	.+26     	; 0x1892 <set_sensor_high+0x22>
	{
		epstemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1878:	80 91 fc 01 	lds	r24, 0x01FC
    187c:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_high |= (high << 8);
    187e:	98 2f       	mov	r25, r24
    1880:	88 27       	eor	r24, r24
	sensor_name = sensh_arr[3];
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_high = sensh_arr[0];
    1882:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		epstemp_high |= (high << 8);
    1886:	83 2b       	or	r24, r19
    1888:	90 93 de 01 	sts	0x01DE, r25
    188c:	80 93 dd 01 	sts	0x01DD, r24
    1890:	1e c0       	rjmp	.+60     	; 0x18ce <set_sensor_high+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    1892:	21 30       	cpi	r18, 0x01	; 1
    1894:	69 f4       	brne	.+26     	; 0x18b0 <set_sensor_high+0x40>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1896:	80 91 fc 01 	lds	r24, 0x01FC
    189a:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);		
    189c:	98 2f       	mov	r25, r24
    189e:	88 27       	eor	r24, r24
		epstemp_high |= (high << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_high = sensh_arr[0];
    18a0:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);		
    18a4:	83 2b       	or	r24, r19
    18a6:	90 93 29 02 	sts	0x0229, r25
    18aa:	80 93 28 02 	sts	0x0228, r24
    18ae:	1e c0       	rjmp	.+60     	; 0x18ec <set_sensor_high+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	69 f4       	brne	.+26     	; 0x18ce <set_sensor_high+0x5e>
	{
		pxi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18b4:	80 91 fc 01 	lds	r24, 0x01FC
    18b8:	90 e0       	ldi	r25, 0x00	; 0
		pxi_high |= (high << 8);
    18ba:	98 2f       	mov	r25, r24
    18bc:	88 27       	eor	r24, r24
		pxv_high |= (high << 8);		
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_high = sensh_arr[0];
    18be:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
    18c2:	83 2b       	or	r24, r19
    18c4:	90 93 3e 03 	sts	0x033E, r25
    18c8:	80 93 3d 03 	sts	0x033D, r24
    18cc:	1e c0       	rjmp	.+60     	; 0x190a <set_sensor_high+0x9a>
	}
	if(sensor_name == PANELY_V)
    18ce:	23 30       	cpi	r18, 0x03	; 3
    18d0:	69 f4       	brne	.+26     	; 0x18ec <set_sensor_high+0x7c>
	{
		pyv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18d2:	80 91 fc 01 	lds	r24, 0x01FC
    18d6:	90 e0       	ldi	r25, 0x00	; 0
		pyv_high |= (high << 8);
    18d8:	98 2f       	mov	r25, r24
    18da:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_high = sensh_arr[0];
    18dc:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
    18e0:	83 2b       	or	r24, r19
    18e2:	90 93 bd 01 	sts	0x01BD, r25
    18e6:	80 93 bc 01 	sts	0x01BC, r24
    18ea:	1e c0       	rjmp	.+60     	; 0x1928 <set_sensor_high+0xb8>
	}
	if(sensor_name == PANELY_I)
    18ec:	24 30       	cpi	r18, 0x04	; 4
    18ee:	69 f4       	brne	.+26     	; 0x190a <set_sensor_high+0x9a>
	{
		pyi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18f0:	80 91 fc 01 	lds	r24, 0x01FC
    18f4:	90 e0       	ldi	r25, 0x00	; 0
		pyi_high |= (high << 8);
    18f6:	98 2f       	mov	r25, r24
    18f8:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_high = sensh_arr[0];
    18fa:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
    18fe:	83 2b       	or	r24, r19
    1900:	90 93 d8 03 	sts	0x03D8, r25
    1904:	80 93 d7 03 	sts	0x03D7, r24
    1908:	1e c0       	rjmp	.+60     	; 0x1946 <set_sensor_high+0xd6>
	}
	if(sensor_name == BATTM_V)
    190a:	25 30       	cpi	r18, 0x05	; 5
    190c:	69 f4       	brne	.+26     	; 0x1928 <set_sensor_high+0xb8>
	{
		battmv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    190e:	80 91 fc 01 	lds	r24, 0x01FC
    1912:	90 e0       	ldi	r25, 0x00	; 0
		battmv_high |= (high << 8);
    1914:	98 2f       	mov	r25, r24
    1916:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_high = sensh_arr[0];
    1918:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
    191c:	83 2b       	or	r24, r19
    191e:	90 93 25 02 	sts	0x0225, r25
    1922:	80 93 24 02 	sts	0x0224, r24
    1926:	1e c0       	rjmp	.+60     	; 0x1964 <set_sensor_high+0xf4>
	}
	if(sensor_name == BATT_V)
    1928:	26 30       	cpi	r18, 0x06	; 6
    192a:	69 f4       	brne	.+26     	; 0x1946 <set_sensor_high+0xd6>
	{
		battv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    192c:	80 91 fc 01 	lds	r24, 0x01FC
    1930:	90 e0       	ldi	r25, 0x00	; 0
		battv_high |= (high << 8);
    1932:	98 2f       	mov	r25, r24
    1934:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_high = sensh_arr[0];
    1936:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
    193a:	83 2b       	or	r24, r19
    193c:	90 93 16 03 	sts	0x0316, r25
    1940:	80 93 15 03 	sts	0x0315, r24
    1944:	1e c0       	rjmp	.+60     	; 0x1982 <set_sensor_high+0x112>
	}
	if(sensor_name == BATTIN_I)
    1946:	27 30       	cpi	r18, 0x07	; 7
    1948:	69 f4       	brne	.+26     	; 0x1964 <set_sensor_high+0xf4>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    194a:	80 91 fc 01 	lds	r24, 0x01FC
    194e:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);
    1950:	98 2f       	mov	r25, r24
    1952:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
	}
	if(sensor_name == BATTIN_I)
	{
		pxv_high = sensh_arr[0];
    1954:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
    1958:	83 2b       	or	r24, r19
    195a:	90 93 29 02 	sts	0x0229, r25
    195e:	80 93 28 02 	sts	0x0228, r24
    1962:	1e c0       	rjmp	.+60     	; 0x19a0 <set_sensor_high+0x130>
	}
	if(sensor_name == BATTOUT_I)
    1964:	28 30       	cpi	r18, 0x08	; 8
    1966:	69 f4       	brne	.+26     	; 0x1982 <set_sensor_high+0x112>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1968:	80 91 fc 01 	lds	r24, 0x01FC
    196c:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);
    196e:	98 2f       	mov	r25, r24
    1970:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
	}
	if(sensor_name == BATTOUT_I)
	{
		pxv_high = sensh_arr[0];
    1972:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
    1976:	83 2b       	or	r24, r19
    1978:	90 93 29 02 	sts	0x0229, r25
    197c:	80 93 28 02 	sts	0x0228, r24
    1980:	1e c0       	rjmp	.+60     	; 0x19be <set_sensor_high+0x14e>
	}
	if(sensor_name == COMS_V)
    1982:	2b 30       	cpi	r18, 0x0B	; 11
    1984:	69 f4       	brne	.+26     	; 0x19a0 <set_sensor_high+0x130>
	{
		comsv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1986:	80 91 fc 01 	lds	r24, 0x01FC
    198a:	90 e0       	ldi	r25, 0x00	; 0
		comsv_high |= (high << 8);
    198c:	98 2f       	mov	r25, r24
    198e:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_high = sensh_arr[0];
    1990:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
    1994:	83 2b       	or	r24, r19
    1996:	90 93 14 02 	sts	0x0214, r25
    199a:	80 93 13 02 	sts	0x0213, r24
    199e:	1e c0       	rjmp	.+60     	; 0x19dc <set_sensor_high+0x16c>
	}
	if(sensor_name == COMS_I)
    19a0:	2c 30       	cpi	r18, 0x0C	; 12
    19a2:	69 f4       	brne	.+26     	; 0x19be <set_sensor_high+0x14e>
	{
		comsi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19a4:	80 91 fc 01 	lds	r24, 0x01FC
    19a8:	90 e0       	ldi	r25, 0x00	; 0
		comsi_high |= (high << 8);
    19aa:	98 2f       	mov	r25, r24
    19ac:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_high = sensh_arr[0];
    19ae:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
    19b2:	83 2b       	or	r24, r19
    19b4:	90 93 ea 01 	sts	0x01EA, r25
    19b8:	80 93 e9 01 	sts	0x01E9, r24
    19bc:	1e c0       	rjmp	.+60     	; 0x19fa <set_sensor_high+0x18a>
	}
	if(sensor_name == PAY_V)
    19be:	2d 30       	cpi	r18, 0x0D	; 13
    19c0:	69 f4       	brne	.+26     	; 0x19dc <set_sensor_high+0x16c>
	{
		payv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19c2:	80 91 fc 01 	lds	r24, 0x01FC
    19c6:	90 e0       	ldi	r25, 0x00	; 0
		payv_high |= (high << 8);
    19c8:	98 2f       	mov	r25, r24
    19ca:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_high = sensh_arr[0];
    19cc:	30 91 fb 01 	lds	r19, 0x01FB
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
    19d0:	83 2b       	or	r24, r19
    19d2:	90 93 b3 01 	sts	0x01B3, r25
    19d6:	80 93 b2 01 	sts	0x01B2, r24
    19da:	1e c0       	rjmp	.+60     	; 0x1a18 <set_sensor_high+0x1a8>
	}
	if(sensor_name == PAY_I)
    19dc:	2e 30       	cpi	r18, 0x0E	; 14
    19de:	69 f4       	brne	.+26     	; 0x19fa <set_sensor_high+0x18a>
	{
		payi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19e0:	80 91 fc 01 	lds	r24, 0x01FC
    19e4:	90 e0       	ldi	r25, 0x00	; 0
		payi_high |= (high << 8);
    19e6:	98 2f       	mov	r25, r24
    19e8:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_high = sensh_arr[0];
    19ea:	20 91 fb 01 	lds	r18, 0x01FB
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
    19ee:	82 2b       	or	r24, r18
    19f0:	90 93 28 03 	sts	0x0328, r25
    19f4:	80 93 27 03 	sts	0x0327, r24
    19f8:	1d c0       	rjmp	.+58     	; 0x1a34 <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_V)
    19fa:	2f 30       	cpi	r18, 0x0F	; 15
    19fc:	69 f4       	brne	.+26     	; 0x1a18 <set_sensor_high+0x1a8>
	{
		obcv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    19fe:	80 91 fc 01 	lds	r24, 0x01FC
    1a02:	90 e0       	ldi	r25, 0x00	; 0
		obcv_high |= (high << 8);
    1a04:	98 2f       	mov	r25, r24
    1a06:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_high = sensh_arr[0];
    1a08:	20 91 fb 01 	lds	r18, 0x01FB
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
    1a0c:	82 2b       	or	r24, r18
    1a0e:	90 93 f9 01 	sts	0x01F9, r25
    1a12:	80 93 f8 01 	sts	0x01F8, r24
    1a16:	0e c0       	rjmp	.+28     	; 0x1a34 <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_I)
    1a18:	20 31       	cpi	r18, 0x10	; 16
    1a1a:	61 f4       	brne	.+24     	; 0x1a34 <set_sensor_high+0x1c4>
	{
		obci_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1a1c:	80 91 fc 01 	lds	r24, 0x01FC
    1a20:	90 e0       	ldi	r25, 0x00	; 0
		obci_high |= (high << 8);
    1a22:	98 2f       	mov	r25, r24
    1a24:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_high = sensh_arr[0];
    1a26:	20 91 fb 01 	lds	r18, 0x01FB
		high = (uint16_t)sensh_arr[1];
		obci_high |= (high << 8);
    1a2a:	82 2b       	or	r24, r18
    1a2c:	90 93 e2 02 	sts	0x02E2, r25
    1a30:	80 93 e1 02 	sts	0x02E1, r24
	}
	
	set_sens_h = 0;
    1a34:	10 92 02 03 	sts	0x0302, r1
    1a38:	08 95       	ret

00001a3a <set_sensor_low>:

void set_sensor_low(void)
{
	uint8_t sensor_name, req_by;
	uint16_t low = 0;
	sensor_name = sensl_arr[3];
    1a3a:	20 91 37 03 	lds	r18, 0x0337
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    1a3e:	2a 30       	cpi	r18, 0x0A	; 10
    1a40:	69 f4       	brne	.+26     	; 0x1a5c <set_sensor_low+0x22>
	{
		epstemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a42:	80 91 35 03 	lds	r24, 0x0335
    1a46:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_low |= (low << 8);
    1a48:	98 2f       	mov	r25, r24
    1a4a:	88 27       	eor	r24, r24
	sensor_name = sensl_arr[3];
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_low = sensl_arr[0];
    1a4c:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		epstemp_low |= (low << 8);
    1a50:	83 2b       	or	r24, r19
    1a52:	90 93 e0 01 	sts	0x01E0, r25
    1a56:	80 93 df 01 	sts	0x01DF, r24
    1a5a:	1e c0       	rjmp	.+60     	; 0x1a98 <set_sensor_low+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    1a5c:	21 30       	cpi	r18, 0x01	; 1
    1a5e:	69 f4       	brne	.+26     	; 0x1a7a <set_sensor_low+0x40>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a60:	80 91 35 03 	lds	r24, 0x0335
    1a64:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1a66:	98 2f       	mov	r25, r24
    1a68:	88 27       	eor	r24, r24
		epstemp_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_low = sensl_arr[0];
    1a6a:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1a6e:	83 2b       	or	r24, r19
    1a70:	90 93 e4 02 	sts	0x02E4, r25
    1a74:	80 93 e3 02 	sts	0x02E3, r24
    1a78:	1e c0       	rjmp	.+60     	; 0x1ab6 <set_sensor_low+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    1a7a:	22 30       	cpi	r18, 0x02	; 2
    1a7c:	69 f4       	brne	.+26     	; 0x1a98 <set_sensor_low+0x5e>
	{
		pxi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a7e:	80 91 35 03 	lds	r24, 0x0335
    1a82:	90 e0       	ldi	r25, 0x00	; 0
		pxi_low |= (low << 8);
    1a84:	98 2f       	mov	r25, r24
    1a86:	88 27       	eor	r24, r24
		pxv_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_low = sensl_arr[0];
    1a88:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
    1a8c:	83 2b       	or	r24, r19
    1a8e:	90 93 f7 01 	sts	0x01F7, r25
    1a92:	80 93 f6 01 	sts	0x01F6, r24
    1a96:	1e c0       	rjmp	.+60     	; 0x1ad4 <set_sensor_low+0x9a>
	}
	if(sensor_name == PANELY_V)
    1a98:	23 30       	cpi	r18, 0x03	; 3
    1a9a:	69 f4       	brne	.+26     	; 0x1ab6 <set_sensor_low+0x7c>
	{
		pyv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a9c:	80 91 35 03 	lds	r24, 0x0335
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
		pyv_low |= (low << 8);
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_low = sensl_arr[0];
    1aa6:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
    1aaa:	83 2b       	or	r24, r19
    1aac:	90 93 e6 02 	sts	0x02E6, r25
    1ab0:	80 93 e5 02 	sts	0x02E5, r24
    1ab4:	1e c0       	rjmp	.+60     	; 0x1af2 <set_sensor_low+0xb8>
	}
	if(sensor_name == PANELY_I)
    1ab6:	24 30       	cpi	r18, 0x04	; 4
    1ab8:	69 f4       	brne	.+26     	; 0x1ad4 <set_sensor_low+0x9a>
	{
		pyi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1aba:	80 91 35 03 	lds	r24, 0x0335
    1abe:	90 e0       	ldi	r25, 0x00	; 0
		pyi_low |= (low << 8);
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_low = sensl_arr[0];
    1ac4:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
    1ac8:	83 2b       	or	r24, r19
    1aca:	90 93 f9 02 	sts	0x02F9, r25
    1ace:	80 93 f8 02 	sts	0x02F8, r24
    1ad2:	1e c0       	rjmp	.+60     	; 0x1b10 <set_sensor_low+0xd6>
	}
	if(sensor_name == BATTM_V)
    1ad4:	25 30       	cpi	r18, 0x05	; 5
    1ad6:	69 f4       	brne	.+26     	; 0x1af2 <set_sensor_low+0xb8>
	{
		battmv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1ad8:	80 91 35 03 	lds	r24, 0x0335
    1adc:	90 e0       	ldi	r25, 0x00	; 0
		battmv_low |= (low << 8);
    1ade:	98 2f       	mov	r25, r24
    1ae0:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_low = sensl_arr[0];
    1ae2:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
    1ae6:	83 2b       	or	r24, r19
    1ae8:	90 93 21 02 	sts	0x0221, r25
    1aec:	80 93 20 02 	sts	0x0220, r24
    1af0:	1e c0       	rjmp	.+60     	; 0x1b2e <set_sensor_low+0xf4>
	}
	if(sensor_name == BATT_V)
    1af2:	26 30       	cpi	r18, 0x06	; 6
    1af4:	69 f4       	brne	.+26     	; 0x1b10 <set_sensor_low+0xd6>
	{
		battv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1af6:	80 91 35 03 	lds	r24, 0x0335
    1afa:	90 e0       	ldi	r25, 0x00	; 0
		battv_low |= (low << 8);
    1afc:	98 2f       	mov	r25, r24
    1afe:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_low = sensl_arr[0];
    1b00:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
    1b04:	83 2b       	or	r24, r19
    1b06:	90 93 15 01 	sts	0x0115, r25
    1b0a:	80 93 14 01 	sts	0x0114, r24
    1b0e:	1e c0       	rjmp	.+60     	; 0x1b4c <set_sensor_low+0x112>
	}
	if(sensor_name == BATTIN_I)
    1b10:	27 30       	cpi	r18, 0x07	; 7
    1b12:	69 f4       	brne	.+26     	; 0x1b2e <set_sensor_low+0xf4>
	{
		battin_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b14:	80 91 35 03 	lds	r24, 0x0335
    1b18:	90 e0       	ldi	r25, 0x00	; 0
		battin_low |= (low << 8);
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
	}
	if(sensor_name == BATTIN_I)
	{
		battin_low = sensl_arr[0];
    1b1e:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		battin_low |= (low << 8);
    1b22:	83 2b       	or	r24, r19
    1b24:	90 93 de 02 	sts	0x02DE, r25
    1b28:	80 93 dd 02 	sts	0x02DD, r24
    1b2c:	1e c0       	rjmp	.+60     	; 0x1b6a <set_sensor_low+0x130>
	}
	if(sensor_name == BATTOUT_I)
    1b2e:	28 30       	cpi	r18, 0x08	; 8
    1b30:	69 f4       	brne	.+26     	; 0x1b4c <set_sensor_low+0x112>
	{
		battout_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b32:	80 91 35 03 	lds	r24, 0x0335
    1b36:	90 e0       	ldi	r25, 0x00	; 0
		battout_low |= (low << 8);
    1b38:	98 2f       	mov	r25, r24
    1b3a:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battin_low |= (low << 8);
	}
	if(sensor_name == BATTOUT_I)
	{
		battout_low = sensl_arr[0];
    1b3c:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		battout_low |= (low << 8);
    1b40:	83 2b       	or	r24, r19
    1b42:	90 93 18 03 	sts	0x0318, r25
    1b46:	80 93 17 03 	sts	0x0317, r24
    1b4a:	1e c0       	rjmp	.+60     	; 0x1b88 <set_sensor_low+0x14e>
	}
	if(sensor_name == COMS_V)
    1b4c:	2b 30       	cpi	r18, 0x0B	; 11
    1b4e:	69 f4       	brne	.+26     	; 0x1b6a <set_sensor_low+0x130>
	{
		comsv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b50:	80 91 35 03 	lds	r24, 0x0335
    1b54:	90 e0       	ldi	r25, 0x00	; 0
		comsv_low |= (low << 8);
    1b56:	98 2f       	mov	r25, r24
    1b58:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battout_low |= (low << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_low = sensl_arr[0];
    1b5a:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
    1b5e:	83 2b       	or	r24, r19
    1b60:	90 93 1f 02 	sts	0x021F, r25
    1b64:	80 93 1e 02 	sts	0x021E, r24
    1b68:	1e c0       	rjmp	.+60     	; 0x1ba6 <set_sensor_low+0x16c>
	}
	if(sensor_name == COMS_I)
    1b6a:	2c 30       	cpi	r18, 0x0C	; 12
    1b6c:	69 f4       	brne	.+26     	; 0x1b88 <set_sensor_low+0x14e>
	{
		comsi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b6e:	80 91 35 03 	lds	r24, 0x0335
    1b72:	90 e0       	ldi	r25, 0x00	; 0
		comsi_low |= (low << 8);
    1b74:	98 2f       	mov	r25, r24
    1b76:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_low = sensl_arr[0];
    1b78:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
    1b7c:	83 2b       	or	r24, r19
    1b7e:	90 93 25 03 	sts	0x0325, r25
    1b82:	80 93 24 03 	sts	0x0324, r24
    1b86:	1e c0       	rjmp	.+60     	; 0x1bc4 <set_sensor_low+0x18a>
	}
	if(sensor_name == PAY_V)
    1b88:	2d 30       	cpi	r18, 0x0D	; 13
    1b8a:	69 f4       	brne	.+26     	; 0x1ba6 <set_sensor_low+0x16c>
	{
		payv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b8c:	80 91 35 03 	lds	r24, 0x0335
    1b90:	90 e0       	ldi	r25, 0x00	; 0
		payv_low |= (low << 8);
    1b92:	98 2f       	mov	r25, r24
    1b94:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_low = sensl_arr[0];
    1b96:	30 91 34 03 	lds	r19, 0x0334
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
    1b9a:	83 2b       	or	r24, r19
    1b9c:	90 93 17 01 	sts	0x0117, r25
    1ba0:	80 93 16 01 	sts	0x0116, r24
    1ba4:	1e c0       	rjmp	.+60     	; 0x1be2 <set_sensor_low+0x1a8>
	}
	if(sensor_name == PAY_I)
    1ba6:	2e 30       	cpi	r18, 0x0E	; 14
    1ba8:	69 f4       	brne	.+26     	; 0x1bc4 <set_sensor_low+0x18a>
	{
		payi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1baa:	80 91 35 03 	lds	r24, 0x0335
    1bae:	90 e0       	ldi	r25, 0x00	; 0
		payi_low |= (low << 8);
    1bb0:	98 2f       	mov	r25, r24
    1bb2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_low = sensl_arr[0];
    1bb4:	20 91 34 03 	lds	r18, 0x0334
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
    1bb8:	82 2b       	or	r24, r18
    1bba:	90 93 39 02 	sts	0x0239, r25
    1bbe:	80 93 38 02 	sts	0x0238, r24
    1bc2:	1d c0       	rjmp	.+58     	; 0x1bfe <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_V)
    1bc4:	2f 30       	cpi	r18, 0x0F	; 15
    1bc6:	69 f4       	brne	.+26     	; 0x1be2 <set_sensor_low+0x1a8>
	{
		obcv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1bc8:	80 91 35 03 	lds	r24, 0x0335
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
		obcv_low |= (low << 8);
    1bce:	98 2f       	mov	r25, r24
    1bd0:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_low = sensl_arr[0];
    1bd2:	20 91 34 03 	lds	r18, 0x0334
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
    1bd6:	82 2b       	or	r24, r18
    1bd8:	90 93 33 03 	sts	0x0333, r25
    1bdc:	80 93 32 03 	sts	0x0332, r24
    1be0:	0e c0       	rjmp	.+28     	; 0x1bfe <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_I)
    1be2:	20 31       	cpi	r18, 0x10	; 16
    1be4:	61 f4       	brne	.+24     	; 0x1bfe <set_sensor_low+0x1c4>
	{
		obci_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1be6:	80 91 35 03 	lds	r24, 0x0335
    1bea:	90 e0       	ldi	r25, 0x00	; 0
		obci_low |= (low << 8);
    1bec:	98 2f       	mov	r25, r24
    1bee:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_low = sensl_arr[0];
    1bf0:	20 91 34 03 	lds	r18, 0x0334
		low = (uint16_t)sensl_arr[1];
		obci_low |= (low << 8);
    1bf4:	82 2b       	or	r24, r18
    1bf6:	90 93 22 03 	sts	0x0322, r25
    1bfa:	80 93 21 03 	sts	0x0321, r24
	}
	
	set_sens_l = 0;
    1bfe:	10 92 07 03 	sts	0x0307, r1
    1c02:	08 95       	ret

00001c04 <set_var>:

void set_var(void)
{
	uint8_t var_name, incom_val;
	var_name = setv_arr[3];
	incom_val  =setv_arr[0];
    1c04:	20 91 ee 01 	lds	r18, 0x01EE
	
	switch(var_name)
    1c08:	80 91 f1 01 	lds	r24, 0x01F1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	fc 01       	movw	r30, r24
    1c10:	eb 5e       	subi	r30, 0xEB	; 235
    1c12:	f1 09       	sbc	r31, r1
    1c14:	e5 31       	cpi	r30, 0x15	; 21
    1c16:	f1 05       	cpc	r31, r1
    1c18:	90 f4       	brcc	.+36     	; 0x1c3e <set_var+0x3a>
    1c1a:	e7 59       	subi	r30, 0x97	; 151
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__tablejump2__>
	{
		case MPPTX:
			mpptx = incom_val;
    1c22:	20 93 34 02 	sts	0x0234, r18
		case MPPTY:
			mppty = incom_val;
    1c26:	20 93 23 02 	sts	0x0223, r18
		case BALANCE_H:
			balance_h = incom_val;
    1c2a:	20 93 ec 01 	sts	0x01EC, r18
		case BALANCE_L:
			balance_l = incom_val;
    1c2e:	20 93 03 02 	sts	0x0203, r18
		case SSM_CTT:
			ssm_consec_trans_timeout = incom_val;
    1c32:	20 93 3a 02 	sts	0x023A, r18
		case SSM_OGT:
			ssm_ok_go_timeout = incom_val;
    1c36:	20 93 d3 01 	sts	0x01D3, r18
		case COMS_FDIR_SIGNAL:
			if(SELF_ID == 0)
				ssm_fdir_signal = incom_val;
    1c3a:	20 93 ca 01 	sts	0x01CA, r18
				ssm_fdir_signal = incom_val;		
		case PAY_FDIR_SIGNAL:
			if(SELF_ID == 2)
				ssm_fdir_signal = incom_val;
		default:
			set_varf = 0;
    1c3e:	10 92 06 03 	sts	0x0306, r1
    1c42:	08 95       	ret

00001c44 <receive_tm_msg>:
}

void receive_tm_msg(void)
{
	uint8_t req_by, obc_seq_count;
	req_by = new_tm_msg[7] >> 4;
    1c44:	80 91 11 03 	lds	r24, 0x0311
    1c48:	82 95       	swap	r24
    1c4a:	8f 70       	andi	r24, 0x0F	; 15
	obc_seq_count = new_tm_msg[4];
    1c4c:	90 91 0e 03 	lds	r25, 0x030E

	if(obc_seq_count > (tm_sequence_count + 1))
    1c50:	29 2f       	mov	r18, r25
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	60 91 06 01 	lds	r22, 0x0106
    1c58:	46 2f       	mov	r20, r22
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	4f 5f       	subi	r20, 0xFF	; 255
    1c5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c60:	42 17       	cp	r20, r18
    1c62:	53 07       	cpc	r21, r19
    1c64:	94 f4       	brge	.+36     	; 0x1c8a <receive_tm_msg+0x46>
	{
		send_tm_transaction_response(req_by, 0xFF);		// Let the OBC know that the transaction failed.
    1c66:	6f ef       	ldi	r22, 0xFF	; 255
    1c68:	0e 94 44 0b 	call	0x1688	; 0x1688 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1c6c:	10 92 06 01 	sts	0x0106, r1
		new_tm_msgf = 0;
    1c70:	10 92 36 02 	sts	0x0236, r1
		receiving_tmf = 0;
    1c74:	10 92 29 03 	sts	0x0329, r1
    1c78:	ec e3       	ldi	r30, 0x3C	; 60
    1c7a:	f2 e0       	ldi	r31, 0x02	; 2
    1c7c:	8b ec       	ldi	r24, 0xCB	; 203
    1c7e:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1c80:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1c82:	e8 17       	cp	r30, r24
    1c84:	f9 07       	cpc	r31, r25
    1c86:	e1 f7       	brne	.-8      	; 0x1c80 <receive_tm_msg+0x3c>
    1c88:	08 95       	ret
		new_tm_msgf = 0;
		receiving_tmf = 0;
		clear_current_tm();
		return;
	}
	if(current_tm_fullf)
    1c8a:	70 91 04 03 	lds	r23, 0x0304
    1c8e:	77 23       	and	r23, r23
    1c90:	51 f0       	breq	.+20     	; 0x1ca6 <receive_tm_msg+0x62>
	{
		send_tm_transaction_response(req_by, 0xFF);
    1c92:	6f ef       	ldi	r22, 0xFF	; 255
    1c94:	0e 94 44 0b 	call	0x1688	; 0x1688 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1c98:	10 92 06 01 	sts	0x0106, r1
		new_tm_msgf = 0;
    1c9c:	10 92 36 02 	sts	0x0236, r1
		receiving_tmf = 0;
    1ca0:	10 92 29 03 	sts	0x0329, r1
		return;
    1ca4:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
    1ca6:	91 11       	cpse	r25, r1
    1ca8:	03 c0       	rjmp	.+6      	; 0x1cb0 <receive_tm_msg+0x6c>
    1caa:	66 23       	and	r22, r22
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <receive_tm_msg+0x6c>
    1cae:	47 c0       	rjmp	.+142    	; 0x1d3e <receive_tm_msg+0xfa>
    1cb0:	24 17       	cp	r18, r20
    1cb2:	35 07       	cpc	r19, r21
    1cb4:	91 f5       	brne	.+100    	; 0x1d1a <receive_tm_msg+0xd6>
	{
		tm_sequence_count = obc_seq_count;
    1cb6:	90 93 06 01 	sts	0x0106, r25
		receiving_tmf = 1;
    1cba:	41 e0       	ldi	r20, 0x01	; 1
    1cbc:	40 93 29 03 	sts	0x0329, r20
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1cc0:	f9 01       	movw	r30, r18
    1cc2:	ee 0f       	add	r30, r30
    1cc4:	ff 1f       	adc	r31, r31
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	ff 1f       	adc	r31, r31
    1cca:	e4 5c       	subi	r30, 0xC4	; 196
    1ccc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cce:	20 91 0a 03 	lds	r18, 0x030A
    1cd2:	20 83       	st	Z, r18
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1cd4:	20 91 0b 03 	lds	r18, 0x030B
    1cd8:	21 83       	std	Z+1, r18	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1cda:	20 91 0c 03 	lds	r18, 0x030C
    1cde:	22 83       	std	Z+2, r18	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1ce0:	20 91 0d 03 	lds	r18, 0x030D
    1ce4:	23 83       	std	Z+3, r18	; 0x03
		if(obc_seq_count == 35)
    1ce6:	93 32       	cpi	r25, 0x23	; 35
    1ce8:	a9 f4       	brne	.+42     	; 0x1d14 <receive_tm_msg+0xd0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
    1cea:	10 92 06 01 	sts	0x0106, r1
			receiving_tmf = 0;
    1cee:	10 92 29 03 	sts	0x0329, r1
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	90 93 04 03 	sts	0x0304, r25
    1cf8:	ec e3       	ldi	r30, 0x3C	; 60
    1cfa:	f2 e0       	ldi	r31, 0x02	; 2
    1cfc:	aa e1       	ldi	r26, 0x1A	; 26
    1cfe:	b1 e0       	ldi	r27, 0x01	; 1
    1d00:	2b ec       	ldi	r18, 0xCB	; 203
    1d02:	32 e0       	ldi	r19, 0x02	; 2
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
	{
		tm_to_downlink[i] = current_tm[i];
    1d04:	91 91       	ld	r25, Z+
    1d06:	9d 93       	st	X+, r25

// This function is necessary so that we can simply trash current_tm if a new transaction fails.
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
    1d08:	e2 17       	cp	r30, r18
    1d0a:	f3 07       	cpc	r31, r19
    1d0c:	d9 f7       	brne	.-10     	; 0x1d04 <receive_tm_msg+0xc0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
			receiving_tmf = 0;
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
			store_current_tm();										// Put current_tm[] into tm_to_downlink[]
			send_tm_transaction_response(req_by, obc_seq_count);	// Let the OBC know that the transaction succeeded.
    1d0e:	63 e2       	ldi	r22, 0x23	; 35
    1d10:	0e 94 44 0b 	call	0x1688	; 0x1688 <send_tm_transaction_response>
		}
		new_tm_msgf = 0;
    1d14:	10 92 36 02 	sts	0x0236, r1
		return;
    1d18:	08 95       	ret
	}
	else
	{
		send_tm_transaction_response(req_by, 0xFF);
    1d1a:	6f ef       	ldi	r22, 0xFF	; 255
    1d1c:	0e 94 44 0b 	call	0x1688	; 0x1688 <send_tm_transaction_response>
		tm_sequence_count = 0;
    1d20:	10 92 06 01 	sts	0x0106, r1
		receiving_tmf = 0;
    1d24:	10 92 29 03 	sts	0x0329, r1
		new_tm_msgf = 0;
    1d28:	10 92 36 02 	sts	0x0236, r1
    1d2c:	ec e3       	ldi	r30, 0x3C	; 60
    1d2e:	f2 e0       	ldi	r31, 0x02	; 2
    1d30:	8b ec       	ldi	r24, 0xCB	; 203
    1d32:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1d34:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1d36:	e8 17       	cp	r30, r24
    1d38:	f9 07       	cpc	r31, r25
    1d3a:	e1 f7       	brne	.-8      	; 0x1d34 <receive_tm_msg+0xf0>
    1d3c:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
	{
		tm_sequence_count = obc_seq_count;
		receiving_tmf = 1;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	80 93 29 03 	sts	0x0329, r24
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1d44:	f9 01       	movw	r30, r18
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	e4 5c       	subi	r30, 0xC4	; 196
    1d50:	fd 4f       	sbci	r31, 0xFD	; 253
    1d52:	80 91 0a 03 	lds	r24, 0x030A
    1d56:	80 83       	st	Z, r24
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1d58:	80 91 0b 03 	lds	r24, 0x030B
    1d5c:	81 83       	std	Z+1, r24	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1d5e:	80 91 0c 03 	lds	r24, 0x030C
    1d62:	82 83       	std	Z+2, r24	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1d64:	80 91 0d 03 	lds	r24, 0x030D
    1d68:	83 83       	std	Z+3, r24	; 0x03
    1d6a:	d4 cf       	rjmp	.-88     	; 0x1d14 <receive_tm_msg+0xd0>

00001d6c <alert_obc_tcp_ready>:


// Lets the OBC know that we have a TC packet ready.
void alert_obc_tcp_ready(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1d6c:	8a e0       	ldi	r24, 0x0A	; 10
    1d6e:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = TC_PACKET_READY;
    1d78:	81 e1       	ldi	r24, 0x11	; 17
    1d7a:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1d7e:	80 91 26 02 	lds	r24, 0x0226
    1d82:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1d86:	61 e1       	ldi	r22, 0x11	; 17
    1d88:	85 ed       	ldi	r24, 0xD5	; 213
    1d8a:	91 e0       	ldi	r25, 0x01	; 1
    1d8c:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
    1d90:	08 95       	ret

00001d92 <send_pus_packet_tc>:
	}
	return;
}

void send_pus_packet_tc(void)
{
    1d92:	2f 92       	push	r2
    1d94:	3f 92       	push	r3
    1d96:	4f 92       	push	r4
    1d98:	5f 92       	push	r5
    1d9a:	6f 92       	push	r6
    1d9c:	7f 92       	push	r7
    1d9e:	8f 92       	push	r8
    1da0:	9f 92       	push	r9
    1da2:	af 92       	push	r10
    1da4:	bf 92       	push	r11
    1da6:	cf 92       	push	r12
    1da8:	df 92       	push	r13
    1daa:	ef 92       	push	r14
    1dac:	ff 92       	push	r15
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <send_pus_packet_tc+0x26>
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <send_pus_packet_tc+0x28>
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
	uint8_t i, timeout;
	uint8_t num_transfers = PACKET_LENGTH / 4;
	tc_transfer_completef = 0;
    1dbe:	10 92 09 02 	sts	0x0209, r1
	start_tc_transferf = 0;
    1dc2:	10 92 05 02 	sts	0x0205, r1
	uint8_t data[4];
	alert_obc_tcp_ready();
    1dc6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <alert_obc_tcp_ready>
	timeout = ssm_ok_go_timeout;
    1dca:	10 91 d3 01 	lds	r17, 0x01D3
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1dce:	80 91 05 02 	lds	r24, 0x0205
    1dd2:	81 11       	cpse	r24, r1
    1dd4:	17 c0       	rjmp	.+46     	; 0x1e04 <send_pus_packet_tc+0x72>
	{
		if(!timeout--)
    1dd6:	11 11       	cpse	r17, r1
    1dd8:	0d c0       	rjmp	.+26     	; 0x1df4 <send_pus_packet_tc+0x62>
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <send_pus_packet_tc+0x4e>
    1ddc:	11 50       	subi	r17, 0x01	; 1
    1dde:	51 f4       	brne	.+20     	; 0x1df4 <send_pus_packet_tc+0x62>
		{
			data[0] = ssm_ok_go_timeout;
    1de0:	80 91 d3 01 	lds	r24, 0x01D3
    1de4:	89 83       	std	Y+1, r24	; 0x01
			errorREPORT(TC_OK_GO_TIMED_OUT, data);	// Let the OBC know that OK-GO timed out.
    1de6:	be 01       	movw	r22, r28
    1de8:	6f 5f       	subi	r22, 0xFF	; 255
    1dea:	7f 4f       	sbci	r23, 0xFF	; 255
    1dec:	8c e1       	ldi	r24, 0x1C	; 28
    1dee:	0e 94 37 11 	call	0x226e	; 0x226e <errorREPORT>
			return;
    1df2:	93 c0       	rjmp	.+294    	; 0x1f1a <send_pus_packet_tc+0x188>
		}
		delay_us(10);
    1df4:	8a e0       	ldi	r24, 0x0A	; 10
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	tc_transfer_completef = 0;
	start_tc_transferf = 0;
	uint8_t data[4];
	alert_obc_tcp_ready();
	timeout = ssm_ok_go_timeout;
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1dfc:	80 91 05 02 	lds	r24, 0x0205
    1e00:	88 23       	and	r24, r24
    1e02:	61 f3       	breq	.-40     	; 0x1ddc <send_pus_packet_tc+0x4a>
			errorREPORT(TC_OK_GO_TIMED_OUT, data);	// Let the OBC know that OK-GO timed out.
			return;
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
    1e04:	10 92 05 02 	sts	0x0205, r1
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1e08:	80 91 09 02 	lds	r24, 0x0209
    1e0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <send_pus_packet_tc+0x80>
    1e10:	84 c0       	rjmp	.+264    	; 0x1f1a <send_pus_packet_tc+0x188>
    1e12:	02 e4       	ldi	r16, 0x42	; 66
    1e14:	13 e0       	ldi	r17, 0x03	; 3
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
	
	for(i = 0; i < num_transfers; i++)
    1e16:	31 2c       	mov	r3, r1
	{
		if(tc_transfer_completef == 0xFF)
			return;
		send_arr[0] = current_tc[(i * 4)];
    1e18:	0f 2e       	mov	r0, r31
    1e1a:	f5 ed       	ldi	r31, 0xD5	; 213
    1e1c:	ef 2e       	mov	r14, r31
    1e1e:	f1 e0       	ldi	r31, 0x01	; 1
    1e20:	ff 2e       	mov	r15, r31
    1e22:	f0 2d       	mov	r31, r0
		send_arr[1] = current_tc[(i * 4) + 1];
    1e24:	0f 2e       	mov	r0, r31
    1e26:	f6 ed       	ldi	r31, 0xD6	; 214
    1e28:	8f 2e       	mov	r8, r31
    1e2a:	f1 e0       	ldi	r31, 0x01	; 1
    1e2c:	9f 2e       	mov	r9, r31
    1e2e:	f0 2d       	mov	r31, r0
		send_arr[2] = current_tc[(i * 4) + 2];
    1e30:	0f 2e       	mov	r0, r31
    1e32:	f7 ed       	ldi	r31, 0xD7	; 215
    1e34:	af 2e       	mov	r10, r31
    1e36:	f1 e0       	ldi	r31, 0x01	; 1
    1e38:	bf 2e       	mov	r11, r31
    1e3a:	f0 2d       	mov	r31, r0
		send_arr[3] = current_tc[(i * 4) + 3];
    1e3c:	0f 2e       	mov	r0, r31
    1e3e:	f8 ed       	ldi	r31, 0xD8	; 216
    1e40:	cf 2e       	mov	r12, r31
    1e42:	f1 e0       	ldi	r31, 0x01	; 1
    1e44:	df 2e       	mov	r13, r31
    1e46:	f0 2d       	mov	r31, r0
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1e48:	0f 2e       	mov	r0, r31
    1e4a:	fc ed       	ldi	r31, 0xDC	; 220
    1e4c:	6f 2e       	mov	r6, r31
    1e4e:	f1 e0       	ldi	r31, 0x01	; 1
    1e50:	7f 2e       	mov	r7, r31
    1e52:	f0 2d       	mov	r31, r0
    1e54:	0f 2e       	mov	r0, r31
    1e56:	fa e0       	ldi	r31, 0x0A	; 10
    1e58:	2f 2e       	mov	r2, r31
    1e5a:	f0 2d       	mov	r31, r0
	send_arr[6] = MT_COM;
    1e5c:	0f 2e       	mov	r0, r31
    1e5e:	fb ed       	ldi	r31, 0xDB	; 219
    1e60:	4f 2e       	mov	r4, r31
    1e62:	f1 e0       	ldi	r31, 0x01	; 1
    1e64:	5f 2e       	mov	r5, r31
    1e66:	f0 2d       	mov	r31, r0
    1e68:	07 c0       	rjmp	.+14     	; 0x1e78 <send_pus_packet_tc+0xe6>
    1e6a:	0c 5f       	subi	r16, 0xFC	; 252
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
	}				
	start_tc_transferf = 0;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1e6e:	80 91 09 02 	lds	r24, 0x0209
    1e72:	8f 3f       	cpi	r24, 0xFF	; 255
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <send_pus_packet_tc+0xe6>
    1e76:	51 c0       	rjmp	.+162    	; 0x1f1a <send_pus_packet_tc+0x188>
    1e78:	f8 01       	movw	r30, r16
    1e7a:	33 97       	sbiw	r30, 0x03	; 3
			return;
		send_arr[0] = current_tc[(i * 4)];
    1e7c:	80 81       	ld	r24, Z
    1e7e:	f7 01       	movw	r30, r14
    1e80:	80 83       	st	Z, r24
    1e82:	f8 01       	movw	r30, r16
    1e84:	32 97       	sbiw	r30, 0x02	; 2
		send_arr[1] = current_tc[(i * 4) + 1];
    1e86:	80 81       	ld	r24, Z
    1e88:	f4 01       	movw	r30, r8
    1e8a:	80 83       	st	Z, r24
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	31 97       	sbiw	r30, 0x01	; 1
		send_arr[2] = current_tc[(i * 4) + 2];
    1e90:	80 81       	ld	r24, Z
    1e92:	f5 01       	movw	r30, r10
    1e94:	80 83       	st	Z, r24
		send_arr[3] = current_tc[(i * 4) + 3];
    1e96:	f8 01       	movw	r30, r16
    1e98:	80 81       	ld	r24, Z
    1e9a:	f6 01       	movw	r30, r12
    1e9c:	80 83       	st	Z, r24
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1e9e:	f3 01       	movw	r30, r6
    1ea0:	20 82       	st	Z, r2
	send_arr[6] = MT_COM;
    1ea2:	82 e0       	ldi	r24, 0x02	; 2
    1ea4:	f2 01       	movw	r30, r4
    1ea6:	80 83       	st	Z, r24
	send_arr[5] = SEND_TC;
    1ea8:	8e e0       	ldi	r24, 0x0E	; 14
    1eaa:	ea ed       	ldi	r30, 0xDA	; 218
    1eac:	f1 e0       	ldi	r31, 0x01	; 1
    1eae:	80 83       	st	Z, r24
	send_arr[4] = packet_count;
    1eb0:	e9 ed       	ldi	r30, 0xD9	; 217
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	30 82       	st	Z, r3
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1eb6:	61 e1       	ldi	r22, 0x11	; 17
    1eb8:	c7 01       	movw	r24, r14
    1eba:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
		send_arr[0] = current_tc[(i * 4)];
		send_arr[1] = current_tc[(i * 4) + 1];
		send_arr[2] = current_tc[(i * 4) + 2];
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
	
	for(i = 0; i < num_transfers; i++)
    1ec6:	33 94       	inc	r3
    1ec8:	f6 e2       	ldi	r31, 0x26	; 38
    1eca:	3f 12       	cpse	r3, r31
    1ecc:	ce cf       	rjmp	.-100    	; 0x1e6a <send_pus_packet_tc+0xd8>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	timeout = ssm_consec_trans_timeout;
    1ece:	10 91 3a 02 	lds	r17, 0x023A
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1ed2:	80 91 09 02 	lds	r24, 0x0209
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	17 c0       	rjmp	.+46     	; 0x1f08 <send_pus_packet_tc+0x176>
	{
		if(!timeout--)
    1eda:	11 11       	cpse	r17, r1
    1edc:	0d c0       	rjmp	.+26     	; 0x1ef8 <send_pus_packet_tc+0x166>
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <send_pus_packet_tc+0x152>
    1ee0:	11 50       	subi	r17, 0x01	; 1
    1ee2:	51 f4       	brne	.+20     	; 0x1ef8 <send_pus_packet_tc+0x166>
		{
			data[0] = ssm_consec_trans_timeout;
    1ee4:	80 91 3a 02 	lds	r24, 0x023A
    1ee8:	89 83       	std	Y+1, r24	; 0x01
			errorASSERT(TC_CONSEC_TIMED_OUT, data);	// Let the OBC know that a consecutive transfer timed out.
    1eea:	be 01       	movw	r22, r28
    1eec:	6f 5f       	subi	r22, 0xFF	; 255
    1eee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef0:	8d e1       	ldi	r24, 0x1D	; 29
    1ef2:	0e 94 03 11 	call	0x2206	; 0x2206 <errorASSERT>
			return;
    1ef6:	11 c0       	rjmp	.+34     	; 0x1f1a <send_pus_packet_tc+0x188>
		}
		delay_us(100);
    1ef8:	84 e6       	ldi	r24, 0x64	; 100
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	timeout = ssm_consec_trans_timeout;
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1f00:	80 91 09 02 	lds	r24, 0x0209
    1f04:	88 23       	and	r24, r24
    1f06:	61 f3       	breq	.-40     	; 0x1ee0 <send_pus_packet_tc+0x14e>
			return;
		}
		delay_us(100);
	}
	
	if(tc_transfer_completef != 35)
    1f08:	83 32       	cpi	r24, 0x23	; 35
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <send_pus_packet_tc+0x180>
	{
		tc_transfer_completef = 0;
    1f0c:	10 92 09 02 	sts	0x0209, r1
		return;
    1f10:	04 c0       	rjmp	.+8      	; 0x1f1a <send_pus_packet_tc+0x188>
	}
	else
	{
		tc_transfer_completef = 0;
    1f12:	10 92 09 02 	sts	0x0209, r1
		tc_packet_readyf = 0;
    1f16:	10 92 03 03 	sts	0x0303, r1
		return;
	}
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	0f 90       	pop	r0
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	ff 90       	pop	r15
    1f2c:	ef 90       	pop	r14
    1f2e:	df 90       	pop	r13
    1f30:	cf 90       	pop	r12
    1f32:	bf 90       	pop	r11
    1f34:	af 90       	pop	r10
    1f36:	9f 90       	pop	r9
    1f38:	8f 90       	pop	r8
    1f3a:	7f 90       	pop	r7
    1f3c:	6f 90       	pop	r6
    1f3e:	5f 90       	pop	r5
    1f40:	4f 90       	pop	r4
    1f42:	3f 90       	pop	r3
    1f44:	2f 90       	pop	r2
    1f46:	08 95       	ret

00001f48 <send_event>:
}

// event_readyf should be set when an event to report on has been placed in event_arr[]
void send_event(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1f48:	8a e0       	ldi	r24, 0x0A	; 10
    1f4a:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = SEND_EVENT;
    1f54:	86 e1       	ldi	r24, 0x16	; 22
    1f56:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1f5a:	80 91 26 02 	lds	r24, 0x0226
    1f5e:	80 93 d9 01 	sts	0x01D9, r24
	send_arr[3] = event_arr[3];		// 1=Normal, 2=low-sev error, 3=med-sev, 4=high-sev
    1f62:	80 91 b7 01 	lds	r24, 0x01B7
    1f66:	80 93 d8 01 	sts	0x01D8, r24
	send_arr[2] = event_arr[2];		// ReportID
    1f6a:	80 91 b6 01 	lds	r24, 0x01B6
    1f6e:	80 93 d7 01 	sts	0x01D7, r24
	send_arr[1] = event_arr[1];
    1f72:	80 91 b5 01 	lds	r24, 0x01B5
    1f76:	80 93 d6 01 	sts	0x01D6, r24
	send_arr[0] = event_arr[0];
    1f7a:	80 91 b4 01 	lds	r24, 0x01B4
    1f7e:	80 93 d5 01 	sts	0x01D5, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1f82:	61 e1       	ldi	r22, 0x11	; 17
    1f84:	85 ed       	ldi	r24, 0xD5	; 213
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
    1f8c:	08 95       	ret

00001f8e <send_ask_alive>:
	return;
}

void send_ask_alive(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1f8e:	83 e0       	ldi	r24, 0x03	; 3
    1f90:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = ASK_OBC_ALIVE;
    1f9a:	87 e1       	ldi	r24, 0x17	; 23
    1f9c:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1fa0:	80 91 26 02 	lds	r24, 0x0226
    1fa4:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1fa8:	61 e1       	ldi	r22, 0x11	; 17
    1faa:	85 ed       	ldi	r24, 0xD5	; 213
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
	ask_alive = 0;
    1fb2:	10 92 1d 02 	sts	0x021D, r1
    1fb6:	08 95       	ret

00001fb8 <enter_low_power>:
}

void enter_low_power(void)
{
	// Sam: Fill this in with what needs to be done for low power mode.
	enter_low_powerf = 0;
    1fb8:	10 92 06 02 	sts	0x0206, r1
	LOW_POWER_MODE = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	80 93 01 01 	sts	0x0101, r24
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    1fc8:	82 e0       	ldi	r24, 0x02	; 2
    1fca:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = LOW_POWER_MODE_ENTERED;
    1fce:	81 e2       	ldi	r24, 0x21	; 33
    1fd0:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    1fd4:	80 91 26 02 	lds	r24, 0x0226
    1fd8:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1fdc:	61 e1       	ldi	r22, 0x11	; 17
    1fde:	85 ed       	ldi	r24, 0xD5	; 213
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
    1fe6:	08 95       	ret

00001fe8 <exit_low_power>:
}

void exit_low_power(void)
{	
	// Sam: Fill this in with what needs to be done to exit low power mode.
	LOW_POWER_MODE = 0;
    1fe8:	10 92 01 01 	sts	0x0101, r1
	exit_low_powerf = 0;
    1fec:	10 92 27 02 	sts	0x0227, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1ff0:	83 e0       	ldi	r24, 0x03	; 3
    1ff2:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = LOW_POWER_MODE_EXITED;
    1ffc:	82 e2       	ldi	r24, 0x22	; 34
    1ffe:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    2002:	80 91 26 02 	lds	r24, 0x0226
    2006:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    200a:	61 e1       	ldi	r22, 0x11	; 17
    200c:	85 ed       	ldi	r24, 0xD5	; 213
    200e:	91 e0       	ldi	r25, 0x01	; 1
    2010:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
    2014:	08 95       	ret

00002016 <enter_take_over>:
	return;	
}

void enter_take_over(void)
{
	TAKEOVER = 1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	80 93 26 03 	sts	0x0326, r24
	enter_take_overf = 0;
    201c:	10 92 08 03 	sts	0x0308, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = COMS_TAKEOVER_ENTERED;
    202c:	83 e2       	ldi	r24, 0x23	; 35
    202e:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    2032:	80 91 26 02 	lds	r24, 0x0226
    2036:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    203a:	61 e1       	ldi	r22, 0x11	; 17
    203c:	85 ed       	ldi	r24, 0xD5	; 213
    203e:	91 e0       	ldi	r25, 0x01	; 1
    2040:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
    2044:	08 95       	ret

00002046 <exit_take_over>:
	return;
}

void exit_take_over(void)
{
	TAKEOVER = 0;
    2046:	10 92 26 03 	sts	0x0326, r1
	exit_take_overf = 0;
    204a:	10 92 d4 02 	sts	0x02D4, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    204e:	83 e0       	ldi	r24, 0x03	; 3
    2050:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = COMS_TAKEOVER_EXITED;
    205a:	84 e2       	ldi	r24, 0x24	; 36
    205c:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    2060:	80 91 26 02 	lds	r24, 0x0226
    2064:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    2068:	61 e1       	ldi	r22, 0x11	; 17
    206a:	85 ed       	ldi	r24, 0xD5	; 213
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
    2072:	08 95       	ret

00002074 <pause_operations>:
	return;
}

void pause_operations(void)
{
	PAUSE = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	80 93 e1 03 	sts	0x03E1, r24
	pause_operationsf = 0;
    207a:	10 92 eb 01 	sts	0x01EB, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    207e:	83 e0       	ldi	r24, 0x03	; 3
    2080:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = OPERATIONS_PAUSED;
    208a:	85 e2       	ldi	r24, 0x25	; 37
    208c:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    2090:	80 91 26 02 	lds	r24, 0x0226
    2094:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    2098:	61 e1       	ldi	r22, 0x11	; 17
    209a:	85 ed       	ldi	r24, 0xD5	; 213
    209c:	91 e0       	ldi	r25, 0x01	; 1
    209e:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
    20a2:	08 95       	ret

000020a4 <resume_operations>:
	return;	
}

void resume_operations(void)
{
	PAUSE = 0;
    20a4:	10 92 e1 03 	sts	0x03E1, r1
	resume_operationsf = 0;
    20a8:	10 92 ed 01 	sts	0x01ED, r1
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    20ac:	83 e0       	ldi	r24, 0x03	; 3
    20ae:	80 93 dc 01 	sts	0x01DC, r24
	send_arr[6] = MT_COM;
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	80 93 db 01 	sts	0x01DB, r24
	send_arr[5] = OPERATIONS_RESUMED;
    20b8:	86 e2       	ldi	r24, 0x26	; 38
    20ba:	80 93 da 01 	sts	0x01DA, r24
	send_arr[4] = CURRENT_MINUTE;
    20be:	80 91 26 02 	lds	r24, 0x0226
    20c2:	80 93 d9 01 	sts	0x01D9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    20c6:	61 e1       	ldi	r22, 0x11	; 17
    20c8:	85 ed       	ldi	r24, 0xD5	; 213
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
    20d0:	08 95       	ret

000020d2 <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now)
    20d2:	80 91 33 02 	lds	r24, 0x0233
    20d6:	81 11       	cpse	r24, r1
		send_response();
    20d8:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <send_response>
	if (send_hk)
    20dc:	80 91 e0 02 	lds	r24, 0x02E0
    20e0:	81 11       	cpse	r24, r1
		send_housekeeping();
    20e2:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <send_housekeeping>
	if (send_data)
    20e6:	80 91 05 03 	lds	r24, 0x0305
    20ea:	81 11       	cpse	r24, r1
		send_sensor_data();
    20ec:	0e 94 85 0b 	call	0x170a	; 0x170a <send_sensor_data>
	if (msg_received)
    20f0:	80 91 e2 03 	lds	r24, 0x03E2
    20f4:	81 11       	cpse	r24, r1
		send_coms_packet();
    20f6:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <send_coms_packet>
	if (read_response)
    20fa:	80 91 3b 02 	lds	r24, 0x023B
    20fe:	81 11       	cpse	r24, r1
		send_read_response();
    2100:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <send_read_response>
	if (write_response)
    2104:	80 91 fa 01 	lds	r24, 0x01FA
    2108:	81 11       	cpse	r24, r1
		send_write_response();
    210a:	0e 94 15 0c 	call	0x182a	; 0x182a <send_write_response>
	if (set_sens_h)
    210e:	80 91 02 03 	lds	r24, 0x0302
    2112:	81 11       	cpse	r24, r1
		set_sensor_high();
    2114:	0e 94 38 0c 	call	0x1870	; 0x1870 <set_sensor_high>
	if (set_sens_l)
    2118:	80 91 07 03 	lds	r24, 0x0307
    211c:	81 11       	cpse	r24, r1
		set_sensor_low();
    211e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <set_sensor_low>
	if (set_varf)
    2122:	80 91 06 03 	lds	r24, 0x0306
    2126:	81 11       	cpse	r24, r1
		set_var();
    2128:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <set_var>
	if (new_tm_msgf)
    212c:	80 91 36 02 	lds	r24, 0x0236
    2130:	81 11       	cpse	r24, r1
		receive_tm_msg();
    2132:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <receive_tm_msg>
	if (tc_packet_readyf)
    2136:	80 91 03 03 	lds	r24, 0x0303
    213a:	81 11       	cpse	r24, r1
		send_pus_packet_tc();
    213c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <send_pus_packet_tc>
	if (event_readyf)
    2140:	80 91 07 01 	lds	r24, 0x0107
    2144:	81 11       	cpse	r24, r1
		send_event();
    2146:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <send_event>
	if (ask_alive)
    214a:	80 91 1d 02 	lds	r24, 0x021D
    214e:	81 11       	cpse	r24, r1
		send_ask_alive();
    2150:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <send_ask_alive>
	if (enter_low_powerf)
    2154:	80 91 06 02 	lds	r24, 0x0206
    2158:	81 11       	cpse	r24, r1
		enter_low_power();
    215a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <enter_low_power>
	if (exit_low_powerf)
    215e:	80 91 27 02 	lds	r24, 0x0227
    2162:	81 11       	cpse	r24, r1
		exit_low_power();
    2164:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <exit_low_power>
	if (enter_take_overf)
    2168:	80 91 08 03 	lds	r24, 0x0308
    216c:	81 11       	cpse	r24, r1
		enter_take_over();
    216e:	0e 94 0b 10 	call	0x2016	; 0x2016 <enter_take_over>
	if (exit_take_overf)
    2172:	80 91 d4 02 	lds	r24, 0x02D4
    2176:	81 11       	cpse	r24, r1
		exit_take_over();
    2178:	0e 94 23 10 	call	0x2046	; 0x2046 <exit_take_over>
	if (pause_operationsf)
    217c:	80 91 eb 01 	lds	r24, 0x01EB
    2180:	81 11       	cpse	r24, r1
		pause_operations();
    2182:	0e 94 3a 10 	call	0x2074	; 0x2074 <pause_operations>
	if (resume_operationsf)
    2186:	80 91 ed 01 	lds	r24, 0x01ED
    218a:	81 11       	cpse	r24, r1
		resume_operations();
    218c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <resume_operations>
    2190:	08 95       	ret

00002192 <__vector_17>:
#include "comsTimer.h"

#if (SELF_ID == 0)
//When the timer overflows, increment the time-count variables.
ISR(TIMER0_OVF_vect)
{
    2192:	1f 92       	push	r1
    2194:	0f 92       	push	r0
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	0f 92       	push	r0
    219a:	11 24       	eor	r1, r1
    219c:	8f 93       	push	r24
    219e:	9f 93       	push	r25
    21a0:	af 93       	push	r26
    21a2:	bf 93       	push	r27
	// Increment variables here to keep track of time when an
	// "are you alive?" message is in progress
	if (REQUEST_ALIVE_IN_PROG)
    21a4:	80 91 d4 01 	lds	r24, 0x01D4
    21a8:	88 23       	and	r24, r24
    21aa:	a1 f0       	breq	.+40     	; 0x21d4 <__vector_17+0x42>
	{
		ISALIVE_COUNTER++;
    21ac:	80 91 be 01 	lds	r24, 0x01BE
    21b0:	90 91 bf 01 	lds	r25, 0x01BF
    21b4:	a0 91 c0 01 	lds	r26, 0x01C0
    21b8:	b0 91 c1 01 	lds	r27, 0x01C1
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	a1 1d       	adc	r26, r1
    21c0:	b1 1d       	adc	r27, r1
    21c2:	80 93 be 01 	sts	0x01BE, r24
    21c6:	90 93 bf 01 	sts	0x01BF, r25
    21ca:	a0 93 c0 01 	sts	0x01C0, r26
    21ce:	b0 93 c1 01 	sts	0x01C1, r27
    21d2:	08 c0       	rjmp	.+16     	; 0x21e4 <__vector_17+0x52>
	}
	else 
	{
		ISALIVE_COUNTER = 0;
    21d4:	10 92 be 01 	sts	0x01BE, r1
    21d8:	10 92 bf 01 	sts	0x01BF, r1
    21dc:	10 92 c0 01 	sts	0x01C0, r1
    21e0:	10 92 c1 01 	sts	0x01C1, r1
	}
}
    21e4:	bf 91       	pop	r27
    21e6:	af 91       	pop	r26
    21e8:	9f 91       	pop	r25
    21ea:	8f 91       	pop	r24
    21ec:	0f 90       	pop	r0
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	0f 90       	pop	r0
    21f2:	1f 90       	pop	r1
    21f4:	18 95       	reti

000021f6 <coms_timer_init>:
#endif

void coms_timer_init(void)
{	
	TCNT0 = 0x0000; //Clear timer
    21f6:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00; // b00000000 Don't connect any pins
    21f8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; // 8MHz / 1024 is the clock frequency
    21fa:	85 e0       	ldi	r24, 0x05	; 5
    21fc:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x01; // Overflow interrupt enabled. (Occurs when TCNT0 == 255)
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	80 93 6e 00 	sts	0x006E, r24
    2204:	08 95       	ret

00002206 <errorASSERT>:
// Note: This function shall halt the regular operation of this SSM for a maximum of 2 minutes.
// Should the error not be resolved after this time, 0xFF shall be returned.
// 1 is returned if the issue was resolved.
// *data needs to be a uint8_t array of size [3]. 
uint8_t errorASSERT(uint8_t error, uint8_t* data)
{
    2206:	cf 93       	push	r28
    2208:	fb 01       	movw	r30, r22
	uint8_t timeout;
	send_arr[7] = (SELF_ID << 4)|FDIR_TASK_ID;
    220a:	9c e0       	ldi	r25, 0x0C	; 12
    220c:	90 93 dc 01 	sts	0x01DC, r25
	send_arr[6] = MT_COM;
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	90 93 db 01 	sts	0x01DB, r25
	send_arr[5] = SSM_ERROR_ASSERT;
    2216:	99 e1       	ldi	r25, 0x19	; 25
    2218:	90 93 da 01 	sts	0x01DA, r25
	send_arr[4] = error;
    221c:	80 93 d9 01 	sts	0x01D9, r24
	send_arr[2] = SELF_ID;
    2220:	a7 ed       	ldi	r26, 0xD7	; 215
    2222:	b1 e0       	ldi	r27, 0x01	; 1
    2224:	1c 92       	st	X, r1
	send_arr[2] = *(data + 2);
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	8c 93       	st	X, r24
	send_arr[1] = *(data + 1);
    222a:	81 81       	ldd	r24, Z+1	; 0x01
    222c:	80 93 d6 01 	sts	0x01D6, r24
	send_arr[0] = *data;	
    2230:	80 81       	ld	r24, Z
    2232:	80 93 d5 01 	sts	0x01D5, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);	
    2236:	61 e1       	ldi	r22, 0x11	; 17
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	85 ed       	ldi	r24, 0xD5	; 213
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
	
	ssm_fdir_signal = 1;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	80 93 ca 01 	sts	0x01CA, r24
    2248:	c8 e7       	ldi	r28, 0x78	; 120
	timeout = 120;
	while(ssm_fdir_signal && timeout--)
	{
		delay_ms(1000);
    224a:	88 ee       	ldi	r24, 0xE8	; 232
    224c:	93 e0       	ldi	r25, 0x03	; 3
    224e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>
	send_arr[0] = *data;	
	can_send_message(&(send_arr[0]), CAN1_MB7);	
	
	ssm_fdir_signal = 1;
	timeout = 120;
	while(ssm_fdir_signal && timeout--)
    2252:	80 91 ca 01 	lds	r24, 0x01CA
    2256:	88 23       	and	r24, r24
    2258:	19 f0       	breq	.+6      	; 0x2260 <errorASSERT+0x5a>
    225a:	c1 50       	subi	r28, 0x01	; 1
    225c:	b1 f7       	brne	.-20     	; 0x224a <errorASSERT+0x44>
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <errorASSERT+0x5e>
	{
		ssm_fdir_signal = 0;
		return 0xFF;
	}
	else
		return 1;		// The issue was resolved by the OBC.
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	03 c0       	rjmp	.+6      	; 0x226a <errorASSERT+0x64>
	{
		delay_ms(1000);
	}
	if(ssm_fdir_signal)
	{
		ssm_fdir_signal = 0;
    2264:	10 92 ca 01 	sts	0x01CA, r1
		return 0xFF;
    2268:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else
		return 1;		// The issue was resolved by the OBC.
}
    226a:	cf 91       	pop	r28
    226c:	08 95       	ret

0000226e <errorREPORT>:

// For low-severity errors only.
// Note: This functions does not halt regular operation, nor is the error fixed at this time.
// *data needs to be a uint8_t array of size [3]. 
uint8_t errorREPORT(uint8_t error, uint8_t* data)
{
    226e:	fb 01       	movw	r30, r22
	send_arr[7] = (SELF_ID << 4)|FDIR_TASK_ID;
    2270:	9c e0       	ldi	r25, 0x0C	; 12
    2272:	90 93 dc 01 	sts	0x01DC, r25
	send_arr[6] = MT_COM;
    2276:	92 e0       	ldi	r25, 0x02	; 2
    2278:	90 93 db 01 	sts	0x01DB, r25
	send_arr[5] = SSM_ERROR_REPORT;
    227c:	9a e1       	ldi	r25, 0x1A	; 26
    227e:	90 93 da 01 	sts	0x01DA, r25
	send_arr[4] = error;
    2282:	80 93 d9 01 	sts	0x01D9, r24
	send_arr[2] = SELF_ID;
    2286:	a7 ed       	ldi	r26, 0xD7	; 215
    2288:	b1 e0       	ldi	r27, 0x01	; 1
    228a:	1c 92       	st	X, r1
	send_arr[2] = *(data + 2);
    228c:	82 81       	ldd	r24, Z+2	; 0x02
    228e:	8c 93       	st	X, r24
	send_arr[1] = *(data + 1);
    2290:	81 81       	ldd	r24, Z+1	; 0x01
    2292:	80 93 d6 01 	sts	0x01D6, r24
	send_arr[0] = *data;
    2296:	80 81       	ld	r24, Z
    2298:	80 93 d5 01 	sts	0x01D5, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);	
    229c:	61 e1       	ldi	r22, 0x11	; 17
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	85 ed       	ldi	r24, 0xD5	; 213
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 9c 00 	call	0x138	; 0x138 <can_send_message>
	return 1;
}
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	08 95       	ret

000022ac <main>:
/**************************************************/

volatile uint8_t CTC_flag;	// Variable used in timer.c

int main(void)
{		
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <main+0x6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <main+0x8>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t high = 0, low = 0;
	
	uint8_t msg = 0x66;
	
	uint8_t* adc_result;
	*adc_result = 0;
    22b8:	10 92 00 00 	sts	0x0000, r1
}

static void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    22bc:	e1 e6       	ldi	r30, 0x61	; 97
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 e8       	ldi	r24, 0x80	; 128
    22c2:	80 83       	st	Z, r24
	CLKPR = 0x00;
    22c4:	10 82       	st	Z, r1
static void init_global_vars(void)
{	
	uint8_t i;
	if (SELF_ID == 0)
	{
		id_array[0] = SUB0_ID0;
    22c6:	84 e1       	ldi	r24, 0x14	; 20
    22c8:	80 93 f1 02 	sts	0x02F1, r24
		id_array[1] = SUB0_ID1;
    22cc:	85 e1       	ldi	r24, 0x15	; 21
    22ce:	80 93 f2 02 	sts	0x02F2, r24
		id_array[2] = SUB0_ID2;
    22d2:	86 e1       	ldi	r24, 0x16	; 22
    22d4:	80 93 f3 02 	sts	0x02F3, r24
		id_array[3] = SUB0_ID3;
    22d8:	87 e1       	ldi	r24, 0x17	; 23
    22da:	80 93 f4 02 	sts	0x02F4, r24
		id_array[4] = SUB0_ID4;
    22de:	88 e1       	ldi	r24, 0x18	; 24
    22e0:	80 93 f5 02 	sts	0x02F5, r24
		id_array[5] = SUB0_ID5;
    22e4:	89 e1       	ldi	r24, 0x19	; 25
    22e6:	80 93 f6 02 	sts	0x02F6, r24
    22ea:	0f 2e       	mov	r0, r31
    22ec:	f9 ee       	ldi	r31, 0xE9	; 233
    22ee:	4f 2e       	mov	r4, r31
    22f0:	f2 e0       	ldi	r31, 0x02	; 2
    22f2:	5f 2e       	mov	r5, r31
    22f4:	f0 2d       	mov	r31, r0
    22f6:	0f 2e       	mov	r0, r31
    22f8:	f5 ed       	ldi	r31, 0xD5	; 213
    22fa:	6f 2e       	mov	r6, r31
    22fc:	f1 e0       	ldi	r31, 0x01	; 1
    22fe:	7f 2e       	mov	r7, r31
    2300:	f0 2d       	mov	r31, r0
    2302:	09 ed       	ldi	r16, 0xD9	; 217
    2304:	13 e0       	ldi	r17, 0x03	; 3
    2306:	88 e0       	ldi	r24, 0x08	; 8
    2308:	91 e0       	ldi	r25, 0x01	; 1
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
    230e:	65 e1       	ldi	r22, 0x15	; 21
    2310:	72 e0       	ldi	r23, 0x02	; 2
    2312:	4b ef       	ldi	r20, 0xFB	; 251
    2314:	51 e0       	ldi	r21, 0x01	; 1
    2316:	24 e3       	ldi	r18, 0x34	; 52
    2318:	33 e0       	ldi	r19, 0x03	; 3
    231a:	8e ee       	ldi	r24, 0xEE	; 238
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	aa e0       	ldi	r26, 0x0A	; 10
    2320:	b3 e0       	ldi	r27, 0x03	; 3
    2322:	ea e2       	ldi	r30, 0x2A	; 42
    2324:	f3 e0       	ldi	r31, 0x03	; 3
    2326:	fa 83       	std	Y+2, r31	; 0x02
    2328:	e9 83       	std	Y+1, r30	; 0x01
    232a:	0f 2e       	mov	r0, r31
    232c:	f4 eb       	ldi	r31, 0xB4	; 180
    232e:	8f 2e       	mov	r8, r31
    2330:	f1 e0       	ldi	r31, 0x01	; 1
    2332:	9f 2e       	mov	r9, r31
    2334:	f0 2d       	mov	r31, r0
    2336:	0f 2e       	mov	r0, r31
    2338:	fa e2       	ldi	r31, 0x2A	; 42
    233a:	af 2e       	mov	r10, r31
    233c:	f2 e0       	ldi	r31, 0x02	; 2
    233e:	bf 2e       	mov	r11, r31
    2340:	f0 2d       	mov	r31, r0
    2342:	0f 2e       	mov	r0, r31
    2344:	fa e0       	ldi	r31, 0x0A	; 10
    2346:	cf 2e       	mov	r12, r31
    2348:	f2 e0       	ldi	r31, 0x02	; 2
    234a:	df 2e       	mov	r13, r31
    234c:	f0 2d       	mov	r31, r0
    234e:	68 94       	set
    2350:	ff 24       	eor	r15, r15
    2352:	f3 f8       	bld	r15, 3
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
    2354:	f2 01       	movw	r30, r4
    2356:	11 92       	st	Z+, r1
    2358:	2f 01       	movw	r4, r30
		send_arr[i] = 0;
    235a:	f3 01       	movw	r30, r6
    235c:	11 92       	st	Z+, r1
    235e:	3f 01       	movw	r6, r30
		read_arr[i] = 0;
    2360:	f8 01       	movw	r30, r16
    2362:	11 92       	st	Z+, r1
    2364:	8f 01       	movw	r16, r30
		write_arr[i] = 0;
    2366:	eb 81       	ldd	r30, Y+3	; 0x03
    2368:	fc 81       	ldd	r31, Y+4	; 0x04
    236a:	11 92       	st	Z+, r1
    236c:	fc 83       	std	Y+4, r31	; 0x04
    236e:	eb 83       	std	Y+3, r30	; 0x03
		data_req_arr[i] = 0;
    2370:	fb 01       	movw	r30, r22
    2372:	11 92       	st	Z+, r1
    2374:	bf 01       	movw	r22, r30
		sensh_arr[i] = 0;
    2376:	fa 01       	movw	r30, r20
    2378:	11 92       	st	Z+, r1
    237a:	af 01       	movw	r20, r30
		sensl_arr[i] = 0;
    237c:	f9 01       	movw	r30, r18
    237e:	11 92       	st	Z+, r1
    2380:	9f 01       	movw	r18, r30
		setv_arr[i] = 0;
    2382:	fc 01       	movw	r30, r24
    2384:	11 92       	st	Z+, r1
    2386:	cf 01       	movw	r24, r30
		new_tm_msg[i] = 0;
    2388:	1d 92       	st	X+, r1
		new_tc_msg[i] = 0;
    238a:	e9 81       	ldd	r30, Y+1	; 0x01
    238c:	fa 81       	ldd	r31, Y+2	; 0x02
    238e:	11 92       	st	Z+, r1
    2390:	fa 83       	std	Y+2, r31	; 0x02
    2392:	e9 83       	std	Y+1, r30	; 0x01
		event_arr[i] = 0;
    2394:	f4 01       	movw	r30, r8
    2396:	11 92       	st	Z+, r1
    2398:	4f 01       	movw	r8, r30
		pause_msg[i] = 0;
    239a:	f5 01       	movw	r30, r10
    239c:	11 92       	st	Z+, r1
    239e:	5f 01       	movw	r10, r30
		resume_msg[i] = 0;
    23a0:	f6 01       	movw	r30, r12
    23a2:	11 92       	st	Z+, r1
    23a4:	6f 01       	movw	r12, r30
    23a6:	fa 94       	dec	r15
		id_array[2] = SUB2_ID2;
		id_array[3] = SUB2_ID3;
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	for (i = 0; i < 8; i ++)
    23a8:	a9 f6       	brne	.-86     	; 0x2354 <main+0xa8>
    23aa:	ec e3       	ldi	r30, 0x3C	; 60
    23ac:	f2 e0       	ldi	r31, 0x02	; 2
    23ae:	2f e3       	ldi	r18, 0x3F	; 63
    23b0:	33 e0       	ldi	r19, 0x03	; 3
    23b2:	4a e1       	ldi	r20, 0x1A	; 26
    23b4:	51 e0       	ldi	r21, 0x01	; 1
    23b6:	84 ed       	ldi	r24, 0xD4	; 212
    23b8:	92 e0       	ldi	r25, 0x02	; 2
		pause_msg[i] = 0;
		resume_msg[i] = 0;
	}
	for (i = 0; i < 152; i++)		// Initialize the TM/TC Packet arrays.
	{
		current_tm[i] = 0;
    23ba:	11 92       	st	Z+, r1
		current_tc[i] = 0;
    23bc:	d9 01       	movw	r26, r18
    23be:	1d 92       	st	X+, r1
    23c0:	9d 01       	movw	r18, r26
		tm_to_downlink[i] = 0;
    23c2:	da 01       	movw	r26, r20
    23c4:	1d 92       	st	X+, r1
    23c6:	ad 01       	movw	r20, r26
		new_tc_msg[i] = 0;
		event_arr[i] = 0;
		pause_msg[i] = 0;
		resume_msg[i] = 0;
	}
	for (i = 0; i < 152; i++)		// Initialize the TM/TC Packet arrays.
    23c8:	e8 17       	cp	r30, r24
    23ca:	f9 07       	cpc	r31, r25
    23cc:	b1 f7       	brne	.-20     	; 0x23ba <main+0x10e>
		current_tm[i] = 0;
		current_tc[i] = 0;
		tm_to_downlink[i] = 0;
	}
	/* Initialize Global Command Flags to zero */
	send_now = 0;
    23ce:	10 92 33 02 	sts	0x0233, r1
	send_hk = 0;
    23d2:	10 92 e0 02 	sts	0x02E0, r1
	send_data = 0;
    23d6:	10 92 05 03 	sts	0x0305, r1
	read_response = 0;
    23da:	10 92 3b 02 	sts	0x023B, r1
	write_response = 0;
    23de:	10 92 fa 01 	sts	0x01FA, r1
	set_sens_h = 0;
    23e2:	10 92 02 03 	sts	0x0302, r1
	set_sens_l = 0;
    23e6:	10 92 07 03 	sts	0x0307, r1
	set_varf = 0;
    23ea:	10 92 06 03 	sts	0x0306, r1
	new_tm_msgf = 0;
    23ee:	10 92 36 02 	sts	0x0236, r1
	tm_sequence_count = 0;
    23f2:	10 92 06 01 	sts	0x0106, r1
	current_tm_fullf = 0;
    23f6:	10 92 04 03 	sts	0x0304, r1
	tc_packet_readyf = 0;
    23fa:	10 92 03 03 	sts	0x0303, r1
	tc_transfer_completef = 0;
    23fe:	10 92 09 02 	sts	0x0209, r1
	start_tc_transferf = 0;
    2402:	10 92 05 02 	sts	0x0205, r1
	receiving_tmf = 0;
    2406:	10 92 29 03 	sts	0x0329, r1
	event_readyf = 0;
    240a:	10 92 07 01 	sts	0x0107, r1
	ask_alive = 0;
    240e:	10 92 1d 02 	sts	0x021D, r1
	enter_low_powerf = 0;
    2412:	10 92 06 02 	sts	0x0206, r1
	exit_low_powerf = 0;
    2416:	10 92 27 02 	sts	0x0227, r1
	enter_take_overf = 0;
    241a:	10 92 08 03 	sts	0x0308, r1
	exit_take_overf = 0;
    241e:	10 92 d4 02 	sts	0x02D4, r1
	pause_operationsf = 0;
    2422:	10 92 eb 01 	sts	0x01EB, r1
	resume_operationsf = 0;
    2426:	10 92 ed 01 	sts	0x01ED, r1
	
	/* Initialize Global Mode variables to zero */
	LOW_POWER_MODE = 0;
    242a:	10 92 01 01 	sts	0x0101, r1
	PAUSE = 0;
    242e:	10 92 e1 03 	sts	0x03E1, r1
	
	/* Initialize Global coms takeover flags to zero */
	TAKEOVER = 0;
    2432:	10 92 26 03 	sts	0x0326, r1
	REQUEST_TAKEOVER = 0;
    2436:	10 92 e7 02 	sts	0x02E7, r1
	REQUEST_ALIVE_IN_PROG = 0;
    243a:	10 92 d4 01 	sts	0x01D4, r1
	FAILED_COUNT = 0;
    243e:	10 92 13 01 	sts	0x0113, r1
	ISALIVE_COUNTER = 0;
    2442:	10 92 be 01 	sts	0x01BE, r1
    2446:	10 92 bf 01 	sts	0x01BF, r1
    244a:	10 92 c0 01 	sts	0x01C0, r1
    244e:	10 92 c1 01 	sts	0x01C1, r1
	MAX_WAIT_TIME = 18400;
    2452:	80 ee       	ldi	r24, 0xE0	; 224
    2454:	97 e4       	ldi	r25, 0x47	; 71
    2456:	a0 e0       	ldi	r26, 0x00	; 0
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	80 93 02 01 	sts	0x0102, r24
    245e:	90 93 03 01 	sts	0x0103, r25
    2462:	a0 93 04 01 	sts	0x0104, r26
    2466:	b0 93 05 01 	sts	0x0105, r27
	
	/* Initialize Operational Timeouts */
	ssm_ok_go_timeout = 250;				// ~2.5 ms
    246a:	8a ef       	ldi	r24, 0xFA	; 250
    246c:	80 93 d3 01 	sts	0x01D3, r24
	ssm_consec_trans_timeout = 100;			// ~10 ms
    2470:	84 e6       	ldi	r24, 0x64	; 100
    2472:	80 93 3a 02 	sts	0x023A, r24
	
	ssm_fdir_signal = 0;
    2476:	10 92 ca 01 	sts	0x01CA, r1
}

static void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    247a:	8e ef       	ldi	r24, 0xFE	; 254
    247c:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    247e:	81 e1       	ldi	r24, 0x11	; 17
    2480:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    2482:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    2484:	89 e0       	ldi	r24, 0x09	; 9
    2486:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    248c:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    248e:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	init_global_vars();
	io_init();	
	timer_init();
    2490:	0e 94 51 13 	call	0x26a2	; 0x26a2 <timer_init>
	adc_initialize();
    2494:	0e 94 92 00 	call	0x124	; 0x124 <adc_initialize>
	can_init(0);
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	0e 94 20 04 	call	0x840	; 0x840 <can_init>
	can_init_mobs();
    249e:	0e 94 40 03 	call	0x680	; 0x680 <can_init_mobs>
	spi_initialize_master();
    24a2:	0e 94 e5 12 	call	0x25ca	; 0x25ca <spi_initialize_master>
	if(SELF_ID == 2)
		dac_initialize();
	
	//enable watchdog timer - 2 second reset time approximate
	//WDTON Fuse has to be 1 for system reset mode - how do you do that?
	wdt_enable(WDTO_2S);
    24a6:	2f e0       	ldi	r18, 0x0F	; 15
    24a8:	88 e1       	ldi	r24, 0x18	; 24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	a8 95       	wdr
    24b2:	80 93 60 00 	sts	0x0060, r24
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	20 93 60 00 	sts	0x0060, r18
		pyv = 0x5F;
		pyi = 0x2F;
	}
	
	// Enable global interrupts for Timer execution
	sei();
    24bc:	78 94       	sei
	
	if (SELF_ID == 0)
	{
		transceiver_initialize();
    24be:	0e 94 78 14 	call	0x28f0	; 0x28f0 <transceiver_initialize>
		coms_timer_init();
    24c2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <coms_timer_init>
	}

	SS1_set_high();		// SPI Temp Sensor.
    24c6:	0e 94 09 13 	call	0x2612	; 0x2612 <SS1_set_high>
	
	if(SELF_ID != 1)
	{
		PIN_toggle(LED1);
    24ca:	8d e1       	ldi	r24, 0x1D	; 29
    24cc:	0e 94 78 12 	call	0x24f0	; 0x24f0 <PIN_toggle>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {	
		/* Reset the WDT */
		wdt_reset();
    24d0:	a8 95       	wdr
		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    24d2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <can_check_general>
		
		if(!PAUSE)
    24d6:	80 91 e1 03 	lds	r24, 0x03E1
    24da:	81 11       	cpse	r24, r1
    24dc:	06 c0       	rjmp	.+12     	; 0x24ea <main+0x23e>
				//if(!receiving_tmf)
				//trans_check();		// Check for incoming packets.
				// Continually check if coms needs to takeover for OBC
				//check_obc_alive();
				
				transceiver_send();
    24de:	0e 94 6d 15 	call	0x2ada	; 0x2ada <transceiver_send>
				delay_ms(1000);
    24e2:	88 ee       	ldi	r24, 0xE8	; 232
    24e4:	93 e0       	ldi	r25, 0x03	; 3
    24e6:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>
				run_battBalance();
			}			
		}
				
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    24ea:	0e 94 69 10 	call	0x20d2	; 0x20d2 <run_commands>
	}
    24ee:	f0 cf       	rjmp	.-32     	; 0x24d0 <main+0x224>

000024f0 <PIN_toggle>:
	return;
}

void PIN_toggle(uint8_t PIN)
{
	if(PIN == 13)
    24f0:	8d 30       	cpi	r24, 0x0D	; 13
    24f2:	29 f4       	brne	.+10     	; 0x24fe <PIN_toggle+0xe>
	{
		PORTD ^= 0b00100000;
    24f4:	2b b1       	in	r18, 0x0b	; 11
    24f6:	90 e2       	ldi	r25, 0x20	; 32
    24f8:	92 27       	eor	r25, r18
    24fa:	9b b9       	out	0x0b, r25	; 11
    24fc:	0d c0       	rjmp	.+26     	; 0x2518 <PIN_toggle+0x28>
	}
	if(PIN == 14)
    24fe:	8e 30       	cpi	r24, 0x0E	; 14
    2500:	29 f4       	brne	.+10     	; 0x250c <PIN_toggle+0x1c>
	{
		PORTD ^= 0b01000000;
    2502:	2b b1       	in	r18, 0x0b	; 11
    2504:	90 e4       	ldi	r25, 0x40	; 64
    2506:	92 27       	eor	r25, r18
    2508:	9b b9       	out	0x0b, r25	; 11
    250a:	0d c0       	rjmp	.+26     	; 0x2526 <PIN_toggle+0x36>
	}
	if(PIN == 15)
    250c:	8f 30       	cpi	r24, 0x0F	; 15
    250e:	21 f4       	brne	.+8      	; 0x2518 <PIN_toggle+0x28>
	{
		PORTD ^= 0b10000000;
    2510:	9b b1       	in	r25, 0x0b	; 11
    2512:	90 58       	subi	r25, 0x80	; 128
    2514:	9b b9       	out	0x0b, r25	; 11
    2516:	0e c0       	rjmp	.+28     	; 0x2534 <PIN_toggle+0x44>
	}
	if(PIN == 16)
    2518:	80 31       	cpi	r24, 0x10	; 16
    251a:	29 f4       	brne	.+10     	; 0x2526 <PIN_toggle+0x36>
	{
		PORTB ^= 0b00000100;
    251c:	25 b1       	in	r18, 0x05	; 5
    251e:	94 e0       	ldi	r25, 0x04	; 4
    2520:	92 27       	eor	r25, r18
    2522:	95 b9       	out	0x05, r25	; 5
    2524:	0e c0       	rjmp	.+28     	; 0x2542 <PIN_toggle+0x52>
	}
	if(PIN == 17)
    2526:	81 31       	cpi	r24, 0x11	; 17
    2528:	29 f4       	brne	.+10     	; 0x2534 <PIN_toggle+0x44>
	{
		PORTC ^= 0b00010000;
    252a:	28 b1       	in	r18, 0x08	; 8
    252c:	90 e1       	ldi	r25, 0x10	; 16
    252e:	92 27       	eor	r25, r18
    2530:	98 b9       	out	0x08, r25	; 8
    2532:	0e c0       	rjmp	.+28     	; 0x2550 <PIN_toggle+0x60>
	}
	if(PIN == 18)
    2534:	82 31       	cpi	r24, 0x12	; 18
    2536:	29 f4       	brne	.+10     	; 0x2542 <PIN_toggle+0x52>
	{
		PORTC ^= 0b00100000;
    2538:	28 b1       	in	r18, 0x08	; 8
    253a:	90 e2       	ldi	r25, 0x20	; 32
    253c:	92 27       	eor	r25, r18
    253e:	98 b9       	out	0x08, r25	; 8
    2540:	0e c0       	rjmp	.+28     	; 0x255e <PIN_toggle+0x6e>
	}
	if(PIN == 22)
    2542:	86 31       	cpi	r24, 0x16	; 22
    2544:	29 f4       	brne	.+10     	; 0x2550 <PIN_toggle+0x60>
	{
		PORTC ^= 0b01000000;
    2546:	28 b1       	in	r18, 0x08	; 8
    2548:	90 e4       	ldi	r25, 0x40	; 64
    254a:	92 27       	eor	r25, r18
    254c:	98 b9       	out	0x08, r25	; 8
    254e:	0e c0       	rjmp	.+28     	; 0x256c <PIN_toggle+0x7c>
	}
	if(PIN == 23)
    2550:	87 31       	cpi	r24, 0x17	; 23
    2552:	29 f4       	brne	.+10     	; 0x255e <PIN_toggle+0x6e>
	{
		PORTB ^= 0b00001000;
    2554:	25 b1       	in	r18, 0x05	; 5
    2556:	98 e0       	ldi	r25, 0x08	; 8
    2558:	92 27       	eor	r25, r18
    255a:	95 b9       	out	0x05, r25	; 5
    255c:	0d c0       	rjmp	.+26     	; 0x2578 <PIN_toggle+0x88>
	}
	if(PIN == 24)
    255e:	88 31       	cpi	r24, 0x18	; 24
    2560:	29 f4       	brne	.+10     	; 0x256c <PIN_toggle+0x7c>
	{
		PORTB ^= 0b00010000;
    2562:	25 b1       	in	r18, 0x05	; 5
    2564:	90 e1       	ldi	r25, 0x10	; 16
    2566:	92 27       	eor	r25, r18
    2568:	95 b9       	out	0x05, r25	; 5
    256a:	0d c0       	rjmp	.+26     	; 0x2586 <PIN_toggle+0x96>
	}
	if(PIN == 25)
    256c:	89 31       	cpi	r24, 0x19	; 25
    256e:	21 f4       	brne	.+8      	; 0x2578 <PIN_toggle+0x88>
	{
		PORTC ^= 0b10000000;
    2570:	98 b1       	in	r25, 0x08	; 8
    2572:	90 58       	subi	r25, 0x80	; 128
    2574:	98 b9       	out	0x08, r25	; 8
    2576:	0e c0       	rjmp	.+28     	; 0x2594 <PIN_toggle+0xa4>
	}
	if(PIN == 26)
    2578:	8a 31       	cpi	r24, 0x1A	; 26
    257a:	29 f4       	brne	.+10     	; 0x2586 <PIN_toggle+0x96>
	{
		PORTB ^= 0b00100000;
    257c:	25 b1       	in	r18, 0x05	; 5
    257e:	90 e2       	ldi	r25, 0x20	; 32
    2580:	92 27       	eor	r25, r18
    2582:	95 b9       	out	0x05, r25	; 5
    2584:	0d c0       	rjmp	.+26     	; 0x25a0 <PIN_toggle+0xb0>
	}
	if(PIN == 27)
    2586:	8b 31       	cpi	r24, 0x1B	; 27
    2588:	29 f4       	brne	.+10     	; 0x2594 <PIN_toggle+0xa4>
	{
		PORTB ^= 0b01000000;
    258a:	25 b1       	in	r18, 0x05	; 5
    258c:	90 e4       	ldi	r25, 0x40	; 64
    258e:	92 27       	eor	r25, r18
    2590:	95 b9       	out	0x05, r25	; 5
    2592:	0d c0       	rjmp	.+26     	; 0x25ae <PIN_toggle+0xbe>
	}
	if(PIN == 28)
    2594:	8c 31       	cpi	r24, 0x1C	; 28
    2596:	21 f4       	brne	.+8      	; 0x25a0 <PIN_toggle+0xb0>
	{
		PORTB ^= 0b10000000;
    2598:	95 b1       	in	r25, 0x05	; 5
    259a:	90 58       	subi	r25, 0x80	; 128
    259c:	95 b9       	out	0x05, r25	; 5
    259e:	0e c0       	rjmp	.+28     	; 0x25bc <PIN_toggle+0xcc>
	}
	if(PIN == 29)
    25a0:	8d 31       	cpi	r24, 0x1D	; 29
    25a2:	29 f4       	brne	.+10     	; 0x25ae <PIN_toggle+0xbe>
	{
		PORTD ^= 0b00000001;
    25a4:	9b b1       	in	r25, 0x0b	; 11
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	89 27       	eor	r24, r25
    25aa:	8b b9       	out	0x0b, r24	; 11
    25ac:	08 95       	ret
	}
	if(PIN == 30)
    25ae:	8e 31       	cpi	r24, 0x1E	; 30
    25b0:	29 f4       	brne	.+10     	; 0x25bc <PIN_toggle+0xcc>
	{
		PORTC ^= 0b00000001;
    25b2:	98 b1       	in	r25, 0x08	; 8
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	89 27       	eor	r24, r25
    25b8:	88 b9       	out	0x08, r24	; 8
    25ba:	08 95       	ret
	}
	if(PIN == 32)
    25bc:	80 32       	cpi	r24, 0x20	; 32
    25be:	21 f4       	brne	.+8      	; 0x25c8 <PIN_toggle+0xd8>
	{
		PORTD ^= 0b00000010;
    25c0:	9b b1       	in	r25, 0x0b	; 11
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	89 27       	eor	r24, r25
    25c6:	8b b9       	out	0x0b, r24	; 11
    25c8:	08 95       	ret

000025ca <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    25ca:	85 b7       	in	r24, 0x35	; 53
    25cc:	8f 77       	andi	r24, 0x7F	; 127
    25ce:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    25d0:	83 e5       	ldi	r24, 0x53	; 83
    25d2:	8c bd       	out	0x2c, r24	; 44
    25d4:	08 95       	ret

000025d6 <SS_set_high>:
/*																		*/
/************************************************************************/

void SS_set_high(void) 
{
	PORTD |= (1 << 3);
    25d6:	5b 9a       	sbi	0x0b, 3	; 11
	delay_us(1);
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
    25e0:	08 95       	ret

000025e2 <spi_transfer2>:
	
	return receive_char;					// Transmission was successful, return the character that was received.
}

uint8_t spi_transfer2(uint8_t message)
{
    25e2:	cf 93       	push	r28
	//cmd_str(SRES);
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	PORTD &= (0xF7);
    25e4:	5b 98       	cbi	0x0b, 3	; 11
	//delay_cycles(10);
	*reg_ptr = message;
    25e6:	8e bd       	out	0x2e, r24	; 46
	//delay_cycles(10);
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    25e8:	0d b4       	in	r0, 0x2d	; 45
    25ea:	07 fc       	sbrc	r0, 7
    25ec:	06 c0       	rjmp	.+12     	; 0x25fa <spi_transfer2+0x18>
    25ee:	c9 ee       	ldi	r28, 0xE9	; 233
    25f0:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <spi_transfer2+0xe>
		{
			SS_set_high();
    25f4:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SS_set_high>
			return 0x00;						// Something went wrong, so the function times out.
    25f8:	09 c0       	rjmp	.+18     	; 0x260c <spi_transfer2+0x2a>
		}
	}
	delay_cycles(7);
    25fa:	87 e0       	ldi	r24, 0x07	; 7
    25fc:	0e 94 81 13 	call	0x2702	; 0x2702 <delay_cycles>
	SS_set_high();
    2600:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SS_set_high>
	
	delay_cycles(10);
    2604:	8a e0       	ldi	r24, 0x0A	; 10
    2606:	0e 94 81 13 	call	0x2702	; 0x2702 <delay_cycles>
		
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
    260a:	ce b5       	in	r28, 0x2e	; 46
		
	return receive_char;					// Transmission was successful, return the character that was received.
}
    260c:	8c 2f       	mov	r24, r28
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    2612:	44 9a       	sbi	0x08, 4	; 8
    2614:	08 95       	ret

00002616 <SS_set_low>:
/*																		*/
/************************************************************************/

void SS_set_low(void)
{
	PORTD &= (0xF7);
    2616:	5b 98       	cbi	0x0b, 3	; 11
	delay_us(1);
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
    2620:	08 95       	ret

00002622 <spi_transfer>:
/*		A successful transmission will return the byte which was		*/
/*		received on the MISO line during the transfer.					*/
/*																		*/
/************************************************************************/
uint8_t spi_transfer(uint8_t message)
{
    2622:	cf 93       	push	r28
    2624:	c8 2f       	mov	r28, r24
	uint8_t i, temp, temp2;
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	SS_set_low();
    2626:	0e 94 0b 13 	call	0x2616	; 0x2616 <SS_set_low>
	*reg_ptr = message;
    262a:	ce bd       	out	0x2e, r28	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    262c:	0d b4       	in	r0, 0x2d	; 45
    262e:	07 fc       	sbrc	r0, 7
    2630:	04 c0       	rjmp	.+8      	; 0x263a <spi_transfer+0x18>
    2632:	89 ee       	ldi	r24, 0xE9	; 233
    2634:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    2636:	f1 f7       	brne	.-4      	; 0x2634 <spi_transfer+0x12>
    2638:	04 c0       	rjmp	.+8      	; 0x2642 <spi_transfer+0x20>
	reg_ptr = SPDR_BASE;
	receive_char = *reg_ptr;
	
		//SS_set_high();
		
		delay_cycles(10);
    263a:	8a e0       	ldi	r24, 0x0A	; 10
    263c:	0e 94 81 13 	call	0x2702	; 0x2702 <delay_cycles>
		//temp2 = temp2 >> 7;
		//temp2 = temp2 << (7 - i);		
		//temp += temp2;
	//}
	
	return receive_char;					// Transmission was successful, return the character that was received.
    2640:	8c 2f       	mov	r24, r28
}
    2642:	cf 91       	pop	r28
    2644:	08 95       	ret

00002646 <SS1_set_low>:
	delay_us(1);
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    2646:	44 98       	cbi	0x08, 4	; 8
    2648:	08 95       	ret

0000264a <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    264a:	0f 93       	push	r16
    264c:	1f 93       	push	r17
    264e:	cf 93       	push	r28
    2650:	df 93       	push	r29
    2652:	8c 01       	movw	r16, r24
    2654:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    2656:	0e 94 23 13 	call	0x2646	; 0x2646 <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    265a:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    265c:	80 e8       	ldi	r24, 0x80	; 128
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>
	*high = *reg_ptr;
    2664:	8e b5       	in	r24, 0x2e	; 46
    2666:	f8 01       	movw	r30, r16
    2668:	80 83       	st	Z, r24
	delay_ms(128);
    266a:	80 e8       	ldi	r24, 0x80	; 128
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>
	*low = *reg_ptr;	
    2672:	8e b5       	in	r24, 0x2e	; 46
    2674:	88 83       	st	Y, r24
	SS1_set_high();
    2676:	0e 94 09 13 	call	0x2612	; 0x2612 <SS1_set_high>
	
	return;
}
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    2684:	1f 92       	push	r1
    2686:	0f 92       	push	r0
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	0f 92       	push	r0
    268c:	11 24       	eor	r1, r1
    268e:	8f 93       	push	r24
	CTC_flag = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	80 93 f5 03 	sts	0x03F5, r24
}
    2696:	8f 91       	pop	r24
    2698:	0f 90       	pop	r0
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	0f 90       	pop	r0
    269e:	1f 90       	pop	r1
    26a0:	18 95       	reti

000026a2 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    26a2:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    26a6:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    26aa:	8a e0       	ldi	r24, 0x0A	; 10
    26ac:	80 93 81 00 	sts	0x0081, r24
    26b0:	08 95       	ret

000026b2 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    26b2:	10 92 f5 03 	sts	0x03F5, r1
	TCNT1 = 0x0000; //Clear timer
    26b6:	10 92 85 00 	sts	0x0085, r1
    26ba:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    26be:	90 93 89 00 	sts	0x0089, r25
    26c2:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    26cc:	80 91 f5 03 	lds	r24, 0x03F5
    26d0:	88 23       	and	r24, r24
    26d2:	e1 f3       	breq	.-8      	; 0x26cc <delay_us+0x1a>
}
    26d4:	08 95       	ret

000026d6 <delay_ms>:

void delay_ms(uint16_t ms) {
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	51 f0       	breq	.+20     	; 0x26f8 <delay_ms+0x22>
    26e4:	c0 e0       	ldi	r28, 0x00	; 0
    26e6:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    26e8:	88 ee       	ldi	r24, 0xE8	; 232
    26ea:	93 e0       	ldi	r25, 0x03	; 3
    26ec:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    26f0:	21 96       	adiw	r28, 0x01	; 1
    26f2:	c0 17       	cp	r28, r16
    26f4:	d1 07       	cpc	r29, r17
    26f6:	c1 f7       	brne	.-16     	; 0x26e8 <delay_ms+0x12>
		delay_us(1000);
	}
}
    26f8:	df 91       	pop	r29
    26fa:	cf 91       	pop	r28
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	08 95       	ret

00002702 <delay_cycles>:

void delay_cycles(uint8_t cycles)	// @ 8 MHz, 1 cycle = 125 ns
{
	uint8_t i;
	
	for (i = 0; i < cycles; i++)
    2702:	88 23       	and	r24, r24
    2704:	21 f0       	breq	.+8      	; 0x270e <delay_cycles+0xc>
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9f 5f       	subi	r25, 0xFF	; 255
    270a:	98 13       	cpse	r25, r24
    270c:	fd cf       	rjmp	.-6      	; 0x2708 <delay_cycles+0x6>
    270e:	08 95       	ret

00002710 <reg_read>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read(uint8_t addr)
{
    2710:	cf 93       	push	r28
    2712:	c8 2f       	mov	r28, r24
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	SS_set_low();
    2714:	0e 94 0b 13 	call	0x2616	; 0x2616 <SS_set_low>
	msg = spi_transfer(addr_new);		// Send the desired address
    2718:	80 e8       	ldi	r24, 0x80	; 128
    271a:	8c 0f       	add	r24, r28
    271c:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	delay_us(1);
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	msg = spi_transfer(0x00);
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
    272e:	c8 2f       	mov	r28, r24

	SS_set_high();
    2730:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SS_set_high>
	
	delay_ms(1);
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>
	
	return msg;
}
    273c:	8c 2f       	mov	r24, r28
    273e:	cf 91       	pop	r28
    2740:	08 95       	ret

00002742 <reg_write>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	d8 2f       	mov	r29, r24
    2748:	c6 2f       	mov	r28, r22
	uint8_t msg, check, i;
	
	SS_set_low();
    274a:	0e 94 0b 13 	call	0x2616	; 0x2616 <SS_set_low>
	msg = spi_transfer(addr);		// Send the desired address
    274e:	8d 2f       	mov	r24, r29
    2750:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	delay_us(1);
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    275c:	8c 2f       	mov	r24, r28
    275e:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	SS_set_high();
    2762:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SS_set_high>
	
	delay_ms(1);
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>

	return;
}
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	08 95       	ret

00002774 <reg_read2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

uint8_t reg_read2F(uint8_t addr)
{
    2774:	cf 93       	push	r28
    2776:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b10101111;
	
	SS_set_low();
    2778:	0e 94 0b 13 	call	0x2616	; 0x2616 <SS_set_low>
	msg = spi_transfer(msg);
    277c:	8f ea       	ldi	r24, 0xAF	; 175
    277e:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	delay_us(1);
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    278a:	8c 2f       	mov	r24, r28
    278c:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	delay_us(1);
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	msg = spi_transfer(0x00);
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
    279e:	c8 2f       	mov	r28, r24
	SS_set_high();
    27a0:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SS_set_high>
	delay_ms(1);
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>
	return msg;
}
    27ac:	8c 2f       	mov	r24, r28
    27ae:	cf 91       	pop	r28
    27b0:	08 95       	ret

000027b2 <cmd_str>:
/*	CC1120.																*/
/*																		*/
/************************************************************************/

uint8_t cmd_str(uint8_t addr)
{
    27b2:	cf 93       	push	r28
	uint8_t msg;
	
	msg = spi_transfer2(addr);
    27b4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <spi_transfer2>
    27b8:	c8 2f       	mov	r28, r24
	
	delay_us(1);
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	return msg;
}
    27c2:	8c 2f       	mov	r24, r28
    27c4:	cf 91       	pop	r28
    27c6:	08 95       	ret

000027c8 <reg_write2F>:
/*		address on the CC1120 transceiver (extended address)		    */
/*																		*/
/************************************************************************/

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	d8 2f       	mov	r29, r24
    27ce:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    27d0:	8d e3       	ldi	r24, 0x3D	; 61
    27d2:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
	uint8_t msg, i, check;
	msg = 0b00101111;
	
	SS_set_low();
    27d6:	0e 94 0b 13 	call	0x2616	; 0x2616 <SS_set_low>
	spi_transfer(msg);
    27da:	8f e2       	ldi	r24, 0x2F	; 47
    27dc:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	delay_us(1);
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    27e8:	8d 2f       	mov	r24, r29
    27ea:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	delay_us(1);
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    27f6:	8c 2f       	mov	r24, r28
    27f8:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	SS_set_high();
    27fc:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SS_set_high>
	delay_ms(1);
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>

	return;
}
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	08 95       	ret

0000280e <dir_FIFO_write>:
/*	on the CC1120's FIFO and a byte of data which is written to the FIFO*/
/*																		*/
/************************************************************************/

void dir_FIFO_write(uint8_t addr, uint8_t data)
{
    280e:	cf 93       	push	r28
    2810:	df 93       	push	r29
    2812:	d8 2f       	mov	r29, r24
    2814:	c6 2f       	mov	r28, r22
	cmd_str(SNOP);
    2816:	8d e3       	ldi	r24, 0x3D	; 61
    2818:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
	uint8_t msg;
	msg = 0b00111110;
	
	SS_set_low();
    281c:	0e 94 0b 13 	call	0x2616	; 0x2616 <SS_set_low>
	spi_transfer(msg);
    2820:	8e e3       	ldi	r24, 0x3E	; 62
    2822:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	delay_us(1);
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	msg = spi_transfer(addr);		// Send the desired address
    282e:	8d 2f       	mov	r24, r29
    2830:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	delay_us(1);
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 59 13 	call	0x26b2	; 0x26b2 <delay_us>
	msg = spi_transfer(data);		// Send the desired data
    283c:	8c 2f       	mov	r24, r28
    283e:	0e 94 11 13 	call	0x2622	; 0x2622 <spi_transfer>
	SS_set_high();
    2842:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <SS_set_high>
	delay_ms(1);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>
	
	return;
}
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	08 95       	ret

00002854 <reg_write_bit>:
/*		address on the CC1120 transceiver (non-extended address)		*/
/*																		*/
/************************************************************************/

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    2854:	1f 93       	push	r17
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	c8 2f       	mov	r28, r24
    285c:	d6 2f       	mov	r29, r22
    285e:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read(reg);
    2860:	0e 94 88 13 	call	0x2710	; 0x2710 <reg_read>
	if(!data)
    2864:	11 11       	cpse	r17, r1
    2866:	0c c0       	rjmp	.+24     	; 0x2880 <reg_write_bit+0x2c>
	{
		temp = ~(1 << n);
    2868:	e1 e0       	ldi	r30, 0x01	; 1
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	af 01       	movw	r20, r30
    286e:	02 c0       	rjmp	.+4      	; 0x2874 <reg_write_bit+0x20>
    2870:	44 0f       	add	r20, r20
    2872:	55 1f       	adc	r21, r21
    2874:	da 95       	dec	r29
    2876:	e2 f7       	brpl	.-8      	; 0x2870 <reg_write_bit+0x1c>
    2878:	40 95       	com	r20
		msg = temp & msg;
    287a:	68 2f       	mov	r22, r24
    287c:	64 23       	and	r22, r20
    287e:	0a c0       	rjmp	.+20     	; 0x2894 <reg_write_bit+0x40>
	}
	else
	{
		temp = 1 << n;
    2880:	41 e0       	ldi	r20, 0x01	; 1
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	9a 01       	movw	r18, r20
    2886:	02 c0       	rjmp	.+4      	; 0x288c <reg_write_bit+0x38>
    2888:	22 0f       	add	r18, r18
    288a:	33 1f       	adc	r19, r19
    288c:	da 95       	dec	r29
    288e:	e2 f7       	brpl	.-8      	; 0x2888 <reg_write_bit+0x34>
		msg = temp | msg;
    2890:	68 2f       	mov	r22, r24
    2892:	62 2b       	or	r22, r18
	}
	reg_write(reg, msg);
    2894:	8c 2f       	mov	r24, r28
    2896:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
	return;
}
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	1f 91       	pop	r17
    28a0:	08 95       	ret

000028a2 <reg_write_bit2F>:
/*		address on the CC1120 transceiver (extended address)			*/
/*																		*/
/************************************************************************/

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    28a2:	1f 93       	push	r17
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	c8 2f       	mov	r28, r24
    28aa:	d6 2f       	mov	r29, r22
    28ac:	14 2f       	mov	r17, r20
	uint8_t msg, temp;
	msg = reg_read2F(reg);
    28ae:	0e 94 ba 13 	call	0x2774	; 0x2774 <reg_read2F>
	if(!data)
    28b2:	11 11       	cpse	r17, r1
    28b4:	0c c0       	rjmp	.+24     	; 0x28ce <reg_write_bit2F+0x2c>
	{
		temp = ~(1 << n);
    28b6:	e1 e0       	ldi	r30, 0x01	; 1
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	af 01       	movw	r20, r30
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <reg_write_bit2F+0x20>
    28be:	44 0f       	add	r20, r20
    28c0:	55 1f       	adc	r21, r21
    28c2:	da 95       	dec	r29
    28c4:	e2 f7       	brpl	.-8      	; 0x28be <reg_write_bit2F+0x1c>
    28c6:	40 95       	com	r20
		msg = temp & msg;
    28c8:	68 2f       	mov	r22, r24
    28ca:	64 23       	and	r22, r20
    28cc:	0a c0       	rjmp	.+20     	; 0x28e2 <reg_write_bit2F+0x40>
	}
	else
	{
		temp = 1 << n;
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	9a 01       	movw	r18, r20
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <reg_write_bit2F+0x38>
    28d6:	22 0f       	add	r18, r18
    28d8:	33 1f       	adc	r19, r19
    28da:	da 95       	dec	r29
    28dc:	e2 f7       	brpl	.-8      	; 0x28d6 <reg_write_bit2F+0x34>
		msg = temp | msg;
    28de:	68 2f       	mov	r22, r24
    28e0:	62 2b       	or	r22, r18
	}
	reg_write2F(reg, msg);
    28e2:	8c 2f       	mov	r24, r28
    28e4:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
	return;
}
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	1f 91       	pop	r17
    28ee:	08 95       	ret

000028f0 <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    28f0:	0e 94 0b 13 	call	0x2616	; 0x2616 <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	  
	//RESET 
    cmd_str(SRES);             //SRES                  reset chip
    28f4:	80 e3       	ldi	r24, 0x30	; 48
    28f6:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
      
    //Reset RX FIFO
    cmd_str(SFRX);             //SFRX                  flush RX FIFO
    28fa:	8a e3       	ldi	r24, 0x3A	; 58
    28fc:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
      
    //Reset TX FIFO
    cmd_str(SFTX);             //SFTX                  flush TX FIFO
    2900:	8b e3       	ldi	r24, 0x3B	; 59
    2902:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
		/*                                                                      */
		/************************************************************************/
	//SETUP FROM SBS ARDUINO CODE
//high performance settings

reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    2906:	60 e0       	ldi	r22, 0x00	; 0
    2908:	82 e1       	ldi	r24, 0x12	; 18
    290a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    290e:	6f e5       	ldi	r22, 0x5F	; 95
    2910:	83 e1       	ldi	r24, 0x13	; 19
    2912:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    2916:	60 e4       	ldi	r22, 0x40	; 64
    2918:	86 e1       	ldi	r24, 0x16	; 22
    291a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    291e:	6e e0       	ldi	r22, 0x0E	; 14
    2920:	87 e1       	ldi	r24, 0x17	; 23
    2922:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    2926:	63 e0       	ldi	r22, 0x03	; 3
    2928:	89 e1       	ldi	r24, 0x19	; 25
    292a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    292e:	63 e3       	ldi	r22, 0x33	; 51
    2930:	8b e1       	ldi	r24, 0x1B	; 27
    2932:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    2936:	67 e1       	ldi	r22, 0x17	; 23
    2938:	8d e1       	ldi	r24, 0x1D	; 29
    293a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    293e:	60 e5       	ldi	r22, 0x50	; 80
    2940:	8f e1       	ldi	r24, 0x1F	; 31
    2942:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
    2946:	6e e6       	ldi	r22, 0x6E	; 110
    2948:	80 e2       	ldi	r24, 0x20	; 32
    294a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    294e:	64 e1       	ldi	r22, 0x14	; 20
    2950:	81 e2       	ldi	r24, 0x21	; 33
    2952:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    2956:	6c ea       	ldi	r22, 0xAC	; 172
    2958:	82 e2       	ldi	r24, 0x22	; 34
    295a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
    295e:	64 eb       	ldi	r22, 0xB4	; 180
    2960:	87 e2       	ldi	r24, 0x27	; 39
    2962:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
    2966:	6e e0       	ldi	r22, 0x0E	; 14
    2968:	82 e3       	ldi	r24, 0x32	; 50
    296a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
    296e:	63 e0       	ldi	r22, 0x03	; 3
    2970:	86 e3       	ldi	r24, 0x36	; 54
    2972:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>


//For test purposes only, (2nd block, deleted first one) use values from SmartRF for some bits

//High performance RX
reg_write(0x08, 0x0B);            //
    2976:	6b e0       	ldi	r22, 0x0B	; 11
    2978:	88 e0       	ldi	r24, 0x08	; 8
    297a:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x0C, 0x1C);            //
    297e:	6c e1       	ldi	r22, 0x1C	; 28
    2980:	8c e0       	ldi	r24, 0x0C	; 12
    2982:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x10, 0x00);            //
    2986:	60 e0       	ldi	r22, 0x00	; 0
    2988:	80 e1       	ldi	r24, 0x10	; 16
    298a:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x11, 0x04);            //
    298e:	64 e0       	ldi	r22, 0x04	; 4
    2990:	81 e1       	ldi	r24, 0x11	; 17
    2992:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x13, 0x05);            //
    2996:	65 e0       	ldi	r22, 0x05	; 5
    2998:	83 e1       	ldi	r24, 0x13	; 19
    299a:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x1C, 0xA9);            //
    299e:	69 ea       	ldi	r22, 0xA9	; 169
    29a0:	8c e1       	ldi	r24, 0x1C	; 28
    29a2:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x1D, 0xCF);            //
    29a6:	6f ec       	ldi	r22, 0xCF	; 207
    29a8:	8d e1       	ldi	r24, 0x1D	; 29
    29aa:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x1E, 0x00);            //
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	8e e1       	ldi	r24, 0x1E	; 30
    29b2:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x20, 0x03);            //
    29b6:	63 e0       	ldi	r22, 0x03	; 3
    29b8:	80 e2       	ldi	r24, 0x20	; 32
    29ba:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write2F(0x00, 0x00);          //
    29be:	60 e0       	ldi	r22, 0x00	; 0
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>

//modulation and freq deviation settings
reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    29c6:	68 e4       	ldi	r22, 0x48	; 72
    29c8:	8a e0       	ldi	r24, 0x0A	; 10
    29ca:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    29ce:	65 e0       	ldi	r22, 0x05	; 5
    29d0:	8b e0       	ldi	r24, 0x0B	; 11
    29d2:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x21, 0b00000100);       //FS_CFG: B00010100      set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector disabled
    29d6:	64 e0       	ldi	r22, 0x04	; 4
    29d8:	81 e2       	ldi	r24, 0x21	; 33
    29da:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>

//set preamble
reg_write(PREAMBLE_CFG1, 0b00001101);        //PREAMBLE_CFG1: 0x0D   Enable Preamble, 1.5 bytes Preamble, 0x55 Word
    29de:	6d e0       	ldi	r22, 0x0D	; 13
    29e0:	8d e0       	ldi	r24, 0x0D	; 13
    29e2:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write_bit(PREAMBLE_CFG0, 5, 1);        //PQT_EN: 0x01           Preamble detection enabled
    29e6:	41 e0       	ldi	r20, 0x01	; 1
    29e8:	65 e0       	ldi	r22, 0x05	; 5
    29ea:	8e e0       	ldi	r24, 0x0E	; 14
    29ec:	0e 94 2a 14 	call	0x2854	; 0x2854 <reg_write_bit>

//TOC_LIMIT
reg_write_bit2F(0x02, 7, 0);        //TOC_LIMIT: 0x00      Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	67 e0       	ldi	r22, 0x07	; 7
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	0e 94 51 14 	call	0x28a2	; 0x28a2 <reg_write_bit2F>
reg_write_bit2F(0x02, 6, 0);        //TOC_LIMIT: 0x00      Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	66 e0       	ldi	r22, 0x06	; 6
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	0e 94 51 14 	call	0x28a2	; 0x28a2 <reg_write_bit2F>

//set SYNC word
reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	66 e0       	ldi	r22, 0x06	; 6
    2a08:	88 e0       	ldi	r24, 0x08	; 8
    2a0a:	0e 94 2a 14 	call	0x2854	; 0x2854 <reg_write_bit>
reg_write(0x09, 0x17);           //SYNC_CFG0: B00010111   32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    2a0e:	67 e1       	ldi	r22, 0x17	; 23
    2a10:	89 e0       	ldi	r24, 0x09	; 9
    2a12:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x04, 0x93);            //SYNC3: 0x93            Set SYNC word bits 31:24
    2a16:	63 e9       	ldi	r22, 0x93	; 147
    2a18:	84 e0       	ldi	r24, 0x04	; 4
    2a1a:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x05, 0x0B);            //SYNC2: 0x0B            Set SYNC word bits 23:16
    2a1e:	6b e0       	ldi	r22, 0x0B	; 11
    2a20:	85 e0       	ldi	r24, 0x05	; 5
    2a22:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x06, 0x51);            //SYNC1: 0x51            Set SYNC word bits 15:8
    2a26:	61 e5       	ldi	r22, 0x51	; 81
    2a28:	86 e0       	ldi	r24, 0x06	; 6
    2a2a:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x07, 0xDE);            //SYNC0: 0xDE            Set SYNC word bits 7:0
    2a2e:	6e ed       	ldi	r22, 0xDE	; 222
    2a30:	87 e0       	ldi	r24, 0x07	; 7
    2a32:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>

//set packets
reg_write_bit(0x12, 6, 1);        //FIFO_EN: 0             FIFO enable set to true
    2a36:	41 e0       	ldi	r20, 0x01	; 1
    2a38:	66 e0       	ldi	r22, 0x06	; 6
    2a3a:	82 e1       	ldi	r24, 0x12	; 18
    2a3c:	0e 94 2a 14 	call	0x2854	; 0x2854 <reg_write_bit>
reg_write_bit(0x13, 6, 0);        //TRANSPARENT_MODE_EN: 0 Disable transparent mode
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	66 e0       	ldi	r22, 0x06	; 6
    2a44:	83 e1       	ldi	r24, 0x13	; 19
    2a46:	0e 94 2a 14 	call	0x2854	; 0x2854 <reg_write_bit>
reg_write(0x26, 0b00000000);       //PKT_CFG2: 0x00         set FIFO mode
    2a4a:	60 e0       	ldi	r22, 0x00	; 0
    2a4c:	86 e2       	ldi	r24, 0x26	; 38
    2a4e:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x27, 0b00110000);       //PKT_CFG1: 0x30         set address check and 0xFF broadcast
    2a52:	60 e3       	ldi	r22, 0x30	; 48
    2a54:	87 e2       	ldi	r24, 0x27	; 39
    2a56:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x28, 0b00100000);       //PKT_CFG0: 0x20         set variable packet length
    2a5a:	60 e2       	ldi	r22, 0x20	; 32
    2a5c:	88 e2       	ldi	r24, 0x28	; 40
    2a5e:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x2E, 0x7F);            //PKT_LEN: 0x7F          set packet max packet length to 0x7F
    2a62:	6f e7       	ldi	r22, 0x7F	; 127
    2a64:	8e e2       	ldi	r24, 0x2E	; 46
    2a66:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x1F, 'b');  //DEV_ADDR register is set to DEVICE_ADDRESS
    2a6a:	62 e6       	ldi	r22, 0x62	; 98
    2a6c:	8f e1       	ldi	r24, 0x1F	; 31
    2a6e:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x29, 0b00101110);       //RFEND_CFG1: 0x2E       go to TX after a good packet
    2a72:	6e e2       	ldi	r22, 0x2E	; 46
    2a74:	89 e2       	ldi	r24, 0x29	; 41
    2a76:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>
reg_write(0x2A, 0b00110000);       //RFEND_CFG0: 0x30       go to RX after transmitting a packet
    2a7a:	60 e3       	ldi	r22, 0x30	; 48
    2a7c:	8a e2       	ldi	r24, 0x2A	; 42
    2a7e:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>


//set power level
reg_write(0x2B, 0b01111111);       //PA_CFG2: 0x7F          set POWER_RAMP to 64 (output power to 14.5dBm, equation 21)
    2a82:	6f e7       	ldi	r22, 0x7F	; 127
    2a84:	8b e2       	ldi	r24, 0x2B	; 43
    2a86:	0e 94 a1 13 	call	0x2742	; 0x2742 <reg_write>

//frequency offset setting
reg_write2F(0x0A, 0);             //FREQOFF1: 0x00         set frequency offset to 0
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	8a e0       	ldi	r24, 0x0A	; 10
    2a8e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x0B, 0);             //FREQOFF0: 0x00
    2a92:	60 e0       	ldi	r22, 0x00	; 0
    2a94:	8b e0       	ldi	r24, 0x0B	; 11
    2a96:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>

//Frequency setting
reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    2a9a:	6c e6       	ldi	r22, 0x6C	; 108
    2a9c:	8c e0       	ldi	r24, 0x0C	; 12
    2a9e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    2aa2:	60 e8       	ldi	r22, 0x80	; 128
    2aa4:	8d e0       	ldi	r24, 0x0D	; 13
    2aa6:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
reg_write2F(0x0E, 0x00);          //FREQ0: 0x00
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	8e e0       	ldi	r24, 0x0E	; 14
    2aae:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>

	//set up GPIO1 to 17
	//reg_write(0x00, 17);
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    2ab2:	83 e3       	ldi	r24, 0x33	; 51
    2ab4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
	delay_ms(250);
    2ab8:	8a ef       	ldi	r24, 0xFA	; 250
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>

	cmd_str(SAFC);					 // Automatic frequency control
    2ac0:	87 e3       	ldi	r24, 0x37	; 55
    2ac2:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
	delay_ms(250);
    2ac6:	8a ef       	ldi	r24, 0xFA	; 250
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <delay_ms>
	
	//reg_write2F(0xD2, 0x00);
	//reg_write2F(0xD4, 0xFF);
	
	msg_received = 0;
    2ace:	10 92 e2 03 	sts	0x03E2, r1

	cmd_str(SRX);                    // Put in RX mode
    2ad2:	84 e3       	ldi	r24, 0x34	; 52
    2ad4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
    2ad8:	08 95       	ret

00002ada <transceiver_send>:
		cmd_str(SRX);
	}
	return;
}

void transceiver_send(){
    2ada:	cf 93       	push	r28
	// The first byte is the length of the packet (message + 1 for the address)
	//dir_FIFO_write(0,12);
	// The second byte is the address
	//dir_FIFO_write(1,0x00);
	// The rest is the actual data
	cmd_str(SIDLE);
    2adc:	86 e3       	ldi	r24, 0x36	; 54
    2ade:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
	cmd_str(SFTX);
    2ae2:	8b e3       	ldi	r24, 0x3B	; 59
    2ae4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
	
	dir_FIFO_write(0, 0x7F);
    2ae8:	6f e7       	ldi	r22, 0x7F	; 127
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	0e 94 07 14 	call	0x280e	; 0x280e <dir_FIFO_write>
	for(i=1; i<0x7F; i++)
    2af0:	c1 e0       	ldi	r28, 0x01	; 1
	{
		dir_FIFO_write(i, 0xFF);
    2af2:	6f ef       	ldi	r22, 0xFF	; 255
    2af4:	8c 2f       	mov	r24, r28
    2af6:	0e 94 07 14 	call	0x280e	; 0x280e <dir_FIFO_write>
	// The rest is the actual data
	cmd_str(SIDLE);
	cmd_str(SFTX);
	
	dir_FIFO_write(0, 0x7F);
	for(i=1; i<0x7F; i++)
    2afa:	cf 5f       	subi	r28, 0xFF	; 255
    2afc:	cf 37       	cpi	r28, 0x7F	; 127
    2afe:	c9 f7       	brne	.-14     	; 0x2af2 <transceiver_send+0x18>
		dir_FIFO_write(i, 0xFF);
	}

	
	//set up TX FIFO pointers
	reg_write2F(TXFIRST, 0x00);            //set TX FIRST to 0
    2b00:	60 e0       	ldi	r22, 0x00	; 0
    2b02:	83 ed       	ldi	r24, 0xD3	; 211
    2b04:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
	reg_write2F(TXLAST, 0x7E); //set TX LAST (maximum OF 0X7F)
    2b08:	6e e7       	ldi	r22, 0x7E	; 126
    2b0a:	85 ed       	ldi	r24, 0xD5	; 213
    2b0c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
	reg_write2F(RXFIRST, 0x00);              //set TX FIRST to 0
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	82 ed       	ldi	r24, 0xD2	; 210
    2b14:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
	reg_write2F(RXLAST, 0x00); //set TX LAST (maximum OF 0X7F)
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	84 ed       	ldi	r24, 0xD4	; 212
    2b1c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <reg_write2F>
	//strobe commands to start TX
	cmd_str(STX);
    2b20:	85 e3       	ldi	r24, 0x35	; 53
    2b22:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <cmd_str>
}
    2b26:	cf 91       	pop	r28
    2b28:	08 95       	ret

00002b2a <__tablejump2__>:
    2b2a:	ee 0f       	add	r30, r30
    2b2c:	ff 1f       	adc	r31, r31

00002b2e <__tablejump__>:
    2b2e:	05 90       	lpm	r0, Z+
    2b30:	f4 91       	lpm	r31, Z
    2b32:	e0 2d       	mov	r30, r0
    2b34:	09 94       	ijmp

00002b36 <_exit>:
    2b36:	f8 94       	cli

00002b38 <__stop_program>:
    2b38:	ff cf       	rjmp	.-2      	; 0x2b38 <__stop_program>
