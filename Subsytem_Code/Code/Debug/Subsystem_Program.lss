
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000052  00800100  00800100  00001862  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000230  00000000  00000000  00001892  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002b11  00000000  00000000  00001ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000c69  00000000  00000000  000045d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ea8  00000000  00000000  0000523c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004b4  00000000  00000000  000060e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000006e7  00000000  00000000  00006598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001bfd  00000000  00000000  00006c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001e8  00000000  00000000  0000887c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	78 01       	movw	r14, r16
      7e:	0a 02       	muls	r16, r26
      80:	94 02       	muls	r25, r20
      82:	08 03       	fmul	r16, r16
      84:	48 03       	fmul	r20, r16
      86:	c4 03       	fmuls	r20, r20
      88:	41 04       	cpc	r4, r1
      8a:	de 04       	cpc	r13, r14
      8c:	84 05       	cpc	r24, r4
      8e:	72 01       	movw	r14, r4
      90:	8d 06       	cpc	r8, r29

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 35       	cpi	r26, 0x52	; 82
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 69 08 	call	0x10d2	; 0x10d2 <main>
      b2:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      ce:	e8 e7       	ldi	r30, 0x78	; 120
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	20 81       	ld	r18, Z
      d4:	dc 01       	movw	r26, r24
      d6:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
      d8:	21 81       	ldd	r18, Z+1	; 0x01
      da:	11 96       	adiw	r26, 0x01	; 1
      dc:	2c 93       	st	X, r18
      de:	08 95       	ret

000000e0 <can_send_message>:
				LED_toggle(LED3);
				delay_ms(100);
				send_now = 1;
			}
			
			if ((receive_arr[0] == 0x55) && (receive_arr[1] == 0x55) && (receive_arr[2] == 0x55) && (receive_arr[3] == 0x55)
      e0:	28 e1       	ldi	r18, 0x18	; 24
      e2:	31 e0       	ldi	r19, 0x01	; 1
      e4:	30 93 28 01 	sts	0x0128, r19
      e8:	20 93 27 01 	sts	0x0127, r18
      ec:	10 92 2b 01 	sts	0x012B, r1
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	70 93 23 01 	sts	0x0123, r23
      f6:	60 93 22 01 	sts	0x0122, r22
      fa:	22 e0       	ldi	r18, 0x02	; 2
			&& (receive_arr[4] == 0x55) && (receive_arr[5] == 0x55) && (receive_arr[6] == 0x55) && (receive_arr[7] == 0x55))
      fc:	20 93 21 01 	sts	0x0121, r18
     100:	28 e0       	ldi	r18, 0x08	; 8
     102:	20 93 26 01 	sts	0x0126, r18
     106:	24 e0       	ldi	r18, 0x04	; 4
     108:	20 93 4f 01 	sts	0x014F, r18
     10c:	dc 01       	movw	r26, r24
     10e:	e8 e1       	ldi	r30, 0x18	; 24
     110:	f1 e0       	ldi	r31, 0x01	; 1
     112:	80 e2       	ldi	r24, 0x20	; 32
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	2d 91       	ld	r18, X+
     118:	21 93       	st	Z+, r18
     11a:	e8 17       	cp	r30, r24
     11c:	f9 07       	cpc	r31, r25
			{
				LED_toggle(LED7);	//Toggle LED7 when the appropriate message is received.
     11e:	d9 f7       	brne	.-10     	; 0x116 <can_send_message+0x36>
     120:	60 91 4f 01 	lds	r22, 0x014F
				delay_ms(100);
     124:	80 e2       	ldi	r24, 0x20	; 32
     126:	91 e0       	ldi	r25, 0x01	; 1
     128:	0e 94 2e 01 	call	0x25c	; 0x25c <can_cmd>
				LED_toggle(LED7);
     12c:	81 11       	cpse	r24, r1
     12e:	f8 cf       	rjmp	.-16     	; 0x120 <can_send_message+0x40>
     130:	60 91 4f 01 	lds	r22, 0x014F
				delay_ms(100);
     134:	80 e2       	ldi	r24, 0x20	; 32
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <can_get_status>
				send_data = 1;
     13c:	81 30       	cpi	r24, 0x01	; 1
     13e:	c1 f3       	breq	.-16     	; 0x130 <can_send_message+0x50>
     140:	08 95       	ret

00000142 <can_init_mobs>:
			}
			
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     142:	8d e2       	ldi	r24, 0x2D	; 45
				LED_toggle(LED7);
				delay_ms(100);
				send_data = 1;
			}
			
			for (i = 0; i < 8; i ++)
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	90 93 28 01 	sts	0x0128, r25
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     14a:	80 93 27 01 	sts	0x0127, r24
     14e:	10 92 2b 01 	sts	0x012B, r1
     152:	84 e1       	ldi	r24, 0x14	; 20
     154:	90 e0       	ldi	r25, 0x00	; 0
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     156:	90 93 23 01 	sts	0x0123, r25
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     15a:	80 93 22 01 	sts	0x0122, r24
     15e:	85 e0       	ldi	r24, 0x05	; 5
     160:	80 93 21 01 	sts	0x0121, r24
     164:	88 e0       	ldi	r24, 0x08	; 8
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     166:	80 93 26 01 	sts	0x0126, r24
     16a:	10 92 4f 01 	sts	0x014F, r1
		message.dlc = 8;			 // Max length of a CAN message.
     16e:	60 91 4f 01 	lds	r22, 0x014F
		mob_number = 0;
     172:	80 e2       	ldi	r24, 0x20	; 32
     174:	91 e0       	ldi	r25, 0x01	; 1
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     176:	0e 94 2e 01 	call	0x25c	; 0x25c <can_cmd>
     17a:	81 11       	cpse	r24, r1
     17c:	f8 cf       	rjmp	.-16     	; 0x16e <can_init_mobs+0x2c>
     17e:	87 e4       	ldi	r24, 0x47	; 71
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	90 93 28 01 	sts	0x0128, r25
     186:	80 93 27 01 	sts	0x0127, r24
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     18a:	10 92 2b 01 	sts	0x012B, r1
		mob_number = 0;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     18e:	89 e1       	ldi	r24, 0x19	; 25
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	90 93 23 01 	sts	0x0123, r25
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
     196:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     19a:	85 e0       	ldi	r24, 0x05	; 5
     19c:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;				// Max length of a CAN message.
     1a0:	98 e0       	ldi	r25, 0x08	; 8
     1a2:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     1a6:	80 93 4f 01 	sts	0x014F, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     1aa:	60 91 4f 01 	lds	r22, 0x014F
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	0e 94 2e 01 	call	0x25c	; 0x25c <can_cmd>
     1b6:	81 11       	cpse	r24, r1
     1b8:	f8 cf       	rjmp	.-16     	; 0x1aa <can_init_mobs+0x68>
}
     1ba:	08 95       	ret

000001bc <can_clear_all_mob>:
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     1bc:	80 e0       	ldi	r24, 0x00	; 0
     1be:	ad ee       	ldi	r26, 0xED	; 237
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	3e ee       	ldi	r19, 0xEE	; 238
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	98 2f       	mov	r25, r24
     1c8:	92 95       	swap	r25
     1ca:	90 7f       	andi	r25, 0xF0	; 240
     1cc:	9c 93       	st	X, r25
     1ce:	e3 2f       	mov	r30, r19
     1d0:	f2 2f       	mov	r31, r18
     1d2:	11 92       	st	Z+, r1
     1d4:	e8 3f       	cpi	r30, 0xF8	; 248
     1d6:	f1 05       	cpc	r31, r1
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <can_clear_all_mob+0x16>
     1da:	8f 5f       	subi	r24, 0xFF	; 255
     1dc:	86 30       	cpi	r24, 0x06	; 6

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (uint8_t)(conf_index >> 3);
     1de:	99 f7       	brne	.-26     	; 0x1c6 <can_clear_all_mob+0xa>
     1e0:	08 95       	ret

000001e2 <can_get_mob_status>:
     1e2:	80 91 ef 00 	lds	r24, 0x00EF
     1e6:	80 7c       	andi	r24, 0xC0	; 192
     1e8:	61 f0       	breq	.+24     	; 0x202 <can_get_mob_status+0x20>
     1ea:	80 91 ee 00 	lds	r24, 0x00EE
     1ee:	98 2f       	mov	r25, r24
     1f0:	90 7e       	andi	r25, 0xE0	; 224
     1f2:	28 2f       	mov	r18, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
     1f4:	20 76       	andi	r18, 0x60	; 96
     1f6:	20 32       	cpi	r18, 0x20	; 32
     1f8:	31 f0       	breq	.+12     	; 0x206 <can_get_mob_status+0x24>
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
     1fa:	90 34       	cpi	r25, 0x40	; 64
     1fc:	31 f0       	breq	.+12     	; 0x20a <can_get_mob_status+0x28>
     1fe:	8f 71       	andi	r24, 0x1F	; 31
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
     200:	08 95       	ret
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	08 95       	ret
     206:	89 2f       	mov	r24, r25

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
     208:	08 95       	ret
     20a:	89 2f       	mov	r24, r25
     20c:	08 95       	ret

0000020e <can_get_data>:
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     20e:	fc 01       	movw	r30, r24
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	aa ef       	ldi	r26, 0xFA	; 250
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	9c 91       	ld	r25, X
     218:	91 93       	st	Z+, r25
    {
        if (try_conf == 1)
        {
            Can_reset();
            conf_index++;
            ovrtim_flag=0;
     21a:	8f 5f       	subi	r24, 0xFF	; 255
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     21c:	88 30       	cpi	r24, 0x08	; 8
     21e:	d9 f7       	brne	.-10     	; 0x216 <can_get_data+0x8>
     220:	08 95       	ret

00000222 <can_fixed_baudrate>:
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
     222:	81 e0       	ldi	r24, 0x01	; 1
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
     224:	80 93 d8 00 	sts	0x00D8, r24
     228:	82 e0       	ldi	r24, 0x02	; 2
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
     22a:	80 93 e2 00 	sts	0x00E2, r24
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
                DISABLE_MOB;        //! Disable MOb-0
     22e:	8c e0       	ldi	r24, 0x0C	; 12
     230:	80 93 e3 00 	sts	0x00E3, r24
     234:	87 e3       	ldi	r24, 0x37	; 55
     236:	80 93 e4 00 	sts	0x00E4, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     23a:	81 e0       	ldi	r24, 0x01	; 1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     23c:	08 95       	ret

0000023e <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     23e:	0e 94 11 01 	call	0x222	; 0x222 <can_fixed_baudrate>
     242:	88 23       	and	r24, r24
     244:	49 f0       	breq	.+18     	; 0x258 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     246:	0e 94 de 00 	call	0x1bc	; 0x1bc <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     24a:	e8 ed       	ldi	r30, 0xD8	; 216
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	82 60       	ori	r24, 0x02	; 2
     252:	80 83       	st	Z, r24
    return (1);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     258:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     25a:	08 95       	ret

0000025c <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	1f 92       	push	r1
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     268:	11 96       	adiw	r26, 0x01	; 1
     26a:	8c 91       	ld	r24, X
     26c:	11 97       	sbiw	r26, 0x01	; 1
     26e:	8c 30       	cpi	r24, 0x0C	; 12
     270:	b1 f4       	brne	.+44     	; 0x29e <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     272:	19 96       	adiw	r26, 0x09	; 9
     274:	8c 91       	ld	r24, X
     276:	19 97       	sbiw	r26, 0x09	; 9
     278:	80 36       	cpi	r24, 0x60	; 96
     27a:	69 f4       	brne	.+26     	; 0x296 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     27c:	86 2f       	mov	r24, r22
     27e:	82 95       	swap	r24
     280:	80 7f       	andi	r24, 0xF0	; 240
     282:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     286:	ef ee       	ldi	r30, 0xEF	; 239
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	8f 73       	andi	r24, 0x3F	; 63
     28e:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     290:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     294:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     296:	19 96       	adiw	r26, 0x09	; 9
     298:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	07 c6       	rjmp	.+3086   	; 0xeac <__stack+0x5ad>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     29e:	86 2f       	mov	r24, r22
     2a0:	82 95       	swap	r24
     2a2:	80 7f       	andi	r24, 0xF0	; 240
     2a4:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     2a8:	80 91 ef 00 	lds	r24, 0x00EF
     2ac:	80 7c       	andi	r24, 0xC0	; 192
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <can_cmd+0x56>
     2b0:	f9 c5       	rjmp	.+3058   	; 0xea4 <__stack+0x5a5>
    {
      cmd->status = MOB_PENDING; 
     2b2:	80 e6       	ldi	r24, 0x60	; 96
     2b4:	19 96       	adiw	r26, 0x09	; 9
     2b6:	8c 93       	st	X, r24
     2b8:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     2ba:	6c 93       	st	X, r22
      Can_clear_mob();
     2bc:	ee ee       	ldi	r30, 0xEE	; 238
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	11 92       	st	Z+, r1
     2c2:	e8 3f       	cpi	r30, 0xF8	; 248
     2c4:	f1 05       	cpc	r31, r1
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <can_cmd+0x64>
          
      switch (cmd->cmd)
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	4c 91       	ld	r20, X
     2cc:	11 97       	sbiw	r26, 0x01	; 1
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	fa 01       	movw	r30, r20
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	eb 30       	cpi	r30, 0x0B	; 11
     2d6:	f1 05       	cpc	r31, r1
     2d8:	08 f0       	brcs	.+2      	; 0x2dc <can_cmd+0x80>
     2da:	e0 c5       	rjmp	.+3008   	; 0xe9c <__stack+0x59d>
     2dc:	e2 5c       	subi	r30, 0xC2	; 194
     2de:	ff 4f       	sbci	r31, 0xFF	; 255
     2e0:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     2e4:	16 96       	adiw	r26, 0x06	; 6
     2e6:	8c 91       	ld	r24, X
     2e8:	16 97       	sbiw	r26, 0x06	; 6
     2ea:	81 11       	cpse	r24, r1
     2ec:	b7 c4       	rjmp	.+2414   	; 0xc5c <__stack+0x35d>
     2ee:	c8 c4       	rjmp	.+2448   	; 0xc80 <__stack+0x381>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     2f0:	1b 96       	adiw	r26, 0x0b	; 11
     2f2:	8c 91       	ld	r24, X
     2f4:	1b 97       	sbiw	r26, 0x0b	; 11
     2f6:	88 23       	and	r24, r24
     2f8:	d9 f1       	breq	.+118    	; 0x370 <can_cmd+0x114>
     2fa:	14 96       	adiw	r26, 0x04	; 4
     2fc:	9c 91       	ld	r25, X
     2fe:	14 97       	sbiw	r26, 0x04	; 4
     300:	92 95       	swap	r25
     302:	96 95       	lsr	r25
     304:	97 70       	andi	r25, 0x07	; 7
     306:	15 96       	adiw	r26, 0x05	; 5
     308:	8c 91       	ld	r24, X
     30a:	15 97       	sbiw	r26, 0x05	; 5
     30c:	88 0f       	add	r24, r24
     30e:	88 0f       	add	r24, r24
     310:	88 0f       	add	r24, r24
     312:	89 0f       	add	r24, r25
     314:	80 93 f3 00 	sts	0x00F3, r24
     318:	13 96       	adiw	r26, 0x03	; 3
     31a:	9c 91       	ld	r25, X
     31c:	13 97       	sbiw	r26, 0x03	; 3
     31e:	92 95       	swap	r25
     320:	96 95       	lsr	r25
     322:	97 70       	andi	r25, 0x07	; 7
     324:	14 96       	adiw	r26, 0x04	; 4
     326:	8c 91       	ld	r24, X
     328:	14 97       	sbiw	r26, 0x04	; 4
     32a:	88 0f       	add	r24, r24
     32c:	88 0f       	add	r24, r24
     32e:	88 0f       	add	r24, r24
     330:	89 0f       	add	r24, r25
     332:	80 93 f2 00 	sts	0x00F2, r24
     336:	12 96       	adiw	r26, 0x02	; 2
     338:	9c 91       	ld	r25, X
     33a:	12 97       	sbiw	r26, 0x02	; 2
     33c:	92 95       	swap	r25
     33e:	96 95       	lsr	r25
     340:	97 70       	andi	r25, 0x07	; 7
     342:	13 96       	adiw	r26, 0x03	; 3
     344:	8c 91       	ld	r24, X
     346:	13 97       	sbiw	r26, 0x03	; 3
     348:	88 0f       	add	r24, r24
     34a:	88 0f       	add	r24, r24
     34c:	88 0f       	add	r24, r24
     34e:	89 0f       	add	r24, r25
     350:	80 93 f1 00 	sts	0x00F1, r24
     354:	12 96       	adiw	r26, 0x02	; 2
     356:	8c 91       	ld	r24, X
     358:	12 97       	sbiw	r26, 0x02	; 2
     35a:	88 0f       	add	r24, r24
     35c:	88 0f       	add	r24, r24
     35e:	88 0f       	add	r24, r24
     360:	80 93 f0 00 	sts	0x00F0, r24
     364:	ef ee       	ldi	r30, 0xEF	; 239
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	80 61       	ori	r24, 0x10	; 16
     36c:	80 83       	st	Z, r24
     36e:	1c c0       	rjmp	.+56     	; 0x3a8 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     370:	12 96       	adiw	r26, 0x02	; 2
     372:	8c 91       	ld	r24, X
     374:	12 97       	sbiw	r26, 0x02	; 2
     376:	86 95       	lsr	r24
     378:	86 95       	lsr	r24
     37a:	86 95       	lsr	r24
     37c:	13 96       	adiw	r26, 0x03	; 3
     37e:	9c 91       	ld	r25, X
     380:	13 97       	sbiw	r26, 0x03	; 3
     382:	20 e2       	ldi	r18, 0x20	; 32
     384:	92 9f       	mul	r25, r18
     386:	80 0d       	add	r24, r0
     388:	11 24       	eor	r1, r1
     38a:	80 93 f3 00 	sts	0x00F3, r24
     38e:	12 96       	adiw	r26, 0x02	; 2
     390:	8c 91       	ld	r24, X
     392:	12 97       	sbiw	r26, 0x02	; 2
     394:	82 95       	swap	r24
     396:	88 0f       	add	r24, r24
     398:	80 7e       	andi	r24, 0xE0	; 224
     39a:	80 93 f2 00 	sts	0x00F2, r24
     39e:	ef ee       	ldi	r30, 0xEF	; 239
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	8f 7e       	andi	r24, 0xEF	; 239
     3a6:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     3a8:	16 96       	adiw	r26, 0x06	; 6
     3aa:	8c 91       	ld	r24, X
     3ac:	16 97       	sbiw	r26, 0x06	; 6
     3ae:	88 23       	and	r24, r24
     3b0:	91 f0       	breq	.+36     	; 0x3d6 <can_cmd+0x17a>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	8a ef       	ldi	r24, 0xFA	; 250
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	17 96       	adiw	r26, 0x07	; 7
     3ba:	ed 91       	ld	r30, X+
     3bc:	fc 91       	ld	r31, X
     3be:	18 97       	sbiw	r26, 0x08	; 8
     3c0:	e2 0f       	add	r30, r18
     3c2:	f1 1d       	adc	r31, r1
     3c4:	30 81       	ld	r19, Z
     3c6:	fc 01       	movw	r30, r24
     3c8:	30 83       	st	Z, r19
     3ca:	2f 5f       	subi	r18, 0xFF	; 255
     3cc:	16 96       	adiw	r26, 0x06	; 6
     3ce:	3c 91       	ld	r19, X
     3d0:	16 97       	sbiw	r26, 0x06	; 6
     3d2:	23 17       	cp	r18, r19
     3d4:	88 f3       	brcs	.-30     	; 0x3b8 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     3d6:	1a 96       	adiw	r26, 0x0a	; 10
     3d8:	8c 91       	ld	r24, X
     3da:	1a 97       	sbiw	r26, 0x0a	; 10
     3dc:	88 23       	and	r24, r24
     3de:	31 f0       	breq	.+12     	; 0x3ec <can_cmd+0x190>
     3e0:	e0 ef       	ldi	r30, 0xF0	; 240
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	84 60       	ori	r24, 0x04	; 4
     3e8:	80 83       	st	Z, r24
     3ea:	05 c0       	rjmp	.+10     	; 0x3f6 <can_cmd+0x19a>
            else Can_clear_rtr();    
     3ec:	e0 ef       	ldi	r30, 0xF0	; 240
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	80 81       	ld	r24, Z
     3f2:	8b 7f       	andi	r24, 0xFB	; 251
     3f4:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     3f6:	ef ee       	ldi	r30, 0xEF	; 239
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	90 81       	ld	r25, Z
     3fc:	16 96       	adiw	r26, 0x06	; 6
     3fe:	8c 91       	ld	r24, X
     400:	89 2b       	or	r24, r25
     402:	80 83       	st	Z, r24
          Can_config_tx();
     404:	80 81       	ld	r24, Z
     406:	8f 73       	andi	r24, 0x3F	; 63
     408:	80 83       	st	Z, r24
     40a:	80 81       	ld	r24, Z
     40c:	80 64       	ori	r24, 0x40	; 64
     40e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     410:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     412:	4c c5       	rjmp	.+2712   	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     414:	1b 96       	adiw	r26, 0x0b	; 11
     416:	8c 91       	ld	r24, X
     418:	1b 97       	sbiw	r26, 0x0b	; 11
     41a:	88 23       	and	r24, r24
     41c:	d9 f1       	breq	.+118    	; 0x494 <can_cmd+0x238>
     41e:	14 96       	adiw	r26, 0x04	; 4
     420:	9c 91       	ld	r25, X
     422:	14 97       	sbiw	r26, 0x04	; 4
     424:	92 95       	swap	r25
     426:	96 95       	lsr	r25
     428:	97 70       	andi	r25, 0x07	; 7
     42a:	15 96       	adiw	r26, 0x05	; 5
     42c:	8c 91       	ld	r24, X
     42e:	15 97       	sbiw	r26, 0x05	; 5
     430:	88 0f       	add	r24, r24
     432:	88 0f       	add	r24, r24
     434:	88 0f       	add	r24, r24
     436:	89 0f       	add	r24, r25
     438:	80 93 f3 00 	sts	0x00F3, r24
     43c:	13 96       	adiw	r26, 0x03	; 3
     43e:	9c 91       	ld	r25, X
     440:	13 97       	sbiw	r26, 0x03	; 3
     442:	92 95       	swap	r25
     444:	96 95       	lsr	r25
     446:	97 70       	andi	r25, 0x07	; 7
     448:	14 96       	adiw	r26, 0x04	; 4
     44a:	8c 91       	ld	r24, X
     44c:	14 97       	sbiw	r26, 0x04	; 4
     44e:	88 0f       	add	r24, r24
     450:	88 0f       	add	r24, r24
     452:	88 0f       	add	r24, r24
     454:	89 0f       	add	r24, r25
     456:	80 93 f2 00 	sts	0x00F2, r24
     45a:	12 96       	adiw	r26, 0x02	; 2
     45c:	9c 91       	ld	r25, X
     45e:	12 97       	sbiw	r26, 0x02	; 2
     460:	92 95       	swap	r25
     462:	96 95       	lsr	r25
     464:	97 70       	andi	r25, 0x07	; 7
     466:	13 96       	adiw	r26, 0x03	; 3
     468:	8c 91       	ld	r24, X
     46a:	13 97       	sbiw	r26, 0x03	; 3
     46c:	88 0f       	add	r24, r24
     46e:	88 0f       	add	r24, r24
     470:	88 0f       	add	r24, r24
     472:	89 0f       	add	r24, r25
     474:	80 93 f1 00 	sts	0x00F1, r24
     478:	12 96       	adiw	r26, 0x02	; 2
     47a:	8c 91       	ld	r24, X
     47c:	12 97       	sbiw	r26, 0x02	; 2
     47e:	88 0f       	add	r24, r24
     480:	88 0f       	add	r24, r24
     482:	88 0f       	add	r24, r24
     484:	80 93 f0 00 	sts	0x00F0, r24
     488:	ef ee       	ldi	r30, 0xEF	; 239
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	80 81       	ld	r24, Z
     48e:	80 61       	ori	r24, 0x10	; 16
     490:	80 83       	st	Z, r24
     492:	1c c0       	rjmp	.+56     	; 0x4cc <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     494:	12 96       	adiw	r26, 0x02	; 2
     496:	8c 91       	ld	r24, X
     498:	12 97       	sbiw	r26, 0x02	; 2
     49a:	86 95       	lsr	r24
     49c:	86 95       	lsr	r24
     49e:	86 95       	lsr	r24
     4a0:	13 96       	adiw	r26, 0x03	; 3
     4a2:	9c 91       	ld	r25, X
     4a4:	13 97       	sbiw	r26, 0x03	; 3
     4a6:	f0 e2       	ldi	r31, 0x20	; 32
     4a8:	9f 9f       	mul	r25, r31
     4aa:	80 0d       	add	r24, r0
     4ac:	11 24       	eor	r1, r1
     4ae:	80 93 f3 00 	sts	0x00F3, r24
     4b2:	12 96       	adiw	r26, 0x02	; 2
     4b4:	8c 91       	ld	r24, X
     4b6:	12 97       	sbiw	r26, 0x02	; 2
     4b8:	82 95       	swap	r24
     4ba:	88 0f       	add	r24, r24
     4bc:	80 7e       	andi	r24, 0xE0	; 224
     4be:	80 93 f2 00 	sts	0x00F2, r24
     4c2:	ef ee       	ldi	r30, 0xEF	; 239
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	8f 7e       	andi	r24, 0xEF	; 239
     4ca:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     4cc:	16 96       	adiw	r26, 0x06	; 6
     4ce:	8c 91       	ld	r24, X
     4d0:	16 97       	sbiw	r26, 0x06	; 6
     4d2:	88 23       	and	r24, r24
     4d4:	91 f0       	breq	.+36     	; 0x4fa <can_cmd+0x29e>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	8a ef       	ldi	r24, 0xFA	; 250
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	17 96       	adiw	r26, 0x07	; 7
     4de:	ed 91       	ld	r30, X+
     4e0:	fc 91       	ld	r31, X
     4e2:	18 97       	sbiw	r26, 0x08	; 8
     4e4:	e2 0f       	add	r30, r18
     4e6:	f1 1d       	adc	r31, r1
     4e8:	30 81       	ld	r19, Z
     4ea:	fc 01       	movw	r30, r24
     4ec:	30 83       	st	Z, r19
     4ee:	2f 5f       	subi	r18, 0xFF	; 255
     4f0:	16 96       	adiw	r26, 0x06	; 6
     4f2:	3c 91       	ld	r19, X
     4f4:	16 97       	sbiw	r26, 0x06	; 6
     4f6:	23 17       	cp	r18, r19
     4f8:	88 f3       	brcs	.-30     	; 0x4dc <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     4fa:	1a 96       	adiw	r26, 0x0a	; 10
     4fc:	1c 92       	st	X, r1
     4fe:	1a 97       	sbiw	r26, 0x0a	; 10
     500:	e0 ef       	ldi	r30, 0xF0	; 240
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	8b 7f       	andi	r24, 0xFB	; 251
     508:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     50a:	ef ee       	ldi	r30, 0xEF	; 239
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	90 81       	ld	r25, Z
     510:	16 96       	adiw	r26, 0x06	; 6
     512:	8c 91       	ld	r24, X
     514:	89 2b       	or	r24, r25
     516:	80 83       	st	Z, r24
          Can_config_tx();
     518:	80 81       	ld	r24, Z
     51a:	8f 73       	andi	r24, 0x3F	; 63
     51c:	80 83       	st	Z, r24
     51e:	80 81       	ld	r24, Z
     520:	80 64       	ori	r24, 0x40	; 64
     522:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     524:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     526:	c2 c4       	rjmp	.+2436   	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     528:	1b 96       	adiw	r26, 0x0b	; 11
     52a:	8c 91       	ld	r24, X
     52c:	1b 97       	sbiw	r26, 0x0b	; 11
     52e:	88 23       	and	r24, r24
     530:	d9 f1       	breq	.+118    	; 0x5a8 <can_cmd+0x34c>
     532:	14 96       	adiw	r26, 0x04	; 4
     534:	9c 91       	ld	r25, X
     536:	14 97       	sbiw	r26, 0x04	; 4
     538:	92 95       	swap	r25
     53a:	96 95       	lsr	r25
     53c:	97 70       	andi	r25, 0x07	; 7
     53e:	15 96       	adiw	r26, 0x05	; 5
     540:	8c 91       	ld	r24, X
     542:	15 97       	sbiw	r26, 0x05	; 5
     544:	88 0f       	add	r24, r24
     546:	88 0f       	add	r24, r24
     548:	88 0f       	add	r24, r24
     54a:	89 0f       	add	r24, r25
     54c:	80 93 f3 00 	sts	0x00F3, r24
     550:	13 96       	adiw	r26, 0x03	; 3
     552:	9c 91       	ld	r25, X
     554:	13 97       	sbiw	r26, 0x03	; 3
     556:	92 95       	swap	r25
     558:	96 95       	lsr	r25
     55a:	97 70       	andi	r25, 0x07	; 7
     55c:	14 96       	adiw	r26, 0x04	; 4
     55e:	8c 91       	ld	r24, X
     560:	14 97       	sbiw	r26, 0x04	; 4
     562:	88 0f       	add	r24, r24
     564:	88 0f       	add	r24, r24
     566:	88 0f       	add	r24, r24
     568:	89 0f       	add	r24, r25
     56a:	80 93 f2 00 	sts	0x00F2, r24
     56e:	12 96       	adiw	r26, 0x02	; 2
     570:	9c 91       	ld	r25, X
     572:	12 97       	sbiw	r26, 0x02	; 2
     574:	92 95       	swap	r25
     576:	96 95       	lsr	r25
     578:	97 70       	andi	r25, 0x07	; 7
     57a:	13 96       	adiw	r26, 0x03	; 3
     57c:	8c 91       	ld	r24, X
     57e:	13 97       	sbiw	r26, 0x03	; 3
     580:	88 0f       	add	r24, r24
     582:	88 0f       	add	r24, r24
     584:	88 0f       	add	r24, r24
     586:	89 0f       	add	r24, r25
     588:	80 93 f1 00 	sts	0x00F1, r24
     58c:	12 96       	adiw	r26, 0x02	; 2
     58e:	8c 91       	ld	r24, X
     590:	12 97       	sbiw	r26, 0x02	; 2
     592:	88 0f       	add	r24, r24
     594:	88 0f       	add	r24, r24
     596:	88 0f       	add	r24, r24
     598:	80 93 f0 00 	sts	0x00F0, r24
     59c:	ef ee       	ldi	r30, 0xEF	; 239
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	80 61       	ori	r24, 0x10	; 16
     5a4:	80 83       	st	Z, r24
     5a6:	1c c0       	rjmp	.+56     	; 0x5e0 <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     5a8:	12 96       	adiw	r26, 0x02	; 2
     5aa:	8c 91       	ld	r24, X
     5ac:	12 97       	sbiw	r26, 0x02	; 2
     5ae:	86 95       	lsr	r24
     5b0:	86 95       	lsr	r24
     5b2:	86 95       	lsr	r24
     5b4:	13 96       	adiw	r26, 0x03	; 3
     5b6:	9c 91       	ld	r25, X
     5b8:	13 97       	sbiw	r26, 0x03	; 3
     5ba:	f0 e2       	ldi	r31, 0x20	; 32
     5bc:	9f 9f       	mul	r25, r31
     5be:	80 0d       	add	r24, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	80 93 f3 00 	sts	0x00F3, r24
     5c6:	12 96       	adiw	r26, 0x02	; 2
     5c8:	8c 91       	ld	r24, X
     5ca:	12 97       	sbiw	r26, 0x02	; 2
     5cc:	82 95       	swap	r24
     5ce:	88 0f       	add	r24, r24
     5d0:	80 7e       	andi	r24, 0xE0	; 224
     5d2:	80 93 f2 00 	sts	0x00F2, r24
     5d6:	ef ee       	ldi	r30, 0xEF	; 239
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	8f 7e       	andi	r24, 0xEF	; 239
     5de:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	1a 96       	adiw	r26, 0x0a	; 10
     5e4:	8c 93       	st	X, r24
     5e6:	1a 97       	sbiw	r26, 0x0a	; 10
     5e8:	e0 ef       	ldi	r30, 0xF0	; 240
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	84 60       	ori	r24, 0x04	; 4
     5f0:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     5f2:	ef ee       	ldi	r30, 0xEF	; 239
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	90 81       	ld	r25, Z
     5f8:	16 96       	adiw	r26, 0x06	; 6
     5fa:	8c 91       	ld	r24, X
     5fc:	89 2b       	or	r24, r25
     5fe:	80 83       	st	Z, r24
          Can_config_tx();
     600:	80 81       	ld	r24, Z
     602:	8f 73       	andi	r24, 0x3F	; 63
     604:	80 83       	st	Z, r24
     606:	80 81       	ld	r24, Z
     608:	80 64       	ori	r24, 0x40	; 64
     60a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     60c:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     60e:	4e c4       	rjmp	.+2204   	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     610:	19 82       	std	Y+1, r1	; 0x01
     612:	9b 81       	ldd	r25, Y+3	; 0x03
     614:	92 95       	swap	r25
     616:	96 95       	lsr	r25
     618:	97 70       	andi	r25, 0x07	; 7
     61a:	8c 81       	ldd	r24, Y+4	; 0x04
     61c:	88 0f       	add	r24, r24
     61e:	88 0f       	add	r24, r24
     620:	88 0f       	add	r24, r24
     622:	89 0f       	add	r24, r25
     624:	80 93 f7 00 	sts	0x00F7, r24
     628:	9a 81       	ldd	r25, Y+2	; 0x02
     62a:	92 95       	swap	r25
     62c:	96 95       	lsr	r25
     62e:	97 70       	andi	r25, 0x07	; 7
     630:	8b 81       	ldd	r24, Y+3	; 0x03
     632:	88 0f       	add	r24, r24
     634:	88 0f       	add	r24, r24
     636:	88 0f       	add	r24, r24
     638:	89 0f       	add	r24, r25
     63a:	80 93 f6 00 	sts	0x00F6, r24
     63e:	99 81       	ldd	r25, Y+1	; 0x01
     640:	92 95       	swap	r25
     642:	96 95       	lsr	r25
     644:	97 70       	andi	r25, 0x07	; 7
     646:	8a 81       	ldd	r24, Y+2	; 0x02
     648:	88 0f       	add	r24, r24
     64a:	88 0f       	add	r24, r24
     64c:	88 0f       	add	r24, r24
     64e:	89 0f       	add	r24, r25
     650:	80 93 f5 00 	sts	0x00F5, r24
     654:	29 81       	ldd	r18, Y+1	; 0x01
     656:	22 0f       	add	r18, r18
     658:	22 0f       	add	r18, r18
     65a:	22 0f       	add	r18, r18
     65c:	84 ef       	ldi	r24, 0xF4	; 244
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	fc 01       	movw	r30, r24
     662:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     664:	ef ee       	ldi	r30, 0xEF	; 239
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	30 81       	ld	r19, Z
     66a:	16 96       	adiw	r26, 0x06	; 6
     66c:	2c 91       	ld	r18, X
     66e:	23 2b       	or	r18, r19
     670:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     672:	dc 01       	movw	r26, r24
     674:	2c 91       	ld	r18, X
     676:	2b 7f       	andi	r18, 0xFB	; 251
     678:	2c 93       	st	X, r18
          Can_clear_idemsk();
     67a:	2c 91       	ld	r18, X
     67c:	2e 7f       	andi	r18, 0xFE	; 254
     67e:	2c 93       	st	X, r18
          Can_config_rx();       
     680:	80 81       	ld	r24, Z
     682:	8f 73       	andi	r24, 0x3F	; 63
     684:	80 83       	st	Z, r24
     686:	80 81       	ld	r24, Z
     688:	80 68       	ori	r24, 0x80	; 128
     68a:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     68c:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     68e:	0e c4       	rjmp	.+2076   	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	82 95       	swap	r24
     698:	88 0f       	add	r24, r24
     69a:	80 7e       	andi	r24, 0xE0	; 224
     69c:	81 5e       	subi	r24, 0xE1	; 225
     69e:	27 ef       	ldi	r18, 0xF7	; 247
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	f9 01       	movw	r30, r18
     6a4:	80 83       	st	Z, r24
     6a6:	49 81       	ldd	r20, Y+1	; 0x01
     6a8:	42 95       	swap	r20
     6aa:	44 0f       	add	r20, r20
     6ac:	40 7e       	andi	r20, 0xE0	; 224
     6ae:	86 ef       	ldi	r24, 0xF6	; 246
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	fc 01       	movw	r30, r24
     6b4:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     6b6:	12 96       	adiw	r26, 0x02	; 2
     6b8:	4c 91       	ld	r20, X
     6ba:	12 97       	sbiw	r26, 0x02	; 2
     6bc:	46 95       	lsr	r20
     6be:	46 95       	lsr	r20
     6c0:	46 95       	lsr	r20
     6c2:	13 96       	adiw	r26, 0x03	; 3
     6c4:	5c 91       	ld	r21, X
     6c6:	13 97       	sbiw	r26, 0x03	; 3
     6c8:	f0 e2       	ldi	r31, 0x20	; 32
     6ca:	5f 9f       	mul	r21, r31
     6cc:	40 0d       	add	r20, r0
     6ce:	11 24       	eor	r1, r1
     6d0:	40 93 f3 00 	sts	0x00F3, r20
     6d4:	12 96       	adiw	r26, 0x02	; 2
     6d6:	4c 91       	ld	r20, X
     6d8:	12 97       	sbiw	r26, 0x02	; 2
     6da:	42 95       	swap	r20
     6dc:	44 0f       	add	r20, r20
     6de:	40 7e       	andi	r20, 0xE0	; 224
     6e0:	40 93 f2 00 	sts	0x00F2, r20
     6e4:	6f ee       	ldi	r22, 0xEF	; 239
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	fb 01       	movw	r30, r22
     6ea:	40 81       	ld	r20, Z
     6ec:	4f 7e       	andi	r20, 0xEF	; 239
     6ee:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     6f0:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     6f2:	5b 81       	ldd	r21, Y+3	; 0x03
     6f4:	52 95       	swap	r21
     6f6:	56 95       	lsr	r21
     6f8:	57 70       	andi	r21, 0x07	; 7
     6fa:	4c 81       	ldd	r20, Y+4	; 0x04
     6fc:	44 0f       	add	r20, r20
     6fe:	44 0f       	add	r20, r20
     700:	44 0f       	add	r20, r20
     702:	45 0f       	add	r20, r21
     704:	f9 01       	movw	r30, r18
     706:	40 83       	st	Z, r20
     708:	3a 81       	ldd	r19, Y+2	; 0x02
     70a:	32 95       	swap	r19
     70c:	36 95       	lsr	r19
     70e:	37 70       	andi	r19, 0x07	; 7
     710:	2b 81       	ldd	r18, Y+3	; 0x03
     712:	22 0f       	add	r18, r18
     714:	22 0f       	add	r18, r18
     716:	22 0f       	add	r18, r18
     718:	23 0f       	add	r18, r19
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
     71e:	99 81       	ldd	r25, Y+1	; 0x01
     720:	92 95       	swap	r25
     722:	96 95       	lsr	r25
     724:	97 70       	andi	r25, 0x07	; 7
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	88 0f       	add	r24, r24
     72a:	88 0f       	add	r24, r24
     72c:	88 0f       	add	r24, r24
     72e:	89 0f       	add	r24, r25
     730:	80 93 f5 00 	sts	0x00F5, r24
     734:	29 81       	ldd	r18, Y+1	; 0x01
     736:	22 0f       	add	r18, r18
     738:	22 0f       	add	r18, r18
     73a:	22 0f       	add	r18, r18
     73c:	84 ef       	ldi	r24, 0xF4	; 244
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	fc 01       	movw	r30, r24
     742:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     744:	fb 01       	movw	r30, r22
     746:	30 81       	ld	r19, Z
     748:	16 96       	adiw	r26, 0x06	; 6
     74a:	2c 91       	ld	r18, X
     74c:	16 97       	sbiw	r26, 0x06	; 6
     74e:	23 2b       	or	r18, r19
     750:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     752:	1a 96       	adiw	r26, 0x0a	; 10
     754:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     756:	dc 01       	movw	r26, r24
     758:	2c 91       	ld	r18, X
     75a:	24 60       	ori	r18, 0x04	; 4
     75c:	2c 93       	st	X, r18
		  Can_clear_rtr();
     75e:	a0 ef       	ldi	r26, 0xF0	; 240
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	2c 91       	ld	r18, X
     764:	2b 7f       	andi	r18, 0xFB	; 251
     766:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     768:	20 81       	ld	r18, Z
     76a:	2f 7e       	andi	r18, 0xEF	; 239
     76c:	20 83       	st	Z, r18
          Can_clear_idemsk();
     76e:	fc 01       	movw	r30, r24
     770:	20 81       	ld	r18, Z
     772:	2e 7f       	andi	r18, 0xFE	; 254
     774:	20 83       	st	Z, r18
          Can_config_rx();       
     776:	db 01       	movw	r26, r22
     778:	8c 91       	ld	r24, X
     77a:	8f 73       	andi	r24, 0x3F	; 63
     77c:	8c 93       	st	X, r24
     77e:	8c 91       	ld	r24, X
     780:	80 68       	ori	r24, 0x80	; 128
     782:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     784:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     786:	92 c3       	rjmp	.+1828   	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	82 95       	swap	r24
     790:	88 0f       	add	r24, r24
     792:	80 7e       	andi	r24, 0xE0	; 224
     794:	81 5e       	subi	r24, 0xE1	; 225
     796:	27 ef       	ldi	r18, 0xF7	; 247
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	f9 01       	movw	r30, r18
     79c:	80 83       	st	Z, r24
     79e:	49 81       	ldd	r20, Y+1	; 0x01
     7a0:	42 95       	swap	r20
     7a2:	44 0f       	add	r20, r20
     7a4:	40 7e       	andi	r20, 0xE0	; 224
     7a6:	86 ef       	ldi	r24, 0xF6	; 246
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     7ae:	12 96       	adiw	r26, 0x02	; 2
     7b0:	4c 91       	ld	r20, X
     7b2:	12 97       	sbiw	r26, 0x02	; 2
     7b4:	46 95       	lsr	r20
     7b6:	46 95       	lsr	r20
     7b8:	46 95       	lsr	r20
     7ba:	13 96       	adiw	r26, 0x03	; 3
     7bc:	5c 91       	ld	r21, X
     7be:	13 97       	sbiw	r26, 0x03	; 3
     7c0:	f0 e2       	ldi	r31, 0x20	; 32
     7c2:	5f 9f       	mul	r21, r31
     7c4:	40 0d       	add	r20, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	40 93 f3 00 	sts	0x00F3, r20
     7cc:	12 96       	adiw	r26, 0x02	; 2
     7ce:	4c 91       	ld	r20, X
     7d0:	12 97       	sbiw	r26, 0x02	; 2
     7d2:	42 95       	swap	r20
     7d4:	44 0f       	add	r20, r20
     7d6:	40 7e       	andi	r20, 0xE0	; 224
     7d8:	40 93 f2 00 	sts	0x00F2, r20
     7dc:	6f ee       	ldi	r22, 0xEF	; 239
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	fb 01       	movw	r30, r22
     7e2:	40 81       	ld	r20, Z
     7e4:	4f 7e       	andi	r20, 0xEF	; 239
     7e6:	40 83       	st	Z, r20
		
          u8_temp=0; 
     7e8:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     7ea:	5b 81       	ldd	r21, Y+3	; 0x03
     7ec:	52 95       	swap	r21
     7ee:	56 95       	lsr	r21
     7f0:	57 70       	andi	r21, 0x07	; 7
     7f2:	4c 81       	ldd	r20, Y+4	; 0x04
     7f4:	44 0f       	add	r20, r20
     7f6:	44 0f       	add	r20, r20
     7f8:	44 0f       	add	r20, r20
     7fa:	45 0f       	add	r20, r21
     7fc:	f9 01       	movw	r30, r18
     7fe:	40 83       	st	Z, r20
     800:	3a 81       	ldd	r19, Y+2	; 0x02
     802:	32 95       	swap	r19
     804:	36 95       	lsr	r19
     806:	37 70       	andi	r19, 0x07	; 7
     808:	2b 81       	ldd	r18, Y+3	; 0x03
     80a:	22 0f       	add	r18, r18
     80c:	22 0f       	add	r18, r18
     80e:	22 0f       	add	r18, r18
     810:	23 0f       	add	r18, r19
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
     816:	99 81       	ldd	r25, Y+1	; 0x01
     818:	92 95       	swap	r25
     81a:	96 95       	lsr	r25
     81c:	97 70       	andi	r25, 0x07	; 7
     81e:	8a 81       	ldd	r24, Y+2	; 0x02
     820:	88 0f       	add	r24, r24
     822:	88 0f       	add	r24, r24
     824:	88 0f       	add	r24, r24
     826:	89 0f       	add	r24, r25
     828:	80 93 f5 00 	sts	0x00F5, r24
     82c:	29 81       	ldd	r18, Y+1	; 0x01
     82e:	22 0f       	add	r18, r18
     830:	22 0f       	add	r18, r18
     832:	22 0f       	add	r18, r18
     834:	84 ef       	ldi	r24, 0xF4	; 244
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	fc 01       	movw	r30, r24
     83a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     83c:	fb 01       	movw	r30, r22
     83e:	30 81       	ld	r19, Z
     840:	16 96       	adiw	r26, 0x06	; 6
     842:	2c 91       	ld	r18, X
     844:	16 97       	sbiw	r26, 0x06	; 6
     846:	23 2b       	or	r18, r19
     848:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	1a 96       	adiw	r26, 0x0a	; 10
     84e:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     850:	dc 01       	movw	r26, r24
     852:	2c 91       	ld	r18, X
     854:	24 60       	ori	r18, 0x04	; 4
     856:	2c 93       	st	X, r18
		  Can_set_rtr();
     858:	a0 ef       	ldi	r26, 0xF0	; 240
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	2c 91       	ld	r18, X
     85e:	24 60       	ori	r18, 0x04	; 4
     860:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     862:	20 81       	ld	r18, Z
     864:	2f 7d       	andi	r18, 0xDF	; 223
     866:	20 83       	st	Z, r18
          Can_clear_idemsk();
     868:	fc 01       	movw	r30, r24
     86a:	20 81       	ld	r18, Z
     86c:	2e 7f       	andi	r18, 0xFE	; 254
     86e:	20 83       	st	Z, r18
          Can_config_rx();       
     870:	db 01       	movw	r26, r22
     872:	8c 91       	ld	r24, X
     874:	8f 73       	andi	r24, 0x3F	; 63
     876:	8c 93       	st	X, r24
     878:	8c 91       	ld	r24, X
     87a:	80 68       	ori	r24, 0x80	; 128
     87c:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     87e:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     880:	15 c3       	rjmp	.+1578   	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     882:	1b 96       	adiw	r26, 0x0b	; 11
     884:	8c 91       	ld	r24, X
     886:	1b 97       	sbiw	r26, 0x0b	; 11
     888:	88 23       	and	r24, r24
     88a:	d9 f1       	breq	.+118    	; 0x902 <__stack+0x3>
     88c:	14 96       	adiw	r26, 0x04	; 4
     88e:	9c 91       	ld	r25, X
     890:	14 97       	sbiw	r26, 0x04	; 4
     892:	92 95       	swap	r25
     894:	96 95       	lsr	r25
     896:	97 70       	andi	r25, 0x07	; 7
     898:	15 96       	adiw	r26, 0x05	; 5
     89a:	8c 91       	ld	r24, X
     89c:	15 97       	sbiw	r26, 0x05	; 5
     89e:	88 0f       	add	r24, r24
     8a0:	88 0f       	add	r24, r24
     8a2:	88 0f       	add	r24, r24
     8a4:	89 0f       	add	r24, r25
     8a6:	80 93 f3 00 	sts	0x00F3, r24
     8aa:	13 96       	adiw	r26, 0x03	; 3
     8ac:	9c 91       	ld	r25, X
     8ae:	13 97       	sbiw	r26, 0x03	; 3
     8b0:	92 95       	swap	r25
     8b2:	96 95       	lsr	r25
     8b4:	97 70       	andi	r25, 0x07	; 7
     8b6:	14 96       	adiw	r26, 0x04	; 4
     8b8:	8c 91       	ld	r24, X
     8ba:	14 97       	sbiw	r26, 0x04	; 4
     8bc:	88 0f       	add	r24, r24
     8be:	88 0f       	add	r24, r24
     8c0:	88 0f       	add	r24, r24
     8c2:	89 0f       	add	r24, r25
     8c4:	80 93 f2 00 	sts	0x00F2, r24
     8c8:	12 96       	adiw	r26, 0x02	; 2
     8ca:	9c 91       	ld	r25, X
     8cc:	12 97       	sbiw	r26, 0x02	; 2
     8ce:	92 95       	swap	r25
     8d0:	96 95       	lsr	r25
     8d2:	97 70       	andi	r25, 0x07	; 7
     8d4:	13 96       	adiw	r26, 0x03	; 3
     8d6:	8c 91       	ld	r24, X
     8d8:	13 97       	sbiw	r26, 0x03	; 3
     8da:	88 0f       	add	r24, r24
     8dc:	88 0f       	add	r24, r24
     8de:	88 0f       	add	r24, r24
     8e0:	89 0f       	add	r24, r25
     8e2:	80 93 f1 00 	sts	0x00F1, r24
     8e6:	12 96       	adiw	r26, 0x02	; 2
     8e8:	8c 91       	ld	r24, X
     8ea:	12 97       	sbiw	r26, 0x02	; 2
     8ec:	88 0f       	add	r24, r24
     8ee:	88 0f       	add	r24, r24
     8f0:	88 0f       	add	r24, r24
     8f2:	80 93 f0 00 	sts	0x00F0, r24
     8f6:	ef ee       	ldi	r30, 0xEF	; 239
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	80 61       	ori	r24, 0x10	; 16
     8fe:	80 83       	st	Z, r24
     900:	1c c0       	rjmp	.+56     	; 0x93a <__stack+0x3b>
          else              { Can_set_std_id(cmd->id.std);}
     902:	12 96       	adiw	r26, 0x02	; 2
     904:	8c 91       	ld	r24, X
     906:	12 97       	sbiw	r26, 0x02	; 2
     908:	86 95       	lsr	r24
     90a:	86 95       	lsr	r24
     90c:	86 95       	lsr	r24
     90e:	13 96       	adiw	r26, 0x03	; 3
     910:	9c 91       	ld	r25, X
     912:	13 97       	sbiw	r26, 0x03	; 3
     914:	e0 e2       	ldi	r30, 0x20	; 32
     916:	9e 9f       	mul	r25, r30
     918:	80 0d       	add	r24, r0
     91a:	11 24       	eor	r1, r1
     91c:	80 93 f3 00 	sts	0x00F3, r24
     920:	12 96       	adiw	r26, 0x02	; 2
     922:	8c 91       	ld	r24, X
     924:	12 97       	sbiw	r26, 0x02	; 2
     926:	82 95       	swap	r24
     928:	88 0f       	add	r24, r24
     92a:	80 7e       	andi	r24, 0xE0	; 224
     92c:	80 93 f2 00 	sts	0x00F2, r24
     930:	ef ee       	ldi	r30, 0xEF	; 239
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	80 81       	ld	r24, Z
     936:	8f 7e       	andi	r24, 0xEF	; 239
     938:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	9b 81       	ldd	r25, Y+3	; 0x03
     940:	92 95       	swap	r25
     942:	96 95       	lsr	r25
     944:	97 70       	andi	r25, 0x07	; 7
     946:	8c 81       	ldd	r24, Y+4	; 0x04
     948:	88 0f       	add	r24, r24
     94a:	88 0f       	add	r24, r24
     94c:	88 0f       	add	r24, r24
     94e:	89 0f       	add	r24, r25
     950:	80 93 f7 00 	sts	0x00F7, r24
     954:	9a 81       	ldd	r25, Y+2	; 0x02
     956:	92 95       	swap	r25
     958:	96 95       	lsr	r25
     95a:	97 70       	andi	r25, 0x07	; 7
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	88 0f       	add	r24, r24
     960:	88 0f       	add	r24, r24
     962:	88 0f       	add	r24, r24
     964:	89 0f       	add	r24, r25
     966:	80 93 f6 00 	sts	0x00F6, r24
     96a:	99 81       	ldd	r25, Y+1	; 0x01
     96c:	92 95       	swap	r25
     96e:	96 95       	lsr	r25
     970:	97 70       	andi	r25, 0x07	; 7
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	88 0f       	add	r24, r24
     976:	88 0f       	add	r24, r24
     978:	88 0f       	add	r24, r24
     97a:	89 0f       	add	r24, r25
     97c:	80 93 f5 00 	sts	0x00F5, r24
     980:	29 81       	ldd	r18, Y+1	; 0x01
     982:	22 0f       	add	r18, r18
     984:	22 0f       	add	r18, r18
     986:	22 0f       	add	r18, r18
     988:	84 ef       	ldi	r24, 0xF4	; 244
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     990:	ef ee       	ldi	r30, 0xEF	; 239
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	30 81       	ld	r19, Z
     996:	16 96       	adiw	r26, 0x06	; 6
     998:	2c 91       	ld	r18, X
     99a:	23 2b       	or	r18, r19
     99c:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     99e:	dc 01       	movw	r26, r24
     9a0:	2c 91       	ld	r18, X
     9a2:	2b 7f       	andi	r18, 0xFB	; 251
     9a4:	2c 93       	st	X, r18
          Can_set_idemsk();
     9a6:	2c 91       	ld	r18, X
     9a8:	21 60       	ori	r18, 0x01	; 1
     9aa:	2c 93       	st	X, r18
          Can_config_rx();       
     9ac:	80 81       	ld	r24, Z
     9ae:	8f 73       	andi	r24, 0x3F	; 63
     9b0:	80 83       	st	Z, r24
     9b2:	80 81       	ld	r24, Z
     9b4:	80 68       	ori	r24, 0x80	; 128
     9b6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     9b8:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     9ba:	78 c2       	rjmp	.+1264   	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     9bc:	1b 96       	adiw	r26, 0x0b	; 11
     9be:	8c 91       	ld	r24, X
     9c0:	1b 97       	sbiw	r26, 0x0b	; 11
     9c2:	88 23       	and	r24, r24
     9c4:	d9 f1       	breq	.+118    	; 0xa3c <__stack+0x13d>
     9c6:	14 96       	adiw	r26, 0x04	; 4
     9c8:	9c 91       	ld	r25, X
     9ca:	14 97       	sbiw	r26, 0x04	; 4
     9cc:	92 95       	swap	r25
     9ce:	96 95       	lsr	r25
     9d0:	97 70       	andi	r25, 0x07	; 7
     9d2:	15 96       	adiw	r26, 0x05	; 5
     9d4:	8c 91       	ld	r24, X
     9d6:	15 97       	sbiw	r26, 0x05	; 5
     9d8:	88 0f       	add	r24, r24
     9da:	88 0f       	add	r24, r24
     9dc:	88 0f       	add	r24, r24
     9de:	89 0f       	add	r24, r25
     9e0:	80 93 f3 00 	sts	0x00F3, r24
     9e4:	13 96       	adiw	r26, 0x03	; 3
     9e6:	9c 91       	ld	r25, X
     9e8:	13 97       	sbiw	r26, 0x03	; 3
     9ea:	92 95       	swap	r25
     9ec:	96 95       	lsr	r25
     9ee:	97 70       	andi	r25, 0x07	; 7
     9f0:	14 96       	adiw	r26, 0x04	; 4
     9f2:	8c 91       	ld	r24, X
     9f4:	14 97       	sbiw	r26, 0x04	; 4
     9f6:	88 0f       	add	r24, r24
     9f8:	88 0f       	add	r24, r24
     9fa:	88 0f       	add	r24, r24
     9fc:	89 0f       	add	r24, r25
     9fe:	80 93 f2 00 	sts	0x00F2, r24
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	9c 91       	ld	r25, X
     a06:	12 97       	sbiw	r26, 0x02	; 2
     a08:	92 95       	swap	r25
     a0a:	96 95       	lsr	r25
     a0c:	97 70       	andi	r25, 0x07	; 7
     a0e:	13 96       	adiw	r26, 0x03	; 3
     a10:	8c 91       	ld	r24, X
     a12:	13 97       	sbiw	r26, 0x03	; 3
     a14:	88 0f       	add	r24, r24
     a16:	88 0f       	add	r24, r24
     a18:	88 0f       	add	r24, r24
     a1a:	89 0f       	add	r24, r25
     a1c:	80 93 f1 00 	sts	0x00F1, r24
     a20:	12 96       	adiw	r26, 0x02	; 2
     a22:	8c 91       	ld	r24, X
     a24:	12 97       	sbiw	r26, 0x02	; 2
     a26:	88 0f       	add	r24, r24
     a28:	88 0f       	add	r24, r24
     a2a:	88 0f       	add	r24, r24
     a2c:	80 93 f0 00 	sts	0x00F0, r24
     a30:	ef ee       	ldi	r30, 0xEF	; 239
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	80 61       	ori	r24, 0x10	; 16
     a38:	80 83       	st	Z, r24
     a3a:	1c c0       	rjmp	.+56     	; 0xa74 <__stack+0x175>
          else              { Can_set_std_id(cmd->id.std);}
     a3c:	12 96       	adiw	r26, 0x02	; 2
     a3e:	8c 91       	ld	r24, X
     a40:	12 97       	sbiw	r26, 0x02	; 2
     a42:	86 95       	lsr	r24
     a44:	86 95       	lsr	r24
     a46:	86 95       	lsr	r24
     a48:	13 96       	adiw	r26, 0x03	; 3
     a4a:	9c 91       	ld	r25, X
     a4c:	13 97       	sbiw	r26, 0x03	; 3
     a4e:	e0 e2       	ldi	r30, 0x20	; 32
     a50:	9e 9f       	mul	r25, r30
     a52:	80 0d       	add	r24, r0
     a54:	11 24       	eor	r1, r1
     a56:	80 93 f3 00 	sts	0x00F3, r24
     a5a:	12 96       	adiw	r26, 0x02	; 2
     a5c:	8c 91       	ld	r24, X
     a5e:	12 97       	sbiw	r26, 0x02	; 2
     a60:	82 95       	swap	r24
     a62:	88 0f       	add	r24, r24
     a64:	80 7e       	andi	r24, 0xE0	; 224
     a66:	80 93 f2 00 	sts	0x00F2, r24
     a6a:	ef ee       	ldi	r30, 0xEF	; 239
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	8f 7e       	andi	r24, 0xEF	; 239
     a72:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	9b 81       	ldd	r25, Y+3	; 0x03
     a7a:	92 95       	swap	r25
     a7c:	96 95       	lsr	r25
     a7e:	97 70       	andi	r25, 0x07	; 7
     a80:	8c 81       	ldd	r24, Y+4	; 0x04
     a82:	88 0f       	add	r24, r24
     a84:	88 0f       	add	r24, r24
     a86:	88 0f       	add	r24, r24
     a88:	89 0f       	add	r24, r25
     a8a:	80 93 f7 00 	sts	0x00F7, r24
     a8e:	9a 81       	ldd	r25, Y+2	; 0x02
     a90:	92 95       	swap	r25
     a92:	96 95       	lsr	r25
     a94:	97 70       	andi	r25, 0x07	; 7
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	88 0f       	add	r24, r24
     a9a:	88 0f       	add	r24, r24
     a9c:	88 0f       	add	r24, r24
     a9e:	89 0f       	add	r24, r25
     aa0:	80 93 f6 00 	sts	0x00F6, r24
     aa4:	99 81       	ldd	r25, Y+1	; 0x01
     aa6:	92 95       	swap	r25
     aa8:	96 95       	lsr	r25
     aaa:	97 70       	andi	r25, 0x07	; 7
     aac:	8a 81       	ldd	r24, Y+2	; 0x02
     aae:	88 0f       	add	r24, r24
     ab0:	88 0f       	add	r24, r24
     ab2:	88 0f       	add	r24, r24
     ab4:	89 0f       	add	r24, r25
     ab6:	80 93 f5 00 	sts	0x00F5, r24
     aba:	29 81       	ldd	r18, Y+1	; 0x01
     abc:	22 0f       	add	r18, r18
     abe:	22 0f       	add	r18, r18
     ac0:	22 0f       	add	r18, r18
     ac2:	84 ef       	ldi	r24, 0xF4	; 244
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     aca:	ef ee       	ldi	r30, 0xEF	; 239
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	30 81       	ld	r19, Z
     ad0:	16 96       	adiw	r26, 0x06	; 6
     ad2:	2c 91       	ld	r18, X
     ad4:	16 97       	sbiw	r26, 0x06	; 6
     ad6:	23 2b       	or	r18, r19
     ad8:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     ada:	1a 96       	adiw	r26, 0x0a	; 10
     adc:	1c 92       	st	X, r1
     ade:	dc 01       	movw	r26, r24
     ae0:	2c 91       	ld	r18, X
     ae2:	24 60       	ori	r18, 0x04	; 4
     ae4:	2c 93       	st	X, r18
     ae6:	a0 ef       	ldi	r26, 0xF0	; 240
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	2c 91       	ld	r18, X
     aec:	2b 7f       	andi	r18, 0xFB	; 251
     aee:	2c 93       	st	X, r18
          Can_set_idemsk();
     af0:	dc 01       	movw	r26, r24
     af2:	2c 91       	ld	r18, X
     af4:	21 60       	ori	r18, 0x01	; 1
     af6:	2c 93       	st	X, r18
          Can_config_rx();       
     af8:	80 81       	ld	r24, Z
     afa:	8f 73       	andi	r24, 0x3F	; 63
     afc:	80 83       	st	Z, r24
     afe:	80 81       	ld	r24, Z
     b00:	80 68       	ori	r24, 0x80	; 128
     b02:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b04:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     b06:	d2 c1       	rjmp	.+932    	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b08:	1b 96       	adiw	r26, 0x0b	; 11
     b0a:	8c 91       	ld	r24, X
     b0c:	1b 97       	sbiw	r26, 0x0b	; 11
     b0e:	88 23       	and	r24, r24
     b10:	d9 f1       	breq	.+118    	; 0xb88 <__stack+0x289>
     b12:	14 96       	adiw	r26, 0x04	; 4
     b14:	9c 91       	ld	r25, X
     b16:	14 97       	sbiw	r26, 0x04	; 4
     b18:	92 95       	swap	r25
     b1a:	96 95       	lsr	r25
     b1c:	97 70       	andi	r25, 0x07	; 7
     b1e:	15 96       	adiw	r26, 0x05	; 5
     b20:	8c 91       	ld	r24, X
     b22:	15 97       	sbiw	r26, 0x05	; 5
     b24:	88 0f       	add	r24, r24
     b26:	88 0f       	add	r24, r24
     b28:	88 0f       	add	r24, r24
     b2a:	89 0f       	add	r24, r25
     b2c:	80 93 f3 00 	sts	0x00F3, r24
     b30:	13 96       	adiw	r26, 0x03	; 3
     b32:	9c 91       	ld	r25, X
     b34:	13 97       	sbiw	r26, 0x03	; 3
     b36:	92 95       	swap	r25
     b38:	96 95       	lsr	r25
     b3a:	97 70       	andi	r25, 0x07	; 7
     b3c:	14 96       	adiw	r26, 0x04	; 4
     b3e:	8c 91       	ld	r24, X
     b40:	14 97       	sbiw	r26, 0x04	; 4
     b42:	88 0f       	add	r24, r24
     b44:	88 0f       	add	r24, r24
     b46:	88 0f       	add	r24, r24
     b48:	89 0f       	add	r24, r25
     b4a:	80 93 f2 00 	sts	0x00F2, r24
     b4e:	12 96       	adiw	r26, 0x02	; 2
     b50:	9c 91       	ld	r25, X
     b52:	12 97       	sbiw	r26, 0x02	; 2
     b54:	92 95       	swap	r25
     b56:	96 95       	lsr	r25
     b58:	97 70       	andi	r25, 0x07	; 7
     b5a:	13 96       	adiw	r26, 0x03	; 3
     b5c:	8c 91       	ld	r24, X
     b5e:	13 97       	sbiw	r26, 0x03	; 3
     b60:	88 0f       	add	r24, r24
     b62:	88 0f       	add	r24, r24
     b64:	88 0f       	add	r24, r24
     b66:	89 0f       	add	r24, r25
     b68:	80 93 f1 00 	sts	0x00F1, r24
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8c 91       	ld	r24, X
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	88 0f       	add	r24, r24
     b74:	88 0f       	add	r24, r24
     b76:	88 0f       	add	r24, r24
     b78:	80 93 f0 00 	sts	0x00F0, r24
     b7c:	ef ee       	ldi	r30, 0xEF	; 239
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	80 83       	st	Z, r24
     b86:	1c c0       	rjmp	.+56     	; 0xbc0 <__stack+0x2c1>
          else              { Can_set_std_id(cmd->id.std);}
     b88:	12 96       	adiw	r26, 0x02	; 2
     b8a:	8c 91       	ld	r24, X
     b8c:	12 97       	sbiw	r26, 0x02	; 2
     b8e:	86 95       	lsr	r24
     b90:	86 95       	lsr	r24
     b92:	86 95       	lsr	r24
     b94:	13 96       	adiw	r26, 0x03	; 3
     b96:	9c 91       	ld	r25, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	e0 e2       	ldi	r30, 0x20	; 32
     b9c:	9e 9f       	mul	r25, r30
     b9e:	80 0d       	add	r24, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	80 93 f3 00 	sts	0x00F3, r24
     ba6:	12 96       	adiw	r26, 0x02	; 2
     ba8:	8c 91       	ld	r24, X
     baa:	12 97       	sbiw	r26, 0x02	; 2
     bac:	82 95       	swap	r24
     bae:	88 0f       	add	r24, r24
     bb0:	80 7e       	andi	r24, 0xE0	; 224
     bb2:	80 93 f2 00 	sts	0x00F2, r24
     bb6:	ef ee       	ldi	r30, 0xEF	; 239
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	8f 7e       	andi	r24, 0xEF	; 239
     bbe:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	9b 81       	ldd	r25, Y+3	; 0x03
     bc6:	92 95       	swap	r25
     bc8:	96 95       	lsr	r25
     bca:	97 70       	andi	r25, 0x07	; 7
     bcc:	8c 81       	ldd	r24, Y+4	; 0x04
     bce:	88 0f       	add	r24, r24
     bd0:	88 0f       	add	r24, r24
     bd2:	88 0f       	add	r24, r24
     bd4:	89 0f       	add	r24, r25
     bd6:	80 93 f7 00 	sts	0x00F7, r24
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	92 95       	swap	r25
     bde:	96 95       	lsr	r25
     be0:	97 70       	andi	r25, 0x07	; 7
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	88 0f       	add	r24, r24
     be6:	88 0f       	add	r24, r24
     be8:	88 0f       	add	r24, r24
     bea:	89 0f       	add	r24, r25
     bec:	80 93 f6 00 	sts	0x00F6, r24
     bf0:	99 81       	ldd	r25, Y+1	; 0x01
     bf2:	92 95       	swap	r25
     bf4:	96 95       	lsr	r25
     bf6:	97 70       	andi	r25, 0x07	; 7
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	88 0f       	add	r24, r24
     bfc:	88 0f       	add	r24, r24
     bfe:	88 0f       	add	r24, r24
     c00:	89 0f       	add	r24, r25
     c02:	80 93 f5 00 	sts	0x00F5, r24
     c06:	29 81       	ldd	r18, Y+1	; 0x01
     c08:	22 0f       	add	r18, r18
     c0a:	22 0f       	add	r18, r18
     c0c:	22 0f       	add	r18, r18
     c0e:	84 ef       	ldi	r24, 0xF4	; 244
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	fc 01       	movw	r30, r24
     c14:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c16:	ef ee       	ldi	r30, 0xEF	; 239
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	30 81       	ld	r19, Z
     c1c:	16 96       	adiw	r26, 0x06	; 6
     c1e:	2c 91       	ld	r18, X
     c20:	16 97       	sbiw	r26, 0x06	; 6
     c22:	23 2b       	or	r18, r19
     c24:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	1a 96       	adiw	r26, 0x0a	; 10
     c2a:	2c 93       	st	X, r18
     c2c:	dc 01       	movw	r26, r24
     c2e:	2c 91       	ld	r18, X
     c30:	24 60       	ori	r18, 0x04	; 4
     c32:	2c 93       	st	X, r18
     c34:	a0 ef       	ldi	r26, 0xF0	; 240
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	2c 91       	ld	r18, X
     c3a:	24 60       	ori	r18, 0x04	; 4
     c3c:	2c 93       	st	X, r18
          Can_clear_rplv();
     c3e:	20 81       	ld	r18, Z
     c40:	2f 7d       	andi	r18, 0xDF	; 223
     c42:	20 83       	st	Z, r18
          Can_set_idemsk();
     c44:	dc 01       	movw	r26, r24
     c46:	2c 91       	ld	r18, X
     c48:	21 60       	ori	r18, 0x01	; 1
     c4a:	2c 93       	st	X, r18
          Can_config_rx();       
     c4c:	80 81       	ld	r24, Z
     c4e:	8f 73       	andi	r24, 0x3F	; 63
     c50:	80 83       	st	Z, r24
     c52:	80 81       	ld	r24, Z
     c54:	80 68       	ori	r24, 0x80	; 128
     c56:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c58:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     c5a:	28 c1       	rjmp	.+592    	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	8a ef       	ldi	r24, 0xFA	; 250
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	17 96       	adiw	r26, 0x07	; 7
     c64:	ed 91       	ld	r30, X+
     c66:	fc 91       	ld	r31, X
     c68:	18 97       	sbiw	r26, 0x08	; 8
     c6a:	e2 0f       	add	r30, r18
     c6c:	f1 1d       	adc	r31, r1
     c6e:	30 81       	ld	r19, Z
     c70:	fc 01       	movw	r30, r24
     c72:	30 83       	st	Z, r19
     c74:	2f 5f       	subi	r18, 0xFF	; 255
     c76:	16 96       	adiw	r26, 0x06	; 6
     c78:	3c 91       	ld	r19, X
     c7a:	16 97       	sbiw	r26, 0x06	; 6
     c7c:	23 17       	cp	r18, r19
     c7e:	88 f3       	brcs	.-30     	; 0xc62 <__stack+0x363>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     c80:	19 82       	std	Y+1, r1	; 0x01
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	92 95       	swap	r25
     c86:	96 95       	lsr	r25
     c88:	97 70       	andi	r25, 0x07	; 7
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	88 0f       	add	r24, r24
     c8e:	88 0f       	add	r24, r24
     c90:	88 0f       	add	r24, r24
     c92:	89 0f       	add	r24, r25
     c94:	80 93 f7 00 	sts	0x00F7, r24
     c98:	9a 81       	ldd	r25, Y+2	; 0x02
     c9a:	92 95       	swap	r25
     c9c:	96 95       	lsr	r25
     c9e:	97 70       	andi	r25, 0x07	; 7
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	88 0f       	add	r24, r24
     ca4:	88 0f       	add	r24, r24
     ca6:	88 0f       	add	r24, r24
     ca8:	89 0f       	add	r24, r25
     caa:	80 93 f6 00 	sts	0x00F6, r24
     cae:	99 81       	ldd	r25, Y+1	; 0x01
     cb0:	92 95       	swap	r25
     cb2:	96 95       	lsr	r25
     cb4:	97 70       	andi	r25, 0x07	; 7
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	88 0f       	add	r24, r24
     cba:	88 0f       	add	r24, r24
     cbc:	88 0f       	add	r24, r24
     cbe:	89 0f       	add	r24, r25
     cc0:	80 93 f5 00 	sts	0x00F5, r24
     cc4:	29 81       	ldd	r18, Y+1	; 0x01
     cc6:	22 0f       	add	r18, r18
     cc8:	22 0f       	add	r18, r18
     cca:	22 0f       	add	r18, r18
     ccc:	84 ef       	ldi	r24, 0xF4	; 244
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     cd4:	ef ee       	ldi	r30, 0xEF	; 239
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	30 81       	ld	r19, Z
     cda:	16 96       	adiw	r26, 0x06	; 6
     cdc:	2c 91       	ld	r18, X
     cde:	16 97       	sbiw	r26, 0x06	; 6
     ce0:	23 2b       	or	r18, r19
     ce2:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	1a 96       	adiw	r26, 0x0a	; 10
     ce8:	2c 93       	st	X, r18
     cea:	dc 01       	movw	r26, r24
     cec:	2c 91       	ld	r18, X
     cee:	24 60       	ori	r18, 0x04	; 4
     cf0:	2c 93       	st	X, r18
     cf2:	a0 ef       	ldi	r26, 0xF0	; 240
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	2c 91       	ld	r18, X
     cf8:	24 60       	ori	r18, 0x04	; 4
     cfa:	2c 93       	st	X, r18
          Can_set_rplv();
     cfc:	20 81       	ld	r18, Z
     cfe:	20 62       	ori	r18, 0x20	; 32
     d00:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d02:	dc 01       	movw	r26, r24
     d04:	2c 91       	ld	r18, X
     d06:	2e 7f       	andi	r18, 0xFE	; 254
     d08:	2c 93       	st	X, r18
          Can_config_rx();       
     d0a:	80 81       	ld	r24, Z
     d0c:	8f 73       	andi	r24, 0x3F	; 63
     d0e:	80 83       	st	Z, r24
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d16:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     d18:	c9 c0       	rjmp	.+402    	; 0xeac <__stack+0x5ad>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d1a:	1b 96       	adiw	r26, 0x0b	; 11
     d1c:	8c 91       	ld	r24, X
     d1e:	1b 97       	sbiw	r26, 0x0b	; 11
     d20:	88 23       	and	r24, r24
     d22:	d9 f1       	breq	.+118    	; 0xd9a <__stack+0x49b>
     d24:	14 96       	adiw	r26, 0x04	; 4
     d26:	9c 91       	ld	r25, X
     d28:	14 97       	sbiw	r26, 0x04	; 4
     d2a:	92 95       	swap	r25
     d2c:	96 95       	lsr	r25
     d2e:	97 70       	andi	r25, 0x07	; 7
     d30:	15 96       	adiw	r26, 0x05	; 5
     d32:	8c 91       	ld	r24, X
     d34:	15 97       	sbiw	r26, 0x05	; 5
     d36:	88 0f       	add	r24, r24
     d38:	88 0f       	add	r24, r24
     d3a:	88 0f       	add	r24, r24
     d3c:	89 0f       	add	r24, r25
     d3e:	80 93 f3 00 	sts	0x00F3, r24
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	9c 91       	ld	r25, X
     d46:	13 97       	sbiw	r26, 0x03	; 3
     d48:	92 95       	swap	r25
     d4a:	96 95       	lsr	r25
     d4c:	97 70       	andi	r25, 0x07	; 7
     d4e:	14 96       	adiw	r26, 0x04	; 4
     d50:	8c 91       	ld	r24, X
     d52:	14 97       	sbiw	r26, 0x04	; 4
     d54:	88 0f       	add	r24, r24
     d56:	88 0f       	add	r24, r24
     d58:	88 0f       	add	r24, r24
     d5a:	89 0f       	add	r24, r25
     d5c:	80 93 f2 00 	sts	0x00F2, r24
     d60:	12 96       	adiw	r26, 0x02	; 2
     d62:	9c 91       	ld	r25, X
     d64:	12 97       	sbiw	r26, 0x02	; 2
     d66:	92 95       	swap	r25
     d68:	96 95       	lsr	r25
     d6a:	97 70       	andi	r25, 0x07	; 7
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	8c 91       	ld	r24, X
     d70:	13 97       	sbiw	r26, 0x03	; 3
     d72:	88 0f       	add	r24, r24
     d74:	88 0f       	add	r24, r24
     d76:	88 0f       	add	r24, r24
     d78:	89 0f       	add	r24, r25
     d7a:	80 93 f1 00 	sts	0x00F1, r24
     d7e:	12 96       	adiw	r26, 0x02	; 2
     d80:	8c 91       	ld	r24, X
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	88 0f       	add	r24, r24
     d86:	88 0f       	add	r24, r24
     d88:	88 0f       	add	r24, r24
     d8a:	80 93 f0 00 	sts	0x00F0, r24
     d8e:	ef ee       	ldi	r30, 0xEF	; 239
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 61       	ori	r24, 0x10	; 16
     d96:	80 83       	st	Z, r24
     d98:	1c c0       	rjmp	.+56     	; 0xdd2 <__stack+0x4d3>
          else              { Can_set_std_id(cmd->id.std);}
     d9a:	12 96       	adiw	r26, 0x02	; 2
     d9c:	8c 91       	ld	r24, X
     d9e:	12 97       	sbiw	r26, 0x02	; 2
     da0:	86 95       	lsr	r24
     da2:	86 95       	lsr	r24
     da4:	86 95       	lsr	r24
     da6:	13 96       	adiw	r26, 0x03	; 3
     da8:	9c 91       	ld	r25, X
     daa:	13 97       	sbiw	r26, 0x03	; 3
     dac:	e0 e2       	ldi	r30, 0x20	; 32
     dae:	9e 9f       	mul	r25, r30
     db0:	80 0d       	add	r24, r0
     db2:	11 24       	eor	r1, r1
     db4:	80 93 f3 00 	sts	0x00F3, r24
     db8:	12 96       	adiw	r26, 0x02	; 2
     dba:	8c 91       	ld	r24, X
     dbc:	12 97       	sbiw	r26, 0x02	; 2
     dbe:	82 95       	swap	r24
     dc0:	88 0f       	add	r24, r24
     dc2:	80 7e       	andi	r24, 0xE0	; 224
     dc4:	80 93 f2 00 	sts	0x00F2, r24
     dc8:	ef ee       	ldi	r30, 0xEF	; 239
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	8f 7e       	andi	r24, 0xEF	; 239
     dd0:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     dd2:	16 96       	adiw	r26, 0x06	; 6
     dd4:	8c 91       	ld	r24, X
     dd6:	16 97       	sbiw	r26, 0x06	; 6
     dd8:	88 23       	and	r24, r24
     dda:	91 f0       	breq	.+36     	; 0xe00 <__stack+0x501>
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	8a ef       	ldi	r24, 0xFA	; 250
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	17 96       	adiw	r26, 0x07	; 7
     de4:	ed 91       	ld	r30, X+
     de6:	fc 91       	ld	r31, X
     de8:	18 97       	sbiw	r26, 0x08	; 8
     dea:	e2 0f       	add	r30, r18
     dec:	f1 1d       	adc	r31, r1
     dee:	30 81       	ld	r19, Z
     df0:	fc 01       	movw	r30, r24
     df2:	30 83       	st	Z, r19
     df4:	2f 5f       	subi	r18, 0xFF	; 255
     df6:	16 96       	adiw	r26, 0x06	; 6
     df8:	3c 91       	ld	r19, X
     dfa:	16 97       	sbiw	r26, 0x06	; 6
     dfc:	23 17       	cp	r18, r19
     dfe:	88 f3       	brcs	.-30     	; 0xde2 <__stack+0x4e3>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	9b 81       	ldd	r25, Y+3	; 0x03
     e06:	92 95       	swap	r25
     e08:	96 95       	lsr	r25
     e0a:	97 70       	andi	r25, 0x07	; 7
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	88 0f       	add	r24, r24
     e10:	88 0f       	add	r24, r24
     e12:	88 0f       	add	r24, r24
     e14:	89 0f       	add	r24, r25
     e16:	80 93 f7 00 	sts	0x00F7, r24
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	92 95       	swap	r25
     e1e:	96 95       	lsr	r25
     e20:	97 70       	andi	r25, 0x07	; 7
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	88 0f       	add	r24, r24
     e26:	88 0f       	add	r24, r24
     e28:	88 0f       	add	r24, r24
     e2a:	89 0f       	add	r24, r25
     e2c:	80 93 f6 00 	sts	0x00F6, r24
     e30:	99 81       	ldd	r25, Y+1	; 0x01
     e32:	92 95       	swap	r25
     e34:	96 95       	lsr	r25
     e36:	97 70       	andi	r25, 0x07	; 7
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	88 0f       	add	r24, r24
     e3c:	88 0f       	add	r24, r24
     e3e:	88 0f       	add	r24, r24
     e40:	89 0f       	add	r24, r25
     e42:	80 93 f5 00 	sts	0x00F5, r24
     e46:	29 81       	ldd	r18, Y+1	; 0x01
     e48:	22 0f       	add	r18, r18
     e4a:	22 0f       	add	r18, r18
     e4c:	22 0f       	add	r18, r18
     e4e:	84 ef       	ldi	r24, 0xF4	; 244
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e56:	ef ee       	ldi	r30, 0xEF	; 239
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	30 81       	ld	r19, Z
     e5c:	16 96       	adiw	r26, 0x06	; 6
     e5e:	2c 91       	ld	r18, X
     e60:	16 97       	sbiw	r26, 0x06	; 6
     e62:	23 2b       	or	r18, r19
     e64:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     e66:	21 e0       	ldi	r18, 0x01	; 1
     e68:	1a 96       	adiw	r26, 0x0a	; 10
     e6a:	2c 93       	st	X, r18
     e6c:	dc 01       	movw	r26, r24
     e6e:	2c 91       	ld	r18, X
     e70:	24 60       	ori	r18, 0x04	; 4
     e72:	2c 93       	st	X, r18
     e74:	a0 ef       	ldi	r26, 0xF0	; 240
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	2c 91       	ld	r18, X
     e7a:	24 60       	ori	r18, 0x04	; 4
     e7c:	2c 93       	st	X, r18
          Can_set_rplv();
     e7e:	20 81       	ld	r18, Z
     e80:	20 62       	ori	r18, 0x20	; 32
     e82:	20 83       	st	Z, r18
          Can_set_idemsk();
     e84:	dc 01       	movw	r26, r24
     e86:	2c 91       	ld	r18, X
     e88:	21 60       	ori	r18, 0x01	; 1
     e8a:	2c 93       	st	X, r18
          Can_config_rx();       
     e8c:	80 81       	ld	r24, Z
     e8e:	8f 73       	andi	r24, 0x3F	; 63
     e90:	80 83       	st	Z, r24
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e98:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     e9a:	08 c0       	rjmp	.+16     	; 0xeac <__stack+0x5ad>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
     e9c:	19 96       	adiw	r26, 0x09	; 9
     e9e:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ea0:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <__stack+0x5ad>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
     ea4:	8f e1       	ldi	r24, 0x1F	; 31
     ea6:	19 96       	adiw	r26, 0x09	; 9
     ea8:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
     eac:	0f 90       	pop	r0
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
     eba:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
     ebc:	88 23       	and	r24, r24
     ebe:	09 f4       	brne	.+2      	; 0xec2 <can_get_status+0xe>
     ec0:	e3 c0       	rjmp	.+454    	; 0x1088 <can_get_status+0x1d4>
     ec2:	8f 31       	cpi	r24, 0x1F	; 31
     ec4:	09 f4       	brne	.+2      	; 0xec8 <can_get_status+0x14>
     ec6:	e2 c0       	rjmp	.+452    	; 0x108c <can_get_status+0x1d8>
     ec8:	8f 3f       	cpi	r24, 0xFF	; 255
     eca:	09 f4       	brne	.+2      	; 0xece <can_get_status+0x1a>
     ecc:	e1 c0       	rjmp	.+450    	; 0x1090 <can_get_status+0x1dc>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
     ece:	62 95       	swap	r22
     ed0:	60 7f       	andi	r22, 0xF0	; 240
     ed2:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
     ed6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <can_get_mob_status>
    
    switch (a_status)
     eda:	80 32       	cpi	r24, 0x20	; 32
     edc:	61 f0       	breq	.+24     	; 0xef6 <can_get_status+0x42>
     ede:	20 f4       	brcc	.+8      	; 0xee8 <can_get_status+0x34>
     ee0:	88 23       	and	r24, r24
     ee2:	09 f4       	brne	.+2      	; 0xee6 <can_get_status+0x32>
     ee4:	d7 c0       	rjmp	.+430    	; 0x1094 <can_get_status+0x1e0>
     ee6:	c6 c0       	rjmp	.+396    	; 0x1074 <can_get_status+0x1c0>
     ee8:	80 34       	cpi	r24, 0x40	; 64
     eea:	09 f4       	brne	.+2      	; 0xeee <can_get_status+0x3a>
     eec:	b8 c0       	rjmp	.+368    	; 0x105e <can_get_status+0x1aa>
     eee:	80 3a       	cpi	r24, 0xA0	; 160
     ef0:	09 f4       	brne	.+2      	; 0xef4 <can_get_status+0x40>
     ef2:	5c c0       	rjmp	.+184    	; 0xfac <can_get_status+0xf8>
     ef4:	bf c0       	rjmp	.+382    	; 0x1074 <can_get_status+0x1c0>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_toggle(LED7);	//Toggle LED0 when the appropriate message is received.
     ef6:	87 e0       	ldi	r24, 0x07	; 7
     ef8:	0e 94 4e 08 	call	0x109c	; 0x109c <LED_toggle>
			delay_ms(100);
     efc:	84 e6       	ldi	r24, 0x64	; 100
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 78 09 	call	0x12f0	; 0x12f0 <delay_ms>
			LED_toggle(LED7);
     f04:	87 e0       	ldi	r24, 0x07	; 7
     f06:	0e 94 4e 08 	call	0x109c	; 0x109c <LED_toggle>
			delay_ms(100);
     f0a:	84 e6       	ldi	r24, 0x64	; 100
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <delay_ms>
	    
            cmd->ctrl.rtr = Can_get_rtr();
     f12:	80 91 f0 00 	lds	r24, 0x00F0
     f16:	82 fb       	bst	r24, 2
     f18:	88 27       	eor	r24, r24
     f1a:	80 f9       	bld	r24, 0
     f1c:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     f1e:	80 91 ef 00 	lds	r24, 0x00EF
     f22:	84 ff       	sbrs	r24, 4
     f24:	2d c0       	rjmp	.+90     	; 0xf80 <can_get_status+0xcc>
            {
	            cmd->ctrl.ide = 1; // extended frame
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
     f2a:	e3 ef       	ldi	r30, 0xF3	; 243
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	86 95       	lsr	r24
     f32:	86 95       	lsr	r24
     f34:	86 95       	lsr	r24
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	a2 ef       	ldi	r26, 0xF2	; 242
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	8c 91       	ld	r24, X
     f3e:	90 81       	ld	r25, Z
     f40:	86 95       	lsr	r24
     f42:	86 95       	lsr	r24
     f44:	86 95       	lsr	r24
     f46:	20 e2       	ldi	r18, 0x20	; 32
     f48:	92 9f       	mul	r25, r18
     f4a:	80 0d       	add	r24, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	8c 83       	std	Y+4, r24	; 0x04
     f50:	e1 ef       	ldi	r30, 0xF1	; 241
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	9c 91       	ld	r25, X
     f58:	86 95       	lsr	r24
     f5a:	86 95       	lsr	r24
     f5c:	86 95       	lsr	r24
     f5e:	20 e2       	ldi	r18, 0x20	; 32
     f60:	92 9f       	mul	r25, r18
     f62:	80 0d       	add	r24, r0
     f64:	11 24       	eor	r1, r1
     f66:	8b 83       	std	Y+3, r24	; 0x03
     f68:	80 91 f0 00 	lds	r24, 0x00F0
     f6c:	90 81       	ld	r25, Z
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	86 95       	lsr	r24
     f74:	20 e2       	ldi	r18, 0x20	; 32
     f76:	92 9f       	mul	r25, r18
     f78:	80 0d       	add	r24, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	07 c0       	rjmp	.+14     	; 0xf8e <can_get_status+0xda>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
     f80:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
     f82:	e3 ef       	ldi	r30, 0xF3	; 243
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	80 91 f2 00 	lds	r24, 0x00F2
     f8c:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
     f8e:	80 e2       	ldi	r24, 0x20	; 32
     f90:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
     f92:	8f 81       	ldd	r24, Y+7	; 0x07
     f94:	98 85       	ldd	r25, Y+8	; 0x08
     f96:	0e 94 07 01 	call	0x20e	; 0x20e <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
     f9a:	ef ee       	ldi	r30, 0xEF	; 239
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	8f 73       	andi	r24, 0x3F	; 63
     fa2:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
     fa4:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
     fa8:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
     faa:	75 c0       	rjmp	.+234    	; 0x1096 <can_get_status+0x1e2>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
     fac:	80 91 f0 00 	lds	r24, 0x00F0
     fb0:	82 fb       	bst	r24, 2
     fb2:	88 27       	eor	r24, r24
     fb4:	80 f9       	bld	r24, 0
     fb6:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
     fb8:	80 91 ef 00 	lds	r24, 0x00EF
     fbc:	84 ff       	sbrs	r24, 4
     fbe:	2d c0       	rjmp	.+90     	; 0x101a <can_get_status+0x166>
            {
                cmd->ctrl.ide = 1; // extended frame
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
     fc4:	e3 ef       	ldi	r30, 0xF3	; 243
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	86 95       	lsr	r24
     fcc:	86 95       	lsr	r24
     fce:	86 95       	lsr	r24
     fd0:	8d 83       	std	Y+5, r24	; 0x05
     fd2:	a2 ef       	ldi	r26, 0xF2	; 242
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	8c 91       	ld	r24, X
     fd8:	90 81       	ld	r25, Z
     fda:	86 95       	lsr	r24
     fdc:	86 95       	lsr	r24
     fde:	86 95       	lsr	r24
     fe0:	20 e2       	ldi	r18, 0x20	; 32
     fe2:	92 9f       	mul	r25, r18
     fe4:	80 0d       	add	r24, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	8c 83       	std	Y+4, r24	; 0x04
     fea:	e1 ef       	ldi	r30, 0xF1	; 241
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	9c 91       	ld	r25, X
     ff2:	86 95       	lsr	r24
     ff4:	86 95       	lsr	r24
     ff6:	86 95       	lsr	r24
     ff8:	20 e2       	ldi	r18, 0x20	; 32
     ffa:	92 9f       	mul	r25, r18
     ffc:	80 0d       	add	r24, r0
     ffe:	11 24       	eor	r1, r1
    1000:	8b 83       	std	Y+3, r24	; 0x03
    1002:	80 91 f0 00 	lds	r24, 0x00F0
    1006:	90 81       	ld	r25, Z
    1008:	86 95       	lsr	r24
    100a:	86 95       	lsr	r24
    100c:	86 95       	lsr	r24
    100e:	20 e2       	ldi	r18, 0x20	; 32
    1010:	92 9f       	mul	r25, r18
    1012:	80 0d       	add	r24, r0
    1014:	11 24       	eor	r1, r1
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	13 c0       	rjmp	.+38     	; 0x1040 <can_get_status+0x18c>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    101a:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    101c:	e3 ef       	ldi	r30, 0xF3	; 243
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	82 95       	swap	r24
    1024:	86 95       	lsr	r24
    1026:	87 70       	andi	r24, 0x07	; 7
    1028:	8b 83       	std	Y+3, r24	; 0x03
    102a:	80 91 f2 00 	lds	r24, 0x00F2
    102e:	90 81       	ld	r25, Z
    1030:	99 0f       	add	r25, r25
    1032:	99 0f       	add	r25, r25
    1034:	99 0f       	add	r25, r25
    1036:	82 95       	swap	r24
    1038:	86 95       	lsr	r24
    103a:	87 70       	andi	r24, 0x07	; 7
    103c:	89 0f       	add	r24, r25
    103e:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1040:	80 ea       	ldi	r24, 0xA0	; 160
    1042:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1044:	8f 81       	ldd	r24, Y+7	; 0x07
    1046:	98 85       	ldd	r25, Y+8	; 0x08
    1048:	0e 94 07 01 	call	0x20e	; 0x20e <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    104c:	ef ee       	ldi	r30, 0xEF	; 239
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8f 73       	andi	r24, 0x3F	; 63
    1054:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    1056:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    105a:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    105c:	1c c0       	rjmp	.+56     	; 0x1096 <can_get_status+0x1e2>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    105e:	80 e4       	ldi	r24, 0x40	; 64
    1060:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    1062:	ef ee       	ldi	r30, 0xEF	; 239
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8f 73       	andi	r24, 0x3F	; 63
    106a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    106c:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1070:	80 e4       	ldi	r24, 0x40	; 64
            break;
    1072:	11 c0       	rjmp	.+34     	; 0x1096 <can_get_status+0x1e2>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1074:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    1076:	ef ee       	ldi	r30, 0xEF	; 239
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 73       	andi	r24, 0x3F	; 63
    107e:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1080:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1084:	82 e0       	ldi	r24, 0x02	; 2
            break;
    1086:	07 c0       	rjmp	.+14     	; 0x1096 <can_get_status+0x1e2>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <can_get_status+0x1e2>
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <can_get_status+0x1e2>
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <can_get_status+0x1e2>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1094:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	08 95       	ret

0000109c <LED_toggle>:
	LEDPORT |= (1 << LED);
}

void LED_toggle(uint8_t LED) {
	
	if(LED == 7)
    109c:	87 30       	cpi	r24, 0x07	; 7
    109e:	29 f4       	brne	.+10     	; 0x10aa <LED_toggle+0xe>
	{
		PORTD ^= 0x01;
    10a0:	2b b1       	in	r18, 0x0b	; 11
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	92 27       	eor	r25, r18
    10a6:	9b b9       	out	0x0b, r25	; 11
    10a8:	07 c0       	rjmp	.+14     	; 0x10b8 <LED_toggle+0x1c>
	}
	if(LED == 3)
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	29 f4       	brne	.+10     	; 0x10b8 <LED_toggle+0x1c>
	{
		PORTC ^= 0x01;
    10ae:	98 b1       	in	r25, 0x08	; 8
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	89 27       	eor	r24, r25
    10b4:	88 b9       	out	0x08, r24	; 8
    10b6:	08 95       	ret
	}
	else
		LEDPORT ^= (1 << LED);
    10b8:	45 b1       	in	r20, 0x05	; 5
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	b9 01       	movw	r22, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <LED_toggle+0x2a>
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	8a 95       	dec	r24
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <LED_toggle+0x26>
    10ca:	cb 01       	movw	r24, r22
    10cc:	84 27       	eor	r24, r20
    10ce:	85 b9       	out	0x05, r24	; 5
    10d0:	08 95       	ret

000010d2 <main>:
	}
}

void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    10d2:	e1 e6       	ldi	r30, 0x61	; 97
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 e8       	ldi	r24, 0x80	; 128
    10d8:	80 83       	st	Z, r24
	CLKPR = 0x00;
    10da:	10 82       	st	Z, r1
}

void io_init(void) {
	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    10dc:	8e ef       	ldi	r24, 0xFE	; 254
    10de:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x01;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    10e4:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    10e6:	99 e0       	ldi	r25, 0x09	; 9
    10e8:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x01;		// PD3 should only go high during an SPI message.
    10ea:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    10ec:	1d b8       	out	0x0d, r1	; 13
	PORTD = 0x00;
    10ee:	1b b8       	out	0x0b, r1	; 11
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    10f0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <timer_init>
	adc_initialize();
    10f4:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0e 94 1f 01 	call	0x23e	; 0x23e <can_init>
	can_init_mobs();
    10fe:	0e 94 a1 00 	call	0x142	; 0x142 <can_init_mobs>
	spi_initialize_master();
    1102:	0e 94 1d 09 	call	0x123a	; 0x123a <spi_initialize_master>
	
	transceiver_initialize();
    1106:	0e 94 09 0a 	call	0x1412	; 0x1412 <transceiver_initialize>
int main(void)
{		
	// Initialize I/O, Timer, ADC, CAN, and SPI
	sys_init();
	
	cmd_str(SIDLE);
    110a:	86 e3       	ldi	r24, 0x36	; 54
    110c:	0e 94 ba 09 	call	0x1374	; 0x1374 <cmd_str>
	/* Transceiver testing vars */
	uint8_t state, CHIP_RDYn;
	uint8_t trans_msg = 0;
	
	// Enable global interrupts for Timer execution
	sei();
    1110:	78 94       	sei
	
	// Flash LEDs to indicate program startup
	LED_toggle(LED3);
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	0e 94 4e 08 	call	0x109c	; 0x109c <LED_toggle>
	delay_ms(500);
    1118:	84 ef       	ldi	r24, 0xF4	; 244
    111a:	91 e0       	ldi	r25, 0x01	; 1
    111c:	0e 94 78 09 	call	0x12f0	; 0x12f0 <delay_ms>
	LED_toggle(LED3);
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	0e 94 4e 08 	call	0x109c	; 0x109c <LED_toggle>
	delay_ms(250);
    1126:	8a ef       	ldi	r24, 0xFA	; 250
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 78 09 	call	0x12f0	; 0x12f0 <delay_ms>
    112e:	e6 e3       	ldi	r30, 0x36	; 54
    1130:	f1 e0       	ldi	r31, 0x01	; 1
    1132:	8e e3       	ldi	r24, 0x3E	; 62
    1134:	91 e0       	ldi	r25, 0x01	; 1
	//LED_set(LED6);
	//LED_set(LED7);
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
    1136:	11 92       	st	Z+, r1
	
	//LED_toggle(LED6);
	//LED_set(LED6);
	//LED_set(LED7);
	
	for (i = 0; i < 8; i ++)
    1138:	e8 17       	cp	r30, r24
    113a:	f9 07       	cpc	r31, r25
    113c:	e1 f7       	brne	.-8      	; 0x1136 <main+0x64>
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
	}
			
	send_now = 0;
    113e:	10 92 2c 01 	sts	0x012C, r1
	send_hk = 0;
    1142:	10 92 35 01 	sts	0x0135, r1
	send_data = 0;	
    1146:	10 92 46 01 	sts	0x0146, r1
    114a:	00 e1       	ldi	r16, 0x10	; 16
    114c:	11 e0       	ldi	r17, 0x01	; 1
    114e:	c8 e1       	ldi	r28, 0x18	; 24
    1150:	d1 e0       	ldi	r29, 0x01	; 1
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    1152:	0f 2e       	mov	r0, r31
    1154:	fb ea       	ldi	r31, 0xAB	; 171
    1156:	cf 2e       	mov	r12, r31
    1158:	f0 2d       	mov	r31, r0
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    115a:	0f 2e       	mov	r0, r31
    115c:	f0 ef       	ldi	r31, 0xF0	; 240
    115e:	df 2e       	mov	r13, r31
    1160:	f0 2d       	mov	r31, r0
    1162:	90 2e       	mov	r9, r16
    1164:	a1 2e       	mov	r10, r17
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
			send_arr[3] = 0x55;
    1166:	0f 2e       	mov	r0, r31
    1168:	f3 e1       	ldi	r31, 0x13	; 19
    116a:	ef 2e       	mov	r14, r31
    116c:	f1 e0       	ldi	r31, 0x01	; 1
    116e:	ff 2e       	mov	r15, r31
    1170:	f0 2d       	mov	r31, r0
    1172:	0f 2e       	mov	r0, r31
    1174:	f5 e5       	ldi	r31, 0x55	; 85
    1176:	8f 2e       	mov	r8, r31
    1178:	f0 2d       	mov	r31, r0
//
		//spi_char = 0;
		
		/* Testing the COMS Transceiver */
		
		SS_set_high();
    117a:	0e 94 48 09 	call	0x1290	; 0x1290 <SS_set_high>
		delay_us(80);
    117e:	80 e5       	ldi	r24, 0x50	; 80
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 66 09 	call	0x12cc	; 0x12cc <delay_us>
		reg_write(0x0A, 0XFF);
    1186:	6f ef       	ldi	r22, 0xFF	; 255
    1188:	8a e0       	ldi	r24, 0x0A	; 10
    118a:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
		SS_set_low();
    118e:	0e 94 4c 09 	call	0x1298	; 0x1298 <SS_set_low>
		
		SS_set_high();
    1192:	0e 94 48 09 	call	0x1290	; 0x1290 <SS_set_high>
		delay_us(80);
    1196:	80 e5       	ldi	r24, 0x50	; 80
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 66 09 	call	0x12cc	; 0x12cc <delay_us>
		trans_msg = reg_read(0x0A);
    119e:	8a e0       	ldi	r24, 0x0A	; 10
    11a0:	0e 94 8e 09 	call	0x131c	; 0x131c <reg_read>
    11a4:	b8 2e       	mov	r11, r24
		SS_set_low();
    11a6:	0e 94 4c 09 	call	0x1298	; 0x1298 <SS_set_low>
		
		if(trans_msg)
    11aa:	bb 20       	and	r11, r11
    11ac:	71 f0       	breq	.+28     	; 0x11ca <main+0xf8>
		{
			LED_toggle(LED3);
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	0e 94 4e 08 	call	0x109c	; 0x109c <LED_toggle>
			delay_ms(100);
    11b4:	84 e6       	ldi	r24, 0x64	; 100
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 78 09 	call	0x12f0	; 0x12f0 <delay_ms>
			LED_toggle(LED3);
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	0e 94 4e 08 	call	0x109c	; 0x109c <LED_toggle>
			delay_ms(100);
    11c2:	84 e6       	ldi	r24, 0x64	; 100
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 78 09 	call	0x12f0	; 0x12f0 <delay_ms>
		//}


		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    11ca:	80 91 2c 01 	lds	r24, 0x012C
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	69 f4       	brne	.+26     	; 0x11ec <main+0x11a>
    11d2:	e9 2d       	mov	r30, r9
    11d4:	fa 2d       	mov	r31, r10
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    11d6:	c1 92       	st	Z+, r12

		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
    11d8:	ec 17       	cp	r30, r28
    11da:	fd 07       	cpc	r31, r29
    11dc:	e1 f7       	brne	.-8      	; 0x11d6 <main+0x104>
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    11de:	61 e1       	ldi	r22, 0x11	; 17
    11e0:	89 2d       	mov	r24, r9
    11e2:	9a 2d       	mov	r25, r10
    11e4:	0e 94 70 00 	call	0xe0	; 0xe0 <can_send_message>
			send_now = 0;
    11e8:	10 92 2c 01 	sts	0x012C, r1
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
    11ec:	80 91 35 01 	lds	r24, 0x0135
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	69 f4       	brne	.+26     	; 0x120e <main+0x13c>
    11f4:	e9 2d       	mov	r30, r9
    11f6:	fa 2d       	mov	r31, r10
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    11f8:	d1 92       	st	Z+, r13
			send_now = 0;
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    11fa:	ec 17       	cp	r30, r28
    11fc:	fd 07       	cpc	r31, r29
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <main+0x126>
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1200:	60 e1       	ldi	r22, 0x10	; 16
    1202:	89 2d       	mov	r24, r9
    1204:	9a 2d       	mov	r25, r10
    1206:	0e 94 70 00 	call	0xe0	; 0xe0 <can_send_message>
			send_hk = 0;
    120a:	10 92 35 01 	sts	0x0135, r1
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
    120e:	80 91 46 01 	lds	r24, 0x0146
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	09 f0       	breq	.+2      	; 0x1218 <main+0x146>
    1216:	b1 cf       	rjmp	.-158    	; 0x117a <main+0xa8>
    1218:	f8 01       	movw	r30, r16
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    121a:	11 92       	st	Z+, r1
			send_hk = 0;
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    121c:	ec 17       	cp	r30, r28
    121e:	fd 07       	cpc	r31, r29
    1220:	e1 f7       	brne	.-8      	; 0x121a <main+0x148>
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
    1222:	c8 01       	movw	r24, r16
    1224:	0e 94 67 00 	call	0xce	; 0xce <adc_read>
			send_arr[3] = 0x55;
    1228:	f7 01       	movw	r30, r14
    122a:	80 82       	st	Z, r8
			
			can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    122c:	6a e0       	ldi	r22, 0x0A	; 10
    122e:	c8 01       	movw	r24, r16
    1230:	0e 94 70 00 	call	0xe0	; 0xe0 <can_send_message>
			send_data = 0;
    1234:	10 92 46 01 	sts	0x0146, r1
    1238:	a0 cf       	rjmp	.-192    	; 0x117a <main+0xa8>

0000123a <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    123a:	85 b7       	in	r24, 0x35	; 53
    123c:	8f 77       	andi	r24, 0x7F	; 127
    123e:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111011;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle)
	temp = 0b01011111;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    1240:	8c b5       	in	r24, 0x2c	; 44
    1242:	8f 75       	andi	r24, 0x5F	; 95
    1244:	8b 65       	ori	r24, 0x5B	; 91
    1246:	8c bd       	out	0x2c, r24	; 44
    1248:	08 95       	ret

0000124a <spi_transfer>:
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.
	//SS_set_high();
	*reg_ptr = message;
    124a:	8e bd       	out	0x2e, r24	; 46
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    124c:	0d b4       	in	r0, 0x2d	; 45
    124e:	07 fc       	sbrc	r0, 7
    1250:	04 c0       	rjmp	.+8      	; 0x125a <spi_transfer+0x10>
    1252:	89 ee       	ldi	r24, 0xE9	; 233
    1254:	81 50       	subi	r24, 0x01	; 1
	{
		if(!timeout--)
    1256:	f1 f7       	brne	.-4      	; 0x1254 <spi_transfer+0xa>
    1258:	08 95       	ret
	//SS_set_high();
	*reg_ptr = message;
		
	reg_ptr = SPSR_BASE;

	while(!(*reg_ptr & SPI_SPSR_SPIF))		// Check if the transmission has completed yet.
    125a:	27 e0       	ldi	r18, 0x07	; 7
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	60 e0       	ldi	r22, 0x00	; 0
	
	temp = 0, temp2 = 0;
	
	for (i = 0; i < 8; i ++)
	{
		temp2 = receive_char << (7 - i);	// reverses the order of the bits.
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	ac 01       	movw	r20, r24
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <spi_transfer+0x22>
    1268:	44 0f       	add	r20, r20
    126a:	55 1f       	adc	r21, r21
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <spi_transfer+0x1e>
		temp2 = temp2 >> 7;
    1270:	44 1f       	adc	r20, r20
    1272:	44 27       	eor	r20, r20
    1274:	44 1f       	adc	r20, r20
		temp2 = temp2 << (7 - i);		
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <spi_transfer+0x36>
    127c:	44 0f       	add	r20, r20
    127e:	55 1f       	adc	r21, r21
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <spi_transfer+0x32>
		temp += temp2;
    1284:	64 0f       	add	r22, r20
    1286:	21 50       	subi	r18, 0x01	; 1
    1288:	31 09       	sbc	r19, r1
    128a:	58 f7       	brcc	.-42     	; 0x1262 <spi_transfer+0x18>
    128c:	86 2f       	mov	r24, r22
	}
	
	return temp;					// Transmission was successful, return the character that was received.
}
    128e:	08 95       	ret

00001290 <SS_set_high>:
/*																		*/
/************************************************************************/

void SS_set_high(void) 
{
	PORTD &= (1 << 3);
    1290:	8b b1       	in	r24, 0x0b	; 11
    1292:	88 70       	andi	r24, 0x08	; 8
    1294:	8b b9       	out	0x0b, r24	; 11
    1296:	08 95       	ret

00001298 <SS_set_low>:
/*																		*/
/************************************************************************/

void SS_set_low(void)
{
	PORTD &= (0 << 3);
    1298:	8b b1       	in	r24, 0x0b	; 11
    129a:	1b b8       	out	0x0b, r1	; 11
    129c:	08 95       	ret

0000129e <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	8f 93       	push	r24
	CTC_flag = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	80 93 51 01 	sts	0x0151, r24
}
    12b0:	8f 91       	pop	r24
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    12bc:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    12c0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    12c4:	8a e0       	ldi	r24, 0x0A	; 10
    12c6:	80 93 81 00 	sts	0x0081, r24
    12ca:	08 95       	ret

000012cc <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    12cc:	10 92 51 01 	sts	0x0151, r1
	TCNT1 = 0x0000; //Clear timer
    12d0:	10 92 85 00 	sts	0x0085, r1
    12d4:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    12d8:	90 93 89 00 	sts	0x0089, r25
    12dc:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    12e6:	80 91 51 01 	lds	r24, 0x0151
    12ea:	88 23       	and	r24, r24
    12ec:	e1 f3       	breq	.-8      	; 0x12e6 <delay_us+0x1a>
}
    12ee:	08 95       	ret

000012f0 <delay_ms>:

void delay_ms(uint16_t ms) {
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	51 f0       	breq	.+20     	; 0x1312 <delay_ms+0x22>
    12fe:	c0 e0       	ldi	r28, 0x00	; 0
    1300:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    1302:	88 ee       	ldi	r24, 0xE8	; 232
    1304:	93 e0       	ldi	r25, 0x03	; 3
    1306:	0e 94 66 09 	call	0x12cc	; 0x12cc <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    130a:	21 96       	adiw	r28, 0x01	; 1
    130c:	c0 17       	cp	r28, r16
    130e:	d1 07       	cpc	r29, r17
    1310:	c1 f7       	brne	.-16     	; 0x1302 <delay_ms+0x12>
		delay_us(1000);
	}
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	08 95       	ret

0000131c <reg_read>:
uint8_t reg_read(uint8_t addr)
{
	uint8_t addr_new, msg;
	addr_new = addr + 0b10000000;

	msg = spi_transfer(addr);		// Send the desired address
    131c:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	msg = spi_transfer(0);			// Read back
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	
	return msg;
}
    1326:	08 95       	ret

00001328 <reg_write>:

void reg_write(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1328:	cf 93       	push	r28
    132a:	c6 2f       	mov	r28, r22
	uint8_t msg;
	
	msg = spi_transfer(addr);		// Send the desired address
    132c:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	msg = spi_transfer(data);		// Send the desired data
    1330:	8c 2f       	mov	r24, r28
    1332:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	
	return;
}
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

0000133a <reg_read2F>:

uint8_t reg_read2F(uint8_t addr)
{
    133a:	cf 93       	push	r28
    133c:	c8 2f       	mov	r28, r24
	uint8_t msg;
	msg = 0b1010111;
	
	msg = spi_transfer(msg);		// Address extension command
    133e:	87 e5       	ldi	r24, 0x57	; 87
    1340:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	msg = spi_transfer(addr);		// Send the desired address
    1344:	8c 2f       	mov	r24, r28
    1346:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	msg = spi_transfer(0);			// Read back
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	
	return msg;
}
    1350:	cf 91       	pop	r28
    1352:	08 95       	ret

00001354 <reg_write2F>:

void reg_write2F(uint8_t addr, uint8_t data)		// Doesn't need to return anything.
{
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	d8 2f       	mov	r29, r24
    135a:	c6 2f       	mov	r28, r22
	uint8_t msg;
		
	msg = 0b1010111;
	
	msg = spi_transfer(msg);		// Address extension command
    135c:	87 e5       	ldi	r24, 0x57	; 87
    135e:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	msg = spi_transfer(addr);		// Send the desired address
    1362:	8d 2f       	mov	r24, r29
    1364:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	msg = spi_transfer(data);		// Send the desired data
    1368:	8c 2f       	mov	r24, r28
    136a:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
	
	return;
}
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <cmd_str>:
}


uint8_t cmd_str(uint8_t addr)
{
	return spi_transfer(addr);
    1374:	0e 94 25 09 	call	0x124a	; 0x124a <spi_transfer>
}
    1378:	08 95       	ret

0000137a <reg_write_bit>:
		
	return;
}

void reg_write_bit(uint8_t reg, uint8_t n, uint8_t data)
{
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	c8 2f       	mov	r28, r24
    1382:	16 2f       	mov	r17, r22
    1384:	d4 2f       	mov	r29, r20
	uint8_t old_value = reg_read(reg);
    1386:	0e 94 8e 09 	call	0x131c	; 0x131c <reg_read>
    138a:	28 2f       	mov	r18, r24
	uint8_t	power = 2^n;
    138c:	52 e0       	ldi	r21, 0x02	; 2
    138e:	51 27       	eor	r21, r17
	uint8_t	new_value = old_value - (old_value % (2 * power)) + data*power + old_value%power;
    1390:	38 2f       	mov	r19, r24
    1392:	5d 9f       	mul	r21, r29
    1394:	30 0d       	add	r19, r0
    1396:	11 24       	eor	r1, r1
    1398:	65 2f       	mov	r22, r21
    139a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__udivmodqi4>
    139e:	e3 2f       	mov	r30, r19
    13a0:	e9 0f       	add	r30, r25
    13a2:	82 2f       	mov	r24, r18
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	45 2f       	mov	r20, r21
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	ba 01       	movw	r22, r20
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	0e 94 c7 0b 	call	0x178e	; 0x178e <__divmodhi4>
    13b4:	6e 2f       	mov	r22, r30
    13b6:	68 1b       	sub	r22, r24
	reg_write(reg, new_value);
    13b8:	8c 2f       	mov	r24, r28
    13ba:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	return;
}
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	08 95       	ret

000013c6 <reg_write_bit2F>:
	
	return nth_bit;
}

void reg_write_bit2F(uint8_t reg, uint8_t n, uint8_t data)
{
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	c8 2f       	mov	r28, r24
    13ce:	16 2f       	mov	r17, r22
    13d0:	d4 2f       	mov	r29, r20
	uint8_t old_value = reg_read2F(reg);
    13d2:	0e 94 9d 09 	call	0x133a	; 0x133a <reg_read2F>
    13d6:	28 2f       	mov	r18, r24
	uint8_t	power = 2^n;
    13d8:	52 e0       	ldi	r21, 0x02	; 2
    13da:	51 27       	eor	r21, r17
	uint8_t	new_value = old_value - (old_value % (2 * power)) + data*power + old_value%power;
    13dc:	38 2f       	mov	r19, r24
    13de:	5d 9f       	mul	r21, r29
    13e0:	30 0d       	add	r19, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	65 2f       	mov	r22, r21
    13e6:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__udivmodqi4>
    13ea:	e3 2f       	mov	r30, r19
    13ec:	e9 0f       	add	r30, r25
    13ee:	82 2f       	mov	r24, r18
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	45 2f       	mov	r20, r21
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	ba 01       	movw	r22, r20
    13f8:	66 0f       	add	r22, r22
    13fa:	77 1f       	adc	r23, r23
    13fc:	0e 94 c7 0b 	call	0x178e	; 0x178e <__divmodhi4>
    1400:	6e 2f       	mov	r22, r30
    1402:	68 1b       	sub	r22, r24
	reg_write2F(reg, new_value);
    1404:	8c 2f       	mov	r24, r28
    1406:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	return;
}
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	1f 91       	pop	r17
    1410:	08 95       	ret

00001412 <transceiver_initialize>:
void set_CSn(uint8_t state)
{
	if(state)
	SS_set_high();
	else
	SS_set_low();
    1412:	0e 94 4c 09 	call	0x1298	; 0x1298 <SS_set_low>
	set_CSn(0);
	
	// Don't need the while loop that was here.
	
	// RESET
	cmd_str(SRES);				// SRES			Reset Chip
    1416:	80 e3       	ldi	r24, 0x30	; 48
    1418:	0e 94 ba 09 	call	0x1374	; 0x1374 <cmd_str>
	
	cmd_str(SIDLE);
    141c:	86 e3       	ldi	r24, 0x36	; 54
    141e:	0e 94 ba 09 	call	0x1374	; 0x1374 <cmd_str>
	
	// Reset RX FIFO
	cmd_str(SFRX);				// SRFX			Flush RX FIFO
    1422:	8a e3       	ldi	r24, 0x3A	; 58
    1424:	0e 94 ba 09 	call	0x1374	; 0x1374 <cmd_str>
	
	// Reset TX FIFO
	cmd_str(SFTX);				// STFX			Flush TX FIFO
    1428:	8b e3       	ldi	r24, 0x3B	; 59
    142a:	0e 94 ba 09 	call	0x1374	; 0x1374 <cmd_str>
	
	//********** SETTINGS **********//
	
	//high performance settings
	reg_write2F(0x12, 0x00);          //FS_DIG1: 0x00         Frequency Synthesizer Digital Reg. 1
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	82 e1       	ldi	r24, 0x12	; 18
    1432:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x13, 0x5F);          //FS_DIG0: 0x5F         Frequency Synthesizer Digital Reg. 0
    1436:	6f e5       	ldi	r22, 0x5F	; 95
    1438:	83 e1       	ldi	r24, 0x13	; 19
    143a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x16, 0x40);          //FS_CAL1: 0x40         Frequency Synthesizer Calibration Reg. 1
    143e:	60 e4       	ldi	r22, 0x40	; 64
    1440:	86 e1       	ldi	r24, 0x16	; 22
    1442:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x17, 0x0E);          //FS_CAL0: 0x0E         Frequency Synthesizer Calibration Reg. 0
    1446:	6e e0       	ldi	r22, 0x0E	; 14
    1448:	87 e1       	ldi	r24, 0x17	; 23
    144a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x19, 0x03);          //FS_DIVTWO: 0x03       Frequency Synthesizer Divide by 2
    144e:	63 e0       	ldi	r22, 0x03	; 3
    1450:	89 e1       	ldi	r24, 0x19	; 25
    1452:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x1B, 0x33);          //FS_DSM0: 0x33         FS Digital Synthesizer Module Configuration Reg. 0
    1456:	63 e3       	ldi	r22, 0x33	; 51
    1458:	8b e1       	ldi	r24, 0x1B	; 27
    145a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x1D, 0x17);          //FS_DVCO: 0x17         Frequency Synthesizer Divider Chain Configuration ..
    145e:	67 e1       	ldi	r22, 0x17	; 23
    1460:	8d e1       	ldi	r24, 0x1D	; 29
    1462:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x1F, 0x50);          //FS_PFD: 0x50          Frequency Synthesizer Phase Frequency Detector Con..
    1466:	60 e5       	ldi	r22, 0x50	; 80
    1468:	8f e1       	ldi	r24, 0x1F	; 31
    146a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x20, 0x6E);          //FS_PRE: 0x6E          Frequency Synthesizer Prescaler Configuration
    146e:	6e e6       	ldi	r22, 0x6E	; 110
    1470:	80 e2       	ldi	r24, 0x20	; 32
    1472:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x21, 0x14);          //FS_REG_DIV_CML: 0x14  Frequency Synthesizer Divider Regulator Configurat..
    1476:	64 e1       	ldi	r22, 0x14	; 20
    1478:	81 e2       	ldi	r24, 0x21	; 33
    147a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x22, 0xAC);          //FS_SPARE: 0xAC        Set up Frequency Synthesizer Spare
    147e:	6c ea       	ldi	r22, 0xAC	; 172
    1480:	82 e2       	ldi	r24, 0x22	; 34
    1482:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x27, 0xB4);          //FS_VCO0: 0xB4         FS Voltage Controlled Oscillator Configuration Reg..
    1486:	64 eb       	ldi	r22, 0xB4	; 180
    1488:	87 e2       	ldi	r24, 0x27	; 39
    148a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x32, 0x0E);          //XOSC5: 0x0E           Crystal Oscillator Configuration Reg. 5
    148e:	6e e0       	ldi	r22, 0x0E	; 14
    1490:	82 e3       	ldi	r24, 0x32	; 50
    1492:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x36, 0x03);          //XOSC1: 0x03           Crystal Oscillator Configuration Reg. 0
    1496:	63 e0       	ldi	r22, 0x03	; 3
    1498:	86 e3       	ldi	r24, 0x36	; 54
    149a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>

	//For test purposes only, use values from SmartRF for all bits
	reg_write2F(0x00, 0x04);          //
    149e:	64 e0       	ldi	r22, 0x04	; 4
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x03, 0x00);          //
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x09, 0x00);          //
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	89 e0       	ldi	r24, 0x09	; 9
    14b2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x0F, 0x02);          //
    14b6:	62 e0       	ldi	r22, 0x02	; 2
    14b8:	8f e0       	ldi	r24, 0x0F	; 15
    14ba:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x10, 0xA6);          //
    14be:	66 ea       	ldi	r22, 0xA6	; 166
    14c0:	80 e1       	ldi	r24, 0x10	; 16
    14c2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x11, 0x04);          //
    14c6:	64 e0       	ldi	r22, 0x04	; 4
    14c8:	81 e1       	ldi	r24, 0x11	; 17
    14ca:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x1A, 0x00);          //
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	8a e1       	ldi	r24, 0x1A	; 26
    14d2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x1C, 0xFF);          //
    14d6:	6f ef       	ldi	r22, 0xFF	; 255
    14d8:	8c e1       	ldi	r24, 0x1C	; 28
    14da:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x1E, 0x00);          //
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	8e e1       	ldi	r24, 0x1E	; 30
    14e2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x20, 0x6E);          //
    14e6:	6e e6       	ldi	r22, 0x6E	; 110
    14e8:	80 e2       	ldi	r24, 0x20	; 32
    14ea:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x23, 0x14);          //
    14ee:	64 e1       	ldi	r22, 0x14	; 20
    14f0:	83 e2       	ldi	r24, 0x23	; 35
    14f2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x24, 0x00);          //
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	84 e2       	ldi	r24, 0x24	; 36
    14fa:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x28, 0x00);          //
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	88 e2       	ldi	r24, 0x28	; 40
    1502:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x29, 0x02);          //
    1506:	62 e0       	ldi	r22, 0x02	; 2
    1508:	89 e2       	ldi	r24, 0x29	; 41
    150a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x2A, 0x00);          //
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	8a e2       	ldi	r24, 0x2A	; 42
    1512:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x2B, 0x00);          //
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	8b e2       	ldi	r24, 0x2B	; 43
    151a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x2C, 0x10);          //
    151e:	60 e1       	ldi	r22, 0x10	; 16
    1520:	8c e2       	ldi	r24, 0x2C	; 44
    1522:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x2D, 0x00);          //
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	8d e2       	ldi	r24, 0x2D	; 45
    152a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x2E, 0x00);          //
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8e e2       	ldi	r24, 0x2E	; 46
    1532:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x2F, 0x01);          //
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	8f e2       	ldi	r24, 0x2F	; 47
    153a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x30, 0x01);          //
    153e:	61 e0       	ldi	r22, 0x01	; 1
    1540:	80 e3       	ldi	r24, 0x30	; 48
    1542:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x31, 0x01);          //
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	81 e3       	ldi	r24, 0x31	; 49
    154a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x33, 0xA0);          //
    154e:	60 ea       	ldi	r22, 0xA0	; 160
    1550:	83 e3       	ldi	r24, 0x33	; 51
    1552:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x34, 0x03);          //
    1556:	63 e0       	ldi	r22, 0x03	; 3
    1558:	84 e3       	ldi	r24, 0x34	; 52
    155a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x38, 0x00);          //
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	88 e3       	ldi	r24, 0x38	; 56
    1562:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x39, 0x00);          //
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	89 e3       	ldi	r24, 0x39	; 57
    156a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x68, 0x00);          //
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	88 e6       	ldi	r24, 0x68	; 104
    1572:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x7B, 0x00);          //
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	8b e7       	ldi	r24, 0x7B	; 123
    157a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x7C, 0x3F);          //
    157e:	6f e3       	ldi	r22, 0x3F	; 63
    1580:	8c e7       	ldi	r24, 0x7C	; 124
    1582:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x96, 0x00);          //
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	86 e9       	ldi	r24, 0x96	; 150
    158a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x97, 0x00);          //
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	87 e9       	ldi	r24, 0x97	; 151
    1592:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x98, 0x00);          //
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	88 e9       	ldi	r24, 0x98	; 152
    159a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x99, 0x00);          //
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	89 e9       	ldi	r24, 0x99	; 153
    15a2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x9A, 0x00);          //
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	8a e9       	ldi	r24, 0x9A	; 154
    15aa:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x9B, 0x0B);          //
    15ae:	6b e0       	ldi	r22, 0x0B	; 11
    15b0:	8b e9       	ldi	r24, 0x9B	; 155
    15b2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x9C, 0x40);          //
    15b6:	60 e4       	ldi	r22, 0x40	; 64
    15b8:	8c e9       	ldi	r24, 0x9C	; 156
    15ba:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x9D, 0x00);          //
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	8d e9       	ldi	r24, 0x9D	; 157
    15c2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x9E, 0x00);          //
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	8e e9       	ldi	r24, 0x9E	; 158
    15ca:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x9F, 0x3C);          //
    15ce:	6c e3       	ldi	r22, 0x3C	; 60
    15d0:	8f e9       	ldi	r24, 0x9F	; 159
    15d2:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0xA0, 0x00);          //
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	80 ea       	ldi	r24, 0xA0	; 160
    15da:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>

	//For test purposes only, use values from SmartRF for some bits
	reg_write(0x08, 0x0B);            //*Changed on line 152
    15de:	6b e0       	ldi	r22, 0x0B	; 11
    15e0:	88 e0       	ldi	r24, 0x08	; 8
    15e2:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x13, 0x0D);            //
    15e6:	6d e0       	ldi	r22, 0x0D	; 13
    15e8:	83 e1       	ldi	r24, 0x13	; 19
    15ea:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x26, 0x04);            //*Changed on line 144
    15ee:	64 e0       	ldi	r22, 0x04	; 4
    15f0:	86 e2       	ldi	r24, 0x26	; 38
    15f2:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x28, 0x00);            //*Changed on line 145
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	88 e2       	ldi	r24, 0x28	; 40
    15fa:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x2B, 0x7F);            //
    15fe:	6f e7       	ldi	r22, 0x7F	; 127
    1600:	8b e2       	ldi	r24, 0x2B	; 43
    1602:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write2F(0x05, 0x00);          //
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	85 e0       	ldi	r24, 0x05	; 5
    160a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x14, 0x00);          //
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	84 e1       	ldi	r24, 0x14	; 20
    1612:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x26, 0x00);          //
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	86 e2       	ldi	r24, 0x26	; 38
    161a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x35, 0x04);          //
    161e:	64 e0       	ldi	r22, 0x04	; 4
    1620:	85 e3       	ldi	r24, 0x35	; 53
    1622:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x7A, 0xD1);          //
    1626:	61 ed       	ldi	r22, 0xD1	; 209
    1628:	8a e7       	ldi	r24, 0x7A	; 122
    162a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x8D, 0x01);          //
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	8d e8       	ldi	r24, 0x8D	; 141
    1632:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>

	//High performance RX
	reg_write(0x08, 0x0B);            //
    1636:	6b e0       	ldi	r22, 0x0B	; 11
    1638:	88 e0       	ldi	r24, 0x08	; 8
    163a:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x0C, 0x1C);            //
    163e:	6c e1       	ldi	r22, 0x1C	; 28
    1640:	8c e0       	ldi	r24, 0x0C	; 12
    1642:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x10, 0x00);            //
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	80 e1       	ldi	r24, 0x10	; 16
    164a:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x11, 0x04);            //
    164e:	64 e0       	ldi	r22, 0x04	; 4
    1650:	81 e1       	ldi	r24, 0x11	; 17
    1652:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x13, 0x05);            //
    1656:	65 e0       	ldi	r22, 0x05	; 5
    1658:	83 e1       	ldi	r24, 0x13	; 19
    165a:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x1C, 0xA9);            //
    165e:	69 ea       	ldi	r22, 0xA9	; 169
    1660:	8c e1       	ldi	r24, 0x1C	; 28
    1662:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x1D, 0xCF);            //
    1666:	6f ec       	ldi	r22, 0xCF	; 207
    1668:	8d e1       	ldi	r24, 0x1D	; 29
    166a:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x1E, 0x00);            //
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	8e e1       	ldi	r24, 0x1E	; 30
    1672:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x20, 0x03);            //
    1676:	63 e0       	ldi	r22, 0x03	; 3
    1678:	80 e2       	ldi	r24, 0x20	; 32
    167a:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x2E, 0x00);            //
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	8e e2       	ldi	r24, 0x2E	; 46
    1682:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write2F(0x00, 0x00);          //
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	
	//modulation and freq deviation settings
	reg_write(0x0A, 0b01001000);       //DEVIATION_M: 0x48      set DEV_M to 72 which sets freq deviation to 20.019531kHz (with DEV_M=5)
    168e:	68 e4       	ldi	r22, 0x48	; 72
    1690:	8a e0       	ldi	r24, 0x0A	; 10
    1692:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x0B, 0b00000101);       //MODCFG_DEV_E: 0x05     set up modulation mode and DEV_E to 5 (see DEV_M register)
    1696:	65 e0       	ldi	r22, 0x05	; 5
    1698:	8b e0       	ldi	r24, 0x0B	; 11
    169a:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x21, 0b00000100);       //FS_CFG: B00010100      set up LO divider to 8 (410.0 - 480.0 MHz band), out of lock detector enabled	
    169e:	64 e0       	ldi	r22, 0x04	; 4
    16a0:	81 e2       	ldi	r24, 0x21	; 33
    16a2:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>

	//set preamble
	reg_write(0x0D, 0x00);            //PREAMBLE_CFG1: 0x00    No preamble
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	8d e0       	ldi	r24, 0x0D	; 13
    16aa:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write_bit(0x0E, 5, 0);        //PQT_EN: 0x00           Preamble detection disabled
    16ae:	40 e0       	ldi	r20, 0x00	; 0
    16b0:	65 e0       	ldi	r22, 0x05	; 5
    16b2:	8e e0       	ldi	r24, 0x0E	; 14
    16b4:	0e 94 bd 09 	call	0x137a	; 0x137a <reg_write_bit>

	//TOC_LIMIT
	reg_write_bit2F(0x02, 7, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	67 e0       	ldi	r22, 0x07	; 7
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <reg_write_bit2F>
	reg_write_bit2F(0x02, 6, 0);      //TOC_LIMIT: 0x00        Using the low tolerance setting (TOC_LIMIT = 0) greatly reduces system settling times and system power consumption as no preamble bits are needed for bit synchronization or frequency offset compensation (4 bits preamble needed for AGC settling).
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	66 e0       	ldi	r22, 0x06	; 6
    16c6:	82 e0       	ldi	r24, 0x02	; 2
    16c8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <reg_write_bit2F>

	//set SYNC word
	reg_write_bit(0x08, 6, 0);        //PQT_GATING_EN: 0       PQT gating disabled (preamble not required)
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	66 e0       	ldi	r22, 0x06	; 6
    16d0:	88 e0       	ldi	r24, 0x08	; 8
    16d2:	0e 94 bd 09 	call	0x137a	; 0x137a <reg_write_bit>
	reg_write(0x09, 0b00010111);       //SYNC_CFG0: B00010111   32 bit SYNC word. Bit error qualifier disabled. No check on bit errors
    16d6:	67 e1       	ldi	r22, 0x17	; 23
    16d8:	89 e0       	ldi	r24, 0x09	; 9
    16da:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x04, 0x93);            //SYNC3: 0x93            Set SYNC word bits 31:24
    16de:	63 e9       	ldi	r22, 0x93	; 147
    16e0:	84 e0       	ldi	r24, 0x04	; 4
    16e2:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x05, 0x0B);            //SYNC2: 0x0B            Set SYNC word bits 23:16
    16e6:	6b e0       	ldi	r22, 0x0B	; 11
    16e8:	85 e0       	ldi	r24, 0x05	; 5
    16ea:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x06, 0x51);            //SYNC1: 0x51            Set SYNC word bits 15:8
    16ee:	61 e5       	ldi	r22, 0x51	; 81
    16f0:	86 e0       	ldi	r24, 0x06	; 6
    16f2:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x07, 0xDE);            //SYNC0: 0xDE            Set SYNC word bits 7:0
    16f6:	6e ed       	ldi	r22, 0xDE	; 222
    16f8:	87 e0       	ldi	r24, 0x07	; 7
    16fa:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>

	//set packets
	reg_write_bit(0x12, 6, 1);        //FIFO_EN: 1             FIFO enable set to true
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	66 e0       	ldi	r22, 0x06	; 6
    1702:	82 e1       	ldi	r24, 0x12	; 18
    1704:	0e 94 bd 09 	call	0x137a	; 0x137a <reg_write_bit>
	reg_write_bit(0x13, 6, 0);        //TRANSPARENT_MODE_EN: 0 Disable transparent mode
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	66 e0       	ldi	r22, 0x06	; 6
    170c:	83 e1       	ldi	r24, 0x13	; 19
    170e:	0e 94 bd 09 	call	0x137a	; 0x137a <reg_write_bit>
	reg_write(0x26, 0x00);            //PKT_CFG2: 0x00         set FIFO mode
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	86 e2       	ldi	r24, 0x26	; 38
    1716:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x28, 0x00);            //PKT_CFG0: 0x00         set fixed packet length
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	88 e2       	ldi	r24, 0x28	; 40
    171e:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	reg_write(0x2E, 0xFF);            //PKT_LEN: 0xFF          set packet length to 0xFF (max)
    1722:	6f ef       	ldi	r22, 0xFF	; 255
    1724:	8e e2       	ldi	r24, 0x2E	; 46
    1726:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>

	//set power level
	reg_write(0x2B, 0b01111111);       //PA_CFG2: 0x7F          set POWER_RAMP to 64 (output power to 14.5dBm, equation 21)
    172a:	6f e7       	ldi	r22, 0x7F	; 127
    172c:	8b e2       	ldi	r24, 0x2B	; 43
    172e:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>

	//frequency offset setting
	reg_write2F(0x0A, 0);             //FREQOFF1: 0x00         set frequency offset to 0
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	8a e0       	ldi	r24, 0x0A	; 10
    1736:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x0B, 0);             //FREQOFF0: 0x00
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	8b e0       	ldi	r24, 0x0B	; 11
    173e:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>

	//Frequency setting
	reg_write2F(0x0C, 0x6C);          //FREQ2: 0x6C            set frequency to 434MHz (sets Vco, see equation from FREQ2 section of user guide)
    1742:	6c e6       	ldi	r22, 0x6C	; 108
    1744:	8c e0       	ldi	r24, 0x0C	; 12
    1746:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x0D, 0x80);          //FREQ1: 0x80
    174a:	60 e8       	ldi	r22, 0x80	; 128
    174c:	8d e0       	ldi	r24, 0x0D	; 13
    174e:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>
	reg_write2F(0x0E, 0x00);          //FREQ0: 0x00
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	8e e0       	ldi	r24, 0x0E	; 14
    1756:	0e 94 aa 09 	call	0x1354	; 0x1354 <reg_write2F>

	//set up GPIO1 to 17
	reg_write(0x00, 17);
    175a:	61 e1       	ldi	r22, 0x11	; 17
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	0e 94 94 09 	call	0x1328	; 0x1328 <reg_write>
	
	//strobe commands to start RX
	cmd_str(SCAL);                   // Calibrate frequency synthesizer
    1762:	83 e3       	ldi	r24, 0x33	; 51
    1764:	0e 94 ba 09 	call	0x1374	; 0x1374 <cmd_str>

	cmd_str(SAFC);					 // Automatic frequency control
    1768:	87 e3       	ldi	r24, 0x37	; 55
    176a:	0e 94 ba 09 	call	0x1374	; 0x1374 <cmd_str>

	cmd_str(SRX);                    // Put in RX mode
    176e:	84 e3       	ldi	r24, 0x34	; 52
    1770:	0e 94 ba 09 	call	0x1374	; 0x1374 <cmd_str>
    1774:	08 95       	ret

00001776 <__udivmodqi4>:
    1776:	99 1b       	sub	r25, r25
    1778:	79 e0       	ldi	r23, 0x09	; 9
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <__udivmodqi4_ep>

0000177c <__udivmodqi4_loop>:
    177c:	99 1f       	adc	r25, r25
    177e:	96 17       	cp	r25, r22
    1780:	08 f0       	brcs	.+2      	; 0x1784 <__udivmodqi4_ep>
    1782:	96 1b       	sub	r25, r22

00001784 <__udivmodqi4_ep>:
    1784:	88 1f       	adc	r24, r24
    1786:	7a 95       	dec	r23
    1788:	c9 f7       	brne	.-14     	; 0x177c <__udivmodqi4_loop>
    178a:	80 95       	com	r24
    178c:	08 95       	ret

0000178e <__divmodhi4>:
    178e:	97 fb       	bst	r25, 7
    1790:	07 2e       	mov	r0, r23
    1792:	16 f4       	brtc	.+4      	; 0x1798 <__divmodhi4+0xa>
    1794:	00 94       	com	r0
    1796:	07 d0       	rcall	.+14     	; 0x17a6 <__divmodhi4_neg1>
    1798:	77 fd       	sbrc	r23, 7
    179a:	09 d0       	rcall	.+18     	; 0x17ae <__divmodhi4_neg2>
    179c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__udivmodhi4>
    17a0:	07 fc       	sbrc	r0, 7
    17a2:	05 d0       	rcall	.+10     	; 0x17ae <__divmodhi4_neg2>
    17a4:	3e f4       	brtc	.+14     	; 0x17b4 <__divmodhi4_exit>

000017a6 <__divmodhi4_neg1>:
    17a6:	90 95       	com	r25
    17a8:	81 95       	neg	r24
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	08 95       	ret

000017ae <__divmodhi4_neg2>:
    17ae:	70 95       	com	r23
    17b0:	61 95       	neg	r22
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255

000017b4 <__divmodhi4_exit>:
    17b4:	08 95       	ret

000017b6 <__tablejump2__>:
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31

000017ba <__tablejump__>:
    17ba:	05 90       	lpm	r0, Z+
    17bc:	f4 91       	lpm	r31, Z
    17be:	e0 2d       	mov	r30, r0
    17c0:	09 94       	ijmp

000017c2 <__udivmodhi4>:
    17c2:	aa 1b       	sub	r26, r26
    17c4:	bb 1b       	sub	r27, r27
    17c6:	51 e1       	ldi	r21, 0x11	; 17
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <__udivmodhi4_ep>

000017ca <__udivmodhi4_loop>:
    17ca:	aa 1f       	adc	r26, r26
    17cc:	bb 1f       	adc	r27, r27
    17ce:	a6 17       	cp	r26, r22
    17d0:	b7 07       	cpc	r27, r23
    17d2:	10 f0       	brcs	.+4      	; 0x17d8 <__udivmodhi4_ep>
    17d4:	a6 1b       	sub	r26, r22
    17d6:	b7 0b       	sbc	r27, r23

000017d8 <__udivmodhi4_ep>:
    17d8:	88 1f       	adc	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	5a 95       	dec	r21
    17de:	a9 f7       	brne	.-22     	; 0x17ca <__udivmodhi4_loop>
    17e0:	80 95       	com	r24
    17e2:	90 95       	com	r25
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	08 95       	ret

000017ea <_exit>:
    17ea:	f8 94       	cli

000017ec <__stop_program>:
    17ec:	ff cf       	rjmp	.-2      	; 0x17ec <__stop_program>
