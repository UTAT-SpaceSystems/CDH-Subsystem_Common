
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000002c1  00800100  00800100  0000245c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000002e8  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004b7c  00000000  00000000  00002774  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001029  00000000  00000000  000072f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000013b8  00000000  00000000  00008319  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000708  00000000  00000000  000096d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000b73  00000000  00000000  00009ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00002374  00000000  00000000  0000a94f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000280  00000000  00000000  0000ccc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      30:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__vector_12>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      3c:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__vector_15>
      40:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__vector_16>
      44:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__vector_17>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      7c:	d8 00       	.word	0x00d8	; ????
      7e:	db 00       	.word	0x00db	; ????
      80:	e8 00       	.word	0x00e8	; ????
      82:	5f 01       	movw	r10, r30
      84:	eb 00       	.word	0x00eb	; ????
      86:	5f 01       	movw	r10, r30
      88:	f8 00       	.word	0x00f8	; ????
      8a:	5f 01       	movw	r10, r30
      8c:	05 01       	movw	r0, r10
      8e:	12 01       	movw	r2, r4
      90:	1f 01       	movw	r2, r30
      92:	2c 01       	movw	r4, r24
      94:	2f 01       	movw	r4, r30
      96:	5f 01       	movw	r10, r30
      98:	3c 01       	movw	r6, r24
      9a:	5f 01       	movw	r10, r30
      9c:	5f 01       	movw	r10, r30
      9e:	5c 01       	movw	r10, r24
      a0:	5f 01       	movw	r10, r30
      a2:	59 01       	movw	r10, r18
      a4:	2d 04       	cpc	r2, r13
      a6:	bf 04       	cpc	r11, r15
      a8:	49 05       	cpc	r20, r9
      aa:	bd 05       	cpc	r27, r13
      ac:	fd 05       	cpc	r31, r13
      ae:	79 06       	cpc	r7, r25
      b0:	f6 06       	cpc	r15, r22
      b2:	93 07       	cpc	r25, r19
      b4:	39 08       	sbc	r3, r9
      b6:	27 04       	cpc	r2, r7
      b8:	42 09       	sbc	r20, r2

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf ef       	ldi	r28, 0xFF	; 255
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_clear_bss>:
      c6:	23 e0       	ldi	r18, 0x03	; 3
      c8:	a0 e0       	ldi	r26, 0x00	; 0
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a1 3c       	cpi	r26, 0xC1	; 193
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <main>
      da:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      e8:	82 ee       	ldi	r24, 0xE2	; 226
      ea:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      ee:	80 ea       	ldi	r24, 0xA0	; 160
      f0:	80 93 7b 00 	sts	0x007B, r24
      f4:	08 95       	ret

000000f6 <run_battBalance>:
//if the flag is set from commands, then flip the pin that controls the battBalance on.
//batt balance pins are 23 and 24 

void run_battBalance()
{
	if (balance_l == 1)
      f6:	80 91 f3 01 	lds	r24, 0x01F3
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	19 f4       	brne	.+6      	; 0x104 <run_battBalance+0xe>
	{
		PIN_set(BALANCE_L_P);
      fe:	87 e1       	ldi	r24, 0x17	; 23
     100:	0e 94 06 11 	call	0x220c	; 0x220c <PIN_set>
	}
	if (balance_l == 0)
     104:	80 91 f3 01 	lds	r24, 0x01F3
     108:	81 11       	cpse	r24, r1
     10a:	03 c0       	rjmp	.+6      	; 0x112 <run_battBalance+0x1c>
	{
		PIN_clr(BALANCE_L_P);
     10c:	87 e1       	ldi	r24, 0x17	; 23
     10e:	0e 94 46 11 	call	0x228c	; 0x228c <PIN_clr>
	}
	if (balance_h == 1)
     112:	80 91 db 01 	lds	r24, 0x01DB
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	19 f4       	brne	.+6      	; 0x120 <run_battBalance+0x2a>
	{
		PIN_set(BALANCE_H_P);
     11a:	88 e1       	ldi	r24, 0x18	; 24
     11c:	0e 94 06 11 	call	0x220c	; 0x220c <PIN_set>
	}
	if (balance_h == 0)
     120:	80 91 db 01 	lds	r24, 0x01DB
     124:	81 11       	cpse	r24, r1
     126:	03 c0       	rjmp	.+6      	; 0x12e <run_battBalance+0x38>
	{
		PIN_clr(BALANCE_H_P);
     128:	88 e1       	ldi	r24, 0x18	; 24
     12a:	0e 94 46 11 	call	0x228c	; 0x228c <PIN_clr>
     12e:	08 95       	ret

00000130 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     130:	21 ed       	ldi	r18, 0xD1	; 209
     132:	31 e0       	ldi	r19, 0x01	; 1
     134:	30 93 b6 03 	sts	0x03B6, r19
     138:	20 93 b5 03 	sts	0x03B5, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     13c:	10 92 b9 03 	sts	0x03B9, r1
	message.id.std = id;  // populate ID field with ID Tag
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	70 93 b1 03 	sts	0x03B1, r23
     146:	60 93 b0 03 	sts	0x03B0, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     14a:	22 e0       	ldi	r18, 0x02	; 2
     14c:	20 93 af 03 	sts	0x03AF, r18
	message.dlc = 8;			 // Max length of a CAN message.
     150:	28 e0       	ldi	r18, 0x08	; 8
     152:	20 93 b4 03 	sts	0x03B4, r18
	mob_number = 4;
     156:	24 e0       	ldi	r18, 0x04	; 4
     158:	20 93 f0 02 	sts	0x02F0, r18
     15c:	dc 01       	movw	r26, r24
     15e:	e1 ed       	ldi	r30, 0xD1	; 209
     160:	f1 e0       	ldi	r31, 0x01	; 1
     162:	89 ed       	ldi	r24, 0xD9	; 217
     164:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     166:	2d 91       	ld	r18, X+
     168:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     16a:	e8 17       	cp	r30, r24
     16c:	f9 07       	cpc	r31, r25
     16e:	d9 f7       	brne	.-10     	; 0x166 <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     170:	60 91 f0 02 	lds	r22, 0x02F0
     174:	8e ea       	ldi	r24, 0xAE	; 174
     176:	93 e0       	ldi	r25, 0x03	; 3
     178:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     17c:	81 11       	cpse	r24, r1
     17e:	f8 cf       	rjmp	.-16     	; 0x170 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     180:	60 91 f0 02 	lds	r22, 0x02F0
     184:	8e ea       	ldi	r24, 0xAE	; 174
     186:	93 e0       	ldi	r25, 0x03	; 3
     188:	0e 94 0f 0a 	call	0x141e	; 0x141e <can_get_status>
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	c1 f3       	breq	.-16     	; 0x180 <can_send_message+0x50>

	return;
}
     190:	08 95       	ret

00000192 <decode_command>:

void decode_command(uint8_t* command_array)
{		
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	ec 01       	movw	r28, r24
	uint8_t i, command  = *(command_array + 5);
	uint8_t req_by = (*(command_array + 7)) >> 4;

	switch(command)
     198:	4d 81       	ldd	r20, Y+5	; 0x05
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	fa 01       	movw	r30, r20
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	e4 31       	cpi	r30, 0x14	; 20
     1a2:	f1 05       	cpc	r31, r1
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <decode_command+0x16>
     1a6:	8b c0       	rjmp	.+278    	; 0x2be <decode_command+0x12c>
     1a8:	e2 5c       	subi	r30, 0xC2	; 194
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__tablejump2__>
		case REQ_RESPONSE :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED3);
			}
			send_now = 1;
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	80 93 0b 02 	sts	0x020B, r24
		case REQ_DATA :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
			send_data = 1;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	80 93 d3 02 	sts	0x02D3, r24
     1bc:	de 01       	movw	r26, r28
     1be:	e8 ef       	ldi	r30, 0xF8	; 248
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     1c6:	2d 91       	ld	r18, X+
     1c8:	21 93       	st	Z+, r18
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
			send_data = 1;
			for (i = 0; i < 8; i ++)
     1ca:	e8 17       	cp	r30, r24
     1cc:	f9 07       	cpc	r31, r25
     1ce:	d9 f7       	brne	.-10     	; 0x1c6 <decode_command+0x34>
		case REQ_HK :
			if(SELF_ID != 1)
			{
				PIN_toggle(LED2);
			}
			send_hk = 1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	80 93 b1 02 	sts	0x02B1, r24
		case REQ_READ:
			read_response = 1;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	80 93 10 02 	sts	0x0210, r24
     1dc:	de 01       	movw	r26, r28
     1de:	e5 ea       	ldi	r30, 0xA5	; 165
     1e0:	f3 e0       	ldi	r31, 0x03	; 3
     1e2:	8d ea       	ldi	r24, 0xAD	; 173
     1e4:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     1e6:	2d 91       	ld	r18, X+
     1e8:	21 93       	st	Z+, r18
				PIN_toggle(LED2);
			}
			send_hk = 1;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1ea:	e8 17       	cp	r30, r24
     1ec:	f9 07       	cpc	r31, r25
     1ee:	d9 f7       	brne	.-10     	; 0x1e6 <decode_command+0x54>
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	80 93 e8 01 	sts	0x01E8, r24
     1f6:	de 01       	movw	r26, r28
     1f8:	e2 e0       	ldi	r30, 0x02	; 2
     1fa:	f1 e0       	ldi	r31, 0x01	; 1
     1fc:	8a e0       	ldi	r24, 0x0A	; 10
     1fe:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     200:	2d 91       	ld	r18, X+
     202:	21 93       	st	Z+, r18
			{
				read_arr[i] = *(command_array + i);
			}
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     204:	e8 17       	cp	r30, r24
     206:	f9 07       	cpc	r31, r25
     208:	d9 f7       	brne	.-10     	; 0x200 <decode_command+0x6e>
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 d0 02 	sts	0x02D0, r24
     210:	de 01       	movw	r26, r28
     212:	e9 ee       	ldi	r30, 0xE9	; 233
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	81 ef       	ldi	r24, 0xF1	; 241
     218:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				sensh_arr[i] = *(command_array + i);
     21a:	2d 91       	ld	r18, X+
     21c:	21 93       	st	Z+, r18
			{
				write_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_HIGH:
			set_sens_h = 1;
			for (i = 0; i < 8; i ++)
     21e:	e8 17       	cp	r30, r24
     220:	f9 07       	cpc	r31, r25
     222:	d9 f7       	brne	.-10     	; 0x21a <decode_command+0x88>
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	80 93 d5 02 	sts	0x02D5, r24
     22a:	de 01       	movw	r26, r28
     22c:	e0 e0       	ldi	r30, 0x00	; 0
     22e:	f3 e0       	ldi	r31, 0x03	; 3
     230:	88 e0       	ldi	r24, 0x08	; 8
     232:	93 e0       	ldi	r25, 0x03	; 3
			for (i = 0; i < 8; i ++)
			{
				sensl_arr[i] = *(command_array + i);
     234:	2d 91       	ld	r18, X+
     236:	21 93       	st	Z+, r18
			{
				sensh_arr[i] = *(command_array + i);
			}
		case SET_SENSOR_LOW:
			set_sens_l = 1;
			for (i = 0; i < 8; i ++)
     238:	e8 17       	cp	r30, r24
     23a:	f9 07       	cpc	r31, r25
     23c:	d9 f7       	brne	.-10     	; 0x234 <decode_command+0xa2>
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 d4 02 	sts	0x02D4, r24
     244:	de 01       	movw	r26, r28
     246:	ec ed       	ldi	r30, 0xDC	; 220
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	84 ee       	ldi	r24, 0xE4	; 228
     24c:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				setv_arr[i] = *(command_array + i);
     24e:	2d 91       	ld	r18, X+
     250:	21 93       	st	Z+, r18
			{
				sensl_arr[i] = *(command_array + i);
			}
		case SET_VAR:
			set_varf = 1;
			for (i = 0; i < 8; i ++)
     252:	e8 17       	cp	r30, r24
     254:	f9 07       	cpc	r31, r25
     256:	d9 f7       	brne	.-10     	; 0x24e <decode_command+0xbc>
			{
				setv_arr[i] = *(command_array + i);
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
     258:	88 81       	ld	r24, Y
     25a:	80 93 07 02 	sts	0x0207, r24
		case SEND_TM:
			new_tm_msgf = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	80 93 0d 02 	sts	0x020D, r24
     264:	de 01       	movw	r26, r28
     266:	e6 ed       	ldi	r30, 0xD6	; 214
     268:	f2 e0       	ldi	r31, 0x02	; 2
     26a:	8e ed       	ldi	r24, 0xDE	; 222
     26c:	92 e0       	ldi	r25, 0x02	; 2
			for (i = 0; i < 8; i ++)
			{
				new_tm_msg[i] = *(command_array + i);
     26e:	2d 91       	ld	r18, X+
     270:	21 93       	st	Z+, r18
			}
		case SET_TIME:
			CURRENT_MINUTE = *(command_array);
		case SEND_TM:
			new_tm_msgf = 1;
			for (i = 0; i < 8; i ++)
     272:	e8 17       	cp	r30, r24
     274:	f9 07       	cpc	r31, r25
     276:	d9 f7       	brne	.-10     	; 0x26e <decode_command+0xdc>
			{
				new_tm_msg[i] = *(command_array + i);
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
     278:	80 91 d2 02 	lds	r24, 0x02D2
     27c:	81 11       	cpse	r24, r1
     27e:	19 c0       	rjmp	.+50     	; 0x2b2 <decode_command+0x120>
     280:	80 91 f5 02 	lds	r24, 0x02F5
     284:	81 11       	cpse	r24, r1
     286:	15 c0       	rjmp	.+42     	; 0x2b2 <decode_command+0x120>
}

// Let the OBC know that you are ready to receive TM packet.
static void start_tm_packet(void)
{
	send_arr[7] = (SELF_ID << 4)|COMS_TASK_ID;
     288:	87 e1       	ldi	r24, 0x17	; 23
     28a:	80 93 cc 01 	sts	0x01CC, r24
	send_arr[6] = MT_COM;
     28e:	82 e0       	ldi	r24, 0x02	; 2
     290:	80 93 cb 01 	sts	0x01CB, r24
	send_arr[5] = OK_START_TM_PACKET;
     294:	80 e1       	ldi	r24, 0x10	; 16
     296:	80 93 ca 01 	sts	0x01CA, r24
	send_arr[4] = CURRENT_MINUTE;
     29a:	80 91 07 02 	lds	r24, 0x0207
     29e:	80 93 c9 01 	sts	0x01C9, r24
	receiving_tmf = 1;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	80 93 f5 02 	sts	0x02F5, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
     2a8:	61 e1       	ldi	r22, 0x11	; 17
     2aa:	85 ec       	ldi	r24, 0xC5	; 197
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
			}
		case TM_PACKET_READY:
			if((!current_tm_fullf) && (!receiving_tmf))
				start_tm_packet();
		case TC_TRANSACTION_RESP:
			tc_transfer_completef = *command_array;
     2b2:	88 81       	ld	r24, Y
     2b4:	80 93 f5 01 	sts	0x01F5, r24
		case OK_START_TC_PACKET:
			start_tc_transferf = 1;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	80 93 f4 01 	sts	0x01F4, r24
		default:
			return;
	}
	return;
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <set_up_msg>:

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2c4:	10 92 b9 03 	sts	0x03B9, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2c8:	95 e0       	ldi	r25, 0x05	; 5
     2ca:	90 93 af 03 	sts	0x03AF, r25
	message.dlc = 8;			 // Max length of a CAN message.
     2ce:	98 e0       	ldi	r25, 0x08	; 8
     2d0:	90 93 b4 03 	sts	0x03B4, r25
	mob_number = mailbox;
     2d4:	80 93 f0 02 	sts	0x02F0, r24
	
	if(mailbox == 0)
     2d8:	81 11       	cpse	r24, r1
     2da:	0e c0       	rjmp	.+28     	; 0x2f8 <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     2dc:	89 ea       	ldi	r24, 0xA9	; 169
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	90 93 b6 03 	sts	0x03B6, r25
     2e4:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     2e8:	80 91 c0 02 	lds	r24, 0x02C0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 b1 03 	sts	0x03B1, r25
     2f2:	80 93 b0 03 	sts	0x03B0, r24
		return;
     2f6:	08 95       	ret
	}
	if(mailbox == 1)
     2f8:	81 30       	cpi	r24, 0x01	; 1
     2fa:	71 f4       	brne	.+28     	; 0x318 <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     2fc:	85 eb       	ldi	r24, 0xB5	; 181
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	90 93 b6 03 	sts	0x03B6, r25
     304:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = id_array[1];
     308:	80 91 c1 02 	lds	r24, 0x02C1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	90 93 b1 03 	sts	0x03B1, r25
     312:	80 93 b0 03 	sts	0x03B0, r24
		return;
     316:	08 95       	ret
	}
	if(mailbox == 2)
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	71 f4       	brne	.+28     	; 0x338 <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     31c:	8d eb       	ldi	r24, 0xBD	; 189
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	90 93 b6 03 	sts	0x03B6, r25
     324:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = id_array[2];
     328:	80 91 c2 02 	lds	r24, 0x02C2
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	90 93 b1 03 	sts	0x03B1, r25
     332:	80 93 b0 03 	sts	0x03B0, r24
		return;
     336:	08 95       	ret
	}
	if(mailbox == 3)
     338:	83 30       	cpi	r24, 0x03	; 3
     33a:	71 f4       	brne	.+28     	; 0x358 <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     33c:	88 ec       	ldi	r24, 0xC8	; 200
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	90 93 b6 03 	sts	0x03B6, r25
     344:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = id_array[3];
     348:	80 91 c3 02 	lds	r24, 0x02C3
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	90 93 b1 03 	sts	0x03B1, r25
     352:	80 93 b0 03 	sts	0x03B0, r24
		return;
     356:	08 95       	ret
	}
	if(mailbox == 5)
     358:	85 30       	cpi	r24, 0x05	; 5
     35a:	69 f4       	brne	.+26     	; 0x376 <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     35c:	84 ee       	ldi	r24, 0xE4	; 228
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	90 93 b6 03 	sts	0x03B6, r25
     364:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = id_array[5];
     368:	80 91 c5 02 	lds	r24, 0x02C5
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	90 93 b1 03 	sts	0x03B1, r25
     372:	80 93 b0 03 	sts	0x03B0, r24
     376:	08 95       	ret

00000378 <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     378:	81 11       	cpse	r24, r1
     37a:	20 c0       	rjmp	.+64     	; 0x3bc <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     37c:	10 92 b9 03 	sts	0x03B9, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     380:	85 e0       	ldi	r24, 0x05	; 5
     382:	80 93 af 03 	sts	0x03AF, r24
		message.dlc = 8;			 // Max length of a CAN message.
     386:	88 e0       	ldi	r24, 0x08	; 8
     388:	80 93 b4 03 	sts	0x03B4, r24
		mob_number = mailbox;
     38c:	10 92 f0 02 	sts	0x02F0, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     390:	89 ea       	ldi	r24, 0xA9	; 169
     392:	92 e0       	ldi	r25, 0x02	; 2
     394:	90 93 b6 03 	sts	0x03B6, r25
     398:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     39c:	80 91 c0 02 	lds	r24, 0x02C0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	90 93 b1 03 	sts	0x03B1, r25
     3a6:	80 93 b0 03 	sts	0x03B0, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     3aa:	60 91 f0 02 	lds	r22, 0x02F0
     3ae:	8e ea       	ldi	r24, 0xAE	; 174
     3b0:	93 e0       	ldi	r25, 0x03	; 3
     3b2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     3b6:	81 11       	cpse	r24, r1
     3b8:	f8 cf       	rjmp	.-16     	; 0x3aa <clean_up_msg+0x32>
     3ba:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	01 f5       	brne	.+64     	; 0x400 <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3c0:	10 92 b9 03 	sts	0x03B9, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     3c4:	85 e0       	ldi	r24, 0x05	; 5
     3c6:	80 93 af 03 	sts	0x03AF, r24
		message.dlc = 8;			 // Max length of a CAN message.
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	80 93 b4 03 	sts	0x03B4, r24
		mob_number = mailbox;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	80 93 f0 02 	sts	0x02F0, r24
		message.pt_data = &data1[0];
     3d6:	85 eb       	ldi	r24, 0xB5	; 181
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	90 93 b6 03 	sts	0x03B6, r25
     3de:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = SUB0_ID1;
     3e2:	85 e1       	ldi	r24, 0x15	; 21
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	90 93 b1 03 	sts	0x03B1, r25
     3ea:	80 93 b0 03 	sts	0x03B0, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3ee:	60 91 f0 02 	lds	r22, 0x02F0
     3f2:	8e ea       	ldi	r24, 0xAE	; 174
     3f4:	93 e0       	ldi	r25, 0x03	; 3
     3f6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     3fa:	81 11       	cpse	r24, r1
     3fc:	f8 cf       	rjmp	.-16     	; 0x3ee <clean_up_msg+0x76>
     3fe:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	09 f5       	brne	.+66     	; 0x446 <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     404:	10 92 b9 03 	sts	0x03B9, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     408:	85 e0       	ldi	r24, 0x05	; 5
     40a:	80 93 af 03 	sts	0x03AF, r24
		message.dlc = 8;			 // Max length of a CAN message.
     40e:	88 e0       	ldi	r24, 0x08	; 8
     410:	80 93 b4 03 	sts	0x03B4, r24
		mob_number = mailbox;
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	80 93 f0 02 	sts	0x02F0, r24
		message.pt_data = &data2[0];
     41a:	8d eb       	ldi	r24, 0xBD	; 189
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	90 93 b6 03 	sts	0x03B6, r25
     422:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = id_array[2];
     426:	80 91 c2 02 	lds	r24, 0x02C2
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	90 93 b1 03 	sts	0x03B1, r25
     430:	80 93 b0 03 	sts	0x03B0, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     434:	60 91 f0 02 	lds	r22, 0x02F0
     438:	8e ea       	ldi	r24, 0xAE	; 174
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     440:	81 11       	cpse	r24, r1
     442:	f8 cf       	rjmp	.-16     	; 0x434 <clean_up_msg+0xbc>
     444:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     446:	83 30       	cpi	r24, 0x03	; 3
     448:	09 f5       	brne	.+66     	; 0x48c <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     44a:	10 92 b9 03 	sts	0x03B9, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     44e:	85 e0       	ldi	r24, 0x05	; 5
     450:	80 93 af 03 	sts	0x03AF, r24
		message.dlc = 8;			 // Max length of a CAN message.
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	80 93 b4 03 	sts	0x03B4, r24
		mob_number = mailbox;
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	80 93 f0 02 	sts	0x02F0, r24
		message.pt_data = &data3[0];
     460:	88 ec       	ldi	r24, 0xC8	; 200
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	90 93 b6 03 	sts	0x03B6, r25
     468:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = id_array[3];
     46c:	80 91 c3 02 	lds	r24, 0x02C3
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	90 93 b1 03 	sts	0x03B1, r25
     476:	80 93 b0 03 	sts	0x03B0, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     47a:	60 91 f0 02 	lds	r22, 0x02F0
     47e:	8e ea       	ldi	r24, 0xAE	; 174
     480:	93 e0       	ldi	r25, 0x03	; 3
     482:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     486:	81 11       	cpse	r24, r1
     488:	f8 cf       	rjmp	.-16     	; 0x47a <clean_up_msg+0x102>
     48a:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     48c:	85 30       	cpi	r24, 0x05	; 5
     48e:	f1 f4       	brne	.+60     	; 0x4cc <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     490:	10 92 b9 03 	sts	0x03B9, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     494:	80 93 af 03 	sts	0x03AF, r24
		message.dlc = 8;			 // Max length of a CAN message.
     498:	98 e0       	ldi	r25, 0x08	; 8
     49a:	90 93 b4 03 	sts	0x03B4, r25
		mob_number = mailbox;
     49e:	80 93 f0 02 	sts	0x02F0, r24
		message.pt_data = &data5[0];
     4a2:	84 ee       	ldi	r24, 0xE4	; 228
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	90 93 b6 03 	sts	0x03B6, r25
     4aa:	80 93 b5 03 	sts	0x03B5, r24
		message.id.std = id_array[5];
     4ae:	80 91 c5 02 	lds	r24, 0x02C5
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	90 93 b1 03 	sts	0x03B1, r25
     4b8:	80 93 b0 03 	sts	0x03B0, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     4bc:	60 91 f0 02 	lds	r22, 0x02F0
     4c0:	8e ea       	ldi	r24, 0xAE	; 174
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     4c8:	81 11       	cpse	r24, r1
     4ca:	f8 cf       	rjmp	.-16     	; 0x4bc <clean_up_msg+0x144>
     4cc:	08 95       	ret

000004ce <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     4d8:	60 91 f0 02 	lds	r22, 0x02F0
     4dc:	8e ea       	ldi	r24, 0xAE	; 174
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	0e 94 0f 0a 	call	0x141e	; 0x141e <can_get_status>
     4e4:	81 30       	cpi	r24, 0x01	; 1
     4e6:	11 f1       	breq	.+68     	; 0x52c <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     4e8:	80 91 b7 03 	lds	r24, 0x03B7
     4ec:	80 32       	cpi	r24, 0x20	; 32
     4ee:	d9 f4       	brne	.+54     	; 0x526 <can_check_housekeep+0x58>
     4f0:	a0 91 b5 03 	lds	r26, 0x03B5
     4f4:	b0 91 b6 03 	lds	r27, 0x03B6
     4f8:	c0 ec       	ldi	r28, 0xC0	; 192
     4fa:	d2 e0       	ldi	r29, 0x02	; 2
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     4fc:	e8 eb       	ldi	r30, 0xB8	; 184
     4fe:	f2 e0       	ldi	r31, 0x02	; 2
     500:	8d 91       	ld	r24, X+
     502:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     504:	ec 17       	cp	r30, r28
     506:	fd 07       	cpc	r31, r29
     508:	d9 f7       	brne	.-10     	; 0x500 <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     50a:	80 91 be 02 	lds	r24, 0x02BE
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	21 f4       	brne	.+8      	; 0x51a <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     512:	88 eb       	ldi	r24, 0xB8	; 184
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	0e 94 c9 00 	call	0x192	; 0x192 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     51a:	e8 eb       	ldi	r30, 0xB8	; 184
     51c:	f2 e0       	ldi	r31, 0x02	; 2
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     51e:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     520:	ec 17       	cp	r30, r28
     522:	fd 07       	cpc	r31, r29
     524:	e1 f7       	brne	.-8      	; 0x51e <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     526:	85 e0       	ldi	r24, 0x05	; 5
     528:	0e 94 bc 01 	call	0x378	; 0x378 <clean_up_msg>
	}	
	return;
}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <can_check_general>:
#include "can_api.h"

static void start_tm_packet(void);

void can_check_general(void)
{
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     548:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     54a:	07 eb       	ldi	r16, 0xB7	; 183
     54c:	13 e0       	ldi	r17, 0x03	; 3
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     54e:	0f 2e       	mov	r0, r31
     550:	f5 eb       	ldi	r31, 0xB5	; 181
     552:	af 2e       	mov	r10, r31
     554:	f3 e0       	ldi	r31, 0x03	; 3
     556:	bf 2e       	mov	r11, r31
     558:	f0 2d       	mov	r31, r0
     55a:	c0 ec       	ldi	r28, 0xC0	; 192
     55c:	d2 e0       	ldi	r29, 0x02	; 2
     55e:	0f 2e       	mov	r0, r31
     560:	f8 eb       	ldi	r31, 0xB8	; 184
     562:	ef 2e       	mov	r14, r31
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	ff 2e       	mov	r15, r31
     568:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     56a:	0f 2e       	mov	r0, r31
     56c:	fe eb       	ldi	r31, 0xBE	; 190
     56e:	cf 2e       	mov	r12, r31
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	df 2e       	mov	r13, r31
     574:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     576:	89 2d       	mov	r24, r9
     578:	0e 94 62 01 	call	0x2c4	; 0x2c4 <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     57c:	60 91 f0 02 	lds	r22, 0x02F0
     580:	8e ea       	ldi	r24, 0xAE	; 174
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	0e 94 0f 0a 	call	0x141e	; 0x141e <can_get_status>
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	e1 f0       	breq	.+56     	; 0x5c4 <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     58c:	f8 01       	movw	r30, r16
     58e:	80 81       	ld	r24, Z
     590:	80 32       	cpi	r24, 0x20	; 32
     592:	a9 f4       	brne	.+42     	; 0x5be <can_check_general+0x8c>
     594:	f5 01       	movw	r30, r10
     596:	a0 81       	ld	r26, Z
     598:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     59a:	f7 01       	movw	r30, r14
     59c:	8d 91       	ld	r24, X+
     59e:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     5a0:	ec 17       	cp	r30, r28
     5a2:	fd 07       	cpc	r31, r29
     5a4:	d9 f7       	brne	.-10     	; 0x59c <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     5a6:	f6 01       	movw	r30, r12
     5a8:	80 81       	ld	r24, Z
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	19 f4       	brne	.+6      	; 0x5b4 <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     5ae:	c7 01       	movw	r24, r14
     5b0:	0e 94 c9 00 	call	0x192	; 0x192 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     5b4:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     5b6:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     5b8:	ec 17       	cp	r30, r28
     5ba:	fd 07       	cpc	r31, r29
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     5be:	89 2d       	mov	r24, r9
     5c0:	0e 94 bc 01 	call	0x378	; 0x378 <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     5c4:	93 94       	inc	r9
     5c6:	f4 e0       	ldi	r31, 0x04	; 4
     5c8:	9f 12       	cpse	r9, r31
     5ca:	d5 cf       	rjmp	.-86     	; 0x576 <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     5cc:	0e 94 67 02 	call	0x4ce	; 0x4ce <can_check_housekeep>
	
	return;
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	1f 91       	pop	r17
     5d6:	0f 91       	pop	r16
     5d8:	ff 90       	pop	r15
     5da:	ef 90       	pop	r14
     5dc:	df 90       	pop	r13
     5de:	cf 90       	pop	r12
     5e0:	bf 90       	pop	r11
     5e2:	af 90       	pop	r10
     5e4:	9f 90       	pop	r9
     5e6:	08 95       	ret

000005e8 <can_init_mobs>:
/************************************************************************/

void can_init_mobs(void)
{
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     5e8:	89 ea       	ldi	r24, 0xA9	; 169
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	90 93 b6 03 	sts	0x03B6, r25
     5f0:	80 93 b5 03 	sts	0x03B5, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     5f4:	10 92 b9 03 	sts	0x03B9, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     5f8:	80 91 c0 02 	lds	r24, 0x02C0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 93 b1 03 	sts	0x03B1, r25
     602:	80 93 b0 03 	sts	0x03B0, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     606:	85 e0       	ldi	r24, 0x05	; 5
     608:	80 93 af 03 	sts	0x03AF, r24
	message.dlc = 8;			 // Max length of a CAN message.
     60c:	88 e0       	ldi	r24, 0x08	; 8
     60e:	80 93 b4 03 	sts	0x03B4, r24
	mob_number = 0;
     612:	10 92 f0 02 	sts	0x02F0, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     616:	60 91 f0 02 	lds	r22, 0x02F0
     61a:	8e ea       	ldi	r24, 0xAE	; 174
     61c:	93 e0       	ldi	r25, 0x03	; 3
     61e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     622:	81 11       	cpse	r24, r1
     624:	f8 cf       	rjmp	.-16     	; 0x616 <can_init_mobs+0x2e>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     626:	85 eb       	ldi	r24, 0xB5	; 181
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	90 93 b6 03 	sts	0x03B6, r25
     62e:	80 93 b5 03 	sts	0x03B5, r24
	message.ctrl.ide = 0;
     632:	10 92 b9 03 	sts	0x03B9, r1
	message.id.std = id_array[1];
     636:	80 91 c1 02 	lds	r24, 0x02C1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	90 93 b1 03 	sts	0x03B1, r25
     640:	80 93 b0 03 	sts	0x03B0, r24
	message.cmd = CMD_RX_DATA;
     644:	85 e0       	ldi	r24, 0x05	; 5
     646:	80 93 af 03 	sts	0x03AF, r24
	message.dlc = 8;
     64a:	88 e0       	ldi	r24, 0x08	; 8
     64c:	80 93 b4 03 	sts	0x03B4, r24
	mob_number = 1;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	80 93 f0 02 	sts	0x02F0, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     656:	60 91 f0 02 	lds	r22, 0x02F0
     65a:	8e ea       	ldi	r24, 0xAE	; 174
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     662:	81 11       	cpse	r24, r1
     664:	f8 cf       	rjmp	.-16     	; 0x656 <can_init_mobs+0x6e>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     666:	8d eb       	ldi	r24, 0xBD	; 189
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	90 93 b6 03 	sts	0x03B6, r25
     66e:	80 93 b5 03 	sts	0x03B5, r24
	message.ctrl.ide = 0;
     672:	10 92 b9 03 	sts	0x03B9, r1
	message.id.std = id_array[2];
     676:	80 91 c2 02 	lds	r24, 0x02C2
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	90 93 b1 03 	sts	0x03B1, r25
     680:	80 93 b0 03 	sts	0x03B0, r24
	message.cmd = CMD_RX_DATA;
     684:	85 e0       	ldi	r24, 0x05	; 5
     686:	80 93 af 03 	sts	0x03AF, r24
	message.dlc = 8;
     68a:	88 e0       	ldi	r24, 0x08	; 8
     68c:	80 93 b4 03 	sts	0x03B4, r24
	mob_number = 2;
     690:	82 e0       	ldi	r24, 0x02	; 2
     692:	80 93 f0 02 	sts	0x02F0, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     696:	60 91 f0 02 	lds	r22, 0x02F0
     69a:	8e ea       	ldi	r24, 0xAE	; 174
     69c:	93 e0       	ldi	r25, 0x03	; 3
     69e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     6a2:	81 11       	cpse	r24, r1
     6a4:	f8 cf       	rjmp	.-16     	; 0x696 <can_init_mobs+0xae>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     6a6:	88 ec       	ldi	r24, 0xC8	; 200
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	90 93 b6 03 	sts	0x03B6, r25
     6ae:	80 93 b5 03 	sts	0x03B5, r24
	message.ctrl.ide = 0;
     6b2:	10 92 b9 03 	sts	0x03B9, r1
	message.id.std = id_array[3];
     6b6:	80 91 c3 02 	lds	r24, 0x02C3
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	90 93 b1 03 	sts	0x03B1, r25
     6c0:	80 93 b0 03 	sts	0x03B0, r24
	message.cmd = CMD_RX_DATA;
     6c4:	85 e0       	ldi	r24, 0x05	; 5
     6c6:	80 93 af 03 	sts	0x03AF, r24
	message.dlc = 8;
     6ca:	88 e0       	ldi	r24, 0x08	; 8
     6cc:	80 93 b4 03 	sts	0x03B4, r24
	mob_number = 3;
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	80 93 f0 02 	sts	0x02F0, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     6d6:	60 91 f0 02 	lds	r22, 0x02F0
     6da:	8e ea       	ldi	r24, 0xAE	; 174
     6dc:	93 e0       	ldi	r25, 0x03	; 3
     6de:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     6e2:	81 11       	cpse	r24, r1
     6e4:	f8 cf       	rjmp	.-16     	; 0x6d6 <can_init_mobs+0xee>
	
	/* INITIALIZE MOB5 */
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     6e6:	84 ee       	ldi	r24, 0xE4	; 228
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	90 93 b6 03 	sts	0x03B6, r25
     6ee:	80 93 b5 03 	sts	0x03B5, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     6f2:	10 92 b9 03 	sts	0x03B9, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     6f6:	80 91 c5 02 	lds	r24, 0x02C5
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	90 93 b1 03 	sts	0x03B1, r25
     700:	80 93 b0 03 	sts	0x03B0, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	80 93 af 03 	sts	0x03AF, r24
	message.dlc = 8;				// Max length of a CAN message.
     70a:	98 e0       	ldi	r25, 0x08	; 8
     70c:	90 93 b4 03 	sts	0x03B4, r25
	mob_number = 5;
     710:	80 93 f0 02 	sts	0x02F0, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     714:	60 91 f0 02 	lds	r22, 0x02F0
     718:	8e ea       	ldi	r24, 0xAE	; 174
     71a:	93 e0       	ldi	r25, 0x03	; 3
     71c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <can_cmd>
     720:	81 11       	cpse	r24, r1
     722:	f8 cf       	rjmp	.-16     	; 0x714 <can_init_mobs+0x12c>
	
	return;
}
     724:	08 95       	ret

00000726 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     726:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     728:	ad ee       	ldi	r26, 0xED	; 237
     72a:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     72c:	3e ee       	ldi	r19, 0xEE	; 238
     72e:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     730:	98 2f       	mov	r25, r24
     732:	92 95       	swap	r25
     734:	90 7f       	andi	r25, 0xF0	; 240
     736:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     738:	e3 2f       	mov	r30, r19
     73a:	f2 2f       	mov	r31, r18
     73c:	11 92       	st	Z+, r1
     73e:	e8 3f       	cpi	r30, 0xF8	; 248
     740:	f1 05       	cpc	r31, r1
     742:	e1 f7       	brne	.-8      	; 0x73c <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     744:	8f 5f       	subi	r24, 0xFF	; 255
     746:	86 30       	cpi	r24, 0x06	; 6
     748:	99 f7       	brne	.-26     	; 0x730 <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     74a:	08 95       	ret

0000074c <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     74c:	80 91 ef 00 	lds	r24, 0x00EF
     750:	80 7c       	andi	r24, 0xC0	; 192
     752:	61 f0       	breq	.+24     	; 0x76c <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     754:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     758:	98 2f       	mov	r25, r24
     75a:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     75c:	28 2f       	mov	r18, r24
     75e:	20 76       	andi	r18, 0x60	; 96
     760:	20 32       	cpi	r18, 0x20	; 32
     762:	31 f0       	breq	.+12     	; 0x770 <can_get_mob_status+0x24>
     764:	90 34       	cpi	r25, 0x40	; 64
     766:	31 f0       	breq	.+12     	; 0x774 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     768:	8f 71       	andi	r24, 0x1F	; 31
     76a:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     770:	89 2f       	mov	r24, r25
     772:	08 95       	ret
     774:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     776:	08 95       	ret

00000778 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     778:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     77a:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     77c:	aa ef       	ldi	r26, 0xFA	; 250
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	9c 91       	ld	r25, X
     782:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	88 30       	cpi	r24, 0x08	; 8
     788:	d9 f7       	brne	.-10     	; 0x780 <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     78a:	08 95       	ret

0000078c <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	80 93 e2 00 	sts	0x00E2, r24
     798:	8c e0       	ldi	r24, 0x0C	; 12
     79a:	80 93 e3 00 	sts	0x00E3, r24
     79e:	87 e3       	ldi	r24, 0x37	; 55
     7a0:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	08 95       	ret

000007a8 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     7a8:	0e 94 c6 03 	call	0x78c	; 0x78c <can_fixed_baudrate>
     7ac:	88 23       	and	r24, r24
     7ae:	49 f0       	breq	.+18     	; 0x7c2 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     7b0:	0e 94 93 03 	call	0x726	; 0x726 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     7b4:	e8 ed       	ldi	r30, 0xD8	; 216
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	82 60       	ori	r24, 0x02	; 2
     7bc:	80 83       	st	Z, r24
    return (1);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     7c2:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     7c4:	08 95       	ret

000007c6 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	1f 92       	push	r1
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     7d2:	11 96       	adiw	r26, 0x01	; 1
     7d4:	8c 91       	ld	r24, X
     7d6:	11 97       	sbiw	r26, 0x01	; 1
     7d8:	8c 30       	cpi	r24, 0x0C	; 12
     7da:	b1 f4       	brne	.+44     	; 0x808 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     7dc:	19 96       	adiw	r26, 0x09	; 9
     7de:	8c 91       	ld	r24, X
     7e0:	19 97       	sbiw	r26, 0x09	; 9
     7e2:	80 36       	cpi	r24, 0x60	; 96
     7e4:	69 f4       	brne	.+26     	; 0x800 <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     7e6:	86 2f       	mov	r24, r22
     7e8:	82 95       	swap	r24
     7ea:	80 7f       	andi	r24, 0xF0	; 240
     7ec:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     7f0:	ef ee       	ldi	r30, 0xEF	; 239
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	8f 73       	andi	r24, 0x3F	; 63
     7f8:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     7fa:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     7fe:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     800:	19 96       	adiw	r26, 0x09	; 9
     802:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	07 c6       	rjmp	.+3086   	; 0x1416 <__stack+0xb17>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     808:	86 2f       	mov	r24, r22
     80a:	82 95       	swap	r24
     80c:	80 7f       	andi	r24, 0xF0	; 240
     80e:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     812:	80 91 ef 00 	lds	r24, 0x00EF
     816:	80 7c       	andi	r24, 0xC0	; 192
     818:	09 f0       	breq	.+2      	; 0x81c <can_cmd+0x56>
     81a:	f9 c5       	rjmp	.+3058   	; 0x140e <__stack+0xb0f>
    {
      cmd->status = MOB_PENDING; 
     81c:	80 e6       	ldi	r24, 0x60	; 96
     81e:	19 96       	adiw	r26, 0x09	; 9
     820:	8c 93       	st	X, r24
     822:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     824:	6c 93       	st	X, r22
      Can_clear_mob();
     826:	ee ee       	ldi	r30, 0xEE	; 238
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	11 92       	st	Z+, r1
     82c:	e8 3f       	cpi	r30, 0xF8	; 248
     82e:	f1 05       	cpc	r31, r1
     830:	e1 f7       	brne	.-8      	; 0x82a <can_cmd+0x64>
          
      switch (cmd->cmd)
     832:	11 96       	adiw	r26, 0x01	; 1
     834:	4c 91       	ld	r20, X
     836:	11 97       	sbiw	r26, 0x01	; 1
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	fa 01       	movw	r30, r20
     83c:	31 97       	sbiw	r30, 0x01	; 1
     83e:	eb 30       	cpi	r30, 0x0B	; 11
     840:	f1 05       	cpc	r31, r1
     842:	08 f0       	brcs	.+2      	; 0x846 <can_cmd+0x80>
     844:	e0 c5       	rjmp	.+3008   	; 0x1406 <__stack+0xb07>
     846:	ee 5a       	subi	r30, 0xAE	; 174
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     84e:	16 96       	adiw	r26, 0x06	; 6
     850:	8c 91       	ld	r24, X
     852:	16 97       	sbiw	r26, 0x06	; 6
     854:	81 11       	cpse	r24, r1
     856:	b7 c4       	rjmp	.+2414   	; 0x11c6 <__stack+0x8c7>
     858:	c8 c4       	rjmp	.+2448   	; 0x11ea <__stack+0x8eb>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     85a:	1b 96       	adiw	r26, 0x0b	; 11
     85c:	8c 91       	ld	r24, X
     85e:	1b 97       	sbiw	r26, 0x0b	; 11
     860:	88 23       	and	r24, r24
     862:	d9 f1       	breq	.+118    	; 0x8da <can_cmd+0x114>
     864:	14 96       	adiw	r26, 0x04	; 4
     866:	9c 91       	ld	r25, X
     868:	14 97       	sbiw	r26, 0x04	; 4
     86a:	92 95       	swap	r25
     86c:	96 95       	lsr	r25
     86e:	97 70       	andi	r25, 0x07	; 7
     870:	15 96       	adiw	r26, 0x05	; 5
     872:	8c 91       	ld	r24, X
     874:	15 97       	sbiw	r26, 0x05	; 5
     876:	88 0f       	add	r24, r24
     878:	88 0f       	add	r24, r24
     87a:	88 0f       	add	r24, r24
     87c:	89 0f       	add	r24, r25
     87e:	80 93 f3 00 	sts	0x00F3, r24
     882:	13 96       	adiw	r26, 0x03	; 3
     884:	9c 91       	ld	r25, X
     886:	13 97       	sbiw	r26, 0x03	; 3
     888:	92 95       	swap	r25
     88a:	96 95       	lsr	r25
     88c:	97 70       	andi	r25, 0x07	; 7
     88e:	14 96       	adiw	r26, 0x04	; 4
     890:	8c 91       	ld	r24, X
     892:	14 97       	sbiw	r26, 0x04	; 4
     894:	88 0f       	add	r24, r24
     896:	88 0f       	add	r24, r24
     898:	88 0f       	add	r24, r24
     89a:	89 0f       	add	r24, r25
     89c:	80 93 f2 00 	sts	0x00F2, r24
     8a0:	12 96       	adiw	r26, 0x02	; 2
     8a2:	9c 91       	ld	r25, X
     8a4:	12 97       	sbiw	r26, 0x02	; 2
     8a6:	92 95       	swap	r25
     8a8:	96 95       	lsr	r25
     8aa:	97 70       	andi	r25, 0x07	; 7
     8ac:	13 96       	adiw	r26, 0x03	; 3
     8ae:	8c 91       	ld	r24, X
     8b0:	13 97       	sbiw	r26, 0x03	; 3
     8b2:	88 0f       	add	r24, r24
     8b4:	88 0f       	add	r24, r24
     8b6:	88 0f       	add	r24, r24
     8b8:	89 0f       	add	r24, r25
     8ba:	80 93 f1 00 	sts	0x00F1, r24
     8be:	12 96       	adiw	r26, 0x02	; 2
     8c0:	8c 91       	ld	r24, X
     8c2:	12 97       	sbiw	r26, 0x02	; 2
     8c4:	88 0f       	add	r24, r24
     8c6:	88 0f       	add	r24, r24
     8c8:	88 0f       	add	r24, r24
     8ca:	80 93 f0 00 	sts	0x00F0, r24
     8ce:	ef ee       	ldi	r30, 0xEF	; 239
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 81       	ld	r24, Z
     8d4:	80 61       	ori	r24, 0x10	; 16
     8d6:	80 83       	st	Z, r24
     8d8:	1c c0       	rjmp	.+56     	; 0x912 <__stack+0x13>
          else              { Can_set_std_id(cmd->id.std);}
     8da:	12 96       	adiw	r26, 0x02	; 2
     8dc:	8c 91       	ld	r24, X
     8de:	12 97       	sbiw	r26, 0x02	; 2
     8e0:	86 95       	lsr	r24
     8e2:	86 95       	lsr	r24
     8e4:	86 95       	lsr	r24
     8e6:	13 96       	adiw	r26, 0x03	; 3
     8e8:	9c 91       	ld	r25, X
     8ea:	13 97       	sbiw	r26, 0x03	; 3
     8ec:	20 e2       	ldi	r18, 0x20	; 32
     8ee:	92 9f       	mul	r25, r18
     8f0:	80 0d       	add	r24, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	80 93 f3 00 	sts	0x00F3, r24
     8f8:	12 96       	adiw	r26, 0x02	; 2
     8fa:	8c 91       	ld	r24, X
     8fc:	12 97       	sbiw	r26, 0x02	; 2
     8fe:	82 95       	swap	r24
     900:	88 0f       	add	r24, r24
     902:	80 7e       	andi	r24, 0xE0	; 224
     904:	80 93 f2 00 	sts	0x00F2, r24
     908:	ef ee       	ldi	r30, 0xEF	; 239
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	8f 7e       	andi	r24, 0xEF	; 239
     910:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     912:	16 96       	adiw	r26, 0x06	; 6
     914:	8c 91       	ld	r24, X
     916:	16 97       	sbiw	r26, 0x06	; 6
     918:	88 23       	and	r24, r24
     91a:	91 f0       	breq	.+36     	; 0x940 <__stack+0x41>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	8a ef       	ldi	r24, 0xFA	; 250
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	17 96       	adiw	r26, 0x07	; 7
     924:	ed 91       	ld	r30, X+
     926:	fc 91       	ld	r31, X
     928:	18 97       	sbiw	r26, 0x08	; 8
     92a:	e2 0f       	add	r30, r18
     92c:	f1 1d       	adc	r31, r1
     92e:	30 81       	ld	r19, Z
     930:	fc 01       	movw	r30, r24
     932:	30 83       	st	Z, r19
     934:	2f 5f       	subi	r18, 0xFF	; 255
     936:	16 96       	adiw	r26, 0x06	; 6
     938:	3c 91       	ld	r19, X
     93a:	16 97       	sbiw	r26, 0x06	; 6
     93c:	23 17       	cp	r18, r19
     93e:	88 f3       	brcs	.-30     	; 0x922 <__stack+0x23>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     940:	1a 96       	adiw	r26, 0x0a	; 10
     942:	8c 91       	ld	r24, X
     944:	1a 97       	sbiw	r26, 0x0a	; 10
     946:	88 23       	and	r24, r24
     948:	31 f0       	breq	.+12     	; 0x956 <__stack+0x57>
     94a:	e0 ef       	ldi	r30, 0xF0	; 240
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	80 81       	ld	r24, Z
     950:	84 60       	ori	r24, 0x04	; 4
     952:	80 83       	st	Z, r24
     954:	05 c0       	rjmp	.+10     	; 0x960 <__stack+0x61>
            else Can_clear_rtr();    
     956:	e0 ef       	ldi	r30, 0xF0	; 240
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8b 7f       	andi	r24, 0xFB	; 251
     95e:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     960:	ef ee       	ldi	r30, 0xEF	; 239
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	90 81       	ld	r25, Z
     966:	16 96       	adiw	r26, 0x06	; 6
     968:	8c 91       	ld	r24, X
     96a:	89 2b       	or	r24, r25
     96c:	80 83       	st	Z, r24
          Can_config_tx();
     96e:	80 81       	ld	r24, Z
     970:	8f 73       	andi	r24, 0x3F	; 63
     972:	80 83       	st	Z, r24
     974:	80 81       	ld	r24, Z
     976:	80 64       	ori	r24, 0x40	; 64
     978:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     97a:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     97c:	4c c5       	rjmp	.+2712   	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     97e:	1b 96       	adiw	r26, 0x0b	; 11
     980:	8c 91       	ld	r24, X
     982:	1b 97       	sbiw	r26, 0x0b	; 11
     984:	88 23       	and	r24, r24
     986:	d9 f1       	breq	.+118    	; 0x9fe <__stack+0xff>
     988:	14 96       	adiw	r26, 0x04	; 4
     98a:	9c 91       	ld	r25, X
     98c:	14 97       	sbiw	r26, 0x04	; 4
     98e:	92 95       	swap	r25
     990:	96 95       	lsr	r25
     992:	97 70       	andi	r25, 0x07	; 7
     994:	15 96       	adiw	r26, 0x05	; 5
     996:	8c 91       	ld	r24, X
     998:	15 97       	sbiw	r26, 0x05	; 5
     99a:	88 0f       	add	r24, r24
     99c:	88 0f       	add	r24, r24
     99e:	88 0f       	add	r24, r24
     9a0:	89 0f       	add	r24, r25
     9a2:	80 93 f3 00 	sts	0x00F3, r24
     9a6:	13 96       	adiw	r26, 0x03	; 3
     9a8:	9c 91       	ld	r25, X
     9aa:	13 97       	sbiw	r26, 0x03	; 3
     9ac:	92 95       	swap	r25
     9ae:	96 95       	lsr	r25
     9b0:	97 70       	andi	r25, 0x07	; 7
     9b2:	14 96       	adiw	r26, 0x04	; 4
     9b4:	8c 91       	ld	r24, X
     9b6:	14 97       	sbiw	r26, 0x04	; 4
     9b8:	88 0f       	add	r24, r24
     9ba:	88 0f       	add	r24, r24
     9bc:	88 0f       	add	r24, r24
     9be:	89 0f       	add	r24, r25
     9c0:	80 93 f2 00 	sts	0x00F2, r24
     9c4:	12 96       	adiw	r26, 0x02	; 2
     9c6:	9c 91       	ld	r25, X
     9c8:	12 97       	sbiw	r26, 0x02	; 2
     9ca:	92 95       	swap	r25
     9cc:	96 95       	lsr	r25
     9ce:	97 70       	andi	r25, 0x07	; 7
     9d0:	13 96       	adiw	r26, 0x03	; 3
     9d2:	8c 91       	ld	r24, X
     9d4:	13 97       	sbiw	r26, 0x03	; 3
     9d6:	88 0f       	add	r24, r24
     9d8:	88 0f       	add	r24, r24
     9da:	88 0f       	add	r24, r24
     9dc:	89 0f       	add	r24, r25
     9de:	80 93 f1 00 	sts	0x00F1, r24
     9e2:	12 96       	adiw	r26, 0x02	; 2
     9e4:	8c 91       	ld	r24, X
     9e6:	12 97       	sbiw	r26, 0x02	; 2
     9e8:	88 0f       	add	r24, r24
     9ea:	88 0f       	add	r24, r24
     9ec:	88 0f       	add	r24, r24
     9ee:	80 93 f0 00 	sts	0x00F0, r24
     9f2:	ef ee       	ldi	r30, 0xEF	; 239
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	80 61       	ori	r24, 0x10	; 16
     9fa:	80 83       	st	Z, r24
     9fc:	1c c0       	rjmp	.+56     	; 0xa36 <__stack+0x137>
          else              { Can_set_std_id(cmd->id.std);}
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	8c 91       	ld	r24, X
     a02:	12 97       	sbiw	r26, 0x02	; 2
     a04:	86 95       	lsr	r24
     a06:	86 95       	lsr	r24
     a08:	86 95       	lsr	r24
     a0a:	13 96       	adiw	r26, 0x03	; 3
     a0c:	9c 91       	ld	r25, X
     a0e:	13 97       	sbiw	r26, 0x03	; 3
     a10:	f0 e2       	ldi	r31, 0x20	; 32
     a12:	9f 9f       	mul	r25, r31
     a14:	80 0d       	add	r24, r0
     a16:	11 24       	eor	r1, r1
     a18:	80 93 f3 00 	sts	0x00F3, r24
     a1c:	12 96       	adiw	r26, 0x02	; 2
     a1e:	8c 91       	ld	r24, X
     a20:	12 97       	sbiw	r26, 0x02	; 2
     a22:	82 95       	swap	r24
     a24:	88 0f       	add	r24, r24
     a26:	80 7e       	andi	r24, 0xE0	; 224
     a28:	80 93 f2 00 	sts	0x00F2, r24
     a2c:	ef ee       	ldi	r30, 0xEF	; 239
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	8f 7e       	andi	r24, 0xEF	; 239
     a34:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     a36:	16 96       	adiw	r26, 0x06	; 6
     a38:	8c 91       	ld	r24, X
     a3a:	16 97       	sbiw	r26, 0x06	; 6
     a3c:	88 23       	and	r24, r24
     a3e:	91 f0       	breq	.+36     	; 0xa64 <__stack+0x165>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	8a ef       	ldi	r24, 0xFA	; 250
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	17 96       	adiw	r26, 0x07	; 7
     a48:	ed 91       	ld	r30, X+
     a4a:	fc 91       	ld	r31, X
     a4c:	18 97       	sbiw	r26, 0x08	; 8
     a4e:	e2 0f       	add	r30, r18
     a50:	f1 1d       	adc	r31, r1
     a52:	30 81       	ld	r19, Z
     a54:	fc 01       	movw	r30, r24
     a56:	30 83       	st	Z, r19
     a58:	2f 5f       	subi	r18, 0xFF	; 255
     a5a:	16 96       	adiw	r26, 0x06	; 6
     a5c:	3c 91       	ld	r19, X
     a5e:	16 97       	sbiw	r26, 0x06	; 6
     a60:	23 17       	cp	r18, r19
     a62:	88 f3       	brcs	.-30     	; 0xa46 <__stack+0x147>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     a64:	1a 96       	adiw	r26, 0x0a	; 10
     a66:	1c 92       	st	X, r1
     a68:	1a 97       	sbiw	r26, 0x0a	; 10
     a6a:	e0 ef       	ldi	r30, 0xF0	; 240
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	8b 7f       	andi	r24, 0xFB	; 251
     a72:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     a74:	ef ee       	ldi	r30, 0xEF	; 239
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	90 81       	ld	r25, Z
     a7a:	16 96       	adiw	r26, 0x06	; 6
     a7c:	8c 91       	ld	r24, X
     a7e:	89 2b       	or	r24, r25
     a80:	80 83       	st	Z, r24
          Can_config_tx();
     a82:	80 81       	ld	r24, Z
     a84:	8f 73       	andi	r24, 0x3F	; 63
     a86:	80 83       	st	Z, r24
     a88:	80 81       	ld	r24, Z
     a8a:	80 64       	ori	r24, 0x40	; 64
     a8c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a8e:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     a90:	c2 c4       	rjmp	.+2436   	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a92:	1b 96       	adiw	r26, 0x0b	; 11
     a94:	8c 91       	ld	r24, X
     a96:	1b 97       	sbiw	r26, 0x0b	; 11
     a98:	88 23       	and	r24, r24
     a9a:	d9 f1       	breq	.+118    	; 0xb12 <__stack+0x213>
     a9c:	14 96       	adiw	r26, 0x04	; 4
     a9e:	9c 91       	ld	r25, X
     aa0:	14 97       	sbiw	r26, 0x04	; 4
     aa2:	92 95       	swap	r25
     aa4:	96 95       	lsr	r25
     aa6:	97 70       	andi	r25, 0x07	; 7
     aa8:	15 96       	adiw	r26, 0x05	; 5
     aaa:	8c 91       	ld	r24, X
     aac:	15 97       	sbiw	r26, 0x05	; 5
     aae:	88 0f       	add	r24, r24
     ab0:	88 0f       	add	r24, r24
     ab2:	88 0f       	add	r24, r24
     ab4:	89 0f       	add	r24, r25
     ab6:	80 93 f3 00 	sts	0x00F3, r24
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	9c 91       	ld	r25, X
     abe:	13 97       	sbiw	r26, 0x03	; 3
     ac0:	92 95       	swap	r25
     ac2:	96 95       	lsr	r25
     ac4:	97 70       	andi	r25, 0x07	; 7
     ac6:	14 96       	adiw	r26, 0x04	; 4
     ac8:	8c 91       	ld	r24, X
     aca:	14 97       	sbiw	r26, 0x04	; 4
     acc:	88 0f       	add	r24, r24
     ace:	88 0f       	add	r24, r24
     ad0:	88 0f       	add	r24, r24
     ad2:	89 0f       	add	r24, r25
     ad4:	80 93 f2 00 	sts	0x00F2, r24
     ad8:	12 96       	adiw	r26, 0x02	; 2
     ada:	9c 91       	ld	r25, X
     adc:	12 97       	sbiw	r26, 0x02	; 2
     ade:	92 95       	swap	r25
     ae0:	96 95       	lsr	r25
     ae2:	97 70       	andi	r25, 0x07	; 7
     ae4:	13 96       	adiw	r26, 0x03	; 3
     ae6:	8c 91       	ld	r24, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	88 0f       	add	r24, r24
     aec:	88 0f       	add	r24, r24
     aee:	88 0f       	add	r24, r24
     af0:	89 0f       	add	r24, r25
     af2:	80 93 f1 00 	sts	0x00F1, r24
     af6:	12 96       	adiw	r26, 0x02	; 2
     af8:	8c 91       	ld	r24, X
     afa:	12 97       	sbiw	r26, 0x02	; 2
     afc:	88 0f       	add	r24, r24
     afe:	88 0f       	add	r24, r24
     b00:	88 0f       	add	r24, r24
     b02:	80 93 f0 00 	sts	0x00F0, r24
     b06:	ef ee       	ldi	r30, 0xEF	; 239
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	80 61       	ori	r24, 0x10	; 16
     b0e:	80 83       	st	Z, r24
     b10:	1c c0       	rjmp	.+56     	; 0xb4a <__stack+0x24b>
          else              { Can_set_std_id(cmd->id.std);}
     b12:	12 96       	adiw	r26, 0x02	; 2
     b14:	8c 91       	ld	r24, X
     b16:	12 97       	sbiw	r26, 0x02	; 2
     b18:	86 95       	lsr	r24
     b1a:	86 95       	lsr	r24
     b1c:	86 95       	lsr	r24
     b1e:	13 96       	adiw	r26, 0x03	; 3
     b20:	9c 91       	ld	r25, X
     b22:	13 97       	sbiw	r26, 0x03	; 3
     b24:	f0 e2       	ldi	r31, 0x20	; 32
     b26:	9f 9f       	mul	r25, r31
     b28:	80 0d       	add	r24, r0
     b2a:	11 24       	eor	r1, r1
     b2c:	80 93 f3 00 	sts	0x00F3, r24
     b30:	12 96       	adiw	r26, 0x02	; 2
     b32:	8c 91       	ld	r24, X
     b34:	12 97       	sbiw	r26, 0x02	; 2
     b36:	82 95       	swap	r24
     b38:	88 0f       	add	r24, r24
     b3a:	80 7e       	andi	r24, 0xE0	; 224
     b3c:	80 93 f2 00 	sts	0x00F2, r24
     b40:	ef ee       	ldi	r30, 0xEF	; 239
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	8f 7e       	andi	r24, 0xEF	; 239
     b48:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	1a 96       	adiw	r26, 0x0a	; 10
     b4e:	8c 93       	st	X, r24
     b50:	1a 97       	sbiw	r26, 0x0a	; 10
     b52:	e0 ef       	ldi	r30, 0xF0	; 240
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	84 60       	ori	r24, 0x04	; 4
     b5a:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     b5c:	ef ee       	ldi	r30, 0xEF	; 239
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	90 81       	ld	r25, Z
     b62:	16 96       	adiw	r26, 0x06	; 6
     b64:	8c 91       	ld	r24, X
     b66:	89 2b       	or	r24, r25
     b68:	80 83       	st	Z, r24
          Can_config_tx();
     b6a:	80 81       	ld	r24, Z
     b6c:	8f 73       	andi	r24, 0x3F	; 63
     b6e:	80 83       	st	Z, r24
     b70:	80 81       	ld	r24, Z
     b72:	80 64       	ori	r24, 0x40	; 64
     b74:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b76:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     b78:	4e c4       	rjmp	.+2204   	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     b7a:	19 82       	std	Y+1, r1	; 0x01
     b7c:	9b 81       	ldd	r25, Y+3	; 0x03
     b7e:	92 95       	swap	r25
     b80:	96 95       	lsr	r25
     b82:	97 70       	andi	r25, 0x07	; 7
     b84:	8c 81       	ldd	r24, Y+4	; 0x04
     b86:	88 0f       	add	r24, r24
     b88:	88 0f       	add	r24, r24
     b8a:	88 0f       	add	r24, r24
     b8c:	89 0f       	add	r24, r25
     b8e:	80 93 f7 00 	sts	0x00F7, r24
     b92:	9a 81       	ldd	r25, Y+2	; 0x02
     b94:	92 95       	swap	r25
     b96:	96 95       	lsr	r25
     b98:	97 70       	andi	r25, 0x07	; 7
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	88 0f       	add	r24, r24
     b9e:	88 0f       	add	r24, r24
     ba0:	88 0f       	add	r24, r24
     ba2:	89 0f       	add	r24, r25
     ba4:	80 93 f6 00 	sts	0x00F6, r24
     ba8:	99 81       	ldd	r25, Y+1	; 0x01
     baa:	92 95       	swap	r25
     bac:	96 95       	lsr	r25
     bae:	97 70       	andi	r25, 0x07	; 7
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	88 0f       	add	r24, r24
     bb4:	88 0f       	add	r24, r24
     bb6:	88 0f       	add	r24, r24
     bb8:	89 0f       	add	r24, r25
     bba:	80 93 f5 00 	sts	0x00F5, r24
     bbe:	29 81       	ldd	r18, Y+1	; 0x01
     bc0:	22 0f       	add	r18, r18
     bc2:	22 0f       	add	r18, r18
     bc4:	22 0f       	add	r18, r18
     bc6:	84 ef       	ldi	r24, 0xF4	; 244
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	fc 01       	movw	r30, r24
     bcc:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     bce:	ef ee       	ldi	r30, 0xEF	; 239
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	30 81       	ld	r19, Z
     bd4:	16 96       	adiw	r26, 0x06	; 6
     bd6:	2c 91       	ld	r18, X
     bd8:	23 2b       	or	r18, r19
     bda:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     bdc:	dc 01       	movw	r26, r24
     bde:	2c 91       	ld	r18, X
     be0:	2b 7f       	andi	r18, 0xFB	; 251
     be2:	2c 93       	st	X, r18
          Can_clear_idemsk();
     be4:	2c 91       	ld	r18, X
     be6:	2e 7f       	andi	r18, 0xFE	; 254
     be8:	2c 93       	st	X, r18
          Can_config_rx();       
     bea:	80 81       	ld	r24, Z
     bec:	8f 73       	andi	r24, 0x3F	; 63
     bee:	80 83       	st	Z, r24
     bf0:	80 81       	ld	r24, Z
     bf2:	80 68       	ori	r24, 0x80	; 128
     bf4:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     bf6:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     bf8:	0e c4       	rjmp	.+2076   	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	82 95       	swap	r24
     c02:	88 0f       	add	r24, r24
     c04:	80 7e       	andi	r24, 0xE0	; 224
     c06:	81 5e       	subi	r24, 0xE1	; 225
     c08:	27 ef       	ldi	r18, 0xF7	; 247
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	f9 01       	movw	r30, r18
     c0e:	80 83       	st	Z, r24
     c10:	49 81       	ldd	r20, Y+1	; 0x01
     c12:	42 95       	swap	r20
     c14:	44 0f       	add	r20, r20
     c16:	40 7e       	andi	r20, 0xE0	; 224
     c18:	86 ef       	ldi	r24, 0xF6	; 246
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	fc 01       	movw	r30, r24
     c1e:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     c20:	12 96       	adiw	r26, 0x02	; 2
     c22:	4c 91       	ld	r20, X
     c24:	12 97       	sbiw	r26, 0x02	; 2
     c26:	46 95       	lsr	r20
     c28:	46 95       	lsr	r20
     c2a:	46 95       	lsr	r20
     c2c:	13 96       	adiw	r26, 0x03	; 3
     c2e:	5c 91       	ld	r21, X
     c30:	13 97       	sbiw	r26, 0x03	; 3
     c32:	f0 e2       	ldi	r31, 0x20	; 32
     c34:	5f 9f       	mul	r21, r31
     c36:	40 0d       	add	r20, r0
     c38:	11 24       	eor	r1, r1
     c3a:	40 93 f3 00 	sts	0x00F3, r20
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	4c 91       	ld	r20, X
     c42:	12 97       	sbiw	r26, 0x02	; 2
     c44:	42 95       	swap	r20
     c46:	44 0f       	add	r20, r20
     c48:	40 7e       	andi	r20, 0xE0	; 224
     c4a:	40 93 f2 00 	sts	0x00F2, r20
     c4e:	6f ee       	ldi	r22, 0xEF	; 239
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	fb 01       	movw	r30, r22
     c54:	40 81       	ld	r20, Z
     c56:	4f 7e       	andi	r20, 0xEF	; 239
     c58:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     c5a:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     c5c:	5b 81       	ldd	r21, Y+3	; 0x03
     c5e:	52 95       	swap	r21
     c60:	56 95       	lsr	r21
     c62:	57 70       	andi	r21, 0x07	; 7
     c64:	4c 81       	ldd	r20, Y+4	; 0x04
     c66:	44 0f       	add	r20, r20
     c68:	44 0f       	add	r20, r20
     c6a:	44 0f       	add	r20, r20
     c6c:	45 0f       	add	r20, r21
     c6e:	f9 01       	movw	r30, r18
     c70:	40 83       	st	Z, r20
     c72:	3a 81       	ldd	r19, Y+2	; 0x02
     c74:	32 95       	swap	r19
     c76:	36 95       	lsr	r19
     c78:	37 70       	andi	r19, 0x07	; 7
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	22 0f       	add	r18, r18
     c7e:	22 0f       	add	r18, r18
     c80:	22 0f       	add	r18, r18
     c82:	23 0f       	add	r18, r19
     c84:	fc 01       	movw	r30, r24
     c86:	20 83       	st	Z, r18
     c88:	99 81       	ldd	r25, Y+1	; 0x01
     c8a:	92 95       	swap	r25
     c8c:	96 95       	lsr	r25
     c8e:	97 70       	andi	r25, 0x07	; 7
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	88 0f       	add	r24, r24
     c94:	88 0f       	add	r24, r24
     c96:	88 0f       	add	r24, r24
     c98:	89 0f       	add	r24, r25
     c9a:	80 93 f5 00 	sts	0x00F5, r24
     c9e:	29 81       	ldd	r18, Y+1	; 0x01
     ca0:	22 0f       	add	r18, r18
     ca2:	22 0f       	add	r18, r18
     ca4:	22 0f       	add	r18, r18
     ca6:	84 ef       	ldi	r24, 0xF4	; 244
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     cae:	fb 01       	movw	r30, r22
     cb0:	30 81       	ld	r19, Z
     cb2:	16 96       	adiw	r26, 0x06	; 6
     cb4:	2c 91       	ld	r18, X
     cb6:	16 97       	sbiw	r26, 0x06	; 6
     cb8:	23 2b       	or	r18, r19
     cba:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     cbc:	1a 96       	adiw	r26, 0x0a	; 10
     cbe:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     cc0:	dc 01       	movw	r26, r24
     cc2:	2c 91       	ld	r18, X
     cc4:	24 60       	ori	r18, 0x04	; 4
     cc6:	2c 93       	st	X, r18
		  Can_clear_rtr();
     cc8:	a0 ef       	ldi	r26, 0xF0	; 240
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	2c 91       	ld	r18, X
     cce:	2b 7f       	andi	r18, 0xFB	; 251
     cd0:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     cd2:	20 81       	ld	r18, Z
     cd4:	2f 7e       	andi	r18, 0xEF	; 239
     cd6:	20 83       	st	Z, r18
          Can_clear_idemsk();
     cd8:	fc 01       	movw	r30, r24
     cda:	20 81       	ld	r18, Z
     cdc:	2e 7f       	andi	r18, 0xFE	; 254
     cde:	20 83       	st	Z, r18
          Can_config_rx();       
     ce0:	db 01       	movw	r26, r22
     ce2:	8c 91       	ld	r24, X
     ce4:	8f 73       	andi	r24, 0x3F	; 63
     ce6:	8c 93       	st	X, r24
     ce8:	8c 91       	ld	r24, X
     cea:	80 68       	ori	r24, 0x80	; 128
     cec:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     cee:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     cf0:	92 c3       	rjmp	.+1828   	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	82 95       	swap	r24
     cfa:	88 0f       	add	r24, r24
     cfc:	80 7e       	andi	r24, 0xE0	; 224
     cfe:	81 5e       	subi	r24, 0xE1	; 225
     d00:	27 ef       	ldi	r18, 0xF7	; 247
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	80 83       	st	Z, r24
     d08:	49 81       	ldd	r20, Y+1	; 0x01
     d0a:	42 95       	swap	r20
     d0c:	44 0f       	add	r20, r20
     d0e:	40 7e       	andi	r20, 0xE0	; 224
     d10:	86 ef       	ldi	r24, 0xF6	; 246
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	fc 01       	movw	r30, r24
     d16:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     d18:	12 96       	adiw	r26, 0x02	; 2
     d1a:	4c 91       	ld	r20, X
     d1c:	12 97       	sbiw	r26, 0x02	; 2
     d1e:	46 95       	lsr	r20
     d20:	46 95       	lsr	r20
     d22:	46 95       	lsr	r20
     d24:	13 96       	adiw	r26, 0x03	; 3
     d26:	5c 91       	ld	r21, X
     d28:	13 97       	sbiw	r26, 0x03	; 3
     d2a:	f0 e2       	ldi	r31, 0x20	; 32
     d2c:	5f 9f       	mul	r21, r31
     d2e:	40 0d       	add	r20, r0
     d30:	11 24       	eor	r1, r1
     d32:	40 93 f3 00 	sts	0x00F3, r20
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	4c 91       	ld	r20, X
     d3a:	12 97       	sbiw	r26, 0x02	; 2
     d3c:	42 95       	swap	r20
     d3e:	44 0f       	add	r20, r20
     d40:	40 7e       	andi	r20, 0xE0	; 224
     d42:	40 93 f2 00 	sts	0x00F2, r20
     d46:	6f ee       	ldi	r22, 0xEF	; 239
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	fb 01       	movw	r30, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	4f 7e       	andi	r20, 0xEF	; 239
     d50:	40 83       	st	Z, r20
		
          u8_temp=0; 
     d52:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     d54:	5b 81       	ldd	r21, Y+3	; 0x03
     d56:	52 95       	swap	r21
     d58:	56 95       	lsr	r21
     d5a:	57 70       	andi	r21, 0x07	; 7
     d5c:	4c 81       	ldd	r20, Y+4	; 0x04
     d5e:	44 0f       	add	r20, r20
     d60:	44 0f       	add	r20, r20
     d62:	44 0f       	add	r20, r20
     d64:	45 0f       	add	r20, r21
     d66:	f9 01       	movw	r30, r18
     d68:	40 83       	st	Z, r20
     d6a:	3a 81       	ldd	r19, Y+2	; 0x02
     d6c:	32 95       	swap	r19
     d6e:	36 95       	lsr	r19
     d70:	37 70       	andi	r19, 0x07	; 7
     d72:	2b 81       	ldd	r18, Y+3	; 0x03
     d74:	22 0f       	add	r18, r18
     d76:	22 0f       	add	r18, r18
     d78:	22 0f       	add	r18, r18
     d7a:	23 0f       	add	r18, r19
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 83       	st	Z, r18
     d80:	99 81       	ldd	r25, Y+1	; 0x01
     d82:	92 95       	swap	r25
     d84:	96 95       	lsr	r25
     d86:	97 70       	andi	r25, 0x07	; 7
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	88 0f       	add	r24, r24
     d8c:	88 0f       	add	r24, r24
     d8e:	88 0f       	add	r24, r24
     d90:	89 0f       	add	r24, r25
     d92:	80 93 f5 00 	sts	0x00F5, r24
     d96:	29 81       	ldd	r18, Y+1	; 0x01
     d98:	22 0f       	add	r18, r18
     d9a:	22 0f       	add	r18, r18
     d9c:	22 0f       	add	r18, r18
     d9e:	84 ef       	ldi	r24, 0xF4	; 244
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     da6:	fb 01       	movw	r30, r22
     da8:	30 81       	ld	r19, Z
     daa:	16 96       	adiw	r26, 0x06	; 6
     dac:	2c 91       	ld	r18, X
     dae:	16 97       	sbiw	r26, 0x06	; 6
     db0:	23 2b       	or	r18, r19
     db2:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	1a 96       	adiw	r26, 0x0a	; 10
     db8:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     dba:	dc 01       	movw	r26, r24
     dbc:	2c 91       	ld	r18, X
     dbe:	24 60       	ori	r18, 0x04	; 4
     dc0:	2c 93       	st	X, r18
		  Can_set_rtr();
     dc2:	a0 ef       	ldi	r26, 0xF0	; 240
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	2c 91       	ld	r18, X
     dc8:	24 60       	ori	r18, 0x04	; 4
     dca:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     dcc:	20 81       	ld	r18, Z
     dce:	2f 7d       	andi	r18, 0xDF	; 223
     dd0:	20 83       	st	Z, r18
          Can_clear_idemsk();
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 81       	ld	r18, Z
     dd6:	2e 7f       	andi	r18, 0xFE	; 254
     dd8:	20 83       	st	Z, r18
          Can_config_rx();       
     dda:	db 01       	movw	r26, r22
     ddc:	8c 91       	ld	r24, X
     dde:	8f 73       	andi	r24, 0x3F	; 63
     de0:	8c 93       	st	X, r24
     de2:	8c 91       	ld	r24, X
     de4:	80 68       	ori	r24, 0x80	; 128
     de6:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     de8:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     dea:	15 c3       	rjmp	.+1578   	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     dec:	1b 96       	adiw	r26, 0x0b	; 11
     dee:	8c 91       	ld	r24, X
     df0:	1b 97       	sbiw	r26, 0x0b	; 11
     df2:	88 23       	and	r24, r24
     df4:	d9 f1       	breq	.+118    	; 0xe6c <__stack+0x56d>
     df6:	14 96       	adiw	r26, 0x04	; 4
     df8:	9c 91       	ld	r25, X
     dfa:	14 97       	sbiw	r26, 0x04	; 4
     dfc:	92 95       	swap	r25
     dfe:	96 95       	lsr	r25
     e00:	97 70       	andi	r25, 0x07	; 7
     e02:	15 96       	adiw	r26, 0x05	; 5
     e04:	8c 91       	ld	r24, X
     e06:	15 97       	sbiw	r26, 0x05	; 5
     e08:	88 0f       	add	r24, r24
     e0a:	88 0f       	add	r24, r24
     e0c:	88 0f       	add	r24, r24
     e0e:	89 0f       	add	r24, r25
     e10:	80 93 f3 00 	sts	0x00F3, r24
     e14:	13 96       	adiw	r26, 0x03	; 3
     e16:	9c 91       	ld	r25, X
     e18:	13 97       	sbiw	r26, 0x03	; 3
     e1a:	92 95       	swap	r25
     e1c:	96 95       	lsr	r25
     e1e:	97 70       	andi	r25, 0x07	; 7
     e20:	14 96       	adiw	r26, 0x04	; 4
     e22:	8c 91       	ld	r24, X
     e24:	14 97       	sbiw	r26, 0x04	; 4
     e26:	88 0f       	add	r24, r24
     e28:	88 0f       	add	r24, r24
     e2a:	88 0f       	add	r24, r24
     e2c:	89 0f       	add	r24, r25
     e2e:	80 93 f2 00 	sts	0x00F2, r24
     e32:	12 96       	adiw	r26, 0x02	; 2
     e34:	9c 91       	ld	r25, X
     e36:	12 97       	sbiw	r26, 0x02	; 2
     e38:	92 95       	swap	r25
     e3a:	96 95       	lsr	r25
     e3c:	97 70       	andi	r25, 0x07	; 7
     e3e:	13 96       	adiw	r26, 0x03	; 3
     e40:	8c 91       	ld	r24, X
     e42:	13 97       	sbiw	r26, 0x03	; 3
     e44:	88 0f       	add	r24, r24
     e46:	88 0f       	add	r24, r24
     e48:	88 0f       	add	r24, r24
     e4a:	89 0f       	add	r24, r25
     e4c:	80 93 f1 00 	sts	0x00F1, r24
     e50:	12 96       	adiw	r26, 0x02	; 2
     e52:	8c 91       	ld	r24, X
     e54:	12 97       	sbiw	r26, 0x02	; 2
     e56:	88 0f       	add	r24, r24
     e58:	88 0f       	add	r24, r24
     e5a:	88 0f       	add	r24, r24
     e5c:	80 93 f0 00 	sts	0x00F0, r24
     e60:	ef ee       	ldi	r30, 0xEF	; 239
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 61       	ori	r24, 0x10	; 16
     e68:	80 83       	st	Z, r24
     e6a:	1c c0       	rjmp	.+56     	; 0xea4 <__stack+0x5a5>
          else              { Can_set_std_id(cmd->id.std);}
     e6c:	12 96       	adiw	r26, 0x02	; 2
     e6e:	8c 91       	ld	r24, X
     e70:	12 97       	sbiw	r26, 0x02	; 2
     e72:	86 95       	lsr	r24
     e74:	86 95       	lsr	r24
     e76:	86 95       	lsr	r24
     e78:	13 96       	adiw	r26, 0x03	; 3
     e7a:	9c 91       	ld	r25, X
     e7c:	13 97       	sbiw	r26, 0x03	; 3
     e7e:	e0 e2       	ldi	r30, 0x20	; 32
     e80:	9e 9f       	mul	r25, r30
     e82:	80 0d       	add	r24, r0
     e84:	11 24       	eor	r1, r1
     e86:	80 93 f3 00 	sts	0x00F3, r24
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	8c 91       	ld	r24, X
     e8e:	12 97       	sbiw	r26, 0x02	; 2
     e90:	82 95       	swap	r24
     e92:	88 0f       	add	r24, r24
     e94:	80 7e       	andi	r24, 0xE0	; 224
     e96:	80 93 f2 00 	sts	0x00F2, r24
     e9a:	ef ee       	ldi	r30, 0xEF	; 239
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7e       	andi	r24, 0xEF	; 239
     ea2:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     ea4:	8f ef       	ldi	r24, 0xFF	; 255
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	92 95       	swap	r25
     eac:	96 95       	lsr	r25
     eae:	97 70       	andi	r25, 0x07	; 7
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	88 0f       	add	r24, r24
     eb4:	88 0f       	add	r24, r24
     eb6:	88 0f       	add	r24, r24
     eb8:	89 0f       	add	r24, r25
     eba:	80 93 f7 00 	sts	0x00F7, r24
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	92 95       	swap	r25
     ec2:	96 95       	lsr	r25
     ec4:	97 70       	andi	r25, 0x07	; 7
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	88 0f       	add	r24, r24
     eca:	88 0f       	add	r24, r24
     ecc:	88 0f       	add	r24, r24
     ece:	89 0f       	add	r24, r25
     ed0:	80 93 f6 00 	sts	0x00F6, r24
     ed4:	99 81       	ldd	r25, Y+1	; 0x01
     ed6:	92 95       	swap	r25
     ed8:	96 95       	lsr	r25
     eda:	97 70       	andi	r25, 0x07	; 7
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	88 0f       	add	r24, r24
     ee0:	88 0f       	add	r24, r24
     ee2:	88 0f       	add	r24, r24
     ee4:	89 0f       	add	r24, r25
     ee6:	80 93 f5 00 	sts	0x00F5, r24
     eea:	29 81       	ldd	r18, Y+1	; 0x01
     eec:	22 0f       	add	r18, r18
     eee:	22 0f       	add	r18, r18
     ef0:	22 0f       	add	r18, r18
     ef2:	84 ef       	ldi	r24, 0xF4	; 244
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	fc 01       	movw	r30, r24
     ef8:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     efa:	ef ee       	ldi	r30, 0xEF	; 239
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	30 81       	ld	r19, Z
     f00:	16 96       	adiw	r26, 0x06	; 6
     f02:	2c 91       	ld	r18, X
     f04:	23 2b       	or	r18, r19
     f06:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     f08:	dc 01       	movw	r26, r24
     f0a:	2c 91       	ld	r18, X
     f0c:	2b 7f       	andi	r18, 0xFB	; 251
     f0e:	2c 93       	st	X, r18
          Can_set_idemsk();
     f10:	2c 91       	ld	r18, X
     f12:	21 60       	ori	r18, 0x01	; 1
     f14:	2c 93       	st	X, r18
          Can_config_rx();       
     f16:	80 81       	ld	r24, Z
     f18:	8f 73       	andi	r24, 0x3F	; 63
     f1a:	80 83       	st	Z, r24
     f1c:	80 81       	ld	r24, Z
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     f22:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     f24:	78 c2       	rjmp	.+1264   	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f26:	1b 96       	adiw	r26, 0x0b	; 11
     f28:	8c 91       	ld	r24, X
     f2a:	1b 97       	sbiw	r26, 0x0b	; 11
     f2c:	88 23       	and	r24, r24
     f2e:	d9 f1       	breq	.+118    	; 0xfa6 <__stack+0x6a7>
     f30:	14 96       	adiw	r26, 0x04	; 4
     f32:	9c 91       	ld	r25, X
     f34:	14 97       	sbiw	r26, 0x04	; 4
     f36:	92 95       	swap	r25
     f38:	96 95       	lsr	r25
     f3a:	97 70       	andi	r25, 0x07	; 7
     f3c:	15 96       	adiw	r26, 0x05	; 5
     f3e:	8c 91       	ld	r24, X
     f40:	15 97       	sbiw	r26, 0x05	; 5
     f42:	88 0f       	add	r24, r24
     f44:	88 0f       	add	r24, r24
     f46:	88 0f       	add	r24, r24
     f48:	89 0f       	add	r24, r25
     f4a:	80 93 f3 00 	sts	0x00F3, r24
     f4e:	13 96       	adiw	r26, 0x03	; 3
     f50:	9c 91       	ld	r25, X
     f52:	13 97       	sbiw	r26, 0x03	; 3
     f54:	92 95       	swap	r25
     f56:	96 95       	lsr	r25
     f58:	97 70       	andi	r25, 0x07	; 7
     f5a:	14 96       	adiw	r26, 0x04	; 4
     f5c:	8c 91       	ld	r24, X
     f5e:	14 97       	sbiw	r26, 0x04	; 4
     f60:	88 0f       	add	r24, r24
     f62:	88 0f       	add	r24, r24
     f64:	88 0f       	add	r24, r24
     f66:	89 0f       	add	r24, r25
     f68:	80 93 f2 00 	sts	0x00F2, r24
     f6c:	12 96       	adiw	r26, 0x02	; 2
     f6e:	9c 91       	ld	r25, X
     f70:	12 97       	sbiw	r26, 0x02	; 2
     f72:	92 95       	swap	r25
     f74:	96 95       	lsr	r25
     f76:	97 70       	andi	r25, 0x07	; 7
     f78:	13 96       	adiw	r26, 0x03	; 3
     f7a:	8c 91       	ld	r24, X
     f7c:	13 97       	sbiw	r26, 0x03	; 3
     f7e:	88 0f       	add	r24, r24
     f80:	88 0f       	add	r24, r24
     f82:	88 0f       	add	r24, r24
     f84:	89 0f       	add	r24, r25
     f86:	80 93 f1 00 	sts	0x00F1, r24
     f8a:	12 96       	adiw	r26, 0x02	; 2
     f8c:	8c 91       	ld	r24, X
     f8e:	12 97       	sbiw	r26, 0x02	; 2
     f90:	88 0f       	add	r24, r24
     f92:	88 0f       	add	r24, r24
     f94:	88 0f       	add	r24, r24
     f96:	80 93 f0 00 	sts	0x00F0, r24
     f9a:	ef ee       	ldi	r30, 0xEF	; 239
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 61       	ori	r24, 0x10	; 16
     fa2:	80 83       	st	Z, r24
     fa4:	1c c0       	rjmp	.+56     	; 0xfde <__stack+0x6df>
          else              { Can_set_std_id(cmd->id.std);}
     fa6:	12 96       	adiw	r26, 0x02	; 2
     fa8:	8c 91       	ld	r24, X
     faa:	12 97       	sbiw	r26, 0x02	; 2
     fac:	86 95       	lsr	r24
     fae:	86 95       	lsr	r24
     fb0:	86 95       	lsr	r24
     fb2:	13 96       	adiw	r26, 0x03	; 3
     fb4:	9c 91       	ld	r25, X
     fb6:	13 97       	sbiw	r26, 0x03	; 3
     fb8:	e0 e2       	ldi	r30, 0x20	; 32
     fba:	9e 9f       	mul	r25, r30
     fbc:	80 0d       	add	r24, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	80 93 f3 00 	sts	0x00F3, r24
     fc4:	12 96       	adiw	r26, 0x02	; 2
     fc6:	8c 91       	ld	r24, X
     fc8:	12 97       	sbiw	r26, 0x02	; 2
     fca:	82 95       	swap	r24
     fcc:	88 0f       	add	r24, r24
     fce:	80 7e       	andi	r24, 0xE0	; 224
     fd0:	80 93 f2 00 	sts	0x00F2, r24
     fd4:	ef ee       	ldi	r30, 0xEF	; 239
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 7e       	andi	r24, 0xEF	; 239
     fdc:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	92 95       	swap	r25
     fe6:	96 95       	lsr	r25
     fe8:	97 70       	andi	r25, 0x07	; 7
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	88 0f       	add	r24, r24
     fee:	88 0f       	add	r24, r24
     ff0:	88 0f       	add	r24, r24
     ff2:	89 0f       	add	r24, r25
     ff4:	80 93 f7 00 	sts	0x00F7, r24
     ff8:	9a 81       	ldd	r25, Y+2	; 0x02
     ffa:	92 95       	swap	r25
     ffc:	96 95       	lsr	r25
     ffe:	97 70       	andi	r25, 0x07	; 7
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	88 0f       	add	r24, r24
    1004:	88 0f       	add	r24, r24
    1006:	88 0f       	add	r24, r24
    1008:	89 0f       	add	r24, r25
    100a:	80 93 f6 00 	sts	0x00F6, r24
    100e:	99 81       	ldd	r25, Y+1	; 0x01
    1010:	92 95       	swap	r25
    1012:	96 95       	lsr	r25
    1014:	97 70       	andi	r25, 0x07	; 7
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	88 0f       	add	r24, r24
    101a:	88 0f       	add	r24, r24
    101c:	88 0f       	add	r24, r24
    101e:	89 0f       	add	r24, r25
    1020:	80 93 f5 00 	sts	0x00F5, r24
    1024:	29 81       	ldd	r18, Y+1	; 0x01
    1026:	22 0f       	add	r18, r18
    1028:	22 0f       	add	r18, r18
    102a:	22 0f       	add	r18, r18
    102c:	84 ef       	ldi	r24, 0xF4	; 244
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1034:	ef ee       	ldi	r30, 0xEF	; 239
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	30 81       	ld	r19, Z
    103a:	16 96       	adiw	r26, 0x06	; 6
    103c:	2c 91       	ld	r18, X
    103e:	16 97       	sbiw	r26, 0x06	; 6
    1040:	23 2b       	or	r18, r19
    1042:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1044:	1a 96       	adiw	r26, 0x0a	; 10
    1046:	1c 92       	st	X, r1
    1048:	dc 01       	movw	r26, r24
    104a:	2c 91       	ld	r18, X
    104c:	24 60       	ori	r18, 0x04	; 4
    104e:	2c 93       	st	X, r18
    1050:	a0 ef       	ldi	r26, 0xF0	; 240
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	2c 91       	ld	r18, X
    1056:	2b 7f       	andi	r18, 0xFB	; 251
    1058:	2c 93       	st	X, r18
          Can_set_idemsk();
    105a:	dc 01       	movw	r26, r24
    105c:	2c 91       	ld	r18, X
    105e:	21 60       	ori	r18, 0x01	; 1
    1060:	2c 93       	st	X, r18
          Can_config_rx();       
    1062:	80 81       	ld	r24, Z
    1064:	8f 73       	andi	r24, 0x3F	; 63
    1066:	80 83       	st	Z, r24
    1068:	80 81       	ld	r24, Z
    106a:	80 68       	ori	r24, 0x80	; 128
    106c:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    106e:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1070:	d2 c1       	rjmp	.+932    	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1072:	1b 96       	adiw	r26, 0x0b	; 11
    1074:	8c 91       	ld	r24, X
    1076:	1b 97       	sbiw	r26, 0x0b	; 11
    1078:	88 23       	and	r24, r24
    107a:	d9 f1       	breq	.+118    	; 0x10f2 <__stack+0x7f3>
    107c:	14 96       	adiw	r26, 0x04	; 4
    107e:	9c 91       	ld	r25, X
    1080:	14 97       	sbiw	r26, 0x04	; 4
    1082:	92 95       	swap	r25
    1084:	96 95       	lsr	r25
    1086:	97 70       	andi	r25, 0x07	; 7
    1088:	15 96       	adiw	r26, 0x05	; 5
    108a:	8c 91       	ld	r24, X
    108c:	15 97       	sbiw	r26, 0x05	; 5
    108e:	88 0f       	add	r24, r24
    1090:	88 0f       	add	r24, r24
    1092:	88 0f       	add	r24, r24
    1094:	89 0f       	add	r24, r25
    1096:	80 93 f3 00 	sts	0x00F3, r24
    109a:	13 96       	adiw	r26, 0x03	; 3
    109c:	9c 91       	ld	r25, X
    109e:	13 97       	sbiw	r26, 0x03	; 3
    10a0:	92 95       	swap	r25
    10a2:	96 95       	lsr	r25
    10a4:	97 70       	andi	r25, 0x07	; 7
    10a6:	14 96       	adiw	r26, 0x04	; 4
    10a8:	8c 91       	ld	r24, X
    10aa:	14 97       	sbiw	r26, 0x04	; 4
    10ac:	88 0f       	add	r24, r24
    10ae:	88 0f       	add	r24, r24
    10b0:	88 0f       	add	r24, r24
    10b2:	89 0f       	add	r24, r25
    10b4:	80 93 f2 00 	sts	0x00F2, r24
    10b8:	12 96       	adiw	r26, 0x02	; 2
    10ba:	9c 91       	ld	r25, X
    10bc:	12 97       	sbiw	r26, 0x02	; 2
    10be:	92 95       	swap	r25
    10c0:	96 95       	lsr	r25
    10c2:	97 70       	andi	r25, 0x07	; 7
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	8c 91       	ld	r24, X
    10c8:	13 97       	sbiw	r26, 0x03	; 3
    10ca:	88 0f       	add	r24, r24
    10cc:	88 0f       	add	r24, r24
    10ce:	88 0f       	add	r24, r24
    10d0:	89 0f       	add	r24, r25
    10d2:	80 93 f1 00 	sts	0x00F1, r24
    10d6:	12 96       	adiw	r26, 0x02	; 2
    10d8:	8c 91       	ld	r24, X
    10da:	12 97       	sbiw	r26, 0x02	; 2
    10dc:	88 0f       	add	r24, r24
    10de:	88 0f       	add	r24, r24
    10e0:	88 0f       	add	r24, r24
    10e2:	80 93 f0 00 	sts	0x00F0, r24
    10e6:	ef ee       	ldi	r30, 0xEF	; 239
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 61       	ori	r24, 0x10	; 16
    10ee:	80 83       	st	Z, r24
    10f0:	1c c0       	rjmp	.+56     	; 0x112a <__stack+0x82b>
          else              { Can_set_std_id(cmd->id.std);}
    10f2:	12 96       	adiw	r26, 0x02	; 2
    10f4:	8c 91       	ld	r24, X
    10f6:	12 97       	sbiw	r26, 0x02	; 2
    10f8:	86 95       	lsr	r24
    10fa:	86 95       	lsr	r24
    10fc:	86 95       	lsr	r24
    10fe:	13 96       	adiw	r26, 0x03	; 3
    1100:	9c 91       	ld	r25, X
    1102:	13 97       	sbiw	r26, 0x03	; 3
    1104:	e0 e2       	ldi	r30, 0x20	; 32
    1106:	9e 9f       	mul	r25, r30
    1108:	80 0d       	add	r24, r0
    110a:	11 24       	eor	r1, r1
    110c:	80 93 f3 00 	sts	0x00F3, r24
    1110:	12 96       	adiw	r26, 0x02	; 2
    1112:	8c 91       	ld	r24, X
    1114:	12 97       	sbiw	r26, 0x02	; 2
    1116:	82 95       	swap	r24
    1118:	88 0f       	add	r24, r24
    111a:	80 7e       	andi	r24, 0xE0	; 224
    111c:	80 93 f2 00 	sts	0x00F2, r24
    1120:	ef ee       	ldi	r30, 0xEF	; 239
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 7e       	andi	r24, 0xEF	; 239
    1128:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	89 83       	std	Y+1, r24	; 0x01
    112e:	9b 81       	ldd	r25, Y+3	; 0x03
    1130:	92 95       	swap	r25
    1132:	96 95       	lsr	r25
    1134:	97 70       	andi	r25, 0x07	; 7
    1136:	8c 81       	ldd	r24, Y+4	; 0x04
    1138:	88 0f       	add	r24, r24
    113a:	88 0f       	add	r24, r24
    113c:	88 0f       	add	r24, r24
    113e:	89 0f       	add	r24, r25
    1140:	80 93 f7 00 	sts	0x00F7, r24
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	92 95       	swap	r25
    1148:	96 95       	lsr	r25
    114a:	97 70       	andi	r25, 0x07	; 7
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	88 0f       	add	r24, r24
    1150:	88 0f       	add	r24, r24
    1152:	88 0f       	add	r24, r24
    1154:	89 0f       	add	r24, r25
    1156:	80 93 f6 00 	sts	0x00F6, r24
    115a:	99 81       	ldd	r25, Y+1	; 0x01
    115c:	92 95       	swap	r25
    115e:	96 95       	lsr	r25
    1160:	97 70       	andi	r25, 0x07	; 7
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	88 0f       	add	r24, r24
    1166:	88 0f       	add	r24, r24
    1168:	88 0f       	add	r24, r24
    116a:	89 0f       	add	r24, r25
    116c:	80 93 f5 00 	sts	0x00F5, r24
    1170:	29 81       	ldd	r18, Y+1	; 0x01
    1172:	22 0f       	add	r18, r18
    1174:	22 0f       	add	r18, r18
    1176:	22 0f       	add	r18, r18
    1178:	84 ef       	ldi	r24, 0xF4	; 244
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	fc 01       	movw	r30, r24
    117e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1180:	ef ee       	ldi	r30, 0xEF	; 239
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	30 81       	ld	r19, Z
    1186:	16 96       	adiw	r26, 0x06	; 6
    1188:	2c 91       	ld	r18, X
    118a:	16 97       	sbiw	r26, 0x06	; 6
    118c:	23 2b       	or	r18, r19
    118e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1190:	21 e0       	ldi	r18, 0x01	; 1
    1192:	1a 96       	adiw	r26, 0x0a	; 10
    1194:	2c 93       	st	X, r18
    1196:	dc 01       	movw	r26, r24
    1198:	2c 91       	ld	r18, X
    119a:	24 60       	ori	r18, 0x04	; 4
    119c:	2c 93       	st	X, r18
    119e:	a0 ef       	ldi	r26, 0xF0	; 240
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	2c 91       	ld	r18, X
    11a4:	24 60       	ori	r18, 0x04	; 4
    11a6:	2c 93       	st	X, r18
          Can_clear_rplv();
    11a8:	20 81       	ld	r18, Z
    11aa:	2f 7d       	andi	r18, 0xDF	; 223
    11ac:	20 83       	st	Z, r18
          Can_set_idemsk();
    11ae:	dc 01       	movw	r26, r24
    11b0:	2c 91       	ld	r18, X
    11b2:	21 60       	ori	r18, 0x01	; 1
    11b4:	2c 93       	st	X, r18
          Can_config_rx();       
    11b6:	80 81       	ld	r24, Z
    11b8:	8f 73       	andi	r24, 0x3F	; 63
    11ba:	80 83       	st	Z, r24
    11bc:	80 81       	ld	r24, Z
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    11c2:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    11c4:	28 c1       	rjmp	.+592    	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	8a ef       	ldi	r24, 0xFA	; 250
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	17 96       	adiw	r26, 0x07	; 7
    11ce:	ed 91       	ld	r30, X+
    11d0:	fc 91       	ld	r31, X
    11d2:	18 97       	sbiw	r26, 0x08	; 8
    11d4:	e2 0f       	add	r30, r18
    11d6:	f1 1d       	adc	r31, r1
    11d8:	30 81       	ld	r19, Z
    11da:	fc 01       	movw	r30, r24
    11dc:	30 83       	st	Z, r19
    11de:	2f 5f       	subi	r18, 0xFF	; 255
    11e0:	16 96       	adiw	r26, 0x06	; 6
    11e2:	3c 91       	ld	r19, X
    11e4:	16 97       	sbiw	r26, 0x06	; 6
    11e6:	23 17       	cp	r18, r19
    11e8:	88 f3       	brcs	.-30     	; 0x11cc <__stack+0x8cd>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    11ea:	19 82       	std	Y+1, r1	; 0x01
    11ec:	9b 81       	ldd	r25, Y+3	; 0x03
    11ee:	92 95       	swap	r25
    11f0:	96 95       	lsr	r25
    11f2:	97 70       	andi	r25, 0x07	; 7
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	88 0f       	add	r24, r24
    11f8:	88 0f       	add	r24, r24
    11fa:	88 0f       	add	r24, r24
    11fc:	89 0f       	add	r24, r25
    11fe:	80 93 f7 00 	sts	0x00F7, r24
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	92 95       	swap	r25
    1206:	96 95       	lsr	r25
    1208:	97 70       	andi	r25, 0x07	; 7
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	88 0f       	add	r24, r24
    120e:	88 0f       	add	r24, r24
    1210:	88 0f       	add	r24, r24
    1212:	89 0f       	add	r24, r25
    1214:	80 93 f6 00 	sts	0x00F6, r24
    1218:	99 81       	ldd	r25, Y+1	; 0x01
    121a:	92 95       	swap	r25
    121c:	96 95       	lsr	r25
    121e:	97 70       	andi	r25, 0x07	; 7
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	88 0f       	add	r24, r24
    1224:	88 0f       	add	r24, r24
    1226:	88 0f       	add	r24, r24
    1228:	89 0f       	add	r24, r25
    122a:	80 93 f5 00 	sts	0x00F5, r24
    122e:	29 81       	ldd	r18, Y+1	; 0x01
    1230:	22 0f       	add	r18, r18
    1232:	22 0f       	add	r18, r18
    1234:	22 0f       	add	r18, r18
    1236:	84 ef       	ldi	r24, 0xF4	; 244
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	fc 01       	movw	r30, r24
    123c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    123e:	ef ee       	ldi	r30, 0xEF	; 239
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	30 81       	ld	r19, Z
    1244:	16 96       	adiw	r26, 0x06	; 6
    1246:	2c 91       	ld	r18, X
    1248:	16 97       	sbiw	r26, 0x06	; 6
    124a:	23 2b       	or	r18, r19
    124c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    124e:	21 e0       	ldi	r18, 0x01	; 1
    1250:	1a 96       	adiw	r26, 0x0a	; 10
    1252:	2c 93       	st	X, r18
    1254:	dc 01       	movw	r26, r24
    1256:	2c 91       	ld	r18, X
    1258:	24 60       	ori	r18, 0x04	; 4
    125a:	2c 93       	st	X, r18
    125c:	a0 ef       	ldi	r26, 0xF0	; 240
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	2c 91       	ld	r18, X
    1262:	24 60       	ori	r18, 0x04	; 4
    1264:	2c 93       	st	X, r18
          Can_set_rplv();
    1266:	20 81       	ld	r18, Z
    1268:	20 62       	ori	r18, 0x20	; 32
    126a:	20 83       	st	Z, r18
          Can_clear_idemsk();
    126c:	dc 01       	movw	r26, r24
    126e:	2c 91       	ld	r18, X
    1270:	2e 7f       	andi	r18, 0xFE	; 254
    1272:	2c 93       	st	X, r18
          Can_config_rx();       
    1274:	80 81       	ld	r24, Z
    1276:	8f 73       	andi	r24, 0x3F	; 63
    1278:	80 83       	st	Z, r24
    127a:	80 81       	ld	r24, Z
    127c:	80 68       	ori	r24, 0x80	; 128
    127e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1280:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    1282:	c9 c0       	rjmp	.+402    	; 0x1416 <__stack+0xb17>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1284:	1b 96       	adiw	r26, 0x0b	; 11
    1286:	8c 91       	ld	r24, X
    1288:	1b 97       	sbiw	r26, 0x0b	; 11
    128a:	88 23       	and	r24, r24
    128c:	d9 f1       	breq	.+118    	; 0x1304 <__stack+0xa05>
    128e:	14 96       	adiw	r26, 0x04	; 4
    1290:	9c 91       	ld	r25, X
    1292:	14 97       	sbiw	r26, 0x04	; 4
    1294:	92 95       	swap	r25
    1296:	96 95       	lsr	r25
    1298:	97 70       	andi	r25, 0x07	; 7
    129a:	15 96       	adiw	r26, 0x05	; 5
    129c:	8c 91       	ld	r24, X
    129e:	15 97       	sbiw	r26, 0x05	; 5
    12a0:	88 0f       	add	r24, r24
    12a2:	88 0f       	add	r24, r24
    12a4:	88 0f       	add	r24, r24
    12a6:	89 0f       	add	r24, r25
    12a8:	80 93 f3 00 	sts	0x00F3, r24
    12ac:	13 96       	adiw	r26, 0x03	; 3
    12ae:	9c 91       	ld	r25, X
    12b0:	13 97       	sbiw	r26, 0x03	; 3
    12b2:	92 95       	swap	r25
    12b4:	96 95       	lsr	r25
    12b6:	97 70       	andi	r25, 0x07	; 7
    12b8:	14 96       	adiw	r26, 0x04	; 4
    12ba:	8c 91       	ld	r24, X
    12bc:	14 97       	sbiw	r26, 0x04	; 4
    12be:	88 0f       	add	r24, r24
    12c0:	88 0f       	add	r24, r24
    12c2:	88 0f       	add	r24, r24
    12c4:	89 0f       	add	r24, r25
    12c6:	80 93 f2 00 	sts	0x00F2, r24
    12ca:	12 96       	adiw	r26, 0x02	; 2
    12cc:	9c 91       	ld	r25, X
    12ce:	12 97       	sbiw	r26, 0x02	; 2
    12d0:	92 95       	swap	r25
    12d2:	96 95       	lsr	r25
    12d4:	97 70       	andi	r25, 0x07	; 7
    12d6:	13 96       	adiw	r26, 0x03	; 3
    12d8:	8c 91       	ld	r24, X
    12da:	13 97       	sbiw	r26, 0x03	; 3
    12dc:	88 0f       	add	r24, r24
    12de:	88 0f       	add	r24, r24
    12e0:	88 0f       	add	r24, r24
    12e2:	89 0f       	add	r24, r25
    12e4:	80 93 f1 00 	sts	0x00F1, r24
    12e8:	12 96       	adiw	r26, 0x02	; 2
    12ea:	8c 91       	ld	r24, X
    12ec:	12 97       	sbiw	r26, 0x02	; 2
    12ee:	88 0f       	add	r24, r24
    12f0:	88 0f       	add	r24, r24
    12f2:	88 0f       	add	r24, r24
    12f4:	80 93 f0 00 	sts	0x00F0, r24
    12f8:	ef ee       	ldi	r30, 0xEF	; 239
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 61       	ori	r24, 0x10	; 16
    1300:	80 83       	st	Z, r24
    1302:	1c c0       	rjmp	.+56     	; 0x133c <__stack+0xa3d>
          else              { Can_set_std_id(cmd->id.std);}
    1304:	12 96       	adiw	r26, 0x02	; 2
    1306:	8c 91       	ld	r24, X
    1308:	12 97       	sbiw	r26, 0x02	; 2
    130a:	86 95       	lsr	r24
    130c:	86 95       	lsr	r24
    130e:	86 95       	lsr	r24
    1310:	13 96       	adiw	r26, 0x03	; 3
    1312:	9c 91       	ld	r25, X
    1314:	13 97       	sbiw	r26, 0x03	; 3
    1316:	e0 e2       	ldi	r30, 0x20	; 32
    1318:	9e 9f       	mul	r25, r30
    131a:	80 0d       	add	r24, r0
    131c:	11 24       	eor	r1, r1
    131e:	80 93 f3 00 	sts	0x00F3, r24
    1322:	12 96       	adiw	r26, 0x02	; 2
    1324:	8c 91       	ld	r24, X
    1326:	12 97       	sbiw	r26, 0x02	; 2
    1328:	82 95       	swap	r24
    132a:	88 0f       	add	r24, r24
    132c:	80 7e       	andi	r24, 0xE0	; 224
    132e:	80 93 f2 00 	sts	0x00F2, r24
    1332:	ef ee       	ldi	r30, 0xEF	; 239
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	8f 7e       	andi	r24, 0xEF	; 239
    133a:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    133c:	16 96       	adiw	r26, 0x06	; 6
    133e:	8c 91       	ld	r24, X
    1340:	16 97       	sbiw	r26, 0x06	; 6
    1342:	88 23       	and	r24, r24
    1344:	91 f0       	breq	.+36     	; 0x136a <__stack+0xa6b>
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	8a ef       	ldi	r24, 0xFA	; 250
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	17 96       	adiw	r26, 0x07	; 7
    134e:	ed 91       	ld	r30, X+
    1350:	fc 91       	ld	r31, X
    1352:	18 97       	sbiw	r26, 0x08	; 8
    1354:	e2 0f       	add	r30, r18
    1356:	f1 1d       	adc	r31, r1
    1358:	30 81       	ld	r19, Z
    135a:	fc 01       	movw	r30, r24
    135c:	30 83       	st	Z, r19
    135e:	2f 5f       	subi	r18, 0xFF	; 255
    1360:	16 96       	adiw	r26, 0x06	; 6
    1362:	3c 91       	ld	r19, X
    1364:	16 97       	sbiw	r26, 0x06	; 6
    1366:	23 17       	cp	r18, r19
    1368:	88 f3       	brcs	.-30     	; 0x134c <__stack+0xa4d>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	9b 81       	ldd	r25, Y+3	; 0x03
    1370:	92 95       	swap	r25
    1372:	96 95       	lsr	r25
    1374:	97 70       	andi	r25, 0x07	; 7
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	88 0f       	add	r24, r24
    137a:	88 0f       	add	r24, r24
    137c:	88 0f       	add	r24, r24
    137e:	89 0f       	add	r24, r25
    1380:	80 93 f7 00 	sts	0x00F7, r24
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	92 95       	swap	r25
    1388:	96 95       	lsr	r25
    138a:	97 70       	andi	r25, 0x07	; 7
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	88 0f       	add	r24, r24
    1390:	88 0f       	add	r24, r24
    1392:	88 0f       	add	r24, r24
    1394:	89 0f       	add	r24, r25
    1396:	80 93 f6 00 	sts	0x00F6, r24
    139a:	99 81       	ldd	r25, Y+1	; 0x01
    139c:	92 95       	swap	r25
    139e:	96 95       	lsr	r25
    13a0:	97 70       	andi	r25, 0x07	; 7
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	88 0f       	add	r24, r24
    13a6:	88 0f       	add	r24, r24
    13a8:	88 0f       	add	r24, r24
    13aa:	89 0f       	add	r24, r25
    13ac:	80 93 f5 00 	sts	0x00F5, r24
    13b0:	29 81       	ldd	r18, Y+1	; 0x01
    13b2:	22 0f       	add	r18, r18
    13b4:	22 0f       	add	r18, r18
    13b6:	22 0f       	add	r18, r18
    13b8:	84 ef       	ldi	r24, 0xF4	; 244
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	fc 01       	movw	r30, r24
    13be:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    13c0:	ef ee       	ldi	r30, 0xEF	; 239
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	30 81       	ld	r19, Z
    13c6:	16 96       	adiw	r26, 0x06	; 6
    13c8:	2c 91       	ld	r18, X
    13ca:	16 97       	sbiw	r26, 0x06	; 6
    13cc:	23 2b       	or	r18, r19
    13ce:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	1a 96       	adiw	r26, 0x0a	; 10
    13d4:	2c 93       	st	X, r18
    13d6:	dc 01       	movw	r26, r24
    13d8:	2c 91       	ld	r18, X
    13da:	24 60       	ori	r18, 0x04	; 4
    13dc:	2c 93       	st	X, r18
    13de:	a0 ef       	ldi	r26, 0xF0	; 240
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	2c 91       	ld	r18, X
    13e4:	24 60       	ori	r18, 0x04	; 4
    13e6:	2c 93       	st	X, r18
          Can_set_rplv();
    13e8:	20 81       	ld	r18, Z
    13ea:	20 62       	ori	r18, 0x20	; 32
    13ec:	20 83       	st	Z, r18
          Can_set_idemsk();
    13ee:	dc 01       	movw	r26, r24
    13f0:	2c 91       	ld	r18, X
    13f2:	21 60       	ori	r18, 0x01	; 1
    13f4:	2c 93       	st	X, r18
          Can_config_rx();       
    13f6:	80 81       	ld	r24, Z
    13f8:	8f 73       	andi	r24, 0x3F	; 63
    13fa:	80 83       	st	Z, r24
    13fc:	80 81       	ld	r24, Z
    13fe:	80 68       	ori	r24, 0x80	; 128
    1400:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1402:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <__stack+0xb17>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1406:	19 96       	adiw	r26, 0x09	; 9
    1408:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    140a:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <__stack+0xb17>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    140e:	8f e1       	ldi	r24, 0x1F	; 31
    1410:	19 96       	adiw	r26, 0x09	; 9
    1412:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    1416:	0f 90       	pop	r0
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1426:	88 23       	and	r24, r24
    1428:	09 f4       	brne	.+2      	; 0x142c <can_get_status+0xe>
    142a:	d5 c0       	rjmp	.+426    	; 0x15d6 <can_get_status+0x1b8>
    142c:	8f 31       	cpi	r24, 0x1F	; 31
    142e:	09 f4       	brne	.+2      	; 0x1432 <can_get_status+0x14>
    1430:	d4 c0       	rjmp	.+424    	; 0x15da <can_get_status+0x1bc>
    1432:	8f 3f       	cpi	r24, 0xFF	; 255
    1434:	09 f4       	brne	.+2      	; 0x1438 <can_get_status+0x1a>
    1436:	d3 c0       	rjmp	.+422    	; 0x15de <can_get_status+0x1c0>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    1438:	62 95       	swap	r22
    143a:	60 7f       	andi	r22, 0xF0	; 240
    143c:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    1440:	0e 94 a6 03 	call	0x74c	; 0x74c <can_get_mob_status>
    
    switch (a_status)
    1444:	80 32       	cpi	r24, 0x20	; 32
    1446:	61 f0       	breq	.+24     	; 0x1460 <can_get_status+0x42>
    1448:	20 f4       	brcc	.+8      	; 0x1452 <can_get_status+0x34>
    144a:	88 23       	and	r24, r24
    144c:	09 f4       	brne	.+2      	; 0x1450 <can_get_status+0x32>
    144e:	c9 c0       	rjmp	.+402    	; 0x15e2 <can_get_status+0x1c4>
    1450:	b8 c0       	rjmp	.+368    	; 0x15c2 <can_get_status+0x1a4>
    1452:	80 34       	cpi	r24, 0x40	; 64
    1454:	09 f4       	brne	.+2      	; 0x1458 <can_get_status+0x3a>
    1456:	aa c0       	rjmp	.+340    	; 0x15ac <can_get_status+0x18e>
    1458:	80 3a       	cpi	r24, 0xA0	; 160
    145a:	09 f4       	brne	.+2      	; 0x145e <can_get_status+0x40>
    145c:	4e c0       	rjmp	.+156    	; 0x14fa <can_get_status+0xdc>
    145e:	b1 c0       	rjmp	.+354    	; 0x15c2 <can_get_status+0x1a4>
        case MOB_RX_COMPLETED:
			if(SELF_ID != 1)
			{
				PIN_toggle(LED1);
			}
            cmd->ctrl.rtr = Can_get_rtr();
    1460:	80 91 f0 00 	lds	r24, 0x00F0
    1464:	82 fb       	bst	r24, 2
    1466:	88 27       	eor	r24, r24
    1468:	80 f9       	bld	r24, 0
    146a:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    146c:	80 91 ef 00 	lds	r24, 0x00EF
    1470:	84 ff       	sbrs	r24, 4
    1472:	2d c0       	rjmp	.+90     	; 0x14ce <can_get_status+0xb0>
            {
	            cmd->ctrl.ide = 1; // extended frame
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    1478:	e3 ef       	ldi	r30, 0xF3	; 243
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	86 95       	lsr	r24
    1480:	86 95       	lsr	r24
    1482:	86 95       	lsr	r24
    1484:	8d 83       	std	Y+5, r24	; 0x05
    1486:	a2 ef       	ldi	r26, 0xF2	; 242
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	8c 91       	ld	r24, X
    148c:	90 81       	ld	r25, Z
    148e:	86 95       	lsr	r24
    1490:	86 95       	lsr	r24
    1492:	86 95       	lsr	r24
    1494:	20 e2       	ldi	r18, 0x20	; 32
    1496:	92 9f       	mul	r25, r18
    1498:	80 0d       	add	r24, r0
    149a:	11 24       	eor	r1, r1
    149c:	8c 83       	std	Y+4, r24	; 0x04
    149e:	e1 ef       	ldi	r30, 0xF1	; 241
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	9c 91       	ld	r25, X
    14a6:	86 95       	lsr	r24
    14a8:	86 95       	lsr	r24
    14aa:	86 95       	lsr	r24
    14ac:	20 e2       	ldi	r18, 0x20	; 32
    14ae:	92 9f       	mul	r25, r18
    14b0:	80 0d       	add	r24, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    14b6:	80 91 f0 00 	lds	r24, 0x00F0
    14ba:	90 81       	ld	r25, Z
    14bc:	86 95       	lsr	r24
    14be:	86 95       	lsr	r24
    14c0:	86 95       	lsr	r24
    14c2:	20 e2       	ldi	r18, 0x20	; 32
    14c4:	92 9f       	mul	r25, r18
    14c6:	80 0d       	add	r24, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <can_get_status+0xbe>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    14ce:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    14d0:	e3 ef       	ldi	r30, 0xF3	; 243
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	80 91 f2 00 	lds	r24, 0x00F2
    14da:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	0e 94 bc 03 	call	0x778	; 0x778 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    14e8:	ef ee       	ldi	r30, 0xEF	; 239
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 73       	andi	r24, 0x3F	; 63
    14f0:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    14f2:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    14f6:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    14f8:	75 c0       	rjmp	.+234    	; 0x15e4 <can_get_status+0x1c6>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    14fa:	80 91 f0 00 	lds	r24, 0x00F0
    14fe:	82 fb       	bst	r24, 2
    1500:	88 27       	eor	r24, r24
    1502:	80 f9       	bld	r24, 0
    1504:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1506:	80 91 ef 00 	lds	r24, 0x00EF
    150a:	84 ff       	sbrs	r24, 4
    150c:	2d c0       	rjmp	.+90     	; 0x1568 <can_get_status+0x14a>
            {
                cmd->ctrl.ide = 1; // extended frame
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1512:	e3 ef       	ldi	r30, 0xF3	; 243
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	86 95       	lsr	r24
    151a:	86 95       	lsr	r24
    151c:	86 95       	lsr	r24
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	a2 ef       	ldi	r26, 0xF2	; 242
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	8c 91       	ld	r24, X
    1526:	90 81       	ld	r25, Z
    1528:	86 95       	lsr	r24
    152a:	86 95       	lsr	r24
    152c:	86 95       	lsr	r24
    152e:	20 e2       	ldi	r18, 0x20	; 32
    1530:	92 9f       	mul	r25, r18
    1532:	80 0d       	add	r24, r0
    1534:	11 24       	eor	r1, r1
    1536:	8c 83       	std	Y+4, r24	; 0x04
    1538:	e1 ef       	ldi	r30, 0xF1	; 241
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	9c 91       	ld	r25, X
    1540:	86 95       	lsr	r24
    1542:	86 95       	lsr	r24
    1544:	86 95       	lsr	r24
    1546:	20 e2       	ldi	r18, 0x20	; 32
    1548:	92 9f       	mul	r25, r18
    154a:	80 0d       	add	r24, r0
    154c:	11 24       	eor	r1, r1
    154e:	8b 83       	std	Y+3, r24	; 0x03
    1550:	80 91 f0 00 	lds	r24, 0x00F0
    1554:	90 81       	ld	r25, Z
    1556:	86 95       	lsr	r24
    1558:	86 95       	lsr	r24
    155a:	86 95       	lsr	r24
    155c:	20 e2       	ldi	r18, 0x20	; 32
    155e:	92 9f       	mul	r25, r18
    1560:	80 0d       	add	r24, r0
    1562:	11 24       	eor	r1, r1
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	13 c0       	rjmp	.+38     	; 0x158e <can_get_status+0x170>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1568:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    156a:	e3 ef       	ldi	r30, 0xF3	; 243
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	82 95       	swap	r24
    1572:	86 95       	lsr	r24
    1574:	87 70       	andi	r24, 0x07	; 7
    1576:	8b 83       	std	Y+3, r24	; 0x03
    1578:	80 91 f2 00 	lds	r24, 0x00F2
    157c:	90 81       	ld	r25, Z
    157e:	99 0f       	add	r25, r25
    1580:	99 0f       	add	r25, r25
    1582:	99 0f       	add	r25, r25
    1584:	82 95       	swap	r24
    1586:	86 95       	lsr	r24
    1588:	87 70       	andi	r24, 0x07	; 7
    158a:	89 0f       	add	r24, r25
    158c:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    158e:	80 ea       	ldi	r24, 0xA0	; 160
    1590:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1592:	8f 81       	ldd	r24, Y+7	; 0x07
    1594:	98 85       	ldd	r25, Y+8	; 0x08
    1596:	0e 94 bc 03 	call	0x778	; 0x778 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    159a:	ef ee       	ldi	r30, 0xEF	; 239
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8f 73       	andi	r24, 0x3F	; 63
    15a2:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    15a4:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    15a8:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    15aa:	1c c0       	rjmp	.+56     	; 0x15e4 <can_get_status+0x1c6>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    15ac:	80 e4       	ldi	r24, 0x40	; 64
    15ae:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    15b0:	ef ee       	ldi	r30, 0xEF	; 239
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8f 73       	andi	r24, 0x3F	; 63
    15b8:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    15ba:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    15be:	80 e4       	ldi	r24, 0x40	; 64
            break;
    15c0:	11 c0       	rjmp	.+34     	; 0x15e4 <can_get_status+0x1c6>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    15c2:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    15c4:	ef ee       	ldi	r30, 0xEF	; 239
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 73       	andi	r24, 0x3F	; 63
    15cc:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    15ce:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    15d2:	82 e0       	ldi	r24, 0x02	; 2
            break;
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <can_get_status+0x1c6>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	05 c0       	rjmp	.+10     	; 0x15e4 <can_get_status+0x1c6>
    15da:	82 e0       	ldi	r24, 0x02	; 2
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <can_get_status+0x1c6>
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <can_get_status+0x1c6>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <send_tm_transaction_response>:
}

// Helper
static void send_tm_transaction_response(uint8_t req_by, uint8_t code)
{			
	send_arr[7] = (SELF_ID << 4)|req_by;
    15ea:	80 61       	ori	r24, 0x10	; 16
    15ec:	80 93 cc 01 	sts	0x01CC, r24
	send_arr[6] = MT_COM;
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	80 93 cb 01 	sts	0x01CB, r24
	send_arr[5] = TM_TRANSACTION_RESP;
    15f6:	83 e1       	ldi	r24, 0x13	; 19
    15f8:	80 93 ca 01 	sts	0x01CA, r24
	send_arr[4] = CURRENT_MINUTE;
    15fc:	80 91 07 02 	lds	r24, 0x0207
    1600:	80 93 c9 01 	sts	0x01C9, r24
	send_arr[3] = 0;
    1604:	10 92 c8 01 	sts	0x01C8, r1
	send_arr[2] = 0;
    1608:	10 92 c7 01 	sts	0x01C7, r1
	send_arr[1] = 0;
    160c:	10 92 c6 01 	sts	0x01C6, r1
	send_arr[0] = code;
    1610:	60 93 c5 01 	sts	0x01C5, r22
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1614:	61 e1       	ldi	r22, 0x11	; 17
    1616:	85 ec       	ldi	r24, 0xC5	; 197
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
    161e:	08 95       	ret

00001620 <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1620:	83 e1       	ldi	r24, 0x13	; 19
    1622:	80 93 cc 01 	sts	0x01CC, r24
	send_arr[6] = MT_COM;
    1626:	82 e0       	ldi	r24, 0x02	; 2
    1628:	80 93 cb 01 	sts	0x01CB, r24
	send_arr[5] = RESPONSE;
    162c:	84 e0       	ldi	r24, 0x04	; 4
    162e:	80 93 ca 01 	sts	0x01CA, r24
	send_arr[4] = CURRENT_MINUTE;
    1632:	80 91 07 02 	lds	r24, 0x0207
    1636:	80 93 c9 01 	sts	0x01C9, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    163a:	61 e1       	ldi	r22, 0x11	; 17
    163c:	85 ec       	ldi	r24, 0xC5	; 197
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	send_now = 0;
    1644:	10 92 0b 02 	sts	0x020B, r1
    1648:	08 95       	ret

0000164a <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|HK_TASK_ID;
    164a:	84 e1       	ldi	r24, 0x14	; 20
    164c:	80 93 cc 01 	sts	0x01CC, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	80 93 cb 01 	sts	0x01CB, r24
	send_arr[4] = CURRENT_MINUTE;
    1656:	80 91 07 02 	lds	r24, 0x0207
    165a:	80 93 c9 01 	sts	0x01C9, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    165e:	6e e0       	ldi	r22, 0x0E	; 14
    1660:	85 ec       	ldi	r24, 0xC5	; 197
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	send_hk = 0;
    1668:	10 92 b1 02 	sts	0x02B1, r1
    166c:	08 95       	ret

0000166e <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	00 d0       	rcall	.+0      	; 0x1678 <send_sensor_data+0xa>
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[4];
    167c:	10 91 fc 01 	lds	r17, 0x01FC
	req_by = data_req_arr[7] >> 4;
    1680:	00 91 ff 01 	lds	r16, 0x01FF
    1684:	02 95       	swap	r16
    1686:	0f 70       	andi	r16, 0x0F	; 15
	send_arr[3] = 0;
    1688:	10 92 c8 01 	sts	0x01C8, r1
	send_arr[2] = 0;
    168c:	10 92 c7 01 	sts	0x01C7, r1
	send_arr[1] = 0;
    1690:	10 92 c6 01 	sts	0x01C6, r1
	send_arr[0] = 0;
    1694:	10 92 c5 01 	sts	0x01C5, r1
	
	if(sensor_name == EPS_TEMP)
    1698:	1a 30       	cpi	r17, 0x0A	; 10
    169a:	71 f4       	brne	.+28     	; 0x16b8 <send_sensor_data+0x4a>
	{
		spi_retrieve_temp(&high, &low);
    169c:	be 01       	movw	r22, r28
    169e:	6e 5f       	subi	r22, 0xFE	; 254
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	ce 01       	movw	r24, r28
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	0e 94 90 11 	call	0x2320	; 0x2320 <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	80 93 c6 01 	sts	0x01C6, r24
		send_arr[0] = low;
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 93 c5 01 	sts	0x01C5, r24
    16b6:	0e c0       	rjmp	.+28     	; 0x16d4 <send_sensor_data+0x66>
	}
	
	if(sensor_name == PANELX_V)
    16b8:	11 30       	cpi	r17, 0x01	; 1
    16ba:	29 f4       	brne	.+10     	; 0x16c6 <send_sensor_data+0x58>
	{
		send_arr[0] = pxv;
    16bc:	80 91 de 02 	lds	r24, 0x02DE
    16c0:	80 93 c5 01 	sts	0x01C5, r24
    16c4:	0e c0       	rjmp	.+28     	; 0x16e2 <send_sensor_data+0x74>
	}
	if(sensor_name == PANELX_I)
    16c6:	12 30       	cpi	r17, 0x02	; 2
    16c8:	29 f4       	brne	.+10     	; 0x16d4 <send_sensor_data+0x66>
	{
		send_arr[0] = pxi;
    16ca:	80 91 df 02 	lds	r24, 0x02DF
    16ce:	80 93 c5 01 	sts	0x01C5, r24
    16d2:	0d c0       	rjmp	.+26     	; 0x16ee <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_V)
    16d4:	13 30       	cpi	r17, 0x03	; 3
    16d6:	29 f4       	brne	.+10     	; 0x16e2 <send_sensor_data+0x74>
	{
		send_arr[0] = pyv;
    16d8:	80 91 0a 02 	lds	r24, 0x020A
    16dc:	80 93 c5 01 	sts	0x01C5, r24
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <send_sensor_data+0x80>
	}
	if(sensor_name == PANELY_I)
    16e2:	14 30       	cpi	r17, 0x04	; 4
    16e4:	21 f4       	brne	.+8      	; 0x16ee <send_sensor_data+0x80>
	{
		send_arr[0] = pyi;
    16e6:	80 91 0a 01 	lds	r24, 0x010A
    16ea:	80 93 c5 01 	sts	0x01C5, r24
	//}
	//if(sensor_name == OBC_I)
	//{
	//}

	send_arr[7] = (SELF_ID << 4)|req_by;
    16ee:	00 61       	ori	r16, 0x10	; 16
    16f0:	00 93 cc 01 	sts	0x01CC, r16
	send_arr[6] = MT_DATA;
    16f4:	10 92 cb 01 	sts	0x01CB, r1
	send_arr[5] = sensor_name;
    16f8:	10 93 ca 01 	sts	0x01CA, r17
	send_arr[4] = CURRENT_MINUTE;			
    16fc:	80 91 07 02 	lds	r24, 0x0207
    1700:	80 93 c9 01 	sts	0x01C9, r24
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1704:	6a e0       	ldi	r22, 0x0A	; 10
    1706:	85 ec       	ldi	r24, 0xC5	; 197
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	send_data = 0;
    170e:	10 92 d3 02 	sts	0x02D3, r1
	
	return;
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1720:	83 e1       	ldi	r24, 0x13	; 19
    1722:	80 93 cc 01 	sts	0x01CC, r24
	send_arr[6] = MT_DATA;
    1726:	10 92 cb 01 	sts	0x01CB, r1
	send_arr[5] = COMS_PACKET;
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	80 93 ca 01 	sts	0x01CA, r24
	send_arr[4] = CURRENT_MINUTE;
    1730:	80 91 07 02 	lds	r24, 0x0207
    1734:	80 93 c9 01 	sts	0x01C9, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    1738:	80 91 ba 03 	lds	r24, 0x03BA
    173c:	80 93 c5 01 	sts	0x01C5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1740:	6a e0       	ldi	r22, 0x0A	; 10
    1742:	85 ec       	ldi	r24, 0xC5	; 197
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	msg_received = 0;
    174a:	10 92 ad 03 	sts	0x03AD, r1
    174e:	08 95       	ret

00001750 <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    1750:	90 91 a8 03 	lds	r25, 0x03A8
	read_ptr = read_arr[0];
    1754:	e0 91 a5 03 	lds	r30, 0x03A5
    1758:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    175a:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    175c:	20 91 ac 03 	lds	r18, 0x03AC
    1760:	20 61       	ori	r18, 0x10	; 16
    1762:	20 93 cc 01 	sts	0x01CC, r18
	send_arr[6] = MT_COM;
    1766:	22 e0       	ldi	r18, 0x02	; 2
    1768:	20 93 cb 01 	sts	0x01CB, r18
	send_arr[5] = ACK_READ;
    176c:	26 e0       	ldi	r18, 0x06	; 6
    176e:	20 93 ca 01 	sts	0x01CA, r18
	send_arr[4] = CURRENT_MINUTE;
    1772:	20 91 07 02 	lds	r18, 0x0207
    1776:	20 93 c9 01 	sts	0x01C9, r18
	send_arr[3] = passkey;
    177a:	90 93 c8 01 	sts	0x01C8, r25
	send_arr[0] = read_val;
    177e:	80 93 c5 01 	sts	0x01C5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1782:	61 e1       	ldi	r22, 0x11	; 17
    1784:	85 ec       	ldi	r24, 0xC5	; 197
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	read_response = 0;
    178c:	10 92 10 02 	sts	0x0210, r1
    1790:	08 95       	ret

00001792 <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    1792:	80 91 05 01 	lds	r24, 0x0105
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    1796:	20 91 02 01 	lds	r18, 0x0102
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    179a:	90 91 ac 03 	lds	r25, 0x03AC
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    179e:	e0 91 03 01 	lds	r30, 0x0103
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    17a4:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    17a6:	90 61       	ori	r25, 0x10	; 16
    17a8:	90 93 cc 01 	sts	0x01CC, r25
	send_arr[6] = MT_COM;
    17ac:	92 e0       	ldi	r25, 0x02	; 2
    17ae:	90 93 cb 01 	sts	0x01CB, r25
	send_arr[5] = ACK_WRITE;
    17b2:	98 e0       	ldi	r25, 0x08	; 8
    17b4:	90 93 ca 01 	sts	0x01CA, r25
	send_arr[4] = CURRENT_MINUTE;
    17b8:	90 91 07 02 	lds	r25, 0x0207
    17bc:	90 93 c9 01 	sts	0x01C9, r25
	send_arr[3] = passkey;
    17c0:	80 93 c8 01 	sts	0x01C8, r24
	send_arr[0] = ret_val;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	80 93 c5 01 	sts	0x01C5, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    17ca:	61 e1       	ldi	r22, 0x11	; 17
    17cc:	85 ec       	ldi	r24, 0xC5	; 197
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
	write_response = 0;
    17d4:	10 92 e8 01 	sts	0x01E8, r1
    17d8:	08 95       	ret

000017da <set_sensor_high>:

void set_sensor_high(void)
{
	uint8_t sensor_name, req_by;
	uint16_t high = 0;
	sensor_name = sensh_arr[3];
    17da:	20 91 ec 01 	lds	r18, 0x01EC
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    17de:	2a 30       	cpi	r18, 0x0A	; 10
    17e0:	69 f4       	brne	.+26     	; 0x17fc <set_sensor_high+0x22>
	{
		epstemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    17e2:	80 91 ea 01 	lds	r24, 0x01EA
    17e6:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_high |= (high << 8);
    17e8:	98 2f       	mov	r25, r24
    17ea:	88 27       	eor	r24, r24
	sensor_name = sensh_arr[3];
	req_by = sensh_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_high = sensh_arr[0];
    17ec:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		epstemp_high |= (high << 8);
    17f0:	83 2b       	or	r24, r19
    17f2:	90 93 ce 01 	sts	0x01CE, r25
    17f6:	80 93 cd 01 	sts	0x01CD, r24
    17fa:	1e c0       	rjmp	.+60     	; 0x1838 <set_sensor_high+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    17fc:	21 30       	cpi	r18, 0x01	; 1
    17fe:	69 f4       	brne	.+26     	; 0x181a <set_sensor_high+0x40>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1800:	80 91 ea 01 	lds	r24, 0x01EA
    1804:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);		
    1806:	98 2f       	mov	r25, r24
    1808:	88 27       	eor	r24, r24
		epstemp_high |= (high << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_high = sensh_arr[0];
    180a:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);		
    180e:	83 2b       	or	r24, r19
    1810:	90 93 09 02 	sts	0x0209, r25
    1814:	80 93 08 02 	sts	0x0208, r24
    1818:	1e c0       	rjmp	.+60     	; 0x1856 <set_sensor_high+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	69 f4       	brne	.+26     	; 0x1838 <set_sensor_high+0x5e>
	{
		pxi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    181e:	80 91 ea 01 	lds	r24, 0x01EA
    1822:	90 e0       	ldi	r25, 0x00	; 0
		pxi_high |= (high << 8);
    1824:	98 2f       	mov	r25, r24
    1826:	88 27       	eor	r24, r24
		pxv_high |= (high << 8);		
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_high = sensh_arr[0];
    1828:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
    182c:	83 2b       	or	r24, r19
    182e:	90 93 0a 03 	sts	0x030A, r25
    1832:	80 93 09 03 	sts	0x0309, r24
    1836:	1e c0       	rjmp	.+60     	; 0x1874 <set_sensor_high+0x9a>
	}
	if(sensor_name == PANELY_V)
    1838:	23 30       	cpi	r18, 0x03	; 3
    183a:	69 f4       	brne	.+26     	; 0x1856 <set_sensor_high+0x7c>
	{
		pyv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    183c:	80 91 ea 01 	lds	r24, 0x01EA
    1840:	90 e0       	ldi	r25, 0x00	; 0
		pyv_high |= (high << 8);
    1842:	98 2f       	mov	r25, r24
    1844:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxi_high |= (high << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_high = sensh_arr[0];
    1846:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
    184a:	83 2b       	or	r24, r19
    184c:	90 93 b2 01 	sts	0x01B2, r25
    1850:	80 93 b1 01 	sts	0x01B1, r24
    1854:	1e c0       	rjmp	.+60     	; 0x1892 <set_sensor_high+0xb8>
	}
	if(sensor_name == PANELY_I)
    1856:	24 30       	cpi	r18, 0x04	; 4
    1858:	69 f4       	brne	.+26     	; 0x1874 <set_sensor_high+0x9a>
	{
		pyi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    185a:	80 91 ea 01 	lds	r24, 0x01EA
    185e:	90 e0       	ldi	r25, 0x00	; 0
		pyi_high |= (high << 8);
    1860:	98 2f       	mov	r25, r24
    1862:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyv_high |= (high << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_high = sensh_arr[0];
    1864:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
    1868:	83 2b       	or	r24, r19
    186a:	90 93 a4 03 	sts	0x03A4, r25
    186e:	80 93 a3 03 	sts	0x03A3, r24
    1872:	1e c0       	rjmp	.+60     	; 0x18b0 <set_sensor_high+0xd6>
	}
	if(sensor_name == BATTM_V)
    1874:	25 30       	cpi	r18, 0x05	; 5
    1876:	69 f4       	brne	.+26     	; 0x1892 <set_sensor_high+0xb8>
	{
		battmv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1878:	80 91 ea 01 	lds	r24, 0x01EA
    187c:	90 e0       	ldi	r25, 0x00	; 0
		battmv_high |= (high << 8);
    187e:	98 2f       	mov	r25, r24
    1880:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pyi_high |= (high << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_high = sensh_arr[0];
    1882:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
    1886:	83 2b       	or	r24, r19
    1888:	90 93 06 02 	sts	0x0206, r25
    188c:	80 93 05 02 	sts	0x0205, r24
    1890:	1e c0       	rjmp	.+60     	; 0x18ce <set_sensor_high+0xf4>
	}
	if(sensor_name == BATT_V)
    1892:	26 30       	cpi	r18, 0x06	; 6
    1894:	69 f4       	brne	.+26     	; 0x18b0 <set_sensor_high+0xd6>
	{
		battv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1896:	80 91 ea 01 	lds	r24, 0x01EA
    189a:	90 e0       	ldi	r25, 0x00	; 0
		battv_high |= (high << 8);
    189c:	98 2f       	mov	r25, r24
    189e:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battmv_high |= (high << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_high = sensh_arr[0];
    18a0:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
    18a4:	83 2b       	or	r24, r19
    18a6:	90 93 e1 02 	sts	0x02E1, r25
    18aa:	80 93 e0 02 	sts	0x02E0, r24
    18ae:	1e c0       	rjmp	.+60     	; 0x18ec <set_sensor_high+0x112>
	}
	if(sensor_name == BATT_I)
    18b0:	21 31       	cpi	r18, 0x11	; 17
    18b2:	69 f4       	brne	.+26     	; 0x18ce <set_sensor_high+0xf4>
	{
		pxv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18b4:	80 91 ea 01 	lds	r24, 0x01EA
    18b8:	90 e0       	ldi	r25, 0x00	; 0
		pxv_high |= (high << 8);
    18ba:	98 2f       	mov	r25, r24
    18bc:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battv_high |= (high << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_high = sensh_arr[0];
    18be:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
    18c2:	83 2b       	or	r24, r19
    18c4:	90 93 09 02 	sts	0x0209, r25
    18c8:	80 93 08 02 	sts	0x0208, r24
    18cc:	1e c0       	rjmp	.+60     	; 0x190a <set_sensor_high+0x130>
	}
	if(sensor_name == BATT_TEMP)
    18ce:	29 30       	cpi	r18, 0x09	; 9
    18d0:	69 f4       	brne	.+26     	; 0x18ec <set_sensor_high+0x112>
	{
		battemp_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18d2:	80 91 ea 01 	lds	r24, 0x01EA
    18d6:	90 e0       	ldi	r25, 0x00	; 0
		battemp_high |= (high << 8);
    18d8:	98 2f       	mov	r25, r24
    18da:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		pxv_high |= (high << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_high = sensh_arr[0];
    18dc:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
    18e0:	83 2b       	or	r24, r19
    18e2:	90 93 b4 01 	sts	0x01B4, r25
    18e6:	80 93 b3 01 	sts	0x01B3, r24
    18ea:	1e c0       	rjmp	.+60     	; 0x1928 <set_sensor_high+0x14e>
	}
	if(sensor_name == COMS_V)
    18ec:	2b 30       	cpi	r18, 0x0B	; 11
    18ee:	69 f4       	brne	.+26     	; 0x190a <set_sensor_high+0x130>
	{
		comsv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    18f0:	80 91 ea 01 	lds	r24, 0x01EA
    18f4:	90 e0       	ldi	r25, 0x00	; 0
		comsv_high |= (high << 8);
    18f6:	98 2f       	mov	r25, r24
    18f8:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		battemp_high |= (high << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_high = sensh_arr[0];
    18fa:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
    18fe:	83 2b       	or	r24, r19
    1900:	90 93 f7 01 	sts	0x01F7, r25
    1904:	80 93 f6 01 	sts	0x01F6, r24
    1908:	1e c0       	rjmp	.+60     	; 0x1946 <set_sensor_high+0x16c>
	}
	if(sensor_name == COMS_I)
    190a:	2c 30       	cpi	r18, 0x0C	; 12
    190c:	69 f4       	brne	.+26     	; 0x1928 <set_sensor_high+0x14e>
	{
		comsi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    190e:	80 91 ea 01 	lds	r24, 0x01EA
    1912:	90 e0       	ldi	r25, 0x00	; 0
		comsi_high |= (high << 8);
    1914:	98 2f       	mov	r25, r24
    1916:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsv_high |= (high << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_high = sensh_arr[0];
    1918:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
    191c:	83 2b       	or	r24, r19
    191e:	90 93 da 01 	sts	0x01DA, r25
    1922:	80 93 d9 01 	sts	0x01D9, r24
    1926:	1e c0       	rjmp	.+60     	; 0x1964 <set_sensor_high+0x18a>
	}
	if(sensor_name == PAY_V)
    1928:	2d 30       	cpi	r18, 0x0D	; 13
    192a:	69 f4       	brne	.+26     	; 0x1946 <set_sensor_high+0x16c>
	{
		payv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    192c:	80 91 ea 01 	lds	r24, 0x01EA
    1930:	90 e0       	ldi	r25, 0x00	; 0
		payv_high |= (high << 8);
    1932:	98 2f       	mov	r25, r24
    1934:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		comsi_high |= (high << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_high = sensh_arr[0];
    1936:	30 91 e9 01 	lds	r19, 0x01E9
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
    193a:	83 2b       	or	r24, r19
    193c:	90 93 a8 01 	sts	0x01A8, r25
    1940:	80 93 a7 01 	sts	0x01A7, r24
    1944:	1e c0       	rjmp	.+60     	; 0x1982 <set_sensor_high+0x1a8>
	}
	if(sensor_name == PAY_I)
    1946:	2e 30       	cpi	r18, 0x0E	; 14
    1948:	69 f4       	brne	.+26     	; 0x1964 <set_sensor_high+0x18a>
	{
		payi_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    194a:	80 91 ea 01 	lds	r24, 0x01EA
    194e:	90 e0       	ldi	r25, 0x00	; 0
		payi_high |= (high << 8);
    1950:	98 2f       	mov	r25, r24
    1952:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payv_high |= (high << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_high = sensh_arr[0];
    1954:	20 91 e9 01 	lds	r18, 0x01E9
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
    1958:	82 2b       	or	r24, r18
    195a:	90 93 f4 02 	sts	0x02F4, r25
    195e:	80 93 f3 02 	sts	0x02F3, r24
    1962:	1d c0       	rjmp	.+58     	; 0x199e <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_V)
    1964:	2f 30       	cpi	r18, 0x0F	; 15
    1966:	69 f4       	brne	.+26     	; 0x1982 <set_sensor_high+0x1a8>
	{
		obcv_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1968:	80 91 ea 01 	lds	r24, 0x01EA
    196c:	90 e0       	ldi	r25, 0x00	; 0
		obcv_high |= (high << 8);
    196e:	98 2f       	mov	r25, r24
    1970:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		payi_high |= (high << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_high = sensh_arr[0];
    1972:	20 91 e9 01 	lds	r18, 0x01E9
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
    1976:	82 2b       	or	r24, r18
    1978:	90 93 e7 01 	sts	0x01E7, r25
    197c:	80 93 e6 01 	sts	0x01E6, r24
    1980:	0e c0       	rjmp	.+28     	; 0x199e <set_sensor_high+0x1c4>
	}
	if(sensor_name == OBC_I)
    1982:	20 31       	cpi	r18, 0x10	; 16
    1984:	61 f4       	brne	.+24     	; 0x199e <set_sensor_high+0x1c4>
	{
		obci_high = sensh_arr[0];
		high = (uint16_t)sensh_arr[1];
    1986:	80 91 ea 01 	lds	r24, 0x01EA
    198a:	90 e0       	ldi	r25, 0x00	; 0
		obci_high |= (high << 8);
    198c:	98 2f       	mov	r25, r24
    198e:	88 27       	eor	r24, r24
		high = (uint16_t)sensh_arr[1];
		obcv_high |= (high << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_high = sensh_arr[0];
    1990:	20 91 e9 01 	lds	r18, 0x01E9
		high = (uint16_t)sensh_arr[1];
		obci_high |= (high << 8);
    1994:	82 2b       	or	r24, r18
    1996:	90 93 b3 02 	sts	0x02B3, r25
    199a:	80 93 b2 02 	sts	0x02B2, r24
	}
	
	set_sens_h = 0;
    199e:	10 92 d0 02 	sts	0x02D0, r1
    19a2:	08 95       	ret

000019a4 <set_sensor_low>:

void set_sensor_low(void)
{
	uint8_t sensor_name, req_by;
	uint16_t low = 0;
	sensor_name = sensl_arr[3];
    19a4:	20 91 03 03 	lds	r18, 0x0303
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
    19a8:	2a 30       	cpi	r18, 0x0A	; 10
    19aa:	69 f4       	brne	.+26     	; 0x19c6 <set_sensor_low+0x22>
	{
		epstemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    19ac:	80 91 01 03 	lds	r24, 0x0301
    19b0:	90 e0       	ldi	r25, 0x00	; 0
		epstemp_low |= (low << 8);
    19b2:	98 2f       	mov	r25, r24
    19b4:	88 27       	eor	r24, r24
	sensor_name = sensl_arr[3];
	req_by = sensl_arr[7] >> 4;
	
	if(sensor_name == EPS_TEMP)
	{
		epstemp_low = sensl_arr[0];
    19b6:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		epstemp_low |= (low << 8);
    19ba:	83 2b       	or	r24, r19
    19bc:	90 93 d0 01 	sts	0x01D0, r25
    19c0:	80 93 cf 01 	sts	0x01CF, r24
    19c4:	1e c0       	rjmp	.+60     	; 0x1a02 <set_sensor_low+0x5e>
	}
	
	if(sensor_name == PANELX_V)
    19c6:	21 30       	cpi	r18, 0x01	; 1
    19c8:	69 f4       	brne	.+26     	; 0x19e4 <set_sensor_low+0x40>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    19ca:	80 91 01 03 	lds	r24, 0x0301
    19ce:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    19d0:	98 2f       	mov	r25, r24
    19d2:	88 27       	eor	r24, r24
		epstemp_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_V)
	{
		pxv_low = sensl_arr[0];
    19d4:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    19d8:	83 2b       	or	r24, r19
    19da:	90 93 b5 02 	sts	0x02B5, r25
    19de:	80 93 b4 02 	sts	0x02B4, r24
    19e2:	1e c0       	rjmp	.+60     	; 0x1a20 <set_sensor_low+0x7c>
	}
	
	if(sensor_name == PANELX_I)
    19e4:	22 30       	cpi	r18, 0x02	; 2
    19e6:	69 f4       	brne	.+26     	; 0x1a02 <set_sensor_low+0x5e>
	{
		pxi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    19e8:	80 91 01 03 	lds	r24, 0x0301
    19ec:	90 e0       	ldi	r25, 0x00	; 0
		pxi_low |= (low << 8);
    19ee:	98 2f       	mov	r25, r24
    19f0:	88 27       	eor	r24, r24
		pxv_low |= (low << 8);
	}
	
	if(sensor_name == PANELX_I)
	{
		pxi_low = sensl_arr[0];
    19f2:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
    19f6:	83 2b       	or	r24, r19
    19f8:	90 93 e5 01 	sts	0x01E5, r25
    19fc:	80 93 e4 01 	sts	0x01E4, r24
    1a00:	1e c0       	rjmp	.+60     	; 0x1a3e <set_sensor_low+0x9a>
	}
	if(sensor_name == PANELY_V)
    1a02:	23 30       	cpi	r18, 0x03	; 3
    1a04:	69 f4       	brne	.+26     	; 0x1a20 <set_sensor_low+0x7c>
	{
		pyv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a06:	80 91 01 03 	lds	r24, 0x0301
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
		pyv_low |= (low << 8);
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxi_low |= (low << 8);
	}
	if(sensor_name == PANELY_V)
	{
		pyv_low = sensl_arr[0];
    1a10:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
    1a14:	83 2b       	or	r24, r19
    1a16:	90 93 b7 02 	sts	0x02B7, r25
    1a1a:	80 93 b6 02 	sts	0x02B6, r24
    1a1e:	1e c0       	rjmp	.+60     	; 0x1a5c <set_sensor_low+0xb8>
	}
	if(sensor_name == PANELY_I)
    1a20:	24 30       	cpi	r18, 0x04	; 4
    1a22:	69 f4       	brne	.+26     	; 0x1a3e <set_sensor_low+0x9a>
	{
		pyi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a24:	80 91 01 03 	lds	r24, 0x0301
    1a28:	90 e0       	ldi	r25, 0x00	; 0
		pyi_low |= (low << 8);
    1a2a:	98 2f       	mov	r25, r24
    1a2c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyv_low |= (low << 8);
	}
	if(sensor_name == PANELY_I)
	{
		pyi_low = sensl_arr[0];
    1a2e:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
    1a32:	83 2b       	or	r24, r19
    1a34:	90 93 c7 02 	sts	0x02C7, r25
    1a38:	80 93 c6 02 	sts	0x02C6, r24
    1a3c:	1e c0       	rjmp	.+60     	; 0x1a7a <set_sensor_low+0xd6>
	}
	if(sensor_name == BATTM_V)
    1a3e:	25 30       	cpi	r18, 0x05	; 5
    1a40:	69 f4       	brne	.+26     	; 0x1a5c <set_sensor_low+0xb8>
	{
		battmv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a42:	80 91 01 03 	lds	r24, 0x0301
    1a46:	90 e0       	ldi	r25, 0x00	; 0
		battmv_low |= (low << 8);
    1a48:	98 2f       	mov	r25, r24
    1a4a:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pyi_low |= (low << 8);
	}
	if(sensor_name == BATTM_V)
	{
		battmv_low = sensl_arr[0];
    1a4c:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
    1a50:	83 2b       	or	r24, r19
    1a52:	90 93 03 02 	sts	0x0203, r25
    1a56:	80 93 02 02 	sts	0x0202, r24
    1a5a:	1e c0       	rjmp	.+60     	; 0x1a98 <set_sensor_low+0xf4>
	}
	if(sensor_name == BATT_V)
    1a5c:	26 30       	cpi	r18, 0x06	; 6
    1a5e:	69 f4       	brne	.+26     	; 0x1a7a <set_sensor_low+0xd6>
	{
		battv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a60:	80 91 01 03 	lds	r24, 0x0301
    1a64:	90 e0       	ldi	r25, 0x00	; 0
		battv_low |= (low << 8);
    1a66:	98 2f       	mov	r25, r24
    1a68:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battmv_low |= (low << 8);
	}
	if(sensor_name == BATT_V)
	{
		battv_low = sensl_arr[0];
    1a6a:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
    1a6e:	83 2b       	or	r24, r19
    1a70:	90 93 0c 01 	sts	0x010C, r25
    1a74:	80 93 0b 01 	sts	0x010B, r24
    1a78:	1e c0       	rjmp	.+60     	; 0x1ab6 <set_sensor_low+0x112>
	}
	if(sensor_name == BATT_I)
    1a7a:	21 31       	cpi	r18, 0x11	; 17
    1a7c:	69 f4       	brne	.+26     	; 0x1a98 <set_sensor_low+0xf4>
	{
		pxv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a7e:	80 91 01 03 	lds	r24, 0x0301
    1a82:	90 e0       	ldi	r25, 0x00	; 0
		pxv_low |= (low << 8);
    1a84:	98 2f       	mov	r25, r24
    1a86:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battv_low |= (low << 8);
	}
	if(sensor_name == BATT_I)
	{
		pxv_low = sensl_arr[0];
    1a88:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
    1a8c:	83 2b       	or	r24, r19
    1a8e:	90 93 b5 02 	sts	0x02B5, r25
    1a92:	80 93 b4 02 	sts	0x02B4, r24
    1a96:	1e c0       	rjmp	.+60     	; 0x1ad4 <set_sensor_low+0x130>
	}
	if(sensor_name == BATT_TEMP)
    1a98:	29 30       	cpi	r18, 0x09	; 9
    1a9a:	69 f4       	brne	.+26     	; 0x1ab6 <set_sensor_low+0x112>
	{
		battemp_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1a9c:	80 91 01 03 	lds	r24, 0x0301
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
		battemp_low |= (low << 8);
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		pxv_low |= (low << 8);
	}
	if(sensor_name == BATT_TEMP)
	{
		battemp_low = sensl_arr[0];
    1aa6:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
    1aaa:	83 2b       	or	r24, r19
    1aac:	90 93 e3 02 	sts	0x02E3, r25
    1ab0:	80 93 e2 02 	sts	0x02E2, r24
    1ab4:	1e c0       	rjmp	.+60     	; 0x1af2 <set_sensor_low+0x14e>
	}
	if(sensor_name == COMS_V)
    1ab6:	2b 30       	cpi	r18, 0x0B	; 11
    1ab8:	69 f4       	brne	.+26     	; 0x1ad4 <set_sensor_low+0x130>
	{
		comsv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1aba:	80 91 01 03 	lds	r24, 0x0301
    1abe:	90 e0       	ldi	r25, 0x00	; 0
		comsv_low |= (low << 8);
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		battemp_low |= (low << 8);
	}
	if(sensor_name == COMS_V)
	{
		comsv_low = sensl_arr[0];
    1ac4:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
    1ac8:	83 2b       	or	r24, r19
    1aca:	90 93 01 02 	sts	0x0201, r25
    1ace:	80 93 00 02 	sts	0x0200, r24
    1ad2:	1e c0       	rjmp	.+60     	; 0x1b10 <set_sensor_low+0x16c>
	}
	if(sensor_name == COMS_I)
    1ad4:	2c 30       	cpi	r18, 0x0C	; 12
    1ad6:	69 f4       	brne	.+26     	; 0x1af2 <set_sensor_low+0x14e>
	{
		comsi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1ad8:	80 91 01 03 	lds	r24, 0x0301
    1adc:	90 e0       	ldi	r25, 0x00	; 0
		comsi_low |= (low << 8);
    1ade:	98 2f       	mov	r25, r24
    1ae0:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsv_low |= (low << 8);
	}
	if(sensor_name == COMS_I)
	{
		comsi_low = sensl_arr[0];
    1ae2:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
    1ae6:	83 2b       	or	r24, r19
    1ae8:	90 93 f2 02 	sts	0x02F2, r25
    1aec:	80 93 f1 02 	sts	0x02F1, r24
    1af0:	1e c0       	rjmp	.+60     	; 0x1b2e <set_sensor_low+0x18a>
	}
	if(sensor_name == PAY_V)
    1af2:	2d 30       	cpi	r18, 0x0D	; 13
    1af4:	69 f4       	brne	.+26     	; 0x1b10 <set_sensor_low+0x16c>
	{
		payv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1af6:	80 91 01 03 	lds	r24, 0x0301
    1afa:	90 e0       	ldi	r25, 0x00	; 0
		payv_low |= (low << 8);
    1afc:	98 2f       	mov	r25, r24
    1afe:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		comsi_low |= (low << 8);
	}
	if(sensor_name == PAY_V)
	{
		payv_low = sensl_arr[0];
    1b00:	30 91 00 03 	lds	r19, 0x0300
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
    1b04:	83 2b       	or	r24, r19
    1b06:	90 93 0e 01 	sts	0x010E, r25
    1b0a:	80 93 0d 01 	sts	0x010D, r24
    1b0e:	1e c0       	rjmp	.+60     	; 0x1b4c <set_sensor_low+0x1a8>
	}
	if(sensor_name == PAY_I)
    1b10:	2e 30       	cpi	r18, 0x0E	; 14
    1b12:	69 f4       	brne	.+26     	; 0x1b2e <set_sensor_low+0x18a>
	{
		payi_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b14:	80 91 01 03 	lds	r24, 0x0301
    1b18:	90 e0       	ldi	r25, 0x00	; 0
		payi_low |= (low << 8);
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payv_low |= (low << 8);
	}
	if(sensor_name == PAY_I)
	{
		payi_low = sensl_arr[0];
    1b1e:	20 91 00 03 	lds	r18, 0x0300
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
    1b22:	82 2b       	or	r24, r18
    1b24:	90 93 0f 02 	sts	0x020F, r25
    1b28:	80 93 0e 02 	sts	0x020E, r24
    1b2c:	1d c0       	rjmp	.+58     	; 0x1b68 <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_V)
    1b2e:	2f 30       	cpi	r18, 0x0F	; 15
    1b30:	69 f4       	brne	.+26     	; 0x1b4c <set_sensor_low+0x1a8>
	{
		obcv_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b32:	80 91 01 03 	lds	r24, 0x0301
    1b36:	90 e0       	ldi	r25, 0x00	; 0
		obcv_low |= (low << 8);
    1b38:	98 2f       	mov	r25, r24
    1b3a:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		payi_low |= (low << 8);
	}
	if(sensor_name == OBC_V)
	{
		obcv_low = sensl_arr[0];
    1b3c:	20 91 00 03 	lds	r18, 0x0300
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
    1b40:	82 2b       	or	r24, r18
    1b42:	90 93 ff 02 	sts	0x02FF, r25
    1b46:	80 93 fe 02 	sts	0x02FE, r24
    1b4a:	0e c0       	rjmp	.+28     	; 0x1b68 <set_sensor_low+0x1c4>
	}
	if(sensor_name == OBC_I)
    1b4c:	20 31       	cpi	r18, 0x10	; 16
    1b4e:	61 f4       	brne	.+24     	; 0x1b68 <set_sensor_low+0x1c4>
	{
		obci_low = sensl_arr[0];
		low = (uint16_t)sensl_arr[1];
    1b50:	80 91 01 03 	lds	r24, 0x0301
    1b54:	90 e0       	ldi	r25, 0x00	; 0
		obci_low |= (low << 8);
    1b56:	98 2f       	mov	r25, r24
    1b58:	88 27       	eor	r24, r24
		low = (uint16_t)sensl_arr[1];
		obcv_low |= (low << 8);
	}
	if(sensor_name == OBC_I)
	{
		obci_low = sensl_arr[0];
    1b5a:	20 91 00 03 	lds	r18, 0x0300
		low = (uint16_t)sensl_arr[1];
		obci_low |= (low << 8);
    1b5e:	82 2b       	or	r24, r18
    1b60:	90 93 ed 02 	sts	0x02ED, r25
    1b64:	80 93 ec 02 	sts	0x02EC, r24
	}
	
	set_sens_l = 0;
    1b68:	10 92 d5 02 	sts	0x02D5, r1
    1b6c:	08 95       	ret

00001b6e <set_var>:
}

void set_var(void)
{
	uint8_t var_name;
	var_name = setv_arr[3];
    1b6e:	80 91 df 01 	lds	r24, 0x01DF
	
	if(var_name == MPPTX)
    1b72:	8f 3f       	cpi	r24, 0xFF	; 255
    1b74:	29 f4       	brne	.+10     	; 0x1b80 <set_var+0x12>
	{
		mpptx = setv_arr[0];
    1b76:	90 91 dc 01 	lds	r25, 0x01DC
    1b7a:	90 93 0c 02 	sts	0x020C, r25
    1b7e:	0e c0       	rjmp	.+28     	; 0x1b9c <set_var+0x2e>
	}
	if(var_name == MPPTY)
    1b80:	8e 3f       	cpi	r24, 0xFE	; 254
    1b82:	29 f4       	brne	.+10     	; 0x1b8e <set_var+0x20>
	{
		mppty = setv_arr[0];
    1b84:	80 91 dc 01 	lds	r24, 0x01DC
    1b88:	80 93 04 02 	sts	0x0204, r24
    1b8c:	0d c0       	rjmp	.+26     	; 0x1ba8 <set_var+0x3a>
	}
	if(var_name == BALANCE_H)
    1b8e:	80 3f       	cpi	r24, 0xF0	; 240
    1b90:	29 f4       	brne	.+10     	; 0x1b9c <set_var+0x2e>
	{
		balance_l = setv_arr[0];
    1b92:	80 91 dc 01 	lds	r24, 0x01DC
    1b96:	80 93 f3 01 	sts	0x01F3, r24
    1b9a:	06 c0       	rjmp	.+12     	; 0x1ba8 <set_var+0x3a>
	}
	if(var_name == BALANCE_L)
    1b9c:	81 3f       	cpi	r24, 0xF1	; 241
    1b9e:	21 f4       	brne	.+8      	; 0x1ba8 <set_var+0x3a>
	{
		balance_h = setv_arr[0];
    1ba0:	80 91 dc 01 	lds	r24, 0x01DC
    1ba4:	80 93 db 01 	sts	0x01DB, r24
	}
	set_varf = 0;
    1ba8:	10 92 d4 02 	sts	0x02D4, r1
    1bac:	08 95       	ret

00001bae <receive_tm_msg>:
}

void receive_tm_msg(void)
{
	uint8_t req_by, obc_seq_count;
	req_by = new_tm_msg[7] >> 4;
    1bae:	80 91 dd 02 	lds	r24, 0x02DD
    1bb2:	82 95       	swap	r24
    1bb4:	8f 70       	andi	r24, 0x0F	; 15
	obc_seq_count = new_tm_msg[4];
    1bb6:	90 91 da 02 	lds	r25, 0x02DA

	if(obc_seq_count > (tm_sequence_count + 1))
    1bba:	29 2f       	mov	r18, r25
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	60 91 00 01 	lds	r22, 0x0100
    1bc2:	46 2f       	mov	r20, r22
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	4f 5f       	subi	r20, 0xFF	; 255
    1bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bca:	42 17       	cp	r20, r18
    1bcc:	53 07       	cpc	r21, r19
    1bce:	94 f4       	brge	.+36     	; 0x1bf4 <receive_tm_msg+0x46>
	{
		send_tm_transaction_response(req_by, 0xFF);		// Let the OBC know that the transaction failed.
    1bd0:	6f ef       	ldi	r22, 0xFF	; 255
    1bd2:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <send_tm_transaction_response>
		tm_sequence_count = 0;
    1bd6:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1bda:	10 92 0d 02 	sts	0x020D, r1
		receiving_tmf = 0;
    1bde:	10 92 f5 02 	sts	0x02F5, r1
    1be2:	e1 e1       	ldi	r30, 0x11	; 17
    1be4:	f2 e0       	ldi	r31, 0x02	; 2
    1be6:	80 ea       	ldi	r24, 0xA0	; 160
    1be8:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1bea:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1bec:	e8 17       	cp	r30, r24
    1bee:	f9 07       	cpc	r31, r25
    1bf0:	e1 f7       	brne	.-8      	; 0x1bea <receive_tm_msg+0x3c>
    1bf2:	08 95       	ret
		new_tm_msgf = 0;
		receiving_tmf = 0;
		clear_current_tm();
		return;
	}
	if(current_tm_fullf)
    1bf4:	70 91 d2 02 	lds	r23, 0x02D2
    1bf8:	77 23       	and	r23, r23
    1bfa:	51 f0       	breq	.+20     	; 0x1c10 <receive_tm_msg+0x62>
	{
		send_tm_transaction_response(req_by, 0xFF);
    1bfc:	6f ef       	ldi	r22, 0xFF	; 255
    1bfe:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <send_tm_transaction_response>
		tm_sequence_count = 0;
    1c02:	10 92 00 01 	sts	0x0100, r1
		new_tm_msgf = 0;
    1c06:	10 92 0d 02 	sts	0x020D, r1
		receiving_tmf = 0;
    1c0a:	10 92 f5 02 	sts	0x02F5, r1
		return;
    1c0e:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
    1c10:	91 11       	cpse	r25, r1
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <receive_tm_msg+0x6c>
    1c14:	66 23       	and	r22, r22
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <receive_tm_msg+0x6c>
    1c18:	47 c0       	rjmp	.+142    	; 0x1ca8 <receive_tm_msg+0xfa>
    1c1a:	24 17       	cp	r18, r20
    1c1c:	35 07       	cpc	r19, r21
    1c1e:	91 f5       	brne	.+100    	; 0x1c84 <receive_tm_msg+0xd6>
	{
		tm_sequence_count = obc_seq_count;
    1c20:	90 93 00 01 	sts	0x0100, r25
		receiving_tmf = 1;
    1c24:	41 e0       	ldi	r20, 0x01	; 1
    1c26:	40 93 f5 02 	sts	0x02F5, r20
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1c2a:	f9 01       	movw	r30, r18
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	ff 1f       	adc	r31, r31
    1c30:	ee 0f       	add	r30, r30
    1c32:	ff 1f       	adc	r31, r31
    1c34:	ef 5e       	subi	r30, 0xEF	; 239
    1c36:	fd 4f       	sbci	r31, 0xFD	; 253
    1c38:	20 91 d6 02 	lds	r18, 0x02D6
    1c3c:	20 83       	st	Z, r18
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1c3e:	20 91 d7 02 	lds	r18, 0x02D7
    1c42:	21 83       	std	Z+1, r18	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1c44:	20 91 d8 02 	lds	r18, 0x02D8
    1c48:	22 83       	std	Z+2, r18	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1c4a:	20 91 d9 02 	lds	r18, 0x02D9
    1c4e:	23 83       	std	Z+3, r18	; 0x03
		if(obc_seq_count == 35)
    1c50:	93 32       	cpi	r25, 0x23	; 35
    1c52:	a9 f4       	brne	.+42     	; 0x1c7e <receive_tm_msg+0xd0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
    1c54:	10 92 00 01 	sts	0x0100, r1
			receiving_tmf = 0;
    1c58:	10 92 f5 02 	sts	0x02F5, r1
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	90 93 d2 02 	sts	0x02D2, r25
    1c62:	e1 e1       	ldi	r30, 0x11	; 17
    1c64:	f2 e0       	ldi	r31, 0x02	; 2
    1c66:	af e0       	ldi	r26, 0x0F	; 15
    1c68:	b1 e0       	ldi	r27, 0x01	; 1
    1c6a:	20 ea       	ldi	r18, 0xA0	; 160
    1c6c:	32 e0       	ldi	r19, 0x02	; 2
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
	{
		tm_to_downlink[i] = current_tm[i];
    1c6e:	91 91       	ld	r25, Z+
    1c70:	9d 93       	st	X+, r25

// This function is necessary so that we can simply trash current_tm if a new transaction fails.
static void store_current_tm(void)
{
	uint8_t i;
	for (i = 0; i < 143; i++)
    1c72:	e2 17       	cp	r30, r18
    1c74:	f3 07       	cpc	r31, r19
    1c76:	d9 f7       	brne	.-10     	; 0x1c6e <receive_tm_msg+0xc0>
		{
			tm_sequence_count = 0;									// Reset tm_sequence_count, transmission has completed.
			receiving_tmf = 0;
			current_tm_fullf = 1;									// TM buffer now full, ready to downlink to ground.
			store_current_tm();										// Put current_tm[] into tm_to_downlink[]
			send_tm_transaction_response(req_by, obc_seq_count);	// Let the OBC know that the transaction succeeded.
    1c78:	63 e2       	ldi	r22, 0x23	; 35
    1c7a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <send_tm_transaction_response>
		}
		new_tm_msgf = 0;
    1c7e:	10 92 0d 02 	sts	0x020D, r1
		return;
    1c82:	08 95       	ret
	}
	else
	{
		send_tm_transaction_response(req_by, 0xFF);
    1c84:	6f ef       	ldi	r22, 0xFF	; 255
    1c86:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <send_tm_transaction_response>
		tm_sequence_count = 0;
    1c8a:	10 92 00 01 	sts	0x0100, r1
		receiving_tmf = 0;
    1c8e:	10 92 f5 02 	sts	0x02F5, r1
		new_tm_msgf = 0;
    1c92:	10 92 0d 02 	sts	0x020D, r1
    1c96:	e1 e1       	ldi	r30, 0x11	; 17
    1c98:	f2 e0       	ldi	r31, 0x02	; 2
    1c9a:	80 ea       	ldi	r24, 0xA0	; 160
    1c9c:	92 e0       	ldi	r25, 0x02	; 2
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
	{
		current_tm[i] = 0;
    1c9e:	11 92       	st	Z+, r1

//Helper
static void clear_current_tm(void)
{
	uint8_t i;
	for(i = 0; i < 143; i++)
    1ca0:	e8 17       	cp	r30, r24
    1ca2:	f9 07       	cpc	r31, r25
    1ca4:	e1 f7       	brne	.-8      	; 0x1c9e <receive_tm_msg+0xf0>
    1ca6:	08 95       	ret
	}
	
	if((!obc_seq_count && !tm_sequence_count) || (obc_seq_count == (tm_sequence_count + 1)))
	{
		tm_sequence_count = obc_seq_count;
		receiving_tmf = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	80 93 f5 02 	sts	0x02F5, r24
		current_tm[(obc_seq_count * 4)]		= new_tm_msg[0];
    1cae:	f9 01       	movw	r30, r18
    1cb0:	ee 0f       	add	r30, r30
    1cb2:	ff 1f       	adc	r31, r31
    1cb4:	ee 0f       	add	r30, r30
    1cb6:	ff 1f       	adc	r31, r31
    1cb8:	ef 5e       	subi	r30, 0xEF	; 239
    1cba:	fd 4f       	sbci	r31, 0xFD	; 253
    1cbc:	80 91 d6 02 	lds	r24, 0x02D6
    1cc0:	80 83       	st	Z, r24
		current_tm[(obc_seq_count * 4) + 1] = new_tm_msg[1];
    1cc2:	80 91 d7 02 	lds	r24, 0x02D7
    1cc6:	81 83       	std	Z+1, r24	; 0x01
		current_tm[(obc_seq_count * 4) + 2] = new_tm_msg[2];
    1cc8:	80 91 d8 02 	lds	r24, 0x02D8
    1ccc:	82 83       	std	Z+2, r24	; 0x02
		current_tm[(obc_seq_count * 4) + 3] = new_tm_msg[3];
    1cce:	80 91 d9 02 	lds	r24, 0x02D9
    1cd2:	83 83       	std	Z+3, r24	; 0x03
    1cd4:	d4 cf       	rjmp	.-88     	; 0x1c7e <receive_tm_msg+0xd0>

00001cd6 <alert_obc_tcp_ready>:


// Lets the OBC know that we have a TC packet ready.
void alert_obc_tcp_ready(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1cd6:	8a e1       	ldi	r24, 0x1A	; 26
    1cd8:	80 93 cc 01 	sts	0x01CC, r24
	send_arr[6] = MT_COM;
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	80 93 cb 01 	sts	0x01CB, r24
	send_arr[5] = TC_PACKET_READY;
    1ce2:	81 e1       	ldi	r24, 0x11	; 17
    1ce4:	80 93 ca 01 	sts	0x01CA, r24
	send_arr[4] = CURRENT_MINUTE;
    1ce8:	80 91 07 02 	lds	r24, 0x0207
    1cec:	80 93 c9 01 	sts	0x01C9, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1cf0:	61 e1       	ldi	r22, 0x11	; 17
    1cf2:	85 ec       	ldi	r24, 0xC5	; 197
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
    1cfa:	08 95       	ret

00001cfc <send_pus_packet_tc>:
	}
	return;
}

void send_pus_packet_tc(void)
{
    1cfc:	2f 92       	push	r2
    1cfe:	3f 92       	push	r3
    1d00:	4f 92       	push	r4
    1d02:	5f 92       	push	r5
    1d04:	6f 92       	push	r6
    1d06:	7f 92       	push	r7
    1d08:	8f 92       	push	r8
    1d0a:	9f 92       	push	r9
    1d0c:	af 92       	push	r10
    1d0e:	bf 92       	push	r11
    1d10:	cf 92       	push	r12
    1d12:	df 92       	push	r13
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
	uint8_t i, timeout = 250;
	uint8_t num_transfers = PACKET_LENGTH / 4;
	
	tc_transfer_completef = 0;
    1d20:	10 92 f5 01 	sts	0x01F5, r1
	start_tc_transferf = 0;
    1d24:	10 92 f4 01 	sts	0x01F4, r1
	alert_obc_tcp_ready();
    1d28:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <alert_obc_tcp_ready>
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1d2c:	80 91 f4 01 	lds	r24, 0x01F4
    1d30:	81 11       	cpse	r24, r1
    1d32:	0d c0       	rjmp	.+26     	; 0x1d4e <send_pus_packet_tc+0x52>
    1d34:	ca ef       	ldi	r28, 0xFA	; 250
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <send_pus_packet_tc+0x42>
    1d38:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <send_pus_packet_tc+0x42>
    1d3c:	86 c0       	rjmp	.+268    	; 0x1e4a <send_pus_packet_tc+0x14e>
		{
			return;
		}
		delay_us(10);
    1d3e:	8a e0       	ldi	r24, 0x0A	; 10
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 c4 11 	call	0x2388	; 0x2388 <delay_us>
	uint8_t num_transfers = PACKET_LENGTH / 4;
	
	tc_transfer_completef = 0;
	start_tc_transferf = 0;
	alert_obc_tcp_ready();
	while(!start_tc_transferf)			// Wait a maximum of 2.5ms for the OBC to respond.
    1d46:	80 91 f4 01 	lds	r24, 0x01F4
    1d4a:	88 23       	and	r24, r24
    1d4c:	a9 f3       	breq	.-22     	; 0x1d38 <send_pus_packet_tc+0x3c>
		{
			return;
		}
		delay_us(10);
	}				
	start_tc_transferf = 0;
    1d4e:	10 92 f4 01 	sts	0x01F4, r1
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1d52:	80 91 f5 01 	lds	r24, 0x01F5
    1d56:	8f 3f       	cpi	r24, 0xFF	; 255
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <send_pus_packet_tc+0x60>
    1d5a:	77 c0       	rjmp	.+238    	; 0x1e4a <send_pus_packet_tc+0x14e>
    1d5c:	0f 2e       	mov	r0, r31
    1d5e:	fe e0       	ldi	r31, 0x0E	; 14
    1d60:	4f 2e       	mov	r4, r31
    1d62:	f3 e0       	ldi	r31, 0x03	; 3
    1d64:	5f 2e       	mov	r5, r31
    1d66:	f0 2d       	mov	r31, r0
		delay_us(10);
	}				
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
    1d68:	31 2c       	mov	r3, r1
	{
		if(tc_transfer_completef == 0xFF)
			return;
		send_arr[0] = current_tc[(i * 4)];
    1d6a:	c5 ec       	ldi	r28, 0xC5	; 197
    1d6c:	d1 e0       	ldi	r29, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1d6e:	0f 2e       	mov	r0, r31
    1d70:	f6 ec       	ldi	r31, 0xC6	; 198
    1d72:	af 2e       	mov	r10, r31
    1d74:	f1 e0       	ldi	r31, 0x01	; 1
    1d76:	bf 2e       	mov	r11, r31
    1d78:	f0 2d       	mov	r31, r0
		send_arr[2] = current_tc[(i * 4) + 2];
    1d7a:	0f 2e       	mov	r0, r31
    1d7c:	f7 ec       	ldi	r31, 0xC7	; 199
    1d7e:	cf 2e       	mov	r12, r31
    1d80:	f1 e0       	ldi	r31, 0x01	; 1
    1d82:	df 2e       	mov	r13, r31
    1d84:	f0 2d       	mov	r31, r0
		send_arr[3] = current_tc[(i * 4) + 3];
    1d86:	0f 2e       	mov	r0, r31
    1d88:	f8 ec       	ldi	r31, 0xC8	; 200
    1d8a:	ef 2e       	mov	r14, r31
    1d8c:	f1 e0       	ldi	r31, 0x01	; 1
    1d8e:	ff 2e       	mov	r15, r31
    1d90:	f0 2d       	mov	r31, r0
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1d92:	0c ec       	ldi	r16, 0xCC	; 204
    1d94:	11 e0       	ldi	r17, 0x01	; 1
    1d96:	0f 2e       	mov	r0, r31
    1d98:	fa e1       	ldi	r31, 0x1A	; 26
    1d9a:	2f 2e       	mov	r2, r31
    1d9c:	f0 2d       	mov	r31, r0
	send_arr[6] = MT_COM;
    1d9e:	0f 2e       	mov	r0, r31
    1da0:	fb ec       	ldi	r31, 0xCB	; 203
    1da2:	8f 2e       	mov	r8, r31
    1da4:	f1 e0       	ldi	r31, 0x01	; 1
    1da6:	9f 2e       	mov	r9, r31
    1da8:	f0 2d       	mov	r31, r0
	send_arr[5] = SEND_TC;
    1daa:	0f 2e       	mov	r0, r31
    1dac:	fa ec       	ldi	r31, 0xCA	; 202
    1dae:	6f 2e       	mov	r6, r31
    1db0:	f1 e0       	ldi	r31, 0x01	; 1
    1db2:	7f 2e       	mov	r7, r31
    1db4:	f0 2d       	mov	r31, r0
    1db6:	08 c0       	rjmp	.+16     	; 0x1dc8 <send_pus_packet_tc+0xcc>
    1db8:	84 e0       	ldi	r24, 0x04	; 4
    1dba:	48 0e       	add	r4, r24
    1dbc:	51 1c       	adc	r5, r1
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
	{
		if(tc_transfer_completef == 0xFF)
    1dbe:	80 91 f5 01 	lds	r24, 0x01F5
    1dc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <send_pus_packet_tc+0xcc>
    1dc6:	41 c0       	rjmp	.+130    	; 0x1e4a <send_pus_packet_tc+0x14e>
    1dc8:	f2 01       	movw	r30, r4
    1dca:	33 97       	sbiw	r30, 0x03	; 3
			return;
		send_arr[0] = current_tc[(i * 4)];
    1dcc:	80 81       	ld	r24, Z
    1dce:	88 83       	st	Y, r24
    1dd0:	31 96       	adiw	r30, 0x01	; 1
		send_arr[1] = current_tc[(i * 4) + 1];
    1dd2:	80 81       	ld	r24, Z
    1dd4:	f5 01       	movw	r30, r10
    1dd6:	80 83       	st	Z, r24
    1dd8:	f2 01       	movw	r30, r4
    1dda:	31 97       	sbiw	r30, 0x01	; 1
		send_arr[2] = current_tc[(i * 4) + 2];
    1ddc:	80 81       	ld	r24, Z
    1dde:	f6 01       	movw	r30, r12
    1de0:	80 83       	st	Z, r24
		send_arr[3] = current_tc[(i * 4) + 3];
    1de2:	f2 01       	movw	r30, r4
    1de4:	80 81       	ld	r24, Z
    1de6:	f7 01       	movw	r30, r14
    1de8:	80 83       	st	Z, r24
}

// It is assumed that send_arr[3-0] have already been filled before executing this function.
static void send_tc_can_msg(uint8_t packet_count)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1dea:	f8 01       	movw	r30, r16
    1dec:	20 82       	st	Z, r2
	send_arr[6] = MT_COM;
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	f4 01       	movw	r30, r8
    1df2:	80 83       	st	Z, r24
	send_arr[5] = SEND_TC;
    1df4:	8e e0       	ldi	r24, 0x0E	; 14
    1df6:	f3 01       	movw	r30, r6
    1df8:	80 83       	st	Z, r24
	send_arr[4] = packet_count;
    1dfa:	e9 ec       	ldi	r30, 0xC9	; 201
    1dfc:	f1 e0       	ldi	r31, 0x01	; 1
    1dfe:	30 82       	st	Z, r3
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1e00:	61 e1       	ldi	r22, 0x11	; 17
    1e02:	ce 01       	movw	r24, r28
    1e04:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
		send_arr[0] = current_tc[(i * 4)];
		send_arr[1] = current_tc[(i * 4) + 1];
		send_arr[2] = current_tc[(i * 4) + 2];
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 d6 11 	call	0x23ac	; 0x23ac <delay_ms>
		delay_us(10);
	}				
	start_tc_transferf = 0;
	timeout = 100;
	
	for(i = 0; i < num_transfers; i++)
    1e10:	33 94       	inc	r3
    1e12:	f6 e2       	ldi	r31, 0x26	; 38
    1e14:	3f 12       	cpse	r3, r31
    1e16:	d0 cf       	rjmp	.-96     	; 0x1db8 <send_pus_packet_tc+0xbc>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1e18:	80 91 f5 01 	lds	r24, 0x01F5
    1e1c:	81 11       	cpse	r24, r1
    1e1e:	0c c0       	rjmp	.+24     	; 0x1e38 <send_pus_packet_tc+0x13c>
    1e20:	c4 e6       	ldi	r28, 0x64	; 100
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <send_pus_packet_tc+0x12c>
    1e24:	c1 50       	subi	r28, 0x01	; 1
	{
		if(!timeout--)
    1e26:	89 f0       	breq	.+34     	; 0x1e4a <send_pus_packet_tc+0x14e>
		{
			return;
		}
		delay_us(100);
    1e28:	84 e6       	ldi	r24, 0x64	; 100
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 c4 11 	call	0x2388	; 0x2388 <delay_us>
		send_arr[3] = current_tc[(i * 4) + 3];
		send_tc_can_msg(i);							// Send a TC message to the OBC.
		delay_ms(1);								// Give the OBC 1ms to process that CAN message.
	}
	
	while(!tc_transfer_completef)					// Delay for ~10 ms for the OBC to send final transaction response.
    1e30:	80 91 f5 01 	lds	r24, 0x01F5
    1e34:	88 23       	and	r24, r24
    1e36:	b1 f3       	breq	.-20     	; 0x1e24 <send_pus_packet_tc+0x128>
			return;
		}
		delay_us(100);
	}
	
	if(tc_transfer_completef != 35)
    1e38:	83 32       	cpi	r24, 0x23	; 35
    1e3a:	19 f0       	breq	.+6      	; 0x1e42 <send_pus_packet_tc+0x146>
	{
		tc_transfer_completef = 0;
    1e3c:	10 92 f5 01 	sts	0x01F5, r1
		return;
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <send_pus_packet_tc+0x14e>
	}
	else
	{
		tc_transfer_completef = 0;
    1e42:	10 92 f5 01 	sts	0x01F5, r1
		tc_packet_readyf = 0;
    1e46:	10 92 d1 02 	sts	0x02D1, r1
		return;
	}
}
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	1f 91       	pop	r17
    1e50:	0f 91       	pop	r16
    1e52:	ff 90       	pop	r15
    1e54:	ef 90       	pop	r14
    1e56:	df 90       	pop	r13
    1e58:	cf 90       	pop	r12
    1e5a:	bf 90       	pop	r11
    1e5c:	af 90       	pop	r10
    1e5e:	9f 90       	pop	r9
    1e60:	8f 90       	pop	r8
    1e62:	7f 90       	pop	r7
    1e64:	6f 90       	pop	r6
    1e66:	5f 90       	pop	r5
    1e68:	4f 90       	pop	r4
    1e6a:	3f 90       	pop	r3
    1e6c:	2f 90       	pop	r2
    1e6e:	08 95       	ret

00001e70 <send_event>:
}

// event_readyf should be set when an event to report on has been placed in event_arr[]
void send_event(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_PACKET_ROUTER_ID;
    1e70:	8a e1       	ldi	r24, 0x1A	; 26
    1e72:	80 93 cc 01 	sts	0x01CC, r24
	send_arr[6] = MT_COM;
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	80 93 cb 01 	sts	0x01CB, r24
	send_arr[5] = SEND_EVENT;
    1e7c:	86 e1       	ldi	r24, 0x16	; 22
    1e7e:	80 93 ca 01 	sts	0x01CA, r24
	send_arr[4] = CURRENT_MINUTE;
    1e82:	80 91 07 02 	lds	r24, 0x0207
    1e86:	80 93 c9 01 	sts	0x01C9, r24
	send_arr[3] = event_arr[3];		// 1=Normal, 2=low-sev error, 3=med-sev, 4=high-sev
    1e8a:	80 91 ac 01 	lds	r24, 0x01AC
    1e8e:	80 93 c8 01 	sts	0x01C8, r24
	send_arr[2] = event_arr[2];		// ReportID
    1e92:	80 91 ab 01 	lds	r24, 0x01AB
    1e96:	80 93 c7 01 	sts	0x01C7, r24
	send_arr[1] = event_arr[1];
    1e9a:	80 91 aa 01 	lds	r24, 0x01AA
    1e9e:	80 93 c6 01 	sts	0x01C6, r24
	send_arr[0] = event_arr[0];
    1ea2:	80 91 a9 01 	lds	r24, 0x01A9
    1ea6:	80 93 c5 01 	sts	0x01C5, r24
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1eaa:	61 e1       	ldi	r22, 0x11	; 17
    1eac:	85 ec       	ldi	r24, 0xC5	; 197
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	0e 94 98 00 	call	0x130	; 0x130 <can_send_message>
    1eb4:	08 95       	ret

00001eb6 <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now)
    1eb6:	80 91 0b 02 	lds	r24, 0x020B
    1eba:	81 11       	cpse	r24, r1
		send_response();
    1ebc:	0e 94 10 0b 	call	0x1620	; 0x1620 <send_response>
	if (send_hk)
    1ec0:	80 91 b1 02 	lds	r24, 0x02B1
    1ec4:	81 11       	cpse	r24, r1
		send_housekeeping();
    1ec6:	0e 94 25 0b 	call	0x164a	; 0x164a <send_housekeeping>
	if (send_data)
    1eca:	80 91 d3 02 	lds	r24, 0x02D3
    1ece:	81 11       	cpse	r24, r1
		send_sensor_data();
    1ed0:	0e 94 37 0b 	call	0x166e	; 0x166e <send_sensor_data>
	if (msg_received)
    1ed4:	80 91 ad 03 	lds	r24, 0x03AD
    1ed8:	81 11       	cpse	r24, r1
		send_coms_packet();
    1eda:	0e 94 90 0b 	call	0x1720	; 0x1720 <send_coms_packet>
	if (read_response)
    1ede:	80 91 10 02 	lds	r24, 0x0210
    1ee2:	81 11       	cpse	r24, r1
		send_read_response();
    1ee4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <send_read_response>
	if (write_response)
    1ee8:	80 91 e8 01 	lds	r24, 0x01E8
    1eec:	81 11       	cpse	r24, r1
		send_write_response();
    1eee:	0e 94 c9 0b 	call	0x1792	; 0x1792 <send_write_response>
	if (set_sens_h)
    1ef2:	80 91 d0 02 	lds	r24, 0x02D0
    1ef6:	81 11       	cpse	r24, r1
		set_sensor_high();
    1ef8:	0e 94 ed 0b 	call	0x17da	; 0x17da <set_sensor_high>
	if (set_sens_l)
    1efc:	80 91 d5 02 	lds	r24, 0x02D5
    1f00:	81 11       	cpse	r24, r1
		set_sensor_low();
    1f02:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <set_sensor_low>
	if (set_varf)
    1f06:	80 91 d4 02 	lds	r24, 0x02D4
    1f0a:	81 11       	cpse	r24, r1
		set_var();
    1f0c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <set_var>
	if (new_tm_msgf)
    1f10:	80 91 0d 02 	lds	r24, 0x020D
    1f14:	81 11       	cpse	r24, r1
		receive_tm_msg();
    1f16:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <receive_tm_msg>
	if (tc_packet_readyf)
    1f1a:	80 91 d1 02 	lds	r24, 0x02D1
    1f1e:	81 11       	cpse	r24, r1
		send_pus_packet_tc();
    1f20:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <send_pus_packet_tc>
	if (event_readyf)
    1f24:	80 91 01 01 	lds	r24, 0x0101
    1f28:	81 11       	cpse	r24, r1
		send_event();
    1f2a:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <send_event>
    1f2e:	08 95       	ret

00001f30 <main>:
/**************************************************/

volatile uint8_t CTC_flag;	// Variable used in timer.c

int main(void)
{		
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <main+0x6>
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <main+0x8>
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
	uint8_t high = 0, low = 0;
	
	uint8_t msg = 0x66;
	
	uint8_t* adc_result;
	*adc_result = 0;
    1f3c:	10 92 00 00 	sts	0x0000, r1
}

static void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    1f40:	e1 e6       	ldi	r30, 0x61	; 97
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 e8       	ldi	r24, 0x80	; 128
    1f46:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1f48:	10 82       	st	Z, r1
		id_array[4] = SUB0_ID4;
		id_array[5] = SUB0_ID5;
	}
	if(SELF_ID == 1)
	{
		id_array[0] = SUB1_ID0;
    1f4a:	8a e1       	ldi	r24, 0x1A	; 26
    1f4c:	80 93 c0 02 	sts	0x02C0, r24
		id_array[1] = SUB1_ID1;
    1f50:	8b e1       	ldi	r24, 0x1B	; 27
    1f52:	80 93 c1 02 	sts	0x02C1, r24
		id_array[2] = SUB1_ID2;
    1f56:	8c e1       	ldi	r24, 0x1C	; 28
    1f58:	80 93 c2 02 	sts	0x02C2, r24
		id_array[3] = SUB1_ID3;
    1f5c:	8d e1       	ldi	r24, 0x1D	; 29
    1f5e:	80 93 c3 02 	sts	0x02C3, r24
		id_array[4] = SUB1_ID4;
    1f62:	8e e1       	ldi	r24, 0x1E	; 30
    1f64:	80 93 c4 02 	sts	0x02C4, r24
		id_array[5] = SUB1_ID5;
    1f68:	8f e1       	ldi	r24, 0x1F	; 31
    1f6a:	80 93 c5 02 	sts	0x02C5, r24
    1f6e:	0f 2e       	mov	r0, r31
    1f70:	f8 eb       	ldi	r31, 0xB8	; 184
    1f72:	8f 2e       	mov	r8, r31
    1f74:	f2 e0       	ldi	r31, 0x02	; 2
    1f76:	9f 2e       	mov	r9, r31
    1f78:	f0 2d       	mov	r31, r0
    1f7a:	0f 2e       	mov	r0, r31
    1f7c:	f5 ec       	ldi	r31, 0xC5	; 197
    1f7e:	af 2e       	mov	r10, r31
    1f80:	f1 e0       	ldi	r31, 0x01	; 1
    1f82:	bf 2e       	mov	r11, r31
    1f84:	f0 2d       	mov	r31, r0
    1f86:	05 ea       	ldi	r16, 0xA5	; 165
    1f88:	13 e0       	ldi	r17, 0x03	; 3
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
    1f92:	68 ef       	ldi	r22, 0xF8	; 248
    1f94:	71 e0       	ldi	r23, 0x01	; 1
    1f96:	49 ee       	ldi	r20, 0xE9	; 233
    1f98:	51 e0       	ldi	r21, 0x01	; 1
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	33 e0       	ldi	r19, 0x03	; 3
    1f9e:	8c ed       	ldi	r24, 0xDC	; 220
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	a6 ed       	ldi	r26, 0xD6	; 214
    1fa4:	b2 e0       	ldi	r27, 0x02	; 2
    1fa6:	e6 ef       	ldi	r30, 0xF6	; 246
    1fa8:	f2 e0       	ldi	r31, 0x02	; 2
    1faa:	fa 83       	std	Y+2, r31	; 0x02
    1fac:	e9 83       	std	Y+1, r30	; 0x01
    1fae:	0f 2e       	mov	r0, r31
    1fb0:	f9 ea       	ldi	r31, 0xA9	; 169
    1fb2:	cf 2e       	mov	r12, r31
    1fb4:	f1 e0       	ldi	r31, 0x01	; 1
    1fb6:	df 2e       	mov	r13, r31
    1fb8:	f0 2d       	mov	r31, r0
    1fba:	68 94       	set
    1fbc:	ff 24       	eor	r15, r15
    1fbe:	f3 f8       	bld	r15, 3
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
    1fc0:	f4 01       	movw	r30, r8
    1fc2:	11 92       	st	Z+, r1
    1fc4:	4f 01       	movw	r8, r30
		send_arr[i] = 0;
    1fc6:	f5 01       	movw	r30, r10
    1fc8:	11 92       	st	Z+, r1
    1fca:	5f 01       	movw	r10, r30
		read_arr[i] = 0;
    1fcc:	f8 01       	movw	r30, r16
    1fce:	11 92       	st	Z+, r1
    1fd0:	8f 01       	movw	r16, r30
		write_arr[i] = 0;
    1fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd6:	11 92       	st	Z+, r1
    1fd8:	fc 83       	std	Y+4, r31	; 0x04
    1fda:	eb 83       	std	Y+3, r30	; 0x03
		data_req_arr[i] = 0;
    1fdc:	fb 01       	movw	r30, r22
    1fde:	11 92       	st	Z+, r1
    1fe0:	bf 01       	movw	r22, r30
		sensh_arr[i] = 0;
    1fe2:	fa 01       	movw	r30, r20
    1fe4:	11 92       	st	Z+, r1
    1fe6:	af 01       	movw	r20, r30
		sensl_arr[i] = 0;
    1fe8:	f9 01       	movw	r30, r18
    1fea:	11 92       	st	Z+, r1
    1fec:	9f 01       	movw	r18, r30
		setv_arr[i] = 0;
    1fee:	fc 01       	movw	r30, r24
    1ff0:	11 92       	st	Z+, r1
    1ff2:	cf 01       	movw	r24, r30
		new_tm_msg[i] = 0;
    1ff4:	1d 92       	st	X+, r1
		new_tc_msg[i] = 0;
    1ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffa:	11 92       	st	Z+, r1
    1ffc:	fa 83       	std	Y+2, r31	; 0x02
    1ffe:	e9 83       	std	Y+1, r30	; 0x01
		event_arr[i] = 0;
    2000:	f6 01       	movw	r30, r12
    2002:	11 92       	st	Z+, r1
    2004:	6f 01       	movw	r12, r30
    2006:	fa 94       	dec	r15
		id_array[2] = SUB2_ID2;
		id_array[3] = SUB2_ID3;
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	for (i = 0; i < 8; i ++)
    2008:	d9 f6       	brne	.-74     	; 0x1fc0 <main+0x90>
    200a:	e1 e1       	ldi	r30, 0x11	; 17
    200c:	f2 e0       	ldi	r31, 0x02	; 2
    200e:	2b e0       	ldi	r18, 0x0B	; 11
    2010:	33 e0       	ldi	r19, 0x03	; 3
    2012:	4f e0       	ldi	r20, 0x0F	; 15
    2014:	51 e0       	ldi	r21, 0x01	; 1
    2016:	89 ea       	ldi	r24, 0xA9	; 169
    2018:	92 e0       	ldi	r25, 0x02	; 2
		new_tc_msg[i] = 0;
		event_arr[i] = 0;
	}
	for (i = 0; i < 152; i++)		// Initialize the TM/TC Packet arrays.
	{
		current_tm[i] = 0;
    201a:	11 92       	st	Z+, r1
		current_tc[i] = 0;
    201c:	d9 01       	movw	r26, r18
    201e:	1d 92       	st	X+, r1
    2020:	9d 01       	movw	r18, r26
		tm_to_downlink[i] = 0;
    2022:	da 01       	movw	r26, r20
    2024:	1d 92       	st	X+, r1
    2026:	ad 01       	movw	r20, r26
		setv_arr[i] = 0;
		new_tm_msg[i] = 0;
		new_tc_msg[i] = 0;
		event_arr[i] = 0;
	}
	for (i = 0; i < 152; i++)		// Initialize the TM/TC Packet arrays.
    2028:	e8 17       	cp	r30, r24
    202a:	f9 07       	cpc	r31, r25
    202c:	b1 f7       	brne	.-20     	; 0x201a <main+0xea>
		current_tm[i] = 0;
		current_tc[i] = 0;
		tm_to_downlink[i] = 0;
	}
	/* Initialize Global Command Flags to zero */
	send_now = 0;
    202e:	10 92 0b 02 	sts	0x020B, r1
	send_hk = 0;
    2032:	10 92 b1 02 	sts	0x02B1, r1
	send_data = 0;
    2036:	10 92 d3 02 	sts	0x02D3, r1
	read_response = 0;
    203a:	10 92 10 02 	sts	0x0210, r1
	write_response = 0;
    203e:	10 92 e8 01 	sts	0x01E8, r1
	set_sens_h = 0;
    2042:	10 92 d0 02 	sts	0x02D0, r1
	set_sens_l = 0;
    2046:	10 92 d5 02 	sts	0x02D5, r1
	set_varf = 0;
    204a:	10 92 d4 02 	sts	0x02D4, r1
	new_tm_msgf = 0;
    204e:	10 92 0d 02 	sts	0x020D, r1
	tm_sequence_count = 0;
    2052:	10 92 00 01 	sts	0x0100, r1
	current_tm_fullf = 0;
    2056:	10 92 d2 02 	sts	0x02D2, r1
	tc_packet_readyf = 0;
    205a:	10 92 d1 02 	sts	0x02D1, r1
	tc_transfer_completef = 0;
    205e:	10 92 f5 01 	sts	0x01F5, r1
	start_tc_transferf = 0;
    2062:	10 92 f4 01 	sts	0x01F4, r1
	receiving_tmf = 0;
    2066:	10 92 f5 02 	sts	0x02F5, r1
	event_readyf = 0;
    206a:	10 92 01 01 	sts	0x0101, r1
}

static void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    206e:	8e ef       	ldi	r24, 0xFE	; 254
    2070:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    2072:	81 e1       	ldi	r24, 0x11	; 17
    2074:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    2076:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    2078:	89 e0       	ldi	r24, 0x09	; 9
    207a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    2080:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    2082:	1e b8       	out	0x0e, r1	; 14
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	init_global_vars();
	io_init();	
	timer_init();
    2084:	0e 94 bc 11 	call	0x2378	; 0x2378 <timer_init>
	adc_initialize();
    2088:	0e 94 71 00 	call	0xe2	; 0xe2 <adc_initialize>
	can_init(0);
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <can_init>
	can_init_mobs();
    2092:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <can_init_mobs>
	spi_initialize_master();
    2096:	0e 94 86 11 	call	0x230c	; 0x230c <spi_initialize_master>
	
	//enable watchdog timer - 2 second reset time approximate
	//WDTON Fuse has to be 1 for system reset mode - how do you do that?
	wdt_enable(WDTO_2S);
    209a:	2f e0       	ldi	r18, 0x0F	; 15
    209c:	88 e1       	ldi	r24, 0x18	; 24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	a8 95       	wdr
    20a6:	80 93 60 00 	sts	0x0060, r24
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	20 93 60 00 	sts	0x0060, r18

	/* Enable the timer for MMPT */
	if(SELF_ID == 1)
	{
		PIN_set(LED1);
    20b0:	8d e1       	ldi	r24, 0x1D	; 29
    20b2:	0e 94 06 11 	call	0x220c	; 0x220c <PIN_set>
		mppt_timer_init();
    20b6:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <mppt_timer_init>
		mpptx = 0x3F;
    20ba:	8f e3       	ldi	r24, 0x3F	; 63
    20bc:	80 93 0c 02 	sts	0x020C, r24
		mppty = 0x1F;
    20c0:	8f e1       	ldi	r24, 0x1F	; 31
    20c2:	80 93 04 02 	sts	0x0204, r24
		balance_l = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 93 f3 01 	sts	0x01F3, r24
		balance_h = 1;
    20cc:	80 93 db 01 	sts	0x01DB, r24
		pxv = 0xBF;
    20d0:	8f eb       	ldi	r24, 0xBF	; 191
    20d2:	80 93 de 02 	sts	0x02DE, r24
		pxi	= 0x0F;
    20d6:	8f e0       	ldi	r24, 0x0F	; 15
    20d8:	80 93 df 02 	sts	0x02DF, r24
		pyv = 0x5F;
    20dc:	8f e5       	ldi	r24, 0x5F	; 95
    20de:	80 93 0a 02 	sts	0x020A, r24
		pyi = 0x2F;
    20e2:	8f e2       	ldi	r24, 0x2F	; 47
    20e4:	80 93 0a 01 	sts	0x010A, r24
	}
	
	// Enable global interrupts for Timer execution
	sei();
    20e8:	78 94       	sei
	{
		transceiver_initialize();
		coms_timer_init();
	}

	SS1_set_high();		// SPI Temp Sensor.
    20ea:	0e 94 8c 11 	call	0x2318	; 0x2318 <SS1_set_high>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {	
		/* Reset the WDT */
		wdt_reset();
    20ee:	a8 95       	wdr
		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    20f0:	0e 94 99 02 	call	0x532	; 0x532 <can_check_general>
				trans_check();		// Check for incoming packets.	
			//check_obc_alive();
		}
		if(SELF_ID == 1)
		{
			run_mppt();
    20f4:	0e 94 ff 10 	call	0x21fe	; 0x21fe <run_mppt>
			run_battBalance();
    20f8:	0e 94 7b 00 	call	0xf6	; 0xf6 <run_battBalance>
		}
		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    20fc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <run_commands>
    2100:	f6 cf       	rjmp	.-20     	; 0x20ee <main+0x1be>

00002102 <__vector_15>:


//Section to deal with timer interrupts
#if (SELF_ID == 1)
//When the A compare register is reached, turn on the MPPTX signal
ISR(TIMER0_COMPA_vect) {
    2102:	1f 92       	push	r1
    2104:	0f 92       	push	r0
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	0f 92       	push	r0
    210a:	11 24       	eor	r1, r1
    210c:	2f 93       	push	r18
    210e:	3f 93       	push	r19
    2110:	4f 93       	push	r20
    2112:	5f 93       	push	r21
    2114:	6f 93       	push	r22
    2116:	7f 93       	push	r23
    2118:	8f 93       	push	r24
    211a:	9f 93       	push	r25
    211c:	af 93       	push	r26
    211e:	bf 93       	push	r27
    2120:	ef 93       	push	r30
    2122:	ff 93       	push	r31
	PIN_clr(LED2);
    2124:	8b e1       	ldi	r24, 0x1B	; 27
    2126:	0e 94 46 11 	call	0x228c	; 0x228c <PIN_clr>
}
    212a:	ff 91       	pop	r31
    212c:	ef 91       	pop	r30
    212e:	bf 91       	pop	r27
    2130:	af 91       	pop	r26
    2132:	9f 91       	pop	r25
    2134:	8f 91       	pop	r24
    2136:	7f 91       	pop	r23
    2138:	6f 91       	pop	r22
    213a:	5f 91       	pop	r21
    213c:	4f 91       	pop	r20
    213e:	3f 91       	pop	r19
    2140:	2f 91       	pop	r18
    2142:	0f 90       	pop	r0
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	0f 90       	pop	r0
    2148:	1f 90       	pop	r1
    214a:	18 95       	reti

0000214c <__vector_16>:

//When the B compare register is reached, turn on the MPPTY signal
ISR(TIMER0_COMPB_vect) {
    214c:	1f 92       	push	r1
    214e:	0f 92       	push	r0
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	0f 92       	push	r0
    2154:	11 24       	eor	r1, r1
    2156:	2f 93       	push	r18
    2158:	3f 93       	push	r19
    215a:	4f 93       	push	r20
    215c:	5f 93       	push	r21
    215e:	6f 93       	push	r22
    2160:	7f 93       	push	r23
    2162:	8f 93       	push	r24
    2164:	9f 93       	push	r25
    2166:	af 93       	push	r26
    2168:	bf 93       	push	r27
    216a:	ef 93       	push	r30
    216c:	ff 93       	push	r31
	PIN_clr(LED3);
    216e:	8e e1       	ldi	r24, 0x1E	; 30
    2170:	0e 94 46 11 	call	0x228c	; 0x228c <PIN_clr>
}
    2174:	ff 91       	pop	r31
    2176:	ef 91       	pop	r30
    2178:	bf 91       	pop	r27
    217a:	af 91       	pop	r26
    217c:	9f 91       	pop	r25
    217e:	8f 91       	pop	r24
    2180:	7f 91       	pop	r23
    2182:	6f 91       	pop	r22
    2184:	5f 91       	pop	r21
    2186:	4f 91       	pop	r20
    2188:	3f 91       	pop	r19
    218a:	2f 91       	pop	r18
    218c:	0f 90       	pop	r0
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	0f 90       	pop	r0
    2192:	1f 90       	pop	r1
    2194:	18 95       	reti

00002196 <__vector_17>:

//When the timer overflows, turn off both signals
ISR(TIMER0_OVF_vect) {
    2196:	1f 92       	push	r1
    2198:	0f 92       	push	r0
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	0f 92       	push	r0
    219e:	11 24       	eor	r1, r1
    21a0:	2f 93       	push	r18
    21a2:	3f 93       	push	r19
    21a4:	4f 93       	push	r20
    21a6:	5f 93       	push	r21
    21a8:	6f 93       	push	r22
    21aa:	7f 93       	push	r23
    21ac:	8f 93       	push	r24
    21ae:	9f 93       	push	r25
    21b0:	af 93       	push	r26
    21b2:	bf 93       	push	r27
    21b4:	ef 93       	push	r30
    21b6:	ff 93       	push	r31
	PIN_set(LED2);
    21b8:	8b e1       	ldi	r24, 0x1B	; 27
    21ba:	0e 94 06 11 	call	0x220c	; 0x220c <PIN_set>
	PIN_set(LED3);
    21be:	8e e1       	ldi	r24, 0x1E	; 30
    21c0:	0e 94 06 11 	call	0x220c	; 0x220c <PIN_set>
}
    21c4:	ff 91       	pop	r31
    21c6:	ef 91       	pop	r30
    21c8:	bf 91       	pop	r27
    21ca:	af 91       	pop	r26
    21cc:	9f 91       	pop	r25
    21ce:	8f 91       	pop	r24
    21d0:	7f 91       	pop	r23
    21d2:	6f 91       	pop	r22
    21d4:	5f 91       	pop	r21
    21d6:	4f 91       	pop	r20
    21d8:	3f 91       	pop	r19
    21da:	2f 91       	pop	r18
    21dc:	0f 90       	pop	r0
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	0f 90       	pop	r0
    21e2:	1f 90       	pop	r1
    21e4:	18 95       	reti

000021e6 <mppt_timer_init>:

// This function initializes a 8-bit timer used for generating PWM for mppt.
// NOTE: I cannot run this after global interrupts have been turned on
void mppt_timer_init(void) {
	
	TCNT0 = 0x0000; //Clear timer
    21e6:	16 bc       	out	0x26, r1	; 38
	//For now, hard code in the values that the "duty cycle" registers will be set to. This will be updated later by the algorithm
	OCR0A = 0x3F; // b00111111
    21e8:	8f e3       	ldi	r24, 0x3F	; 63
    21ea:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xBF; // b10111111
    21ec:	8f eb       	ldi	r24, 0xBF	; 191
    21ee:	88 bd       	out	0x28, r24	; 40
	
	TCCR0A = 0x00; // b00000000 Don't connect any pins, but set to normal mode as a test
    21f0:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; // b00000101 Set clock pre-scaling to 1024 for now, will be 1 later for "fast" output
    21f2:	85 e0       	ldi	r24, 0x05	; 5
    21f4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x07; // b00000111 Enable the A and B compare match interrupts. Also enable the timer overflow interrupt
    21f6:	87 e0       	ldi	r24, 0x07	; 7
    21f8:	80 93 6e 00 	sts	0x006E, r24
    21fc:	08 95       	ret

000021fe <run_mppt>:
void set_duty_cycleY(uint8_t duty){
	OCR0B = duty;
}

void run_mppt(void) {
	set_duty_cycleX(mpptx);
    21fe:	80 91 0c 02 	lds	r24, 0x020C
}

//This function will set the duty cycle of MPPTA
//Duty is an 8 bit number, so 0x7F is a duty cycle of 0.5
void set_duty_cycleX(uint8_t duty){
	OCR0A = duty;
    2202:	87 bd       	out	0x27, r24	; 39
	OCR0B = duty;
}

void run_mppt(void) {
	set_duty_cycleX(mpptx);
	set_duty_cycleY(mppty);	
    2204:	80 91 04 02 	lds	r24, 0x0204
	OCR0A = duty;
}

//This function will set the duty cycle of MPPTB
void set_duty_cycleY(uint8_t duty){
	OCR0B = duty;
    2208:	88 bd       	out	0x28, r24	; 40
    220a:	08 95       	ret

0000220c <PIN_set>:
	return;
}

void PIN_set(uint8_t PIN)
{
	if(PIN == 13)
    220c:	8d 30       	cpi	r24, 0x0D	; 13
    220e:	11 f4       	brne	.+4      	; 0x2214 <PIN_set+0x8>
	{
		PORTD |= 0b00100000;
    2210:	5d 9a       	sbi	0x0b, 5	; 11
    2212:	08 c0       	rjmp	.+16     	; 0x2224 <PIN_set+0x18>
	}
	if(PIN == 14)
    2214:	8e 30       	cpi	r24, 0x0E	; 14
    2216:	11 f4       	brne	.+4      	; 0x221c <PIN_set+0x10>
	{
		PORTD |= 0b01000000;
    2218:	5e 9a       	sbi	0x0b, 6	; 11
    221a:	08 c0       	rjmp	.+16     	; 0x222c <PIN_set+0x20>
	}
	if(PIN == 15)
    221c:	8f 30       	cpi	r24, 0x0F	; 15
    221e:	11 f4       	brne	.+4      	; 0x2224 <PIN_set+0x18>
	{
		PORTD |= 0b10000000;
    2220:	5f 9a       	sbi	0x0b, 7	; 11
    2222:	08 c0       	rjmp	.+16     	; 0x2234 <PIN_set+0x28>
	}
	if(PIN == 16)
    2224:	80 31       	cpi	r24, 0x10	; 16
    2226:	11 f4       	brne	.+4      	; 0x222c <PIN_set+0x20>
	{
		PORTB |= 0b00000100;
    2228:	2a 9a       	sbi	0x05, 2	; 5
    222a:	08 c0       	rjmp	.+16     	; 0x223c <PIN_set+0x30>
	}
	if(PIN == 17)
    222c:	81 31       	cpi	r24, 0x11	; 17
    222e:	11 f4       	brne	.+4      	; 0x2234 <PIN_set+0x28>
	{
		PORTC |= 0b00010000;
    2230:	44 9a       	sbi	0x08, 4	; 8
    2232:	08 c0       	rjmp	.+16     	; 0x2244 <PIN_set+0x38>
	}
	if(PIN == 18)
    2234:	82 31       	cpi	r24, 0x12	; 18
    2236:	11 f4       	brne	.+4      	; 0x223c <PIN_set+0x30>
	{
		PORTC |= 0b00100000;
    2238:	45 9a       	sbi	0x08, 5	; 8
    223a:	08 c0       	rjmp	.+16     	; 0x224c <PIN_set+0x40>
	}
	if(PIN == 22)
    223c:	86 31       	cpi	r24, 0x16	; 22
    223e:	11 f4       	brne	.+4      	; 0x2244 <PIN_set+0x38>
	{
		PORTC |= 0b01000000;
    2240:	46 9a       	sbi	0x08, 6	; 8
    2242:	08 c0       	rjmp	.+16     	; 0x2254 <PIN_set+0x48>
	}
	if(PIN == 23)
    2244:	87 31       	cpi	r24, 0x17	; 23
    2246:	11 f4       	brne	.+4      	; 0x224c <PIN_set+0x40>
	{
		PORTB |= 0b00001000;
    2248:	2b 9a       	sbi	0x05, 3	; 5
    224a:	08 c0       	rjmp	.+16     	; 0x225c <PIN_set+0x50>
	}
	if(PIN == 24)
    224c:	88 31       	cpi	r24, 0x18	; 24
    224e:	11 f4       	brne	.+4      	; 0x2254 <PIN_set+0x48>
	{
		PORTB |= 0b00010000;
    2250:	2c 9a       	sbi	0x05, 4	; 5
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <PIN_set+0x58>
	}
	if(PIN == 25)
    2254:	89 31       	cpi	r24, 0x19	; 25
    2256:	11 f4       	brne	.+4      	; 0x225c <PIN_set+0x50>
	{
		PORTC |= 0b10000000;
    2258:	47 9a       	sbi	0x08, 7	; 8
    225a:	08 c0       	rjmp	.+16     	; 0x226c <PIN_set+0x60>
	}
	if(PIN == 26)
    225c:	8a 31       	cpi	r24, 0x1A	; 26
    225e:	11 f4       	brne	.+4      	; 0x2264 <PIN_set+0x58>
	{
		PORTB |= 0b00100000;
    2260:	2d 9a       	sbi	0x05, 5	; 5
    2262:	08 c0       	rjmp	.+16     	; 0x2274 <PIN_set+0x68>
	}
	if(PIN == 27)
    2264:	8b 31       	cpi	r24, 0x1B	; 27
    2266:	11 f4       	brne	.+4      	; 0x226c <PIN_set+0x60>
	{
		PORTB |= 0b01000000;
    2268:	2e 9a       	sbi	0x05, 6	; 5
    226a:	08 c0       	rjmp	.+16     	; 0x227c <PIN_set+0x70>
	}
	if(PIN == 28)
    226c:	8c 31       	cpi	r24, 0x1C	; 28
    226e:	11 f4       	brne	.+4      	; 0x2274 <PIN_set+0x68>
	{
		PORTB |= 0b10000000;
    2270:	2f 9a       	sbi	0x05, 7	; 5
    2272:	08 c0       	rjmp	.+16     	; 0x2284 <PIN_set+0x78>
	}
	if(PIN == 29)
    2274:	8d 31       	cpi	r24, 0x1D	; 29
    2276:	11 f4       	brne	.+4      	; 0x227c <PIN_set+0x70>
	{
		PORTD |= 0b00000001;
    2278:	58 9a       	sbi	0x0b, 0	; 11
    227a:	08 95       	ret
	}
	if(PIN == 30)
    227c:	8e 31       	cpi	r24, 0x1E	; 30
    227e:	11 f4       	brne	.+4      	; 0x2284 <PIN_set+0x78>
	{
		PORTC |= 0b00000001;
    2280:	40 9a       	sbi	0x08, 0	; 8
    2282:	08 95       	ret
	}
	if(PIN == 32)
    2284:	80 32       	cpi	r24, 0x20	; 32
    2286:	09 f4       	brne	.+2      	; 0x228a <PIN_set+0x7e>
	{
		PORTD |= 0b00000010;
    2288:	59 9a       	sbi	0x0b, 1	; 11
    228a:	08 95       	ret

0000228c <PIN_clr>:
	return;
}

void PIN_clr(uint8_t PIN)
{
	if(PIN == 13)
    228c:	8d 30       	cpi	r24, 0x0D	; 13
    228e:	11 f4       	brne	.+4      	; 0x2294 <PIN_clr+0x8>
	{
		PORTD &= ~(0b00100000);
    2290:	5d 98       	cbi	0x0b, 5	; 11
    2292:	08 c0       	rjmp	.+16     	; 0x22a4 <PIN_clr+0x18>
	}
	if(PIN == 14)
    2294:	8e 30       	cpi	r24, 0x0E	; 14
    2296:	11 f4       	brne	.+4      	; 0x229c <PIN_clr+0x10>
	{
		PORTD &= ~(0b01000000);
    2298:	5e 98       	cbi	0x0b, 6	; 11
    229a:	08 c0       	rjmp	.+16     	; 0x22ac <PIN_clr+0x20>
	}
	if(PIN == 15)
    229c:	8f 30       	cpi	r24, 0x0F	; 15
    229e:	11 f4       	brne	.+4      	; 0x22a4 <PIN_clr+0x18>
	{
		PORTD &= ~(0b10000000);
    22a0:	5f 98       	cbi	0x0b, 7	; 11
    22a2:	08 c0       	rjmp	.+16     	; 0x22b4 <PIN_clr+0x28>
	}
	if(PIN == 16)
    22a4:	80 31       	cpi	r24, 0x10	; 16
    22a6:	11 f4       	brne	.+4      	; 0x22ac <PIN_clr+0x20>
	{
		PORTB &= ~(0b00000100);
    22a8:	2a 98       	cbi	0x05, 2	; 5
    22aa:	08 c0       	rjmp	.+16     	; 0x22bc <PIN_clr+0x30>
	}
	if(PIN == 17)
    22ac:	81 31       	cpi	r24, 0x11	; 17
    22ae:	11 f4       	brne	.+4      	; 0x22b4 <PIN_clr+0x28>
	{
		PORTC &= ~(0b00010000);
    22b0:	44 98       	cbi	0x08, 4	; 8
    22b2:	08 c0       	rjmp	.+16     	; 0x22c4 <PIN_clr+0x38>
	}
	if(PIN == 18)
    22b4:	82 31       	cpi	r24, 0x12	; 18
    22b6:	11 f4       	brne	.+4      	; 0x22bc <PIN_clr+0x30>
	{
		PORTC &= ~(0b00100000);
    22b8:	45 98       	cbi	0x08, 5	; 8
    22ba:	08 c0       	rjmp	.+16     	; 0x22cc <PIN_clr+0x40>
	}
	if(PIN == 22)
    22bc:	86 31       	cpi	r24, 0x16	; 22
    22be:	11 f4       	brne	.+4      	; 0x22c4 <PIN_clr+0x38>
	{
		PORTC &= ~(0b01000000);
    22c0:	46 98       	cbi	0x08, 6	; 8
    22c2:	08 c0       	rjmp	.+16     	; 0x22d4 <PIN_clr+0x48>
	}
	if(PIN == 23)
    22c4:	87 31       	cpi	r24, 0x17	; 23
    22c6:	11 f4       	brne	.+4      	; 0x22cc <PIN_clr+0x40>
	{
		PORTB &= ~(0b00001000);
    22c8:	2b 98       	cbi	0x05, 3	; 5
    22ca:	08 c0       	rjmp	.+16     	; 0x22dc <PIN_clr+0x50>
	}
	if(PIN == 24)
    22cc:	88 31       	cpi	r24, 0x18	; 24
    22ce:	11 f4       	brne	.+4      	; 0x22d4 <PIN_clr+0x48>
	{
		PORTB &= ~(0b00010000);
    22d0:	2c 98       	cbi	0x05, 4	; 5
    22d2:	08 c0       	rjmp	.+16     	; 0x22e4 <PIN_clr+0x58>
	}
	if(PIN == 25)
    22d4:	89 31       	cpi	r24, 0x19	; 25
    22d6:	11 f4       	brne	.+4      	; 0x22dc <PIN_clr+0x50>
	{
		PORTC &= ~(0b10000000);
    22d8:	47 98       	cbi	0x08, 7	; 8
    22da:	08 c0       	rjmp	.+16     	; 0x22ec <PIN_clr+0x60>
	}
	if(PIN == 26)
    22dc:	8a 31       	cpi	r24, 0x1A	; 26
    22de:	11 f4       	brne	.+4      	; 0x22e4 <PIN_clr+0x58>
	{
		PORTB &= ~(0b00100000);
    22e0:	2d 98       	cbi	0x05, 5	; 5
    22e2:	08 c0       	rjmp	.+16     	; 0x22f4 <PIN_clr+0x68>
	}
	if(PIN == 27)
    22e4:	8b 31       	cpi	r24, 0x1B	; 27
    22e6:	11 f4       	brne	.+4      	; 0x22ec <PIN_clr+0x60>
	{
		PORTB &= ~(0b01000000);
    22e8:	2e 98       	cbi	0x05, 6	; 5
    22ea:	08 c0       	rjmp	.+16     	; 0x22fc <PIN_clr+0x70>
	}
	if(PIN == 28)
    22ec:	8c 31       	cpi	r24, 0x1C	; 28
    22ee:	11 f4       	brne	.+4      	; 0x22f4 <PIN_clr+0x68>
	{
		PORTB &= ~(0b10000000);
    22f0:	2f 98       	cbi	0x05, 7	; 5
    22f2:	08 c0       	rjmp	.+16     	; 0x2304 <PIN_clr+0x78>
	}
	if(PIN == 29)
    22f4:	8d 31       	cpi	r24, 0x1D	; 29
    22f6:	11 f4       	brne	.+4      	; 0x22fc <PIN_clr+0x70>
	{
		PORTD &= ~(0b00000001);
    22f8:	58 98       	cbi	0x0b, 0	; 11
    22fa:	08 95       	ret
	}
	if(PIN == 30)
    22fc:	8e 31       	cpi	r24, 0x1E	; 30
    22fe:	11 f4       	brne	.+4      	; 0x2304 <PIN_clr+0x78>
	{
		PORTC &= ~(0b00000001);
    2300:	40 98       	cbi	0x08, 0	; 8
    2302:	08 95       	ret
	}
	if(PIN == 32)
    2304:	80 32       	cpi	r24, 0x20	; 32
    2306:	09 f4       	brne	.+2      	; 0x230a <PIN_clr+0x7e>
	{
		PORTD &= ~(0b00000010);
    2308:	59 98       	cbi	0x0b, 1	; 11
    230a:	08 95       	ret

0000230c <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    230c:	85 b7       	in	r24, 0x35	; 53
    230e:	8f 77       	andi	r24, 0x7F	; 127
    2310:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    2312:	83 e5       	ldi	r24, 0x53	; 83
    2314:	8c bd       	out	0x2c, r24	; 44
    2316:	08 95       	ret

00002318 <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    2318:	44 9a       	sbi	0x08, 4	; 8
    231a:	08 95       	ret

0000231c <SS1_set_low>:
	delay_us(1);
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    231c:	44 98       	cbi	0x08, 4	; 8
    231e:	08 95       	ret

00002320 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	8c 01       	movw	r16, r24
    232a:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    232c:	0e 94 8e 11 	call	0x231c	; 0x231c <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    2330:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    2332:	80 e8       	ldi	r24, 0x80	; 128
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	0e 94 d6 11 	call	0x23ac	; 0x23ac <delay_ms>
	*high = *reg_ptr;
    233a:	8e b5       	in	r24, 0x2e	; 46
    233c:	f8 01       	movw	r30, r16
    233e:	80 83       	st	Z, r24
	delay_ms(128);
    2340:	80 e8       	ldi	r24, 0x80	; 128
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 d6 11 	call	0x23ac	; 0x23ac <delay_ms>
	*low = *reg_ptr;	
    2348:	8e b5       	in	r24, 0x2e	; 46
    234a:	88 83       	st	Y, r24
	SS1_set_high();
    234c:	0e 94 8c 11 	call	0x2318	; 0x2318 <SS1_set_high>
	
	return;
}
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	0f 91       	pop	r16
    2358:	08 95       	ret

0000235a <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    235a:	1f 92       	push	r1
    235c:	0f 92       	push	r0
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	0f 92       	push	r0
    2362:	11 24       	eor	r1, r1
    2364:	8f 93       	push	r24
	CTC_flag = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	80 93 c0 03 	sts	0x03C0, r24
}
    236c:	8f 91       	pop	r24
    236e:	0f 90       	pop	r0
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	0f 90       	pop	r0
    2374:	1f 90       	pop	r1
    2376:	18 95       	reti

00002378 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    2378:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    237c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    2380:	8a e0       	ldi	r24, 0x0A	; 10
    2382:	80 93 81 00 	sts	0x0081, r24
    2386:	08 95       	ret

00002388 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    2388:	10 92 c0 03 	sts	0x03C0, r1
	TCNT1 = 0x0000; //Clear timer
    238c:	10 92 85 00 	sts	0x0085, r1
    2390:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    2394:	90 93 89 00 	sts	0x0089, r25
    2398:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    23a2:	80 91 c0 03 	lds	r24, 0x03C0
    23a6:	88 23       	and	r24, r24
    23a8:	e1 f3       	breq	.-8      	; 0x23a2 <delay_us+0x1a>
}
    23aa:	08 95       	ret

000023ac <delay_ms>:

void delay_ms(uint16_t ms) {
    23ac:	0f 93       	push	r16
    23ae:	1f 93       	push	r17
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	51 f0       	breq	.+20     	; 0x23ce <delay_ms+0x22>
    23ba:	c0 e0       	ldi	r28, 0x00	; 0
    23bc:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    23be:	88 ee       	ldi	r24, 0xE8	; 232
    23c0:	93 e0       	ldi	r25, 0x03	; 3
    23c2:	0e 94 c4 11 	call	0x2388	; 0x2388 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    23c6:	21 96       	adiw	r28, 0x01	; 1
    23c8:	c0 17       	cp	r28, r16
    23ca:	d1 07       	cpc	r29, r17
    23cc:	c1 f7       	brne	.-16     	; 0x23be <delay_ms+0x12>
		delay_us(1000);
	}
}
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	08 95       	ret

000023d8 <__tablejump2__>:
    23d8:	ee 0f       	add	r30, r30
    23da:	ff 1f       	adc	r31, r31

000023dc <__tablejump__>:
    23dc:	05 90       	lpm	r0, Z+
    23de:	f4 91       	lpm	r31, Z
    23e0:	e0 2d       	mov	r30, r0
    23e2:	09 94       	ijmp

000023e4 <_exit>:
    23e4:	f8 94       	cli

000023e6 <__stop_program>:
    23e6:	ff cf       	rjmp	.-2      	; 0x23e6 <__stop_program>
