
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000079  00800100  00800100  00001a5e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000290  00000000  00000000  00001a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000263d  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000e0c  00000000  00000000  0000435b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ff6  00000000  00000000  00005167  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000610  00000000  00000000  00006160  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000007f9  00000000  00000000  00006770  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001b8d  00000000  00000000  00006f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000220  00000000  00000000  00008af6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_15>
      40:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_16>
      44:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <__vector_17>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	e4 03       	fmuls	r22, r20
      7e:	76 04       	cpc	r7, r6
      80:	00 05       	cpc	r16, r0
      82:	74 05       	cpc	r23, r4
      84:	b4 05       	cpc	r27, r4
      86:	30 06       	cpc	r3, r16
      88:	ad 06       	cpc	r10, r29
      8a:	4a 07       	cpc	r20, r26
      8c:	f0 07       	cpc	r31, r16
      8e:	de 03       	fmulsu	r21, r22
      90:	f9 08       	sbc	r15, r9

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a9 37       	cpi	r26, 0x79	; 121
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 96 0b 	call	0x172c	; 0x172c <main>
      b2:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      ce:	e8 e7       	ldi	r30, 0x78	; 120
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	20 81       	ld	r18, Z
      d4:	dc 01       	movw	r26, r24
      d6:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
      d8:	21 81       	ldd	r18, Z+1	; 0x01
      da:	11 96       	adiw	r26, 0x01	; 1
      dc:	2c 93       	st	X, r18
      de:	08 95       	ret

000000e0 <adc_set_pin>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = ADC_num;
	*ptr = x;
      e0:	80 93 7c 00 	sts	0x007C, r24
      e4:	08 95       	ret

000000e6 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
      e6:	21 e2       	ldi	r18, 0x21	; 33
      e8:	31 e0       	ldi	r19, 0x01	; 1
      ea:	30 93 32 01 	sts	0x0132, r19
      ee:	20 93 31 01 	sts	0x0131, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      f2:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id;  // populate ID field with ID Tag
      f6:	70 e0       	ldi	r23, 0x00	; 0
      f8:	70 93 2d 01 	sts	0x012D, r23
      fc:	60 93 2c 01 	sts	0x012C, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     100:	22 e0       	ldi	r18, 0x02	; 2
     102:	20 93 2b 01 	sts	0x012B, r18
	message.dlc = 8;			 // Max length of a CAN message.
     106:	28 e0       	ldi	r18, 0x08	; 8
     108:	20 93 30 01 	sts	0x0130, r18
	mob_number = 4;
     10c:	24 e0       	ldi	r18, 0x04	; 4
     10e:	20 93 6e 01 	sts	0x016E, r18
     112:	dc 01       	movw	r26, r24
     114:	e1 e2       	ldi	r30, 0x21	; 33
     116:	f1 e0       	ldi	r31, 0x01	; 1
     118:	89 e2       	ldi	r24, 0x29	; 41
     11a:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     11c:	2d 91       	ld	r18, X+
     11e:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     120:	e8 17       	cp	r30, r24
     122:	f9 07       	cpc	r31, r25
     124:	d9 f7       	brne	.-10     	; 0x11c <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     126:	60 91 6e 01 	lds	r22, 0x016E
     12a:	8a e2       	ldi	r24, 0x2A	; 42
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     132:	81 11       	cpse	r24, r1
     134:	f8 cf       	rjmp	.-16     	; 0x126 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     136:	60 91 6e 01 	lds	r22, 0x016E
     13a:	8a e2       	ldi	r24, 0x2A	; 42
     13c:	91 e0       	ldi	r25, 0x01	; 1
     13e:	0e 94 c6 09 	call	0x138c	; 0x138c <can_get_status>
     142:	81 30       	cpi	r24, 0x01	; 1
     144:	c1 f3       	breq	.-16     	; 0x136 <can_send_message+0x50>

	return;
}
     146:	08 95       	ret

00000148 <decode_command>:

void decode_command(uint8_t* command_array)
{		
	uint8_t i, command  = *(command_array + 5);

	switch(command)
     148:	fc 01       	movw	r30, r24
     14a:	25 81       	ldd	r18, Z+5	; 0x05
     14c:	23 30       	cpi	r18, 0x03	; 3
     14e:	e9 f0       	breq	.+58     	; 0x18a <decode_command+0x42>
     150:	28 f4       	brcc	.+10     	; 0x15c <decode_command+0x14>
     152:	21 30       	cpi	r18, 0x01	; 1
     154:	41 f0       	breq	.+16     	; 0x166 <decode_command+0x1e>
     156:	22 30       	cpi	r18, 0x02	; 2
     158:	51 f0       	breq	.+20     	; 0x16e <decode_command+0x26>
     15a:	08 95       	ret
     15c:	25 30       	cpi	r18, 0x05	; 5
     15e:	c9 f0       	breq	.+50     	; 0x192 <decode_command+0x4a>
     160:	27 30       	cpi	r18, 0x07	; 7
     162:	29 f1       	breq	.+74     	; 0x1ae <decode_command+0x66>
     164:	08 95       	ret
		case REQ_RESPONSE :
			if(SELF_ID != 1)
			{
				LED_toggle(LED3);
			}
			send_now = 1;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	80 93 3e 01 	sts	0x013E, r24
			return;
     16c:	08 95       	ret
		case REQ_DATA :
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
			send_data = 1;
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	20 93 65 01 	sts	0x0165, r18
     174:	dc 01       	movw	r26, r24
     176:	e6 e3       	ldi	r30, 0x36	; 54
     178:	f1 e0       	ldi	r31, 0x01	; 1
     17a:	8e e3       	ldi	r24, 0x3E	; 62
     17c:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				data_req_arr[i] = *(command_array + i);
     17e:	2d 91       	ld	r18, X+
     180:	21 93       	st	Z+, r18
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
			send_data = 1;
			for (i = 0; i < 8; i ++)
     182:	e8 17       	cp	r30, r24
     184:	f9 07       	cpc	r31, r25
     186:	d9 f7       	brne	.-10     	; 0x17e <decode_command+0x36>
     188:	08 95       	ret
		case REQ_HK :
			if(SELF_ID != 1)
			{
				LED_toggle(LED2);
			}
			send_hk = 1;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	80 93 4e 01 	sts	0x014E, r24
			return;
     190:	08 95       	ret
		case REQ_READ:
			read_response = 1;
     192:	21 e0       	ldi	r18, 0x01	; 1
     194:	20 93 45 01 	sts	0x0145, r18
     198:	dc 01       	movw	r26, r24
     19a:	e0 e7       	ldi	r30, 0x70	; 112
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	88 e7       	ldi	r24, 0x78	; 120
     1a0:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				read_arr[i] = *(command_array + i);
     1a2:	2d 91       	ld	r18, X+
     1a4:	21 93       	st	Z+, r18
			}
			send_hk = 1;
			return;
		case REQ_READ:
			read_response = 1;
			for (i = 0; i < 8; i ++)
     1a6:	e8 17       	cp	r30, r24
     1a8:	f9 07       	cpc	r31, r25
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <decode_command+0x5a>
     1ac:	08 95       	ret
			{
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	20 93 29 01 	sts	0x0129, r18
     1b4:	dc 01       	movw	r26, r24
     1b6:	e0 e0       	ldi	r30, 0x00	; 0
     1b8:	f1 e0       	ldi	r31, 0x01	; 1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	91 e0       	ldi	r25, 0x01	; 1
			for (i = 0; i < 8; i ++)
			{
				write_arr[i] = *(command_array + i);
     1be:	2d 91       	ld	r18, X+
     1c0:	21 93       	st	Z+, r18
				read_arr[i] = *(command_array + i);
			}
			return;
		case REQ_WRITE:
			write_response = 1;
			for (i = 0; i < 8; i ++)
     1c2:	e8 17       	cp	r30, r24
     1c4:	f9 07       	cpc	r31, r25
     1c6:	d9 f7       	brne	.-10     	; 0x1be <decode_command+0x76>
     1c8:	08 95       	ret

000001ca <set_up_msg>:
	}
}

void set_up_msg(uint8_t mailbox)
{
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     1ca:	10 92 35 01 	sts	0x0135, r1
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     1ce:	95 e0       	ldi	r25, 0x05	; 5
     1d0:	90 93 2b 01 	sts	0x012B, r25
	message.dlc = 8;			 // Max length of a CAN message.
     1d4:	98 e0       	ldi	r25, 0x08	; 8
     1d6:	90 93 30 01 	sts	0x0130, r25
	mob_number = mailbox;
     1da:	80 93 6e 01 	sts	0x016E, r24
	
	if(mailbox == 0)
     1de:	81 11       	cpse	r24, r1
     1e0:	0e c0       	rjmp	.+28     	; 0x1fe <set_up_msg+0x34>
	{
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     1e2:	86 e4       	ldi	r24, 0x46	; 70
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	90 93 32 01 	sts	0x0132, r25
     1ea:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     1ee:	80 91 57 01 	lds	r24, 0x0157
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	90 93 2d 01 	sts	0x012D, r25
     1f8:	80 93 2c 01 	sts	0x012C, r24
		return;
     1fc:	08 95       	ret
	}
	if(mailbox == 1)
     1fe:	81 30       	cpi	r24, 0x01	; 1
     200:	71 f4       	brne	.+28     	; 0x21e <set_up_msg+0x54>
	{
		message.pt_data = &data1[0];
     202:	89 e0       	ldi	r24, 0x09	; 9
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	90 93 32 01 	sts	0x0132, r25
     20a:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[1];
     20e:	80 91 58 01 	lds	r24, 0x0158
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	90 93 2d 01 	sts	0x012D, r25
     218:	80 93 2c 01 	sts	0x012C, r24
		return;
     21c:	08 95       	ret
	}
	if(mailbox == 2)
     21e:	82 30       	cpi	r24, 0x02	; 2
     220:	71 f4       	brne	.+28     	; 0x23e <set_up_msg+0x74>
	{
		message.pt_data = &data2[0];
     222:	81 e1       	ldi	r24, 0x11	; 17
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	90 93 32 01 	sts	0x0132, r25
     22a:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[2];
     22e:	80 91 59 01 	lds	r24, 0x0159
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	90 93 2d 01 	sts	0x012D, r25
     238:	80 93 2c 01 	sts	0x012C, r24
		return;
     23c:	08 95       	ret
	}
	if(mailbox == 3)
     23e:	83 30       	cpi	r24, 0x03	; 3
     240:	71 f4       	brne	.+28     	; 0x25e <set_up_msg+0x94>
	{
		message.pt_data = &data3[0];
     242:	8d e5       	ldi	r24, 0x5D	; 93
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	90 93 32 01 	sts	0x0132, r25
     24a:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[3];
     24e:	80 91 5a 01 	lds	r24, 0x015A
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	90 93 2d 01 	sts	0x012D, r25
     258:	80 93 2c 01 	sts	0x012C, r24
		return;
     25c:	08 95       	ret
	}
	if(mailbox == 5)
     25e:	85 30       	cpi	r24, 0x05	; 5
     260:	69 f4       	brne	.+26     	; 0x27c <set_up_msg+0xb2>
	{
		message.pt_data = &data5[0];
     262:	86 e6       	ldi	r24, 0x66	; 102
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	90 93 32 01 	sts	0x0132, r25
     26a:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[5];
     26e:	80 91 5c 01 	lds	r24, 0x015C
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	90 93 2d 01 	sts	0x012D, r25
     278:	80 93 2c 01 	sts	0x012C, r24
     27c:	08 95       	ret

0000027e <clean_up_msg>:
}

void clean_up_msg(uint8_t mailbox)
{

	if(mailbox == 0)
     27e:	81 11       	cpse	r24, r1
     280:	20 c0       	rjmp	.+64     	; 0x2c2 <clean_up_msg+0x44>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     282:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     286:	85 e0       	ldi	r24, 0x05	; 5
     288:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	80 93 30 01 	sts	0x0130, r24
		mob_number = mailbox;
     292:	10 92 6e 01 	sts	0x016E, r1
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     296:	86 e4       	ldi	r24, 0x46	; 70
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	90 93 32 01 	sts	0x0132, r25
     29e:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[0];  // populate ID field with ID Tag
     2a2:	80 91 57 01 	lds	r24, 0x0157
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	90 93 2d 01 	sts	0x012D, r25
     2ac:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     2b0:	60 91 6e 01 	lds	r22, 0x016E
     2b4:	8a e2       	ldi	r24, 0x2A	; 42
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     2bc:	81 11       	cpse	r24, r1
     2be:	f8 cf       	rjmp	.-16     	; 0x2b0 <clean_up_msg+0x32>
     2c0:	08 95       	ret
		return;
	}
	if(mailbox == 1)
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	01 f5       	brne	.+64     	; 0x306 <clean_up_msg+0x88>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     2c6:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     2ca:	85 e0       	ldi	r24, 0x05	; 5
     2cc:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     2d0:	88 e0       	ldi	r24, 0x08	; 8
     2d2:	80 93 30 01 	sts	0x0130, r24
		mob_number = mailbox;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data1[0];
     2dc:	89 e0       	ldi	r24, 0x09	; 9
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	90 93 32 01 	sts	0x0132, r25
     2e4:	80 93 31 01 	sts	0x0131, r24
		message.id.std = SUB0_ID1;
     2e8:	85 e1       	ldi	r24, 0x15	; 21
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	90 93 2d 01 	sts	0x012D, r25
     2f0:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     2f4:	60 91 6e 01 	lds	r22, 0x016E
     2f8:	8a e2       	ldi	r24, 0x2A	; 42
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     300:	81 11       	cpse	r24, r1
     302:	f8 cf       	rjmp	.-16     	; 0x2f4 <clean_up_msg+0x76>
     304:	08 95       	ret
		return;
	}
	if(mailbox == 2)
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	09 f5       	brne	.+66     	; 0x34c <clean_up_msg+0xce>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     30a:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     30e:	85 e0       	ldi	r24, 0x05	; 5
     310:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     314:	88 e0       	ldi	r24, 0x08	; 8
     316:	80 93 30 01 	sts	0x0130, r24
		mob_number = mailbox;
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data2[0];
     320:	81 e1       	ldi	r24, 0x11	; 17
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	90 93 32 01 	sts	0x0132, r25
     328:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[2];
     32c:	80 91 59 01 	lds	r24, 0x0159
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	90 93 2d 01 	sts	0x012D, r25
     336:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     33a:	60 91 6e 01 	lds	r22, 0x016E
     33e:	8a e2       	ldi	r24, 0x2A	; 42
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     346:	81 11       	cpse	r24, r1
     348:	f8 cf       	rjmp	.-16     	; 0x33a <clean_up_msg+0xbc>
     34a:	08 95       	ret
		return;
	}
	if(mailbox == 3)
     34c:	83 30       	cpi	r24, 0x03	; 3
     34e:	09 f5       	brne	.+66     	; 0x392 <clean_up_msg+0x114>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     350:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     354:	85 e0       	ldi	r24, 0x05	; 5
     356:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     35a:	88 e0       	ldi	r24, 0x08	; 8
     35c:	80 93 30 01 	sts	0x0130, r24
		mob_number = mailbox;
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data3[0];
     366:	8d e5       	ldi	r24, 0x5D	; 93
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	90 93 32 01 	sts	0x0132, r25
     36e:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[3];
     372:	80 91 5a 01 	lds	r24, 0x015A
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	90 93 2d 01 	sts	0x012D, r25
     37c:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     380:	60 91 6e 01 	lds	r22, 0x016E
     384:	8a e2       	ldi	r24, 0x2A	; 42
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     38c:	81 11       	cpse	r24, r1
     38e:	f8 cf       	rjmp	.-16     	; 0x380 <clean_up_msg+0x102>
     390:	08 95       	ret
		return;
	}
	if(mailbox == 5)
     392:	85 30       	cpi	r24, 0x05	; 5
     394:	f1 f4       	brne	.+60     	; 0x3d2 <clean_up_msg+0x154>
	{
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     396:	10 92 35 01 	sts	0x0135, r1
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     39a:	80 93 2b 01 	sts	0x012B, r24
		message.dlc = 8;			 // Max length of a CAN message.
     39e:	98 e0       	ldi	r25, 0x08	; 8
     3a0:	90 93 30 01 	sts	0x0130, r25
		mob_number = mailbox;
     3a4:	80 93 6e 01 	sts	0x016E, r24
		message.pt_data = &data5[0];
     3a8:	86 e6       	ldi	r24, 0x66	; 102
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	90 93 32 01 	sts	0x0132, r25
     3b0:	80 93 31 01 	sts	0x0131, r24
		message.id.std = id_array[5];
     3b4:	80 91 5c 01 	lds	r24, 0x015C
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	90 93 2d 01 	sts	0x012D, r25
     3be:	80 93 2c 01 	sts	0x012C, r24
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED);
     3c2:	60 91 6e 01 	lds	r22, 0x016E
     3c6:	8a e2       	ldi	r24, 0x2A	; 42
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     3ce:	81 11       	cpse	r24, r1
     3d0:	f8 cf       	rjmp	.-16     	; 0x3c2 <clean_up_msg+0x144>
     3d2:	08 95       	ret

000003d4 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 5;
	
	set_up_msg(mb);		// Sets up the message object.
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	0e 94 e5 00 	call	0x1ca	; 0x1ca <set_up_msg>
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     3de:	60 91 6e 01 	lds	r22, 0x016E
     3e2:	8a e2       	ldi	r24, 0x2A	; 42
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 c6 09 	call	0x138c	; 0x138c <can_get_status>
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	11 f1       	breq	.+68     	; 0x432 <can_check_housekeep+0x5e>
	{
		if(message.status == MOB_RX_COMPLETED)
     3ee:	80 91 33 01 	lds	r24, 0x0133
     3f2:	80 32       	cpi	r24, 0x20	; 32
     3f4:	d9 f4       	brne	.+54     	; 0x42c <can_check_housekeep+0x58>
     3f6:	a0 91 31 01 	lds	r26, 0x0131
     3fa:	b0 91 32 01 	lds	r27, 0x0132
     3fe:	c7 e5       	ldi	r28, 0x57	; 87
     400:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     402:	ef e4       	ldi	r30, 0x4F	; 79
     404:	f1 e0       	ldi	r31, 0x01	; 1
     406:	8d 91       	ld	r24, X+
     408:	81 93       	st	Z+, r24
		
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     40a:	ec 17       	cp	r30, r28
     40c:	fd 07       	cpc	r31, r29
     40e:	d9 f7       	brne	.-10     	; 0x406 <can_check_housekeep+0x32>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
				
			switch(receive_arr[6]) // BIG TYPE
     410:	80 91 55 01 	lds	r24, 0x0155
     414:	82 30       	cpi	r24, 0x02	; 2
     416:	21 f4       	brne	.+8      	; 0x420 <can_check_housekeep+0x4c>
			{
				case MT_COM :
					decode_command(&receive_arr[0]); // SMALL TYPE
     418:	8f e4       	ldi	r24, 0x4F	; 79
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 a4 00 	call	0x148	; 0x148 <decode_command>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
			{
				receive_arr[i] = *(message.pt_data + i);
     420:	ef e4       	ldi	r30, 0x4F	; 79
     422:	f1 e0       	ldi	r31, 0x01	; 1
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     424:	11 92       	st	Z+, r1
				case MT_TC :
					break;
				default:
				break;
			}
			for (i = 0; i < 8; i ++)
     426:	ec 17       	cp	r30, r28
     428:	fd 07       	cpc	r31, r29
     42a:	e1 f7       	brne	.-8      	; 0x424 <can_check_housekeep+0x50>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
			
		clean_up_msg(mb);					// Clean up the message object.
     42c:	85 e0       	ldi	r24, 0x05	; 5
     42e:	0e 94 3f 01 	call	0x27e	; 0x27e <clean_up_msg>
	}	
	return;
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     44e:	91 2c       	mov	r9, r1
	{
		set_up_msg(mb);		// Sets up the message object.
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
     450:	03 e3       	ldi	r16, 0x33	; 51
     452:	11 e0       	ldi	r17, 0x01	; 1
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     454:	0f 2e       	mov	r0, r31
     456:	f1 e3       	ldi	r31, 0x31	; 49
     458:	af 2e       	mov	r10, r31
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	bf 2e       	mov	r11, r31
     45e:	f0 2d       	mov	r31, r0
     460:	c7 e5       	ldi	r28, 0x57	; 87
     462:	d1 e0       	ldi	r29, 0x01	; 1
     464:	0f 2e       	mov	r0, r31
     466:	ff e4       	ldi	r31, 0x4F	; 79
     468:	ef 2e       	mov	r14, r31
     46a:	f1 e0       	ldi	r31, 0x01	; 1
     46c:	ff 2e       	mov	r15, r31
     46e:	f0 2d       	mov	r31, r0
				}
				
					switch(receive_arr[6]) // BIG TYPE
     470:	0f 2e       	mov	r0, r31
     472:	f5 e5       	ldi	r31, 0x55	; 85
     474:	cf 2e       	mov	r12, r31
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	df 2e       	mov	r13, r31
     47a:	f0 2d       	mov	r31, r0
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
	{
		set_up_msg(mb);		// Sets up the message object.
     47c:	89 2d       	mov	r24, r9
     47e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <set_up_msg>
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     482:	60 91 6e 01 	lds	r22, 0x016E
     486:	8a e2       	ldi	r24, 0x2A	; 42
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 c6 09 	call	0x138c	; 0x138c <can_get_status>
     48e:	81 30       	cpi	r24, 0x01	; 1
     490:	e1 f0       	breq	.+56     	; 0x4ca <can_check_general+0x92>
		{
			if(message.status == MOB_RX_COMPLETED)
     492:	f8 01       	movw	r30, r16
     494:	80 81       	ld	r24, Z
     496:	80 32       	cpi	r24, 0x20	; 32
     498:	a9 f4       	brne	.+42     	; 0x4c4 <can_check_general+0x8c>
     49a:	f5 01       	movw	r30, r10
     49c:	a0 81       	ld	r26, Z
     49e:	b1 81       	ldd	r27, Z+1	; 0x01
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4a0:	f7 01       	movw	r30, r14
     4a2:	8d 91       	ld	r24, X+
     4a4:	81 93       	st	Z+, r24
		
		if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
     4a6:	ec 17       	cp	r30, r28
     4a8:	fd 07       	cpc	r31, r29
     4aa:	d9 f7       	brne	.-10     	; 0x4a2 <can_check_general+0x6a>
				{
					receive_arr[i] = *(message.pt_data + i);
				}
				
					switch(receive_arr[6]) // BIG TYPE
     4ac:	f6 01       	movw	r30, r12
     4ae:	80 81       	ld	r24, Z
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	19 f4       	brne	.+6      	; 0x4ba <can_check_general+0x82>
					{
						case MT_COM :
							decode_command(&receive_arr[0]); // SMALL TYPE
     4b4:	c7 01       	movw	r24, r14
     4b6:	0e 94 a4 00 	call	0x148	; 0x148 <decode_command>
		{
			if(message.status == MOB_RX_COMPLETED)
			{
				for (i = 0; i < 8; i ++)		// Transfer the message to the receive array.
				{
					receive_arr[i] = *(message.pt_data + i);
     4ba:	f7 01       	movw	r30, r14
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
     4bc:	11 92       	st	Z+, r1
						case MT_TC :
							break;
						default:
							break;
					}
				for (i = 0; i < 8; i ++)
     4be:	ec 17       	cp	r30, r28
     4c0:	fd 07       	cpc	r31, r29
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <can_check_general+0x84>
				{
					receive_arr[i] = 0;			// Reset the message array to zero after each message.
				}
			}
			
			clean_up_msg(mb);					// Clean up the message object.
     4c4:	89 2d       	mov	r24, r9
     4c6:	0e 94 3f 01 	call	0x27e	; 0x27e <clean_up_msg>
void can_check_general(void)
{
	uint8_t i = 0;
	uint8_t mb = 0;
	
	for(mb = 0; mb < 4; mb ++)
     4ca:	93 94       	inc	r9
     4cc:	f4 e0       	ldi	r31, 0x04	; 4
     4ce:	9f 12       	cpse	r9, r31
     4d0:	d5 cf       	rjmp	.-86     	; 0x47c <can_check_general+0x44>
			
			clean_up_msg(mb);					// Clean up the message object.
		}
	}
	
	can_check_housekeep();
     4d2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <can_check_housekeep>
	
	return;
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	cf 90       	pop	r12
     4e6:	bf 90       	pop	r11
     4e8:	af 90       	pop	r10
     4ea:	9f 90       	pop	r9
     4ec:	08 95       	ret

000004ee <can_init_mobs>:
/*		This function initializes our can message objects with their ID	*/
/*		and sets whether or not they are in transmit mode or receive.	*/
/************************************************************************/

void can_init_mobs(void)
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
		id_array[5] = SUB0_ID5;
	}
	
	if(SELF_ID == 1)
	{
		id_array[0] = SUB1_ID0;
     4f2:	8a e1       	ldi	r24, 0x1A	; 26
     4f4:	80 93 57 01 	sts	0x0157, r24
		id_array[1] = SUB1_ID1;
     4f8:	8b e1       	ldi	r24, 0x1B	; 27
     4fa:	80 93 58 01 	sts	0x0158, r24
		id_array[2] = SUB1_ID2;
     4fe:	8c e1       	ldi	r24, 0x1C	; 28
     500:	80 93 59 01 	sts	0x0159, r24
		id_array[3] = SUB1_ID3;
     504:	8d e1       	ldi	r24, 0x1D	; 29
     506:	80 93 5a 01 	sts	0x015A, r24
		id_array[4] = SUB1_ID4;
     50a:	8e e1       	ldi	r24, 0x1E	; 30
     50c:	80 93 5b 01 	sts	0x015B, r24
		id_array[5] = SUB1_ID5;
     510:	8f e1       	ldi	r24, 0x1F	; 31
     512:	80 93 5c 01 	sts	0x015C, r24
		id_array[4] = SUB2_ID4;
		id_array[5] = SUB2_ID5;
	}
	
	/* INITIALIZE MOB0 */		 // Data reception mailbox.
	message.pt_data = &data0[0]; // point message object to first element of data buffer
     516:	86 e4       	ldi	r24, 0x46	; 70
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	90 93 32 01 	sts	0x0132, r25
     51e:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     522:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[0];  // populate ID field with ID Tag
     526:	8a e1       	ldi	r24, 0x1A	; 26
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 2d 01 	sts	0x012D, r25
     52e:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;			 // Max length of a CAN message.
     538:	88 e0       	ldi	r24, 0x08	; 8
     53a:	80 93 30 01 	sts	0x0130, r24
	mob_number = 0;
     53e:	10 92 6e 01 	sts	0x016E, r1
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     542:	60 91 6e 01 	lds	r22, 0x016E
     546:	8a e2       	ldi	r24, 0x2A	; 42
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     54e:	81 11       	cpse	r24, r1
     550:	f8 cf       	rjmp	.-16     	; 0x542 <can_init_mobs+0x54>

	/* INITIALIZE MOB1 */		 // Command reception mailbox.
	message.pt_data = &data1[0];
     552:	89 e0       	ldi	r24, 0x09	; 9
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	90 93 32 01 	sts	0x0132, r25
     55a:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;
     55e:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[1];
     562:	80 91 58 01 	lds	r24, 0x0158
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	90 93 2d 01 	sts	0x012D, r25
     56c:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;
     570:	85 e0       	ldi	r24, 0x05	; 5
     572:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;
     576:	88 e0       	ldi	r24, 0x08	; 8
     578:	80 93 30 01 	sts	0x0130, r24
	mob_number = 1;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 6e 01 	sts	0x016E, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     582:	60 91 6e 01 	lds	r22, 0x016E
     586:	8a e2       	ldi	r24, 0x2A	; 42
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     58e:	81 11       	cpse	r24, r1
     590:	f8 cf       	rjmp	.-16     	; 0x582 <can_init_mobs+0x94>
	
	/* INITIALIZE MOB2 */		 // Housekeeping request mailbox.
	message.pt_data = &data2[0];
     592:	81 e1       	ldi	r24, 0x11	; 17
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	90 93 32 01 	sts	0x0132, r25
     59a:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;
     59e:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[2];
     5a2:	80 91 59 01 	lds	r24, 0x0159
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	90 93 2d 01 	sts	0x012D, r25
     5ac:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;
     5b0:	85 e0       	ldi	r24, 0x05	; 5
     5b2:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	80 93 30 01 	sts	0x0130, r24
	mob_number = 2;
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	80 93 6e 01 	sts	0x016E, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     5c2:	60 91 6e 01 	lds	r22, 0x016E
     5c6:	8a e2       	ldi	r24, 0x2A	; 42
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     5ce:	81 11       	cpse	r24, r1
     5d0:	f8 cf       	rjmp	.-16     	; 0x5c2 <can_init_mobs+0xd4>
	
	/* INITIALIZE MOB3 */		 // Time-check mailbox.
	message.pt_data = &data3[0];
     5d2:	8d e5       	ldi	r24, 0x5D	; 93
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	90 93 32 01 	sts	0x0132, r25
     5da:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;
     5de:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[3];
     5e2:	80 91 5a 01 	lds	r24, 0x015A
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	90 93 2d 01 	sts	0x012D, r25
     5ec:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;
     5f0:	85 e0       	ldi	r24, 0x05	; 5
     5f2:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	80 93 30 01 	sts	0x0130, r24
	mob_number = 3;
     5fc:	83 e0       	ldi	r24, 0x03	; 3
     5fe:	80 93 6e 01 	sts	0x016E, r24
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     602:	60 91 6e 01 	lds	r22, 0x016E
     606:	8a e2       	ldi	r24, 0x2A	; 42
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     60e:	81 11       	cpse	r24, r1
     610:	f8 cf       	rjmp	.-16     	; 0x602 <can_init_mobs+0x114>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     612:	86 e6       	ldi	r24, 0x66	; 102
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	90 93 32 01 	sts	0x0132, r25
     61a:	80 93 31 01 	sts	0x0131, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     61e:	10 92 35 01 	sts	0x0135, r1
	message.id.std = id_array[5];		// populate ID field with ID Tag
     622:	80 91 5c 01 	lds	r24, 0x015C
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	90 93 2d 01 	sts	0x012D, r25
     62c:	80 93 2c 01 	sts	0x012C, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     630:	85 e0       	ldi	r24, 0x05	; 5
     632:	80 93 2b 01 	sts	0x012B, r24
	message.dlc = 8;				// Max length of a CAN message.
     636:	98 e0       	ldi	r25, 0x08	; 8
     638:	90 93 30 01 	sts	0x0130, r25
	mob_number = 5;
     63c:	80 93 6e 01 	sts	0x016E, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     640:	60 91 6e 01 	lds	r22, 0x016E
     644:	8a e2       	ldi	r24, 0x2A	; 42
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 9a 03 	call	0x734	; 0x734 <can_cmd>
     64c:	81 11       	cpse	r24, r1
     64e:	f8 cf       	rjmp	.-16     	; 0x640 <can_init_mobs+0x152>
     650:	ef e4       	ldi	r30, 0x4F	; 79
     652:	f1 e0       	ldi	r31, 0x01	; 1
     654:	89 e1       	ldi	r24, 0x19	; 25
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	c0 e7       	ldi	r28, 0x70	; 112
     65a:	d1 e0       	ldi	r29, 0x01	; 1
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	51 e0       	ldi	r21, 0x01	; 1
     660:	27 e5       	ldi	r18, 0x57	; 87
     662:	31 e0       	ldi	r19, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
     664:	11 92       	st	Z+, r1
		send_arr[i] = 0;
     666:	dc 01       	movw	r26, r24
     668:	1d 92       	st	X+, r1
     66a:	cd 01       	movw	r24, r26
		read_arr[i] = 0;
     66c:	19 92       	st	Y+, r1
		write_arr[i] = 0;
     66e:	da 01       	movw	r26, r20
     670:	1d 92       	st	X+, r1
     672:	ad 01       	movw	r20, r26
	message.dlc = 8;				// Max length of a CAN message.
	mob_number = 5;
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
	
	for (i = 0; i < 8; i ++)
     674:	e2 17       	cp	r30, r18
     676:	f3 07       	cpc	r31, r19
     678:	a9 f7       	brne	.-22     	; 0x664 <can_init_mobs+0x176>
		read_arr[i] = 0;
		write_arr[i] = 0;
	}
	
	/* Initialize Global Command Flags to zero */
	send_now = 0;
     67a:	10 92 3e 01 	sts	0x013E, r1
	send_hk = 0;
     67e:	10 92 4e 01 	sts	0x014E, r1
	send_data = 0;
     682:	10 92 65 01 	sts	0x0165, r1
	read_response = 0;
     686:	10 92 45 01 	sts	0x0145, r1
	write_response = 0;
     68a:	10 92 29 01 	sts	0x0129, r1
	
	return;
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     694:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     696:	ad ee       	ldi	r26, 0xED	; 237
     698:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     69a:	3e ee       	ldi	r19, 0xEE	; 238
     69c:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     69e:	98 2f       	mov	r25, r24
     6a0:	92 95       	swap	r25
     6a2:	90 7f       	andi	r25, 0xF0	; 240
     6a4:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     6a6:	e3 2f       	mov	r30, r19
     6a8:	f2 2f       	mov	r31, r18
     6aa:	11 92       	st	Z+, r1
     6ac:	e8 3f       	cpi	r30, 0xF8	; 248
     6ae:	f1 05       	cpc	r31, r1
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     6b2:	8f 5f       	subi	r24, 0xFF	; 255
     6b4:	86 30       	cpi	r24, 0x06	; 6
     6b6:	99 f7       	brne	.-26     	; 0x69e <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     6b8:	08 95       	ret

000006ba <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     6ba:	80 91 ef 00 	lds	r24, 0x00EF
     6be:	80 7c       	andi	r24, 0xC0	; 192
     6c0:	61 f0       	breq	.+24     	; 0x6da <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     6c2:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     6c6:	98 2f       	mov	r25, r24
     6c8:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     6ca:	28 2f       	mov	r18, r24
     6cc:	20 76       	andi	r18, 0x60	; 96
     6ce:	20 32       	cpi	r18, 0x20	; 32
     6d0:	31 f0       	breq	.+12     	; 0x6de <can_get_mob_status+0x24>
     6d2:	90 34       	cpi	r25, 0x40	; 64
     6d4:	31 f0       	breq	.+12     	; 0x6e2 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     6d6:	8f 71       	andi	r24, 0x1F	; 31
     6d8:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     6da:	8f ef       	ldi	r24, 0xFF	; 255
     6dc:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     6de:	89 2f       	mov	r24, r25
     6e0:	08 95       	ret
     6e2:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     6e4:	08 95       	ret

000006e6 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     6e6:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     6e8:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     6ea:	aa ef       	ldi	r26, 0xFA	; 250
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	9c 91       	ld	r25, X
     6f0:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     6f2:	8f 5f       	subi	r24, 0xFF	; 255
     6f4:	88 30       	cpi	r24, 0x08	; 8
     6f6:	d9 f7       	brne	.-10     	; 0x6ee <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     6f8:	08 95       	ret

000006fa <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	80 93 e2 00 	sts	0x00E2, r24
     706:	8c e0       	ldi	r24, 0x0C	; 12
     708:	80 93 e3 00 	sts	0x00E3, r24
     70c:	87 e3       	ldi	r24, 0x37	; 55
     70e:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	08 95       	ret

00000716 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     716:	0e 94 7d 03 	call	0x6fa	; 0x6fa <can_fixed_baudrate>
     71a:	88 23       	and	r24, r24
     71c:	49 f0       	breq	.+18     	; 0x730 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     71e:	0e 94 4a 03 	call	0x694	; 0x694 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     722:	e8 ed       	ldi	r30, 0xD8	; 216
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	82 60       	ori	r24, 0x02	; 2
     72a:	80 83       	st	Z, r24
    return (1);
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     730:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     732:	08 95       	ret

00000734 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     740:	11 96       	adiw	r26, 0x01	; 1
     742:	8c 91       	ld	r24, X
     744:	11 97       	sbiw	r26, 0x01	; 1
     746:	8c 30       	cpi	r24, 0x0C	; 12
     748:	b1 f4       	brne	.+44     	; 0x776 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     74a:	19 96       	adiw	r26, 0x09	; 9
     74c:	8c 91       	ld	r24, X
     74e:	19 97       	sbiw	r26, 0x09	; 9
     750:	80 36       	cpi	r24, 0x60	; 96
     752:	69 f4       	brne	.+26     	; 0x76e <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     754:	86 2f       	mov	r24, r22
     756:	82 95       	swap	r24
     758:	80 7f       	andi	r24, 0xF0	; 240
     75a:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     75e:	ef ee       	ldi	r30, 0xEF	; 239
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	80 81       	ld	r24, Z
     764:	8f 73       	andi	r24, 0x3F	; 63
     766:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     768:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     76c:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     76e:	19 96       	adiw	r26, 0x09	; 9
     770:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	07 c6       	rjmp	.+3086   	; 0x1384 <__stack+0xa85>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     776:	86 2f       	mov	r24, r22
     778:	82 95       	swap	r24
     77a:	80 7f       	andi	r24, 0xF0	; 240
     77c:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     780:	80 91 ef 00 	lds	r24, 0x00EF
     784:	80 7c       	andi	r24, 0xC0	; 192
     786:	09 f0       	breq	.+2      	; 0x78a <can_cmd+0x56>
     788:	f9 c5       	rjmp	.+3058   	; 0x137c <__stack+0xa7d>
    {
      cmd->status = MOB_PENDING; 
     78a:	80 e6       	ldi	r24, 0x60	; 96
     78c:	19 96       	adiw	r26, 0x09	; 9
     78e:	8c 93       	st	X, r24
     790:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     792:	6c 93       	st	X, r22
      Can_clear_mob();
     794:	ee ee       	ldi	r30, 0xEE	; 238
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	11 92       	st	Z+, r1
     79a:	e8 3f       	cpi	r30, 0xF8	; 248
     79c:	f1 05       	cpc	r31, r1
     79e:	e1 f7       	brne	.-8      	; 0x798 <can_cmd+0x64>
          
      switch (cmd->cmd)
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	4c 91       	ld	r20, X
     7a4:	11 97       	sbiw	r26, 0x01	; 1
     7a6:	50 e0       	ldi	r21, 0x00	; 0
     7a8:	fa 01       	movw	r30, r20
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	eb 30       	cpi	r30, 0x0B	; 11
     7ae:	f1 05       	cpc	r31, r1
     7b0:	08 f0       	brcs	.+2      	; 0x7b4 <can_cmd+0x80>
     7b2:	e0 c5       	rjmp	.+3008   	; 0x1374 <__stack+0xa75>
     7b4:	e2 5c       	subi	r30, 0xC2	; 194
     7b6:	ff 4f       	sbci	r31, 0xFF	; 255
     7b8:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     7bc:	16 96       	adiw	r26, 0x06	; 6
     7be:	8c 91       	ld	r24, X
     7c0:	16 97       	sbiw	r26, 0x06	; 6
     7c2:	81 11       	cpse	r24, r1
     7c4:	b7 c4       	rjmp	.+2414   	; 0x1134 <__stack+0x835>
     7c6:	c8 c4       	rjmp	.+2448   	; 0x1158 <__stack+0x859>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7c8:	1b 96       	adiw	r26, 0x0b	; 11
     7ca:	8c 91       	ld	r24, X
     7cc:	1b 97       	sbiw	r26, 0x0b	; 11
     7ce:	88 23       	and	r24, r24
     7d0:	d9 f1       	breq	.+118    	; 0x848 <can_cmd+0x114>
     7d2:	14 96       	adiw	r26, 0x04	; 4
     7d4:	9c 91       	ld	r25, X
     7d6:	14 97       	sbiw	r26, 0x04	; 4
     7d8:	92 95       	swap	r25
     7da:	96 95       	lsr	r25
     7dc:	97 70       	andi	r25, 0x07	; 7
     7de:	15 96       	adiw	r26, 0x05	; 5
     7e0:	8c 91       	ld	r24, X
     7e2:	15 97       	sbiw	r26, 0x05	; 5
     7e4:	88 0f       	add	r24, r24
     7e6:	88 0f       	add	r24, r24
     7e8:	88 0f       	add	r24, r24
     7ea:	89 0f       	add	r24, r25
     7ec:	80 93 f3 00 	sts	0x00F3, r24
     7f0:	13 96       	adiw	r26, 0x03	; 3
     7f2:	9c 91       	ld	r25, X
     7f4:	13 97       	sbiw	r26, 0x03	; 3
     7f6:	92 95       	swap	r25
     7f8:	96 95       	lsr	r25
     7fa:	97 70       	andi	r25, 0x07	; 7
     7fc:	14 96       	adiw	r26, 0x04	; 4
     7fe:	8c 91       	ld	r24, X
     800:	14 97       	sbiw	r26, 0x04	; 4
     802:	88 0f       	add	r24, r24
     804:	88 0f       	add	r24, r24
     806:	88 0f       	add	r24, r24
     808:	89 0f       	add	r24, r25
     80a:	80 93 f2 00 	sts	0x00F2, r24
     80e:	12 96       	adiw	r26, 0x02	; 2
     810:	9c 91       	ld	r25, X
     812:	12 97       	sbiw	r26, 0x02	; 2
     814:	92 95       	swap	r25
     816:	96 95       	lsr	r25
     818:	97 70       	andi	r25, 0x07	; 7
     81a:	13 96       	adiw	r26, 0x03	; 3
     81c:	8c 91       	ld	r24, X
     81e:	13 97       	sbiw	r26, 0x03	; 3
     820:	88 0f       	add	r24, r24
     822:	88 0f       	add	r24, r24
     824:	88 0f       	add	r24, r24
     826:	89 0f       	add	r24, r25
     828:	80 93 f1 00 	sts	0x00F1, r24
     82c:	12 96       	adiw	r26, 0x02	; 2
     82e:	8c 91       	ld	r24, X
     830:	12 97       	sbiw	r26, 0x02	; 2
     832:	88 0f       	add	r24, r24
     834:	88 0f       	add	r24, r24
     836:	88 0f       	add	r24, r24
     838:	80 93 f0 00 	sts	0x00F0, r24
     83c:	ef ee       	ldi	r30, 0xEF	; 239
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	80 61       	ori	r24, 0x10	; 16
     844:	80 83       	st	Z, r24
     846:	1c c0       	rjmp	.+56     	; 0x880 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     848:	12 96       	adiw	r26, 0x02	; 2
     84a:	8c 91       	ld	r24, X
     84c:	12 97       	sbiw	r26, 0x02	; 2
     84e:	86 95       	lsr	r24
     850:	86 95       	lsr	r24
     852:	86 95       	lsr	r24
     854:	13 96       	adiw	r26, 0x03	; 3
     856:	9c 91       	ld	r25, X
     858:	13 97       	sbiw	r26, 0x03	; 3
     85a:	20 e2       	ldi	r18, 0x20	; 32
     85c:	92 9f       	mul	r25, r18
     85e:	80 0d       	add	r24, r0
     860:	11 24       	eor	r1, r1
     862:	80 93 f3 00 	sts	0x00F3, r24
     866:	12 96       	adiw	r26, 0x02	; 2
     868:	8c 91       	ld	r24, X
     86a:	12 97       	sbiw	r26, 0x02	; 2
     86c:	82 95       	swap	r24
     86e:	88 0f       	add	r24, r24
     870:	80 7e       	andi	r24, 0xE0	; 224
     872:	80 93 f2 00 	sts	0x00F2, r24
     876:	ef ee       	ldi	r30, 0xEF	; 239
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	8f 7e       	andi	r24, 0xEF	; 239
     87e:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     880:	16 96       	adiw	r26, 0x06	; 6
     882:	8c 91       	ld	r24, X
     884:	16 97       	sbiw	r26, 0x06	; 6
     886:	88 23       	and	r24, r24
     888:	91 f0       	breq	.+36     	; 0x8ae <can_cmd+0x17a>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	8a ef       	ldi	r24, 0xFA	; 250
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	17 96       	adiw	r26, 0x07	; 7
     892:	ed 91       	ld	r30, X+
     894:	fc 91       	ld	r31, X
     896:	18 97       	sbiw	r26, 0x08	; 8
     898:	e2 0f       	add	r30, r18
     89a:	f1 1d       	adc	r31, r1
     89c:	30 81       	ld	r19, Z
     89e:	fc 01       	movw	r30, r24
     8a0:	30 83       	st	Z, r19
     8a2:	2f 5f       	subi	r18, 0xFF	; 255
     8a4:	16 96       	adiw	r26, 0x06	; 6
     8a6:	3c 91       	ld	r19, X
     8a8:	16 97       	sbiw	r26, 0x06	; 6
     8aa:	23 17       	cp	r18, r19
     8ac:	88 f3       	brcs	.-30     	; 0x890 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     8ae:	1a 96       	adiw	r26, 0x0a	; 10
     8b0:	8c 91       	ld	r24, X
     8b2:	1a 97       	sbiw	r26, 0x0a	; 10
     8b4:	88 23       	and	r24, r24
     8b6:	31 f0       	breq	.+12     	; 0x8c4 <can_cmd+0x190>
     8b8:	e0 ef       	ldi	r30, 0xF0	; 240
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	84 60       	ori	r24, 0x04	; 4
     8c0:	80 83       	st	Z, r24
     8c2:	05 c0       	rjmp	.+10     	; 0x8ce <can_cmd+0x19a>
            else Can_clear_rtr();    
     8c4:	e0 ef       	ldi	r30, 0xF0	; 240
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	8b 7f       	andi	r24, 0xFB	; 251
     8cc:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     8ce:	ef ee       	ldi	r30, 0xEF	; 239
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	90 81       	ld	r25, Z
     8d4:	16 96       	adiw	r26, 0x06	; 6
     8d6:	8c 91       	ld	r24, X
     8d8:	89 2b       	or	r24, r25
     8da:	80 83       	st	Z, r24
          Can_config_tx();
     8dc:	80 81       	ld	r24, Z
     8de:	8f 73       	andi	r24, 0x3F	; 63
     8e0:	80 83       	st	Z, r24
     8e2:	80 81       	ld	r24, Z
     8e4:	80 64       	ori	r24, 0x40	; 64
     8e6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     8ea:	4c c5       	rjmp	.+2712   	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8ec:	1b 96       	adiw	r26, 0x0b	; 11
     8ee:	8c 91       	ld	r24, X
     8f0:	1b 97       	sbiw	r26, 0x0b	; 11
     8f2:	88 23       	and	r24, r24
     8f4:	d9 f1       	breq	.+118    	; 0x96c <__stack+0x6d>
     8f6:	14 96       	adiw	r26, 0x04	; 4
     8f8:	9c 91       	ld	r25, X
     8fa:	14 97       	sbiw	r26, 0x04	; 4
     8fc:	92 95       	swap	r25
     8fe:	96 95       	lsr	r25
     900:	97 70       	andi	r25, 0x07	; 7
     902:	15 96       	adiw	r26, 0x05	; 5
     904:	8c 91       	ld	r24, X
     906:	15 97       	sbiw	r26, 0x05	; 5
     908:	88 0f       	add	r24, r24
     90a:	88 0f       	add	r24, r24
     90c:	88 0f       	add	r24, r24
     90e:	89 0f       	add	r24, r25
     910:	80 93 f3 00 	sts	0x00F3, r24
     914:	13 96       	adiw	r26, 0x03	; 3
     916:	9c 91       	ld	r25, X
     918:	13 97       	sbiw	r26, 0x03	; 3
     91a:	92 95       	swap	r25
     91c:	96 95       	lsr	r25
     91e:	97 70       	andi	r25, 0x07	; 7
     920:	14 96       	adiw	r26, 0x04	; 4
     922:	8c 91       	ld	r24, X
     924:	14 97       	sbiw	r26, 0x04	; 4
     926:	88 0f       	add	r24, r24
     928:	88 0f       	add	r24, r24
     92a:	88 0f       	add	r24, r24
     92c:	89 0f       	add	r24, r25
     92e:	80 93 f2 00 	sts	0x00F2, r24
     932:	12 96       	adiw	r26, 0x02	; 2
     934:	9c 91       	ld	r25, X
     936:	12 97       	sbiw	r26, 0x02	; 2
     938:	92 95       	swap	r25
     93a:	96 95       	lsr	r25
     93c:	97 70       	andi	r25, 0x07	; 7
     93e:	13 96       	adiw	r26, 0x03	; 3
     940:	8c 91       	ld	r24, X
     942:	13 97       	sbiw	r26, 0x03	; 3
     944:	88 0f       	add	r24, r24
     946:	88 0f       	add	r24, r24
     948:	88 0f       	add	r24, r24
     94a:	89 0f       	add	r24, r25
     94c:	80 93 f1 00 	sts	0x00F1, r24
     950:	12 96       	adiw	r26, 0x02	; 2
     952:	8c 91       	ld	r24, X
     954:	12 97       	sbiw	r26, 0x02	; 2
     956:	88 0f       	add	r24, r24
     958:	88 0f       	add	r24, r24
     95a:	88 0f       	add	r24, r24
     95c:	80 93 f0 00 	sts	0x00F0, r24
     960:	ef ee       	ldi	r30, 0xEF	; 239
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	80 61       	ori	r24, 0x10	; 16
     968:	80 83       	st	Z, r24
     96a:	1c c0       	rjmp	.+56     	; 0x9a4 <__stack+0xa5>
          else              { Can_set_std_id(cmd->id.std);}
     96c:	12 96       	adiw	r26, 0x02	; 2
     96e:	8c 91       	ld	r24, X
     970:	12 97       	sbiw	r26, 0x02	; 2
     972:	86 95       	lsr	r24
     974:	86 95       	lsr	r24
     976:	86 95       	lsr	r24
     978:	13 96       	adiw	r26, 0x03	; 3
     97a:	9c 91       	ld	r25, X
     97c:	13 97       	sbiw	r26, 0x03	; 3
     97e:	f0 e2       	ldi	r31, 0x20	; 32
     980:	9f 9f       	mul	r25, r31
     982:	80 0d       	add	r24, r0
     984:	11 24       	eor	r1, r1
     986:	80 93 f3 00 	sts	0x00F3, r24
     98a:	12 96       	adiw	r26, 0x02	; 2
     98c:	8c 91       	ld	r24, X
     98e:	12 97       	sbiw	r26, 0x02	; 2
     990:	82 95       	swap	r24
     992:	88 0f       	add	r24, r24
     994:	80 7e       	andi	r24, 0xE0	; 224
     996:	80 93 f2 00 	sts	0x00F2, r24
     99a:	ef ee       	ldi	r30, 0xEF	; 239
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	8f 7e       	andi	r24, 0xEF	; 239
     9a2:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     9a4:	16 96       	adiw	r26, 0x06	; 6
     9a6:	8c 91       	ld	r24, X
     9a8:	16 97       	sbiw	r26, 0x06	; 6
     9aa:	88 23       	and	r24, r24
     9ac:	91 f0       	breq	.+36     	; 0x9d2 <__stack+0xd3>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	8a ef       	ldi	r24, 0xFA	; 250
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	17 96       	adiw	r26, 0x07	; 7
     9b6:	ed 91       	ld	r30, X+
     9b8:	fc 91       	ld	r31, X
     9ba:	18 97       	sbiw	r26, 0x08	; 8
     9bc:	e2 0f       	add	r30, r18
     9be:	f1 1d       	adc	r31, r1
     9c0:	30 81       	ld	r19, Z
     9c2:	fc 01       	movw	r30, r24
     9c4:	30 83       	st	Z, r19
     9c6:	2f 5f       	subi	r18, 0xFF	; 255
     9c8:	16 96       	adiw	r26, 0x06	; 6
     9ca:	3c 91       	ld	r19, X
     9cc:	16 97       	sbiw	r26, 0x06	; 6
     9ce:	23 17       	cp	r18, r19
     9d0:	88 f3       	brcs	.-30     	; 0x9b4 <__stack+0xb5>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     9d2:	1a 96       	adiw	r26, 0x0a	; 10
     9d4:	1c 92       	st	X, r1
     9d6:	1a 97       	sbiw	r26, 0x0a	; 10
     9d8:	e0 ef       	ldi	r30, 0xF0	; 240
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	8b 7f       	andi	r24, 0xFB	; 251
     9e0:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     9e2:	ef ee       	ldi	r30, 0xEF	; 239
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	90 81       	ld	r25, Z
     9e8:	16 96       	adiw	r26, 0x06	; 6
     9ea:	8c 91       	ld	r24, X
     9ec:	89 2b       	or	r24, r25
     9ee:	80 83       	st	Z, r24
          Can_config_tx();
     9f0:	80 81       	ld	r24, Z
     9f2:	8f 73       	andi	r24, 0x3F	; 63
     9f4:	80 83       	st	Z, r24
     9f6:	80 81       	ld	r24, Z
     9f8:	80 64       	ori	r24, 0x40	; 64
     9fa:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     9fe:	c2 c4       	rjmp	.+2436   	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     a00:	1b 96       	adiw	r26, 0x0b	; 11
     a02:	8c 91       	ld	r24, X
     a04:	1b 97       	sbiw	r26, 0x0b	; 11
     a06:	88 23       	and	r24, r24
     a08:	d9 f1       	breq	.+118    	; 0xa80 <__stack+0x181>
     a0a:	14 96       	adiw	r26, 0x04	; 4
     a0c:	9c 91       	ld	r25, X
     a0e:	14 97       	sbiw	r26, 0x04	; 4
     a10:	92 95       	swap	r25
     a12:	96 95       	lsr	r25
     a14:	97 70       	andi	r25, 0x07	; 7
     a16:	15 96       	adiw	r26, 0x05	; 5
     a18:	8c 91       	ld	r24, X
     a1a:	15 97       	sbiw	r26, 0x05	; 5
     a1c:	88 0f       	add	r24, r24
     a1e:	88 0f       	add	r24, r24
     a20:	88 0f       	add	r24, r24
     a22:	89 0f       	add	r24, r25
     a24:	80 93 f3 00 	sts	0x00F3, r24
     a28:	13 96       	adiw	r26, 0x03	; 3
     a2a:	9c 91       	ld	r25, X
     a2c:	13 97       	sbiw	r26, 0x03	; 3
     a2e:	92 95       	swap	r25
     a30:	96 95       	lsr	r25
     a32:	97 70       	andi	r25, 0x07	; 7
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	8c 91       	ld	r24, X
     a38:	14 97       	sbiw	r26, 0x04	; 4
     a3a:	88 0f       	add	r24, r24
     a3c:	88 0f       	add	r24, r24
     a3e:	88 0f       	add	r24, r24
     a40:	89 0f       	add	r24, r25
     a42:	80 93 f2 00 	sts	0x00F2, r24
     a46:	12 96       	adiw	r26, 0x02	; 2
     a48:	9c 91       	ld	r25, X
     a4a:	12 97       	sbiw	r26, 0x02	; 2
     a4c:	92 95       	swap	r25
     a4e:	96 95       	lsr	r25
     a50:	97 70       	andi	r25, 0x07	; 7
     a52:	13 96       	adiw	r26, 0x03	; 3
     a54:	8c 91       	ld	r24, X
     a56:	13 97       	sbiw	r26, 0x03	; 3
     a58:	88 0f       	add	r24, r24
     a5a:	88 0f       	add	r24, r24
     a5c:	88 0f       	add	r24, r24
     a5e:	89 0f       	add	r24, r25
     a60:	80 93 f1 00 	sts	0x00F1, r24
     a64:	12 96       	adiw	r26, 0x02	; 2
     a66:	8c 91       	ld	r24, X
     a68:	12 97       	sbiw	r26, 0x02	; 2
     a6a:	88 0f       	add	r24, r24
     a6c:	88 0f       	add	r24, r24
     a6e:	88 0f       	add	r24, r24
     a70:	80 93 f0 00 	sts	0x00F0, r24
     a74:	ef ee       	ldi	r30, 0xEF	; 239
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	80 61       	ori	r24, 0x10	; 16
     a7c:	80 83       	st	Z, r24
     a7e:	1c c0       	rjmp	.+56     	; 0xab8 <__stack+0x1b9>
          else              { Can_set_std_id(cmd->id.std);}
     a80:	12 96       	adiw	r26, 0x02	; 2
     a82:	8c 91       	ld	r24, X
     a84:	12 97       	sbiw	r26, 0x02	; 2
     a86:	86 95       	lsr	r24
     a88:	86 95       	lsr	r24
     a8a:	86 95       	lsr	r24
     a8c:	13 96       	adiw	r26, 0x03	; 3
     a8e:	9c 91       	ld	r25, X
     a90:	13 97       	sbiw	r26, 0x03	; 3
     a92:	f0 e2       	ldi	r31, 0x20	; 32
     a94:	9f 9f       	mul	r25, r31
     a96:	80 0d       	add	r24, r0
     a98:	11 24       	eor	r1, r1
     a9a:	80 93 f3 00 	sts	0x00F3, r24
     a9e:	12 96       	adiw	r26, 0x02	; 2
     aa0:	8c 91       	ld	r24, X
     aa2:	12 97       	sbiw	r26, 0x02	; 2
     aa4:	82 95       	swap	r24
     aa6:	88 0f       	add	r24, r24
     aa8:	80 7e       	andi	r24, 0xE0	; 224
     aaa:	80 93 f2 00 	sts	0x00F2, r24
     aae:	ef ee       	ldi	r30, 0xEF	; 239
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	8f 7e       	andi	r24, 0xEF	; 239
     ab6:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	1a 96       	adiw	r26, 0x0a	; 10
     abc:	8c 93       	st	X, r24
     abe:	1a 97       	sbiw	r26, 0x0a	; 10
     ac0:	e0 ef       	ldi	r30, 0xF0	; 240
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	84 60       	ori	r24, 0x04	; 4
     ac8:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     aca:	ef ee       	ldi	r30, 0xEF	; 239
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	90 81       	ld	r25, Z
     ad0:	16 96       	adiw	r26, 0x06	; 6
     ad2:	8c 91       	ld	r24, X
     ad4:	89 2b       	or	r24, r25
     ad6:	80 83       	st	Z, r24
          Can_config_tx();
     ad8:	80 81       	ld	r24, Z
     ada:	8f 73       	andi	r24, 0x3F	; 63
     adc:	80 83       	st	Z, r24
     ade:	80 81       	ld	r24, Z
     ae0:	80 64       	ori	r24, 0x40	; 64
     ae2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     ae4:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     ae6:	4e c4       	rjmp	.+2204   	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     ae8:	19 82       	std	Y+1, r1	; 0x01
     aea:	9b 81       	ldd	r25, Y+3	; 0x03
     aec:	92 95       	swap	r25
     aee:	96 95       	lsr	r25
     af0:	97 70       	andi	r25, 0x07	; 7
     af2:	8c 81       	ldd	r24, Y+4	; 0x04
     af4:	88 0f       	add	r24, r24
     af6:	88 0f       	add	r24, r24
     af8:	88 0f       	add	r24, r24
     afa:	89 0f       	add	r24, r25
     afc:	80 93 f7 00 	sts	0x00F7, r24
     b00:	9a 81       	ldd	r25, Y+2	; 0x02
     b02:	92 95       	swap	r25
     b04:	96 95       	lsr	r25
     b06:	97 70       	andi	r25, 0x07	; 7
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	88 0f       	add	r24, r24
     b0c:	88 0f       	add	r24, r24
     b0e:	88 0f       	add	r24, r24
     b10:	89 0f       	add	r24, r25
     b12:	80 93 f6 00 	sts	0x00F6, r24
     b16:	99 81       	ldd	r25, Y+1	; 0x01
     b18:	92 95       	swap	r25
     b1a:	96 95       	lsr	r25
     b1c:	97 70       	andi	r25, 0x07	; 7
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	88 0f       	add	r24, r24
     b22:	88 0f       	add	r24, r24
     b24:	88 0f       	add	r24, r24
     b26:	89 0f       	add	r24, r25
     b28:	80 93 f5 00 	sts	0x00F5, r24
     b2c:	29 81       	ldd	r18, Y+1	; 0x01
     b2e:	22 0f       	add	r18, r18
     b30:	22 0f       	add	r18, r18
     b32:	22 0f       	add	r18, r18
     b34:	84 ef       	ldi	r24, 0xF4	; 244
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b3c:	ef ee       	ldi	r30, 0xEF	; 239
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	30 81       	ld	r19, Z
     b42:	16 96       	adiw	r26, 0x06	; 6
     b44:	2c 91       	ld	r18, X
     b46:	23 2b       	or	r18, r19
     b48:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b4a:	dc 01       	movw	r26, r24
     b4c:	2c 91       	ld	r18, X
     b4e:	2b 7f       	andi	r18, 0xFB	; 251
     b50:	2c 93       	st	X, r18
          Can_clear_idemsk();
     b52:	2c 91       	ld	r18, X
     b54:	2e 7f       	andi	r18, 0xFE	; 254
     b56:	2c 93       	st	X, r18
          Can_config_rx();       
     b58:	80 81       	ld	r24, Z
     b5a:	8f 73       	andi	r24, 0x3F	; 63
     b5c:	80 83       	st	Z, r24
     b5e:	80 81       	ld	r24, Z
     b60:	80 68       	ori	r24, 0x80	; 128
     b62:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b64:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     b66:	0e c4       	rjmp	.+2076   	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	82 95       	swap	r24
     b70:	88 0f       	add	r24, r24
     b72:	80 7e       	andi	r24, 0xE0	; 224
     b74:	81 5e       	subi	r24, 0xE1	; 225
     b76:	27 ef       	ldi	r18, 0xF7	; 247
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	f9 01       	movw	r30, r18
     b7c:	80 83       	st	Z, r24
     b7e:	49 81       	ldd	r20, Y+1	; 0x01
     b80:	42 95       	swap	r20
     b82:	44 0f       	add	r20, r20
     b84:	40 7e       	andi	r20, 0xE0	; 224
     b86:	86 ef       	ldi	r24, 0xF6	; 246
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     b8e:	12 96       	adiw	r26, 0x02	; 2
     b90:	4c 91       	ld	r20, X
     b92:	12 97       	sbiw	r26, 0x02	; 2
     b94:	46 95       	lsr	r20
     b96:	46 95       	lsr	r20
     b98:	46 95       	lsr	r20
     b9a:	13 96       	adiw	r26, 0x03	; 3
     b9c:	5c 91       	ld	r21, X
     b9e:	13 97       	sbiw	r26, 0x03	; 3
     ba0:	f0 e2       	ldi	r31, 0x20	; 32
     ba2:	5f 9f       	mul	r21, r31
     ba4:	40 0d       	add	r20, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	40 93 f3 00 	sts	0x00F3, r20
     bac:	12 96       	adiw	r26, 0x02	; 2
     bae:	4c 91       	ld	r20, X
     bb0:	12 97       	sbiw	r26, 0x02	; 2
     bb2:	42 95       	swap	r20
     bb4:	44 0f       	add	r20, r20
     bb6:	40 7e       	andi	r20, 0xE0	; 224
     bb8:	40 93 f2 00 	sts	0x00F2, r20
     bbc:	6f ee       	ldi	r22, 0xEF	; 239
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	fb 01       	movw	r30, r22
     bc2:	40 81       	ld	r20, Z
     bc4:	4f 7e       	andi	r20, 0xEF	; 239
     bc6:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     bc8:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     bca:	5b 81       	ldd	r21, Y+3	; 0x03
     bcc:	52 95       	swap	r21
     bce:	56 95       	lsr	r21
     bd0:	57 70       	andi	r21, 0x07	; 7
     bd2:	4c 81       	ldd	r20, Y+4	; 0x04
     bd4:	44 0f       	add	r20, r20
     bd6:	44 0f       	add	r20, r20
     bd8:	44 0f       	add	r20, r20
     bda:	45 0f       	add	r20, r21
     bdc:	f9 01       	movw	r30, r18
     bde:	40 83       	st	Z, r20
     be0:	3a 81       	ldd	r19, Y+2	; 0x02
     be2:	32 95       	swap	r19
     be4:	36 95       	lsr	r19
     be6:	37 70       	andi	r19, 0x07	; 7
     be8:	2b 81       	ldd	r18, Y+3	; 0x03
     bea:	22 0f       	add	r18, r18
     bec:	22 0f       	add	r18, r18
     bee:	22 0f       	add	r18, r18
     bf0:	23 0f       	add	r18, r19
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
     bf6:	99 81       	ldd	r25, Y+1	; 0x01
     bf8:	92 95       	swap	r25
     bfa:	96 95       	lsr	r25
     bfc:	97 70       	andi	r25, 0x07	; 7
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	88 0f       	add	r24, r24
     c02:	88 0f       	add	r24, r24
     c04:	88 0f       	add	r24, r24
     c06:	89 0f       	add	r24, r25
     c08:	80 93 f5 00 	sts	0x00F5, r24
     c0c:	29 81       	ldd	r18, Y+1	; 0x01
     c0e:	22 0f       	add	r18, r18
     c10:	22 0f       	add	r18, r18
     c12:	22 0f       	add	r18, r18
     c14:	84 ef       	ldi	r24, 0xF4	; 244
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     c1c:	fb 01       	movw	r30, r22
     c1e:	30 81       	ld	r19, Z
     c20:	16 96       	adiw	r26, 0x06	; 6
     c22:	2c 91       	ld	r18, X
     c24:	16 97       	sbiw	r26, 0x06	; 6
     c26:	23 2b       	or	r18, r19
     c28:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     c2a:	1a 96       	adiw	r26, 0x0a	; 10
     c2c:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     c2e:	dc 01       	movw	r26, r24
     c30:	2c 91       	ld	r18, X
     c32:	24 60       	ori	r18, 0x04	; 4
     c34:	2c 93       	st	X, r18
		  Can_clear_rtr();
     c36:	a0 ef       	ldi	r26, 0xF0	; 240
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	2c 91       	ld	r18, X
     c3c:	2b 7f       	andi	r18, 0xFB	; 251
     c3e:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     c40:	20 81       	ld	r18, Z
     c42:	2f 7e       	andi	r18, 0xEF	; 239
     c44:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c46:	fc 01       	movw	r30, r24
     c48:	20 81       	ld	r18, Z
     c4a:	2e 7f       	andi	r18, 0xFE	; 254
     c4c:	20 83       	st	Z, r18
          Can_config_rx();       
     c4e:	db 01       	movw	r26, r22
     c50:	8c 91       	ld	r24, X
     c52:	8f 73       	andi	r24, 0x3F	; 63
     c54:	8c 93       	st	X, r24
     c56:	8c 91       	ld	r24, X
     c58:	80 68       	ori	r24, 0x80	; 128
     c5a:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c5c:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     c5e:	92 c3       	rjmp	.+1828   	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	82 95       	swap	r24
     c68:	88 0f       	add	r24, r24
     c6a:	80 7e       	andi	r24, 0xE0	; 224
     c6c:	81 5e       	subi	r24, 0xE1	; 225
     c6e:	27 ef       	ldi	r18, 0xF7	; 247
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	f9 01       	movw	r30, r18
     c74:	80 83       	st	Z, r24
     c76:	49 81       	ldd	r20, Y+1	; 0x01
     c78:	42 95       	swap	r20
     c7a:	44 0f       	add	r20, r20
     c7c:	40 7e       	andi	r20, 0xE0	; 224
     c7e:	86 ef       	ldi	r24, 0xF6	; 246
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     c86:	12 96       	adiw	r26, 0x02	; 2
     c88:	4c 91       	ld	r20, X
     c8a:	12 97       	sbiw	r26, 0x02	; 2
     c8c:	46 95       	lsr	r20
     c8e:	46 95       	lsr	r20
     c90:	46 95       	lsr	r20
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	5c 91       	ld	r21, X
     c96:	13 97       	sbiw	r26, 0x03	; 3
     c98:	f0 e2       	ldi	r31, 0x20	; 32
     c9a:	5f 9f       	mul	r21, r31
     c9c:	40 0d       	add	r20, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	40 93 f3 00 	sts	0x00F3, r20
     ca4:	12 96       	adiw	r26, 0x02	; 2
     ca6:	4c 91       	ld	r20, X
     ca8:	12 97       	sbiw	r26, 0x02	; 2
     caa:	42 95       	swap	r20
     cac:	44 0f       	add	r20, r20
     cae:	40 7e       	andi	r20, 0xE0	; 224
     cb0:	40 93 f2 00 	sts	0x00F2, r20
     cb4:	6f ee       	ldi	r22, 0xEF	; 239
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	fb 01       	movw	r30, r22
     cba:	40 81       	ld	r20, Z
     cbc:	4f 7e       	andi	r20, 0xEF	; 239
     cbe:	40 83       	st	Z, r20
		
          u8_temp=0; 
     cc0:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     cc2:	5b 81       	ldd	r21, Y+3	; 0x03
     cc4:	52 95       	swap	r21
     cc6:	56 95       	lsr	r21
     cc8:	57 70       	andi	r21, 0x07	; 7
     cca:	4c 81       	ldd	r20, Y+4	; 0x04
     ccc:	44 0f       	add	r20, r20
     cce:	44 0f       	add	r20, r20
     cd0:	44 0f       	add	r20, r20
     cd2:	45 0f       	add	r20, r21
     cd4:	f9 01       	movw	r30, r18
     cd6:	40 83       	st	Z, r20
     cd8:	3a 81       	ldd	r19, Y+2	; 0x02
     cda:	32 95       	swap	r19
     cdc:	36 95       	lsr	r19
     cde:	37 70       	andi	r19, 0x07	; 7
     ce0:	2b 81       	ldd	r18, Y+3	; 0x03
     ce2:	22 0f       	add	r18, r18
     ce4:	22 0f       	add	r18, r18
     ce6:	22 0f       	add	r18, r18
     ce8:	23 0f       	add	r18, r19
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18
     cee:	99 81       	ldd	r25, Y+1	; 0x01
     cf0:	92 95       	swap	r25
     cf2:	96 95       	lsr	r25
     cf4:	97 70       	andi	r25, 0x07	; 7
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	88 0f       	add	r24, r24
     cfa:	88 0f       	add	r24, r24
     cfc:	88 0f       	add	r24, r24
     cfe:	89 0f       	add	r24, r25
     d00:	80 93 f5 00 	sts	0x00F5, r24
     d04:	29 81       	ldd	r18, Y+1	; 0x01
     d06:	22 0f       	add	r18, r18
     d08:	22 0f       	add	r18, r18
     d0a:	22 0f       	add	r18, r18
     d0c:	84 ef       	ldi	r24, 0xF4	; 244
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	fc 01       	movw	r30, r24
     d12:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d14:	fb 01       	movw	r30, r22
     d16:	30 81       	ld	r19, Z
     d18:	16 96       	adiw	r26, 0x06	; 6
     d1a:	2c 91       	ld	r18, X
     d1c:	16 97       	sbiw	r26, 0x06	; 6
     d1e:	23 2b       	or	r18, r19
     d20:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	1a 96       	adiw	r26, 0x0a	; 10
     d26:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     d28:	dc 01       	movw	r26, r24
     d2a:	2c 91       	ld	r18, X
     d2c:	24 60       	ori	r18, 0x04	; 4
     d2e:	2c 93       	st	X, r18
		  Can_set_rtr();
     d30:	a0 ef       	ldi	r26, 0xF0	; 240
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	2c 91       	ld	r18, X
     d36:	24 60       	ori	r18, 0x04	; 4
     d38:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     d3a:	20 81       	ld	r18, Z
     d3c:	2f 7d       	andi	r18, 0xDF	; 223
     d3e:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d40:	fc 01       	movw	r30, r24
     d42:	20 81       	ld	r18, Z
     d44:	2e 7f       	andi	r18, 0xFE	; 254
     d46:	20 83       	st	Z, r18
          Can_config_rx();       
     d48:	db 01       	movw	r26, r22
     d4a:	8c 91       	ld	r24, X
     d4c:	8f 73       	andi	r24, 0x3F	; 63
     d4e:	8c 93       	st	X, r24
     d50:	8c 91       	ld	r24, X
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     d56:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     d58:	15 c3       	rjmp	.+1578   	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     d5a:	1b 96       	adiw	r26, 0x0b	; 11
     d5c:	8c 91       	ld	r24, X
     d5e:	1b 97       	sbiw	r26, 0x0b	; 11
     d60:	88 23       	and	r24, r24
     d62:	d9 f1       	breq	.+118    	; 0xdda <__stack+0x4db>
     d64:	14 96       	adiw	r26, 0x04	; 4
     d66:	9c 91       	ld	r25, X
     d68:	14 97       	sbiw	r26, 0x04	; 4
     d6a:	92 95       	swap	r25
     d6c:	96 95       	lsr	r25
     d6e:	97 70       	andi	r25, 0x07	; 7
     d70:	15 96       	adiw	r26, 0x05	; 5
     d72:	8c 91       	ld	r24, X
     d74:	15 97       	sbiw	r26, 0x05	; 5
     d76:	88 0f       	add	r24, r24
     d78:	88 0f       	add	r24, r24
     d7a:	88 0f       	add	r24, r24
     d7c:	89 0f       	add	r24, r25
     d7e:	80 93 f3 00 	sts	0x00F3, r24
     d82:	13 96       	adiw	r26, 0x03	; 3
     d84:	9c 91       	ld	r25, X
     d86:	13 97       	sbiw	r26, 0x03	; 3
     d88:	92 95       	swap	r25
     d8a:	96 95       	lsr	r25
     d8c:	97 70       	andi	r25, 0x07	; 7
     d8e:	14 96       	adiw	r26, 0x04	; 4
     d90:	8c 91       	ld	r24, X
     d92:	14 97       	sbiw	r26, 0x04	; 4
     d94:	88 0f       	add	r24, r24
     d96:	88 0f       	add	r24, r24
     d98:	88 0f       	add	r24, r24
     d9a:	89 0f       	add	r24, r25
     d9c:	80 93 f2 00 	sts	0x00F2, r24
     da0:	12 96       	adiw	r26, 0x02	; 2
     da2:	9c 91       	ld	r25, X
     da4:	12 97       	sbiw	r26, 0x02	; 2
     da6:	92 95       	swap	r25
     da8:	96 95       	lsr	r25
     daa:	97 70       	andi	r25, 0x07	; 7
     dac:	13 96       	adiw	r26, 0x03	; 3
     dae:	8c 91       	ld	r24, X
     db0:	13 97       	sbiw	r26, 0x03	; 3
     db2:	88 0f       	add	r24, r24
     db4:	88 0f       	add	r24, r24
     db6:	88 0f       	add	r24, r24
     db8:	89 0f       	add	r24, r25
     dba:	80 93 f1 00 	sts	0x00F1, r24
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	8c 91       	ld	r24, X
     dc2:	12 97       	sbiw	r26, 0x02	; 2
     dc4:	88 0f       	add	r24, r24
     dc6:	88 0f       	add	r24, r24
     dc8:	88 0f       	add	r24, r24
     dca:	80 93 f0 00 	sts	0x00F0, r24
     dce:	ef ee       	ldi	r30, 0xEF	; 239
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	80 61       	ori	r24, 0x10	; 16
     dd6:	80 83       	st	Z, r24
     dd8:	1c c0       	rjmp	.+56     	; 0xe12 <__stack+0x513>
          else              { Can_set_std_id(cmd->id.std);}
     dda:	12 96       	adiw	r26, 0x02	; 2
     ddc:	8c 91       	ld	r24, X
     dde:	12 97       	sbiw	r26, 0x02	; 2
     de0:	86 95       	lsr	r24
     de2:	86 95       	lsr	r24
     de4:	86 95       	lsr	r24
     de6:	13 96       	adiw	r26, 0x03	; 3
     de8:	9c 91       	ld	r25, X
     dea:	13 97       	sbiw	r26, 0x03	; 3
     dec:	e0 e2       	ldi	r30, 0x20	; 32
     dee:	9e 9f       	mul	r25, r30
     df0:	80 0d       	add	r24, r0
     df2:	11 24       	eor	r1, r1
     df4:	80 93 f3 00 	sts	0x00F3, r24
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	8c 91       	ld	r24, X
     dfc:	12 97       	sbiw	r26, 0x02	; 2
     dfe:	82 95       	swap	r24
     e00:	88 0f       	add	r24, r24
     e02:	80 7e       	andi	r24, 0xE0	; 224
     e04:	80 93 f2 00 	sts	0x00F2, r24
     e08:	ef ee       	ldi	r30, 0xEF	; 239
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	8f 7e       	andi	r24, 0xEF	; 239
     e10:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	89 83       	std	Y+1, r24	; 0x01
     e16:	9b 81       	ldd	r25, Y+3	; 0x03
     e18:	92 95       	swap	r25
     e1a:	96 95       	lsr	r25
     e1c:	97 70       	andi	r25, 0x07	; 7
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	88 0f       	add	r24, r24
     e22:	88 0f       	add	r24, r24
     e24:	88 0f       	add	r24, r24
     e26:	89 0f       	add	r24, r25
     e28:	80 93 f7 00 	sts	0x00F7, r24
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	92 95       	swap	r25
     e30:	96 95       	lsr	r25
     e32:	97 70       	andi	r25, 0x07	; 7
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	88 0f       	add	r24, r24
     e38:	88 0f       	add	r24, r24
     e3a:	88 0f       	add	r24, r24
     e3c:	89 0f       	add	r24, r25
     e3e:	80 93 f6 00 	sts	0x00F6, r24
     e42:	99 81       	ldd	r25, Y+1	; 0x01
     e44:	92 95       	swap	r25
     e46:	96 95       	lsr	r25
     e48:	97 70       	andi	r25, 0x07	; 7
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	88 0f       	add	r24, r24
     e4e:	88 0f       	add	r24, r24
     e50:	88 0f       	add	r24, r24
     e52:	89 0f       	add	r24, r25
     e54:	80 93 f5 00 	sts	0x00F5, r24
     e58:	29 81       	ldd	r18, Y+1	; 0x01
     e5a:	22 0f       	add	r18, r18
     e5c:	22 0f       	add	r18, r18
     e5e:	22 0f       	add	r18, r18
     e60:	84 ef       	ldi	r24, 0xF4	; 244
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     e68:	ef ee       	ldi	r30, 0xEF	; 239
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	30 81       	ld	r19, Z
     e6e:	16 96       	adiw	r26, 0x06	; 6
     e70:	2c 91       	ld	r18, X
     e72:	23 2b       	or	r18, r19
     e74:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     e76:	dc 01       	movw	r26, r24
     e78:	2c 91       	ld	r18, X
     e7a:	2b 7f       	andi	r18, 0xFB	; 251
     e7c:	2c 93       	st	X, r18
          Can_set_idemsk();
     e7e:	2c 91       	ld	r18, X
     e80:	21 60       	ori	r18, 0x01	; 1
     e82:	2c 93       	st	X, r18
          Can_config_rx();       
     e84:	80 81       	ld	r24, Z
     e86:	8f 73       	andi	r24, 0x3F	; 63
     e88:	80 83       	st	Z, r24
     e8a:	80 81       	ld	r24, Z
     e8c:	80 68       	ori	r24, 0x80	; 128
     e8e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     e90:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     e92:	78 c2       	rjmp	.+1264   	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     e94:	1b 96       	adiw	r26, 0x0b	; 11
     e96:	8c 91       	ld	r24, X
     e98:	1b 97       	sbiw	r26, 0x0b	; 11
     e9a:	88 23       	and	r24, r24
     e9c:	d9 f1       	breq	.+118    	; 0xf14 <__stack+0x615>
     e9e:	14 96       	adiw	r26, 0x04	; 4
     ea0:	9c 91       	ld	r25, X
     ea2:	14 97       	sbiw	r26, 0x04	; 4
     ea4:	92 95       	swap	r25
     ea6:	96 95       	lsr	r25
     ea8:	97 70       	andi	r25, 0x07	; 7
     eaa:	15 96       	adiw	r26, 0x05	; 5
     eac:	8c 91       	ld	r24, X
     eae:	15 97       	sbiw	r26, 0x05	; 5
     eb0:	88 0f       	add	r24, r24
     eb2:	88 0f       	add	r24, r24
     eb4:	88 0f       	add	r24, r24
     eb6:	89 0f       	add	r24, r25
     eb8:	80 93 f3 00 	sts	0x00F3, r24
     ebc:	13 96       	adiw	r26, 0x03	; 3
     ebe:	9c 91       	ld	r25, X
     ec0:	13 97       	sbiw	r26, 0x03	; 3
     ec2:	92 95       	swap	r25
     ec4:	96 95       	lsr	r25
     ec6:	97 70       	andi	r25, 0x07	; 7
     ec8:	14 96       	adiw	r26, 0x04	; 4
     eca:	8c 91       	ld	r24, X
     ecc:	14 97       	sbiw	r26, 0x04	; 4
     ece:	88 0f       	add	r24, r24
     ed0:	88 0f       	add	r24, r24
     ed2:	88 0f       	add	r24, r24
     ed4:	89 0f       	add	r24, r25
     ed6:	80 93 f2 00 	sts	0x00F2, r24
     eda:	12 96       	adiw	r26, 0x02	; 2
     edc:	9c 91       	ld	r25, X
     ede:	12 97       	sbiw	r26, 0x02	; 2
     ee0:	92 95       	swap	r25
     ee2:	96 95       	lsr	r25
     ee4:	97 70       	andi	r25, 0x07	; 7
     ee6:	13 96       	adiw	r26, 0x03	; 3
     ee8:	8c 91       	ld	r24, X
     eea:	13 97       	sbiw	r26, 0x03	; 3
     eec:	88 0f       	add	r24, r24
     eee:	88 0f       	add	r24, r24
     ef0:	88 0f       	add	r24, r24
     ef2:	89 0f       	add	r24, r25
     ef4:	80 93 f1 00 	sts	0x00F1, r24
     ef8:	12 96       	adiw	r26, 0x02	; 2
     efa:	8c 91       	ld	r24, X
     efc:	12 97       	sbiw	r26, 0x02	; 2
     efe:	88 0f       	add	r24, r24
     f00:	88 0f       	add	r24, r24
     f02:	88 0f       	add	r24, r24
     f04:	80 93 f0 00 	sts	0x00F0, r24
     f08:	ef ee       	ldi	r30, 0xEF	; 239
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 61       	ori	r24, 0x10	; 16
     f10:	80 83       	st	Z, r24
     f12:	1c c0       	rjmp	.+56     	; 0xf4c <__stack+0x64d>
          else              { Can_set_std_id(cmd->id.std);}
     f14:	12 96       	adiw	r26, 0x02	; 2
     f16:	8c 91       	ld	r24, X
     f18:	12 97       	sbiw	r26, 0x02	; 2
     f1a:	86 95       	lsr	r24
     f1c:	86 95       	lsr	r24
     f1e:	86 95       	lsr	r24
     f20:	13 96       	adiw	r26, 0x03	; 3
     f22:	9c 91       	ld	r25, X
     f24:	13 97       	sbiw	r26, 0x03	; 3
     f26:	e0 e2       	ldi	r30, 0x20	; 32
     f28:	9e 9f       	mul	r25, r30
     f2a:	80 0d       	add	r24, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	80 93 f3 00 	sts	0x00F3, r24
     f32:	12 96       	adiw	r26, 0x02	; 2
     f34:	8c 91       	ld	r24, X
     f36:	12 97       	sbiw	r26, 0x02	; 2
     f38:	82 95       	swap	r24
     f3a:	88 0f       	add	r24, r24
     f3c:	80 7e       	andi	r24, 0xE0	; 224
     f3e:	80 93 f2 00 	sts	0x00F2, r24
     f42:	ef ee       	ldi	r30, 0xEF	; 239
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	8f 7e       	andi	r24, 0xEF	; 239
     f4a:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	9b 81       	ldd	r25, Y+3	; 0x03
     f52:	92 95       	swap	r25
     f54:	96 95       	lsr	r25
     f56:	97 70       	andi	r25, 0x07	; 7
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	88 0f       	add	r24, r24
     f5c:	88 0f       	add	r24, r24
     f5e:	88 0f       	add	r24, r24
     f60:	89 0f       	add	r24, r25
     f62:	80 93 f7 00 	sts	0x00F7, r24
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	92 95       	swap	r25
     f6a:	96 95       	lsr	r25
     f6c:	97 70       	andi	r25, 0x07	; 7
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	88 0f       	add	r24, r24
     f72:	88 0f       	add	r24, r24
     f74:	88 0f       	add	r24, r24
     f76:	89 0f       	add	r24, r25
     f78:	80 93 f6 00 	sts	0x00F6, r24
     f7c:	99 81       	ldd	r25, Y+1	; 0x01
     f7e:	92 95       	swap	r25
     f80:	96 95       	lsr	r25
     f82:	97 70       	andi	r25, 0x07	; 7
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	88 0f       	add	r24, r24
     f88:	88 0f       	add	r24, r24
     f8a:	88 0f       	add	r24, r24
     f8c:	89 0f       	add	r24, r25
     f8e:	80 93 f5 00 	sts	0x00F5, r24
     f92:	29 81       	ldd	r18, Y+1	; 0x01
     f94:	22 0f       	add	r18, r18
     f96:	22 0f       	add	r18, r18
     f98:	22 0f       	add	r18, r18
     f9a:	84 ef       	ldi	r24, 0xF4	; 244
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     fa2:	ef ee       	ldi	r30, 0xEF	; 239
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	30 81       	ld	r19, Z
     fa8:	16 96       	adiw	r26, 0x06	; 6
     faa:	2c 91       	ld	r18, X
     fac:	16 97       	sbiw	r26, 0x06	; 6
     fae:	23 2b       	or	r18, r19
     fb0:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     fb2:	1a 96       	adiw	r26, 0x0a	; 10
     fb4:	1c 92       	st	X, r1
     fb6:	dc 01       	movw	r26, r24
     fb8:	2c 91       	ld	r18, X
     fba:	24 60       	ori	r18, 0x04	; 4
     fbc:	2c 93       	st	X, r18
     fbe:	a0 ef       	ldi	r26, 0xF0	; 240
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	2c 91       	ld	r18, X
     fc4:	2b 7f       	andi	r18, 0xFB	; 251
     fc6:	2c 93       	st	X, r18
          Can_set_idemsk();
     fc8:	dc 01       	movw	r26, r24
     fca:	2c 91       	ld	r18, X
     fcc:	21 60       	ori	r18, 0x01	; 1
     fce:	2c 93       	st	X, r18
          Can_config_rx();       
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 73       	andi	r24, 0x3F	; 63
     fd4:	80 83       	st	Z, r24
     fd6:	80 81       	ld	r24, Z
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fdc:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     fde:	d2 c1       	rjmp	.+932    	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fe0:	1b 96       	adiw	r26, 0x0b	; 11
     fe2:	8c 91       	ld	r24, X
     fe4:	1b 97       	sbiw	r26, 0x0b	; 11
     fe6:	88 23       	and	r24, r24
     fe8:	d9 f1       	breq	.+118    	; 0x1060 <__stack+0x761>
     fea:	14 96       	adiw	r26, 0x04	; 4
     fec:	9c 91       	ld	r25, X
     fee:	14 97       	sbiw	r26, 0x04	; 4
     ff0:	92 95       	swap	r25
     ff2:	96 95       	lsr	r25
     ff4:	97 70       	andi	r25, 0x07	; 7
     ff6:	15 96       	adiw	r26, 0x05	; 5
     ff8:	8c 91       	ld	r24, X
     ffa:	15 97       	sbiw	r26, 0x05	; 5
     ffc:	88 0f       	add	r24, r24
     ffe:	88 0f       	add	r24, r24
    1000:	88 0f       	add	r24, r24
    1002:	89 0f       	add	r24, r25
    1004:	80 93 f3 00 	sts	0x00F3, r24
    1008:	13 96       	adiw	r26, 0x03	; 3
    100a:	9c 91       	ld	r25, X
    100c:	13 97       	sbiw	r26, 0x03	; 3
    100e:	92 95       	swap	r25
    1010:	96 95       	lsr	r25
    1012:	97 70       	andi	r25, 0x07	; 7
    1014:	14 96       	adiw	r26, 0x04	; 4
    1016:	8c 91       	ld	r24, X
    1018:	14 97       	sbiw	r26, 0x04	; 4
    101a:	88 0f       	add	r24, r24
    101c:	88 0f       	add	r24, r24
    101e:	88 0f       	add	r24, r24
    1020:	89 0f       	add	r24, r25
    1022:	80 93 f2 00 	sts	0x00F2, r24
    1026:	12 96       	adiw	r26, 0x02	; 2
    1028:	9c 91       	ld	r25, X
    102a:	12 97       	sbiw	r26, 0x02	; 2
    102c:	92 95       	swap	r25
    102e:	96 95       	lsr	r25
    1030:	97 70       	andi	r25, 0x07	; 7
    1032:	13 96       	adiw	r26, 0x03	; 3
    1034:	8c 91       	ld	r24, X
    1036:	13 97       	sbiw	r26, 0x03	; 3
    1038:	88 0f       	add	r24, r24
    103a:	88 0f       	add	r24, r24
    103c:	88 0f       	add	r24, r24
    103e:	89 0f       	add	r24, r25
    1040:	80 93 f1 00 	sts	0x00F1, r24
    1044:	12 96       	adiw	r26, 0x02	; 2
    1046:	8c 91       	ld	r24, X
    1048:	12 97       	sbiw	r26, 0x02	; 2
    104a:	88 0f       	add	r24, r24
    104c:	88 0f       	add	r24, r24
    104e:	88 0f       	add	r24, r24
    1050:	80 93 f0 00 	sts	0x00F0, r24
    1054:	ef ee       	ldi	r30, 0xEF	; 239
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 61       	ori	r24, 0x10	; 16
    105c:	80 83       	st	Z, r24
    105e:	1c c0       	rjmp	.+56     	; 0x1098 <__stack+0x799>
          else              { Can_set_std_id(cmd->id.std);}
    1060:	12 96       	adiw	r26, 0x02	; 2
    1062:	8c 91       	ld	r24, X
    1064:	12 97       	sbiw	r26, 0x02	; 2
    1066:	86 95       	lsr	r24
    1068:	86 95       	lsr	r24
    106a:	86 95       	lsr	r24
    106c:	13 96       	adiw	r26, 0x03	; 3
    106e:	9c 91       	ld	r25, X
    1070:	13 97       	sbiw	r26, 0x03	; 3
    1072:	e0 e2       	ldi	r30, 0x20	; 32
    1074:	9e 9f       	mul	r25, r30
    1076:	80 0d       	add	r24, r0
    1078:	11 24       	eor	r1, r1
    107a:	80 93 f3 00 	sts	0x00F3, r24
    107e:	12 96       	adiw	r26, 0x02	; 2
    1080:	8c 91       	ld	r24, X
    1082:	12 97       	sbiw	r26, 0x02	; 2
    1084:	82 95       	swap	r24
    1086:	88 0f       	add	r24, r24
    1088:	80 7e       	andi	r24, 0xE0	; 224
    108a:	80 93 f2 00 	sts	0x00F2, r24
    108e:	ef ee       	ldi	r30, 0xEF	; 239
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8f 7e       	andi	r24, 0xEF	; 239
    1096:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	9b 81       	ldd	r25, Y+3	; 0x03
    109e:	92 95       	swap	r25
    10a0:	96 95       	lsr	r25
    10a2:	97 70       	andi	r25, 0x07	; 7
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	88 0f       	add	r24, r24
    10a8:	88 0f       	add	r24, r24
    10aa:	88 0f       	add	r24, r24
    10ac:	89 0f       	add	r24, r25
    10ae:	80 93 f7 00 	sts	0x00F7, r24
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	92 95       	swap	r25
    10b6:	96 95       	lsr	r25
    10b8:	97 70       	andi	r25, 0x07	; 7
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	88 0f       	add	r24, r24
    10be:	88 0f       	add	r24, r24
    10c0:	88 0f       	add	r24, r24
    10c2:	89 0f       	add	r24, r25
    10c4:	80 93 f6 00 	sts	0x00F6, r24
    10c8:	99 81       	ldd	r25, Y+1	; 0x01
    10ca:	92 95       	swap	r25
    10cc:	96 95       	lsr	r25
    10ce:	97 70       	andi	r25, 0x07	; 7
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	88 0f       	add	r24, r24
    10d4:	88 0f       	add	r24, r24
    10d6:	88 0f       	add	r24, r24
    10d8:	89 0f       	add	r24, r25
    10da:	80 93 f5 00 	sts	0x00F5, r24
    10de:	29 81       	ldd	r18, Y+1	; 0x01
    10e0:	22 0f       	add	r18, r18
    10e2:	22 0f       	add	r18, r18
    10e4:	22 0f       	add	r18, r18
    10e6:	84 ef       	ldi	r24, 0xF4	; 244
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	fc 01       	movw	r30, r24
    10ec:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    10ee:	ef ee       	ldi	r30, 0xEF	; 239
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	30 81       	ld	r19, Z
    10f4:	16 96       	adiw	r26, 0x06	; 6
    10f6:	2c 91       	ld	r18, X
    10f8:	16 97       	sbiw	r26, 0x06	; 6
    10fa:	23 2b       	or	r18, r19
    10fc:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    10fe:	21 e0       	ldi	r18, 0x01	; 1
    1100:	1a 96       	adiw	r26, 0x0a	; 10
    1102:	2c 93       	st	X, r18
    1104:	dc 01       	movw	r26, r24
    1106:	2c 91       	ld	r18, X
    1108:	24 60       	ori	r18, 0x04	; 4
    110a:	2c 93       	st	X, r18
    110c:	a0 ef       	ldi	r26, 0xF0	; 240
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	2c 91       	ld	r18, X
    1112:	24 60       	ori	r18, 0x04	; 4
    1114:	2c 93       	st	X, r18
          Can_clear_rplv();
    1116:	20 81       	ld	r18, Z
    1118:	2f 7d       	andi	r18, 0xDF	; 223
    111a:	20 83       	st	Z, r18
          Can_set_idemsk();
    111c:	dc 01       	movw	r26, r24
    111e:	2c 91       	ld	r18, X
    1120:	21 60       	ori	r18, 0x01	; 1
    1122:	2c 93       	st	X, r18
          Can_config_rx();       
    1124:	80 81       	ld	r24, Z
    1126:	8f 73       	andi	r24, 0x3F	; 63
    1128:	80 83       	st	Z, r24
    112a:	80 81       	ld	r24, Z
    112c:	80 68       	ori	r24, 0x80	; 128
    112e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1130:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1132:	28 c1       	rjmp	.+592    	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	8a ef       	ldi	r24, 0xFA	; 250
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	17 96       	adiw	r26, 0x07	; 7
    113c:	ed 91       	ld	r30, X+
    113e:	fc 91       	ld	r31, X
    1140:	18 97       	sbiw	r26, 0x08	; 8
    1142:	e2 0f       	add	r30, r18
    1144:	f1 1d       	adc	r31, r1
    1146:	30 81       	ld	r19, Z
    1148:	fc 01       	movw	r30, r24
    114a:	30 83       	st	Z, r19
    114c:	2f 5f       	subi	r18, 0xFF	; 255
    114e:	16 96       	adiw	r26, 0x06	; 6
    1150:	3c 91       	ld	r19, X
    1152:	16 97       	sbiw	r26, 0x06	; 6
    1154:	23 17       	cp	r18, r19
    1156:	88 f3       	brcs	.-30     	; 0x113a <__stack+0x83b>
          u8_temp=0; Can_set_ext_msk(u8_temp);
    1158:	19 82       	std	Y+1, r1	; 0x01
    115a:	9b 81       	ldd	r25, Y+3	; 0x03
    115c:	92 95       	swap	r25
    115e:	96 95       	lsr	r25
    1160:	97 70       	andi	r25, 0x07	; 7
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	88 0f       	add	r24, r24
    1166:	88 0f       	add	r24, r24
    1168:	88 0f       	add	r24, r24
    116a:	89 0f       	add	r24, r25
    116c:	80 93 f7 00 	sts	0x00F7, r24
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	92 95       	swap	r25
    1174:	96 95       	lsr	r25
    1176:	97 70       	andi	r25, 0x07	; 7
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 0f       	add	r24, r24
    117c:	88 0f       	add	r24, r24
    117e:	88 0f       	add	r24, r24
    1180:	89 0f       	add	r24, r25
    1182:	80 93 f6 00 	sts	0x00F6, r24
    1186:	99 81       	ldd	r25, Y+1	; 0x01
    1188:	92 95       	swap	r25
    118a:	96 95       	lsr	r25
    118c:	97 70       	andi	r25, 0x07	; 7
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	88 0f       	add	r24, r24
    1192:	88 0f       	add	r24, r24
    1194:	88 0f       	add	r24, r24
    1196:	89 0f       	add	r24, r25
    1198:	80 93 f5 00 	sts	0x00F5, r24
    119c:	29 81       	ldd	r18, Y+1	; 0x01
    119e:	22 0f       	add	r18, r18
    11a0:	22 0f       	add	r18, r18
    11a2:	22 0f       	add	r18, r18
    11a4:	84 ef       	ldi	r24, 0xF4	; 244
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    11ac:	ef ee       	ldi	r30, 0xEF	; 239
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	30 81       	ld	r19, Z
    11b2:	16 96       	adiw	r26, 0x06	; 6
    11b4:	2c 91       	ld	r18, X
    11b6:	16 97       	sbiw	r26, 0x06	; 6
    11b8:	23 2b       	or	r18, r19
    11ba:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    11bc:	21 e0       	ldi	r18, 0x01	; 1
    11be:	1a 96       	adiw	r26, 0x0a	; 10
    11c0:	2c 93       	st	X, r18
    11c2:	dc 01       	movw	r26, r24
    11c4:	2c 91       	ld	r18, X
    11c6:	24 60       	ori	r18, 0x04	; 4
    11c8:	2c 93       	st	X, r18
    11ca:	a0 ef       	ldi	r26, 0xF0	; 240
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	2c 91       	ld	r18, X
    11d0:	24 60       	ori	r18, 0x04	; 4
    11d2:	2c 93       	st	X, r18
          Can_set_rplv();
    11d4:	20 81       	ld	r18, Z
    11d6:	20 62       	ori	r18, 0x20	; 32
    11d8:	20 83       	st	Z, r18
          Can_clear_idemsk();
    11da:	dc 01       	movw	r26, r24
    11dc:	2c 91       	ld	r18, X
    11de:	2e 7f       	andi	r18, 0xFE	; 254
    11e0:	2c 93       	st	X, r18
          Can_config_rx();       
    11e2:	80 81       	ld	r24, Z
    11e4:	8f 73       	andi	r24, 0x3F	; 63
    11e6:	80 83       	st	Z, r24
    11e8:	80 81       	ld	r24, Z
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    11ee:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
    11f0:	c9 c0       	rjmp	.+402    	; 0x1384 <__stack+0xa85>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    11f2:	1b 96       	adiw	r26, 0x0b	; 11
    11f4:	8c 91       	ld	r24, X
    11f6:	1b 97       	sbiw	r26, 0x0b	; 11
    11f8:	88 23       	and	r24, r24
    11fa:	d9 f1       	breq	.+118    	; 0x1272 <__stack+0x973>
    11fc:	14 96       	adiw	r26, 0x04	; 4
    11fe:	9c 91       	ld	r25, X
    1200:	14 97       	sbiw	r26, 0x04	; 4
    1202:	92 95       	swap	r25
    1204:	96 95       	lsr	r25
    1206:	97 70       	andi	r25, 0x07	; 7
    1208:	15 96       	adiw	r26, 0x05	; 5
    120a:	8c 91       	ld	r24, X
    120c:	15 97       	sbiw	r26, 0x05	; 5
    120e:	88 0f       	add	r24, r24
    1210:	88 0f       	add	r24, r24
    1212:	88 0f       	add	r24, r24
    1214:	89 0f       	add	r24, r25
    1216:	80 93 f3 00 	sts	0x00F3, r24
    121a:	13 96       	adiw	r26, 0x03	; 3
    121c:	9c 91       	ld	r25, X
    121e:	13 97       	sbiw	r26, 0x03	; 3
    1220:	92 95       	swap	r25
    1222:	96 95       	lsr	r25
    1224:	97 70       	andi	r25, 0x07	; 7
    1226:	14 96       	adiw	r26, 0x04	; 4
    1228:	8c 91       	ld	r24, X
    122a:	14 97       	sbiw	r26, 0x04	; 4
    122c:	88 0f       	add	r24, r24
    122e:	88 0f       	add	r24, r24
    1230:	88 0f       	add	r24, r24
    1232:	89 0f       	add	r24, r25
    1234:	80 93 f2 00 	sts	0x00F2, r24
    1238:	12 96       	adiw	r26, 0x02	; 2
    123a:	9c 91       	ld	r25, X
    123c:	12 97       	sbiw	r26, 0x02	; 2
    123e:	92 95       	swap	r25
    1240:	96 95       	lsr	r25
    1242:	97 70       	andi	r25, 0x07	; 7
    1244:	13 96       	adiw	r26, 0x03	; 3
    1246:	8c 91       	ld	r24, X
    1248:	13 97       	sbiw	r26, 0x03	; 3
    124a:	88 0f       	add	r24, r24
    124c:	88 0f       	add	r24, r24
    124e:	88 0f       	add	r24, r24
    1250:	89 0f       	add	r24, r25
    1252:	80 93 f1 00 	sts	0x00F1, r24
    1256:	12 96       	adiw	r26, 0x02	; 2
    1258:	8c 91       	ld	r24, X
    125a:	12 97       	sbiw	r26, 0x02	; 2
    125c:	88 0f       	add	r24, r24
    125e:	88 0f       	add	r24, r24
    1260:	88 0f       	add	r24, r24
    1262:	80 93 f0 00 	sts	0x00F0, r24
    1266:	ef ee       	ldi	r30, 0xEF	; 239
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	80 61       	ori	r24, 0x10	; 16
    126e:	80 83       	st	Z, r24
    1270:	1c c0       	rjmp	.+56     	; 0x12aa <__stack+0x9ab>
          else              { Can_set_std_id(cmd->id.std);}
    1272:	12 96       	adiw	r26, 0x02	; 2
    1274:	8c 91       	ld	r24, X
    1276:	12 97       	sbiw	r26, 0x02	; 2
    1278:	86 95       	lsr	r24
    127a:	86 95       	lsr	r24
    127c:	86 95       	lsr	r24
    127e:	13 96       	adiw	r26, 0x03	; 3
    1280:	9c 91       	ld	r25, X
    1282:	13 97       	sbiw	r26, 0x03	; 3
    1284:	e0 e2       	ldi	r30, 0x20	; 32
    1286:	9e 9f       	mul	r25, r30
    1288:	80 0d       	add	r24, r0
    128a:	11 24       	eor	r1, r1
    128c:	80 93 f3 00 	sts	0x00F3, r24
    1290:	12 96       	adiw	r26, 0x02	; 2
    1292:	8c 91       	ld	r24, X
    1294:	12 97       	sbiw	r26, 0x02	; 2
    1296:	82 95       	swap	r24
    1298:	88 0f       	add	r24, r24
    129a:	80 7e       	andi	r24, 0xE0	; 224
    129c:	80 93 f2 00 	sts	0x00F2, r24
    12a0:	ef ee       	ldi	r30, 0xEF	; 239
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7e       	andi	r24, 0xEF	; 239
    12a8:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    12aa:	16 96       	adiw	r26, 0x06	; 6
    12ac:	8c 91       	ld	r24, X
    12ae:	16 97       	sbiw	r26, 0x06	; 6
    12b0:	88 23       	and	r24, r24
    12b2:	91 f0       	breq	.+36     	; 0x12d8 <__stack+0x9d9>
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	8a ef       	ldi	r24, 0xFA	; 250
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	17 96       	adiw	r26, 0x07	; 7
    12bc:	ed 91       	ld	r30, X+
    12be:	fc 91       	ld	r31, X
    12c0:	18 97       	sbiw	r26, 0x08	; 8
    12c2:	e2 0f       	add	r30, r18
    12c4:	f1 1d       	adc	r31, r1
    12c6:	30 81       	ld	r19, Z
    12c8:	fc 01       	movw	r30, r24
    12ca:	30 83       	st	Z, r19
    12cc:	2f 5f       	subi	r18, 0xFF	; 255
    12ce:	16 96       	adiw	r26, 0x06	; 6
    12d0:	3c 91       	ld	r19, X
    12d2:	16 97       	sbiw	r26, 0x06	; 6
    12d4:	23 17       	cp	r18, r19
    12d6:	88 f3       	brcs	.-30     	; 0x12ba <__stack+0x9bb>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	92 95       	swap	r25
    12e0:	96 95       	lsr	r25
    12e2:	97 70       	andi	r25, 0x07	; 7
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	88 0f       	add	r24, r24
    12e8:	88 0f       	add	r24, r24
    12ea:	88 0f       	add	r24, r24
    12ec:	89 0f       	add	r24, r25
    12ee:	80 93 f7 00 	sts	0x00F7, r24
    12f2:	9a 81       	ldd	r25, Y+2	; 0x02
    12f4:	92 95       	swap	r25
    12f6:	96 95       	lsr	r25
    12f8:	97 70       	andi	r25, 0x07	; 7
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 0f       	add	r24, r24
    12fe:	88 0f       	add	r24, r24
    1300:	88 0f       	add	r24, r24
    1302:	89 0f       	add	r24, r25
    1304:	80 93 f6 00 	sts	0x00F6, r24
    1308:	99 81       	ldd	r25, Y+1	; 0x01
    130a:	92 95       	swap	r25
    130c:	96 95       	lsr	r25
    130e:	97 70       	andi	r25, 0x07	; 7
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 0f       	add	r24, r24
    1314:	88 0f       	add	r24, r24
    1316:	88 0f       	add	r24, r24
    1318:	89 0f       	add	r24, r25
    131a:	80 93 f5 00 	sts	0x00F5, r24
    131e:	29 81       	ldd	r18, Y+1	; 0x01
    1320:	22 0f       	add	r18, r18
    1322:	22 0f       	add	r18, r18
    1324:	22 0f       	add	r18, r18
    1326:	84 ef       	ldi	r24, 0xF4	; 244
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    132e:	ef ee       	ldi	r30, 0xEF	; 239
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	30 81       	ld	r19, Z
    1334:	16 96       	adiw	r26, 0x06	; 6
    1336:	2c 91       	ld	r18, X
    1338:	16 97       	sbiw	r26, 0x06	; 6
    133a:	23 2b       	or	r18, r19
    133c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	1a 96       	adiw	r26, 0x0a	; 10
    1342:	2c 93       	st	X, r18
    1344:	dc 01       	movw	r26, r24
    1346:	2c 91       	ld	r18, X
    1348:	24 60       	ori	r18, 0x04	; 4
    134a:	2c 93       	st	X, r18
    134c:	a0 ef       	ldi	r26, 0xF0	; 240
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	2c 91       	ld	r18, X
    1352:	24 60       	ori	r18, 0x04	; 4
    1354:	2c 93       	st	X, r18
          Can_set_rplv();
    1356:	20 81       	ld	r18, Z
    1358:	20 62       	ori	r18, 0x20	; 32
    135a:	20 83       	st	Z, r18
          Can_set_idemsk();
    135c:	dc 01       	movw	r26, r24
    135e:	2c 91       	ld	r18, X
    1360:	21 60       	ori	r18, 0x01	; 1
    1362:	2c 93       	st	X, r18
          Can_config_rx();       
    1364:	80 81       	ld	r24, Z
    1366:	8f 73       	andi	r24, 0x3F	; 63
    1368:	80 83       	st	Z, r24
    136a:	80 81       	ld	r24, Z
    136c:	80 68       	ori	r24, 0x80	; 128
    136e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1370:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1372:	08 c0       	rjmp	.+16     	; 0x1384 <__stack+0xa85>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1374:	19 96       	adiw	r26, 0x09	; 9
    1376:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1378:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <__stack+0xa85>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    137c:	8f e1       	ldi	r24, 0x1F	; 31
    137e:	19 96       	adiw	r26, 0x09	; 9
    1380:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    1384:	0f 90       	pop	r0
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	08 95       	ret

0000138c <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    1392:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <can_get_status+0xe>
    1398:	d5 c0       	rjmp	.+426    	; 0x1544 <can_get_status+0x1b8>
    139a:	8f 31       	cpi	r24, 0x1F	; 31
    139c:	09 f4       	brne	.+2      	; 0x13a0 <can_get_status+0x14>
    139e:	d4 c0       	rjmp	.+424    	; 0x1548 <can_get_status+0x1bc>
    13a0:	8f 3f       	cpi	r24, 0xFF	; 255
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <can_get_status+0x1a>
    13a4:	d3 c0       	rjmp	.+422    	; 0x154c <can_get_status+0x1c0>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    13a6:	62 95       	swap	r22
    13a8:	60 7f       	andi	r22, 0xF0	; 240
    13aa:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    13ae:	0e 94 5d 03 	call	0x6ba	; 0x6ba <can_get_mob_status>
    
    switch (a_status)
    13b2:	80 32       	cpi	r24, 0x20	; 32
    13b4:	61 f0       	breq	.+24     	; 0x13ce <can_get_status+0x42>
    13b6:	20 f4       	brcc	.+8      	; 0x13c0 <can_get_status+0x34>
    13b8:	88 23       	and	r24, r24
    13ba:	09 f4       	brne	.+2      	; 0x13be <can_get_status+0x32>
    13bc:	c9 c0       	rjmp	.+402    	; 0x1550 <can_get_status+0x1c4>
    13be:	b8 c0       	rjmp	.+368    	; 0x1530 <can_get_status+0x1a4>
    13c0:	80 34       	cpi	r24, 0x40	; 64
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <can_get_status+0x3a>
    13c4:	aa c0       	rjmp	.+340    	; 0x151a <can_get_status+0x18e>
    13c6:	80 3a       	cpi	r24, 0xA0	; 160
    13c8:	09 f4       	brne	.+2      	; 0x13cc <can_get_status+0x40>
    13ca:	4e c0       	rjmp	.+156    	; 0x1468 <can_get_status+0xdc>
    13cc:	b1 c0       	rjmp	.+354    	; 0x1530 <can_get_status+0x1a4>
        case MOB_RX_COMPLETED:
			if(SELF_ID != 1)
			{
				LED_toggle(LED1);
			}
            cmd->ctrl.rtr = Can_get_rtr();
    13ce:	80 91 f0 00 	lds	r24, 0x00F0
    13d2:	82 fb       	bst	r24, 2
    13d4:	88 27       	eor	r24, r24
    13d6:	80 f9       	bld	r24, 0
    13d8:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    13da:	80 91 ef 00 	lds	r24, 0x00EF
    13de:	84 ff       	sbrs	r24, 4
    13e0:	2d c0       	rjmp	.+90     	; 0x143c <can_get_status+0xb0>
            {
	            cmd->ctrl.ide = 1; // extended frame
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    13e6:	e3 ef       	ldi	r30, 0xF3	; 243
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	86 95       	lsr	r24
    13ee:	86 95       	lsr	r24
    13f0:	86 95       	lsr	r24
    13f2:	8d 83       	std	Y+5, r24	; 0x05
    13f4:	a2 ef       	ldi	r26, 0xF2	; 242
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	8c 91       	ld	r24, X
    13fa:	90 81       	ld	r25, Z
    13fc:	86 95       	lsr	r24
    13fe:	86 95       	lsr	r24
    1400:	86 95       	lsr	r24
    1402:	20 e2       	ldi	r18, 0x20	; 32
    1404:	92 9f       	mul	r25, r18
    1406:	80 0d       	add	r24, r0
    1408:	11 24       	eor	r1, r1
    140a:	8c 83       	std	Y+4, r24	; 0x04
    140c:	e1 ef       	ldi	r30, 0xF1	; 241
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	9c 91       	ld	r25, X
    1414:	86 95       	lsr	r24
    1416:	86 95       	lsr	r24
    1418:	86 95       	lsr	r24
    141a:	20 e2       	ldi	r18, 0x20	; 32
    141c:	92 9f       	mul	r25, r18
    141e:	80 0d       	add	r24, r0
    1420:	11 24       	eor	r1, r1
    1422:	8b 83       	std	Y+3, r24	; 0x03
    1424:	80 91 f0 00 	lds	r24, 0x00F0
    1428:	90 81       	ld	r25, Z
    142a:	86 95       	lsr	r24
    142c:	86 95       	lsr	r24
    142e:	86 95       	lsr	r24
    1430:	20 e2       	ldi	r18, 0x20	; 32
    1432:	92 9f       	mul	r25, r18
    1434:	80 0d       	add	r24, r0
    1436:	11 24       	eor	r1, r1
    1438:	8a 83       	std	Y+2, r24	; 0x02
    143a:	07 c0       	rjmp	.+14     	; 0x144a <can_get_status+0xbe>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    143c:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    143e:	e3 ef       	ldi	r30, 0xF3	; 243
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	80 91 f2 00 	lds	r24, 0x00F2
    1448:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    144a:	80 e2       	ldi	r24, 0x20	; 32
    144c:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    144e:	8f 81       	ldd	r24, Y+7	; 0x07
    1450:	98 85       	ldd	r25, Y+8	; 0x08
    1452:	0e 94 73 03 	call	0x6e6	; 0x6e6 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    1456:	ef ee       	ldi	r30, 0xEF	; 239
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8f 73       	andi	r24, 0x3F	; 63
    145e:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    1460:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    1464:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    1466:	75 c0       	rjmp	.+234    	; 0x1552 <can_get_status+0x1c6>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    1468:	80 91 f0 00 	lds	r24, 0x00F0
    146c:	82 fb       	bst	r24, 2
    146e:	88 27       	eor	r24, r24
    1470:	80 f9       	bld	r24, 0
    1472:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1474:	80 91 ef 00 	lds	r24, 0x00EF
    1478:	84 ff       	sbrs	r24, 4
    147a:	2d c0       	rjmp	.+90     	; 0x14d6 <can_get_status+0x14a>
            {
                cmd->ctrl.ide = 1; // extended frame
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1480:	e3 ef       	ldi	r30, 0xF3	; 243
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	86 95       	lsr	r24
    1488:	86 95       	lsr	r24
    148a:	86 95       	lsr	r24
    148c:	8d 83       	std	Y+5, r24	; 0x05
    148e:	a2 ef       	ldi	r26, 0xF2	; 242
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	8c 91       	ld	r24, X
    1494:	90 81       	ld	r25, Z
    1496:	86 95       	lsr	r24
    1498:	86 95       	lsr	r24
    149a:	86 95       	lsr	r24
    149c:	20 e2       	ldi	r18, 0x20	; 32
    149e:	92 9f       	mul	r25, r18
    14a0:	80 0d       	add	r24, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	8c 83       	std	Y+4, r24	; 0x04
    14a6:	e1 ef       	ldi	r30, 0xF1	; 241
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	9c 91       	ld	r25, X
    14ae:	86 95       	lsr	r24
    14b0:	86 95       	lsr	r24
    14b2:	86 95       	lsr	r24
    14b4:	20 e2       	ldi	r18, 0x20	; 32
    14b6:	92 9f       	mul	r25, r18
    14b8:	80 0d       	add	r24, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	80 91 f0 00 	lds	r24, 0x00F0
    14c2:	90 81       	ld	r25, Z
    14c4:	86 95       	lsr	r24
    14c6:	86 95       	lsr	r24
    14c8:	86 95       	lsr	r24
    14ca:	20 e2       	ldi	r18, 0x20	; 32
    14cc:	92 9f       	mul	r25, r18
    14ce:	80 0d       	add	r24, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	13 c0       	rjmp	.+38     	; 0x14fc <can_get_status+0x170>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    14d6:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    14d8:	e3 ef       	ldi	r30, 0xF3	; 243
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	82 95       	swap	r24
    14e0:	86 95       	lsr	r24
    14e2:	87 70       	andi	r24, 0x07	; 7
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	80 91 f2 00 	lds	r24, 0x00F2
    14ea:	90 81       	ld	r25, Z
    14ec:	99 0f       	add	r25, r25
    14ee:	99 0f       	add	r25, r25
    14f0:	99 0f       	add	r25, r25
    14f2:	82 95       	swap	r24
    14f4:	86 95       	lsr	r24
    14f6:	87 70       	andi	r24, 0x07	; 7
    14f8:	89 0f       	add	r24, r25
    14fa:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    14fc:	80 ea       	ldi	r24, 0xA0	; 160
    14fe:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    1500:	8f 81       	ldd	r24, Y+7	; 0x07
    1502:	98 85       	ldd	r25, Y+8	; 0x08
    1504:	0e 94 73 03 	call	0x6e6	; 0x6e6 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1508:	ef ee       	ldi	r30, 0xEF	; 239
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	8f 73       	andi	r24, 0x3F	; 63
    1510:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    1512:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    1516:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1518:	1c c0       	rjmp	.+56     	; 0x1552 <can_get_status+0x1c6>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    151a:	80 e4       	ldi	r24, 0x40	; 64
    151c:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    151e:	ef ee       	ldi	r30, 0xEF	; 239
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 73       	andi	r24, 0x3F	; 63
    1526:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1528:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    152c:	80 e4       	ldi	r24, 0x40	; 64
            break;
    152e:	11 c0       	rjmp	.+34     	; 0x1552 <can_get_status+0x1c6>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1530:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    1532:	ef ee       	ldi	r30, 0xEF	; 239
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	8f 73       	andi	r24, 0x3F	; 63
    153a:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    153c:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    1540:	82 e0       	ldi	r24, 0x02	; 2
            break;
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <can_get_status+0x1c6>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <can_get_status+0x1c6>
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <can_get_status+0x1c6>
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <can_get_status+0x1c6>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1550:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <send_response>:
/* Thia function sends a generic response to the generic "REQ_RESPONSE	*/
/* which was issued by the OBC.											*/
/************************************************************************/
void send_response(void)
{
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1558:	83 e1       	ldi	r24, 0x13	; 19
    155a:	80 93 20 01 	sts	0x0120, r24
	send_arr[6] = MT_COM;
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	80 93 1f 01 	sts	0x011F, r24
	send_arr[5] = RESPONSE;
    1564:	84 e0       	ldi	r24, 0x04	; 4
    1566:	80 93 1e 01 	sts	0x011E, r24

	can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    156a:	61 e1       	ldi	r22, 0x11	; 17
    156c:	89 e1       	ldi	r24, 0x19	; 25
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	0e 94 73 00 	call	0xe6	; 0xe6 <can_send_message>
	send_now = 0;
    1574:	10 92 3e 01 	sts	0x013E, r1
    1578:	08 95       	ret

0000157a <send_housekeeping>:
/* series of CAN messages to the OBC each one with a different smalltype*/
/************************************************************************/

void send_housekeeping(void)
{	
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    157a:	83 e1       	ldi	r24, 0x13	; 19
    157c:	80 93 20 01 	sts	0x0120, r24
	send_arr[6] = MT_HK;	// HK will likely require multiple message in the future.
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 1f 01 	sts	0x011F, r24

	can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1586:	60 e1       	ldi	r22, 0x10	; 16
    1588:	89 e1       	ldi	r24, 0x19	; 25
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	0e 94 73 00 	call	0xe6	; 0xe6 <can_send_message>
	send_hk = 0;
    1590:	10 92 4e 01 	sts	0x014E, r1
    1594:	08 95       	ret

00001596 <send_sensor_data>:
/* that we will likely have in the future. An SSM would only execute	*/
/* this command upon request from the OBC.								*/
/************************************************************************/

void send_sensor_data(void)
{
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <send_sensor_data+0xa>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t high, low, sensor_name, req_by;			
	sensor_name = data_req_arr[3];
    15a4:	10 91 39 01 	lds	r17, 0x0139
	req_by = data_req_arr[7] >> 4;
    15a8:	00 91 3d 01 	lds	r16, 0x013D
    15ac:	02 95       	swap	r16
    15ae:	0f 70       	andi	r16, 0x0F	; 15
	
	if(sensor_name == SPI_TEMP1)
    15b0:	11 30       	cpi	r17, 0x01	; 1
    15b2:	71 f4       	brne	.+28     	; 0x15d0 <send_sensor_data+0x3a>
	{
		spi_retrieve_temp(&high, &low);
    15b4:	be 01       	movw	r22, r28
    15b6:	6e 5f       	subi	r22, 0xFE	; 254
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	0e 94 91 0c 	call	0x1922	; 0x1922 <spi_retrieve_temp>
		send_arr[1] = high;			// SPI temperature sensor readings.
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	80 93 1a 01 	sts	0x011A, r24
		send_arr[0] = low;
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	80 93 19 01 	sts	0x0119, r24
    15ce:	0b c0       	rjmp	.+22     	; 0x15e6 <send_sensor_data+0x50>
	}
	
	if(sensor_name == BATT_TOP)
    15d0:	13 30       	cpi	r17, 0x03	; 3
    15d2:	21 f4       	brne	.+8      	; 0x15dc <send_sensor_data+0x46>
	{
		//adc_read(&send_arr[0]);
		send_arr[0] = 0x55;
    15d4:	85 e5       	ldi	r24, 0x55	; 85
    15d6:	80 93 19 01 	sts	0x0119, r24
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <send_sensor_data+0x50>
	}
	
	if(sensor_name == BATT_BOTTOM)
    15dc:	14 30       	cpi	r17, 0x04	; 4
    15de:	19 f4       	brne	.+6      	; 0x15e6 <send_sensor_data+0x50>
	{
		//adc_read(&send_arr[0]);
		send_arr[0] = 0x66;
    15e0:	86 e6       	ldi	r24, 0x66	; 102
    15e2:	80 93 19 01 	sts	0x0119, r24
	}

	send_arr[7] = (SELF_ID << 4)|req_by;
    15e6:	00 61       	ori	r16, 0x10	; 16
    15e8:	00 93 20 01 	sts	0x0120, r16
	send_arr[6] = MT_DATA;
    15ec:	10 92 1f 01 	sts	0x011F, r1
	send_arr[5] = sensor_name;				
    15f0:	10 93 1e 01 	sts	0x011E, r17
			
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    15f4:	6a e0       	ldi	r22, 0x0A	; 10
    15f6:	89 e1       	ldi	r24, 0x19	; 25
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	0e 94 73 00 	call	0xe6	; 0xe6 <can_send_message>
	send_data = 0;
    15fe:	10 92 65 01 	sts	0x0165, r1
	
	return;
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	08 95       	ret

00001610 <send_coms_packet>:
/* In the future, this function will be able to send entire packets		*/
/* to the OBC as two CAN messages (2 x 4 bytes).						*/
/************************************************************************/
void send_coms_packet(void)
{			
	send_arr[7] = (SELF_ID << 4)|OBC_ID;
    1610:	83 e1       	ldi	r24, 0x13	; 19
    1612:	80 93 20 01 	sts	0x0120, r24
	send_arr[6] = MT_DATA;
    1616:	10 92 1f 01 	sts	0x011F, r1
	send_arr[5] = COMS_PACKET;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	80 93 1e 01 	sts	0x011E, r24
	send_arr[0] = trans_msg[0];	// ASCII character which was received.
    1620:	80 91 3f 01 	lds	r24, 0x013F
    1624:	80 93 19 01 	sts	0x0119, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1628:	6a e0       	ldi	r22, 0x0A	; 10
    162a:	89 e1       	ldi	r24, 0x19	; 25
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	0e 94 73 00 	call	0xe6	; 0xe6 <can_send_message>
	msg_received = 0;
    1632:	10 92 08 01 	sts	0x0108, r1
    1636:	08 95       	ret

00001638 <send_read_response>:
void send_read_response(void)
{
	uint8_t read_val, passkey, req_by;
	uint8_t* read_ptr;
	
	passkey = read_arr[3];
    1638:	90 91 73 01 	lds	r25, 0x0173
	read_ptr = read_arr[0];
    163c:	e0 91 70 01 	lds	r30, 0x0170
    1640:	f0 e0       	ldi	r31, 0x00	; 0
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the read	*/
	read_val = *read_ptr;
    1642:	80 81       	ld	r24, Z
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    1644:	20 91 77 01 	lds	r18, 0x0177
    1648:	20 61       	ori	r18, 0x10	; 16
    164a:	20 93 20 01 	sts	0x0120, r18
	send_arr[6] = MT_COM;
    164e:	22 e0       	ldi	r18, 0x02	; 2
    1650:	20 93 1f 01 	sts	0x011F, r18
	send_arr[5] = ACK_READ;
    1654:	26 e0       	ldi	r18, 0x06	; 6
    1656:	20 93 1e 01 	sts	0x011E, r18
	send_arr[3] = passkey;
    165a:	90 93 1c 01 	sts	0x011C, r25
	send_arr[0] = read_val;
    165e:	80 93 19 01 	sts	0x0119, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    1662:	61 e1       	ldi	r22, 0x11	; 17
    1664:	89 e1       	ldi	r24, 0x19	; 25
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 73 00 	call	0xe6	; 0xe6 <can_send_message>
	read_response = 0;
    166c:	10 92 45 01 	sts	0x0145, r1
    1670:	08 95       	ret

00001672 <send_write_response>:
void send_write_response(void)
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
    1672:	80 91 03 01 	lds	r24, 0x0103
	write_ptr = write_arr[1];
	write_data = write_arr[0];
    1676:	20 91 00 01 	lds	r18, 0x0100
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
    167a:	90 91 77 01 	lds	r25, 0x0177
{
	uint8_t passkey, write_data, ret_val, verify, req_by;
	uint8_t* write_ptr;
	
	passkey = write_arr[3];
	write_ptr = write_arr[1];
    167e:	e0 91 01 01 	lds	r30, 0x0101
    1682:	f0 e0       	ldi	r31, 0x00	; 0
	write_data = write_arr[0];
	req_by = read_arr[7];	// Used to coordinating with tasks on the OBC.
	
	/*	Execute the Write	*/
	*write_ptr = write_data;
    1684:	20 83       	st	Z, r18
	if (verify != write_data)
		ret_val = -1;
	else
		ret_val = 1;
	
	send_arr[7] = (SELF_ID << 4)|req_by;
    1686:	90 61       	ori	r25, 0x10	; 16
    1688:	90 93 20 01 	sts	0x0120, r25
	send_arr[6] = MT_COM;
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	90 93 1f 01 	sts	0x011F, r25
	send_arr[5] = ACK_WRITE;
    1692:	98 e0       	ldi	r25, 0x08	; 8
    1694:	90 93 1e 01 	sts	0x011E, r25
	send_arr[3] = passkey;
    1698:	80 93 1c 01 	sts	0x011C, r24
	send_arr[0] = ret_val;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	80 93 19 01 	sts	0x0119, r24
	
	can_send_message(&(send_arr[0]), CAN1_MB7);
    16a2:	61 e1       	ldi	r22, 0x11	; 17
    16a4:	89 e1       	ldi	r24, 0x19	; 25
    16a6:	91 e0       	ldi	r25, 0x01	; 1
    16a8:	0e 94 73 00 	call	0xe6	; 0xe6 <can_send_message>
	write_response = 0;
    16ac:	10 92 29 01 	sts	0x0129, r1
    16b0:	08 95       	ret

000016b2 <run_commands>:
/*	executes the corresponding command function if they are equal to 1.	*/
/************************************************************************/

void run_commands(void)
{
	if (send_now == 1)
    16b2:	80 91 3e 01 	lds	r24, 0x013E
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	11 f4       	brne	.+4      	; 0x16be <run_commands+0xc>
		send_response();
    16ba:	0e 94 ac 0a 	call	0x1558	; 0x1558 <send_response>
	if (send_hk == 1)
    16be:	80 91 4e 01 	lds	r24, 0x014E
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	11 f4       	brne	.+4      	; 0x16ca <run_commands+0x18>
		send_housekeeping();
    16c6:	0e 94 bd 0a 	call	0x157a	; 0x157a <send_housekeeping>
	if (send_data == 1)
    16ca:	80 91 65 01 	lds	r24, 0x0165
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <run_commands+0x24>
		send_sensor_data();
    16d2:	0e 94 cb 0a 	call	0x1596	; 0x1596 <send_sensor_data>
	if (msg_received == 1)
    16d6:	80 91 08 01 	lds	r24, 0x0108
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	11 f4       	brne	.+4      	; 0x16e2 <run_commands+0x30>
		send_coms_packet();
    16de:	0e 94 08 0b 	call	0x1610	; 0x1610 <send_coms_packet>
	if (read_response == 1)
    16e2:	80 91 45 01 	lds	r24, 0x0145
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	11 f4       	brne	.+4      	; 0x16ee <run_commands+0x3c>
		send_read_response();
    16ea:	0e 94 1c 0b 	call	0x1638	; 0x1638 <send_read_response>
	if (write_response == 1)
    16ee:	80 91 29 01 	lds	r24, 0x0129
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	11 f4       	brne	.+4      	; 0x16fa <run_commands+0x48>
		send_write_response();
    16f6:	0e 94 39 0b 	call	0x1672	; 0x1672 <send_write_response>
    16fa:	08 95       	ret

000016fc <LED_set>:
}

void LED_set(uint8_t LED) 
{
	
	if(LED == 1)
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	11 f4       	brne	.+4      	; 0x1704 <LED_set+0x8>
	{
		PORTD |= 0x01;
    1700:	58 9a       	sbi	0x0b, 0	; 11
    1702:	08 95       	ret
	}
	if(LED == 2)
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	11 f4       	brne	.+4      	; 0x170c <LED_set+0x10>
	{
		LEDPORT &= ~(1 << 6);
    1708:	2e 98       	cbi	0x05, 6	; 5
    170a:	08 95       	ret
	}
	if(LED == 3)
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	09 f4       	brne	.+2      	; 0x1712 <LED_set+0x16>
	{
		PORTC &= ~(0x01);
    1710:	40 98       	cbi	0x08, 0	; 8
    1712:	08 95       	ret

00001714 <LED_clr>:
}

void LED_clr(uint8_t LED) 
{
	
	if(LED == 1)
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	11 f4       	brne	.+4      	; 0x171c <LED_clr+0x8>
	{
		PORTD &= ~(0x01);
    1718:	58 98       	cbi	0x0b, 0	; 11
    171a:	08 95       	ret
	}
	if(LED == 2)
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	11 f4       	brne	.+4      	; 0x1724 <LED_clr+0x10>
	{
		LEDPORT |= (1 << 6);
    1720:	2e 9a       	sbi	0x05, 6	; 5
    1722:	08 95       	ret
	}
	if(LED == 3)
    1724:	83 30       	cpi	r24, 0x03	; 3
    1726:	09 f4       	brne	.+2      	; 0x172a <LED_clr+0x16>
	{
		PORTC |= 0x01;
    1728:	40 9a       	sbi	0x08, 0	; 8
    172a:	08 95       	ret

0000172c <main>:
}

void sys_init(void) 
{
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    172c:	e1 e6       	ldi	r30, 0x61	; 97
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 e8       	ldi	r24, 0x80	; 128
    1732:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1734:	10 82       	st	Z, r1
}

void io_init(void) 
{	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1736:	8e ef       	ldi	r24, 0xFE	; 254
    1738:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x11;		// PC4 == SS1 for SPI_TEMP
    173a:	81 e1       	ldi	r24, 0x11	; 17
    173c:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    173e:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    1740:	89 e0       	ldi	r24, 0x09	; 9
    1742:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;		// PD3 should only go low during an SPI message.
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    1748:	1d b8       	out	0x0d, r1	; 13
	PORTE = 0x00;
    174a:	1e b8       	out	0x0e, r1	; 14
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    174c:	0e 94 bd 0c 	call	0x197a	; 0x197a <timer_init>

	adc_initialize();
    1750:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	0e 94 8b 03 	call	0x716	; 0x716 <can_init>
	can_init_mobs();
    175a:	0e 94 77 02 	call	0x4ee	; 0x4ee <can_init_mobs>
	spi_initialize_master();
    175e:	0e 94 87 0c 	call	0x190e	; 0x190e <spi_initialize_master>

	// Enable the timer for mppt
	if(SELF_ID == 1)
	{
		LED_set(LED1);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LED_set>
		mppt_timer_init();
    1768:	0e 94 77 0c 	call	0x18ee	; 0x18ee <mppt_timer_init>
	}
	
	// Enable global interrupts for Timer execution
	sei();
    176c:	78 94       	sei
	if (SELF_ID == 0)
	{
		transceiver_initialize();
	}

	SS1_set_high();		// SPI Temp Sensor.
    176e:	0e 94 8d 0c 	call	0x191a	; 0x191a <SS1_set_high>
	
	/*		Begin Main Program Loop					*/	
    while(1)
    {		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 as well as HK into MOB5 */
		can_check_general();
    1772:	0e 94 1c 02 	call	0x438	; 0x438 <can_check_general>
			trans_check();		// Check for incoming packets.	
		}

		if(SELF_ID == 1)
		{
			LED_clr(LED1);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	0e 94 8a 0b 	call	0x1714	; 0x1714 <LED_clr>
			delay_ms(1000);
    177c:	88 ee       	ldi	r24, 0xE8	; 232
    177e:	93 e0       	ldi	r25, 0x03	; 3
    1780:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay_ms>
			adc_set_pin(2);
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	0e 94 70 00 	call	0xe0	; 0xe0 <adc_set_pin>
			adc_read(adc_result);
    178a:	c0 e0       	ldi	r28, 0x00	; 0
    178c:	d0 e0       	ldi	r29, 0x00	; 0
    178e:	ce 01       	movw	r24, r28
    1790:	0e 94 67 00 	call	0xce	; 0xce <adc_read>
			if(*adc_result > 0x10)
    1794:	88 81       	ld	r24, Y
    1796:	81 31       	cpi	r24, 0x11	; 17
    1798:	c0 f0       	brcs	.+48     	; 0x17ca <main+0x9e>
			{
				LED_set(LED1);
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LED_set>
			}
			else
			{
				LED_clr(LED1);
			}
			set_duty_cycleA(0xBF);
    17a0:	8f eb       	ldi	r24, 0xBF	; 191
    17a2:	0e 94 83 0c 	call	0x1906	; 0x1906 <set_duty_cycleA>
			set_duty_cycleB(0x1F);
    17a6:	8f e1       	ldi	r24, 0x1F	; 31
    17a8:	0e 94 85 0c 	call	0x190a	; 0x190a <set_duty_cycleB>
			delay_ms(1000);
    17ac:	88 ee       	ldi	r24, 0xE8	; 232
    17ae:	93 e0       	ldi	r25, 0x03	; 3
    17b0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay_ms>
			adc_set_pin(3);
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	0e 94 70 00 	call	0xe0	; 0xe0 <adc_set_pin>
			adc_read(adc_result);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 67 00 	call	0xce	; 0xce <adc_read>
			if(*adc_result > 0x10)
			{
				LED_set(LED1);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LED_set>
    17c8:	17 c0       	rjmp	.+46     	; 0x17f8 <main+0xcc>
			{
				LED_set(LED1);
			}
			else
			{
				LED_clr(LED1);
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <LED_clr>
			}
			set_duty_cycleA(0xBF);
    17d0:	8f eb       	ldi	r24, 0xBF	; 191
    17d2:	0e 94 83 0c 	call	0x1906	; 0x1906 <set_duty_cycleA>
			set_duty_cycleB(0x1F);
    17d6:	8f e1       	ldi	r24, 0x1F	; 31
    17d8:	0e 94 85 0c 	call	0x190a	; 0x190a <set_duty_cycleB>
			delay_ms(1000);
    17dc:	88 ee       	ldi	r24, 0xE8	; 232
    17de:	93 e0       	ldi	r25, 0x03	; 3
    17e0:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay_ms>
			adc_set_pin(3);
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	0e 94 70 00 	call	0xe0	; 0xe0 <adc_set_pin>
			adc_read(adc_result);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 67 00 	call	0xce	; 0xce <adc_read>
			{
				LED_set(LED1);
			}
			else
			{
				LED_clr(LED1);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <LED_clr>
			}
			set_duty_cycleA(0x1F);
    17f8:	8f e1       	ldi	r24, 0x1F	; 31
    17fa:	0e 94 83 0c 	call	0x1906	; 0x1906 <set_duty_cycleA>
			set_duty_cycleB(0xBF);
    17fe:	8f eb       	ldi	r24, 0xBF	; 191
    1800:	0e 94 85 0c 	call	0x190a	; 0x190a <set_duty_cycleB>
			
		}
		
		/*	EXECUTE OPERATIONS WHICH WERE REQUESTED */
		run_commands();
    1804:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <run_commands>
	}
    1808:	b4 cf       	rjmp	.-152    	; 0x1772 <main+0x46>

0000180a <__vector_15>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "mppt_timer.h"

//When the A compare register is reached, turn on one of the LEDs
ISR(TIMER0_COMPA_vect) {
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31
	//MPPTA_flag = 1;
	LED_clr(LED2);
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <LED_clr>
}
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <__vector_16>:

//When the B compare register is reached, turn on one of the LEDs
ISR(TIMER0_COMPB_vect) {
    1854:	1f 92       	push	r1
    1856:	0f 92       	push	r0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	0f 92       	push	r0
    185c:	11 24       	eor	r1, r1
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	4f 93       	push	r20
    1864:	5f 93       	push	r21
    1866:	6f 93       	push	r22
    1868:	7f 93       	push	r23
    186a:	8f 93       	push	r24
    186c:	9f 93       	push	r25
    186e:	af 93       	push	r26
    1870:	bf 93       	push	r27
    1872:	ef 93       	push	r30
    1874:	ff 93       	push	r31
	//MPPTB_flag = 1;
	LED_clr(LED3);
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	0e 94 8a 0b 	call	0x1714	; 0x1714 <LED_clr>
}
    187c:	ff 91       	pop	r31
    187e:	ef 91       	pop	r30
    1880:	bf 91       	pop	r27
    1882:	af 91       	pop	r26
    1884:	9f 91       	pop	r25
    1886:	8f 91       	pop	r24
    1888:	7f 91       	pop	r23
    188a:	6f 91       	pop	r22
    188c:	5f 91       	pop	r21
    188e:	4f 91       	pop	r20
    1890:	3f 91       	pop	r19
    1892:	2f 91       	pop	r18
    1894:	0f 90       	pop	r0
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	0f 90       	pop	r0
    189a:	1f 90       	pop	r1
    189c:	18 95       	reti

0000189e <__vector_17>:

//When the timer overflows, turn off both LEDs
ISR(TIMER0_OVF_vect) {
    189e:	1f 92       	push	r1
    18a0:	0f 92       	push	r0
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	0f 92       	push	r0
    18a6:	11 24       	eor	r1, r1
    18a8:	2f 93       	push	r18
    18aa:	3f 93       	push	r19
    18ac:	4f 93       	push	r20
    18ae:	5f 93       	push	r21
    18b0:	6f 93       	push	r22
    18b2:	7f 93       	push	r23
    18b4:	8f 93       	push	r24
    18b6:	9f 93       	push	r25
    18b8:	af 93       	push	r26
    18ba:	bf 93       	push	r27
    18bc:	ef 93       	push	r30
    18be:	ff 93       	push	r31
	LED_set(LED2);
    18c0:	82 e0       	ldi	r24, 0x02	; 2
    18c2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LED_set>
	LED_set(LED3);
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <LED_set>
	//MPPTA_flag = 0;
	//MPPTB_flag = 0;

}
    18cc:	ff 91       	pop	r31
    18ce:	ef 91       	pop	r30
    18d0:	bf 91       	pop	r27
    18d2:	af 91       	pop	r26
    18d4:	9f 91       	pop	r25
    18d6:	8f 91       	pop	r24
    18d8:	7f 91       	pop	r23
    18da:	6f 91       	pop	r22
    18dc:	5f 91       	pop	r21
    18de:	4f 91       	pop	r20
    18e0:	3f 91       	pop	r19
    18e2:	2f 91       	pop	r18
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	0f 90       	pop	r0
    18ea:	1f 90       	pop	r1
    18ec:	18 95       	reti

000018ee <mppt_timer_init>:

// This function initializes a 8-bit timer used for generating PWM for mppt.
void mppt_timer_init(void) {
	
	TCNT0 = 0x0000; //Clear timer
    18ee:	16 bc       	out	0x26, r1	; 38
	//For now, hard code in the values that the "duty cycle" registers will be set to. This will be updated later by the algorithm
	OCR0A = 0x3F; // b00111111
    18f0:	8f e3       	ldi	r24, 0x3F	; 63
    18f2:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0xBF; // b10111111
    18f4:	8f eb       	ldi	r24, 0xBF	; 191
    18f6:	88 bd       	out	0x28, r24	; 40
	
	TCCR0A = 0x00; // b00000000 Don't connect any pins, but set to normal mode as a test
    18f8:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; // b00000101 Set clock pre-scaling to 1024 for now, will be 1 later for "fast" output
    18fa:	85 e0       	ldi	r24, 0x05	; 5
    18fc:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x07; // b00000111 Enable the A and B compare match interrupts. Also enable the timer overflow interrupt
    18fe:	87 e0       	ldi	r24, 0x07	; 7
    1900:	80 93 6e 00 	sts	0x006E, r24
    1904:	08 95       	ret

00001906 <set_duty_cycleA>:
}

//This function will set the duty cycle of MPPTA
//Duty is an 8 bit number, so 0x7F is a duty cycle of 0.5
void set_duty_cycleA(uint8_t duty){
	OCR0A = duty;	
    1906:	87 bd       	out	0x27, r24	; 39
    1908:	08 95       	ret

0000190a <set_duty_cycleB>:
}

//This function will set the duty cycle of MPPTB
void set_duty_cycleB(uint8_t duty){
	OCR0B = duty;
    190a:	88 bd       	out	0x28, r24	; 40
    190c:	08 95       	ret

0000190e <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    190e:	85 b7       	in	r24, 0x35	; 53
    1910:	8f 77       	andi	r24, 0x7F	; 127
    1912:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle), CPHA = 0
	temp = 0b01010011;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    1914:	83 e5       	ldi	r24, 0x53	; 83
    1916:	8c bd       	out	0x2c, r24	; 44
    1918:	08 95       	ret

0000191a <SS1_set_high>:
	delay_us(1);
}

void SS1_set_high(void)
{
	PORTC |= (1 << 4);
    191a:	44 9a       	sbi	0x08, 4	; 8
    191c:	08 95       	ret

0000191e <SS1_set_low>:
	delay_us(1);
}

void SS1_set_low(void)
{
	PORTC &= (0xEF);
    191e:	44 98       	cbi	0x08, 4	; 8
    1920:	08 95       	ret

00001922 <spi_retrieve_temp>:
		
	return receive_char;					// Transmission was successful, return the character that was received.
}

void spi_retrieve_temp(uint8_t* high, uint8_t* low)
{
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	8c 01       	movw	r16, r24
    192c:	eb 01       	movw	r28, r22
	
	reg_ptr = SPDR_BASE;
	
	// Commence the SPI message.

	SS1_set_low();
    192e:	0e 94 8f 0c 	call	0x191e	; 0x191e <SS1_set_low>
	*reg_ptr = 0;	// We don't want to pass a message during the first SCK cycles.
    1932:	1e bc       	out	0x2e, r1	; 46
	delay_ms(128);
    1934:	80 e8       	ldi	r24, 0x80	; 128
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay_ms>
	*high = *reg_ptr;
    193c:	8e b5       	in	r24, 0x2e	; 46
    193e:	f8 01       	movw	r30, r16
    1940:	80 83       	st	Z, r24
	delay_ms(128);
    1942:	80 e8       	ldi	r24, 0x80	; 128
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <delay_ms>
	*low = *reg_ptr;	
    194a:	8e b5       	in	r24, 0x2e	; 46
    194c:	88 83       	st	Y, r24
	SS1_set_high();
    194e:	0e 94 8d 0c 	call	0x191a	; 0x191a <SS1_set_high>
	
	return;
}
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	08 95       	ret

0000195c <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    195c:	1f 92       	push	r1
    195e:	0f 92       	push	r0
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	0f 92       	push	r0
    1964:	11 24       	eor	r1, r1
    1966:	8f 93       	push	r24
	CTC_flag = 1;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	80 93 78 01 	sts	0x0178, r24
}
    196e:	8f 91       	pop	r24
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    197a:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    197e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    1982:	8a e0       	ldi	r24, 0x0A	; 10
    1984:	80 93 81 00 	sts	0x0081, r24
    1988:	08 95       	ret

0000198a <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    198a:	10 92 78 01 	sts	0x0178, r1
	TCNT1 = 0x0000; //Clear timer
    198e:	10 92 85 00 	sts	0x0085, r1
    1992:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    1996:	90 93 89 00 	sts	0x0089, r25
    199a:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    19a4:	80 91 78 01 	lds	r24, 0x0178
    19a8:	88 23       	and	r24, r24
    19aa:	e1 f3       	breq	.-8      	; 0x19a4 <delay_us+0x1a>
}
    19ac:	08 95       	ret

000019ae <delay_ms>:

void delay_ms(uint16_t ms) {
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	51 f0       	breq	.+20     	; 0x19d0 <delay_ms+0x22>
    19bc:	c0 e0       	ldi	r28, 0x00	; 0
    19be:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    19c0:	88 ee       	ldi	r24, 0xE8	; 232
    19c2:	93 e0       	ldi	r25, 0x03	; 3
    19c4:	0e 94 c5 0c 	call	0x198a	; 0x198a <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    19c8:	21 96       	adiw	r28, 0x01	; 1
    19ca:	c0 17       	cp	r28, r16
    19cc:	d1 07       	cpc	r29, r17
    19ce:	c1 f7       	brne	.-16     	; 0x19c0 <delay_ms+0x12>
		delay_us(1000);
	}
}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	08 95       	ret

000019da <__tablejump2__>:
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31

000019de <__tablejump__>:
    19de:	05 90       	lpm	r0, Z+
    19e0:	f4 91       	lpm	r31, Z
    19e2:	e0 2d       	mov	r30, r0
    19e4:	09 94       	ijmp

000019e6 <_exit>:
    19e6:	f8 94       	cli

000019e8 <__stop_program>:
    19e8:	ff cf       	rjmp	.-2      	; 0x19e8 <__stop_program>
