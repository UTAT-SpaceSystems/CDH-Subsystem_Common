
Subsystem_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001538  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000052  00800100  00800100  000015ac  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001a0  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001718  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000009e8  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c21  00000000  00000000  0000387c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000320  00000000  00000000  000044a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000005ce  00000000  00000000  000047c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000012ef  00000000  00000000  00004d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  0000607d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_12>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      7c:	d4 02       	muls	r29, r20
      7e:	66 03       	mulsu	r22, r22
      80:	f0 03       	fmuls	r23, r16
      82:	64 04       	cpc	r6, r4
      84:	a4 04       	cpc	r10, r4
      86:	20 05       	cpc	r18, r0
      88:	9d 05       	cpc	r25, r13
      8a:	3a 06       	cpc	r3, r26
      8c:	e0 06       	cpc	r14, r16
      8e:	ce 02       	muls	r28, r30
      90:	e9 07       	cpc	r30, r25

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 35       	cpi	r26, 0x52	; 82
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 c5 09 	call	0x138a	; 0x138a <main>
      b2:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_initialize>:
	uint8_t* ptr;
	uint8_t x;
	
	ptr = ADMUX_BASE;		// Initialize ADMUX_BASE
	x = 0b00000010;			// Choose ADC2
	*ptr = x;
      ba:	82 e0       	ldi	r24, 0x02	; 2
      bc:	80 93 7c 00 	sts	0x007C, r24
	
	ptr = ADCSRA_BASE;		// Initialize ADCSRA
	x = 0b11100010;
	*ptr = x;
      c0:	82 ee       	ldi	r24, 0xE2	; 226
      c2:	80 93 7a 00 	sts	0x007A, r24
		
	ptr = ADCSRB_BASE;		// Initialize ADCSRB
	x = 0b10100000;
	*ptr = x;
      c6:	80 ea       	ldi	r24, 0xA0	; 160
      c8:	80 93 7b 00 	sts	0x007B, r24
      cc:	08 95       	ret

000000ce <adc_read>:
void adc_read(uint8_t* array_ptr)
{
	//delay_us(20);	//Length of time need for each conversion.
	uint8_t*	address = ADCL_BASE;
	
	*array_ptr = *address;				// Read the new sample.
      ce:	e8 e7       	ldi	r30, 0x78	; 120
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	20 81       	ld	r18, Z
      d4:	dc 01       	movw	r26, r24
      d6:	2c 93       	st	X, r18
	*(array_ptr + 1) = *(address + 1);
      d8:	21 81       	ldd	r18, Z+1	; 0x01
      da:	11 96       	adiw	r26, 0x01	; 1
      dc:	2c 93       	st	X, r18
      de:	08 95       	ret

000000e0 <can_check_general>:
/************************************************************************/

#include "can_api.h"

void can_check_general(void)
{
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
	uint8_t i = 0;
	
	message.pt_data = &data0[0]; // point message object to first element of data buffer
      e4:	8d e2       	ldi	r24, 0x2D	; 45
      e6:	91 e0       	ldi	r25, 0x01	; 1
      e8:	90 93 28 01 	sts	0x0128, r25
      ec:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
      f0:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
      f4:	84 e1       	ldi	r24, 0x14	; 20
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	90 93 23 01 	sts	0x0123, r25
      fc:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     100:	85 e0       	ldi	r24, 0x05	; 5
     102:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     106:	88 e0       	ldi	r24, 0x08	; 8
     108:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
     10c:	10 92 4f 01 	sts	0x014F, r1
	
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	80 e2       	ldi	r24, 0x20	; 32
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 b6 08 	call	0x116c	; 0x116c <can_get_status>
     11a:	81 30       	cpi	r24, 0x01	; 1
     11c:	09 f4       	brne	.+2      	; 0x120 <can_check_general+0x40>
     11e:	a7 c0       	rjmp	.+334    	; 0x26e <can_check_general+0x18e>
	{
		if(message.status == MOB_RX_COMPLETED)
     120:	80 91 29 01 	lds	r24, 0x0129
     124:	80 32       	cpi	r24, 0x20	; 32
     126:	09 f0       	breq	.+2      	; 0x12a <can_check_general+0x4a>
     128:	80 c0       	rjmp	.+256    	; 0x22a <can_check_general+0x14a>
     12a:	a0 91 27 01 	lds	r26, 0x0127
     12e:	b0 91 28 01 	lds	r27, 0x0128
     132:	ce e3       	ldi	r28, 0x3E	; 62
     134:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     136:	e6 e3       	ldi	r30, 0x36	; 54
     138:	f1 e0       	ldi	r31, 0x01	; 1
     13a:	8d 91       	ld	r24, X+
     13c:	81 93       	st	Z+, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a message to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
     13e:	ec 17       	cp	r30, r28
     140:	fd 07       	cpc	r31, r29
     142:	d9 f7       	brne	.-10     	; 0x13a <can_check_general+0x5a>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
			
			if ((receive_arr[0] == 0xFF) && (receive_arr[1] == 0xFF) && (receive_arr[2] == 0xFF) && (receive_arr[3] == 0xFF)
     144:	80 91 36 01 	lds	r24, 0x0136
     148:	8f 3f       	cpi	r24, 0xFF	; 255
     14a:	a1 f5       	brne	.+104    	; 0x1b4 <can_check_general+0xd4>
     14c:	80 91 37 01 	lds	r24, 0x0137
     150:	8f 3f       	cpi	r24, 0xFF	; 255
     152:	09 f0       	breq	.+2      	; 0x156 <can_check_general+0x76>
     154:	89 c0       	rjmp	.+274    	; 0x268 <can_check_general+0x188>
     156:	80 91 38 01 	lds	r24, 0x0138
     15a:	8f 3f       	cpi	r24, 0xFF	; 255
     15c:	09 f0       	breq	.+2      	; 0x160 <can_check_general+0x80>
     15e:	84 c0       	rjmp	.+264    	; 0x268 <can_check_general+0x188>
     160:	80 91 39 01 	lds	r24, 0x0139
     164:	8f 3f       	cpi	r24, 0xFF	; 255
     166:	09 f0       	breq	.+2      	; 0x16a <can_check_general+0x8a>
     168:	7f c0       	rjmp	.+254    	; 0x268 <can_check_general+0x188>
			&& (receive_arr[4] == 0xFF) && (receive_arr[5] == 0xFF) && (receive_arr[6] == 0xFF) && (receive_arr[7] == 0xFF))
     16a:	80 91 3a 01 	lds	r24, 0x013A
     16e:	8f 3f       	cpi	r24, 0xFF	; 255
     170:	09 f0       	breq	.+2      	; 0x174 <can_check_general+0x94>
     172:	7a c0       	rjmp	.+244    	; 0x268 <can_check_general+0x188>
     174:	80 91 3b 01 	lds	r24, 0x013B
     178:	8f 3f       	cpi	r24, 0xFF	; 255
     17a:	09 f0       	breq	.+2      	; 0x17e <can_check_general+0x9e>
     17c:	75 c0       	rjmp	.+234    	; 0x268 <can_check_general+0x188>
     17e:	80 91 3c 01 	lds	r24, 0x013C
     182:	8f 3f       	cpi	r24, 0xFF	; 255
     184:	09 f0       	breq	.+2      	; 0x188 <can_check_general+0xa8>
     186:	70 c0       	rjmp	.+224    	; 0x268 <can_check_general+0x188>
     188:	80 91 3d 01 	lds	r24, 0x013D
     18c:	8f 3f       	cpi	r24, 0xFF	; 255
     18e:	09 f0       	breq	.+2      	; 0x192 <can_check_general+0xb2>
     190:	6b c0       	rjmp	.+214    	; 0x268 <can_check_general+0x188>
			{
				LED_toggle(LED3);	//Toggle LED3 when the appropriate message is received.
     192:	83 e0       	ldi	r24, 0x03	; 3
     194:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
				delay_ms(100);
     198:	84 e6       	ldi	r24, 0x64	; 100
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
				LED_toggle(LED3);
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
				delay_ms(100);
     1a6:	84 e6       	ldi	r24, 0x64	; 100
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
				send_now = 1;
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	80 93 2c 01 	sts	0x012C, r24
			}
			
			if ((receive_arr[0] == 0x55) && (receive_arr[1] == 0x55) && (receive_arr[2] == 0x55) && (receive_arr[3] == 0x55)
     1b4:	80 91 36 01 	lds	r24, 0x0136
     1b8:	85 35       	cpi	r24, 0x55	; 85
     1ba:	09 f0       	breq	.+2      	; 0x1be <can_check_general+0xde>
     1bc:	55 c0       	rjmp	.+170    	; 0x268 <can_check_general+0x188>
     1be:	80 91 37 01 	lds	r24, 0x0137
     1c2:	85 35       	cpi	r24, 0x55	; 85
     1c4:	09 f0       	breq	.+2      	; 0x1c8 <can_check_general+0xe8>
     1c6:	50 c0       	rjmp	.+160    	; 0x268 <can_check_general+0x188>
     1c8:	80 91 38 01 	lds	r24, 0x0138
     1cc:	85 35       	cpi	r24, 0x55	; 85
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <can_check_general+0xf2>
     1d0:	4b c0       	rjmp	.+150    	; 0x268 <can_check_general+0x188>
     1d2:	80 91 39 01 	lds	r24, 0x0139
     1d6:	85 35       	cpi	r24, 0x55	; 85
     1d8:	09 f0       	breq	.+2      	; 0x1dc <can_check_general+0xfc>
     1da:	46 c0       	rjmp	.+140    	; 0x268 <can_check_general+0x188>
			&& (receive_arr[4] == 0x55) && (receive_arr[5] == 0x55) && (receive_arr[6] == 0x55) && (receive_arr[7] == 0x55))
     1dc:	80 91 3a 01 	lds	r24, 0x013A
     1e0:	85 35       	cpi	r24, 0x55	; 85
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <can_check_general+0x106>
     1e4:	41 c0       	rjmp	.+130    	; 0x268 <can_check_general+0x188>
     1e6:	80 91 3b 01 	lds	r24, 0x013B
     1ea:	85 35       	cpi	r24, 0x55	; 85
     1ec:	e9 f5       	brne	.+122    	; 0x268 <can_check_general+0x188>
     1ee:	80 91 3c 01 	lds	r24, 0x013C
     1f2:	85 35       	cpi	r24, 0x55	; 85
     1f4:	c9 f5       	brne	.+114    	; 0x268 <can_check_general+0x188>
     1f6:	80 91 3d 01 	lds	r24, 0x013D
     1fa:	85 35       	cpi	r24, 0x55	; 85
     1fc:	a9 f5       	brne	.+106    	; 0x268 <can_check_general+0x188>
			{
				LED_toggle(LED7);	//Toggle LED7 when the appropriate message is received.
     1fe:	87 e0       	ldi	r24, 0x07	; 7
     200:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
				delay_ms(100);
     204:	84 e6       	ldi	r24, 0x64	; 100
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
				LED_toggle(LED7);
     20c:	87 e0       	ldi	r24, 0x07	; 7
     20e:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
				delay_ms(100);
     212:	84 e6       	ldi	r24, 0x64	; 100
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
				send_data = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 46 01 	sts	0x0146, r24
     220:	23 c0       	rjmp	.+70     	; 0x268 <can_check_general+0x188>
			}
			
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     222:	11 92       	st	Z+, r1
				LED_toggle(LED7);
				delay_ms(100);
				send_data = 1;
			}
			
			for (i = 0; i < 8; i ++)
     224:	ec 17       	cp	r30, r28
     226:	fd 07       	cpc	r31, r29
     228:	e1 f7       	brne	.-8      	; 0x222 <can_check_general+0x142>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data0[0]; // point message object to first element of data buffer
     22a:	8d e2       	ldi	r24, 0x2D	; 45
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	90 93 28 01 	sts	0x0128, r25
     232:	80 93 27 01 	sts	0x0127, r24
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     236:	10 92 2b 01 	sts	0x012B, r1
		message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     23a:	84 e1       	ldi	r24, 0x14	; 20
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	90 93 23 01 	sts	0x0123, r25
     242:	80 93 22 01 	sts	0x0122, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     246:	85 e0       	ldi	r24, 0x05	; 5
     248:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     24c:	88 e0       	ldi	r24, 0x08	; 8
     24e:	80 93 26 01 	sts	0x0126, r24
		mob_number = 0;
     252:	10 92 4f 01 	sts	0x014F, r1
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     256:	60 91 4f 01 	lds	r22, 0x014F
     25a:	80 e2       	ldi	r24, 0x20	; 32
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0e 94 8a 02 	call	0x514	; 0x514 <can_cmd>
     262:	81 11       	cpse	r24, r1
     264:	f8 cf       	rjmp	.-16     	; 0x256 <can_check_general+0x176>
     266:	03 c0       	rjmp	.+6      	; 0x26e <can_check_general+0x18e>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     268:	e6 e3       	ldi	r30, 0x36	; 54
     26a:	f1 e0       	ldi	r31, 0x01	; 1
     26c:	da cf       	rjmp	.-76     	; 0x222 <can_check_general+0x142>
		mob_number = 0;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <can_check_housekeep>:
/*																		*/
/*	This function checks to see if housekeeping has been requested, if  */
/*	it has, then we set the flag send_hk to 1.							*/
/************************************************************************/
void can_check_housekeep(void)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
	uint8_t i = 0;
	
	message.pt_data = &data5[0]; // point message object to first element of data buffer
     278:	87 e4       	ldi	r24, 0x47	; 71
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	90 93 28 01 	sts	0x0128, r25
     280:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     284:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;  // populate ID field with ID Tag
     288:	89 e1       	ldi	r24, 0x19	; 25
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	90 93 23 01 	sts	0x0123, r25
     290:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     294:	85 e0       	ldi	r24, 0x05	; 5
     296:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     29a:	98 e0       	ldi	r25, 0x08	; 8
     29c:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     2a0:	80 93 4f 01 	sts	0x014F, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
     2a4:	65 e0       	ldi	r22, 0x05	; 5
     2a6:	80 e2       	ldi	r24, 0x20	; 32
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 b6 08 	call	0x116c	; 0x116c <can_get_status>
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <can_check_housekeep+0x40>
     2b2:	6f c0       	rjmp	.+222    	; 0x392 <can_check_housekeep+0x11e>
	{
		if(message.status == MOB_RX_COMPLETED)
     2b4:	80 91 29 01 	lds	r24, 0x0129
     2b8:	80 32       	cpi	r24, 0x20	; 32
     2ba:	09 f0       	breq	.+2      	; 0x2be <can_check_housekeep+0x4a>
     2bc:	48 c0       	rjmp	.+144    	; 0x34e <can_check_housekeep+0xda>
     2be:	a0 91 27 01 	lds	r26, 0x0127
     2c2:	b0 91 28 01 	lds	r27, 0x0128
     2c6:	ce e3       	ldi	r28, 0x3E	; 62
     2c8:	d1 e0       	ldi	r29, 0x01	; 1
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     2ca:	e6 e3       	ldi	r30, 0x36	; 54
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	8d 91       	ld	r24, X+
     2d0:	81 93       	st	Z+, r24
	
	if(can_get_status(&message, mob_number) != CAN_STATUS_NOT_COMPLETED) // wait for a housekeeping request to come in.
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
     2d2:	ec 17       	cp	r30, r28
     2d4:	fd 07       	cpc	r31, r29
     2d6:	d9 f7       	brne	.-10     	; 0x2ce <can_check_housekeep+0x5a>
			{
				receive_arr[i] = *(message.pt_data + i);
			}
			
			if ((receive_arr[0] == 0x0F) && (receive_arr[1] == 0x0F) && (receive_arr[2] == 0x0F) && (receive_arr[3] == 0x0F)
     2d8:	80 91 36 01 	lds	r24, 0x0136
     2dc:	8f 30       	cpi	r24, 0x0F	; 15
     2de:	09 f0       	breq	.+2      	; 0x2e2 <can_check_housekeep+0x6e>
     2e0:	55 c0       	rjmp	.+170    	; 0x38c <can_check_housekeep+0x118>
     2e2:	80 91 37 01 	lds	r24, 0x0137
     2e6:	8f 30       	cpi	r24, 0x0F	; 15
     2e8:	09 f0       	breq	.+2      	; 0x2ec <can_check_housekeep+0x78>
     2ea:	50 c0       	rjmp	.+160    	; 0x38c <can_check_housekeep+0x118>
     2ec:	80 91 38 01 	lds	r24, 0x0138
     2f0:	8f 30       	cpi	r24, 0x0F	; 15
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <can_check_housekeep+0x82>
     2f4:	4b c0       	rjmp	.+150    	; 0x38c <can_check_housekeep+0x118>
     2f6:	80 91 39 01 	lds	r24, 0x0139
     2fa:	8f 30       	cpi	r24, 0x0F	; 15
     2fc:	09 f0       	breq	.+2      	; 0x300 <can_check_housekeep+0x8c>
     2fe:	46 c0       	rjmp	.+140    	; 0x38c <can_check_housekeep+0x118>
			&& (receive_arr[4] == 0x0F) && (receive_arr[5] == 0x0F) && (receive_arr[6] == 0x0F) && (receive_arr[7] == 0x0F))
     300:	80 91 3a 01 	lds	r24, 0x013A
     304:	8f 30       	cpi	r24, 0x0F	; 15
     306:	09 f0       	breq	.+2      	; 0x30a <can_check_housekeep+0x96>
     308:	41 c0       	rjmp	.+130    	; 0x38c <can_check_housekeep+0x118>
     30a:	80 91 3b 01 	lds	r24, 0x013B
     30e:	8f 30       	cpi	r24, 0x0F	; 15
     310:	e9 f5       	brne	.+122    	; 0x38c <can_check_housekeep+0x118>
     312:	80 91 3c 01 	lds	r24, 0x013C
     316:	8f 30       	cpi	r24, 0x0F	; 15
     318:	c9 f5       	brne	.+114    	; 0x38c <can_check_housekeep+0x118>
     31a:	80 91 3d 01 	lds	r24, 0x013D
     31e:	8f 30       	cpi	r24, 0x0F	; 15
     320:	a9 f5       	brne	.+106    	; 0x38c <can_check_housekeep+0x118>
			{
				LED_toggle(LED6);	//Toggle LED5 when housekeeping was requested.
     322:	86 e0       	ldi	r24, 0x06	; 6
     324:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
				delay_ms(100);
     328:	84 e6       	ldi	r24, 0x64	; 100
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
				LED_toggle(LED6);
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
				delay_ms(100);
     336:	84 e6       	ldi	r24, 0x64	; 100
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
				send_hk = 1;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 35 01 	sts	0x0135, r24
     344:	23 c0       	rjmp	.+70     	; 0x38c <can_check_housekeep+0x118>
			}
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
     346:	11 92       	st	Z+, r1
				delay_ms(100);
				LED_toggle(LED6);
				delay_ms(100);
				send_hk = 1;
			}
			for (i = 0; i < 8; i ++)
     348:	ec 17       	cp	r30, r28
     34a:	fd 07       	cpc	r31, r29
     34c:	e1 f7       	brne	.-8      	; 0x346 <can_check_housekeep+0xd2>
			{
				receive_arr[i] = 0;			// Reset the message array to zero after each message.
			}
		}
		message.pt_data = &data5[0]; // point message object to first element of data buffer
     34e:	87 e4       	ldi	r24, 0x47	; 71
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	90 93 28 01 	sts	0x0128, r25
     356:	80 93 27 01 	sts	0x0127, r24
		message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     35a:	10 92 2b 01 	sts	0x012B, r1
		message.id.std = SUB0_ID5;  // populate ID field with ID Tag
     35e:	89 e1       	ldi	r24, 0x19	; 25
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	90 93 23 01 	sts	0x0123, r25
     366:	80 93 22 01 	sts	0x0122, r24
		message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     36a:	85 e0       	ldi	r24, 0x05	; 5
     36c:	80 93 21 01 	sts	0x0121, r24
		message.dlc = 8;			 // Max length of a CAN message.
     370:	98 e0       	ldi	r25, 0x08	; 8
     372:	90 93 26 01 	sts	0x0126, r25
		mob_number = 5;
     376:	80 93 4f 01 	sts	0x014F, r24
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     37a:	60 91 4f 01 	lds	r22, 0x014F
     37e:	80 e2       	ldi	r24, 0x20	; 32
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	0e 94 8a 02 	call	0x514	; 0x514 <can_cmd>
     386:	81 11       	cpse	r24, r1
     388:	f8 cf       	rjmp	.-16     	; 0x37a <can_check_housekeep+0x106>
     38a:	03 c0       	rjmp	.+6      	; 0x392 <can_check_housekeep+0x11e>
	{
		if(message.status == MOB_RX_COMPLETED)
		{
			for (i = 0; i < 8; i ++)
			{
				receive_arr[i] = *(message.pt_data + i);
     38c:	e6 e3       	ldi	r30, 0x36	; 54
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	da cf       	rjmp	.-76     	; 0x346 <can_check_housekeep+0xd2>
		mob_number = 5;
		
		while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
	}
	return;
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <can_send_message>:

void can_send_message(uint8_t* data_array, uint8_t id)
{
	uint8_t i = 0;

	message.pt_data = &data4[0]; // point message object to first element of data buffer
     398:	28 e1       	ldi	r18, 0x18	; 24
     39a:	31 e0       	ldi	r19, 0x01	; 1
     39c:	30 93 28 01 	sts	0x0128, r19
     3a0:	20 93 27 01 	sts	0x0127, r18
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     3a4:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = id;  // populate ID field with ID Tag
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	70 93 23 01 	sts	0x0123, r23
     3ae:	60 93 22 01 	sts	0x0122, r22
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
     3b2:	22 e0       	ldi	r18, 0x02	; 2
     3b4:	20 93 21 01 	sts	0x0121, r18
	message.dlc = 8;			 // Max length of a CAN message.
     3b8:	28 e0       	ldi	r18, 0x08	; 8
     3ba:	20 93 26 01 	sts	0x0126, r18
	mob_number = 4;
     3be:	24 e0       	ldi	r18, 0x04	; 4
     3c0:	20 93 4f 01 	sts	0x014F, r18
     3c4:	dc 01       	movw	r26, r24
     3c6:	e8 e1       	ldi	r30, 0x18	; 24
     3c8:	f1 e0       	ldi	r31, 0x01	; 1
     3ca:	80 e2       	ldi	r24, 0x20	; 32
     3cc:	91 e0       	ldi	r25, 0x01	; 1
	
	for (i = 0; i < 8; i ++)
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
     3ce:	2d 91       	ld	r18, X+
     3d0:	21 93       	st	Z+, r18
	message.id.std = id;  // populate ID field with ID Tag
	message.cmd = CMD_TX_DATA;   // assign this as a transmitting message object.
	message.dlc = 8;			 // Max length of a CAN message.
	mob_number = 4;
	
	for (i = 0; i < 8; i ++)
     3d2:	e8 17       	cp	r30, r24
     3d4:	f9 07       	cpc	r31, r25
     3d6:	d9 f7       	brne	.-10     	; 0x3ce <can_send_message+0x36>
	{
		data4[i] = *(data_array + i) ;		// Message to be sent back to the OBC.
	}
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb4 to configure
     3d8:	60 91 4f 01 	lds	r22, 0x014F
     3dc:	80 e2       	ldi	r24, 0x20	; 32
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 8a 02 	call	0x514	; 0x514 <can_cmd>
     3e4:	81 11       	cpse	r24, r1
     3e6:	f8 cf       	rjmp	.-16     	; 0x3d8 <can_send_message+0x40>

	while(can_get_status(&message, mob_number) == CAN_STATUS_NOT_COMPLETED); // wait for a message to send or fail.
     3e8:	60 91 4f 01 	lds	r22, 0x014F
     3ec:	80 e2       	ldi	r24, 0x20	; 32
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 b6 08 	call	0x116c	; 0x116c <can_get_status>
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	c1 f3       	breq	.-16     	; 0x3e8 <can_send_message+0x50>

	return;
}
     3f8:	08 95       	ret

000003fa <can_init_mobs>:

void can_init_mobs(void)
{
	/* INITIALIZE MOB0 */

	message.pt_data = &data0[0]; // point message object to first element of data buffer
     3fa:	8d e2       	ldi	r24, 0x2D	; 45
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	90 93 28 01 	sts	0x0128, r25
     402:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;		 // standard CAN frame type (2.0A)
     406:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID0;  // populate ID field with ID Tag
     40a:	84 e1       	ldi	r24, 0x14	; 20
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	90 93 23 01 	sts	0x0123, r25
     412:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;   // assign this as a receiving message object.
     416:	85 e0       	ldi	r24, 0x05	; 5
     418:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;			 // Max length of a CAN message.
     41c:	88 e0       	ldi	r24, 0x08	; 8
     41e:	80 93 26 01 	sts	0x0126, r24
	mob_number = 0;
     422:	10 92 4f 01 	sts	0x014F, r1
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOb to configure
     426:	60 91 4f 01 	lds	r22, 0x014F
     42a:	80 e2       	ldi	r24, 0x20	; 32
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 8a 02 	call	0x514	; 0x514 <can_cmd>
     432:	81 11       	cpse	r24, r1
     434:	f8 cf       	rjmp	.-16     	; 0x426 <can_init_mobs+0x2c>
	
	/* INITIALIZE MOB5 */
	
	message.pt_data = &data5[0];	// point message object to first element of data buffer
     436:	87 e4       	ldi	r24, 0x47	; 71
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	90 93 28 01 	sts	0x0128, r25
     43e:	80 93 27 01 	sts	0x0127, r24
	message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
     442:	10 92 2b 01 	sts	0x012B, r1
	message.id.std = SUB0_ID5;		// populate ID field with ID Tag
     446:	89 e1       	ldi	r24, 0x19	; 25
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	90 93 23 01 	sts	0x0123, r25
     44e:	80 93 22 01 	sts	0x0122, r24
	message.cmd = CMD_RX_DATA;		// assign this as a producer message object (Housekeeping MOB).
     452:	85 e0       	ldi	r24, 0x05	; 5
     454:	80 93 21 01 	sts	0x0121, r24
	message.dlc = 8;				// Max length of a CAN message.
     458:	98 e0       	ldi	r25, 0x08	; 8
     45a:	90 93 26 01 	sts	0x0126, r25
	mob_number = 5;
     45e:	80 93 4f 01 	sts	0x014F, r24
	
	while(can_cmd(&message, mob_number) != CAN_CMD_ACCEPTED); // wait for MOB to configure
     462:	60 91 4f 01 	lds	r22, 0x014F
     466:	80 e2       	ldi	r24, 0x20	; 32
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 8a 02 	call	0x514	; 0x514 <can_cmd>
     46e:	81 11       	cpse	r24, r1
     470:	f8 cf       	rjmp	.-16     	; 0x462 <can_init_mobs+0x68>
}
     472:	08 95       	ret

00000474 <can_clear_all_mob>:
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     474:	80 e0       	ldi	r24, 0x00	; 0
    {
        CANPAGE = (mob_number << 4);    //! Page index
     476:	ad ee       	ldi	r26, 0xED	; 237
     478:	b0 e0       	ldi	r27, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     47a:	3e ee       	ldi	r19, 0xEE	; 238
     47c:	20 e0       	ldi	r18, 0x00	; 0
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     47e:	98 2f       	mov	r25, r24
     480:	92 95       	swap	r25
     482:	90 7f       	andi	r25, 0xF0	; 240
     484:	9c 93       	st	X, r25
        Can_clear_mob();                //! All MOb Registers=0
     486:	e3 2f       	mov	r30, r19
     488:	f2 2f       	mov	r31, r18
     48a:	11 92       	st	Z+, r1
     48c:	e8 3f       	cpi	r30, 0xF8	; 248
     48e:	f1 05       	cpc	r31, r1
     490:	e1 f7       	brne	.-8      	; 0x48a <can_clear_all_mob+0x16>
uint8_t  mob_number;
/*
    uint8_t  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
     492:	8f 5f       	subi	r24, 0xFF	; 255
     494:	86 30       	cpi	r24, 0x06	; 6
     496:	99 f7       	brne	.-26     	; 0x47e <can_clear_all_mob+0xa>
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}
     498:	08 95       	ret

0000049a <can_get_mob_status>:
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     49a:	80 91 ef 00 	lds	r24, 0x00EF
     49e:	80 7c       	andi	r24, 0xC0	; 192
     4a0:	61 f0       	breq	.+24     	; 0x4ba <can_get_mob_status+0x20>

    canstmob_copy = CANSTMOB; // Copy for test integrity
     4a2:	80 91 ee 00 	lds	r24, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     4a6:	98 2f       	mov	r25, r24
     4a8:	90 7e       	andi	r25, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     4aa:	28 2f       	mov	r18, r24
     4ac:	20 76       	andi	r18, 0x60	; 96
     4ae:	20 32       	cpi	r18, 0x20	; 32
     4b0:	31 f0       	breq	.+12     	; 0x4be <can_get_mob_status+0x24>
     4b2:	90 34       	cpi	r25, 0x40	; 64
     4b4:	31 f0       	breq	.+12     	; 0x4c2 <can_get_mob_status+0x28>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     4b6:	8f 71       	andi	r24, 0x1F	; 31
     4b8:	08 95       	ret
uint8_t can_get_mob_status(void)
{
    uint8_t mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	08 95       	ret
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     4be:	89 2f       	mov	r24, r25
     4c0:	08 95       	ret
     4c2:	89 2f       	mov	r24, r25
    mob_status = canstmob_copy & ERR_MOB_MSK;
    if (mob_status != 0) { return(mob_status); }

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     4c4:	08 95       	ret

000004c6 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     4c6:	fc 01       	movw	r30, r24
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     4c8:	80 e0       	ldi	r24, 0x00	; 0
    {
        *(p_can_message_data + data_index) = CANMSG;
     4ca:	aa ef       	ldi	r26, 0xFA	; 250
     4cc:	b0 e0       	ldi	r27, 0x00	; 0
     4ce:	9c 91       	ld	r25, X
     4d0:	91 93       	st	Z+, r25
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (8); data_index++)
     4d2:	8f 5f       	subi	r24, 0xFF	; 255
     4d4:	88 30       	cpi	r24, 0x08	; 8
     4d6:	d9 f7       	brne	.-10     	; 0x4ce <can_get_data+0x8>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     4d8:	08 95       	ret

000004da <can_fixed_baudrate>:
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
    Can_reset();
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 d8 00 	sts	0x00D8, r24
    Can_conf_bt();
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	80 93 e2 00 	sts	0x00E2, r24
     4e6:	8c e0       	ldi	r24, 0x0C	; 12
     4e8:	80 93 e3 00 	sts	0x00E3, r24
     4ec:	87 e3       	ldi	r24, 0x37	; 55
     4ee:	80 93 e4 00 	sts	0x00E4, r24
    return 1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	08 95       	ret

000004f6 <can_init>:
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     4f6:	0e 94 6d 02 	call	0x4da	; 0x4da <can_fixed_baudrate>
     4fa:	88 23       	and	r24, r24
     4fc:	49 f0       	breq	.+18     	; 0x510 <can_init+0x1a>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     4fe:	0e 94 3a 02 	call	0x474	; 0x474 <can_clear_all_mob>
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     502:	e8 ed       	ldi	r30, 0xD8	; 216
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	82 60       	ori	r24, 0x02	; 2
     50a:	80 83       	st	Z, r24
    return (1);
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	08 95       	ret
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     510:	80 e0       	ldi	r24, 0x00	; 0
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
    return (1);
}
     512:	08 95       	ret

00000514 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd, uint8_t mob_number)
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	1f 92       	push	r1
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	dc 01       	movw	r26, r24
  uint8_t mob_handle, cpt;
  uint8_t u8_temp;
  
  if (cmd->cmd == CMD_ABORT)
     520:	11 96       	adiw	r26, 0x01	; 1
     522:	8c 91       	ld	r24, X
     524:	11 97       	sbiw	r26, 0x01	; 1
     526:	8c 30       	cpi	r24, 0x0C	; 12
     528:	b1 f4       	brne	.+44     	; 0x556 <can_cmd+0x42>
  {
    if (cmd->status == MOB_PENDING)
     52a:	19 96       	adiw	r26, 0x09	; 9
     52c:	8c 91       	ld	r24, X
     52e:	19 97       	sbiw	r26, 0x09	; 9
     530:	80 36       	cpi	r24, 0x60	; 96
     532:	69 f4       	brne	.+26     	; 0x54e <can_cmd+0x3a>
    {
      // Rx or Tx not yet performed
      Can_set_mob(mob_number);
     534:	86 2f       	mov	r24, r22
     536:	82 95       	swap	r24
     538:	80 7f       	andi	r24, 0xF0	; 240
     53a:	80 93 ed 00 	sts	0x00ED, r24
      Can_mob_abort();
     53e:	ef ee       	ldi	r30, 0xEF	; 239
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	8f 73       	andi	r24, 0x3F	; 63
     546:	80 83       	st	Z, r24
      Can_clear_status_mob();       // To be sure!
     548:	10 92 ee 00 	sts	0x00EE, r1
      cmd->handle = mob_number;
     54c:	6c 93       	st	X, r22
    }
    cmd->status = STATUS_CLEARED; 
     54e:	19 96       	adiw	r26, 0x09	; 9
     550:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	07 c6       	rjmp	.+3086   	; 0x1164 <__stack+0x865>
    }
    cmd->status = STATUS_CLEARED; 
  }
  else
  {
	Can_set_mob(mob_number);
     556:	86 2f       	mov	r24, r22
     558:	82 95       	swap	r24
     55a:	80 7f       	andi	r24, 0xF0	; 240
     55c:	80 93 ed 00 	sts	0x00ED, r24
    if ((CANCDMOB & 0xC0) == 0x00)	// MOb is disabled.
     560:	80 91 ef 00 	lds	r24, 0x00EF
     564:	80 7c       	andi	r24, 0xC0	; 192
     566:	09 f0       	breq	.+2      	; 0x56a <can_cmd+0x56>
     568:	f9 c5       	rjmp	.+3058   	; 0x115c <__stack+0x85d>
    {
      cmd->status = MOB_PENDING; 
     56a:	80 e6       	ldi	r24, 0x60	; 96
     56c:	19 96       	adiw	r26, 0x09	; 9
     56e:	8c 93       	st	X, r24
     570:	19 97       	sbiw	r26, 0x09	; 9
      cmd->handle = mob_number;
     572:	6c 93       	st	X, r22
      Can_clear_mob();
     574:	ee ee       	ldi	r30, 0xEE	; 238
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	11 92       	st	Z+, r1
     57a:	e8 3f       	cpi	r30, 0xF8	; 248
     57c:	f1 05       	cpc	r31, r1
     57e:	e1 f7       	brne	.-8      	; 0x578 <can_cmd+0x64>
          
      switch (cmd->cmd)
     580:	11 96       	adiw	r26, 0x01	; 1
     582:	4c 91       	ld	r20, X
     584:	11 97       	sbiw	r26, 0x01	; 1
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	fa 01       	movw	r30, r20
     58a:	31 97       	sbiw	r30, 0x01	; 1
     58c:	eb 30       	cpi	r30, 0x0B	; 11
     58e:	f1 05       	cpc	r31, r1
     590:	08 f0       	brcs	.+2      	; 0x594 <can_cmd+0x80>
     592:	e0 c5       	rjmp	.+3008   	; 0x1154 <__stack+0x855>
     594:	e2 5c       	subi	r30, 0xC2	; 194
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__tablejump2__>
          Can_set_idemsk();
          Can_config_rx();       
          break;
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     59c:	16 96       	adiw	r26, 0x06	; 6
     59e:	8c 91       	ld	r24, X
     5a0:	16 97       	sbiw	r26, 0x06	; 6
     5a2:	81 11       	cpse	r24, r1
     5a4:	b7 c4       	rjmp	.+2414   	; 0xf14 <__stack+0x615>
     5a6:	c8 c4       	rjmp	.+2448   	; 0xf38 <__stack+0x639>
          
      switch (cmd->cmd)
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     5a8:	1b 96       	adiw	r26, 0x0b	; 11
     5aa:	8c 91       	ld	r24, X
     5ac:	1b 97       	sbiw	r26, 0x0b	; 11
     5ae:	88 23       	and	r24, r24
     5b0:	d9 f1       	breq	.+118    	; 0x628 <can_cmd+0x114>
     5b2:	14 96       	adiw	r26, 0x04	; 4
     5b4:	9c 91       	ld	r25, X
     5b6:	14 97       	sbiw	r26, 0x04	; 4
     5b8:	92 95       	swap	r25
     5ba:	96 95       	lsr	r25
     5bc:	97 70       	andi	r25, 0x07	; 7
     5be:	15 96       	adiw	r26, 0x05	; 5
     5c0:	8c 91       	ld	r24, X
     5c2:	15 97       	sbiw	r26, 0x05	; 5
     5c4:	88 0f       	add	r24, r24
     5c6:	88 0f       	add	r24, r24
     5c8:	88 0f       	add	r24, r24
     5ca:	89 0f       	add	r24, r25
     5cc:	80 93 f3 00 	sts	0x00F3, r24
     5d0:	13 96       	adiw	r26, 0x03	; 3
     5d2:	9c 91       	ld	r25, X
     5d4:	13 97       	sbiw	r26, 0x03	; 3
     5d6:	92 95       	swap	r25
     5d8:	96 95       	lsr	r25
     5da:	97 70       	andi	r25, 0x07	; 7
     5dc:	14 96       	adiw	r26, 0x04	; 4
     5de:	8c 91       	ld	r24, X
     5e0:	14 97       	sbiw	r26, 0x04	; 4
     5e2:	88 0f       	add	r24, r24
     5e4:	88 0f       	add	r24, r24
     5e6:	88 0f       	add	r24, r24
     5e8:	89 0f       	add	r24, r25
     5ea:	80 93 f2 00 	sts	0x00F2, r24
     5ee:	12 96       	adiw	r26, 0x02	; 2
     5f0:	9c 91       	ld	r25, X
     5f2:	12 97       	sbiw	r26, 0x02	; 2
     5f4:	92 95       	swap	r25
     5f6:	96 95       	lsr	r25
     5f8:	97 70       	andi	r25, 0x07	; 7
     5fa:	13 96       	adiw	r26, 0x03	; 3
     5fc:	8c 91       	ld	r24, X
     5fe:	13 97       	sbiw	r26, 0x03	; 3
     600:	88 0f       	add	r24, r24
     602:	88 0f       	add	r24, r24
     604:	88 0f       	add	r24, r24
     606:	89 0f       	add	r24, r25
     608:	80 93 f1 00 	sts	0x00F1, r24
     60c:	12 96       	adiw	r26, 0x02	; 2
     60e:	8c 91       	ld	r24, X
     610:	12 97       	sbiw	r26, 0x02	; 2
     612:	88 0f       	add	r24, r24
     614:	88 0f       	add	r24, r24
     616:	88 0f       	add	r24, r24
     618:	80 93 f0 00 	sts	0x00F0, r24
     61c:	ef ee       	ldi	r30, 0xEF	; 239
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	80 61       	ori	r24, 0x10	; 16
     624:	80 83       	st	Z, r24
     626:	1c c0       	rjmp	.+56     	; 0x660 <can_cmd+0x14c>
          else              { Can_set_std_id(cmd->id.std);}
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	8c 91       	ld	r24, X
     62c:	12 97       	sbiw	r26, 0x02	; 2
     62e:	86 95       	lsr	r24
     630:	86 95       	lsr	r24
     632:	86 95       	lsr	r24
     634:	13 96       	adiw	r26, 0x03	; 3
     636:	9c 91       	ld	r25, X
     638:	13 97       	sbiw	r26, 0x03	; 3
     63a:	20 e2       	ldi	r18, 0x20	; 32
     63c:	92 9f       	mul	r25, r18
     63e:	80 0d       	add	r24, r0
     640:	11 24       	eor	r1, r1
     642:	80 93 f3 00 	sts	0x00F3, r24
     646:	12 96       	adiw	r26, 0x02	; 2
     648:	8c 91       	ld	r24, X
     64a:	12 97       	sbiw	r26, 0x02	; 2
     64c:	82 95       	swap	r24
     64e:	88 0f       	add	r24, r24
     650:	80 7e       	andi	r24, 0xE0	; 224
     652:	80 93 f2 00 	sts	0x00F2, r24
     656:	ef ee       	ldi	r30, 0xEF	; 239
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	8f 7e       	andi	r24, 0xEF	; 239
     65e:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     660:	16 96       	adiw	r26, 0x06	; 6
     662:	8c 91       	ld	r24, X
     664:	16 97       	sbiw	r26, 0x06	; 6
     666:	88 23       	and	r24, r24
     668:	91 f0       	breq	.+36     	; 0x68e <can_cmd+0x17a>
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	8a ef       	ldi	r24, 0xFA	; 250
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	17 96       	adiw	r26, 0x07	; 7
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	18 97       	sbiw	r26, 0x08	; 8
     678:	e2 0f       	add	r30, r18
     67a:	f1 1d       	adc	r31, r1
     67c:	30 81       	ld	r19, Z
     67e:	fc 01       	movw	r30, r24
     680:	30 83       	st	Z, r19
     682:	2f 5f       	subi	r18, 0xFF	; 255
     684:	16 96       	adiw	r26, 0x06	; 6
     686:	3c 91       	ld	r19, X
     688:	16 97       	sbiw	r26, 0x06	; 6
     68a:	23 17       	cp	r18, r19
     68c:	88 f3       	brcs	.-30     	; 0x670 <can_cmd+0x15c>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     68e:	1a 96       	adiw	r26, 0x0a	; 10
     690:	8c 91       	ld	r24, X
     692:	1a 97       	sbiw	r26, 0x0a	; 10
     694:	88 23       	and	r24, r24
     696:	31 f0       	breq	.+12     	; 0x6a4 <can_cmd+0x190>
     698:	e0 ef       	ldi	r30, 0xF0	; 240
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	84 60       	ori	r24, 0x04	; 4
     6a0:	80 83       	st	Z, r24
     6a2:	05 c0       	rjmp	.+10     	; 0x6ae <can_cmd+0x19a>
            else Can_clear_rtr();    
     6a4:	e0 ef       	ldi	r30, 0xF0	; 240
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	8b 7f       	andi	r24, 0xFB	; 251
     6ac:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     6ae:	ef ee       	ldi	r30, 0xEF	; 239
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	90 81       	ld	r25, Z
     6b4:	16 96       	adiw	r26, 0x06	; 6
     6b6:	8c 91       	ld	r24, X
     6b8:	89 2b       	or	r24, r25
     6ba:	80 83       	st	Z, r24
          Can_config_tx();
     6bc:	80 81       	ld	r24, Z
     6be:	8f 73       	andi	r24, 0x3F	; 63
     6c0:	80 83       	st	Z, r24
     6c2:	80 81       	ld	r24, Z
     6c4:	80 64       	ori	r24, 0x40	; 64
     6c6:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          if (cmd->ctrl.rtr) Can_set_rtr(); 
            else Can_clear_rtr();    
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     6ca:	4c c5       	rjmp	.+2712   	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     6cc:	1b 96       	adiw	r26, 0x0b	; 11
     6ce:	8c 91       	ld	r24, X
     6d0:	1b 97       	sbiw	r26, 0x0b	; 11
     6d2:	88 23       	and	r24, r24
     6d4:	d9 f1       	breq	.+118    	; 0x74c <can_cmd+0x238>
     6d6:	14 96       	adiw	r26, 0x04	; 4
     6d8:	9c 91       	ld	r25, X
     6da:	14 97       	sbiw	r26, 0x04	; 4
     6dc:	92 95       	swap	r25
     6de:	96 95       	lsr	r25
     6e0:	97 70       	andi	r25, 0x07	; 7
     6e2:	15 96       	adiw	r26, 0x05	; 5
     6e4:	8c 91       	ld	r24, X
     6e6:	15 97       	sbiw	r26, 0x05	; 5
     6e8:	88 0f       	add	r24, r24
     6ea:	88 0f       	add	r24, r24
     6ec:	88 0f       	add	r24, r24
     6ee:	89 0f       	add	r24, r25
     6f0:	80 93 f3 00 	sts	0x00F3, r24
     6f4:	13 96       	adiw	r26, 0x03	; 3
     6f6:	9c 91       	ld	r25, X
     6f8:	13 97       	sbiw	r26, 0x03	; 3
     6fa:	92 95       	swap	r25
     6fc:	96 95       	lsr	r25
     6fe:	97 70       	andi	r25, 0x07	; 7
     700:	14 96       	adiw	r26, 0x04	; 4
     702:	8c 91       	ld	r24, X
     704:	14 97       	sbiw	r26, 0x04	; 4
     706:	88 0f       	add	r24, r24
     708:	88 0f       	add	r24, r24
     70a:	88 0f       	add	r24, r24
     70c:	89 0f       	add	r24, r25
     70e:	80 93 f2 00 	sts	0x00F2, r24
     712:	12 96       	adiw	r26, 0x02	; 2
     714:	9c 91       	ld	r25, X
     716:	12 97       	sbiw	r26, 0x02	; 2
     718:	92 95       	swap	r25
     71a:	96 95       	lsr	r25
     71c:	97 70       	andi	r25, 0x07	; 7
     71e:	13 96       	adiw	r26, 0x03	; 3
     720:	8c 91       	ld	r24, X
     722:	13 97       	sbiw	r26, 0x03	; 3
     724:	88 0f       	add	r24, r24
     726:	88 0f       	add	r24, r24
     728:	88 0f       	add	r24, r24
     72a:	89 0f       	add	r24, r25
     72c:	80 93 f1 00 	sts	0x00F1, r24
     730:	12 96       	adiw	r26, 0x02	; 2
     732:	8c 91       	ld	r24, X
     734:	12 97       	sbiw	r26, 0x02	; 2
     736:	88 0f       	add	r24, r24
     738:	88 0f       	add	r24, r24
     73a:	88 0f       	add	r24, r24
     73c:	80 93 f0 00 	sts	0x00F0, r24
     740:	ef ee       	ldi	r30, 0xEF	; 239
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	80 61       	ori	r24, 0x10	; 16
     748:	80 83       	st	Z, r24
     74a:	1c c0       	rjmp	.+56     	; 0x784 <can_cmd+0x270>
          else              { Can_set_std_id(cmd->id.std);}
     74c:	12 96       	adiw	r26, 0x02	; 2
     74e:	8c 91       	ld	r24, X
     750:	12 97       	sbiw	r26, 0x02	; 2
     752:	86 95       	lsr	r24
     754:	86 95       	lsr	r24
     756:	86 95       	lsr	r24
     758:	13 96       	adiw	r26, 0x03	; 3
     75a:	9c 91       	ld	r25, X
     75c:	13 97       	sbiw	r26, 0x03	; 3
     75e:	f0 e2       	ldi	r31, 0x20	; 32
     760:	9f 9f       	mul	r25, r31
     762:	80 0d       	add	r24, r0
     764:	11 24       	eor	r1, r1
     766:	80 93 f3 00 	sts	0x00F3, r24
     76a:	12 96       	adiw	r26, 0x02	; 2
     76c:	8c 91       	ld	r24, X
     76e:	12 97       	sbiw	r26, 0x02	; 2
     770:	82 95       	swap	r24
     772:	88 0f       	add	r24, r24
     774:	80 7e       	andi	r24, 0xE0	; 224
     776:	80 93 f2 00 	sts	0x00F2, r24
     77a:	ef ee       	ldi	r30, 0xEF	; 239
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	8f 7e       	andi	r24, 0xEF	; 239
     782:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     784:	16 96       	adiw	r26, 0x06	; 6
     786:	8c 91       	ld	r24, X
     788:	16 97       	sbiw	r26, 0x06	; 6
     78a:	88 23       	and	r24, r24
     78c:	91 f0       	breq	.+36     	; 0x7b2 <can_cmd+0x29e>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	8a ef       	ldi	r24, 0xFA	; 250
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	17 96       	adiw	r26, 0x07	; 7
     796:	ed 91       	ld	r30, X+
     798:	fc 91       	ld	r31, X
     79a:	18 97       	sbiw	r26, 0x08	; 8
     79c:	e2 0f       	add	r30, r18
     79e:	f1 1d       	adc	r31, r1
     7a0:	30 81       	ld	r19, Z
     7a2:	fc 01       	movw	r30, r24
     7a4:	30 83       	st	Z, r19
     7a6:	2f 5f       	subi	r18, 0xFF	; 255
     7a8:	16 96       	adiw	r26, 0x06	; 6
     7aa:	3c 91       	ld	r19, X
     7ac:	16 97       	sbiw	r26, 0x06	; 6
     7ae:	23 17       	cp	r18, r19
     7b0:	88 f3       	brcs	.-30     	; 0x794 <can_cmd+0x280>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     7b2:	1a 96       	adiw	r26, 0x0a	; 10
     7b4:	1c 92       	st	X, r1
     7b6:	1a 97       	sbiw	r26, 0x0a	; 10
     7b8:	e0 ef       	ldi	r30, 0xF0	; 240
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	8b 7f       	andi	r24, 0xFB	; 251
     7c0:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     7c2:	ef ee       	ldi	r30, 0xEF	; 239
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	90 81       	ld	r25, Z
     7c8:	16 96       	adiw	r26, 0x06	; 6
     7ca:	8c 91       	ld	r24, X
     7cc:	89 2b       	or	r24, r25
     7ce:	80 83       	st	Z, r24
          Can_config_tx();
     7d0:	80 81       	ld	r24, Z
     7d2:	8f 73       	andi	r24, 0x3F	; 63
     7d4:	80 83       	st	Z, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	80 64       	ori	r24, 0x40	; 64
     7da:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     7dc:	80 e0       	ldi	r24, 0x00	; 0
          else              { Can_set_std_id(cmd->id.std);}
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
          cmd->ctrl.rtr=0; Can_clear_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     7de:	c2 c4       	rjmp	.+2436   	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7e0:	1b 96       	adiw	r26, 0x0b	; 11
     7e2:	8c 91       	ld	r24, X
     7e4:	1b 97       	sbiw	r26, 0x0b	; 11
     7e6:	88 23       	and	r24, r24
     7e8:	d9 f1       	breq	.+118    	; 0x860 <can_cmd+0x34c>
     7ea:	14 96       	adiw	r26, 0x04	; 4
     7ec:	9c 91       	ld	r25, X
     7ee:	14 97       	sbiw	r26, 0x04	; 4
     7f0:	92 95       	swap	r25
     7f2:	96 95       	lsr	r25
     7f4:	97 70       	andi	r25, 0x07	; 7
     7f6:	15 96       	adiw	r26, 0x05	; 5
     7f8:	8c 91       	ld	r24, X
     7fa:	15 97       	sbiw	r26, 0x05	; 5
     7fc:	88 0f       	add	r24, r24
     7fe:	88 0f       	add	r24, r24
     800:	88 0f       	add	r24, r24
     802:	89 0f       	add	r24, r25
     804:	80 93 f3 00 	sts	0x00F3, r24
     808:	13 96       	adiw	r26, 0x03	; 3
     80a:	9c 91       	ld	r25, X
     80c:	13 97       	sbiw	r26, 0x03	; 3
     80e:	92 95       	swap	r25
     810:	96 95       	lsr	r25
     812:	97 70       	andi	r25, 0x07	; 7
     814:	14 96       	adiw	r26, 0x04	; 4
     816:	8c 91       	ld	r24, X
     818:	14 97       	sbiw	r26, 0x04	; 4
     81a:	88 0f       	add	r24, r24
     81c:	88 0f       	add	r24, r24
     81e:	88 0f       	add	r24, r24
     820:	89 0f       	add	r24, r25
     822:	80 93 f2 00 	sts	0x00F2, r24
     826:	12 96       	adiw	r26, 0x02	; 2
     828:	9c 91       	ld	r25, X
     82a:	12 97       	sbiw	r26, 0x02	; 2
     82c:	92 95       	swap	r25
     82e:	96 95       	lsr	r25
     830:	97 70       	andi	r25, 0x07	; 7
     832:	13 96       	adiw	r26, 0x03	; 3
     834:	8c 91       	ld	r24, X
     836:	13 97       	sbiw	r26, 0x03	; 3
     838:	88 0f       	add	r24, r24
     83a:	88 0f       	add	r24, r24
     83c:	88 0f       	add	r24, r24
     83e:	89 0f       	add	r24, r25
     840:	80 93 f1 00 	sts	0x00F1, r24
     844:	12 96       	adiw	r26, 0x02	; 2
     846:	8c 91       	ld	r24, X
     848:	12 97       	sbiw	r26, 0x02	; 2
     84a:	88 0f       	add	r24, r24
     84c:	88 0f       	add	r24, r24
     84e:	88 0f       	add	r24, r24
     850:	80 93 f0 00 	sts	0x00F0, r24
     854:	ef ee       	ldi	r30, 0xEF	; 239
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	80 61       	ori	r24, 0x10	; 16
     85c:	80 83       	st	Z, r24
     85e:	1c c0       	rjmp	.+56     	; 0x898 <can_cmd+0x384>
          else              { Can_set_std_id(cmd->id.std);}
     860:	12 96       	adiw	r26, 0x02	; 2
     862:	8c 91       	ld	r24, X
     864:	12 97       	sbiw	r26, 0x02	; 2
     866:	86 95       	lsr	r24
     868:	86 95       	lsr	r24
     86a:	86 95       	lsr	r24
     86c:	13 96       	adiw	r26, 0x03	; 3
     86e:	9c 91       	ld	r25, X
     870:	13 97       	sbiw	r26, 0x03	; 3
     872:	f0 e2       	ldi	r31, 0x20	; 32
     874:	9f 9f       	mul	r25, r31
     876:	80 0d       	add	r24, r0
     878:	11 24       	eor	r1, r1
     87a:	80 93 f3 00 	sts	0x00F3, r24
     87e:	12 96       	adiw	r26, 0x02	; 2
     880:	8c 91       	ld	r24, X
     882:	12 97       	sbiw	r26, 0x02	; 2
     884:	82 95       	swap	r24
     886:	88 0f       	add	r24, r24
     888:	80 7e       	andi	r24, 0xE0	; 224
     88a:	80 93 f2 00 	sts	0x00F2, r24
     88e:	ef ee       	ldi	r30, 0xEF	; 239
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	8f 7e       	andi	r24, 0xEF	; 239
     896:	80 83       	st	Z, r24
          cmd->ctrl.rtr=1; Can_set_rtr();
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	1a 96       	adiw	r26, 0x0a	; 10
     89c:	8c 93       	st	X, r24
     89e:	1a 97       	sbiw	r26, 0x0a	; 10
     8a0:	e0 ef       	ldi	r30, 0xF0	; 240
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	80 81       	ld	r24, Z
     8a6:	84 60       	ori	r24, 0x04	; 4
     8a8:	80 83       	st	Z, r24
          Can_set_dlc(cmd->dlc);
     8aa:	ef ee       	ldi	r30, 0xEF	; 239
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	90 81       	ld	r25, Z
     8b0:	16 96       	adiw	r26, 0x06	; 6
     8b2:	8c 91       	ld	r24, X
     8b4:	89 2b       	or	r24, r25
     8b6:	80 83       	st	Z, r24
          Can_config_tx();
     8b8:	80 81       	ld	r24, Z
     8ba:	8f 73       	andi	r24, 0x3F	; 63
     8bc:	80 83       	st	Z, r24
     8be:	80 81       	ld	r24, Z
     8c0:	80 64       	ori	r24, 0x40	; 64
     8c2:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
          else              { Can_set_std_id(cmd->id.std);}
          cmd->ctrl.rtr=1; Can_set_rtr();
          Can_set_dlc(cmd->dlc);
          Can_config_tx();
          break;
     8c6:	4e c4       	rjmp	.+2204   	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_RX:
          u8_temp=0; Can_set_ext_msk(u8_temp);
     8c8:	19 82       	std	Y+1, r1	; 0x01
     8ca:	9b 81       	ldd	r25, Y+3	; 0x03
     8cc:	92 95       	swap	r25
     8ce:	96 95       	lsr	r25
     8d0:	97 70       	andi	r25, 0x07	; 7
     8d2:	8c 81       	ldd	r24, Y+4	; 0x04
     8d4:	88 0f       	add	r24, r24
     8d6:	88 0f       	add	r24, r24
     8d8:	88 0f       	add	r24, r24
     8da:	89 0f       	add	r24, r25
     8dc:	80 93 f7 00 	sts	0x00F7, r24
     8e0:	9a 81       	ldd	r25, Y+2	; 0x02
     8e2:	92 95       	swap	r25
     8e4:	96 95       	lsr	r25
     8e6:	97 70       	andi	r25, 0x07	; 7
     8e8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ea:	88 0f       	add	r24, r24
     8ec:	88 0f       	add	r24, r24
     8ee:	88 0f       	add	r24, r24
     8f0:	89 0f       	add	r24, r25
     8f2:	80 93 f6 00 	sts	0x00F6, r24
     8f6:	99 81       	ldd	r25, Y+1	; 0x01
     8f8:	92 95       	swap	r25
     8fa:	96 95       	lsr	r25
     8fc:	97 70       	andi	r25, 0x07	; 7
     8fe:	8a 81       	ldd	r24, Y+2	; 0x02
     900:	88 0f       	add	r24, r24
     902:	88 0f       	add	r24, r24
     904:	88 0f       	add	r24, r24
     906:	89 0f       	add	r24, r25
     908:	80 93 f5 00 	sts	0x00F5, r24
     90c:	29 81       	ldd	r18, Y+1	; 0x01
     90e:	22 0f       	add	r18, r18
     910:	22 0f       	add	r18, r18
     912:	22 0f       	add	r18, r18
     914:	84 ef       	ldi	r24, 0xF4	; 244
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     91c:	ef ee       	ldi	r30, 0xEF	; 239
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	30 81       	ld	r19, Z
     922:	16 96       	adiw	r26, 0x06	; 6
     924:	2c 91       	ld	r18, X
     926:	23 2b       	or	r18, r19
     928:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     92a:	dc 01       	movw	r26, r24
     92c:	2c 91       	ld	r18, X
     92e:	2b 7f       	andi	r18, 0xFB	; 251
     930:	2c 93       	st	X, r18
          Can_clear_idemsk();
     932:	2c 91       	ld	r18, X
     934:	2e 7f       	andi	r18, 0xFE	; 254
     936:	2c 93       	st	X, r18
          Can_config_rx();       
     938:	80 81       	ld	r24, Z
     93a:	8f 73       	andi	r24, 0x3F	; 63
     93c:	80 83       	st	Z, r24
     93e:	80 81       	ld	r24, Z
     940:	80 68       	ori	r24, 0x80	; 128
     942:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     944:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     946:	0e c4       	rjmp	.+2076   	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_RX_DATA:
		
          u8_temp = 0xFF;				// Compares 8 bits of the ID.
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     94c:	8a 81       	ldd	r24, Y+2	; 0x02
     94e:	82 95       	swap	r24
     950:	88 0f       	add	r24, r24
     952:	80 7e       	andi	r24, 0xE0	; 224
     954:	81 5e       	subi	r24, 0xE1	; 225
     956:	27 ef       	ldi	r18, 0xF7	; 247
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	80 83       	st	Z, r24
     95e:	49 81       	ldd	r20, Y+1	; 0x01
     960:	42 95       	swap	r20
     962:	44 0f       	add	r20, r20
     964:	40 7e       	andi	r20, 0xE0	; 224
     966:	86 ef       	ldi	r24, 0xF6	; 246
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	fc 01       	movw	r30, r24
     96c:	40 83       	st	Z, r20
		  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     96e:	12 96       	adiw	r26, 0x02	; 2
     970:	4c 91       	ld	r20, X
     972:	12 97       	sbiw	r26, 0x02	; 2
     974:	46 95       	lsr	r20
     976:	46 95       	lsr	r20
     978:	46 95       	lsr	r20
     97a:	13 96       	adiw	r26, 0x03	; 3
     97c:	5c 91       	ld	r21, X
     97e:	13 97       	sbiw	r26, 0x03	; 3
     980:	f0 e2       	ldi	r31, 0x20	; 32
     982:	5f 9f       	mul	r21, r31
     984:	40 0d       	add	r20, r0
     986:	11 24       	eor	r1, r1
     988:	40 93 f3 00 	sts	0x00F3, r20
     98c:	12 96       	adiw	r26, 0x02	; 2
     98e:	4c 91       	ld	r20, X
     990:	12 97       	sbiw	r26, 0x02	; 2
     992:	42 95       	swap	r20
     994:	44 0f       	add	r20, r20
     996:	40 7e       	andi	r20, 0xE0	; 224
     998:	40 93 f2 00 	sts	0x00F2, r20
     99c:	6f ee       	ldi	r22, 0xEF	; 239
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	fb 01       	movw	r30, r22
     9a2:	40 81       	ld	r20, Z
     9a4:	4f 7e       	andi	r20, 0xEF	; 239
     9a6:	40 83       	st	Z, r20
		  
		  u8_temp = 0;
     9a8:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     9aa:	5b 81       	ldd	r21, Y+3	; 0x03
     9ac:	52 95       	swap	r21
     9ae:	56 95       	lsr	r21
     9b0:	57 70       	andi	r21, 0x07	; 7
     9b2:	4c 81       	ldd	r20, Y+4	; 0x04
     9b4:	44 0f       	add	r20, r20
     9b6:	44 0f       	add	r20, r20
     9b8:	44 0f       	add	r20, r20
     9ba:	45 0f       	add	r20, r21
     9bc:	f9 01       	movw	r30, r18
     9be:	40 83       	st	Z, r20
     9c0:	3a 81       	ldd	r19, Y+2	; 0x02
     9c2:	32 95       	swap	r19
     9c4:	36 95       	lsr	r19
     9c6:	37 70       	andi	r19, 0x07	; 7
     9c8:	2b 81       	ldd	r18, Y+3	; 0x03
     9ca:	22 0f       	add	r18, r18
     9cc:	22 0f       	add	r18, r18
     9ce:	22 0f       	add	r18, r18
     9d0:	23 0f       	add	r18, r19
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
     9d6:	99 81       	ldd	r25, Y+1	; 0x01
     9d8:	92 95       	swap	r25
     9da:	96 95       	lsr	r25
     9dc:	97 70       	andi	r25, 0x07	; 7
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	88 0f       	add	r24, r24
     9e2:	88 0f       	add	r24, r24
     9e4:	88 0f       	add	r24, r24
     9e6:	89 0f       	add	r24, r25
     9e8:	80 93 f5 00 	sts	0x00F5, r24
     9ec:	29 81       	ldd	r18, Y+1	; 0x01
     9ee:	22 0f       	add	r18, r18
     9f0:	22 0f       	add	r18, r18
     9f2:	22 0f       	add	r18, r18
     9f4:	84 ef       	ldi	r24, 0xF4	; 244
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);		// For simplicity, should always be 8.
     9fc:	fb 01       	movw	r30, r22
     9fe:	30 81       	ld	r19, Z
     a00:	16 96       	adiw	r26, 0x06	; 6
     a02:	2c 91       	ld	r18, X
     a04:	16 97       	sbiw	r26, 0x06	; 6
     a06:	23 2b       	or	r18, r19
     a08:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=0; 
     a0a:	1a 96       	adiw	r26, 0x0a	; 10
     a0c:	1c 92       	st	X, r1
		  Can_set_rtrmsk(); 
     a0e:	dc 01       	movw	r26, r24
     a10:	2c 91       	ld	r18, X
     a12:	24 60       	ori	r18, 0x04	; 4
     a14:	2c 93       	st	X, r18
		  Can_clear_rtr();
     a16:	a0 ef       	ldi	r26, 0xF0	; 240
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	2c 91       	ld	r18, X
     a1c:	2b 7f       	andi	r18, 0xFB	; 251
     a1e:	2c 93       	st	X, r18
		  
		  Can_clear_ide();
     a20:	20 81       	ld	r18, Z
     a22:	2f 7e       	andi	r18, 0xEF	; 239
     a24:	20 83       	st	Z, r18
          Can_clear_idemsk();
     a26:	fc 01       	movw	r30, r24
     a28:	20 81       	ld	r18, Z
     a2a:	2e 7f       	andi	r18, 0xFE	; 254
     a2c:	20 83       	st	Z, r18
          Can_config_rx();       
     a2e:	db 01       	movw	r26, r22
     a30:	8c 91       	ld	r24, X
     a32:	8f 73       	andi	r24, 0x3F	; 63
     a34:	8c 93       	st	X, r24
     a36:	8c 91       	ld	r24, X
     a38:	80 68       	ori	r24, 0x80	; 128
     a3a:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     a3c:	80 e0       	ldi	r24, 0x00	; 0
		  Can_clear_rtr();
		  
		  Can_clear_ide();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     a3e:	92 c3       	rjmp	.+1828   	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_RX_REMOTE:
		  u8_temp = 0xFF;				// Compares 8 bits of the ID.
     a40:	8f ef       	ldi	r24, 0xFF	; 255
     a42:	89 83       	std	Y+1, r24	; 0x01
		  Can_set_std_msk(u8_temp);
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	82 95       	swap	r24
     a48:	88 0f       	add	r24, r24
     a4a:	80 7e       	andi	r24, 0xE0	; 224
     a4c:	81 5e       	subi	r24, 0xE1	; 225
     a4e:	27 ef       	ldi	r18, 0xF7	; 247
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	f9 01       	movw	r30, r18
     a54:	80 83       	st	Z, r24
     a56:	49 81       	ldd	r20, Y+1	; 0x01
     a58:	42 95       	swap	r20
     a5a:	44 0f       	add	r20, r20
     a5c:	40 7e       	andi	r20, 0xE0	; 224
     a5e:	86 ef       	ldi	r24, 0xF6	; 246
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	fc 01       	movw	r30, r24
     a64:	40 83       	st	Z, r20
				  
		  Can_set_std_id(cmd->id.std);	// New ID of the MOB is from the cmd object.
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	4c 91       	ld	r20, X
     a6a:	12 97       	sbiw	r26, 0x02	; 2
     a6c:	46 95       	lsr	r20
     a6e:	46 95       	lsr	r20
     a70:	46 95       	lsr	r20
     a72:	13 96       	adiw	r26, 0x03	; 3
     a74:	5c 91       	ld	r21, X
     a76:	13 97       	sbiw	r26, 0x03	; 3
     a78:	f0 e2       	ldi	r31, 0x20	; 32
     a7a:	5f 9f       	mul	r21, r31
     a7c:	40 0d       	add	r20, r0
     a7e:	11 24       	eor	r1, r1
     a80:	40 93 f3 00 	sts	0x00F3, r20
     a84:	12 96       	adiw	r26, 0x02	; 2
     a86:	4c 91       	ld	r20, X
     a88:	12 97       	sbiw	r26, 0x02	; 2
     a8a:	42 95       	swap	r20
     a8c:	44 0f       	add	r20, r20
     a8e:	40 7e       	andi	r20, 0xE0	; 224
     a90:	40 93 f2 00 	sts	0x00F2, r20
     a94:	6f ee       	ldi	r22, 0xEF	; 239
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	fb 01       	movw	r30, r22
     a9a:	40 81       	ld	r20, Z
     a9c:	4f 7e       	andi	r20, 0xEF	; 239
     a9e:	40 83       	st	Z, r20
		
          u8_temp=0; 
     aa0:	19 82       	std	Y+1, r1	; 0x01
		  Can_set_ext_msk(u8_temp);
     aa2:	5b 81       	ldd	r21, Y+3	; 0x03
     aa4:	52 95       	swap	r21
     aa6:	56 95       	lsr	r21
     aa8:	57 70       	andi	r21, 0x07	; 7
     aaa:	4c 81       	ldd	r20, Y+4	; 0x04
     aac:	44 0f       	add	r20, r20
     aae:	44 0f       	add	r20, r20
     ab0:	44 0f       	add	r20, r20
     ab2:	45 0f       	add	r20, r21
     ab4:	f9 01       	movw	r30, r18
     ab6:	40 83       	st	Z, r20
     ab8:	3a 81       	ldd	r19, Y+2	; 0x02
     aba:	32 95       	swap	r19
     abc:	36 95       	lsr	r19
     abe:	37 70       	andi	r19, 0x07	; 7
     ac0:	2b 81       	ldd	r18, Y+3	; 0x03
     ac2:	22 0f       	add	r18, r18
     ac4:	22 0f       	add	r18, r18
     ac6:	22 0f       	add	r18, r18
     ac8:	23 0f       	add	r18, r19
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
     ace:	99 81       	ldd	r25, Y+1	; 0x01
     ad0:	92 95       	swap	r25
     ad2:	96 95       	lsr	r25
     ad4:	97 70       	andi	r25, 0x07	; 7
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	88 0f       	add	r24, r24
     ada:	88 0f       	add	r24, r24
     adc:	88 0f       	add	r24, r24
     ade:	89 0f       	add	r24, r25
     ae0:	80 93 f5 00 	sts	0x00F5, r24
     ae4:	29 81       	ldd	r18, Y+1	; 0x01
     ae6:	22 0f       	add	r18, r18
     ae8:	22 0f       	add	r18, r18
     aea:	22 0f       	add	r18, r18
     aec:	84 ef       	ldi	r24, 0xF4	; 244
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     af4:	fb 01       	movw	r30, r22
     af6:	30 81       	ld	r19, Z
     af8:	16 96       	adiw	r26, 0x06	; 6
     afa:	2c 91       	ld	r18, X
     afc:	16 97       	sbiw	r26, 0x06	; 6
     afe:	23 2b       	or	r18, r19
     b00:	20 83       	st	Z, r18
		  
          cmd->ctrl.rtr=1; 
     b02:	21 e0       	ldi	r18, 0x01	; 1
     b04:	1a 96       	adiw	r26, 0x0a	; 10
     b06:	2c 93       	st	X, r18
		  Can_set_rtrmsk(); 
     b08:	dc 01       	movw	r26, r24
     b0a:	2c 91       	ld	r18, X
     b0c:	24 60       	ori	r18, 0x04	; 4
     b0e:	2c 93       	st	X, r18
		  Can_set_rtr();
     b10:	a0 ef       	ldi	r26, 0xF0	; 240
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	2c 91       	ld	r18, X
     b16:	24 60       	ori	r18, 0x04	; 4
     b18:	2c 93       	st	X, r18
		  
          Can_clear_rplv();
     b1a:	20 81       	ld	r18, Z
     b1c:	2f 7d       	andi	r18, 0xDF	; 223
     b1e:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b20:	fc 01       	movw	r30, r24
     b22:	20 81       	ld	r18, Z
     b24:	2e 7f       	andi	r18, 0xFE	; 254
     b26:	20 83       	st	Z, r18
          Can_config_rx();       
     b28:	db 01       	movw	r26, r22
     b2a:	8c 91       	ld	r24, X
     b2c:	8f 73       	andi	r24, 0x3F	; 63
     b2e:	8c 93       	st	X, r24
     b30:	8c 91       	ld	r24, X
     b32:	80 68       	ori	r24, 0x80	; 128
     b34:	8c 93       	st	X, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     b36:	80 e0       	ldi	r24, 0x00	; 0
		  Can_set_rtr();
		  
          Can_clear_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     b38:	15 c3       	rjmp	.+1578   	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     b3a:	1b 96       	adiw	r26, 0x0b	; 11
     b3c:	8c 91       	ld	r24, X
     b3e:	1b 97       	sbiw	r26, 0x0b	; 11
     b40:	88 23       	and	r24, r24
     b42:	d9 f1       	breq	.+118    	; 0xbba <__stack+0x2bb>
     b44:	14 96       	adiw	r26, 0x04	; 4
     b46:	9c 91       	ld	r25, X
     b48:	14 97       	sbiw	r26, 0x04	; 4
     b4a:	92 95       	swap	r25
     b4c:	96 95       	lsr	r25
     b4e:	97 70       	andi	r25, 0x07	; 7
     b50:	15 96       	adiw	r26, 0x05	; 5
     b52:	8c 91       	ld	r24, X
     b54:	15 97       	sbiw	r26, 0x05	; 5
     b56:	88 0f       	add	r24, r24
     b58:	88 0f       	add	r24, r24
     b5a:	88 0f       	add	r24, r24
     b5c:	89 0f       	add	r24, r25
     b5e:	80 93 f3 00 	sts	0x00F3, r24
     b62:	13 96       	adiw	r26, 0x03	; 3
     b64:	9c 91       	ld	r25, X
     b66:	13 97       	sbiw	r26, 0x03	; 3
     b68:	92 95       	swap	r25
     b6a:	96 95       	lsr	r25
     b6c:	97 70       	andi	r25, 0x07	; 7
     b6e:	14 96       	adiw	r26, 0x04	; 4
     b70:	8c 91       	ld	r24, X
     b72:	14 97       	sbiw	r26, 0x04	; 4
     b74:	88 0f       	add	r24, r24
     b76:	88 0f       	add	r24, r24
     b78:	88 0f       	add	r24, r24
     b7a:	89 0f       	add	r24, r25
     b7c:	80 93 f2 00 	sts	0x00F2, r24
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	9c 91       	ld	r25, X
     b84:	12 97       	sbiw	r26, 0x02	; 2
     b86:	92 95       	swap	r25
     b88:	96 95       	lsr	r25
     b8a:	97 70       	andi	r25, 0x07	; 7
     b8c:	13 96       	adiw	r26, 0x03	; 3
     b8e:	8c 91       	ld	r24, X
     b90:	13 97       	sbiw	r26, 0x03	; 3
     b92:	88 0f       	add	r24, r24
     b94:	88 0f       	add	r24, r24
     b96:	88 0f       	add	r24, r24
     b98:	89 0f       	add	r24, r25
     b9a:	80 93 f1 00 	sts	0x00F1, r24
     b9e:	12 96       	adiw	r26, 0x02	; 2
     ba0:	8c 91       	ld	r24, X
     ba2:	12 97       	sbiw	r26, 0x02	; 2
     ba4:	88 0f       	add	r24, r24
     ba6:	88 0f       	add	r24, r24
     ba8:	88 0f       	add	r24, r24
     baa:	80 93 f0 00 	sts	0x00F0, r24
     bae:	ef ee       	ldi	r30, 0xEF	; 239
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 61       	ori	r24, 0x10	; 16
     bb6:	80 83       	st	Z, r24
     bb8:	1c c0       	rjmp	.+56     	; 0xbf2 <__stack+0x2f3>
          else              { Can_set_std_id(cmd->id.std);}
     bba:	12 96       	adiw	r26, 0x02	; 2
     bbc:	8c 91       	ld	r24, X
     bbe:	12 97       	sbiw	r26, 0x02	; 2
     bc0:	86 95       	lsr	r24
     bc2:	86 95       	lsr	r24
     bc4:	86 95       	lsr	r24
     bc6:	13 96       	adiw	r26, 0x03	; 3
     bc8:	9c 91       	ld	r25, X
     bca:	13 97       	sbiw	r26, 0x03	; 3
     bcc:	e0 e2       	ldi	r30, 0x20	; 32
     bce:	9e 9f       	mul	r25, r30
     bd0:	80 0d       	add	r24, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	80 93 f3 00 	sts	0x00F3, r24
     bd8:	12 96       	adiw	r26, 0x02	; 2
     bda:	8c 91       	ld	r24, X
     bdc:	12 97       	sbiw	r26, 0x02	; 2
     bde:	82 95       	swap	r24
     be0:	88 0f       	add	r24, r24
     be2:	80 7e       	andi	r24, 0xE0	; 224
     be4:	80 93 f2 00 	sts	0x00F2, r24
     be8:	ef ee       	ldi	r30, 0xEF	; 239
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	8f 7e       	andi	r24, 0xEF	; 239
     bf0:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	92 95       	swap	r25
     bfa:	96 95       	lsr	r25
     bfc:	97 70       	andi	r25, 0x07	; 7
     bfe:	8c 81       	ldd	r24, Y+4	; 0x04
     c00:	88 0f       	add	r24, r24
     c02:	88 0f       	add	r24, r24
     c04:	88 0f       	add	r24, r24
     c06:	89 0f       	add	r24, r25
     c08:	80 93 f7 00 	sts	0x00F7, r24
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	92 95       	swap	r25
     c10:	96 95       	lsr	r25
     c12:	97 70       	andi	r25, 0x07	; 7
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	88 0f       	add	r24, r24
     c18:	88 0f       	add	r24, r24
     c1a:	88 0f       	add	r24, r24
     c1c:	89 0f       	add	r24, r25
     c1e:	80 93 f6 00 	sts	0x00F6, r24
     c22:	99 81       	ldd	r25, Y+1	; 0x01
     c24:	92 95       	swap	r25
     c26:	96 95       	lsr	r25
     c28:	97 70       	andi	r25, 0x07	; 7
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	88 0f       	add	r24, r24
     c2e:	88 0f       	add	r24, r24
     c30:	88 0f       	add	r24, r24
     c32:	89 0f       	add	r24, r25
     c34:	80 93 f5 00 	sts	0x00F5, r24
     c38:	29 81       	ldd	r18, Y+1	; 0x01
     c3a:	22 0f       	add	r18, r18
     c3c:	22 0f       	add	r18, r18
     c3e:	22 0f       	add	r18, r18
     c40:	84 ef       	ldi	r24, 0xF4	; 244
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	fc 01       	movw	r30, r24
     c46:	20 83       	st	Z, r18
		  
		  
          Can_set_dlc(cmd->dlc);
     c48:	ef ee       	ldi	r30, 0xEF	; 239
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	30 81       	ld	r19, Z
     c4e:	16 96       	adiw	r26, 0x06	; 6
     c50:	2c 91       	ld	r18, X
     c52:	23 2b       	or	r18, r19
     c54:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     c56:	dc 01       	movw	r26, r24
     c58:	2c 91       	ld	r18, X
     c5a:	2b 7f       	andi	r18, 0xFB	; 251
     c5c:	2c 93       	st	X, r18
          Can_set_idemsk();
     c5e:	2c 91       	ld	r18, X
     c60:	21 60       	ori	r18, 0x01	; 1
     c62:	2c 93       	st	X, r18
          Can_config_rx();       
     c64:	80 81       	ld	r24, Z
     c66:	8f 73       	andi	r24, 0x3F	; 63
     c68:	80 83       	st	Z, r24
     c6a:	80 81       	ld	r24, Z
     c6c:	80 68       	ori	r24, 0x80	; 128
     c6e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     c70:	80 e0       	ldi	r24, 0x00	; 0
		  
          Can_set_dlc(cmd->dlc);
          Can_clear_rtrmsk();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     c72:	78 c2       	rjmp	.+1264   	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     c74:	1b 96       	adiw	r26, 0x0b	; 11
     c76:	8c 91       	ld	r24, X
     c78:	1b 97       	sbiw	r26, 0x0b	; 11
     c7a:	88 23       	and	r24, r24
     c7c:	d9 f1       	breq	.+118    	; 0xcf4 <__stack+0x3f5>
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	9c 91       	ld	r25, X
     c82:	14 97       	sbiw	r26, 0x04	; 4
     c84:	92 95       	swap	r25
     c86:	96 95       	lsr	r25
     c88:	97 70       	andi	r25, 0x07	; 7
     c8a:	15 96       	adiw	r26, 0x05	; 5
     c8c:	8c 91       	ld	r24, X
     c8e:	15 97       	sbiw	r26, 0x05	; 5
     c90:	88 0f       	add	r24, r24
     c92:	88 0f       	add	r24, r24
     c94:	88 0f       	add	r24, r24
     c96:	89 0f       	add	r24, r25
     c98:	80 93 f3 00 	sts	0x00F3, r24
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	92 95       	swap	r25
     ca4:	96 95       	lsr	r25
     ca6:	97 70       	andi	r25, 0x07	; 7
     ca8:	14 96       	adiw	r26, 0x04	; 4
     caa:	8c 91       	ld	r24, X
     cac:	14 97       	sbiw	r26, 0x04	; 4
     cae:	88 0f       	add	r24, r24
     cb0:	88 0f       	add	r24, r24
     cb2:	88 0f       	add	r24, r24
     cb4:	89 0f       	add	r24, r25
     cb6:	80 93 f2 00 	sts	0x00F2, r24
     cba:	12 96       	adiw	r26, 0x02	; 2
     cbc:	9c 91       	ld	r25, X
     cbe:	12 97       	sbiw	r26, 0x02	; 2
     cc0:	92 95       	swap	r25
     cc2:	96 95       	lsr	r25
     cc4:	97 70       	andi	r25, 0x07	; 7
     cc6:	13 96       	adiw	r26, 0x03	; 3
     cc8:	8c 91       	ld	r24, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	88 0f       	add	r24, r24
     cce:	88 0f       	add	r24, r24
     cd0:	88 0f       	add	r24, r24
     cd2:	89 0f       	add	r24, r25
     cd4:	80 93 f1 00 	sts	0x00F1, r24
     cd8:	12 96       	adiw	r26, 0x02	; 2
     cda:	8c 91       	ld	r24, X
     cdc:	12 97       	sbiw	r26, 0x02	; 2
     cde:	88 0f       	add	r24, r24
     ce0:	88 0f       	add	r24, r24
     ce2:	88 0f       	add	r24, r24
     ce4:	80 93 f0 00 	sts	0x00F0, r24
     ce8:	ef ee       	ldi	r30, 0xEF	; 239
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	80 61       	ori	r24, 0x10	; 16
     cf0:	80 83       	st	Z, r24
     cf2:	1c c0       	rjmp	.+56     	; 0xd2c <__stack+0x42d>
          else              { Can_set_std_id(cmd->id.std);}
     cf4:	12 96       	adiw	r26, 0x02	; 2
     cf6:	8c 91       	ld	r24, X
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	86 95       	lsr	r24
     cfc:	86 95       	lsr	r24
     cfe:	86 95       	lsr	r24
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	9c 91       	ld	r25, X
     d04:	13 97       	sbiw	r26, 0x03	; 3
     d06:	e0 e2       	ldi	r30, 0x20	; 32
     d08:	9e 9f       	mul	r25, r30
     d0a:	80 0d       	add	r24, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	80 93 f3 00 	sts	0x00F3, r24
     d12:	12 96       	adiw	r26, 0x02	; 2
     d14:	8c 91       	ld	r24, X
     d16:	12 97       	sbiw	r26, 0x02	; 2
     d18:	82 95       	swap	r24
     d1a:	88 0f       	add	r24, r24
     d1c:	80 7e       	andi	r24, 0xE0	; 224
     d1e:	80 93 f2 00 	sts	0x00F2, r24
     d22:	ef ee       	ldi	r30, 0xEF	; 239
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8f 7e       	andi	r24, 0xEF	; 239
     d2a:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	9b 81       	ldd	r25, Y+3	; 0x03
     d32:	92 95       	swap	r25
     d34:	96 95       	lsr	r25
     d36:	97 70       	andi	r25, 0x07	; 7
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	88 0f       	add	r24, r24
     d3c:	88 0f       	add	r24, r24
     d3e:	88 0f       	add	r24, r24
     d40:	89 0f       	add	r24, r25
     d42:	80 93 f7 00 	sts	0x00F7, r24
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	92 95       	swap	r25
     d4a:	96 95       	lsr	r25
     d4c:	97 70       	andi	r25, 0x07	; 7
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	88 0f       	add	r24, r24
     d52:	88 0f       	add	r24, r24
     d54:	88 0f       	add	r24, r24
     d56:	89 0f       	add	r24, r25
     d58:	80 93 f6 00 	sts	0x00F6, r24
     d5c:	99 81       	ldd	r25, Y+1	; 0x01
     d5e:	92 95       	swap	r25
     d60:	96 95       	lsr	r25
     d62:	97 70       	andi	r25, 0x07	; 7
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	88 0f       	add	r24, r24
     d68:	88 0f       	add	r24, r24
     d6a:	88 0f       	add	r24, r24
     d6c:	89 0f       	add	r24, r25
     d6e:	80 93 f5 00 	sts	0x00F5, r24
     d72:	29 81       	ldd	r18, Y+1	; 0x01
     d74:	22 0f       	add	r18, r18
     d76:	22 0f       	add	r18, r18
     d78:	22 0f       	add	r18, r18
     d7a:	84 ef       	ldi	r24, 0xF4	; 244
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d82:	ef ee       	ldi	r30, 0xEF	; 239
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	30 81       	ld	r19, Z
     d88:	16 96       	adiw	r26, 0x06	; 6
     d8a:	2c 91       	ld	r18, X
     d8c:	16 97       	sbiw	r26, 0x06	; 6
     d8e:	23 2b       	or	r18, r19
     d90:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     d92:	1a 96       	adiw	r26, 0x0a	; 10
     d94:	1c 92       	st	X, r1
     d96:	dc 01       	movw	r26, r24
     d98:	2c 91       	ld	r18, X
     d9a:	24 60       	ori	r18, 0x04	; 4
     d9c:	2c 93       	st	X, r18
     d9e:	a0 ef       	ldi	r26, 0xF0	; 240
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	2c 91       	ld	r18, X
     da4:	2b 7f       	andi	r18, 0xFB	; 251
     da6:	2c 93       	st	X, r18
          Can_set_idemsk();
     da8:	dc 01       	movw	r26, r24
     daa:	2c 91       	ld	r18, X
     dac:	21 60       	ori	r18, 0x01	; 1
     dae:	2c 93       	st	X, r18
          Can_config_rx();       
     db0:	80 81       	ld	r24, Z
     db2:	8f 73       	andi	r24, 0x3F	; 63
     db4:	80 83       	st	Z, r24
     db6:	80 81       	ld	r24, Z
     db8:	80 68       	ori	r24, 0x80	; 128
     dba:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     dbc:	80 e0       	ldi	r24, 0x00	; 0
          u8_temp=~0; Can_set_ext_msk(u8_temp);
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     dbe:	d2 c1       	rjmp	.+932    	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     dc0:	1b 96       	adiw	r26, 0x0b	; 11
     dc2:	8c 91       	ld	r24, X
     dc4:	1b 97       	sbiw	r26, 0x0b	; 11
     dc6:	88 23       	and	r24, r24
     dc8:	d9 f1       	breq	.+118    	; 0xe40 <__stack+0x541>
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	9c 91       	ld	r25, X
     dce:	14 97       	sbiw	r26, 0x04	; 4
     dd0:	92 95       	swap	r25
     dd2:	96 95       	lsr	r25
     dd4:	97 70       	andi	r25, 0x07	; 7
     dd6:	15 96       	adiw	r26, 0x05	; 5
     dd8:	8c 91       	ld	r24, X
     dda:	15 97       	sbiw	r26, 0x05	; 5
     ddc:	88 0f       	add	r24, r24
     dde:	88 0f       	add	r24, r24
     de0:	88 0f       	add	r24, r24
     de2:	89 0f       	add	r24, r25
     de4:	80 93 f3 00 	sts	0x00F3, r24
     de8:	13 96       	adiw	r26, 0x03	; 3
     dea:	9c 91       	ld	r25, X
     dec:	13 97       	sbiw	r26, 0x03	; 3
     dee:	92 95       	swap	r25
     df0:	96 95       	lsr	r25
     df2:	97 70       	andi	r25, 0x07	; 7
     df4:	14 96       	adiw	r26, 0x04	; 4
     df6:	8c 91       	ld	r24, X
     df8:	14 97       	sbiw	r26, 0x04	; 4
     dfa:	88 0f       	add	r24, r24
     dfc:	88 0f       	add	r24, r24
     dfe:	88 0f       	add	r24, r24
     e00:	89 0f       	add	r24, r25
     e02:	80 93 f2 00 	sts	0x00F2, r24
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	9c 91       	ld	r25, X
     e0a:	12 97       	sbiw	r26, 0x02	; 2
     e0c:	92 95       	swap	r25
     e0e:	96 95       	lsr	r25
     e10:	97 70       	andi	r25, 0x07	; 7
     e12:	13 96       	adiw	r26, 0x03	; 3
     e14:	8c 91       	ld	r24, X
     e16:	13 97       	sbiw	r26, 0x03	; 3
     e18:	88 0f       	add	r24, r24
     e1a:	88 0f       	add	r24, r24
     e1c:	88 0f       	add	r24, r24
     e1e:	89 0f       	add	r24, r25
     e20:	80 93 f1 00 	sts	0x00F1, r24
     e24:	12 96       	adiw	r26, 0x02	; 2
     e26:	8c 91       	ld	r24, X
     e28:	12 97       	sbiw	r26, 0x02	; 2
     e2a:	88 0f       	add	r24, r24
     e2c:	88 0f       	add	r24, r24
     e2e:	88 0f       	add	r24, r24
     e30:	80 93 f0 00 	sts	0x00F0, r24
     e34:	ef ee       	ldi	r30, 0xEF	; 239
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 61       	ori	r24, 0x10	; 16
     e3c:	80 83       	st	Z, r24
     e3e:	1c c0       	rjmp	.+56     	; 0xe78 <__stack+0x579>
          else              { Can_set_std_id(cmd->id.std);}
     e40:	12 96       	adiw	r26, 0x02	; 2
     e42:	8c 91       	ld	r24, X
     e44:	12 97       	sbiw	r26, 0x02	; 2
     e46:	86 95       	lsr	r24
     e48:	86 95       	lsr	r24
     e4a:	86 95       	lsr	r24
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	9c 91       	ld	r25, X
     e50:	13 97       	sbiw	r26, 0x03	; 3
     e52:	e0 e2       	ldi	r30, 0x20	; 32
     e54:	9e 9f       	mul	r25, r30
     e56:	80 0d       	add	r24, r0
     e58:	11 24       	eor	r1, r1
     e5a:	80 93 f3 00 	sts	0x00F3, r24
     e5e:	12 96       	adiw	r26, 0x02	; 2
     e60:	8c 91       	ld	r24, X
     e62:	12 97       	sbiw	r26, 0x02	; 2
     e64:	82 95       	swap	r24
     e66:	88 0f       	add	r24, r24
     e68:	80 7e       	andi	r24, 0xE0	; 224
     e6a:	80 93 f2 00 	sts	0x00F2, r24
     e6e:	ef ee       	ldi	r30, 0xEF	; 239
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	8f 7e       	andi	r24, 0xEF	; 239
     e76:	80 83       	st	Z, r24
          u8_temp=~0; Can_set_ext_msk(u8_temp);
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	9b 81       	ldd	r25, Y+3	; 0x03
     e7e:	92 95       	swap	r25
     e80:	96 95       	lsr	r25
     e82:	97 70       	andi	r25, 0x07	; 7
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	88 0f       	add	r24, r24
     e88:	88 0f       	add	r24, r24
     e8a:	88 0f       	add	r24, r24
     e8c:	89 0f       	add	r24, r25
     e8e:	80 93 f7 00 	sts	0x00F7, r24
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	92 95       	swap	r25
     e96:	96 95       	lsr	r25
     e98:	97 70       	andi	r25, 0x07	; 7
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	88 0f       	add	r24, r24
     e9e:	88 0f       	add	r24, r24
     ea0:	88 0f       	add	r24, r24
     ea2:	89 0f       	add	r24, r25
     ea4:	80 93 f6 00 	sts	0x00F6, r24
     ea8:	99 81       	ldd	r25, Y+1	; 0x01
     eaa:	92 95       	swap	r25
     eac:	96 95       	lsr	r25
     eae:	97 70       	andi	r25, 0x07	; 7
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	88 0f       	add	r24, r24
     eb4:	88 0f       	add	r24, r24
     eb6:	88 0f       	add	r24, r24
     eb8:	89 0f       	add	r24, r25
     eba:	80 93 f5 00 	sts	0x00F5, r24
     ebe:	29 81       	ldd	r18, Y+1	; 0x01
     ec0:	22 0f       	add	r18, r18
     ec2:	22 0f       	add	r18, r18
     ec4:	22 0f       	add	r18, r18
     ec6:	84 ef       	ldi	r24, 0xF4	; 244
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ece:	ef ee       	ldi	r30, 0xEF	; 239
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	30 81       	ld	r19, Z
     ed4:	16 96       	adiw	r26, 0x06	; 6
     ed6:	2c 91       	ld	r18, X
     ed8:	16 97       	sbiw	r26, 0x06	; 6
     eda:	23 2b       	or	r18, r19
     edc:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     ede:	21 e0       	ldi	r18, 0x01	; 1
     ee0:	1a 96       	adiw	r26, 0x0a	; 10
     ee2:	2c 93       	st	X, r18
     ee4:	dc 01       	movw	r26, r24
     ee6:	2c 91       	ld	r18, X
     ee8:	24 60       	ori	r18, 0x04	; 4
     eea:	2c 93       	st	X, r18
     eec:	a0 ef       	ldi	r26, 0xF0	; 240
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	2c 91       	ld	r18, X
     ef2:	24 60       	ori	r18, 0x04	; 4
     ef4:	2c 93       	st	X, r18
          Can_clear_rplv();
     ef6:	20 81       	ld	r18, Z
     ef8:	2f 7d       	andi	r18, 0xDF	; 223
     efa:	20 83       	st	Z, r18
          Can_set_idemsk();
     efc:	dc 01       	movw	r26, r24
     efe:	2c 91       	ld	r18, X
     f00:	21 60       	ori	r18, 0x01	; 1
     f02:	2c 93       	st	X, r18
          Can_config_rx();       
     f04:	80 81       	ld	r24, Z
     f06:	8f 73       	andi	r24, 0x3F	; 63
     f08:	80 83       	st	Z, r24
     f0a:	80 81       	ld	r24, Z
     f0c:	80 68       	ori	r24, 0x80	; 128
     f0e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     f10:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_clear_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
     f12:	28 c1       	rjmp	.+592    	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	8a ef       	ldi	r24, 0xFA	; 250
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	17 96       	adiw	r26, 0x07	; 7
     f1c:	ed 91       	ld	r30, X+
     f1e:	fc 91       	ld	r31, X
     f20:	18 97       	sbiw	r26, 0x08	; 8
     f22:	e2 0f       	add	r30, r18
     f24:	f1 1d       	adc	r31, r1
     f26:	30 81       	ld	r19, Z
     f28:	fc 01       	movw	r30, r24
     f2a:	30 83       	st	Z, r19
     f2c:	2f 5f       	subi	r18, 0xFF	; 255
     f2e:	16 96       	adiw	r26, 0x06	; 6
     f30:	3c 91       	ld	r19, X
     f32:	16 97       	sbiw	r26, 0x06	; 6
     f34:	23 17       	cp	r18, r19
     f36:	88 f3       	brcs	.-30     	; 0xf1a <__stack+0x61b>
          u8_temp=0; Can_set_ext_msk(u8_temp);
     f38:	19 82       	std	Y+1, r1	; 0x01
     f3a:	9b 81       	ldd	r25, Y+3	; 0x03
     f3c:	92 95       	swap	r25
     f3e:	96 95       	lsr	r25
     f40:	97 70       	andi	r25, 0x07	; 7
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	88 0f       	add	r24, r24
     f46:	88 0f       	add	r24, r24
     f48:	88 0f       	add	r24, r24
     f4a:	89 0f       	add	r24, r25
     f4c:	80 93 f7 00 	sts	0x00F7, r24
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	92 95       	swap	r25
     f54:	96 95       	lsr	r25
     f56:	97 70       	andi	r25, 0x07	; 7
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	88 0f       	add	r24, r24
     f5c:	88 0f       	add	r24, r24
     f5e:	88 0f       	add	r24, r24
     f60:	89 0f       	add	r24, r25
     f62:	80 93 f6 00 	sts	0x00F6, r24
     f66:	99 81       	ldd	r25, Y+1	; 0x01
     f68:	92 95       	swap	r25
     f6a:	96 95       	lsr	r25
     f6c:	97 70       	andi	r25, 0x07	; 7
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	88 0f       	add	r24, r24
     f72:	88 0f       	add	r24, r24
     f74:	88 0f       	add	r24, r24
     f76:	89 0f       	add	r24, r25
     f78:	80 93 f5 00 	sts	0x00F5, r24
     f7c:	29 81       	ldd	r18, Y+1	; 0x01
     f7e:	22 0f       	add	r18, r18
     f80:	22 0f       	add	r18, r18
     f82:	22 0f       	add	r18, r18
     f84:	84 ef       	ldi	r24, 0xF4	; 244
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     f8c:	ef ee       	ldi	r30, 0xEF	; 239
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	30 81       	ld	r19, Z
     f92:	16 96       	adiw	r26, 0x06	; 6
     f94:	2c 91       	ld	r18, X
     f96:	16 97       	sbiw	r26, 0x06	; 6
     f98:	23 2b       	or	r18, r19
     f9a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	1a 96       	adiw	r26, 0x0a	; 10
     fa0:	2c 93       	st	X, r18
     fa2:	dc 01       	movw	r26, r24
     fa4:	2c 91       	ld	r18, X
     fa6:	24 60       	ori	r18, 0x04	; 4
     fa8:	2c 93       	st	X, r18
     faa:	a0 ef       	ldi	r26, 0xF0	; 240
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	2c 91       	ld	r18, X
     fb0:	24 60       	ori	r18, 0x04	; 4
     fb2:	2c 93       	st	X, r18
          Can_set_rplv();
     fb4:	20 81       	ld	r18, Z
     fb6:	20 62       	ori	r18, 0x20	; 32
     fb8:	20 83       	st	Z, r18
          Can_clear_idemsk();
     fba:	dc 01       	movw	r26, r24
     fbc:	2c 91       	ld	r18, X
     fbe:	2e 7f       	andi	r18, 0xFE	; 254
     fc0:	2c 93       	st	X, r18
          Can_config_rx();       
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 73       	andi	r24, 0x3F	; 63
     fc6:	80 83       	st	Z, r24
     fc8:	80 81       	ld	r24, Z
     fca:	80 68       	ori	r24, 0x80	; 128
     fcc:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
     fce:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_clear_idemsk();
          Can_config_rx();       
          break;
     fd0:	c9 c0       	rjmp	.+402    	; 0x1164 <__stack+0x865>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     fd2:	1b 96       	adiw	r26, 0x0b	; 11
     fd4:	8c 91       	ld	r24, X
     fd6:	1b 97       	sbiw	r26, 0x0b	; 11
     fd8:	88 23       	and	r24, r24
     fda:	d9 f1       	breq	.+118    	; 0x1052 <__stack+0x753>
     fdc:	14 96       	adiw	r26, 0x04	; 4
     fde:	9c 91       	ld	r25, X
     fe0:	14 97       	sbiw	r26, 0x04	; 4
     fe2:	92 95       	swap	r25
     fe4:	96 95       	lsr	r25
     fe6:	97 70       	andi	r25, 0x07	; 7
     fe8:	15 96       	adiw	r26, 0x05	; 5
     fea:	8c 91       	ld	r24, X
     fec:	15 97       	sbiw	r26, 0x05	; 5
     fee:	88 0f       	add	r24, r24
     ff0:	88 0f       	add	r24, r24
     ff2:	88 0f       	add	r24, r24
     ff4:	89 0f       	add	r24, r25
     ff6:	80 93 f3 00 	sts	0x00F3, r24
     ffa:	13 96       	adiw	r26, 0x03	; 3
     ffc:	9c 91       	ld	r25, X
     ffe:	13 97       	sbiw	r26, 0x03	; 3
    1000:	92 95       	swap	r25
    1002:	96 95       	lsr	r25
    1004:	97 70       	andi	r25, 0x07	; 7
    1006:	14 96       	adiw	r26, 0x04	; 4
    1008:	8c 91       	ld	r24, X
    100a:	14 97       	sbiw	r26, 0x04	; 4
    100c:	88 0f       	add	r24, r24
    100e:	88 0f       	add	r24, r24
    1010:	88 0f       	add	r24, r24
    1012:	89 0f       	add	r24, r25
    1014:	80 93 f2 00 	sts	0x00F2, r24
    1018:	12 96       	adiw	r26, 0x02	; 2
    101a:	9c 91       	ld	r25, X
    101c:	12 97       	sbiw	r26, 0x02	; 2
    101e:	92 95       	swap	r25
    1020:	96 95       	lsr	r25
    1022:	97 70       	andi	r25, 0x07	; 7
    1024:	13 96       	adiw	r26, 0x03	; 3
    1026:	8c 91       	ld	r24, X
    1028:	13 97       	sbiw	r26, 0x03	; 3
    102a:	88 0f       	add	r24, r24
    102c:	88 0f       	add	r24, r24
    102e:	88 0f       	add	r24, r24
    1030:	89 0f       	add	r24, r25
    1032:	80 93 f1 00 	sts	0x00F1, r24
    1036:	12 96       	adiw	r26, 0x02	; 2
    1038:	8c 91       	ld	r24, X
    103a:	12 97       	sbiw	r26, 0x02	; 2
    103c:	88 0f       	add	r24, r24
    103e:	88 0f       	add	r24, r24
    1040:	88 0f       	add	r24, r24
    1042:	80 93 f0 00 	sts	0x00F0, r24
    1046:	ef ee       	ldi	r30, 0xEF	; 239
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 61       	ori	r24, 0x10	; 16
    104e:	80 83       	st	Z, r24
    1050:	1c c0       	rjmp	.+56     	; 0x108a <__stack+0x78b>
          else              { Can_set_std_id(cmd->id.std);}
    1052:	12 96       	adiw	r26, 0x02	; 2
    1054:	8c 91       	ld	r24, X
    1056:	12 97       	sbiw	r26, 0x02	; 2
    1058:	86 95       	lsr	r24
    105a:	86 95       	lsr	r24
    105c:	86 95       	lsr	r24
    105e:	13 96       	adiw	r26, 0x03	; 3
    1060:	9c 91       	ld	r25, X
    1062:	13 97       	sbiw	r26, 0x03	; 3
    1064:	e0 e2       	ldi	r30, 0x20	; 32
    1066:	9e 9f       	mul	r25, r30
    1068:	80 0d       	add	r24, r0
    106a:	11 24       	eor	r1, r1
    106c:	80 93 f3 00 	sts	0x00F3, r24
    1070:	12 96       	adiw	r26, 0x02	; 2
    1072:	8c 91       	ld	r24, X
    1074:	12 97       	sbiw	r26, 0x02	; 2
    1076:	82 95       	swap	r24
    1078:	88 0f       	add	r24, r24
    107a:	80 7e       	andi	r24, 0xE0	; 224
    107c:	80 93 f2 00 	sts	0x00F2, r24
    1080:	ef ee       	ldi	r30, 0xEF	; 239
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	8f 7e       	andi	r24, 0xEF	; 239
    1088:	80 83       	st	Z, r24
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    108a:	16 96       	adiw	r26, 0x06	; 6
    108c:	8c 91       	ld	r24, X
    108e:	16 97       	sbiw	r26, 0x06	; 6
    1090:	88 23       	and	r24, r24
    1092:	91 f0       	breq	.+36     	; 0x10b8 <__stack+0x7b9>
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	8a ef       	ldi	r24, 0xFA	; 250
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	17 96       	adiw	r26, 0x07	; 7
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	18 97       	sbiw	r26, 0x08	; 8
    10a2:	e2 0f       	add	r30, r18
    10a4:	f1 1d       	adc	r31, r1
    10a6:	30 81       	ld	r19, Z
    10a8:	fc 01       	movw	r30, r24
    10aa:	30 83       	st	Z, r19
    10ac:	2f 5f       	subi	r18, 0xFF	; 255
    10ae:	16 96       	adiw	r26, 0x06	; 6
    10b0:	3c 91       	ld	r19, X
    10b2:	16 97       	sbiw	r26, 0x06	; 6
    10b4:	23 17       	cp	r18, r19
    10b6:	88 f3       	brcs	.-30     	; 0x109a <__stack+0x79b>
          u8_temp=~0; Can_set_ext_msk(u8_temp);
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	89 83       	std	Y+1, r24	; 0x01
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	92 95       	swap	r25
    10c0:	96 95       	lsr	r25
    10c2:	97 70       	andi	r25, 0x07	; 7
    10c4:	8c 81       	ldd	r24, Y+4	; 0x04
    10c6:	88 0f       	add	r24, r24
    10c8:	88 0f       	add	r24, r24
    10ca:	88 0f       	add	r24, r24
    10cc:	89 0f       	add	r24, r25
    10ce:	80 93 f7 00 	sts	0x00F7, r24
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	92 95       	swap	r25
    10d6:	96 95       	lsr	r25
    10d8:	97 70       	andi	r25, 0x07	; 7
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 0f       	add	r24, r24
    10de:	88 0f       	add	r24, r24
    10e0:	88 0f       	add	r24, r24
    10e2:	89 0f       	add	r24, r25
    10e4:	80 93 f6 00 	sts	0x00F6, r24
    10e8:	99 81       	ldd	r25, Y+1	; 0x01
    10ea:	92 95       	swap	r25
    10ec:	96 95       	lsr	r25
    10ee:	97 70       	andi	r25, 0x07	; 7
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	88 0f       	add	r24, r24
    10f4:	88 0f       	add	r24, r24
    10f6:	88 0f       	add	r24, r24
    10f8:	89 0f       	add	r24, r25
    10fa:	80 93 f5 00 	sts	0x00F5, r24
    10fe:	29 81       	ldd	r18, Y+1	; 0x01
    1100:	22 0f       	add	r18, r18
    1102:	22 0f       	add	r18, r18
    1104:	22 0f       	add	r18, r18
    1106:	84 ef       	ldi	r24, 0xF4	; 244
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	fc 01       	movw	r30, r24
    110c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    110e:	ef ee       	ldi	r30, 0xEF	; 239
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	30 81       	ld	r19, Z
    1114:	16 96       	adiw	r26, 0x06	; 6
    1116:	2c 91       	ld	r18, X
    1118:	16 97       	sbiw	r26, 0x06	; 6
    111a:	23 2b       	or	r18, r19
    111c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	1a 96       	adiw	r26, 0x0a	; 10
    1122:	2c 93       	st	X, r18
    1124:	dc 01       	movw	r26, r24
    1126:	2c 91       	ld	r18, X
    1128:	24 60       	ori	r18, 0x04	; 4
    112a:	2c 93       	st	X, r18
    112c:	a0 ef       	ldi	r26, 0xF0	; 240
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	2c 91       	ld	r18, X
    1132:	24 60       	ori	r18, 0x04	; 4
    1134:	2c 93       	st	X, r18
          Can_set_rplv();
    1136:	20 81       	ld	r18, Z
    1138:	20 62       	ori	r18, 0x20	; 32
    113a:	20 83       	st	Z, r18
          Can_set_idemsk();
    113c:	dc 01       	movw	r26, r24
    113e:	2c 91       	ld	r18, X
    1140:	21 60       	ori	r18, 0x01	; 1
    1142:	2c 93       	st	X, r18
          Can_config_rx();       
    1144:	80 81       	ld	r24, Z
    1146:	8f 73       	andi	r24, 0x3F	; 63
    1148:	80 83       	st	Z, r24
    114a:	80 81       	ld	r24, Z
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	80 83       	st	Z, r24
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1150:	80 e0       	ldi	r24, 0x00	; 0
          Can_set_dlc(cmd->dlc);
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
          Can_set_rplv();
          Can_set_idemsk();
          Can_config_rx();       
          break;
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <__stack+0x865>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1154:	19 96       	adiw	r26, 0x09	; 9
    1156:	1c 92       	st	X, r1
    {
      cmd->status = MOB_NOT_REACHED;
      return CAN_CMD_REFUSED;
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1158:	80 e0       	ldi	r24, 0x00	; 0
          break;
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
          break;
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <__stack+0x865>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    115c:	8f e1       	ldi	r24, 0x1F	; 31
    115e:	19 96       	adiw	r26, 0x09	; 9
    1160:	8c 93       	st	X, r24
      return CAN_CMD_REFUSED;
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
}
    1164:	0f 90       	pop	r0
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd, uint8_t mob_number)
{
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
    uint8_t a_status, rtn_val;
	can_id_t	received_id;
     
    a_status = cmd->status;
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1174:	88 23       	and	r24, r24
    1176:	09 f4       	brne	.+2      	; 0x117a <can_get_status+0xe>
    1178:	e3 c0       	rjmp	.+454    	; 0x1340 <can_get_status+0x1d4>
    117a:	8f 31       	cpi	r24, 0x1F	; 31
    117c:	09 f4       	brne	.+2      	; 0x1180 <can_get_status+0x14>
    117e:	e2 c0       	rjmp	.+452    	; 0x1344 <can_get_status+0x1d8>
    1180:	8f 3f       	cpi	r24, 0xFF	; 255
    1182:	09 f4       	brne	.+2      	; 0x1186 <can_get_status+0x1a>
    1184:	e1 c0       	rjmp	.+450    	; 0x1348 <can_get_status+0x1dc>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(mob_number);
    1186:	62 95       	swap	r22
    1188:	60 7f       	andi	r22, 0xF0	; 240
    118a:	60 93 ed 00 	sts	0x00ED, r22
    a_status = can_get_mob_status();
    118e:	0e 94 4d 02 	call	0x49a	; 0x49a <can_get_mob_status>
    
    switch (a_status)
    1192:	80 32       	cpi	r24, 0x20	; 32
    1194:	61 f0       	breq	.+24     	; 0x11ae <can_get_status+0x42>
    1196:	20 f4       	brcc	.+8      	; 0x11a0 <can_get_status+0x34>
    1198:	88 23       	and	r24, r24
    119a:	09 f4       	brne	.+2      	; 0x119e <can_get_status+0x32>
    119c:	d7 c0       	rjmp	.+430    	; 0x134c <can_get_status+0x1e0>
    119e:	c6 c0       	rjmp	.+396    	; 0x132c <can_get_status+0x1c0>
    11a0:	80 34       	cpi	r24, 0x40	; 64
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <can_get_status+0x3a>
    11a4:	b8 c0       	rjmp	.+368    	; 0x1316 <can_get_status+0x1aa>
    11a6:	80 3a       	cpi	r24, 0xA0	; 160
    11a8:	09 f4       	brne	.+2      	; 0x11ac <can_get_status+0x40>
    11aa:	5c c0       	rjmp	.+184    	; 0x1264 <can_get_status+0xf8>
    11ac:	bf c0       	rjmp	.+382    	; 0x132c <can_get_status+0x1c0>
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
			 
        case MOB_RX_COMPLETED:
			LED_toggle(LED7);	//Toggle LED0 when the appropriate message is received.
    11ae:	87 e0       	ldi	r24, 0x07	; 7
    11b0:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
			delay_ms(100);
    11b4:	84 e6       	ldi	r24, 0x64	; 100
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
			LED_toggle(LED7);
    11bc:	87 e0       	ldi	r24, 0x07	; 7
    11be:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
			delay_ms(100);
    11c2:	84 e6       	ldi	r24, 0x64	; 100
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
	    
            cmd->ctrl.rtr = Can_get_rtr();
    11ca:	80 91 f0 00 	lds	r24, 0x00F0
    11ce:	82 fb       	bst	r24, 2
    11d0:	88 27       	eor	r24, r24
    11d2:	80 f9       	bld	r24, 0
    11d4:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    11d6:	80 91 ef 00 	lds	r24, 0x00EF
    11da:	84 ff       	sbrs	r24, 4
    11dc:	2d c0       	rjmp	.+90     	; 0x1238 <can_get_status+0xcc>
            {
	            cmd->ctrl.ide = 1; // extended frame
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	8b 87       	std	Y+11, r24	; 0x0b
	            Can_get_ext_id(cmd->id.ext);
    11e2:	e3 ef       	ldi	r30, 0xF3	; 243
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	86 95       	lsr	r24
    11ea:	86 95       	lsr	r24
    11ec:	86 95       	lsr	r24
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	a2 ef       	ldi	r26, 0xF2	; 242
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	8c 91       	ld	r24, X
    11f6:	90 81       	ld	r25, Z
    11f8:	86 95       	lsr	r24
    11fa:	86 95       	lsr	r24
    11fc:	86 95       	lsr	r24
    11fe:	20 e2       	ldi	r18, 0x20	; 32
    1200:	92 9f       	mul	r25, r18
    1202:	80 0d       	add	r24, r0
    1204:	11 24       	eor	r1, r1
    1206:	8c 83       	std	Y+4, r24	; 0x04
    1208:	e1 ef       	ldi	r30, 0xF1	; 241
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	9c 91       	ld	r25, X
    1210:	86 95       	lsr	r24
    1212:	86 95       	lsr	r24
    1214:	86 95       	lsr	r24
    1216:	20 e2       	ldi	r18, 0x20	; 32
    1218:	92 9f       	mul	r25, r18
    121a:	80 0d       	add	r24, r0
    121c:	11 24       	eor	r1, r1
    121e:	8b 83       	std	Y+3, r24	; 0x03
    1220:	80 91 f0 00 	lds	r24, 0x00F0
    1224:	90 81       	ld	r25, Z
    1226:	86 95       	lsr	r24
    1228:	86 95       	lsr	r24
    122a:	86 95       	lsr	r24
    122c:	20 e2       	ldi	r18, 0x20	; 32
    122e:	92 9f       	mul	r25, r18
    1230:	80 0d       	add	r24, r0
    1232:	11 24       	eor	r1, r1
    1234:	8a 83       	std	Y+2, r24	; 0x02
    1236:	07 c0       	rjmp	.+14     	; 0x1246 <can_get_status+0xda>
            }
            else // else standard frame
            {
	            cmd->ctrl.ide = 0;
    1238:	1b 86       	std	Y+11, r1	; 0x0b
//	            Can_get_std_id(cmd->id.std);
				Can_get_std_id(received_id);
    123a:	e3 ef       	ldi	r30, 0xF3	; 243
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 91 f2 00 	lds	r24, 0x00F2
    1244:	80 81       	ld	r24, Z
            }
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
    1246:	80 e2       	ldi	r24, 0x20	; 32
    1248:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
    124c:	98 85       	ldd	r25, Y+8	; 0x08
    124e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <can_get_data>
			rtn_val = MOB_RX_COMPLETED;
			Can_mob_abort();        // Freed the MOb
    1252:	ef ee       	ldi	r30, 0xEF	; 239
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8f 73       	andi	r24, 0x3F	; 63
    125a:	80 83       	st	Z, r24
			Can_clear_status_mob(); //   Reset MOb status
    125c:	10 92 ee 00 	sts	0x00EE, r1
			
            // Status field of descriptor: 0x20 if Rx completed
			
			cmd->status = a_status;
			can_get_data(cmd->pt_data);
			rtn_val = MOB_RX_COMPLETED;
    1260:	80 e2       	ldi	r24, 0x20	; 32
			Can_mob_abort();        // Freed the MOb
			Can_clear_status_mob(); //   Reset MOb status
			break;
    1262:	75 c0       	rjmp	.+234    	; 0x134e <can_get_status+0x1e2>
        case MOB_RX_COMPLETED_DLCW:
			//LED_Reg_Write(0x01);	//Toggle LED0 when the appropriate message is received.
			//delay_ms(500);
			//LED_Reg_Write(0x00);	//Toggle LED0 when the appropriate message is received.

            cmd->ctrl.rtr = Can_get_rtr();
    1264:	80 91 f0 00 	lds	r24, 0x00F0
    1268:	82 fb       	bst	r24, 2
    126a:	88 27       	eor	r24, r24
    126c:	80 f9       	bld	r24, 0
    126e:	8a 87       	std	Y+10, r24	; 0x0a
            if (Can_get_ide()) // if extended frame
    1270:	80 91 ef 00 	lds	r24, 0x00EF
    1274:	84 ff       	sbrs	r24, 4
    1276:	2d c0       	rjmp	.+90     	; 0x12d2 <can_get_status+0x166>
            {
                cmd->ctrl.ide = 1; // extended frame
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	8b 87       	std	Y+11, r24	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    127c:	e3 ef       	ldi	r30, 0xF3	; 243
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	86 95       	lsr	r24
    1284:	86 95       	lsr	r24
    1286:	86 95       	lsr	r24
    1288:	8d 83       	std	Y+5, r24	; 0x05
    128a:	a2 ef       	ldi	r26, 0xF2	; 242
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	8c 91       	ld	r24, X
    1290:	90 81       	ld	r25, Z
    1292:	86 95       	lsr	r24
    1294:	86 95       	lsr	r24
    1296:	86 95       	lsr	r24
    1298:	20 e2       	ldi	r18, 0x20	; 32
    129a:	92 9f       	mul	r25, r18
    129c:	80 0d       	add	r24, r0
    129e:	11 24       	eor	r1, r1
    12a0:	8c 83       	std	Y+4, r24	; 0x04
    12a2:	e1 ef       	ldi	r30, 0xF1	; 241
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	9c 91       	ld	r25, X
    12aa:	86 95       	lsr	r24
    12ac:	86 95       	lsr	r24
    12ae:	86 95       	lsr	r24
    12b0:	20 e2       	ldi	r18, 0x20	; 32
    12b2:	92 9f       	mul	r25, r18
    12b4:	80 0d       	add	r24, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	80 91 f0 00 	lds	r24, 0x00F0
    12be:	90 81       	ld	r25, Z
    12c0:	86 95       	lsr	r24
    12c2:	86 95       	lsr	r24
    12c4:	86 95       	lsr	r24
    12c6:	20 e2       	ldi	r18, 0x20	; 32
    12c8:	92 9f       	mul	r25, r18
    12ca:	80 0d       	add	r24, r0
    12cc:	11 24       	eor	r1, r1
    12ce:	8a 83       	std	Y+2, r24	; 0x02
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <can_get_status+0x18c>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    12d2:	1b 86       	std	Y+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    12d4:	e3 ef       	ldi	r30, 0xF3	; 243
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	82 95       	swap	r24
    12dc:	86 95       	lsr	r24
    12de:	87 70       	andi	r24, 0x07	; 7
    12e0:	8b 83       	std	Y+3, r24	; 0x03
    12e2:	80 91 f2 00 	lds	r24, 0x00F2
    12e6:	90 81       	ld	r25, Z
    12e8:	99 0f       	add	r25, r25
    12ea:	99 0f       	add	r25, r25
    12ec:	99 0f       	add	r25, r25
    12ee:	82 95       	swap	r24
    12f0:	86 95       	lsr	r24
    12f2:	87 70       	andi	r24, 0x07	; 7
    12f4:	89 0f       	add	r24, r25
    12f6:	8a 83       	std	Y+2, r24	; 0x02
                }
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    12f8:	80 ea       	ldi	r24, 0xA0	; 160
    12fa:	89 87       	std	Y+9, r24	; 0x09
			can_get_data(cmd->pt_data);
    12fc:	8f 81       	ldd	r24, Y+7	; 0x07
    12fe:	98 85       	ldd	r25, Y+8	; 0x08
    1300:	0e 94 63 02 	call	0x4c6	; 0x4c6 <can_get_data>
			
			Can_mob_abort();        // Freed the MO
    1304:	ef ee       	ldi	r30, 0xEF	; 239
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 73       	andi	r24, 0x3F	; 63
    130c:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   Reset MOb status
    130e:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_RX_COMPLETED_DLCW;
    1312:	80 ea       	ldi	r24, 0xA0	; 160
            break;
    1314:	1c c0       	rjmp	.+56     	; 0x134e <can_get_status+0x1e2>
 
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1316:	80 e4       	ldi	r24, 0x40	; 64
    1318:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MO
    131a:	ef ee       	ldi	r30, 0xEF	; 239
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8f 73       	andi	r24, 0x3F	; 63
    1322:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1324:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = MOB_TX_COMPLETED;
    1328:	80 e4       	ldi	r24, 0x40	; 64
            break;
    132a:	11 c0       	rjmp	.+34     	; 0x134e <can_get_status+0x1e2>
 
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    132c:	89 87       	std	Y+9, r24	; 0x09
			Can_mob_abort();        // Freed the MOb
    132e:	ef ee       	ldi	r30, 0xEF	; 239
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	8f 73       	andi	r24, 0x3F	; 63
    1336:	80 83       	st	Z, r24
            Can_clear_status_mob(); //   and reset MOb status
    1338:	10 92 ee 00 	sts	0x00EE, r1
            rtn_val = CAN_STATUS_ERROR;
    133c:	82 e0       	ldi	r24, 0x02	; 2
            break;
    133e:	07 c0       	rjmp	.+14     	; 0x134e <can_get_status+0x1e2>
	can_id_t	received_id;
     
    a_status = cmd->status;
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    {
        return CAN_STATUS_ERROR;
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	05 c0       	rjmp	.+10     	; 0x134e <can_get_status+0x1e2>
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	03 c0       	rjmp	.+6      	; 0x134e <can_get_status+0x1e2>
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	01 c0       	rjmp	.+2      	; 0x134e <can_get_status+0x1e2>
    
    switch (a_status)
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    134c:	81 e0       	ldi	r24, 0x01	; 1
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
}
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	08 95       	ret

00001354 <LED_toggle>:
	LEDPORT |= (1 << LED);
}

void LED_toggle(uint8_t LED) {
	
	if(LED == 7)
    1354:	87 30       	cpi	r24, 0x07	; 7
    1356:	29 f4       	brne	.+10     	; 0x1362 <LED_toggle+0xe>
	{
		PORTD ^= 0x01;
    1358:	2b b1       	in	r18, 0x0b	; 11
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	92 27       	eor	r25, r18
    135e:	9b b9       	out	0x0b, r25	; 11
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <LED_toggle+0x1c>
	}
	if(LED == 3)
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	29 f4       	brne	.+10     	; 0x1370 <LED_toggle+0x1c>
	{
		PORTC ^= 0x01;
    1366:	98 b1       	in	r25, 0x08	; 8
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	89 27       	eor	r24, r25
    136c:	88 b9       	out	0x08, r24	; 8
    136e:	08 95       	ret
	}
	else
		LEDPORT ^= (1 << LED);
    1370:	45 b1       	in	r20, 0x05	; 5
    1372:	21 e0       	ldi	r18, 0x01	; 1
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	b9 01       	movw	r22, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <LED_toggle+0x2a>
    137a:	66 0f       	add	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	8a 95       	dec	r24
    1380:	e2 f7       	brpl	.-8      	; 0x137a <LED_toggle+0x26>
    1382:	cb 01       	movw	r24, r22
    1384:	84 27       	eor	r24, r20
    1386:	85 b9       	out	0x05, r24	; 5
    1388:	08 95       	ret

0000138a <main>:
	}
}

void sys_init(void) {
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
    138a:	e1 e6       	ldi	r30, 0x61	; 97
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 e8       	ldi	r24, 0x80	; 128
    1390:	80 83       	st	Z, r24
	CLKPR = 0x00;
    1392:	10 82       	st	Z, r1
}

void io_init(void) {
	
	// Init PORTB[7:0] // LED port
	DDRB = 0xFE;
    1394:	8e ef       	ldi	r24, 0xFE	; 254
    1396:	84 b9       	out	0x04, r24	; 4
	
	// Init PORTC[7:0] // PORTC[3:2] => RXCAN:TXCAN
	DDRC = 0x01;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
    139c:	18 b8       	out	0x08, r1	; 8
	
	// Init PORTD[7:0]
	DDRD = 0x09;		// PD3 is the SS for SPI communications.
    139e:	99 e0       	ldi	r25, 0x09	; 9
    13a0:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x01;		// PD3 should only go high during an SPI message.
    13a2:	8b b9       	out	0x0b, r24	; 11
	
	// Init PORTE[2:0]
	DDRE = 0x00;
    13a4:	1d b8       	out	0x0d, r1	; 13
	PORTD = 0x00;
    13a6:	1b b8       	out	0x0b, r1	; 11
	// Make sure sys clock is at least 8MHz
	CLKPR = 0x80;  
	CLKPR = 0x00;
	
	io_init();	
	timer_init();
    13a8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <timer_init>
	adc_initialize();
    13ac:	0e 94 5d 00 	call	0xba	; 0xba <adc_initialize>
	can_init(0);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <can_init>
	can_init_mobs();
    13b6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <can_init_mobs>
	spi_initialize_master();
    13ba:	0e 94 4f 0a 	call	0x149e	; 0x149e <spi_initialize_master>
	uint8_t	i = 0;
	uint8_t spi_char = 0;
	uint8_t spi_s_message = 0xAA;	// Message to be sent to the slave via SPI.
	
	// Enable global interrupts for Timer execution
	sei();
    13be:	78 94       	sei
	
	// Flash LEDs to indicate program startup
	LED_toggle(LED3);
    13c0:	83 e0       	ldi	r24, 0x03	; 3
    13c2:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
	delay_ms(500);
    13c6:	84 ef       	ldi	r24, 0xF4	; 244
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
	LED_toggle(LED3);
    13ce:	83 e0       	ldi	r24, 0x03	; 3
    13d0:	0e 94 aa 09 	call	0x1354	; 0x1354 <LED_toggle>
	delay_ms(250);
    13d4:	8a ef       	ldi	r24, 0xFA	; 250
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <delay_ms>
    13dc:	e6 e3       	ldi	r30, 0x36	; 54
    13de:	f1 e0       	ldi	r31, 0x01	; 1
    13e0:	8e e3       	ldi	r24, 0x3E	; 62
    13e2:	91 e0       	ldi	r25, 0x01	; 1
	//LED_toggle(LED6);
	
	for (i = 0; i < 8; i ++)
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
    13e4:	11 92       	st	Z+, r1
	delay_ms(500);
	LED_toggle(LED3);
	delay_ms(250);
	//LED_toggle(LED6);
	
	for (i = 0; i < 8; i ++)
    13e6:	e8 17       	cp	r30, r24
    13e8:	f9 07       	cpc	r31, r25
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <main+0x5a>
	{
		receive_arr[i] = 0;			// Reset the message array to zero after each message.
	}
			
	send_now = 0;
    13ec:	10 92 2c 01 	sts	0x012C, r1
	send_hk = 0;
    13f0:	10 92 35 01 	sts	0x0135, r1
	send_data = 0;	
    13f4:	10 92 46 01 	sts	0x0146, r1
    13f8:	00 e1       	ldi	r16, 0x10	; 16
    13fa:	11 e0       	ldi	r17, 0x01	; 1
    13fc:	c8 e1       	ldi	r28, 0x18	; 24
    13fe:	d1 e0       	ldi	r29, 0x01	; 1
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    1400:	0f 2e       	mov	r0, r31
    1402:	fb ea       	ldi	r31, 0xAB	; 171
    1404:	cf 2e       	mov	r12, r31
    1406:	f0 2d       	mov	r31, r0
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    1408:	0f 2e       	mov	r0, r31
    140a:	f0 ef       	ldi	r31, 0xF0	; 240
    140c:	df 2e       	mov	r13, r31
    140e:	f0 2d       	mov	r31, r0
    1410:	a0 2e       	mov	r10, r16
    1412:	b1 2e       	mov	r11, r17
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
			send_arr[3] = 0x55;
    1414:	0f 2e       	mov	r0, r31
    1416:	f3 e1       	ldi	r31, 0x13	; 19
    1418:	ef 2e       	mov	r14, r31
    141a:	f1 e0       	ldi	r31, 0x01	; 1
    141c:	ff 2e       	mov	r15, r31
    141e:	f0 2d       	mov	r31, r0
    1420:	0f 2e       	mov	r0, r31
    1422:	f5 e5       	ldi	r31, 0x55	; 85
    1424:	9f 2e       	mov	r9, r31
    1426:	f0 2d       	mov	r31, r0
	/*		Begin Main Program Loop					*/	
    while(1)
    {
		
		/* CHECK FOR A GENERAL INCOMING MESSAGE INTO MOB0 */
		can_check_general();
    1428:	0e 94 70 00 	call	0xe0	; 0xe0 <can_check_general>
		
		/* CHECK FOR HOUSEKEEPING REQUEST */
		can_check_housekeep();
    142c:	0e 94 3a 01 	call	0x274	; 0x274 <can_check_housekeep>

		spi_char = 0;

		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
    1430:	80 91 2c 01 	lds	r24, 0x012C
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	69 f4       	brne	.+26     	; 0x1452 <main+0xc8>
    1438:	ea 2d       	mov	r30, r10
    143a:	fb 2d       	mov	r31, r11
		{		
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
    143c:	c1 92       	st	Z+, r12

		/*	REPLY TO MESSAGES FROM MOB4 */
		
		if (send_now == 1)		// Send a reply to the message that was received!
		{		
			for (i = 0; i < 8; i ++)
    143e:	ec 17       	cp	r30, r28
    1440:	fd 07       	cpc	r31, r29
    1442:	e1 f7       	brne	.-8      	; 0x143c <main+0xb2>
			{
				send_arr[i] = 0xAB;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB7);		//CAN1_MB7 is the command reception MB.
    1444:	61 e1       	ldi	r22, 0x11	; 17
    1446:	8a 2d       	mov	r24, r10
    1448:	9b 2d       	mov	r25, r11
    144a:	0e 94 cc 01 	call	0x398	; 0x398 <can_send_message>
			send_now = 0;
    144e:	10 92 2c 01 	sts	0x012C, r1
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
    1452:	80 91 35 01 	lds	r24, 0x0135
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	69 f4       	brne	.+26     	; 0x1474 <main+0xea>
    145a:	ea 2d       	mov	r30, r10
    145c:	fb 2d       	mov	r31, r11
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
    145e:	d1 92       	st	Z+, r13
			send_now = 0;
		}
		
		if (send_hk == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    1460:	ec 17       	cp	r30, r28
    1462:	fd 07       	cpc	r31, r29
    1464:	e1 f7       	brne	.-8      	; 0x145e <main+0xd4>
			{
				send_arr[i] = 0xF0;		// Message to be sent back to the OBC.
			}
			can_send_message(&(send_arr[0]), CAN1_MB6);		//CAN1_MB6 is the HK reception MB.
    1466:	60 e1       	ldi	r22, 0x10	; 16
    1468:	8a 2d       	mov	r24, r10
    146a:	9b 2d       	mov	r25, r11
    146c:	0e 94 cc 01 	call	0x398	; 0x398 <can_send_message>
			send_hk = 0;
    1470:	10 92 35 01 	sts	0x0135, r1
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
    1474:	20 91 46 01 	lds	r18, 0x0146
    1478:	21 30       	cpi	r18, 0x01	; 1
    147a:	b1 f6       	brne	.-84     	; 0x1428 <main+0x9e>
    147c:	f8 01       	movw	r30, r16
		{
			for (i = 0; i < 8; i ++)
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
    147e:	11 92       	st	Z+, r1
			send_hk = 0;
		}
		
		if (send_data == 1)		// Send a reply to the message that was received!
		{
			for (i = 0; i < 8; i ++)
    1480:	ec 17       	cp	r30, r28
    1482:	fd 07       	cpc	r31, r29
    1484:	e1 f7       	brne	.-8      	; 0x147e <main+0xf4>
			{
				send_arr[i] = 0x00;		// Message to be sent back to the OBC.
			}
			
			adc_read(&send_arr[0]);
    1486:	c8 01       	movw	r24, r16
    1488:	0e 94 67 00 	call	0xce	; 0xce <adc_read>
			send_arr[3] = 0x55;
    148c:	f7 01       	movw	r30, r14
    148e:	90 82       	st	Z, r9
			
			can_send_message(&(send_arr[0]), CAN1_MB0);		//CAN1_MB0 is the data reception MB.
    1490:	6a e0       	ldi	r22, 0x0A	; 10
    1492:	c8 01       	movw	r24, r16
    1494:	0e 94 cc 01 	call	0x398	; 0x398 <can_send_message>
			send_data = 0;
    1498:	10 92 46 01 	sts	0x0146, r1
    149c:	c5 cf       	rjmp	.-118    	; 0x1428 <main+0x9e>

0000149e <spi_initialize_master>:
	uint8_t* reg_ptr;
	uint8_t temp = 0;
	
	reg_ptr = MCUCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr & (temp);	// We set SPIPS to 0 (select MISO, so NOT MISO_A)
    149e:	85 b7       	in	r24, 0x35	; 53
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	85 bf       	out	0x35, r24	; 53
	
	reg_ptr = SPCR_BASE;
	temp = 0b01111111;
	*reg_ptr = *reg_ptr | (temp);	// Set SPE to 1, MSB first, set as master, spiclk = fioclk/128, CPOL = 1 (SCK high when idle)
	temp = 0b01011111;
	*reg_ptr = *reg_ptr & (temp);	// Turn off SPI interrupt if enabled, DORD = 0 ==> MSB first.
    14a4:	8f e5       	ldi	r24, 0x5F	; 95
    14a6:	8c bd       	out	0x2c, r24	; 44
    14a8:	08 95       	ret

000014aa <__vector_12>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer.h"

ISR(TIMER1_COMPA_vect) {
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	8f 93       	push	r24
	CTC_flag = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	80 93 51 01 	sts	0x0151, r24
}
    14bc:	8f 91       	pop	r24
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	0f 90       	pop	r0
    14c4:	1f 90       	pop	r1
    14c6:	18 95       	reti

000014c8 <timer_init>:

// This function initializes a 16-bit timer used for delays.
void timer_init(void) {
	
	TIMSK1 = 0x00; //Disable timer interrupts
    14c8:	10 92 6f 00 	sts	0x006F, r1
	TCCR1A = 0x00; //Timer not connected to any pins
    14cc:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0A; //CTC mode; Timer_Rate = System_CLK/8 = 1MHz
    14d0:	8a e0       	ldi	r24, 0x0A	; 10
    14d2:	80 93 81 00 	sts	0x0081, r24
    14d6:	08 95       	ret

000014d8 <delay_us>:
// if timer rate is set to 1MHz frequency. For example, this 
// project uses a system clock of 8MHz. Timer1 rate is set to
// System Clock divided by 8 which is 1MHz (in timer_init). 
// Therefore the "us" parameter truly is 1us.
void delay_us(uint16_t us) {
	CTC_flag = 0; //Clear CTC Interrupt flag
    14d8:	10 92 51 01 	sts	0x0151, r1
	TCNT1 = 0x0000; //Clear timer
    14dc:	10 92 85 00 	sts	0x0085, r1
    14e0:	10 92 84 00 	sts	0x0084, r1
	OCR1A = us; //Load compare value with desired delay in us
    14e4:	90 93 89 00 	sts	0x0089, r25
    14e8:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	80 93 6f 00 	sts	0x006F, r24
	while(!CTC_flag); //wait for the designated number of us
    14f2:	80 91 51 01 	lds	r24, 0x0151
    14f6:	88 23       	and	r24, r24
    14f8:	e1 f3       	breq	.-8      	; 0x14f2 <delay_us+0x1a>
}
    14fa:	08 95       	ret

000014fc <delay_ms>:

void delay_ms(uint16_t ms) {
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	8c 01       	movw	r16, r24
	for(uint16_t i=0; i<ms; i++) {
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	51 f0       	breq	.+20     	; 0x151e <delay_ms+0x22>
    150a:	c0 e0       	ldi	r28, 0x00	; 0
    150c:	d0 e0       	ldi	r29, 0x00	; 0
		delay_us(1000);
    150e:	88 ee       	ldi	r24, 0xE8	; 232
    1510:	93 e0       	ldi	r25, 0x03	; 3
    1512:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <delay_us>
	TIMSK1 = 0x02; //Enable OCIE1A Interrupt
	while(!CTC_flag); //wait for the designated number of us
}

void delay_ms(uint16_t ms) {
	for(uint16_t i=0; i<ms; i++) {
    1516:	21 96       	adiw	r28, 0x01	; 1
    1518:	c0 17       	cp	r28, r16
    151a:	d1 07       	cpc	r29, r17
    151c:	c1 f7       	brne	.-16     	; 0x150e <delay_ms+0x12>
		delay_us(1000);
	}
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	08 95       	ret

00001528 <__tablejump2__>:
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31

0000152c <__tablejump__>:
    152c:	05 90       	lpm	r0, Z+
    152e:	f4 91       	lpm	r31, Z
    1530:	e0 2d       	mov	r30, r0
    1532:	09 94       	ijmp

00001534 <_exit>:
    1534:	f8 94       	cli

00001536 <__stop_program>:
    1536:	ff cf       	rjmp	.-2      	; 0x1536 <__stop_program>
